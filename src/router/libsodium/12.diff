diff -urpN libsodium-1.0.11/AUTHORS libsodium-1.0.12/AUTHORS
--- libsodium-1.0.11/AUTHORS	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/AUTHORS	2017-03-12 18:16:47.000000000 +0100
@@ -13,8 +13,6 @@ blake2                                 J
 
 chacha20                               Daniel J. Bernstein
 
-salsa20                                Daniel J. Bernstein
-
 chacha20poly1305                       Adam Langley
 
 curve25519                             Daniel J. Bernstein
@@ -29,11 +27,13 @@ ed25519                                D
 
 poly1305                               Daniel J. Bernstein
 
-siphash                                Jean-Philippe Aumasson
-                                       Daniel J. Bernstein
+salsa20                                Daniel J. Bernstein
 
 scrypt                                 Colin Percival
 
+siphash                                Jean-Philippe Aumasson
+                                       Daniel J. Bernstein
+
 Implementors
 ============
 
@@ -41,25 +41,47 @@ crypto_aead/aes256gcm/aesni            R
                                        Frank Denis
 
 crypto_aead/chacha20poly1305           Frank Denis
+crypto_aead/xchacha20poly1305
 
-crypto_core/curve25519                 Daniel J. Bernstein
+crypto_auth/hmacsha256                 Colin Percival
+crypto_auth/hmacsha512
+crypto_auth/hmacsha512256
 
 crypto_box/curve25519xsalsa20poly1305  Daniel J. Bernstein
 
+crypto_box/curve25519xchacha20poly1305 Frank Denis
+
+crypto_core/curve25519                 Daniel J. Bernstein
+
 crypto_core/hchacha20                  Frank Denis
 
 crypto_core/hsalsa20                   Daniel J. Bernstein
-crypto_core/salsa20
-crypto_core/salsa2012
-crypto_core/salsa208
+crypto_core/salsa
+
+crypto_generichash/blake2b             Jean-Philippe Aumasson
+                                       Christian Winnerlein
+                                       Samuel Neves
+                                       Zooko Wilcox-O'Hearn
 
 crypto_hash/sha256                     Colin Percival
 crypto_hash/sha512
 crypto_hash/sha512256
 
-crypto_auth/hmacsha256                 Colin Percival
-crypto_auth/hmacsha512
-crypto_auth/hmacsha512256
+crypto_kdf/blake2b                     Frank Denis
+
+crypto_kx                              Frank Denis
+
+crypto_onetimeauth/poly1305/donna      Andrew "floodyberry" Moon
+crypto_onetimeauth/poly1305/sse2
+
+crypto_pwhash/argon2                   Samuel Neves
+                                       Dmitry Khovratovich
+                                       Jean-Philippe Aumasson
+                                       Daniel Dinu
+                                       Thomas Pornin
+
+crypto_pwhash/scryptsalsa208sha256     Colin Percival
+                                       Alexander Peslyak
 
 crypto_scalarmult/curve25519/ref10     Daniel J. Bernstein
 
@@ -69,6 +91,11 @@ crypto_scalarmult/curve25519/sandy2x   T
 
 crypto_secretbox/xsalsa20poly1305      Daniel J. Bernstein
 
+crypto_secretbox/xchacha20poly1305     Frank Denis
+
+crypto_shorthash/siphash24             Jean-Philippe Aumasson
+                                       Daniel J. Bernstein
+
 crypto_sign/ed25519                    Peter Schwabe
                                        Daniel J. Bernstein
                                        Niels Duif
@@ -79,30 +106,15 @@ crypto_stream/aes128ctr                P
 
 crypto_stream/chacha20/ref             Daniel J. Bernstein
 
-crypto_stream/chacha20/vec             Ted Krovetz
-
-crypto_stream/salsa20                  Daniel J. Bernstein
-crypto_stream/salsa2012
-crypto_stream/salsa208
-crypto_stream/xsalsa20
-
-crypto_shorthash/siphash24             Jean-Philippe Aumasson
+crypto_stream/chacha20/dolbeau         Romain Dolbeau
                                        Daniel J. Bernstein
 
-crypto_generichash/blake2b             Jean-Philippe Aumasson
-                                       Christian Winnerlein
-                                       Samuel Neves
-                                       Zooko Wilcox-O'Hearn
+crypto_stream/salsa20/ref              Daniel J. Bernstein
 
-crypto_onetimeauth/poly1305/donna      Andrew "floodyberry" Moon
-
-crypto_onetimeauth/poly1305/sse2       Andrew "floodyberry" Moon
+crypto_stream/salsa20/xmm6int          Romain Dolbeau
+                                       Daniel J. Bernstein
 
-crypto_pwhash/argon2                   Samuel Neves
-                                       Dmitry Khovratovich
-                                       Jean-Philippe Aumasson
-                                       Daniel Dinu
-                                       Thomas Pornin
+crypto_stream/salsa2012/ref            Daniel J. Bernstein
+crypto_stream/salsa2008/ref
 
-crypto_pwhash/scryptsalsa208sha256     Colin Percival
-                                       Alexander Peslyak
+crypto_stream/xchacha20                Frank Denis
diff -urpN libsodium-1.0.11/autogen.sh libsodium-1.0.12/autogen.sh
--- libsodium-1.0.11/autogen.sh	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/autogen.sh	2017-03-06 11:13:57.000000000 +0100
@@ -21,7 +21,7 @@ if [ ! -x "`which automake 2>/dev/null`"
   exit 1
 fi
 
-if [ -x "`which autoreconf 2>/dev/null`" ] ; then
+if autoreconf --version > /dev/null 2>&1 ; then
   exec autoreconf -ivf
 fi
 
diff -urpN libsodium-1.0.11/ChangeLog libsodium-1.0.12/ChangeLog
--- libsodium-1.0.11/ChangeLog	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/ChangeLog	2017-03-12 20:41:28.000000000 +0100
@@ -1,6 +1,45 @@
 
+* Version 1.0.12
+ - Ed25519ph was implemented, adding a multi-part signature API
+(`crypto_sign_init()`, `crypto_sign_update()`, `crypto_sign_final_*()`).
+ - New constants and related accessors have been added for Scrypt and
+Argon2.
+ - XChaCha20 has been implemented. Like XSalsa20, this construction
+extends the ChaCha20 cipher to accept a 192-bit nonce. This makes it safe
+to use ChaCha20 with random nonces.
+ - `crypto_secretbox`, `crypto_box` and `crypto_aead` now offer
+variants leveraging XChaCha20.
+ - SHA-2 is about 20% faster, which also gives a speed boost to
+signature and signature verification.
+ - AVX2 implementations of Salsa20 and ChaCha20 have been added. They
+are twice as fast as the SSE2 implementations. The speed gain is
+even more significant on Windows, that previously didn't use
+vectorized implementations.
+ - New high-level API: `crypto_kdf`, to easily derive one or more
+subkeys from a master key.
+ - Siphash with a 128-bit output has been implemented, and is
+available as `crypto_shorthash_siphashx_*`.
+ - New `*_keygen()` helpers functions have been added to create secret
+keys for all constructions. This improves code clarity and can prevent keys
+from being partially initialized.
+ - A new `randombytes_buf_deterministic()` function was added to
+deterministically fill a memory region with pseudorandom data. This
+function can especially be useful to write reproducible tests.
+ - A preliminary `crypto_kx_*()` API was added to compute shared session
+keys.
+ - AVX2 detection is more reliable.
+ - The pthreads library is not required any more when using MingW.
+ - `contrib/Findsodium.cmake` was added as an example to include
+libsodium in a project using cmake.
+ - Compatibility with gcc 2.x has been restored.
+ - Minimal builds can be checked using `sodium_library_minimal()`.
+ - The `--enable-opt` compilation switch has become compatible with more
+platforms.
+ - Android builds are now using clang on platforms where it is
+available.
+
 * Version 1.0.11
- - sodium_init() is now thread-safe, and can be safely called multiple
+ - `sodium_init()` is now thread-safe, and can be safely called multiple
 times.
  - Android binaries now properly support 64-bit Android, targeting
 platform 24, but without breaking compatibility with platforms 16 and
@@ -146,7 +185,7 @@ required.
  - On Linux, getrandom(2) is being used instead of directly accessing
 /dev/urandom, if the kernel supports this system call.
  - crypto_box_seal() and crypto_box_seal_open() have been added.
- - A solutions for Visual Studio 2015 was added.
+ - Visual Studio 2015 is now supported.
 
 * Version 1.0.2
  - The _easy and _detached APIs now support precalculated keys;
diff -urpN libsodium-1.0.11/configure libsodium-1.0.12/configure
--- libsodium-1.0.11/configure	2016-07-31 16:34:38.000000000 +0200
+++ libsodium-1.0.12/configure	2017-03-12 20:17:06.000000000 +0100
@@ -1,6 +1,6 @@
 #! /bin/sh
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.69 for libsodium 1.0.11.
+# Generated by GNU Autoconf 2.69 for libsodium 1.0.12.
 #
 # Report bugs to <https://github.com/jedisct1/libsodium/issues>.
 #
@@ -590,8 +590,8 @@ MAKEFLAGS=
 # Identity of this package.
 PACKAGE_NAME='libsodium'
 PACKAGE_TARNAME='libsodium'
-PACKAGE_VERSION='1.0.11'
-PACKAGE_STRING='libsodium 1.0.11'
+PACKAGE_VERSION='1.0.12'
+PACKAGE_STRING='libsodium 1.0.12'
 PACKAGE_BUGREPORT='https://github.com/jedisct1/libsodium/issues'
 PACKAGE_URL='https://github.com/jedisct1/libsodium'
 
@@ -721,6 +721,7 @@ CPPFLAGS
 LDFLAGS
 CFLAGS
 CC
+SODIUM_LIBRARY_MINIMAL_DEF
 MINIMAL_FALSE
 MINIMAL_TRUE
 DLL_VERSION
@@ -1389,7 +1390,7 @@ if test "$ac_init_help" = "long"; then
   # Omit some internal or obsolete options to make the list less imposing.
   # This message is too long to be a string in the A/UX 3.1 sh.
   cat <<_ACEOF
-\`configure' configures libsodium 1.0.11 to adapt to many kinds of systems.
+\`configure' configures libsodium 1.0.12 to adapt to many kinds of systems.
 
 Usage: $0 [OPTION]... [VAR=VALUE]...
 
@@ -1459,7 +1460,7 @@ fi
 
 if test -n "$ac_init_help"; then
   case $ac_init_help in
-     short | recursive ) echo "Configuration of libsodium 1.0.11:";;
+     short | recursive ) echo "Configuration of libsodium 1.0.12:";;
    esac
   cat <<\_ACEOF
 
@@ -1598,7 +1599,7 @@ fi
 test -n "$ac_init_help" && exit $ac_status
 if $ac_init_version; then
   cat <<\_ACEOF
-libsodium configure 1.0.11
+libsodium configure 1.0.12
 generated by GNU Autoconf 2.69
 
 Copyright (C) 2012 Free Software Foundation, Inc.
@@ -1967,7 +1968,7 @@ cat >config.log <<_ACEOF
 This file contains any messages produced by compilers while
 running configure, to aid debugging if configure makes a mistake.
 
-It was created by libsodium $as_me 1.0.11, which was
+It was created by libsodium $as_me 1.0.12, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   $ $0 $@
@@ -2903,7 +2904,7 @@ fi
 
 # Define the identity of the package.
  PACKAGE='libsodium'
- VERSION='1.0.11'
+ VERSION='1.0.12'
 
 
 cat >>confdefs.h <<_ACEOF
@@ -3199,9 +3200,9 @@ ISODATE=`date +%Y-%m-%d`
 
 
 SODIUM_LIBRARY_VERSION_MAJOR=9
-SODIUM_LIBRARY_VERSION_MINOR=3
+SODIUM_LIBRARY_VERSION_MINOR=4
 DLL_VERSION=8
-SODIUM_LIBRARY_VERSION=19:1:1
+SODIUM_LIBRARY_VERSION=20:0:2
 #                       | | |
 #                +------+ | +---+
 #                |        |     |
@@ -3218,6 +3219,7 @@ SODIUM_LIBRARY_VERSION=19:1:1
 
 
 
+
 LX_CFLAGS=${CFLAGS-NONE}
 
 
@@ -3317,6 +3319,10 @@ if test "${enable_minimal+set}" = set; t
   if test "x$enableval" = "xyes"; then :
 
     enable_minimal="yes"
+    SODIUM_LIBRARY_MINIMAL_DEF="#define SODIUM_LIBRARY_MINIMAL 1"
+
+$as_echo "#define MINIMAL 1" >>confdefs.h
+
 
 else
 
@@ -3340,6 +3346,7 @@ fi
 
 
 
+
 # Check whether --with-pthreads was given.
 if test "${with_pthreads+set}" = set; then :
   withval=$with_pthreads;
@@ -4728,17 +4735,17 @@ ax_pthread_ok=no
 # etcetera environment variables, and if threads linking works using
 # them:
 if test "x$PTHREAD_CFLAGS$PTHREAD_LIBS" != "x"; then
-	ax_pthread_save_CC="$CC"
-	ax_pthread_save_CFLAGS="$CFLAGS"
-	ax_pthread_save_LIBS="$LIBS"
-	if test "x$PTHREAD_CC" != "x"; then :
+        ax_pthread_save_CC="$CC"
+        ax_pthread_save_CFLAGS="$CFLAGS"
+        ax_pthread_save_LIBS="$LIBS"
+        if test "x$PTHREAD_CC" != "x"; then :
   CC="$PTHREAD_CC"
 fi
-	CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
-	LIBS="$PTHREAD_LIBS $LIBS"
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS" >&5
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS" >&5
 $as_echo_n "checking for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS... " >&6; }
-	cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
 /* Override any GCC internal prototype to avoid an error.
@@ -4761,15 +4768,15 @@ if ac_fn_c_try_link "$LINENO"; then :
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_pthread_ok" >&5
+        { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_pthread_ok" >&5
 $as_echo "$ax_pthread_ok" >&6; }
-	if test "x$ax_pthread_ok" = "xno"; then
-		PTHREAD_LIBS=""
-		PTHREAD_CFLAGS=""
-	fi
-	CC="$ax_pthread_save_CC"
-	CFLAGS="$ax_pthread_save_CFLAGS"
-	LIBS="$ax_pthread_save_LIBS"
+        if test "x$ax_pthread_ok" = "xno"; then
+                PTHREAD_LIBS=""
+                PTHREAD_CFLAGS=""
+        fi
+        CC="$ax_pthread_save_CC"
+        CFLAGS="$ax_pthread_save_CFLAGS"
+        LIBS="$ax_pthread_save_LIBS"
 fi
 
 # We must check for the threads library under a number of different
@@ -4806,35 +4813,35 @@ ax_pthread_flags="pthreads none -Kthread
 
 case $host_os in
 
-	freebsd*)
+        freebsd*)
 
-	# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
-	# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
+        # -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
+        # lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
 
-	ax_pthread_flags="-kthread lthread $ax_pthread_flags"
-	;;
+        ax_pthread_flags="-kthread lthread $ax_pthread_flags"
+        ;;
 
-	hpux*)
+        hpux*)
 
-	# From the cc(1) man page: "[-mt] Sets various -D flags to enable
-	# multi-threading and also sets -lpthread."
+        # From the cc(1) man page: "[-mt] Sets various -D flags to enable
+        # multi-threading and also sets -lpthread."
 
-	ax_pthread_flags="-mt -pthread pthread $ax_pthread_flags"
-	;;
+        ax_pthread_flags="-mt -pthread pthread $ax_pthread_flags"
+        ;;
 
-	openedition*)
+        openedition*)
 
-	# IBM z/OS requires a feature-test macro to be defined in order to
-	# enable POSIX threads at all, so give the user a hint if this is
-	# not set. (We don't define these ourselves, as they can affect
-	# other portions of the system API in unpredictable ways.)
+        # IBM z/OS requires a feature-test macro to be defined in order to
+        # enable POSIX threads at all, so give the user a hint if this is
+        # not set. (We don't define these ourselves, as they can affect
+        # other portions of the system API in unpredictable ways.)
 
-	cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
-#	     if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)
-	     AX_PTHREAD_ZOS_MISSING
-#	     endif
+#            if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)
+             AX_PTHREAD_ZOS_MISSING
+#            endif
 
 _ACEOF
 if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
@@ -4844,20 +4851,20 @@ $as_echo "$as_me: WARNING: IBM z/OS requ
 fi
 rm -f conftest*
 
-	;;
+        ;;
 
-	solaris*)
+        solaris*)
 
-	# On Solaris (at least, for some versions), libc contains stubbed
-	# (non-functional) versions of the pthreads routines, so link-based
-	# tests will erroneously succeed. (N.B.: The stubs are missing
-	# pthread_cleanup_push, or rather a function called by this macro,
-	# so we could check for that, but who knows whether they'll stub
-	# that too in a future libc.)  So we'll check first for the
-	# standard Solaris way of linking pthreads (-mt -lpthread).
+        # On Solaris (at least, for some versions), libc contains stubbed
+        # (non-functional) versions of the pthreads routines, so link-based
+        # tests will erroneously succeed. (N.B.: The stubs are missing
+        # pthread_cleanup_push, or rather a function called by this macro,
+        # so we could check for that, but who knows whether they'll stub
+        # that too in a future libc.)  So we'll check first for the
+        # standard Solaris way of linking pthreads (-mt -lpthread).
 
-	ax_pthread_flags="-mt,pthread pthread $ax_pthread_flags"
-	;;
+        ax_pthread_flags="-mt,pthread pthread $ax_pthread_flags"
+        ;;
 esac
 
 # GCC generally uses -pthread, or -pthreads on some platforms (e.g. SPARC)
@@ -4871,17 +4878,17 @@ fi
 # correctly enabled
 
 case $host_os in
-	darwin* | hpux* | linux* | osf* | solaris*)
-	ax_pthread_check_macro="_REENTRANT"
-	;;
+        darwin* | hpux* | linux* | osf* | solaris*)
+        ax_pthread_check_macro="_REENTRANT"
+        ;;
 
-	aix* | freebsd*)
-	ax_pthread_check_macro="_THREAD_SAFE"
-	;;
+        aix*)
+        ax_pthread_check_macro="_THREAD_SAFE"
+        ;;
 
-	*)
-	ax_pthread_check_macro="--"
-	;;
+        *)
+        ax_pthread_check_macro="--"
+        ;;
 esac
 if test "x$ax_pthread_check_macro" = "x--"; then :
   ax_pthread_check_cond=0
@@ -4899,12 +4906,12 @@ else
   ax_cv_PTHREAD_CLANG=no
      # Note that Autoconf sets GCC=yes for Clang as well as GCC
      if test "x$GCC" = "xyes"; then
-	cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 /* Note: Clang 2.7 lacks __clang_[a-z]+__ */
-#	     if defined(__clang__) && defined(__llvm__)
-	     AX_PTHREAD_CC_IS_CLANG
-#	     endif
+#            if defined(__clang__) && defined(__llvm__)
+             AX_PTHREAD_CC_IS_CLANG
+#            endif
 
 _ACEOF
 if (eval "$ac_cpp conftest.$ac_ext") 2>&5 |
@@ -4927,70 +4934,70 @@ ax_pthread_clang_warning=no
 
 if test "x$ax_pthread_clang" = "xyes"; then
 
-	# Clang takes -pthread; it has never supported any other flag
+        # Clang takes -pthread; it has never supported any other flag
 
-	# (Note 1: This will need to be revisited if a system that Clang
-	# supports has POSIX threads in a separate library.  This tends not
-	# to be the way of modern systems, but it's conceivable.)
-
-	# (Note 2: On some systems, notably Darwin, -pthread is not needed
-	# to get POSIX threads support; the API is always present and
-	# active.  We could reasonably leave PTHREAD_CFLAGS empty.  But
-	# -pthread does define _REENTRANT, and while the Darwin headers
-	# ignore this macro, third-party headers might not.)
-
-	PTHREAD_CFLAGS="-pthread"
-	PTHREAD_LIBS=
-
-	ax_pthread_ok=yes
-
-	# However, older versions of Clang make a point of warning the user
-	# that, in an invocation where only linking and no compilation is
-	# taking place, the -pthread option has no effect ("argument unused
-	# during compilation").  They expect -pthread to be passed in only
-	# when source code is being compiled.
-	#
-	# Problem is, this is at odds with the way Automake and most other
-	# C build frameworks function, which is that the same flags used in
-	# compilation (CFLAGS) are also used in linking.  Many systems
-	# supported by AX_PTHREAD require exactly this for POSIX threads
-	# support, and in fact it is often not straightforward to specify a
-	# flag that is used only in the compilation phase and not in
-	# linking.  Such a scenario is extremely rare in practice.
-	#
-	# Even though use of the -pthread flag in linking would only print
-	# a warning, this can be a nuisance for well-run software projects
-	# that build with -Werror.  So if the active version of Clang has
-	# this misfeature, we search for an option to squash it.
+        # (Note 1: This will need to be revisited if a system that Clang
+        # supports has POSIX threads in a separate library.  This tends not
+        # to be the way of modern systems, but it's conceivable.)
+
+        # (Note 2: On some systems, notably Darwin, -pthread is not needed
+        # to get POSIX threads support; the API is always present and
+        # active.  We could reasonably leave PTHREAD_CFLAGS empty.  But
+        # -pthread does define _REENTRANT, and while the Darwin headers
+        # ignore this macro, third-party headers might not.)
+
+        PTHREAD_CFLAGS="-pthread"
+        PTHREAD_LIBS=
+
+        ax_pthread_ok=yes
+
+        # However, older versions of Clang make a point of warning the user
+        # that, in an invocation where only linking and no compilation is
+        # taking place, the -pthread option has no effect ("argument unused
+        # during compilation").  They expect -pthread to be passed in only
+        # when source code is being compiled.
+        #
+        # Problem is, this is at odds with the way Automake and most other
+        # C build frameworks function, which is that the same flags used in
+        # compilation (CFLAGS) are also used in linking.  Many systems
+        # supported by AX_PTHREAD require exactly this for POSIX threads
+        # support, and in fact it is often not straightforward to specify a
+        # flag that is used only in the compilation phase and not in
+        # linking.  Such a scenario is extremely rare in practice.
+        #
+        # Even though use of the -pthread flag in linking would only print
+        # a warning, this can be a nuisance for well-run software projects
+        # that build with -Werror.  So if the active version of Clang has
+        # this misfeature, we search for an option to squash it.
 
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread" >&5
+        { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread" >&5
 $as_echo_n "checking whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread... " >&6; }
 if ${ax_cv_PTHREAD_CLANG_NO_WARN_FLAG+:} false; then :
   $as_echo_n "(cached) " >&6
 else
   ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=unknown
-	     # Create an alternate version of $ac_link that compiles and
-	     # links in two steps (.c -> .o, .o -> exe) instead of one
-	     # (.c -> exe), because the warning occurs only in the second
-	     # step
-	     ax_pthread_save_ac_link="$ac_link"
-	     ax_pthread_sed='s/conftest\.\$ac_ext/conftest.$ac_objext/g'
-	     ax_pthread_link_step=`$as_echo "$ac_link" | sed "$ax_pthread_sed"`
-	     ax_pthread_2step_ac_link="($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)"
-	     ax_pthread_save_CFLAGS="$CFLAGS"
-	     for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do
-		if test "x$ax_pthread_try" = "xunknown"; then :
+             # Create an alternate version of $ac_link that compiles and
+             # links in two steps (.c -> .o, .o -> exe) instead of one
+             # (.c -> exe), because the warning occurs only in the second
+             # step
+             ax_pthread_save_ac_link="$ac_link"
+             ax_pthread_sed='s/conftest\.\$ac_ext/conftest.$ac_objext/g'
+             ax_pthread_link_step=`$as_echo "$ac_link" | sed "$ax_pthread_sed"`
+             ax_pthread_2step_ac_link="($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)"
+             ax_pthread_save_CFLAGS="$CFLAGS"
+             for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do
+                if test "x$ax_pthread_try" = "xunknown"; then :
   break
 fi
-		CFLAGS="-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS"
-		ac_link="$ax_pthread_save_ac_link"
-		cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+                CFLAGS="-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS"
+                ac_link="$ax_pthread_save_ac_link"
+                cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 int main(void){return 0;}
 _ACEOF
 if ac_fn_c_try_link "$LINENO"; then :
   ac_link="$ax_pthread_2step_ac_link"
-		     cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+                     cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 int main(void){return 0;}
 _ACEOF
@@ -5003,49 +5010,49 @@ rm -f core conftest.err conftest.$ac_obj
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
-	     done
-	     ac_link="$ax_pthread_save_ac_link"
-	     CFLAGS="$ax_pthread_save_CFLAGS"
-	     if test "x$ax_pthread_try" = "x"; then :
+             done
+             ac_link="$ax_pthread_save_ac_link"
+             CFLAGS="$ax_pthread_save_CFLAGS"
+             if test "x$ax_pthread_try" = "x"; then :
   ax_pthread_try=no
 fi
-	     ax_cv_PTHREAD_CLANG_NO_WARN_FLAG="$ax_pthread_try"
+             ax_cv_PTHREAD_CLANG_NO_WARN_FLAG="$ax_pthread_try"
 
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_PTHREAD_CLANG_NO_WARN_FLAG" >&5
 $as_echo "$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG" >&6; }
 
-	case "$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG" in
-		no | unknown) ;;
-		*) PTHREAD_CFLAGS="$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS" ;;
-	esac
+        case "$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG" in
+                no | unknown) ;;
+                *) PTHREAD_CFLAGS="$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS" ;;
+        esac
 
 fi # $ax_pthread_clang = yes
 
 if test "x$ax_pthread_ok" = "xno"; then
 for ax_pthread_try_flag in $ax_pthread_flags; do
 
-	case $ax_pthread_try_flag in
-		none)
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether pthreads work without any flags" >&5
+        case $ax_pthread_try_flag in
+                none)
+                { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether pthreads work without any flags" >&5
 $as_echo_n "checking whether pthreads work without any flags... " >&6; }
-		;;
+                ;;
 
-		-mt,pthread)
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether pthreads work with -mt -lpthread" >&5
+                -mt,pthread)
+                { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether pthreads work with -mt -lpthread" >&5
 $as_echo_n "checking whether pthreads work with -mt -lpthread... " >&6; }
-		PTHREAD_CFLAGS="-mt"
-		PTHREAD_LIBS="-lpthread"
-		;;
+                PTHREAD_CFLAGS="-mt"
+                PTHREAD_LIBS="-lpthread"
+                ;;
 
-		-*)
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether pthreads work with $ax_pthread_try_flag" >&5
+                -*)
+                { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether pthreads work with $ax_pthread_try_flag" >&5
 $as_echo_n "checking whether pthreads work with $ax_pthread_try_flag... " >&6; }
-		PTHREAD_CFLAGS="$ax_pthread_try_flag"
-		;;
+                PTHREAD_CFLAGS="$ax_pthread_try_flag"
+                ;;
 
-		pthread-config)
-		# Extract the first word of "pthread-config", so it can be a program name with args.
+                pthread-config)
+                # Extract the first word of "pthread-config", so it can be a program name with args.
 set dummy pthread-config; ac_word=$2
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
 $as_echo_n "checking for $ac_word... " >&6; }
@@ -5083,52 +5090,52 @@ $as_echo "no" >&6; }
 fi
 
 
-		if test "x$ax_pthread_config" = "xno"; then :
+                if test "x$ax_pthread_config" = "xno"; then :
   continue
 fi
-		PTHREAD_CFLAGS="`pthread-config --cflags`"
-		PTHREAD_LIBS="`pthread-config --ldflags` `pthread-config --libs`"
-		;;
+                PTHREAD_CFLAGS="`pthread-config --cflags`"
+                PTHREAD_LIBS="`pthread-config --ldflags` `pthread-config --libs`"
+                ;;
 
-		*)
-		{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for the pthreads library -l$ax_pthread_try_flag" >&5
+                *)
+                { $as_echo "$as_me:${as_lineno-$LINENO}: checking for the pthreads library -l$ax_pthread_try_flag" >&5
 $as_echo_n "checking for the pthreads library -l$ax_pthread_try_flag... " >&6; }
-		PTHREAD_LIBS="-l$ax_pthread_try_flag"
-		;;
-	esac
+                PTHREAD_LIBS="-l$ax_pthread_try_flag"
+                ;;
+        esac
 
-	ax_pthread_save_CFLAGS="$CFLAGS"
-	ax_pthread_save_LIBS="$LIBS"
-	CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
-	LIBS="$PTHREAD_LIBS $LIBS"
-
-	# Check for various functions.  We must include pthread.h,
-	# since some functions may be macros.  (On the Sequent, we
-	# need a special flag -Kthread to make this header compile.)
-	# We check for pthread_join because it is in -lpthread on IRIX
-	# while pthread_create is in libc.  We check for pthread_attr_init
-	# due to DEC craziness with -lpthreads.  We check for
-	# pthread_cleanup_push because it is one of the few pthread
-	# functions on Solaris that doesn't have a non-functional libc stub.
-	# We try pthread_create on general principles.
+        ax_pthread_save_CFLAGS="$CFLAGS"
+        ax_pthread_save_LIBS="$LIBS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+
+        # Check for various functions.  We must include pthread.h,
+        # since some functions may be macros.  (On the Sequent, we
+        # need a special flag -Kthread to make this header compile.)
+        # We check for pthread_join because it is in -lpthread on IRIX
+        # while pthread_create is in libc.  We check for pthread_attr_init
+        # due to DEC craziness with -lpthreads.  We check for
+        # pthread_cleanup_push because it is one of the few pthread
+        # functions on Solaris that doesn't have a non-functional libc stub.
+        # We try pthread_create on general principles.
 
-	cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 #include <pthread.h>
-#			if $ax_pthread_check_cond
-#			 error "$ax_pthread_check_macro must be defined"
-#			endif
-			static void routine(void *a) { a = 0; }
-			static void *start_routine(void *a) { return a; }
+#                       if $ax_pthread_check_cond
+#                        error "$ax_pthread_check_macro must be defined"
+#                       endif
+                        static void routine(void *a) { a = 0; }
+                        static void *start_routine(void *a) { return a; }
 int
 main ()
 {
 pthread_t th; pthread_attr_t attr;
-			pthread_create(&th, 0, start_routine, 0);
-			pthread_join(th, 0);
-			pthread_attr_init(&attr);
-			pthread_cleanup_push(routine, 0);
-			pthread_cleanup_pop(0) /* ; */
+                        pthread_create(&th, 0, start_routine, 0);
+                        pthread_join(th, 0);
+                        pthread_attr_init(&attr);
+                        pthread_cleanup_push(routine, 0);
+                        pthread_cleanup_pop(0) /* ; */
   ;
   return 0;
 }
@@ -5139,36 +5146,36 @@ fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
 
-	CFLAGS="$ax_pthread_save_CFLAGS"
-	LIBS="$ax_pthread_save_LIBS"
+        CFLAGS="$ax_pthread_save_CFLAGS"
+        LIBS="$ax_pthread_save_LIBS"
 
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_pthread_ok" >&5
+        { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_pthread_ok" >&5
 $as_echo "$ax_pthread_ok" >&6; }
-	if test "x$ax_pthread_ok" = "xyes"; then :
+        if test "x$ax_pthread_ok" = "xyes"; then :
   break
 fi
 
-	PTHREAD_LIBS=""
-	PTHREAD_CFLAGS=""
+        PTHREAD_LIBS=""
+        PTHREAD_CFLAGS=""
 done
 fi
 
 # Various other checks:
 if test "x$ax_pthread_ok" = "xyes"; then
-	ax_pthread_save_CFLAGS="$CFLAGS"
-	ax_pthread_save_LIBS="$LIBS"
-	CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
-	LIBS="$PTHREAD_LIBS $LIBS"
+        ax_pthread_save_CFLAGS="$CFLAGS"
+        ax_pthread_save_LIBS="$LIBS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+        LIBS="$PTHREAD_LIBS $LIBS"
 
-	# Detect AIX lossage: JOINABLE attribute is called UNDETACHED.
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for joinable pthread attribute" >&5
+        # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.
+        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for joinable pthread attribute" >&5
 $as_echo_n "checking for joinable pthread attribute... " >&6; }
 if ${ax_cv_PTHREAD_JOINABLE_ATTR+:} false; then :
   $as_echo_n "(cached) " >&6
 else
   ax_cv_PTHREAD_JOINABLE_ATTR=unknown
-	     for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do
-		 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+             for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do
+                 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 #include <pthread.h>
 int
@@ -5184,45 +5191,45 @@ if ac_fn_c_try_link "$LINENO"; then :
 fi
 rm -f core conftest.err conftest.$ac_objext \
     conftest$ac_exeext conftest.$ac_ext
-	     done
+             done
 
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_PTHREAD_JOINABLE_ATTR" >&5
 $as_echo "$ax_cv_PTHREAD_JOINABLE_ATTR" >&6; }
-	if test "x$ax_cv_PTHREAD_JOINABLE_ATTR" != "xunknown" && \
-	       test "x$ax_cv_PTHREAD_JOINABLE_ATTR" != "xPTHREAD_CREATE_JOINABLE" && \
-	       test "x$ax_pthread_joinable_attr_defined" != "xyes"; then :
+        if test "x$ax_cv_PTHREAD_JOINABLE_ATTR" != "xunknown" && \
+               test "x$ax_cv_PTHREAD_JOINABLE_ATTR" != "xPTHREAD_CREATE_JOINABLE" && \
+               test "x$ax_pthread_joinable_attr_defined" != "xyes"; then :
 
 cat >>confdefs.h <<_ACEOF
 #define PTHREAD_CREATE_JOINABLE $ax_cv_PTHREAD_JOINABLE_ATTR
 _ACEOF
 
-	       ax_pthread_joinable_attr_defined=yes
+               ax_pthread_joinable_attr_defined=yes
 
 fi
 
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether more special flags are required for pthreads" >&5
+        { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether more special flags are required for pthreads" >&5
 $as_echo_n "checking whether more special flags are required for pthreads... " >&6; }
 if ${ax_cv_PTHREAD_SPECIAL_FLAGS+:} false; then :
   $as_echo_n "(cached) " >&6
 else
   ax_cv_PTHREAD_SPECIAL_FLAGS=no
-	     case $host_os in
-	     solaris*)
-	     ax_cv_PTHREAD_SPECIAL_FLAGS="-D_POSIX_PTHREAD_SEMANTICS"
-	     ;;
-	     esac
+             case $host_os in
+             solaris*)
+             ax_cv_PTHREAD_SPECIAL_FLAGS="-D_POSIX_PTHREAD_SEMANTICS"
+             ;;
+             esac
 
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_PTHREAD_SPECIAL_FLAGS" >&5
 $as_echo "$ax_cv_PTHREAD_SPECIAL_FLAGS" >&6; }
-	if test "x$ax_cv_PTHREAD_SPECIAL_FLAGS" != "xno" && \
-	       test "x$ax_pthread_special_flags_added" != "xyes"; then :
+        if test "x$ax_cv_PTHREAD_SPECIAL_FLAGS" != "xno" && \
+               test "x$ax_pthread_special_flags_added" != "xyes"; then :
   PTHREAD_CFLAGS="$ax_cv_PTHREAD_SPECIAL_FLAGS $PTHREAD_CFLAGS"
-	       ax_pthread_special_flags_added=yes
+               ax_pthread_special_flags_added=yes
 fi
 
-	{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for PTHREAD_PRIO_INHERIT" >&5
+        { $as_echo "$as_me:${as_lineno-$LINENO}: checking for PTHREAD_PRIO_INHERIT" >&5
 $as_echo_n "checking for PTHREAD_PRIO_INHERIT... " >&6; }
 if ${ax_cv_PTHREAD_PRIO_INHERIT+:} false; then :
   $as_echo_n "(cached) " >&6
@@ -5249,26 +5256,26 @@ rm -f core conftest.err conftest.$ac_obj
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_PTHREAD_PRIO_INHERIT" >&5
 $as_echo "$ax_cv_PTHREAD_PRIO_INHERIT" >&6; }
-	if test "x$ax_cv_PTHREAD_PRIO_INHERIT" = "xyes" && \
-	       test "x$ax_pthread_prio_inherit_defined" != "xyes"; then :
+        if test "x$ax_cv_PTHREAD_PRIO_INHERIT" = "xyes" && \
+               test "x$ax_pthread_prio_inherit_defined" != "xyes"; then :
 
 $as_echo "#define HAVE_PTHREAD_PRIO_INHERIT 1" >>confdefs.h
 
-	       ax_pthread_prio_inherit_defined=yes
+               ax_pthread_prio_inherit_defined=yes
 
 fi
 
-	CFLAGS="$ax_pthread_save_CFLAGS"
-	LIBS="$ax_pthread_save_LIBS"
+        CFLAGS="$ax_pthread_save_CFLAGS"
+        LIBS="$ax_pthread_save_LIBS"
 
-	# More AIX lossage: compile with *_r variant
-	if test "x$GCC" != "xyes"; then
-	    case $host_os in
-		aix*)
-		case "x/$CC" in #(
+        # More AIX lossage: compile with *_r variant
+        if test "x$GCC" != "xyes"; then
+            case $host_os in
+                aix*)
+                case "x/$CC" in #(
   x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6) :
     #handle absolute path differently from PATH based program lookup
-		     case "x$CC" in #(
+                     case "x$CC" in #(
   x/*) :
     if as_fn_executable_p ${CC}_r; then :
   PTHREAD_CC="${CC}_r"
@@ -5321,9 +5328,9 @@ esac ;; #(
   *) :
      ;;
 esac
-		;;
-	    esac
-	fi
+                ;;
+            esac
+        fi
 fi
 
 test -n "$PTHREAD_CC" || PTHREAD_CC="$CC"
@@ -5341,9 +5348,9 @@ $as_echo "#define HAVE_PTHREAD 1" >>conf
     LIBS="$PTHREAD_LIBS $LIBS"
     CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
     CC="$PTHREAD_CC"
-	:
+        :
 else
-	ax_pthread_ok=no
+        ax_pthread_ok=no
 
 fi
 ac_ext=c
@@ -5407,8 +5414,79 @@ if test "${enable_opt+set}" = set; then
   enableval=$enable_opt;
   if test "x$enableval" = "xyes"; then :
 
-    CFLAGS="$CFLAGS -O3 -march=native"
-    LDFLAGS="$LDFLAGS -O3 -march=native"
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C compiler accepts -Ofast" >&5
+$as_echo_n "checking whether C compiler accepts -Ofast... " >&6; }
+if ${ax_cv_check_cflags___Ofast+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+
+  ax_check_save_flags=$CFLAGS
+  CFLAGS="$CFLAGS  -Ofast"
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdio.h>
+int
+main ()
+{
+char x[42U], fodder = 0;if (fodder > -1000 && fgets(x,1000,stdin)) puts(x)
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ax_cv_check_cflags___Ofast=yes
+else
+  ax_cv_check_cflags___Ofast=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+  CFLAGS=$ax_check_save_flags
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___Ofast" >&5
+$as_echo "$ax_cv_check_cflags___Ofast" >&6; }
+if test "x$ax_cv_check_cflags___Ofast" = xyes; then :
+  CFLAGS="$CFLAGS -Ofast"
+else
+  :
+fi
+
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C compiler accepts -march=native" >&5
+$as_echo_n "checking whether C compiler accepts -march=native... " >&6; }
+if ${ax_cv_check_cflags___march_native+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+
+  ax_check_save_flags=$CFLAGS
+  CFLAGS="$CFLAGS  -march=native"
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdio.h>
+int
+main ()
+{
+char x[42U], fodder = 0;if (fodder > -1000 && fgets(x,1000,stdin)) puts(x)
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ax_cv_check_cflags___march_native=yes
+else
+  ax_cv_check_cflags___march_native=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+  CFLAGS=$ax_check_save_flags
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___march_native" >&5
+$as_echo "$ax_cv_check_cflags___march_native" >&6; }
+if test "x$ax_cv_check_cflags___march_native" = xyes; then :
+  CFLAGS="$CFLAGS -march=native"
+else
+  :
+fi
+
+
 fi
 
 fi
@@ -6279,12 +6357,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___D_FORTIFY_SOURCE_2=yes
 else
   ax_cv_check_cflags___D_FORTIFY_SOURCE_2=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___D_FORTIFY_SOURCE_2" >&5
@@ -6317,12 +6396,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___fvisibility_hidden=yes
 else
   ax_cv_check_cflags___fvisibility_hidden=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___fvisibility_hidden" >&5
@@ -6358,56 +6438,19 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___fPIC=yes
 else
   ax_cv_check_cflags___fPIC=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___fPIC" >&5
 $as_echo "$ax_cv_check_cflags___fPIC" >&6; }
 if test "x$ax_cv_check_cflags___fPIC" = xyes; then :
-
-    { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the linker accepts -fPIC" >&5
-$as_echo_n "checking whether the linker accepts -fPIC... " >&6; }
-if ${ax_cv_check_ldflags___fPIC+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-
-  ax_check_save_flags=$LDFLAGS
-  LDFLAGS="$LDFLAGS  -fPIC"
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#include <stdio.h>
-int
-main ()
-{
-char x[42U];if (fgets(x,1000,stdin)) puts(x)
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_link "$LINENO"; then :
-  ax_cv_check_ldflags___fPIC=yes
-else
-  ax_cv_check_ldflags___fPIC=no
-fi
-rm -f core conftest.err conftest.$ac_objext \
-    conftest$ac_exeext conftest.$ac_ext
-  LDFLAGS=$ax_check_save_flags
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_ldflags___fPIC" >&5
-$as_echo "$ax_cv_check_ldflags___fPIC" >&6; }
-if test "x$ax_cv_check_ldflags___fPIC" = xyes; then :
   CFLAGS="$CFLAGS -fPIC"
-
-else
-  :
-fi
-
-
 else
   :
 fi
@@ -6436,50 +6479,20 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___fPIE=yes
 else
   ax_cv_check_cflags___fPIE=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___fPIE" >&5
 $as_echo "$ax_cv_check_cflags___fPIE" >&6; }
 if test "x$ax_cv_check_cflags___fPIE" = xyes; then :
 
-    { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the linker accepts -fPIE" >&5
-$as_echo_n "checking whether the linker accepts -fPIE... " >&6; }
-if ${ax_cv_check_ldflags___fPIE+:} false; then :
-  $as_echo_n "(cached) " >&6
-else
-
-  ax_check_save_flags=$LDFLAGS
-  LDFLAGS="$LDFLAGS  -fPIE"
-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#include <stdio.h>
-int
-main ()
-{
-char x[42U];if (fgets(x,1000,stdin)) puts(x)
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_link "$LINENO"; then :
-  ax_cv_check_ldflags___fPIE=yes
-else
-  ax_cv_check_ldflags___fPIE=no
-fi
-rm -f core conftest.err conftest.$ac_objext \
-    conftest$ac_exeext conftest.$ac_ext
-  LDFLAGS=$ax_check_save_flags
-fi
-{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_ldflags___fPIE" >&5
-$as_echo "$ax_cv_check_ldflags___fPIE" >&6; }
-if test "x$ax_cv_check_ldflags___fPIE" = xyes; then :
-  { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the linker accepts -pie" >&5
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the linker accepts -pie" >&5
 $as_echo_n "checking whether the linker accepts -pie... " >&6; }
 if ${ax_cv_check_ldflags___pie+:} false; then :
   $as_echo_n "(cached) " >&6
@@ -6510,12 +6523,9 @@ fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_ldflags___pie" >&5
 $as_echo "$ax_cv_check_ldflags___pie" >&6; }
 if test "x$ax_cv_check_ldflags___pie" = xyes; then :
-  CFLAGS="$CFLAGS -fPIE"
-         LDFLAGS="$LDFLAGS -pie"
-else
-  :
-fi
 
+      CFLAGS="$CFLAGS -fPIE"
+       LDFLAGS="$LDFLAGS -pie"
 
 else
   :
@@ -6548,12 +6558,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___fno_strict_aliasing=yes
 else
   ax_cv_check_cflags___fno_strict_aliasing=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___fno_strict_aliasing" >&5
@@ -6583,12 +6594,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___fno_strict_overflow=yes
 else
   ax_cv_check_cflags___fno_strict_overflow=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___fno_strict_overflow" >&5
@@ -6616,12 +6628,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___fwrapv=yes
 else
   ax_cv_check_cflags___fwrapv=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___fwrapv" >&5
@@ -6673,12 +6686,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___flax_vector_conversions=yes
 else
   ax_cv_check_cflags___flax_vector_conversions=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___flax_vector_conversions" >&5
@@ -6858,12 +6872,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___fstack_protector=yes
 else
   ax_cv_check_cflags___fstack_protector=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___fstack_protector" >&5
@@ -6938,12 +6953,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___Wwrite_strings=yes
 else
   ax_cv_check_cflags___Wwrite_strings=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___Wwrite_strings" >&5
@@ -6973,12 +6989,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___Wdiv_by_zero=yes
 else
   ax_cv_check_cflags___Wdiv_by_zero=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___Wdiv_by_zero" >&5
@@ -7008,12 +7025,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___Wsometimes_uninitialized=yes
 else
   ax_cv_check_cflags___Wsometimes_uninitialized=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___Wsometimes_uninitialized" >&5
@@ -7047,12 +7065,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7084,12 +7103,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7142,12 +7162,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7187,12 +7208,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7224,12 +7246,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7261,12 +7284,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7298,12 +7322,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7335,12 +7360,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7372,12 +7398,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7409,12 +7436,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7446,12 +7474,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7483,12 +7512,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7520,12 +7550,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7557,12 +7588,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7594,12 +7626,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7631,12 +7664,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7668,12 +7702,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7705,12 +7740,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7742,12 +7778,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7779,12 +7816,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   eval "$as_CACHEVAR=yes"
 else
   eval "$as_CACHEVAR=no"
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 eval ac_res=\$$as_CACHEVAR
@@ -7796,6 +7834,44 @@ else
   :
 fi
 
+as_CACHEVAR=`$as_echo "ax_cv_check_cflags__$CWFLAGS -Wno-type-limits" | $as_tr_sh`
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C compiler accepts $CWFLAGS -Wno-type-limits" >&5
+$as_echo_n "checking whether C compiler accepts $CWFLAGS -Wno-type-limits... " >&6; }
+if eval \${$as_CACHEVAR+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+
+  ax_check_save_flags=$CFLAGS
+  CFLAGS="$CFLAGS  $CWFLAGS -Wno-type-limits"
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <stdio.h>
+int
+main ()
+{
+char x[42U], fodder = 0;if (fodder > -1000 && fgets(x,1000,stdin)) puts(x)
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  eval "$as_CACHEVAR=yes"
+else
+  eval "$as_CACHEVAR=no"
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+  CFLAGS=$ax_check_save_flags
+fi
+eval ac_res=\$$as_CACHEVAR
+	       { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
+$as_echo "$ac_res" >&6; }
+if eval test \"x\$"$as_CACHEVAR"\" = x"yes"; then :
+  CWFLAGS="$CWFLAGS -Wno-type-limits"
+else
+  :
+fi
+
 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether the linker accepts -Wl,-z,relro" >&5
 $as_echo_n "checking whether the linker accepts -Wl,-z,relro... " >&6; }
@@ -15606,8 +15682,6 @@ fi
 if test "x$EMSCRIPTEN" = "x" -a "$host_os" != "pnacl"; then :
 
 
-  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for MMX instructions set" >&5
-$as_echo_n "checking for MMX instructions set... " >&6; }
   oldcflags="$CFLAGS"
   { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C compiler accepts -mmmx" >&5
 $as_echo_n "checking whether C compiler accepts -mmmx... " >&6; }
@@ -15628,12 +15702,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___mmmx=yes
 else
   ax_cv_check_cflags___mmmx=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___mmmx" >&5
@@ -15644,6 +15719,8 @@ else
   :
 fi
 
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for MMX instructions set" >&5
+$as_echo_n "checking for MMX instructions set... " >&6; }
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
@@ -15683,12 +15760,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___mmmx=yes
 else
   ax_cv_check_cflags___mmmx=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___mmmx" >&5
@@ -15706,8 +15784,6 @@ fi
 rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
   CFLAGS="$oldcflags"
 
-  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for SSE2 instructions set" >&5
-$as_echo_n "checking for SSE2 instructions set... " >&6; }
   oldcflags="$CFLAGS"
   { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether C compiler accepts -msse2" >&5
 $as_echo_n "checking whether C compiler accepts -msse2... " >&6; }
@@ -15728,12 +15804,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___msse2=yes
 else
   ax_cv_check_cflags___msse2=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___msse2" >&5
@@ -15744,6 +15821,8 @@ else
   :
 fi
 
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for SSE2 instructions set" >&5
+$as_echo_n "checking for SSE2 instructions set... " >&6; }
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
 
@@ -15757,7 +15836,7 @@ int
 main ()
 {
  __m128d x = _mm_setzero_pd();
-       __m128i y = _mm_srli_epi64(_mm_setzero_si128(), 26);
+       __m128i z = _mm_srli_epi64(_mm_setzero_si128(), 26);
   ;
   return 0;
 }
@@ -15787,12 +15866,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___msse2=yes
 else
   ax_cv_check_cflags___msse2=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___msse2" >&5
@@ -15830,12 +15910,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___msse3=yes
 else
   ax_cv_check_cflags___msse3=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___msse3" >&5
@@ -15888,12 +15969,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___msse3=yes
 else
   ax_cv_check_cflags___msse3=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___msse3" >&5
@@ -15931,12 +16013,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___mssse3=yes
 else
   ax_cv_check_cflags___mssse3=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___mssse3" >&5
@@ -15988,12 +16071,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___mssse3=yes
 else
   ax_cv_check_cflags___mssse3=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___mssse3" >&5
@@ -16031,12 +16115,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___msse4_1=yes
 else
   ax_cv_check_cflags___msse4_1=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___msse4_1" >&5
@@ -16088,12 +16173,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___msse4_1=yes
 else
   ax_cv_check_cflags___msse4_1=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___msse4_1" >&5
@@ -16131,12 +16217,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___mavx=yes
 else
   ax_cv_check_cflags___mavx=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___mavx" >&5
@@ -16191,12 +16278,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___mavx=yes
 else
   ax_cv_check_cflags___mavx=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___mavx" >&5
@@ -16234,12 +16322,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___mavx2=yes
 else
   ax_cv_check_cflags___mavx2=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___mavx2" >&5
@@ -16264,7 +16353,11 @@ $as_echo_n "checking for AVX2 instructio
 int
 main ()
 {
- __m256i x = _mm256_abs_epi8(_mm256_setzero_si256());
+
+__m256 x = _mm256_set1_ps(3.14);
+__m256 y = _mm256_permutevar8x32_ps(x, _mm256_set1_epi32(42));
+return _mm256_movemask_ps(_mm256_cmp_ps(x, y, _CMP_NEQ_OQ));
+
   ;
   return 0;
 }
@@ -16294,18 +16387,19 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___mavx2=yes
 else
   ax_cv_check_cflags___mavx2=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___mavx2" >&5
 $as_echo "$ax_cv_check_cflags___mavx2" >&6; }
 if test "x$ax_cv_check_cflags___mavx2" = xyes; then :
-  CFLAGS_AVX="-mavx2"
+  CFLAGS_AVX2="-mavx2"
 else
   :
 fi
@@ -16368,12 +16462,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___maes=yes
 else
   ax_cv_check_cflags___maes=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___maes" >&5
@@ -16403,12 +16498,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___mpclmul=yes
 else
   ax_cv_check_cflags___mpclmul=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___mpclmul" >&5
@@ -16465,12 +16561,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___maes=yes
 else
   ax_cv_check_cflags___maes=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___maes" >&5
@@ -16500,12 +16597,13 @@ char x[42U], fodder = 0;if (fodder > -10
   return 0;
 }
 _ACEOF
-if ac_fn_c_try_compile "$LINENO"; then :
+if ac_fn_c_try_link "$LINENO"; then :
   ax_cv_check_cflags___mpclmul=yes
 else
   ax_cv_check_cflags___mpclmul=no
 fi
-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
   CFLAGS=$ax_check_save_flags
 fi
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $ax_cv_check_cflags___mpclmul" >&5
@@ -16537,12 +16635,13 @@ fi
 
 
 
-for ac_header in sys/mman.h
+for ac_header in sys/mman.h intrin.h
 do :
-  ac_fn_c_check_header_mongrel "$LINENO" "sys/mman.h" "ac_cv_header_sys_mman_h" "$ac_includes_default"
-if test "x$ac_cv_header_sys_mman_h" = xyes; then :
+  as_ac_Header=`$as_echo "ac_cv_header_$ac_header" | $as_tr_sh`
+ac_fn_c_check_header_mongrel "$LINENO" "$ac_header" "$as_ac_Header" "$ac_includes_default"
+if eval test \"x\$"$as_ac_Header"\" = x"yes"; then :
   cat >>confdefs.h <<_ACEOF
-#define HAVE_SYS_MMAN_H 1
+#define `$as_echo "HAVE_$ac_header" | $as_tr_cpp` 1
 _ACEOF
 
 fi
@@ -16550,6 +16649,31 @@ fi
 done
 
 
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if _xgetbv() is available" >&5
+$as_echo_n "checking if _xgetbv() is available... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+ #include <intrin.h>
+int
+main ()
+{
+ (void) _xgetbv(0)
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+
+$as_echo "#define HAVE__XGETBV 1" >>confdefs.h
+
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
 
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for inline" >&5
 $as_echo_n "checking for inline... " >&6; }
@@ -17226,6 +17350,37 @@ $as_echo "#define CPU_UNALIGNED_ACCESS 1
 
 fi
 
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if atomic operations are supported" >&5
+$as_echo_n "checking if atomic operations are supported... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+int
+main ()
+{
+
+static volatile int _sodium_lock;
+__sync_lock_test_and_set(&_sodium_lock, 1);
+__sync_lock_release(&_sodium_lock);
+
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+
+$as_echo "#define HAVE_ATOMIC_OPS 1" >>confdefs.h
+
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+
 
 if test "x$EMSCRIPTEN" = "x"; then :
 
@@ -17647,7 +17802,7 @@ fi
 
 
 
-ac_config_files="$ac_config_files Makefile dist-build/Makefile libsodium.pc libsodium-uninstalled.pc msvc-scripts/Makefile src/Makefile src/libsodium/Makefile src/libsodium/include/Makefile src/libsodium/include/sodium/version.h test/default/Makefile test/Makefile"
+ac_config_files="$ac_config_files Makefile contrib/Makefile dist-build/Makefile libsodium.pc libsodium-uninstalled.pc msvc-scripts/Makefile src/Makefile src/libsodium/Makefile src/libsodium/include/Makefile src/libsodium/include/sodium/version.h test/default/Makefile test/Makefile"
 
 cat >confcache <<\_ACEOF
 # This file is a shell script that caches the results of configure
@@ -18255,7 +18410,7 @@ cat >>$CONFIG_STATUS <<\_ACEOF || ac_wri
 # report actual input values of CONFIG_FILES etc. instead of their
 # values after options handling.
 ac_log="
-This file was extended by libsodium $as_me 1.0.11, which was
+This file was extended by libsodium $as_me 1.0.12, which was
 generated by GNU Autoconf 2.69.  Invocation command line was
 
   CONFIG_FILES    = $CONFIG_FILES
@@ -18313,7 +18468,7 @@ _ACEOF
 cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1
 ac_cs_config="`$as_echo "$ac_configure_args" | sed 's/^ //; s/[\\""\`\$]/\\\\&/g'`"
 ac_cs_version="\\
-libsodium config.status 1.0.11
+libsodium config.status 1.0.12
 configured by $0, generated by GNU Autoconf 2.69,
   with options \\"\$ac_cs_config\\"
 
@@ -18719,6 +18874,7 @@ do
     "depfiles") CONFIG_COMMANDS="$CONFIG_COMMANDS depfiles" ;;
     "libtool") CONFIG_COMMANDS="$CONFIG_COMMANDS libtool" ;;
     "Makefile") CONFIG_FILES="$CONFIG_FILES Makefile" ;;
+    "contrib/Makefile") CONFIG_FILES="$CONFIG_FILES contrib/Makefile" ;;
     "dist-build/Makefile") CONFIG_FILES="$CONFIG_FILES dist-build/Makefile" ;;
     "libsodium.pc") CONFIG_FILES="$CONFIG_FILES libsodium.pc" ;;
     "libsodium-uninstalled.pc") CONFIG_FILES="$CONFIG_FILES libsodium-uninstalled.pc" ;;
diff -urpN libsodium-1.0.11/configure.ac libsodium-1.0.12/configure.ac
--- libsodium-1.0.11/configure.ac	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/configure.ac	2017-03-10 20:50:14.000000000 +0100
@@ -1,5 +1,5 @@
 AC_PREREQ([2.65])
-AC_INIT([libsodium],[1.0.11],
+AC_INIT([libsodium],[1.0.12],
   [https://github.com/jedisct1/libsodium/issues],
   [libsodium],
   [https://github.com/jedisct1/libsodium])
@@ -17,9 +17,9 @@ ISODATE=`date +%Y-%m-%d`
 AC_SUBST(ISODATE)
 
 SODIUM_LIBRARY_VERSION_MAJOR=9
-SODIUM_LIBRARY_VERSION_MINOR=3
+SODIUM_LIBRARY_VERSION_MINOR=4
 DLL_VERSION=8
-SODIUM_LIBRARY_VERSION=19:1:1
+SODIUM_LIBRARY_VERSION=20:0:2
 #                       | | |
 #                +------+ | +---+
 #                |        |     |
@@ -36,6 +36,7 @@ AC_SUBST(SODIUM_LIBRARY_VERSION_MINOR)
 AC_SUBST(SODIUM_LIBRARY_VERSION)
 AC_SUBST(DLL_VERSION)
 
+AC_LANG_ASSERT(C)
 LX_CFLAGS=${CFLAGS-NONE}
 
 dnl Path check
@@ -101,6 +102,8 @@ AC_ARG_ENABLE(minimal,
 [
   AS_IF([test "x$enableval" = "xyes"], [
     enable_minimal="yes"
+    SODIUM_LIBRARY_MINIMAL_DEF="#define SODIUM_LIBRARY_MINIMAL 1"
+    AC_DEFINE([MINIMAL], [1], [Define for a minimal build, without deprecated functions and functions that high-level APIs depend on])
   ], [
     enable_minimal="no"
   ])
@@ -109,6 +112,7 @@ AC_ARG_ENABLE(minimal,
   enable_minimal="no"
 ])
 AM_CONDITIONAL([MINIMAL], [test x$enable_minimal = xyes])
+AC_SUBST(SODIUM_LIBRARY_MINIMAL_DEF)
 
 AC_ARG_WITH(pthreads, AC_HELP_STRING([--with-pthreads],
  [use pthreads library, or --without-pthreads to disable threading support.]),
@@ -155,8 +159,9 @@ AC_ARG_ENABLE(opt,
 [AS_HELP_STRING(--enable-opt,Optimize for the native CPU - The resulting library will be faster but not portable)],
 [
   AS_IF([test "x$enableval" = "xyes"], [
-    CFLAGS="$CFLAGS -O3 -march=native"
-    LDFLAGS="$LDFLAGS -O3 -march=native"])
+    AX_CHECK_COMPILE_FLAG([-Ofast], [CFLAGS="$CFLAGS -Ofast"])
+    AX_CHECK_COMPILE_FLAG([-march=native], [CFLAGS="$CFLAGS -march=native"])
+  ])
 ])
 
 AC_SUBST([MAINT])
@@ -180,19 +185,14 @@ AX_CHECK_COMPILE_FLAG([-fvisibility=hidd
   [CFLAGS="$CFLAGS -fvisibility=hidden"])
 
 AS_CASE([$host_os], [cygwin*|mingw*|msys|pw32*|cegcc*], [ ], [
-  AX_CHECK_COMPILE_FLAG([-fPIC], [
-    AX_CHECK_LINK_FLAG([-fPIC],
-      [CFLAGS="$CFLAGS -fPIC"]
-    )
-  ])
+  AX_CHECK_COMPILE_FLAG([-fPIC], [CFLAGS="$CFLAGS -fPIC"])
 ])
 
 AS_IF([test "$enable_pie" != "no"],[
   AX_CHECK_COMPILE_FLAG([-fPIE], [
-    AX_CHECK_LINK_FLAG([-fPIE],
-      [AX_CHECK_LINK_FLAG([-pie],
-        [CFLAGS="$CFLAGS -fPIE"
-         LDFLAGS="$LDFLAGS -pie"])
+    AX_CHECK_LINK_FLAG([-pie], [
+      [CFLAGS="$CFLAGS -fPIE"
+       LDFLAGS="$LDFLAGS -pie"]
     ])
   ])
 ])
@@ -288,6 +288,7 @@ AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wredund
 AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wstrict-prototypes], [CWFLAGS="$CWFLAGS -Wstrict-prototypes"])
 AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wswitch-enum], [CWFLAGS="$CWFLAGS -Wswitch-enum"])
 AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wvariable-decl], [CWFLAGS="$CWFLAGS -Wvariable-decl"])
+AX_CHECK_COMPILE_FLAG([$CWFLAGS -Wno-type-limits], [CWFLAGS="$CWFLAGS -Wno-type-limits"])
 
 AX_CHECK_LINK_FLAG([-Wl,-z,relro], [LDFLAGS="$LDFLAGS -Wl,-z,relro"])
 AX_CHECK_LINK_FLAG([-Wl,-z,now], [LDFLAGS="$LDFLAGS -Wl,-z,now"])
@@ -303,9 +304,9 @@ dnl Checks for headers
 
 AS_IF([test "x$EMSCRIPTEN" = "x" -a "$host_os" != "pnacl"], [
 
-  AC_MSG_CHECKING(for MMX instructions set)
   oldcflags="$CFLAGS"
   AX_CHECK_COMPILE_FLAG([-mmmx], [CFLAGS="$CFLAGS -mmmx"])
+  AC_MSG_CHECKING(for MMX instructions set)
   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #pragma GCC target("mmx")
 #include <mmintrin.h>
@@ -316,9 +317,9 @@ AS_IF([test "x$EMSCRIPTEN" = "x" -a "$ho
     [AC_MSG_RESULT(no)])
   CFLAGS="$oldcflags"
 
-  AC_MSG_CHECKING(for SSE2 instructions set)
   oldcflags="$CFLAGS"
   AX_CHECK_COMPILE_FLAG([-msse2], [CFLAGS="$CFLAGS -msse2"])
+  AC_MSG_CHECKING(for SSE2 instructions set)
   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #pragma GCC target("sse2")
 #ifndef __SSE2__
@@ -326,7 +327,7 @@ AS_IF([test "x$EMSCRIPTEN" = "x" -a "$ho
 #endif
 #include <emmintrin.h>
 ]], [[ __m128d x = _mm_setzero_pd();
-       __m128i y = _mm_srli_epi64(_mm_setzero_si128(), 26); ]])],
+       __m128i z = _mm_srli_epi64(_mm_setzero_si128(), 26); ]])],
     [AC_MSG_RESULT(yes)
      AC_DEFINE([HAVE_EMMINTRIN_H], [1], [sse2 is available])
      AX_CHECK_COMPILE_FLAG([-msse2], [CFLAGS_SSE2="-msse2"])],
@@ -398,10 +399,14 @@ AS_IF([test "x$EMSCRIPTEN" = "x" -a "$ho
 #endif
 #pragma GCC target("avx2")
 #include <immintrin.h>
-]], [[ __m256i x = _mm256_abs_epi8(_mm256_setzero_si256()); ]])],
+]], [[
+__m256 x = _mm256_set1_ps(3.14);
+__m256 y = _mm256_permutevar8x32_ps(x, _mm256_set1_epi32(42));
+return _mm256_movemask_ps(_mm256_cmp_ps(x, y, _CMP_NEQ_OQ));
+]])],
     [AC_MSG_RESULT(yes)
      AC_DEFINE([HAVE_AVX2INTRIN_H], [1], [AVX2 is available])
-     AX_CHECK_COMPILE_FLAG([-mavx2], [CFLAGS_AVX="-mavx2"])
+     AX_CHECK_COMPILE_FLAG([-mavx2], [CFLAGS_AVX2="-mavx2"])
      AC_MSG_CHECKING(if _mm256_broadcastsi128_si256 is correctly defined)
      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #ifdef __native_client__
@@ -451,7 +456,14 @@ AC_SUBST(CFLAGS_AVX2)
 AC_SUBST(CFLAGS_AESNI)
 AC_SUBST(CFLAGS_PCLMUL)
 
-AC_CHECK_HEADERS([sys/mman.h])
+AC_CHECK_HEADERS([sys/mman.h intrin.h])
+
+AC_MSG_CHECKING([if _xgetbv() is available])
+AC_COMPILE_IFELSE(
+  [AC_LANG_PROGRAM([[ #include <intrin.h> ]], [[ (void) _xgetbv(0) ]])],
+  [AC_MSG_RESULT(yes)
+   AC_DEFINE([HAVE__XGETBV], [1], [_xgetbv() is available])],
+  [AC_MSG_RESULT(no)])
 
 dnl Checks for typedefs, structures, and compiler characteristics.
 
@@ -656,6 +668,17 @@ AS_IF([test "x$aligned_access_required"
   [AC_MSG_RESULT(no)
    AC_DEFINE([CPU_UNALIGNED_ACCESS], [1], [unaligned memory access is supported])])
 
+AC_MSG_CHECKING(if atomic operations are supported)
+AC_LINK_IFELSE([AC_LANG_PROGRAM([[ ]], [[
+static volatile int _sodium_lock;
+__sync_lock_test_and_set(&_sodium_lock, 1);
+__sync_lock_release(&_sodium_lock);
+]]
+)],
+[AC_MSG_RESULT(yes)
+ AC_DEFINE([HAVE_ATOMIC_OPS], [1], [atomic operations are supported])],
+[AC_MSG_RESULT(no)])
+
 dnl Checks for functions and headers
 
 AS_IF([test "x$EMSCRIPTEN" = "x"],[
@@ -692,6 +715,7 @@ AH_VERBATIM([NDEBUG], [/* Always evaluat
 #endif])
 
 AC_CONFIG_FILES([Makefile
+                 contrib/Makefile
                  dist-build/Makefile
                  libsodium.pc
                  libsodium-uninstalled.pc
diff -urpN libsodium-1.0.11/contrib/Findsodium.cmake libsodium-1.0.12/contrib/Findsodium.cmake
--- libsodium-1.0.11/contrib/Findsodium.cmake	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/contrib/Findsodium.cmake	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,267 @@
+# Written in 2016 by Henrik Steffen Gaßmann <henrik@gassmann.onl>
+#
+# To the extent possible under law, the author(s) have dedicated all
+# copyright and related and neighboring rights to this software to the
+# public domain worldwide. This software is distributed without any warranty.
+#
+# You should have received a copy of the CC0 Public Domain Dedication
+# along with this software. If not, see
+#
+#     http://creativecommons.org/publicdomain/zero/1.0/
+#
+########################################################################
+# Tries to find the local libsodium installation.
+#
+# On Windows the sodium_DIR environment variable is used as a default
+# hint which can be overridden by setting the corresponding cmake variable.
+#
+# Once done the following variables will be defined:
+#
+#   sodium_FOUND
+#   sodium_INCLUDE_DIR
+#   sodium_LIBRARY_DEBUG
+#   sodium_LIBRARY_RELEASE
+#
+#
+# Furthermore an imported "sodium" target is created.
+#
+
+if (CMAKE_C_COMPILER_ID STREQUAL "GNU"
+    OR CMAKE_C_COMPILER_ID STREQUAL "Clang")
+    set(_GCC_COMPATIBLE 1)
+endif()
+
+# static library option
+option(sodium_USE_STATIC_LIBS "enable to statically link against sodium")
+if(NOT (sodium_USE_STATIC_LIBS EQUAL sodium_USE_STATIC_LIBS_LAST))
+    unset(sodium_LIBRARY CACHE)
+    unset(sodium_LIBRARY_DEBUG CACHE)
+    unset(sodium_LIBRARY_RELEASE CACHE)
+    unset(sodium_DLL_DEBUG CACHE)
+    unset(sodium_DLL_RELEASE CACHE)
+    set(sodium_USE_STATIC_LIBS_LAST ${sodium_USE_STATIC_LIBS} CACHE INTERNAL "internal change tracking variable")
+endif()
+
+
+########################################################################
+# UNIX
+if (UNIX)
+    # import pkg-config
+    find_package(PkgConfig QUIET)
+    if (PKG_CONFIG_FOUND)
+        pkg_check_modules(sodium_PKG QUIET libsodium)
+    endif()
+
+    if(sodium_USE_STATIC_LIBS)
+        set(XPREFIX sodium_PKG_STATIC)
+    else()
+        set(XPREFIX sodium_PKG)
+    endif()
+
+    find_path(sodium_INCLUDE_DIR sodium.h
+        HINTS ${${XPREFIX}_INCLUDE_DIRS}
+    )
+    find_library(sodium_LIBRARY_DEBUG NAMES ${${XPREFIX}_LIBRARIES} sodium
+        HINTS ${${XPREFIX}_LIBRARY_DIRS}
+    )
+    find_library(sodium_LIBRARY_RELEASE NAMES ${${XPREFIX}_LIBRARIES} sodium
+        HINTS ${${XPREFIX}_LIBRARY_DIRS}
+    )
+
+
+########################################################################
+# Windows
+elseif (WIN32)
+    set(sodium_DIR "$ENV{sodium_DIR}" CACHE FILEPATH "sodium install directory")
+    mark_as_advanced(sodium_DIR)
+
+    find_path(sodium_INCLUDE_DIR sodium.h
+        HINTS ${sodium_DIR}
+        PATH_SUFFIXES include
+    )
+
+    if (MSVC)
+        # detect target architecture
+        file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/arch.c" [=[
+            #if defined _M_IX86
+            #error ARCH_VALUE x86_32
+            #elif defined _M_X64
+            #error ARCH_VALUE x86_64
+            #endif
+            #error ARCH_VALUE unknown
+        ]=])
+        try_compile(_UNUSED_VAR "${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_BINARY_DIR}/arch.c"
+            OUTPUT_VARIABLE _COMPILATION_LOG
+        )
+        string(REGEX REPLACE ".*ARCH_VALUE ([a-zA-Z0-9_]+).*" "\\1" _TARGET_ARCH "${_COMPILATION_LOG}")
+
+        # construct library path
+        if (_TARGET_ARCH STREQUAL "x86_32")
+            string(APPEND _PLATFORM_PATH "Win32")
+        elseif(_TARGET_ARCH STREQUAL "x86_64")
+            string(APPEND _PLATFORM_PATH "x64")
+        else()
+            message(FATAL_ERROR "the ${_TARGET_ARCH} architecture is not supported by Findsodium.cmake.")
+        endif()
+        string(APPEND _PLATFORM_PATH "/$$CONFIG$$")
+
+        if (MSVC_VERSION LESS 1900)
+            math(EXPR _VS_VERSION "${MSVC_VERSION} / 10 - 60")
+        else()
+            math(EXPR _VS_VERSION "${MSVC_VERSION} / 10 - 50")
+        endif()
+        string(APPEND _PLATFORM_PATH "/v${_VS_VERSION}")
+
+        if (sodium_USE_STATIC_LIBS)
+            string(APPEND _PLATFORM_PATH "/static")
+        else()
+            string(APPEND _PLATFORM_PATH "/dynamic")
+        endif()
+
+        string(REPLACE "$$CONFIG$$" "Debug" _DEBUG_PATH_SUFFIX "${_PLATFORM_PATH}")
+        string(REPLACE "$$CONFIG$$" "Release" _RELEASE_PATH_SUFFIX "${_PLATFORM_PATH}")
+
+        find_library(sodium_LIBRARY_DEBUG libsodium.lib
+            HINTS ${sodium_DIR}
+            PATH_SUFFIXES ${_DEBUG_PATH_SUFFIX}
+        )
+        find_library(sodium_LIBRARY_RELEASE libsodium.lib
+            HINTS ${sodium_DIR}
+            PATH_SUFFIXES ${_RELEASE_PATH_SUFFIX}
+        )
+        if (NOT sodium_USE_STATIC_LIBS)
+            set(CMAKE_FIND_LIBRARY_SUFFIXES ".dll")
+            find_library(sodium_DLL_DEBUG libsodium
+                HINTS ${sodium_DIR}
+                PATH_SUFFIXES ${_DEBUG_PATH_SUFFIX}
+            )
+            find_library(sodium_DLL_RELEASE libsodium
+                HINTS ${sodium_DIR}
+                PATH_SUFFIXES ${_RELEASE_PATH_SUFFIX}
+            )
+        endif()
+
+    elseif(_GCC_COMPATIBLE)
+        if (sodium_USE_STATIC_LIBS)
+            find_library(sodium_LIBRARY_DEBUG libsodium.a
+                HINTS ${sodium_DIR}
+                PATH_SUFFIXES lib
+            )
+            find_library(sodium_LIBRARY_RELEASE libsodium.a
+                HINTS ${sodium_DIR}
+                PATH_SUFFIXES lib
+            )
+        else()
+            find_library(sodium_LIBRARY_DEBUG libsodium.dll.a
+                HINTS ${sodium_DIR}
+                PATH_SUFFIXES lib
+            )
+            find_library(sodium_LIBRARY_RELEASE libsodium.dll.a
+                HINTS ${sodium_DIR}
+                PATH_SUFFIXES lib
+            )
+
+            file(GLOB _DLL
+                LIST_DIRECTORIES false
+                RELATIVE "${sodium_DIR}/bin"
+                "${sodium_DIR}/bin/libsodium*.dll"
+            )
+            find_library(sodium_DLL_DEBUG ${_DLL} libsodium
+                HINTS ${sodium_DIR}
+                PATH_SUFFIXES bin
+            )
+            find_library(sodium_DLL_RELEASE ${_DLL} libsodium
+                HINTS ${sodium_DIR}
+                PATH_SUFFIXES bin
+            )
+        endif()
+    else()
+        message(FATAL_ERROR "this platform is not supported by FindSodium.cmake")
+    endif()
+
+
+########################################################################
+# unsupported
+else()
+    message(FATAL_ERROR "this platform is not supported by FindSodium.cmake")
+endif()
+
+
+########################################################################
+# common stuff
+
+# extract sodium version
+if (sodium_INCLUDE_DIR)
+    set(_VERSION_HEADER "${_INCLUDE_DIR}/sodium/version.h")
+    if (EXISTS _VERSION_HEADER)
+        file(READ "${_VERSION_HEADER}" _VERSION_HEADER_CONTENT)
+        string(REGEX REPLACE ".*#[ \t]*define[ \t]*SODIUM_VERSION_STRING[ \t]*\"([^\n]*)\".*" "\\1"
+            sodium_VERSION "${_VERSION_HEADER_CONTENT}")
+        set(sodium_VERSION "${sodium_VERSION}" PARENT_SCOPE)
+    endif()
+endif()
+
+# communicate results
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(sodium
+    REQUIRED_VARS
+        sodium_LIBRARY_RELEASE
+        sodium_LIBRARY_DEBUG
+        sodium_INCLUDE_DIR
+    VERSION_VAR
+        sodium_VERSION
+)
+
+# mark file paths as advanced
+mark_as_advanced(sodium_INCLUDE_DIR)
+mark_as_advanced(sodium_LIBRARY_DEBUG)
+mark_as_advanced(sodium_LIBRARY_RELEASE)
+if (WIN32)
+    mark_as_advanced(sodium_DLL_DEBUG)
+    mark_as_advanced(sodium_DLL_RELEASE)
+endif()
+
+# create imported target
+if(sodium_USE_STATIC_LIBS)
+    set(_LIB_TYPE STATIC)
+else()
+    set(_LIB_TYPE SHARED)
+endif()
+add_library(sodium ${_LIB_TYPE} IMPORTED)
+
+set_target_properties(sodium PROPERTIES
+    INTERFACE_INCLUDE_DIRECTORIES "${sodium_INCLUDE_DIR}"
+    IMPORTED_LINK_INTERFACE_LANGUAGES "C"
+)
+
+if (sodium_USE_STATIC_LIBS)
+    set_target_properties(sodium PROPERTIES
+        INTERFACE_COMPILE_DEFINITIONS "SODIUM_STATIC"
+        IMPORTED_LOCATION "${sodium_LIBRARY_RELEASE}"
+        IMPORTED_LOCATION_DEBUG "${sodium_LIBRARY_DEBUG}"
+    )
+else()
+    if (UNIX)
+        set_target_properties(sodium PROPERTIES
+            IMPORTED_LOCATION "${sodium_LIBRARY_RELEASE}"
+            IMPORTED_LOCATION_DEBUG "${sodium_LIBRARY_DEBUG}"
+        )
+    elseif (WIN32)
+        set_target_properties(sodium PROPERTIES
+            IMPORTED_IMPLIB "${sodium_LIBRARY_RELEASE}"
+            IMPORTED_IMPLIB_DEBUG "${sodium_LIBRARY_DEBUG}"
+        )
+        if (NOT (sodium_DLL_DEBUG MATCHES ".*-NOTFOUND"))
+            set_target_properties(sodium PROPERTIES
+                IMPORTED_LOCATION_DEBUG "${sodium_DLL_DEBUG}"
+            )
+        endif()
+        if (NOT (sodium_DLL_RELEASE MATCHES ".*-NOTFOUND"))
+            set_target_properties(sodium PROPERTIES
+                IMPORTED_LOCATION_RELWITHDEBINFO "${sodium_DLL_RELEASE}"
+                IMPORTED_LOCATION_MINSIZEREL "${sodium_DLL_RELEASE}"
+                IMPORTED_LOCATION_RELEASE "${sodium_DLL_RELEASE}"
+            )
+        endif()
+    endif()
+endif()
diff -urpN libsodium-1.0.11/contrib/Makefile.am libsodium-1.0.12/contrib/Makefile.am
--- libsodium-1.0.11/contrib/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/contrib/Makefile.am	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,3 @@
+
+EXTRA_DIST = \
+	Findsodium.cmake
diff -urpN libsodium-1.0.11/contrib/Makefile.in libsodium-1.0.12/contrib/Makefile.in
--- libsodium-1.0.11/contrib/Makefile.in	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/contrib/Makefile.in	2017-03-12 20:17:07.000000000 +0100
@@ -0,0 +1,480 @@
+# Makefile.in generated by automake 1.15 from Makefile.am.
+# @configure_input@
+
+# Copyright (C) 1994-2014 Free Software Foundation, Inc.
+
+# This Makefile.in is free software; the Free Software Foundation
+# gives unlimited permission to copy and/or distribute it,
+# with or without modifications, as long as this notice is preserved.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+# PARTICULAR PURPOSE.
+
+@SET_MAKE@
+VPATH = @srcdir@
+am__is_gnu_make = { \
+  if test -z '$(MAKELEVEL)'; then \
+    false; \
+  elif test -n '$(MAKE_HOST)'; then \
+    true; \
+  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
+    true; \
+  else \
+    false; \
+  fi; \
+}
+am__make_running_with_option = \
+  case $${target_option-} in \
+      ?) ;; \
+      *) echo "am__make_running_with_option: internal error: invalid" \
+              "target option '$${target_option-}' specified" >&2; \
+         exit 1;; \
+  esac; \
+  has_opt=no; \
+  sane_makeflags=$$MAKEFLAGS; \
+  if $(am__is_gnu_make); then \
+    sane_makeflags=$$MFLAGS; \
+  else \
+    case $$MAKEFLAGS in \
+      *\\[\ \	]*) \
+        bs=\\; \
+        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
+          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
+    esac; \
+  fi; \
+  skip_next=no; \
+  strip_trailopt () \
+  { \
+    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
+  }; \
+  for flg in $$sane_makeflags; do \
+    test $$skip_next = yes && { skip_next=no; continue; }; \
+    case $$flg in \
+      *=*|--*) continue;; \
+        -*I) strip_trailopt 'I'; skip_next=yes;; \
+      -*I?*) strip_trailopt 'I';; \
+        -*O) strip_trailopt 'O'; skip_next=yes;; \
+      -*O?*) strip_trailopt 'O';; \
+        -*l) strip_trailopt 'l'; skip_next=yes;; \
+      -*l?*) strip_trailopt 'l';; \
+      -[dEDm]) skip_next=yes;; \
+      -[JT]) skip_next=yes;; \
+    esac; \
+    case $$flg in \
+      *$$target_option*) has_opt=yes; break;; \
+    esac; \
+  done; \
+  test $$has_opt = yes
+am__make_dryrun = (target_option=n; $(am__make_running_with_option))
+am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
+pkgdatadir = $(datadir)/@PACKAGE@
+pkgincludedir = $(includedir)/@PACKAGE@
+pkglibdir = $(libdir)/@PACKAGE@
+pkglibexecdir = $(libexecdir)/@PACKAGE@
+am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
+install_sh_DATA = $(install_sh) -c -m 644
+install_sh_PROGRAM = $(install_sh) -c
+install_sh_SCRIPT = $(install_sh) -c
+INSTALL_HEADER = $(INSTALL_DATA)
+transform = $(program_transform_name)
+NORMAL_INSTALL = :
+PRE_INSTALL = :
+POST_INSTALL = :
+NORMAL_UNINSTALL = :
+PRE_UNINSTALL = :
+POST_UNINSTALL = :
+build_triplet = @build@
+host_triplet = @host@
+subdir = contrib
+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
+am__aclocal_m4_deps = $(top_srcdir)/m4/ax_check_compile_flag.m4 \
+	$(top_srcdir)/m4/ax_check_define.m4 \
+	$(top_srcdir)/m4/ax_check_link_flag.m4 \
+	$(top_srcdir)/m4/ax_pthread.m4 \
+	$(top_srcdir)/m4/ax_valgrind_check.m4 \
+	$(top_srcdir)/m4/ld-output-def.m4 $(top_srcdir)/m4/libtool.m4 \
+	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
+	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
+	$(top_srcdir)/configure.ac
+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
+	$(ACLOCAL_M4)
+DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
+mkinstalldirs = $(install_sh) -d
+CONFIG_CLEAN_FILES =
+CONFIG_CLEAN_VPATH_FILES =
+AM_V_P = $(am__v_P_@AM_V@)
+am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
+am__v_P_0 = false
+am__v_P_1 = :
+AM_V_GEN = $(am__v_GEN_@AM_V@)
+am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
+am__v_GEN_0 = @echo "  GEN     " $@;
+am__v_GEN_1 = 
+AM_V_at = $(am__v_at_@AM_V@)
+am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
+am__v_at_0 = @
+am__v_at_1 = 
+SOURCES =
+DIST_SOURCES =
+am__can_run_installinfo = \
+  case $$AM_UPDATE_INFO_DIR in \
+    n|no|NO) false;; \
+    *) (install-info --version) >/dev/null 2>&1;; \
+  esac
+am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
+am__DIST_COMMON = $(srcdir)/Makefile.in
+DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
+ACLOCAL = @ACLOCAL@
+AMTAR = @AMTAR@
+AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
+AR = @AR@
+AS = @AS@
+AUTOCONF = @AUTOCONF@
+AUTOHEADER = @AUTOHEADER@
+AUTOMAKE = @AUTOMAKE@
+AWK = @AWK@
+CC = @CC@
+CCAS = @CCAS@
+CCASDEPMODE = @CCASDEPMODE@
+CCASFLAGS = @CCASFLAGS@
+CCDEPMODE = @CCDEPMODE@
+CFLAGS = @CFLAGS@
+CFLAGS_AESNI = @CFLAGS_AESNI@
+CFLAGS_AVX = @CFLAGS_AVX@
+CFLAGS_AVX2 = @CFLAGS_AVX2@
+CFLAGS_MMX = @CFLAGS_MMX@
+CFLAGS_PCLMUL = @CFLAGS_PCLMUL@
+CFLAGS_SSE2 = @CFLAGS_SSE2@
+CFLAGS_SSE3 = @CFLAGS_SSE3@
+CFLAGS_SSE41 = @CFLAGS_SSE41@
+CFLAGS_SSSE3 = @CFLAGS_SSSE3@
+CPP = @CPP@
+CPPFLAGS = @CPPFLAGS@
+CWFLAGS = @CWFLAGS@
+CYGPATH_W = @CYGPATH_W@
+DEFS = @DEFS@
+DEPDIR = @DEPDIR@
+DLLTOOL = @DLLTOOL@
+DLL_VERSION = @DLL_VERSION@
+DSYMUTIL = @DSYMUTIL@
+DUMPBIN = @DUMPBIN@
+ECHO_C = @ECHO_C@
+ECHO_N = @ECHO_N@
+ECHO_T = @ECHO_T@
+EGREP = @EGREP@
+EXEEXT = @EXEEXT@
+FGREP = @FGREP@
+GREP = @GREP@
+HAVE_AMD64_ASM_V = @HAVE_AMD64_ASM_V@
+HAVE_AVX_ASM_V = @HAVE_AVX_ASM_V@
+HAVE_CPUID_V = @HAVE_CPUID_V@
+HAVE_TI_MODE_V = @HAVE_TI_MODE_V@
+INSTALL = @INSTALL@
+INSTALL_DATA = @INSTALL_DATA@
+INSTALL_PROGRAM = @INSTALL_PROGRAM@
+INSTALL_SCRIPT = @INSTALL_SCRIPT@
+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
+ISODATE = @ISODATE@
+LD = @LD@
+LDFLAGS = @LDFLAGS@
+LIBOBJS = @LIBOBJS@
+LIBS = @LIBS@
+LIBTOOL = @LIBTOOL@
+LIBTOOL_DEPS = @LIBTOOL_DEPS@
+LIBTOOL_EXTRA_FLAGS = @LIBTOOL_EXTRA_FLAGS@
+LIPO = @LIPO@
+LN_S = @LN_S@
+LTLIBOBJS = @LTLIBOBJS@
+LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
+MAINT = @MAINT@
+MAKEINFO = @MAKEINFO@
+MANIFEST_TOOL = @MANIFEST_TOOL@
+MKDIR_P = @MKDIR_P@
+NM = @NM@
+NMEDIT = @NMEDIT@
+OBJDUMP = @OBJDUMP@
+OBJEXT = @OBJEXT@
+OTOOL = @OTOOL@
+OTOOL64 = @OTOOL64@
+PACKAGE = @PACKAGE@
+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
+PACKAGE_NAME = @PACKAGE_NAME@
+PACKAGE_STRING = @PACKAGE_STRING@
+PACKAGE_TARNAME = @PACKAGE_TARNAME@
+PACKAGE_URL = @PACKAGE_URL@
+PACKAGE_VERSION = @PACKAGE_VERSION@
+PATH_SEPARATOR = @PATH_SEPARATOR@
+PTHREAD_CC = @PTHREAD_CC@
+PTHREAD_CFLAGS = @PTHREAD_CFLAGS@
+PTHREAD_LIBS = @PTHREAD_LIBS@
+RANLIB = @RANLIB@
+SAFECODE_HOME = @SAFECODE_HOME@
+SED = @SED@
+SET_MAKE = @SET_MAKE@
+SHELL = @SHELL@
+SODIUM_LIBRARY_MINIMAL_DEF = @SODIUM_LIBRARY_MINIMAL_DEF@
+SODIUM_LIBRARY_VERSION = @SODIUM_LIBRARY_VERSION@
+SODIUM_LIBRARY_VERSION_MAJOR = @SODIUM_LIBRARY_VERSION_MAJOR@
+SODIUM_LIBRARY_VERSION_MINOR = @SODIUM_LIBRARY_VERSION_MINOR@
+STRIP = @STRIP@
+TEST_LDFLAGS = @TEST_LDFLAGS@
+VALGRIND = @VALGRIND@
+VALGRIND_ENABLED = @VALGRIND_ENABLED@
+VALGRIND_HAVE_TOOL_drd = @VALGRIND_HAVE_TOOL_drd@
+VALGRIND_HAVE_TOOL_exp_sgcheck = @VALGRIND_HAVE_TOOL_exp_sgcheck@
+VALGRIND_HAVE_TOOL_helgrind = @VALGRIND_HAVE_TOOL_helgrind@
+VALGRIND_HAVE_TOOL_memcheck = @VALGRIND_HAVE_TOOL_memcheck@
+VERSION = @VERSION@
+abs_builddir = @abs_builddir@
+abs_srcdir = @abs_srcdir@
+abs_top_builddir = @abs_top_builddir@
+abs_top_srcdir = @abs_top_srcdir@
+ac_ct_AR = @ac_ct_AR@
+ac_ct_CC = @ac_ct_CC@
+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
+am__include = @am__include@
+am__leading_dot = @am__leading_dot@
+am__quote = @am__quote@
+am__tar = @am__tar@
+am__untar = @am__untar@
+ax_pthread_config = @ax_pthread_config@
+bindir = @bindir@
+build = @build@
+build_alias = @build_alias@
+build_cpu = @build_cpu@
+build_os = @build_os@
+build_vendor = @build_vendor@
+builddir = @builddir@
+datadir = @datadir@
+datarootdir = @datarootdir@
+docdir = @docdir@
+dvidir = @dvidir@
+exec_prefix = @exec_prefix@
+host = @host@
+host_alias = @host_alias@
+host_cpu = @host_cpu@
+host_os = @host_os@
+host_vendor = @host_vendor@
+htmldir = @htmldir@
+includedir = @includedir@
+infodir = @infodir@
+install_sh = @install_sh@
+libdir = @libdir@
+libexecdir = @libexecdir@
+localedir = @localedir@
+localstatedir = @localstatedir@
+mandir = @mandir@
+mkdir_p = @mkdir_p@
+oldincludedir = @oldincludedir@
+pdfdir = @pdfdir@
+prefix = @prefix@
+program_transform_name = @program_transform_name@
+psdir = @psdir@
+sbindir = @sbindir@
+sharedstatedir = @sharedstatedir@
+srcdir = @srcdir@
+sysconfdir = @sysconfdir@
+target_alias = @target_alias@
+top_build_prefix = @top_build_prefix@
+top_builddir = @top_builddir@
+top_srcdir = @top_srcdir@
+EXTRA_DIST = \
+	Findsodium.cmake
+
+all: all-am
+
+.SUFFIXES:
+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)
+	@for dep in $?; do \
+	  case '$(am__configure_deps)' in \
+	    *$$dep*) \
+	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
+	        && { if test -f $@; then exit 0; else break; fi; }; \
+	      exit 1;; \
+	  esac; \
+	done; \
+	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign contrib/Makefile'; \
+	$(am__cd) $(top_srcdir) && \
+	  $(AUTOMAKE) --foreign contrib/Makefile
+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
+	@case '$?' in \
+	  *config.status*) \
+	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
+	  *) \
+	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
+	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
+	esac;
+
+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+
+$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
+	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
+$(am__aclocal_m4_deps):
+
+mostlyclean-libtool:
+	-rm -f *.lo
+
+clean-libtool:
+	-rm -rf .libs _libs
+tags TAGS:
+
+ctags CTAGS:
+
+cscope cscopelist:
+
+
+distdir: $(DISTFILES)
+	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
+	list='$(DISTFILES)'; \
+	  dist_files=`for file in $$list; do echo $$file; done | \
+	  sed -e "s|^$$srcdirstrip/||;t" \
+	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
+	case $$dist_files in \
+	  */*) $(MKDIR_P) `echo "$$dist_files" | \
+			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
+			   sort -u` ;; \
+	esac; \
+	for file in $$dist_files; do \
+	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
+	  if test -d $$d/$$file; then \
+	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
+	    if test -d "$(distdir)/$$file"; then \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
+	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
+	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
+	    fi; \
+	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
+	  else \
+	    test -f "$(distdir)/$$file" \
+	    || cp -p $$d/$$file "$(distdir)/$$file" \
+	    || exit 1; \
+	  fi; \
+	done
+check-am: all-am
+check: check-am
+all-am: Makefile
+installdirs:
+install: install-am
+install-exec: install-exec-am
+install-data: install-data-am
+uninstall: uninstall-am
+
+install-am: all-am
+	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
+
+installcheck: installcheck-am
+install-strip:
+	if test -z '$(STRIP)'; then \
+	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	      install; \
+	else \
+	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
+	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
+	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
+	fi
+mostlyclean-generic:
+
+clean-generic:
+
+distclean-generic:
+	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
+	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
+
+maintainer-clean-generic:
+	@echo "This command is intended for maintainers to use"
+	@echo "it deletes files that may require special tools to rebuild."
+clean: clean-am
+
+clean-am: clean-generic clean-libtool mostlyclean-am
+
+distclean: distclean-am
+	-rm -f Makefile
+distclean-am: clean-am distclean-generic
+
+dvi: dvi-am
+
+dvi-am:
+
+html: html-am
+
+html-am:
+
+info: info-am
+
+info-am:
+
+install-data-am:
+
+install-dvi: install-dvi-am
+
+install-dvi-am:
+
+install-exec-am:
+
+install-html: install-html-am
+
+install-html-am:
+
+install-info: install-info-am
+
+install-info-am:
+
+install-man:
+
+install-pdf: install-pdf-am
+
+install-pdf-am:
+
+install-ps: install-ps-am
+
+install-ps-am:
+
+installcheck-am:
+
+maintainer-clean: maintainer-clean-am
+	-rm -f Makefile
+maintainer-clean-am: distclean-am maintainer-clean-generic
+
+mostlyclean: mostlyclean-am
+
+mostlyclean-am: mostlyclean-generic mostlyclean-libtool
+
+pdf: pdf-am
+
+pdf-am:
+
+ps: ps-am
+
+ps-am:
+
+uninstall-am:
+
+.MAKE: install-am install-strip
+
+.PHONY: all all-am check check-am clean clean-generic clean-libtool \
+	cscopelist-am ctags-am distclean distclean-generic \
+	distclean-libtool distdir dvi dvi-am html html-am info info-am \
+	install install-am install-data install-data-am install-dvi \
+	install-dvi-am install-exec install-exec-am install-html \
+	install-html-am install-info install-info-am install-man \
+	install-pdf install-pdf-am install-ps install-ps-am \
+	install-strip installcheck installcheck-am installdirs \
+	maintainer-clean maintainer-clean-generic mostlyclean \
+	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
+	tags-am uninstall uninstall-am
+
+.PRECIOUS: Makefile
+
+
+# Tell versions [3.59,3.63) of GNU make to not export all variables.
+# Otherwise a system limit (for SysV at least) may be exceeded.
+.NOEXPORT:
diff -urpN libsodium-1.0.11/dist-build/android-build.sh libsodium-1.0.12/dist-build/android-build.sh
--- libsodium-1.0.11/dist-build/android-build.sh	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/dist-build/android-build.sh	2017-03-06 23:32:40.000000000 +0100
@@ -6,37 +6,42 @@ if [ -z "$NDK_PLATFORM" ]; then
 else
   export NDK_PLATFORM_COMPAT="${NDK_PLATFORM_COMPAT:-${NDK_PLATFORM}}"
 fi
+export NDK_API_VERSION=$(echo "$NDK_PLATFORM" | sed 's/^android-//')
+export NDK_API_VERSION_COMPAT=$(echo "$NDK_PLATFORM_COMPAT" | sed 's/^android-//')
 
 if [ -z "$ANDROID_NDK_HOME" ]; then
-    echo "You should probably set ANDROID_NDK_HOME to the directory containing"
-    echo "the Android NDK"
-    exit
+  echo "You should probably set ANDROID_NDK_HOME to the directory containing"
+  echo "the Android NDK"
+  exit
 fi
 
 if [ ! -f ./configure ]; then
-	echo "Can't find ./configure. Wrong directory or haven't run autogen.sh?"
-	exit 1
+  echo "Can't find ./configure. Wrong directory or haven't run autogen.sh?" >&2
+  exit 1
 fi
 
 if [ "x$TARGET_ARCH" = 'x' ] || [ "x$ARCH" = 'x' ] || [ "x$HOST_COMPILER" = 'x' ]; then
-    echo "You shouldn't use android-build.sh directly, use android-[arch].sh instead"
-    exit 1
+  echo "You shouldn't use android-build.sh directly, use android-[arch].sh instead" >&2
+  exit 1
 fi
 
-export MAKE_TOOLCHAIN="${ANDROID_NDK_HOME}/build/tools/make-standalone-toolchain.sh"
+export MAKE_TOOLCHAIN="${ANDROID_NDK_HOME}/build/tools/make_standalone_toolchain.py"
 
 export PREFIX="$(pwd)/libsodium-android-${TARGET_ARCH}"
 export TOOLCHAIN_DIR="$(pwd)/android-toolchain-${TARGET_ARCH}"
 export PATH="${PATH}:${TOOLCHAIN_DIR}/bin"
 
+export CC=${CC:-"${HOST_COMPILER}-clang"}
+
 rm -rf "${TOOLCHAIN_DIR}" "${PREFIX}"
 
 echo
 echo "Building for platform [${NDK_PLATFORM}], retaining compatibility with platform [${NDK_PLATFORM_COMPAT}]"
 echo
 
-bash $MAKE_TOOLCHAIN --platform="$NDK_PLATFORM_COMPAT" \
-    --arch="$ARCH" --install-dir="$TOOLCHAIN_DIR" || exit 1
+env - PATH="$PATH" \
+    "$MAKE_TOOLCHAIN" --force --api="$NDK_API_VERSION_COMPAT" \
+    --unified-headers --arch="$ARCH" --install-dir="$TOOLCHAIN_DIR" || exit 1
 
 ./configure \
     --disable-soname-versions \
@@ -50,8 +55,9 @@ if [ "$NDK_PLATFORM" != "$NDK_PLATFORM_C
   echo
   echo "Configuring again for platform [${NDK_PLATFORM}]"
   echo
-  bash $MAKE_TOOLCHAIN --platform="$NDK_PLATFORM" \
-      --arch="$ARCH" --install-dir="$TOOLCHAIN_DIR" || exit 1
+  env - PATH="$PATH" \
+      "$MAKE_TOOLCHAIN" --force --api="$NDK_API_VERSION" \
+      --unified-headers --arch="$ARCH" --install-dir="$TOOLCHAIN_DIR" || exit 1
 
   ./configure \
       --disable-soname-versions \
diff -urpN libsodium-1.0.11/dist-build/android-mips32.sh libsodium-1.0.12/dist-build/android-mips32.sh
--- libsodium-1.0.11/dist-build/android-mips32.sh	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/dist-build/android-mips32.sh	2017-03-06 23:32:40.000000000 +0100
@@ -1,4 +1,4 @@
 #!/bin/sh
 export TARGET_ARCH=mips32
-export CFLAGS="-Os -march=${TARGET_ARCH}"
-ARCH=mips HOST_COMPILER=mipsel-linux-android "$(dirname "$0")/android-build.sh"
+export CFLAGS="-Os"
+ARCH=mips HOST_COMPILER=mips64el-linux-android "$(dirname "$0")/android-build.sh"
diff -urpN libsodium-1.0.11/dist-build/android-mips64.sh libsodium-1.0.12/dist-build/android-mips64.sh
--- libsodium-1.0.11/dist-build/android-mips64.sh	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/dist-build/android-mips64.sh	2017-03-06 23:32:40.000000000 +0100
@@ -1,4 +1,4 @@
 #!/bin/sh
 export TARGET_ARCH=mips64r6
 export CFLAGS="-Os -march=${TARGET_ARCH}"
-NDK_PLATFORM_COMPAT=android-21 ARCH=mips64 HOST_COMPILER=mips64el-linux-android "$(dirname "$0")/android-build.sh"
+CC="mips64el-linux-android-gcc" NDK_PLATFORM_COMPAT=android-21 ARCH=mips64 HOST_COMPILER=mips64el-linux-android "$(dirname "$0")/android-build.sh"
diff -urpN libsodium-1.0.11/dist-build/emscripten.sh libsodium-1.0.12/dist-build/emscripten.sh
--- libsodium-1.0.11/dist-build/emscripten.sh	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/dist-build/emscripten.sh	2017-03-12 13:05:06.000000000 +0100
@@ -1,10 +1,10 @@
 #! /bin/sh
 
 export MAKE_FLAGS='-j4'
-export EXPORTED_FUNCTIONS_STANDARD='["_crypto_aead_chacha20poly1305_abytes","_crypto_aead_chacha20poly1305_decrypt","_crypto_aead_chacha20poly1305_decrypt_detached","_crypto_aead_chacha20poly1305_encrypt","_crypto_aead_chacha20poly1305_encrypt_detached","_crypto_aead_chacha20poly1305_ietf_abytes","_crypto_aead_chacha20poly1305_ietf_decrypt","_crypto_aead_chacha20poly1305_ietf_decrypt_detached","_crypto_aead_chacha20poly1305_ietf_encrypt","_crypto_aead_chacha20poly1305_ietf_encrypt_detached","_crypto_aead_chacha20poly1305_ietf_keybytes","_crypto_aead_chacha20poly1305_ietf_npubbytes","_crypto_aead_chacha20poly1305_ietf_nsecbytes","_crypto_aead_chacha20poly1305_keybytes","_crypto_aead_chacha20poly1305_npubbytes","_crypto_aead_chacha20poly1305_nsecbytes","_crypto_auth","_crypto_auth_bytes","_crypto_auth_keybytes","_crypto_auth_verify","_crypto_box_beforenm","_crypto_box_beforenmbytes","_crypto_box_detached","_crypto_box_detached_afternm","_crypto_box_easy","_crypto_box_easy_afternm","_crypto_box_keypair","_crypto_box_macbytes","_crypto_box_noncebytes","_crypto_box_open_detached","_crypto_box_open_detached_afternm","_crypto_box_open_easy","_crypto_box_open_easy_afternm","_crypto_box_publickeybytes","_crypto_box_seal","_crypto_box_seal_open","_crypto_box_sealbytes","_crypto_box_secretkeybytes","_crypto_box_seed_keypair","_crypto_box_seedbytes","_crypto_generichash","_crypto_generichash_bytes","_crypto_generichash_bytes_max","_crypto_generichash_bytes_min","_crypto_generichash_final","_crypto_generichash_init","_crypto_generichash_keybytes","_crypto_generichash_keybytes_max","_crypto_generichash_keybytes_min","_crypto_generichash_primitive","_crypto_generichash_statebytes","_crypto_generichash_update","_crypto_hash","_crypto_hash_bytes","_crypto_scalarmult","_crypto_scalarmult_base","_crypto_scalarmult_bytes","_crypto_scalarmult_scalarbytes","_crypto_secretbox_detached","_crypto_secretbox_easy","_crypto_secretbox_keybytes","_crypto_secretbox_macbytes","_crypto_secretbox_noncebytes","_crypto_secretbox_open_detached","_crypto_secretbox_open_easy","_crypto_shorthash","_crypto_shorthash_bytes","_crypto_shorthash_keybytes","_crypto_sign","_crypto_sign_bytes","_crypto_sign_detached","_crypto_sign_ed25519_pk_to_curve25519","_crypto_sign_ed25519_sk_to_curve25519","_crypto_sign_keypair","_crypto_sign_open","_crypto_sign_publickeybytes","_crypto_sign_secretkeybytes","_crypto_sign_seed_keypair","_crypto_sign_seedbytes","_crypto_sign_verify_detached","_randombytes","_randombytes_buf","_randombytes_close","_randombytes_random","_randombytes_stir","_randombytes_uniform","_sodium_bin2hex","_sodium_hex2bin","_sodium_init","_sodium_library_version_major","_sodium_library_version_minor","_sodium_version_string"]'
-export EXPORTED_FUNCTIONS_SUMO='["_crypto_aead_chacha20poly1305_abytes","_crypto_aead_chacha20poly1305_decrypt","_crypto_aead_chacha20poly1305_decrypt_detached","_crypto_aead_chacha20poly1305_encrypt","_crypto_aead_chacha20poly1305_encrypt_detached","_crypto_aead_chacha20poly1305_ietf_abytes","_crypto_aead_chacha20poly1305_ietf_decrypt","_crypto_aead_chacha20poly1305_ietf_decrypt_detached","_crypto_aead_chacha20poly1305_ietf_encrypt","_crypto_aead_chacha20poly1305_ietf_encrypt_detached","_crypto_aead_chacha20poly1305_ietf_keybytes","_crypto_aead_chacha20poly1305_ietf_npubbytes","_crypto_aead_chacha20poly1305_ietf_nsecbytes","_crypto_aead_chacha20poly1305_keybytes","_crypto_aead_chacha20poly1305_npubbytes","_crypto_aead_chacha20poly1305_nsecbytes","_crypto_auth","_crypto_auth_bytes","_crypto_auth_hmacsha256","_crypto_auth_hmacsha256_bytes","_crypto_auth_hmacsha256_final","_crypto_auth_hmacsha256_init","_crypto_auth_hmacsha256_keybytes","_crypto_auth_hmacsha256_statebytes","_crypto_auth_hmacsha256_update","_crypto_auth_hmacsha256_verify","_crypto_auth_hmacsha512","_crypto_auth_hmacsha512256","_crypto_auth_hmacsha512256_bytes","_crypto_auth_hmacsha512256_final","_crypto_auth_hmacsha512256_init","_crypto_auth_hmacsha512256_keybytes","_crypto_auth_hmacsha512256_statebytes","_crypto_auth_hmacsha512256_update","_crypto_auth_hmacsha512256_verify","_crypto_auth_hmacsha512_bytes","_crypto_auth_hmacsha512_final","_crypto_auth_hmacsha512_init","_crypto_auth_hmacsha512_keybytes","_crypto_auth_hmacsha512_statebytes","_crypto_auth_hmacsha512_update","_crypto_auth_hmacsha512_verify","_crypto_auth_keybytes","_crypto_auth_verify","_crypto_box","_crypto_box_afternm","_crypto_box_beforenm","_crypto_box_beforenmbytes","_crypto_box_boxzerobytes","_crypto_box_curve25519xsalsa20poly1305","_crypto_box_curve25519xsalsa20poly1305_afternm","_crypto_box_curve25519xsalsa20poly1305_beforenm","_crypto_box_curve25519xsalsa20poly1305_beforenmbytes","_crypto_box_curve25519xsalsa20poly1305_boxzerobytes","_crypto_box_curve25519xsalsa20poly1305_keypair","_crypto_box_curve25519xsalsa20poly1305_macbytes","_crypto_box_curve25519xsalsa20poly1305_noncebytes","_crypto_box_curve25519xsalsa20poly1305_open","_crypto_box_curve25519xsalsa20poly1305_open_afternm","_crypto_box_curve25519xsalsa20poly1305_publickeybytes","_crypto_box_curve25519xsalsa20poly1305_secretkeybytes","_crypto_box_curve25519xsalsa20poly1305_seed_keypair","_crypto_box_curve25519xsalsa20poly1305_seedbytes","_crypto_box_curve25519xsalsa20poly1305_zerobytes","_crypto_box_detached","_crypto_box_detached_afternm","_crypto_box_easy","_crypto_box_easy_afternm","_crypto_box_keypair","_crypto_box_macbytes","_crypto_box_noncebytes","_crypto_box_open","_crypto_box_open_afternm","_crypto_box_open_detached","_crypto_box_open_detached_afternm","_crypto_box_open_easy","_crypto_box_open_easy_afternm","_crypto_box_primitive","_crypto_box_publickeybytes","_crypto_box_seal","_crypto_box_seal_open","_crypto_box_sealbytes","_crypto_box_secretkeybytes","_crypto_box_seed_keypair","_crypto_box_seedbytes","_crypto_box_zerobytes","_crypto_core_hsalsa20","_crypto_core_hsalsa20_constbytes","_crypto_core_hsalsa20_inputbytes","_crypto_core_hsalsa20_keybytes","_crypto_core_hsalsa20_outputbytes","_crypto_core_salsa20","_crypto_core_salsa20_constbytes","_crypto_core_salsa20_inputbytes","_crypto_core_salsa20_keybytes","_crypto_core_salsa20_outputbytes","_crypto_generichash","_crypto_generichash_blake2b","_crypto_generichash_blake2b_bytes","_crypto_generichash_blake2b_bytes_max","_crypto_generichash_blake2b_bytes_min","_crypto_generichash_blake2b_final","_crypto_generichash_blake2b_init","_crypto_generichash_blake2b_init_salt_personal","_crypto_generichash_blake2b_keybytes","_crypto_generichash_blake2b_keybytes_max","_crypto_generichash_blake2b_keybytes_min","_crypto_generichash_blake2b_personalbytes","_crypto_generichash_blake2b_salt_personal","_crypto_generichash_blake2b_saltbytes","_crypto_generichash_blake2b_statebytes","_crypto_generichash_blake2b_update","_crypto_generichash_bytes","_crypto_generichash_bytes_max","_crypto_generichash_bytes_min","_crypto_generichash_final","_crypto_generichash_init","_crypto_generichash_keybytes","_crypto_generichash_keybytes_max","_crypto_generichash_keybytes_min","_crypto_generichash_primitive","_crypto_generichash_statebytes","_crypto_generichash_update","_crypto_hash","_crypto_hash_bytes","_crypto_hash_primitive","_crypto_hash_sha256","_crypto_hash_sha256_bytes","_crypto_hash_sha256_final","_crypto_hash_sha256_init","_crypto_hash_sha256_statebytes","_crypto_hash_sha256_update","_crypto_hash_sha512","_crypto_hash_sha512_bytes","_crypto_hash_sha512_final","_crypto_hash_sha512_init","_crypto_hash_sha512_statebytes","_crypto_hash_sha512_update","_crypto_onetimeauth","_crypto_onetimeauth_bytes","_crypto_onetimeauth_final","_crypto_onetimeauth_init","_crypto_onetimeauth_keybytes","_crypto_onetimeauth_poly1305","_crypto_onetimeauth_poly1305_bytes","_crypto_onetimeauth_poly1305_final","_crypto_onetimeauth_poly1305_init","_crypto_onetimeauth_poly1305_keybytes","_crypto_onetimeauth_poly1305_update","_crypto_onetimeauth_poly1305_verify","_crypto_onetimeauth_primitive","_crypto_onetimeauth_statebytes","_crypto_onetimeauth_update","_crypto_onetimeauth_verify","_crypto_pwhash","_crypto_pwhash_alg_argon2i13","_crypto_pwhash_alg_default","_crypto_pwhash_argon2i","_crypto_pwhash_argon2i_alg_argon2i13","_crypto_pwhash_argon2i_memlimit_interactive","_crypto_pwhash_argon2i_memlimit_moderate","_crypto_pwhash_argon2i_memlimit_sensitive","_crypto_pwhash_argon2i_opslimit_interactive","_crypto_pwhash_argon2i_opslimit_moderate","_crypto_pwhash_argon2i_opslimit_sensitive","_crypto_pwhash_argon2i_saltbytes","_crypto_pwhash_argon2i_str","_crypto_pwhash_argon2i_str_verify","_crypto_pwhash_argon2i_strbytes","_crypto_pwhash_argon2i_strprefix","_crypto_pwhash_memlimit_interactive","_crypto_pwhash_memlimit_moderate","_crypto_pwhash_memlimit_sensitive","_crypto_pwhash_opslimit_interactive","_crypto_pwhash_opslimit_moderate","_crypto_pwhash_opslimit_sensitive","_crypto_pwhash_primitive","_crypto_pwhash_saltbytes","_crypto_pwhash_scryptsalsa208sha256","_crypto_pwhash_scryptsalsa208sha256_ll","_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive","_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive","_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive","_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive","_crypto_pwhash_scryptsalsa208sha256_saltbytes","_crypto_pwhash_scryptsalsa208sha256_str","_crypto_pwhash_scryptsalsa208sha256_str_verify","_crypto_pwhash_scryptsalsa208sha256_strbytes","_crypto_pwhash_scryptsalsa208sha256_strprefix","_crypto_pwhash_str","_crypto_pwhash_str_verify","_crypto_pwhash_strbytes","_crypto_pwhash_strprefix","_crypto_scalarmult","_crypto_scalarmult_base","_crypto_scalarmult_bytes","_crypto_scalarmult_curve25519","_crypto_scalarmult_curve25519_base","_crypto_scalarmult_curve25519_bytes","_crypto_scalarmult_curve25519_scalarbytes","_crypto_scalarmult_primitive","_crypto_scalarmult_scalarbytes","_crypto_secretbox","_crypto_secretbox_boxzerobytes","_crypto_secretbox_detached","_crypto_secretbox_easy","_crypto_secretbox_keybytes","_crypto_secretbox_macbytes","_crypto_secretbox_noncebytes","_crypto_secretbox_open","_crypto_secretbox_open_detached","_crypto_secretbox_open_easy","_crypto_secretbox_primitive","_crypto_secretbox_xsalsa20poly1305","_crypto_secretbox_xsalsa20poly1305_boxzerobytes","_crypto_secretbox_xsalsa20poly1305_keybytes","_crypto_secretbox_xsalsa20poly1305_macbytes","_crypto_secretbox_xsalsa20poly1305_noncebytes","_crypto_secretbox_xsalsa20poly1305_open","_crypto_secretbox_xsalsa20poly1305_zerobytes","_crypto_secretbox_zerobytes","_crypto_shorthash","_crypto_shorthash_bytes","_crypto_shorthash_keybytes","_crypto_shorthash_primitive","_crypto_shorthash_siphash24","_crypto_shorthash_siphash24_bytes","_crypto_shorthash_siphash24_keybytes","_crypto_sign","_crypto_sign_bytes","_crypto_sign_detached","_crypto_sign_ed25519","_crypto_sign_ed25519_bytes","_crypto_sign_ed25519_detached","_crypto_sign_ed25519_keypair","_crypto_sign_ed25519_open","_crypto_sign_ed25519_pk_to_curve25519","_crypto_sign_ed25519_publickeybytes","_crypto_sign_ed25519_secretkeybytes","_crypto_sign_ed25519_seed_keypair","_crypto_sign_ed25519_seedbytes","_crypto_sign_ed25519_sk_to_curve25519","_crypto_sign_ed25519_sk_to_pk","_crypto_sign_ed25519_sk_to_seed","_crypto_sign_ed25519_verify_detached","_crypto_sign_keypair","_crypto_sign_open","_crypto_sign_primitive","_crypto_sign_publickeybytes","_crypto_sign_secretkeybytes","_crypto_sign_seed_keypair","_crypto_sign_seedbytes","_crypto_sign_verify_detached","_crypto_stream","_crypto_stream_chacha20","_crypto_stream_chacha20_ietf","_crypto_stream_chacha20_ietf_noncebytes","_crypto_stream_chacha20_ietf_xor","_crypto_stream_chacha20_ietf_xor_ic","_crypto_stream_chacha20_keybytes","_crypto_stream_chacha20_noncebytes","_crypto_stream_chacha20_xor","_crypto_stream_chacha20_xor_ic","_crypto_stream_keybytes","_crypto_stream_noncebytes","_crypto_stream_primitive","_crypto_stream_salsa20","_crypto_stream_salsa20_keybytes","_crypto_stream_salsa20_noncebytes","_crypto_stream_salsa20_xor","_crypto_stream_salsa20_xor_ic","_crypto_stream_xor","_crypto_stream_xsalsa20","_crypto_stream_xsalsa20_keybytes","_crypto_stream_xsalsa20_noncebytes","_crypto_stream_xsalsa20_xor","_crypto_stream_xsalsa20_xor_ic","_crypto_verify_16","_crypto_verify_16_bytes","_crypto_verify_32","_crypto_verify_32_bytes","_crypto_verify_64","_crypto_verify_64_bytes","_randombytes","_randombytes_buf","_randombytes_close","_randombytes_implementation_name","_randombytes_random","_randombytes_stir","_randombytes_uniform","_sodium_bin2hex","_sodium_hex2bin","_sodium_init","_sodium_library_version_major","_sodium_library_version_minor","_sodium_version_string"]'
-export TOTAL_MEMORY=131072
-export TOTAL_MEMORY_SUMO=35000000
+export EXPORTED_FUNCTIONS_STANDARD='["_crypto_aead_chacha20poly1305_abytes","_crypto_aead_chacha20poly1305_decrypt","_crypto_aead_chacha20poly1305_decrypt_detached","_crypto_aead_chacha20poly1305_encrypt","_crypto_aead_chacha20poly1305_encrypt_detached","_crypto_aead_chacha20poly1305_ietf_abytes","_crypto_aead_chacha20poly1305_ietf_decrypt","_crypto_aead_chacha20poly1305_ietf_decrypt_detached","_crypto_aead_chacha20poly1305_ietf_encrypt","_crypto_aead_chacha20poly1305_ietf_encrypt_detached","_crypto_aead_chacha20poly1305_ietf_keybytes","_crypto_aead_chacha20poly1305_ietf_keygen","_crypto_aead_chacha20poly1305_ietf_npubbytes","_crypto_aead_chacha20poly1305_ietf_nsecbytes","_crypto_aead_chacha20poly1305_keybytes","_crypto_aead_chacha20poly1305_keygen","_crypto_aead_chacha20poly1305_npubbytes","_crypto_aead_chacha20poly1305_nsecbytes","_crypto_aead_xchacha20poly1305_ietf_abytes","_crypto_aead_xchacha20poly1305_ietf_decrypt","_crypto_aead_xchacha20poly1305_ietf_decrypt_detached","_crypto_aead_xchacha20poly1305_ietf_encrypt","_crypto_aead_xchacha20poly1305_ietf_encrypt_detached","_crypto_aead_xchacha20poly1305_ietf_keybytes","_crypto_aead_xchacha20poly1305_ietf_keygen","_crypto_aead_xchacha20poly1305_ietf_npubbytes","_crypto_aead_xchacha20poly1305_ietf_nsecbytes","_crypto_auth","_crypto_auth_bytes","_crypto_auth_keybytes","_crypto_auth_keygen","_crypto_auth_verify","_crypto_box_beforenm","_crypto_box_beforenmbytes","_crypto_box_detached","_crypto_box_detached_afternm","_crypto_box_easy","_crypto_box_easy_afternm","_crypto_box_keypair","_crypto_box_macbytes","_crypto_box_noncebytes","_crypto_box_open_detached","_crypto_box_open_detached_afternm","_crypto_box_open_easy","_crypto_box_open_easy_afternm","_crypto_box_publickeybytes","_crypto_box_seal","_crypto_box_seal_open","_crypto_box_sealbytes","_crypto_box_secretkeybytes","_crypto_box_seed_keypair","_crypto_box_seedbytes","_crypto_core_hchacha20","_crypto_core_hchacha20_constbytes","_crypto_core_hchacha20_inputbytes","_crypto_core_hchacha20_keybytes","_crypto_core_hchacha20_outputbytes","_crypto_generichash","_crypto_generichash_bytes","_crypto_generichash_bytes_max","_crypto_generichash_bytes_min","_crypto_generichash_final","_crypto_generichash_init","_crypto_generichash_keybytes","_crypto_generichash_keybytes_max","_crypto_generichash_keybytes_min","_crypto_generichash_keygen","_crypto_generichash_statebytes","_crypto_generichash_update","_crypto_hash","_crypto_hash_bytes","_crypto_kdf_bytes_max","_crypto_kdf_bytes_min","_crypto_kdf_contextbytes","_crypto_kdf_derive_from_key","_crypto_kdf_keybytes","_crypto_kdf_keygen","_crypto_kx_client_session_keys","_crypto_kx_keypair","_crypto_kx_publickeybytes","_crypto_kx_secretkeybytes","_crypto_kx_seed_keypair","_crypto_kx_seedbytes","_crypto_kx_server_session_keys","_crypto_kx_sessionkeybytes","_crypto_pwhash_bytes_max","_crypto_pwhash_bytes_min","_crypto_pwhash_memlimit_max","_crypto_pwhash_memlimit_min","_crypto_pwhash_opslimit_max","_crypto_pwhash_opslimit_min","_crypto_pwhash_passwd_max","_crypto_pwhash_passwd_min","_crypto_scalarmult","_crypto_scalarmult_base","_crypto_scalarmult_bytes","_crypto_scalarmult_scalarbytes","_crypto_secretbox_detached","_crypto_secretbox_easy","_crypto_secretbox_keybytes","_crypto_secretbox_keygen","_crypto_secretbox_macbytes","_crypto_secretbox_noncebytes","_crypto_secretbox_open_detached","_crypto_secretbox_open_easy","_crypto_shorthash","_crypto_shorthash_bytes","_crypto_shorthash_keybytes","_crypto_shorthash_keygen","_crypto_sign","_crypto_sign_bytes","_crypto_sign_detached","_crypto_sign_ed25519_pk_to_curve25519","_crypto_sign_ed25519_sk_to_curve25519","_crypto_sign_final_create","_crypto_sign_final_verify","_crypto_sign_init","_crypto_sign_keypair","_crypto_sign_open","_crypto_sign_publickeybytes","_crypto_sign_secretkeybytes","_crypto_sign_seed_keypair","_crypto_sign_seedbytes","_crypto_sign_statebytes","_crypto_sign_update","_crypto_sign_verify_detached","_crypto_stream_keygen","_randombytes","_randombytes_buf","_randombytes_buf_deterministic","_randombytes_close","_randombytes_random","_randombytes_seedbytes","_randombytes_stir","_randombytes_uniform","_sodium_bin2hex","_sodium_hex2bin","_sodium_init","_sodium_library_minimal","_sodium_library_version_major","_sodium_library_version_minor","_sodium_version_string"]'
+export EXPORTED_FUNCTIONS_SUMO='["_crypto_aead_chacha20poly1305_abytes","_crypto_aead_chacha20poly1305_decrypt","_crypto_aead_chacha20poly1305_decrypt_detached","_crypto_aead_chacha20poly1305_encrypt","_crypto_aead_chacha20poly1305_encrypt_detached","_crypto_aead_chacha20poly1305_ietf_abytes","_crypto_aead_chacha20poly1305_ietf_decrypt","_crypto_aead_chacha20poly1305_ietf_decrypt_detached","_crypto_aead_chacha20poly1305_ietf_encrypt","_crypto_aead_chacha20poly1305_ietf_encrypt_detached","_crypto_aead_chacha20poly1305_ietf_keybytes","_crypto_aead_chacha20poly1305_ietf_keygen","_crypto_aead_chacha20poly1305_ietf_npubbytes","_crypto_aead_chacha20poly1305_ietf_nsecbytes","_crypto_aead_chacha20poly1305_keybytes","_crypto_aead_chacha20poly1305_keygen","_crypto_aead_chacha20poly1305_npubbytes","_crypto_aead_chacha20poly1305_nsecbytes","_crypto_aead_xchacha20poly1305_ietf_abytes","_crypto_aead_xchacha20poly1305_ietf_decrypt","_crypto_aead_xchacha20poly1305_ietf_decrypt_detached","_crypto_aead_xchacha20poly1305_ietf_encrypt","_crypto_aead_xchacha20poly1305_ietf_encrypt_detached","_crypto_aead_xchacha20poly1305_ietf_keybytes","_crypto_aead_xchacha20poly1305_ietf_keygen","_crypto_aead_xchacha20poly1305_ietf_npubbytes","_crypto_aead_xchacha20poly1305_ietf_nsecbytes","_crypto_auth","_crypto_auth_bytes","_crypto_auth_hmacsha256","_crypto_auth_hmacsha256_bytes","_crypto_auth_hmacsha256_final","_crypto_auth_hmacsha256_init","_crypto_auth_hmacsha256_keybytes","_crypto_auth_hmacsha256_keygen","_crypto_auth_hmacsha256_statebytes","_crypto_auth_hmacsha256_update","_crypto_auth_hmacsha256_verify","_crypto_auth_hmacsha512","_crypto_auth_hmacsha512256","_crypto_auth_hmacsha512256_bytes","_crypto_auth_hmacsha512256_final","_crypto_auth_hmacsha512256_init","_crypto_auth_hmacsha512256_keybytes","_crypto_auth_hmacsha512256_keygen","_crypto_auth_hmacsha512256_statebytes","_crypto_auth_hmacsha512256_update","_crypto_auth_hmacsha512256_verify","_crypto_auth_hmacsha512_bytes","_crypto_auth_hmacsha512_final","_crypto_auth_hmacsha512_init","_crypto_auth_hmacsha512_keybytes","_crypto_auth_hmacsha512_keygen","_crypto_auth_hmacsha512_statebytes","_crypto_auth_hmacsha512_update","_crypto_auth_hmacsha512_verify","_crypto_auth_keybytes","_crypto_auth_keygen","_crypto_auth_primitive","_crypto_auth_verify","_crypto_box","_crypto_box_afternm","_crypto_box_beforenm","_crypto_box_beforenmbytes","_crypto_box_boxzerobytes","_crypto_box_curve25519xchacha20poly1305_beforenm","_crypto_box_curve25519xchacha20poly1305_beforenmbytes","_crypto_box_curve25519xchacha20poly1305_detached","_crypto_box_curve25519xchacha20poly1305_detached_afternm","_crypto_box_curve25519xchacha20poly1305_easy","_crypto_box_curve25519xchacha20poly1305_easy_afternm","_crypto_box_curve25519xchacha20poly1305_keypair","_crypto_box_curve25519xchacha20poly1305_macbytes","_crypto_box_curve25519xchacha20poly1305_noncebytes","_crypto_box_curve25519xchacha20poly1305_open_detached","_crypto_box_curve25519xchacha20poly1305_open_detached_afternm","_crypto_box_curve25519xchacha20poly1305_open_easy","_crypto_box_curve25519xchacha20poly1305_open_easy_afternm","_crypto_box_curve25519xchacha20poly1305_publickeybytes","_crypto_box_curve25519xchacha20poly1305_secretkeybytes","_crypto_box_curve25519xchacha20poly1305_seed_keypair","_crypto_box_curve25519xchacha20poly1305_seedbytes","_crypto_box_curve25519xsalsa20poly1305","_crypto_box_curve25519xsalsa20poly1305_afternm","_crypto_box_curve25519xsalsa20poly1305_beforenm","_crypto_box_curve25519xsalsa20poly1305_beforenmbytes","_crypto_box_curve25519xsalsa20poly1305_boxzerobytes","_crypto_box_curve25519xsalsa20poly1305_keypair","_crypto_box_curve25519xsalsa20poly1305_macbytes","_crypto_box_curve25519xsalsa20poly1305_noncebytes","_crypto_box_curve25519xsalsa20poly1305_open","_crypto_box_curve25519xsalsa20poly1305_open_afternm","_crypto_box_curve25519xsalsa20poly1305_publickeybytes","_crypto_box_curve25519xsalsa20poly1305_secretkeybytes","_crypto_box_curve25519xsalsa20poly1305_seed_keypair","_crypto_box_curve25519xsalsa20poly1305_seedbytes","_crypto_box_curve25519xsalsa20poly1305_zerobytes","_crypto_box_detached","_crypto_box_detached_afternm","_crypto_box_easy","_crypto_box_easy_afternm","_crypto_box_keypair","_crypto_box_macbytes","_crypto_box_noncebytes","_crypto_box_open","_crypto_box_open_afternm","_crypto_box_open_detached","_crypto_box_open_detached_afternm","_crypto_box_open_easy","_crypto_box_open_easy_afternm","_crypto_box_primitive","_crypto_box_publickeybytes","_crypto_box_seal","_crypto_box_seal_open","_crypto_box_sealbytes","_crypto_box_secretkeybytes","_crypto_box_seed_keypair","_crypto_box_seedbytes","_crypto_box_zerobytes","_crypto_core_hchacha20","_crypto_core_hchacha20_constbytes","_crypto_core_hchacha20_inputbytes","_crypto_core_hchacha20_keybytes","_crypto_core_hchacha20_outputbytes","_crypto_core_hsalsa20","_crypto_core_hsalsa20_constbytes","_crypto_core_hsalsa20_inputbytes","_crypto_core_hsalsa20_keybytes","_crypto_core_hsalsa20_outputbytes","_crypto_core_salsa20","_crypto_core_salsa2012","_crypto_core_salsa2012_constbytes","_crypto_core_salsa2012_inputbytes","_crypto_core_salsa2012_keybytes","_crypto_core_salsa2012_outputbytes","_crypto_core_salsa208","_crypto_core_salsa208_constbytes","_crypto_core_salsa208_inputbytes","_crypto_core_salsa208_keybytes","_crypto_core_salsa208_outputbytes","_crypto_core_salsa20_constbytes","_crypto_core_salsa20_inputbytes","_crypto_core_salsa20_keybytes","_crypto_core_salsa20_outputbytes","_crypto_generichash","_crypto_generichash_blake2b","_crypto_generichash_blake2b_bytes","_crypto_generichash_blake2b_bytes_max","_crypto_generichash_blake2b_bytes_min","_crypto_generichash_blake2b_final","_crypto_generichash_blake2b_init","_crypto_generichash_blake2b_init_salt_personal","_crypto_generichash_blake2b_keybytes","_crypto_generichash_blake2b_keybytes_max","_crypto_generichash_blake2b_keybytes_min","_crypto_generichash_blake2b_keygen","_crypto_generichash_blake2b_personalbytes","_crypto_generichash_blake2b_salt_personal","_crypto_generichash_blake2b_saltbytes","_crypto_generichash_blake2b_statebytes","_crypto_generichash_blake2b_update","_crypto_generichash_bytes","_crypto_generichash_bytes_max","_crypto_generichash_bytes_min","_crypto_generichash_final","_crypto_generichash_init","_crypto_generichash_keybytes","_crypto_generichash_keybytes_max","_crypto_generichash_keybytes_min","_crypto_generichash_keygen","_crypto_generichash_primitive","_crypto_generichash_statebytes","_crypto_generichash_update","_crypto_hash","_crypto_hash_bytes","_crypto_hash_primitive","_crypto_hash_sha256","_crypto_hash_sha256_bytes","_crypto_hash_sha256_final","_crypto_hash_sha256_init","_crypto_hash_sha256_statebytes","_crypto_hash_sha256_update","_crypto_hash_sha512","_crypto_hash_sha512_bytes","_crypto_hash_sha512_final","_crypto_hash_sha512_init","_crypto_hash_sha512_statebytes","_crypto_hash_sha512_update","_crypto_kdf_blake2b_bytes_max","_crypto_kdf_blake2b_bytes_min","_crypto_kdf_blake2b_contextbytes","_crypto_kdf_blake2b_derive_from_key","_crypto_kdf_blake2b_keybytes","_crypto_kdf_bytes_max","_crypto_kdf_bytes_min","_crypto_kdf_contextbytes","_crypto_kdf_derive_from_key","_crypto_kdf_keybytes","_crypto_kdf_keygen","_crypto_kdf_primitive","_crypto_kx_client_session_keys","_crypto_kx_keypair","_crypto_kx_primitive","_crypto_kx_publickeybytes","_crypto_kx_secretkeybytes","_crypto_kx_seed_keypair","_crypto_kx_seedbytes","_crypto_kx_server_session_keys","_crypto_kx_sessionkeybytes","_crypto_onetimeauth","_crypto_onetimeauth_bytes","_crypto_onetimeauth_final","_crypto_onetimeauth_init","_crypto_onetimeauth_keybytes","_crypto_onetimeauth_keygen","_crypto_onetimeauth_poly1305","_crypto_onetimeauth_poly1305_bytes","_crypto_onetimeauth_poly1305_final","_crypto_onetimeauth_poly1305_init","_crypto_onetimeauth_poly1305_keybytes","_crypto_onetimeauth_poly1305_keygen","_crypto_onetimeauth_poly1305_statebytes","_crypto_onetimeauth_poly1305_update","_crypto_onetimeauth_poly1305_verify","_crypto_onetimeauth_primitive","_crypto_onetimeauth_statebytes","_crypto_onetimeauth_update","_crypto_onetimeauth_verify","_crypto_pwhash","_crypto_pwhash_alg_argon2i13","_crypto_pwhash_alg_default","_crypto_pwhash_argon2i","_crypto_pwhash_argon2i_alg_argon2i13","_crypto_pwhash_argon2i_bytes_max","_crypto_pwhash_argon2i_bytes_min","_crypto_pwhash_argon2i_memlimit_interactive","_crypto_pwhash_argon2i_memlimit_max","_crypto_pwhash_argon2i_memlimit_min","_crypto_pwhash_argon2i_memlimit_moderate","_crypto_pwhash_argon2i_memlimit_sensitive","_crypto_pwhash_argon2i_opslimit_interactive","_crypto_pwhash_argon2i_opslimit_max","_crypto_pwhash_argon2i_opslimit_min","_crypto_pwhash_argon2i_opslimit_moderate","_crypto_pwhash_argon2i_opslimit_sensitive","_crypto_pwhash_argon2i_passwd_max","_crypto_pwhash_argon2i_passwd_min","_crypto_pwhash_argon2i_saltbytes","_crypto_pwhash_argon2i_str","_crypto_pwhash_argon2i_str_verify","_crypto_pwhash_argon2i_strbytes","_crypto_pwhash_argon2i_strprefix","_crypto_pwhash_bytes_max","_crypto_pwhash_bytes_min","_crypto_pwhash_memlimit_interactive","_crypto_pwhash_memlimit_max","_crypto_pwhash_memlimit_min","_crypto_pwhash_memlimit_moderate","_crypto_pwhash_memlimit_sensitive","_crypto_pwhash_opslimit_interactive","_crypto_pwhash_opslimit_max","_crypto_pwhash_opslimit_min","_crypto_pwhash_opslimit_moderate","_crypto_pwhash_opslimit_sensitive","_crypto_pwhash_passwd_max","_crypto_pwhash_passwd_min","_crypto_pwhash_primitive","_crypto_pwhash_saltbytes","_crypto_pwhash_scryptsalsa208sha256","_crypto_pwhash_scryptsalsa208sha256_bytes_max","_crypto_pwhash_scryptsalsa208sha256_bytes_min","_crypto_pwhash_scryptsalsa208sha256_ll","_crypto_pwhash_scryptsalsa208sha256_memlimit_interactive","_crypto_pwhash_scryptsalsa208sha256_memlimit_max","_crypto_pwhash_scryptsalsa208sha256_memlimit_min","_crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive","_crypto_pwhash_scryptsalsa208sha256_opslimit_interactive","_crypto_pwhash_scryptsalsa208sha256_opslimit_max","_crypto_pwhash_scryptsalsa208sha256_opslimit_min","_crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive","_crypto_pwhash_scryptsalsa208sha256_passwd_max","_crypto_pwhash_scryptsalsa208sha256_passwd_min","_crypto_pwhash_scryptsalsa208sha256_saltbytes","_crypto_pwhash_scryptsalsa208sha256_str","_crypto_pwhash_scryptsalsa208sha256_str_verify","_crypto_pwhash_scryptsalsa208sha256_strbytes","_crypto_pwhash_scryptsalsa208sha256_strprefix","_crypto_pwhash_str","_crypto_pwhash_str_verify","_crypto_pwhash_strbytes","_crypto_pwhash_strprefix","_crypto_scalarmult","_crypto_scalarmult_base","_crypto_scalarmult_bytes","_crypto_scalarmult_curve25519","_crypto_scalarmult_curve25519_base","_crypto_scalarmult_curve25519_bytes","_crypto_scalarmult_curve25519_scalarbytes","_crypto_scalarmult_primitive","_crypto_scalarmult_scalarbytes","_crypto_secretbox","_crypto_secretbox_boxzerobytes","_crypto_secretbox_detached","_crypto_secretbox_easy","_crypto_secretbox_keybytes","_crypto_secretbox_keygen","_crypto_secretbox_macbytes","_crypto_secretbox_noncebytes","_crypto_secretbox_open","_crypto_secretbox_open_detached","_crypto_secretbox_open_easy","_crypto_secretbox_primitive","_crypto_secretbox_xchacha20poly1305_detached","_crypto_secretbox_xchacha20poly1305_easy","_crypto_secretbox_xchacha20poly1305_keybytes","_crypto_secretbox_xchacha20poly1305_macbytes","_crypto_secretbox_xchacha20poly1305_noncebytes","_crypto_secretbox_xchacha20poly1305_open_detached","_crypto_secretbox_xchacha20poly1305_open_easy","_crypto_secretbox_xsalsa20poly1305","_crypto_secretbox_xsalsa20poly1305_boxzerobytes","_crypto_secretbox_xsalsa20poly1305_keybytes","_crypto_secretbox_xsalsa20poly1305_keygen","_crypto_secretbox_xsalsa20poly1305_macbytes","_crypto_secretbox_xsalsa20poly1305_noncebytes","_crypto_secretbox_xsalsa20poly1305_open","_crypto_secretbox_xsalsa20poly1305_zerobytes","_crypto_secretbox_zerobytes","_crypto_shorthash","_crypto_shorthash_bytes","_crypto_shorthash_keybytes","_crypto_shorthash_keygen","_crypto_shorthash_primitive","_crypto_shorthash_siphash24","_crypto_shorthash_siphash24_bytes","_crypto_shorthash_siphash24_keybytes","_crypto_shorthash_siphashx24","_crypto_shorthash_siphashx24_bytes","_crypto_shorthash_siphashx24_keybytes","_crypto_sign","_crypto_sign_bytes","_crypto_sign_detached","_crypto_sign_ed25519","_crypto_sign_ed25519_bytes","_crypto_sign_ed25519_detached","_crypto_sign_ed25519_keypair","_crypto_sign_ed25519_open","_crypto_sign_ed25519_pk_to_curve25519","_crypto_sign_ed25519_publickeybytes","_crypto_sign_ed25519_secretkeybytes","_crypto_sign_ed25519_seed_keypair","_crypto_sign_ed25519_seedbytes","_crypto_sign_ed25519_sk_to_curve25519","_crypto_sign_ed25519_sk_to_pk","_crypto_sign_ed25519_sk_to_seed","_crypto_sign_ed25519_verify_detached","_crypto_sign_ed25519ph_final_create","_crypto_sign_ed25519ph_final_verify","_crypto_sign_ed25519ph_init","_crypto_sign_ed25519ph_statebytes","_crypto_sign_ed25519ph_update","_crypto_sign_final_create","_crypto_sign_final_verify","_crypto_sign_init","_crypto_sign_keypair","_crypto_sign_open","_crypto_sign_primitive","_crypto_sign_publickeybytes","_crypto_sign_secretkeybytes","_crypto_sign_seed_keypair","_crypto_sign_seedbytes","_crypto_sign_statebytes","_crypto_sign_update","_crypto_sign_verify_detached","_crypto_stream","_crypto_stream_aes128ctr","_crypto_stream_aes128ctr_afternm","_crypto_stream_aes128ctr_beforenm","_crypto_stream_aes128ctr_beforenmbytes","_crypto_stream_aes128ctr_keybytes","_crypto_stream_aes128ctr_noncebytes","_crypto_stream_aes128ctr_xor","_crypto_stream_aes128ctr_xor_afternm","_crypto_stream_chacha20","_crypto_stream_chacha20_ietf","_crypto_stream_chacha20_ietf_keybytes","_crypto_stream_chacha20_ietf_keygen","_crypto_stream_chacha20_ietf_noncebytes","_crypto_stream_chacha20_ietf_xor","_crypto_stream_chacha20_ietf_xor_ic","_crypto_stream_chacha20_keybytes","_crypto_stream_chacha20_keygen","_crypto_stream_chacha20_noncebytes","_crypto_stream_chacha20_xor","_crypto_stream_chacha20_xor_ic","_crypto_stream_keybytes","_crypto_stream_keygen","_crypto_stream_noncebytes","_crypto_stream_primitive","_crypto_stream_salsa20","_crypto_stream_salsa2012","_crypto_stream_salsa2012_keybytes","_crypto_stream_salsa2012_keygen","_crypto_stream_salsa2012_noncebytes","_crypto_stream_salsa2012_xor","_crypto_stream_salsa208","_crypto_stream_salsa208_keybytes","_crypto_stream_salsa208_keygen","_crypto_stream_salsa208_noncebytes","_crypto_stream_salsa208_xor","_crypto_stream_salsa20_keybytes","_crypto_stream_salsa20_keygen","_crypto_stream_salsa20_noncebytes","_crypto_stream_salsa20_xor","_crypto_stream_salsa20_xor_ic","_crypto_stream_xchacha20","_crypto_stream_xchacha20_keybytes","_crypto_stream_xchacha20_keygen","_crypto_stream_xchacha20_noncebytes","_crypto_stream_xchacha20_xor","_crypto_stream_xchacha20_xor_ic","_crypto_stream_xor","_crypto_stream_xsalsa20","_crypto_stream_xsalsa20_keybytes","_crypto_stream_xsalsa20_keygen","_crypto_stream_xsalsa20_noncebytes","_crypto_stream_xsalsa20_xor","_crypto_stream_xsalsa20_xor_ic","_crypto_verify_16","_crypto_verify_16_bytes","_crypto_verify_32","_crypto_verify_32_bytes","_crypto_verify_64","_crypto_verify_64_bytes","_randombytes","_randombytes_buf","_randombytes_buf_deterministic","_randombytes_close","_randombytes_implementation_name","_randombytes_random","_randombytes_seedbytes","_randombytes_stir","_randombytes_uniform","_sodium_bin2hex","_sodium_hex2bin","_sodium_init","_sodium_library_minimal","_sodium_library_version_major","_sodium_library_version_minor","_sodium_version_string"]'
+export TOTAL_MEMORY=16777216
+export TOTAL_MEMORY_SUMO=67108864
 export LDFLAGS="-s RESERVED_FUNCTION_POINTERS=8"
 export LDFLAGS="${LDFLAGS} -s NO_DYNAMIC_EXECUTION=1 -s RUNNING_JS_OPTS=1 -s ASSERTIONS=0"
 export LDFLAGS="${LDFLAGS} -s AGGRESSIVE_VARIABLE_ELIMINATION=1 -s ALIASING_FUNCTION_POINTERS=1"
@@ -117,7 +117,7 @@ else
       mv -f "${file}.tmp" "$file"
     done
   )
-  time make $MAKE_FLAGS check || exit 1
+  make $MAKE_FLAGS check || exit 1
   touch "$DONE_FILE"
 fi
 
diff -urpN libsodium-1.0.11/dist-build/ios.sh libsodium-1.0.12/dist-build/ios.sh
--- libsodium-1.0.11/dist-build/ios.sh	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/dist-build/ios.sh	2017-03-06 11:13:57.000000000 +0100
@@ -14,10 +14,17 @@ export IOS32_PREFIX="$PREFIX/tmp/ios32"
 export IOS64_PREFIX="$PREFIX/tmp/ios64"
 export SIMULATOR32_PREFIX="$PREFIX/tmp/simulator32"
 export SIMULATOR64_PREFIX="$PREFIX/tmp/simulator64"
-export IOS_SIMULATOR_VERSION_MIN=${IOS_SIMULATOR_VERSION_MIN-"5.1.1"}
-export IOS_VERSION_MIN=${IOS_VERSION_MIN-"5.1.1"}
 export XCODEDIR=$(xcode-select -p)
 
+xcode_major=$(xcodebuild -version|egrep '^Xcode '|cut -d' ' -f2|cut -d. -f1)
+if [ $xcode_major -ge 8 ]; then
+  export IOS_SIMULATOR_VERSION_MIN=${IOS_SIMULATOR_VERSION_MIN-"6.0.0"}
+  export IOS_VERSION_MIN=${IOS_VERSION_MIN-"6.0.0"}
+else
+  export IOS_SIMULATOR_VERSION_MIN=${IOS_SIMULATOR_VERSION_MIN-"5.1.1"}
+  export IOS_VERSION_MIN=${IOS_VERSION_MIN-"5.1.1"}
+fi
+
 mkdir -p $SIMULATOR32_PREFIX $SIMULATOR64_PREFIX $IOS32_PREFIX $IOS64_PREFIX || exit 1
 
 # Build for the simulator
@@ -31,7 +38,8 @@ export LDFLAGS="-arch i386 -isysroot ${S
 
 make distclean > /dev/null
 
-./configure --disable-shared \
+./configure --host=i686-apple-darwin10 \
+            --disable-shared \
             --enable-minimal \
             --prefix="$SIMULATOR32_PREFIX" || exit 1
 
@@ -43,7 +51,8 @@ export LDFLAGS="-arch x86_64 -isysroot $
 
 make distclean > /dev/null
 
-./configure --disable-shared \
+./configure --host=x86_64-apple-darwin10 \
+            --disable-shared \
             --enable-minimal \
             --prefix="$SIMULATOR64_PREFIX"
 
diff -urpN libsodium-1.0.11/dist-build/Makefile.in libsodium-1.0.12/dist-build/Makefile.in
--- libsodium-1.0.11/dist-build/Makefile.in	2016-07-31 16:34:39.000000000 +0200
+++ libsodium-1.0.12/dist-build/Makefile.in	2017-03-12 20:17:07.000000000 +0100
@@ -214,6 +214,7 @@ SAFECODE_HOME = @SAFECODE_HOME@
 SED = @SED@
 SET_MAKE = @SET_MAKE@
 SHELL = @SHELL@
+SODIUM_LIBRARY_MINIMAL_DEF = @SODIUM_LIBRARY_MINIMAL_DEF@
 SODIUM_LIBRARY_VERSION = @SODIUM_LIBRARY_VERSION@
 SODIUM_LIBRARY_VERSION_MAJOR = @SODIUM_LIBRARY_VERSION_MAJOR@
 SODIUM_LIBRARY_VERSION_MINOR = @SODIUM_LIBRARY_VERSION_MINOR@
diff -urpN libsodium-1.0.11/libsodium.vcxproj libsodium-1.0.12/libsodium.vcxproj
--- libsodium-1.0.11/libsodium.vcxproj	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/libsodium.vcxproj	2017-03-12 18:52:47.000000000 +0100
@@ -1,5 +1,5 @@
 ﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <ItemGroup Label="ProjectConfigurations">
     <ProjectConfiguration Include="DebugDLL|Win32">
       <Configuration>DebugDLL</Configuration>
@@ -317,50 +317,42 @@
   <ItemGroup>
     <ClCompile Include="src\libsodium\crypto_aead\aes256gcm\aesni\aead_aes256gcm_aesni.c" />
     <ClCompile Include="src\libsodium\crypto_aead\chacha20poly1305\sodium\aead_chacha20poly1305.c" />
+    <ClCompile Include="src\libsodium\crypto_aead\xchacha20poly1305\sodium\aead_xchacha20poly1305.c" />
     <ClCompile Include="src\libsodium\crypto_auth\crypto_auth.c" />
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha256\auth_hmacsha256_api.c" />
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha256\cp\hmac_hmacsha256.c" />
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha256\cp\verify_hmacsha256.c" />
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512\auth_hmacsha512_api.c" />
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512\cp\hmac_hmacsha512.c" />
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512\cp\verify_hmacsha512.c" />
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512256\auth_hmacsha512256_api.c" />
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512256\cp\hmac_hmacsha512256.c" />
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512256\cp\verify_hmacsha512256.c" />
+    <ClCompile Include="src\libsodium\crypto_auth\hmacsha256\auth_hmacsha256.c" />
+    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512\auth_hmacsha512.c" />
+    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512256\auth_hmacsha512256.c" />
     <ClCompile Include="src\libsodium\crypto_box\crypto_box.c" />
     <ClCompile Include="src\libsodium\crypto_box\crypto_box_easy.c" />
     <ClCompile Include="src\libsodium\crypto_box\crypto_box_seal.c" />
-    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\box_curve25519xsalsa20poly1305_api.c" />
-    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\ref\after_curve25519xsalsa20poly1305.c" />
-    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\ref\before_curve25519xsalsa20poly1305.c" />
-    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\ref\box_curve25519xsalsa20poly1305.c" />
-    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\ref\keypair_curve25519xsalsa20poly1305.c" />
+    <ClCompile Include="src\libsodium\crypto_box\curve25519xchacha20poly1305\box_curve25519xchacha20poly1305.c" />
+    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\box_curve25519xsalsa20poly1305.c" />
     <ClCompile Include="src\libsodium\crypto_core\curve25519\ref10\curve25519_ref10.c" />
     <ClCompile Include="src\libsodium\crypto_core\hchacha20\core_hchacha20.c" />
-    <ClCompile Include="src\libsodium\crypto_core\hsalsa20\core_hsalsa20_api.c" />
-    <ClCompile Include="src\libsodium\crypto_core\hsalsa20\ref2\core_hsalsa20.c" />
-    <ClCompile Include="src\libsodium\crypto_core\salsa2012\core_salsa2012_api.c" />
-    <ClCompile Include="src\libsodium\crypto_core\salsa2012\ref\core_salsa2012.c" />
-    <ClCompile Include="src\libsodium\crypto_core\salsa208\core_salsa208_api.c" />
-    <ClCompile Include="src\libsodium\crypto_core\salsa208\ref\core_salsa208.c" />
-    <ClCompile Include="src\libsodium\crypto_core\salsa20\core_salsa20_api.c" />
-    <ClCompile Include="src\libsodium\crypto_core\salsa20\ref\core_salsa20.c" />
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\generichash_blake2_api.c" />
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\blake2b-compress-ref.c" />
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\blake2b-compress-avx2.c" />
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\blake2b-compress-sse41.c" />
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\blake2b-compress-ssse3.c" />
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\blake2b-ref.c" />
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\generichash_blake2b.c" />
+    <ClCompile Include="src\libsodium\crypto_core\hsalsa20\core_hsalsa20.c" />
+    <ClCompile Include="src\libsodium\crypto_core\hsalsa20\ref2\core_hsalsa20_ref2.c" />
+    <ClCompile Include="src\libsodium\crypto_core\salsa\ref\core_salsa_ref.c" />
     <ClCompile Include="src\libsodium\crypto_generichash\crypto_generichash.c" />
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\generichash_blake2.c" />
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-avx2.c" />
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-ref.c" />
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-sse41.c" />
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-ssse3.c" />
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-ref.c" />
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\generichash_blake2b.c" />
     <ClCompile Include="src\libsodium\crypto_hash\crypto_hash.c" />
-    <ClCompile Include="src\libsodium\crypto_hash\sha256\hash_sha256_api.c" />
-    <ClCompile Include="src\libsodium\crypto_hash\sha256\cp\hash_sha256.c" />
-    <ClCompile Include="src\libsodium\crypto_hash\sha512\hash_sha512_api.c" />
-    <ClCompile Include="src\libsodium\crypto_hash\sha512\cp\hash_sha512.c" />
+    <ClCompile Include="src\libsodium\crypto_hash\sha256\hash_sha256.c" />
+    <ClCompile Include="src\libsodium\crypto_hash\sha256\cp\hash_sha256_cp.c" />
+    <ClCompile Include="src\libsodium\crypto_hash\sha512\hash_sha512.c" />
+    <ClCompile Include="src\libsodium\crypto_hash\sha512\cp\hash_sha512_cp.c" />
+    <ClCompile Include="src\libsodium\crypto_kdf\crypto_kdf.c" />
+    <ClCompile Include="src\libsodium\crypto_kdf\blake2b\kdf_blake2b.c" />
+    <ClCompile Include="src\libsodium\crypto_kx\crypto_kx.c" />
     <ClCompile Include="src\libsodium\crypto_onetimeauth\crypto_onetimeauth.c" />
-    <ClCompile Include="src\libsodium\crypto_onetimeauth\poly1305\donna\poly1305_donna.c" />
     <ClCompile Include="src\libsodium\crypto_onetimeauth\poly1305\onetimeauth_poly1305.c" />
+    <ClCompile Include="src\libsodium\crypto_onetimeauth\poly1305\donna\poly1305_donna.c" />
+    <ClCompile Include="src\libsodium\crypto_onetimeauth\poly1305\sse2\poly1305_sse2.c" />
+    <ClCompile Include="src\libsodium\crypto_pwhash\crypto_pwhash.c" />
     <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2-core.c" />
     <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2-encoding.c" />
     <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2-fill-block-ref.c" />
@@ -368,62 +360,60 @@
     <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2.c" />
     <ClCompile Include="src\libsodium\crypto_pwhash\argon2\blake2b-long.c" />
     <ClCompile Include="src\libsodium\crypto_pwhash\argon2\pwhash_argon2i.c" />
-    <ClCompile Include="src\libsodium\crypto_pwhash\crypto_pwhash.c" />
     <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\crypto_scrypt-common.c" />
-    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\nosse\pwhash_scryptsalsa208sha256_nosse.c" />
     <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\pbkdf2-sha256.c" />
     <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\pwhash_scryptsalsa208sha256.c" />
     <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\scrypt_platform.c" />
+    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\nosse\pwhash_scryptsalsa208sha256_nosse.c" />
     <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\sse\pwhash_scryptsalsa208sha256_sse.c" />
     <ClCompile Include="src\libsodium\crypto_scalarmult\crypto_scalarmult.c" />
+    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\scalarmult_curve25519.c" />
     <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\donna_c64\curve25519_donna_c64.c" />
     <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\ref10\x25519_ref10.c" />
     <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\curve25519_sandy2x.c" />
     <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe51_invert.c" />
     <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe_frombytes_sandy2x.c" />
-    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\scalarmult_curve25519.c" />
     <ClCompile Include="src\libsodium\crypto_secretbox\crypto_secretbox.c" />
     <ClCompile Include="src\libsodium\crypto_secretbox\crypto_secretbox_easy.c" />
-    <ClCompile Include="src\libsodium\crypto_secretbox\xsalsa20poly1305\ref\box_xsalsa20poly1305.c" />
-    <ClCompile Include="src\libsodium\crypto_secretbox\xsalsa20poly1305\secretbox_xsalsa20poly1305_api.c" />
+    <ClCompile Include="src\libsodium\crypto_secretbox\xchacha20poly1305\secretbox_xchacha20poly1305.c" />
+    <ClCompile Include="src\libsodium\crypto_secretbox\xsalsa20poly1305\secretbox_xsalsa20poly1305.c" />
     <ClCompile Include="src\libsodium\crypto_shorthash\crypto_shorthash.c" />
-    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\ref\shorthash_siphash24.c" />
-    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\shorthash_siphash24_api.c" />
+    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\shorthash_siphash24.c" />
+    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\shorthash_siphashx24.c" />
+    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\ref\shorthash_siphash24_ref.c" />
+    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\ref\shorthash_siphashx24_ref.c" />
     <ClCompile Include="src\libsodium\crypto_sign\crypto_sign.c" />
+    <ClCompile Include="src\libsodium\crypto_sign\ed25519\sign_ed25519.c" />
     <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\keypair.c" />
     <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\obsolete.c" />
     <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\open.c" />
     <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\sign.c" />
-    <ClCompile Include="src\libsodium\crypto_sign\ed25519\sign_ed25519_api.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\afternm_aes128ctr.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\beforenm_aes128ctr.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\consts_aes128ctr.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\int128_aes128ctr.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\stream_aes128ctr.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\xor_afternm_aes128ctr.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\stream_aes128ctr_api.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\chacha20\ref\stream_chacha20_ref.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\chacha20\stream_chacha20.c" />
     <ClCompile Include="src\libsodium\crypto_stream\crypto_stream.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\salsa2012\ref\stream_salsa2012.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\salsa2012\ref\xor_salsa2012.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\salsa2012\stream_salsa2012_api.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\salsa208\ref\stream_salsa208.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\salsa208\ref\xor_salsa208.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\salsa208\stream_salsa208_api.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\salsa20\ref\stream_salsa20_ref.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\salsa20\ref\xor_salsa20_ref.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\salsa20\stream_salsa20_api.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\xsalsa20\ref\stream_xsalsa20.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\xsalsa20\ref\xor_xsalsa20.c" />
-    <ClCompile Include="src\libsodium\crypto_stream\xsalsa20\stream_xsalsa20_api.c" />
-    <ClCompile Include="src\libsodium\crypto_verify\16\ref\verify_16.c" />
-    <ClCompile Include="src\libsodium\crypto_verify\16\verify_16_api.c" />
-    <ClCompile Include="src\libsodium\crypto_verify\32\ref\verify_32.c" />
-    <ClCompile Include="src\libsodium\crypto_verify\32\verify_32_api.c" />
-    <ClCompile Include="src\libsodium\crypto_verify\64\ref\verify_64.c" />
-    <ClCompile Include="src\libsodium\crypto_verify\64\verify_64_api.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\stream_aes128ctr.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\afternm_aes128ctr.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\beforenm_aes128ctr.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\consts_aes128ctr.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\int128_aes128ctr.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\stream_aes128ctr_nacl.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\xor_afternm_aes128ctr.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\chacha20\stream_chacha20.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\chacha20\dolbeau\chacha20_dolbeau-avx2.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\chacha20\dolbeau\chacha20_dolbeau-ssse3.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\chacha20\ref\chacha20_ref.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\salsa20\stream_salsa20.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\salsa20\ref\salsa20_ref.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\salsa20\xmm6\salsa20_xmm6.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\salsa20\xmm6int\salsa20_xmm6int-avx2.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\salsa20\xmm6int\salsa20_xmm6int-sse2.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\salsa2012\stream_salsa2012.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\salsa2012\ref\stream_salsa2012_ref.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\salsa208\stream_salsa208.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\salsa208\ref\stream_salsa208_ref.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\xchacha20\stream_xchacha20.c" />
+    <ClCompile Include="src\libsodium\crypto_stream\xsalsa20\stream_xsalsa20.c" />
+    <ClCompile Include="src\libsodium\crypto_verify\sodium\verify.c" />
     <ClCompile Include="src\libsodium\randombytes\randombytes.c" />
+    <ClCompile Include="src\libsodium\randombytes\nativeclient\randombytes_nativeclient.c" />
     <ClCompile Include="src\libsodium\randombytes\salsa20\randombytes_salsa20_random.c" />
     <ClCompile Include="src\libsodium\randombytes\sysrandom\randombytes_sysrandom.c" />
     <ClCompile Include="src\libsodium\sodium\core.c" />
@@ -432,14 +422,73 @@
     <ClCompile Include="src\libsodium\sodium\version.c" />
   </ItemGroup>
   <ItemGroup>
+    <ClInclude Include="src\libsodium\crypto_core\curve25519\ref10\base.h" />
+    <ClInclude Include="src\libsodium\crypto_core\curve25519\ref10\base2.h" />
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2.h" />
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-avx2.h" />
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-sse41.h" />
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-ssse3.h" />
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-load-avx2.h" />
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-load-sse2.h" />
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-load-sse41.h" />
+    <ClInclude Include="src\libsodium\crypto_onetimeauth\poly1305\onetimeauth_poly1305.h" />
+    <ClInclude Include="src\libsodium\crypto_onetimeauth\poly1305\donna\poly1305_donna.h" />
+    <ClInclude Include="src\libsodium\crypto_onetimeauth\poly1305\donna\poly1305_donna32.h" />
+    <ClInclude Include="src\libsodium\crypto_onetimeauth\poly1305\donna\poly1305_donna64.h" />
+    <ClInclude Include="src\libsodium\crypto_onetimeauth\poly1305\sse2\poly1305_sse2.h" />
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\argon2-core.h" />
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\argon2-encoding.h" />
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\argon2.h" />
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\blake2b-long.h" />
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\blamka-round-ref.h" />
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\blamka-round-ssse3.h" />
+    <ClInclude Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\crypto_scrypt.h" />
+    <ClInclude Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\pbkdf2-sha256.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\scalarmult_curve25519.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\donna_c64\curve25519_donna_c64.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\ref10\x25519_ref10.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\consts_namespace.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\curve25519_sandy2x.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe51.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe51_namespace.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\ladder.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\ladder_base.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\ladder_base_namespace.h" />
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\ladder_namespace.h" />
+    <ClInclude Include="src\libsodium\crypto_shorthash\siphash24\ref\shorthash_siphash_ref.h" />
+    <ClInclude Include="src\libsodium\crypto_sign\ed25519\ref10\ed25519_ref10.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\aes128ctr\nacl\common.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\aes128ctr\nacl\consts.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\aes128ctr\nacl\int128.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\stream_chacha20.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\chacha20_dolbeau-avx2.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\chacha20_dolbeau-ssse3.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\u0.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\u1.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\u4.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\u8.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\ref\chacha20_ref.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\stream_salsa20.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\ref\salsa20_ref.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6\salsa20_xmm6.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\salsa20_xmm6int-avx2.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\salsa20_xmm6int-sse2.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\u0.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\u1.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\u4.h" />
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\u8.h" />
+    <ClInclude Include="src\libsodium\include\sodium.h" />
     <ClInclude Include="src\libsodium\include\sodium\core.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_aead_aes256gcm.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_aead_chacha20poly1305.h" />
+    <ClInclude Include="src\libsodium\include\sodium\crypto_aead_xchacha20poly1305.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_auth.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_auth_hmacsha256.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_auth_hmacsha512.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_auth_hmacsha512256.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_box.h" />
+    <ClInclude Include="src\libsodium\include\sodium\crypto_box_curve25519xchacha20poly1305.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_box_curve25519xsalsa20poly1305.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_core_hchacha20.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_core_hsalsa20.h" />
@@ -451,8 +500,9 @@
     <ClInclude Include="src\libsodium\include\sodium\crypto_hash.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_hash_sha256.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_hash_sha512.h" />
-    <ClInclude Include="src\libsodium\include\sodium\crypto_int32.h" />
-    <ClInclude Include="src\libsodium\include\sodium\crypto_int64.h" />
+    <ClInclude Include="src\libsodium\include\sodium\crypto_kdf.h" />
+    <ClInclude Include="src\libsodium\include\sodium\crypto_kdf_blake2b.h" />
+    <ClInclude Include="src\libsodium\include\sodium\crypto_kx.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_onetimeauth.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_onetimeauth_poly1305.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_pwhash.h" />
@@ -461,6 +511,7 @@
     <ClInclude Include="src\libsodium\include\sodium\crypto_scalarmult.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_scalarmult_curve25519.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_secretbox.h" />
+    <ClInclude Include="src\libsodium\include\sodium\crypto_secretbox_xchacha20poly1305.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_secretbox_xsalsa20poly1305.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_shorthash.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_shorthash_siphash24.h" />
@@ -473,11 +524,8 @@
     <ClInclude Include="src\libsodium\include\sodium\crypto_stream_salsa20.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_stream_salsa2012.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_stream_salsa208.h" />
+    <ClInclude Include="src\libsodium\include\sodium\crypto_stream_xchacha20.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_stream_xsalsa20.h" />
-    <ClInclude Include="src\libsodium\include\sodium\crypto_uint16.h" />
-    <ClInclude Include="src\libsodium\include\sodium\crypto_uint32.h" />
-    <ClInclude Include="src\libsodium\include\sodium\crypto_uint64.h" />
-    <ClInclude Include="src\libsodium\include\sodium\crypto_uint8.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_verify_16.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_verify_32.h" />
     <ClInclude Include="src\libsodium\include\sodium\crypto_verify_64.h" />
@@ -488,7 +536,10 @@
     <ClInclude Include="src\libsodium\include\sodium\randombytes_sysrandom.h" />
     <ClInclude Include="src\libsodium\include\sodium\runtime.h" />
     <ClInclude Include="src\libsodium\include\sodium\utils.h" />
-    <ClInclude Include="src\libsodium\include\sodium\version.h" />
+    <ClInclude Include="src\libsodium\include\sodium\private\common.h" />
+    <ClInclude Include="src\libsodium\include\sodium\private\curve25519_ref10.h" />
+    <ClInclude Include="src\libsodium\include\sodium\private\mutex.h" />
+    <ClInclude Include="src\libsodium\include\sodium\private\sse2_64_32.h" />
   </ItemGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
   <ImportGroup Label="ExtensionTargets">
diff -urpN libsodium-1.0.11/libsodium.vcxproj.filters libsodium-1.0.12/libsodium.vcxproj.filters
--- libsodium-1.0.11/libsodium.vcxproj.filters	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/libsodium.vcxproj.filters	2017-03-12 18:52:47.000000000 +0100
@@ -15,353 +15,494 @@
     </Filter>
   </ItemGroup>
   <ItemGroup>
-    <ClCompile Include="src\libsodium\crypto_core\hsalsa20\ref2\core_hsalsa20.c">
-      <Filter>Source Files</Filter>
-    </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_core\hsalsa20\core_hsalsa20_api.c">
-      <Filter>Source Files</Filter>
-    </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_core\salsa20\ref\core_salsa20.c">
-      <Filter>Source Files</Filter>
-    </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_core\salsa208\ref\core_salsa208.c">
-      <Filter>Source Files</Filter>
-    </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_core\salsa2012\ref\core_salsa2012.c">
-      <Filter>Source Files</Filter>
-    </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha256\auth_hmacsha256_api.c">
+    <ClCompile Include="src\libsodium\crypto_aead\aes256gcm\aesni\aead_aes256gcm_aesni.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512\auth_hmacsha512_api.c">
+    <ClCompile Include="src\libsodium\crypto_aead\chacha20poly1305\sodium\aead_chacha20poly1305.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512256\auth_hmacsha512256_api.c">
+    <ClCompile Include="src\libsodium\crypto_aead\xchacha20poly1305\sodium\aead_xchacha20poly1305.c">
       <Filter>Source Files</Filter>
     </ClCompile>
     <ClCompile Include="src\libsodium\crypto_auth\crypto_auth.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha256\cp\hmac_hmacsha256.c">
+    <ClCompile Include="src\libsodium\crypto_auth\hmacsha256\auth_hmacsha256.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512\cp\hmac_hmacsha512.c">
+    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512\auth_hmacsha512.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512256\cp\hmac_hmacsha512256.c">
+    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512256\auth_hmacsha512256.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512\cp\verify_hmacsha512.c">
+    <ClCompile Include="src\libsodium\crypto_box\crypto_box.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha512256\cp\verify_hmacsha512256.c">
+    <ClCompile Include="src\libsodium\crypto_box\crypto_box_easy.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\ref\after_curve25519xsalsa20poly1305.c">
+    <ClCompile Include="src\libsodium\crypto_box\crypto_box_seal.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\ref\box_curve25519xsalsa20poly1305.c">
+    <ClCompile Include="src\libsodium\crypto_box\curve25519xchacha20poly1305\box_curve25519xchacha20poly1305.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\box_curve25519xsalsa20poly1305_api.c">
+    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\box_curve25519xsalsa20poly1305.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_box\crypto_box.c">
-      <Filter>Source Files</Filter>
-    </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\ref\keypair_curve25519xsalsa20poly1305.c">
+    <ClCompile Include="src\libsodium\crypto_core\curve25519\ref10\curve25519_ref10.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_core\salsa20\core_salsa20_api.c">
+    <ClCompile Include="src\libsodium\crypto_core\hchacha20\core_hchacha20.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_core\salsa208\core_salsa208_api.c">
+    <ClCompile Include="src\libsodium\crypto_core\hsalsa20\core_hsalsa20.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_core\salsa2012\core_salsa2012_api.c">
+    <ClCompile Include="src\libsodium\crypto_core\hsalsa20\ref2\core_hsalsa20_ref2.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\blake2b-ref.c">
+    <ClCompile Include="src\libsodium\crypto_core\salsa\ref\core_salsa_ref.c">
       <Filter>Source Files</Filter>
     </ClCompile>
     <ClCompile Include="src\libsodium\crypto_generichash\crypto_generichash.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\generichash_blake2_api.c">
-      <Filter>Source Files</Filter>
-    </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\generichash_blake2b.c">
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\generichash_blake2.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_hash\crypto_hash.c">
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-avx2.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_hash\sha256\cp\hash_sha256.c">
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-ref.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_hash\sha256\hash_sha256_api.c">
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-sse41.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_hash\sha512\cp\hash_sha512.c">
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-ssse3.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_hash\sha512\hash_sha512_api.c">
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-ref.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_onetimeauth\crypto_onetimeauth.c">
+    <ClCompile Include="src\libsodium\crypto_generichash\blake2b\ref\generichash_blake2b.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_onetimeauth\poly1305\onetimeauth_poly1305.c">
+    <ClCompile Include="src\libsodium\crypto_hash\crypto_hash.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_scalarmult\crypto_scalarmult.c">
+    <ClCompile Include="src\libsodium\crypto_hash\sha256\hash_sha256.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_secretbox\xsalsa20poly1305\ref\box_xsalsa20poly1305.c">
+    <ClCompile Include="src\libsodium\crypto_hash\sha256\cp\hash_sha256_cp.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_secretbox\crypto_secretbox.c">
+    <ClCompile Include="src\libsodium\crypto_hash\sha512\hash_sha512.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_secretbox\xsalsa20poly1305\secretbox_xsalsa20poly1305_api.c">
+    <ClCompile Include="src\libsodium\crypto_hash\sha512\cp\hash_sha512_cp.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_shorthash\crypto_shorthash.c">
+    <ClCompile Include="src\libsodium\crypto_kdf\crypto_kdf.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\ref\shorthash_siphash24.c">
+    <ClCompile Include="src\libsodium\crypto_kdf\blake2b\kdf_blake2b.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\shorthash_siphash24_api.c">
+    <ClCompile Include="src\libsodium\crypto_kx\crypto_kx.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_sign\crypto_sign.c">
+    <ClCompile Include="src\libsodium\crypto_onetimeauth\crypto_onetimeauth.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\keypair.c">
+    <ClCompile Include="src\libsodium\crypto_onetimeauth\poly1305\onetimeauth_poly1305.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\open.c">
+    <ClCompile Include="src\libsodium\crypto_onetimeauth\poly1305\donna\poly1305_donna.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\sign.c">
+    <ClCompile Include="src\libsodium\crypto_onetimeauth\poly1305\sse2\poly1305_sse2.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_sign\ed25519\sign_ed25519_api.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\crypto_pwhash.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\afternm_aes128ctr.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2-core.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\beforenm_aes128ctr.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2-encoding.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\consts_aes128ctr.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2-fill-block-ref.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\crypto_stream.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2-fill-block-ssse3.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\int128_aes128ctr.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\stream_aes128ctr.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\blake2b-long.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\stream_aes128ctr_api.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\pwhash_argon2i.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\salsa20\stream_salsa20_api.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\crypto_scrypt-common.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\salsa20\ref\stream_salsa20_ref.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\pbkdf2-sha256.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\salsa208\ref\stream_salsa208.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\pwhash_scryptsalsa208sha256.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\salsa208\stream_salsa208_api.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\scrypt_platform.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\salsa2012\ref\stream_salsa2012.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\nosse\pwhash_scryptsalsa208sha256_nosse.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\salsa2012\stream_salsa2012_api.c">
+    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\sse\pwhash_scryptsalsa208sha256_sse.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\xsalsa20\ref\stream_xsalsa20.c">
+    <ClCompile Include="src\libsodium\crypto_scalarmult\crypto_scalarmult.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\xsalsa20\stream_xsalsa20_api.c">
+    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\scalarmult_curve25519.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\portable\xor_afternm_aes128ctr.c">
+    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\donna_c64\curve25519_donna_c64.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\salsa20\ref\xor_salsa20_ref.c">
+    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\ref10\x25519_ref10.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\salsa208\ref\xor_salsa208.c">
+    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\curve25519_sandy2x.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\salsa2012\ref\xor_salsa2012.c">
+    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe51_invert.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\xsalsa20\ref\xor_xsalsa20.c">
+    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe_frombytes_sandy2x.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_verify\16\ref\verify_16.c">
+    <ClCompile Include="src\libsodium\crypto_secretbox\crypto_secretbox.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_verify\16\verify_16_api.c">
+    <ClCompile Include="src\libsodium\crypto_secretbox\crypto_secretbox_easy.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_verify\32\ref\verify_32.c">
+    <ClCompile Include="src\libsodium\crypto_secretbox\xchacha20poly1305\secretbox_xchacha20poly1305.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_verify\32\verify_32_api.c">
+    <ClCompile Include="src\libsodium\crypto_secretbox\xsalsa20poly1305\secretbox_xsalsa20poly1305.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_verify\64\ref\verify_64.c">
+    <ClCompile Include="src\libsodium\crypto_shorthash\crypto_shorthash.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_verify\64\verify_64_api.c">
+    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\shorthash_siphash24.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\sodium\core.c">
+    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\shorthash_siphashx24.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\sodium\utils.c">
+    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\ref\shorthash_siphash24_ref.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\sodium\version.c">
+    <ClCompile Include="src\libsodium\crypto_shorthash\siphash24\ref\shorthash_siphashx24_ref.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\randombytes\randombytes.c">
+    <ClCompile Include="src\libsodium\crypto_sign\crypto_sign.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\randombytes\salsa20\randombytes_salsa20_random.c">
+    <ClCompile Include="src\libsodium\crypto_sign\ed25519\sign_ed25519.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\randombytes\sysrandom\randombytes_sysrandom.c">
+    <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\keypair.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_auth\hmacsha256\cp\verify_hmacsha256.c">
+    <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\obsolete.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\crypto_scrypt-common.c">
+    <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\open.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\pbkdf2-sha256.c">
+    <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\sign.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\pwhash_scryptsalsa208sha256.c">
+    <ClCompile Include="src\libsodium\crypto_stream\crypto_stream.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\scrypt_platform.c">
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\stream_aes128ctr.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\sodium\runtime.c">
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\afternm_aes128ctr.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_box\crypto_box_easy.c">
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\beforenm_aes128ctr.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_box\crypto_box_seal.c">
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\consts_aes128ctr.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_secretbox\crypto_secretbox_easy.c">
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\int128_aes128ctr.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\nosse\pwhash_scryptsalsa208sha256_nosse.c">
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\stream_aes128ctr_nacl.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\sse\pwhash_scryptsalsa208sha256_sse.c">
+    <ClCompile Include="src\libsodium\crypto_stream\aes128ctr\nacl\xor_afternm_aes128ctr.c">
       <Filter>Source Files</Filter>
     </ClCompile>
     <ClCompile Include="src\libsodium\crypto_stream\chacha20\stream_chacha20.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_stream\chacha20\ref\stream_chacha20_ref.c">
-      <Filter>Source Files</Filter>
-    </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_box\curve25519xsalsa20poly1305\ref\before_curve25519xsalsa20poly1305.c">
-      <Filter>Source Files</Filter>
-    </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_aead\aes256gcm\aesni\aead_aes256gcm_aesni.c">
-      <Filter>Source Files</Filter>
-    </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_aead\chacha20poly1305\sodium\aead_chacha20poly1305.c">
+    <ClCompile Include="src\libsodium\crypto_stream\chacha20\dolbeau\chacha20_dolbeau-avx2.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\blake2b-compress-ref.c">
+    <ClCompile Include="src\libsodium\crypto_stream\chacha20\dolbeau\chacha20_dolbeau-ssse3.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\blake2b-compress-avx2.c">
+    <ClCompile Include="src\libsodium\crypto_stream\chacha20\ref\chacha20_ref.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\blake2b-compress-sse41.c">
+    <ClCompile Include="src\libsodium\crypto_stream\salsa20\stream_salsa20.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_generichash\blake2\ref\blake2b-compress-ssse3.c">
+    <ClCompile Include="src\libsodium\crypto_stream\salsa20\ref\salsa20_ref.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\scalarmult_curve25519.c">
+    <ClCompile Include="src\libsodium\crypto_stream\salsa20\xmm6\salsa20_xmm6.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\donna_c64\curve25519_donna_c64.c">
+    <ClCompile Include="src\libsodium\crypto_stream\salsa20\xmm6int\salsa20_xmm6int-avx2.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\curve25519_sandy2x.c">
+    <ClCompile Include="src\libsodium\crypto_stream\salsa20\xmm6int\salsa20_xmm6int-sse2.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe_frombytes_sandy2x.c">
+    <ClCompile Include="src\libsodium\crypto_stream\salsa2012\stream_salsa2012.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe51_invert.c">
+    <ClCompile Include="src\libsodium\crypto_stream\salsa2012\ref\stream_salsa2012_ref.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_onetimeauth\poly1305\donna\poly1305_donna.c">
+    <ClCompile Include="src\libsodium\crypto_stream\salsa208\stream_salsa208.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_sign\ed25519\ref10\obsolete.c">
+    <ClCompile Include="src\libsodium\crypto_stream\salsa208\ref\stream_salsa208_ref.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_core\curve25519\ref10\curve25519_ref10.c">
+    <ClCompile Include="src\libsodium\crypto_stream\xchacha20\stream_xchacha20.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_scalarmult\curve25519\ref10\x25519_ref10.c">
+    <ClCompile Include="src\libsodium\crypto_stream\xsalsa20\stream_xsalsa20.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\crypto_pwhash.c">
+    <ClCompile Include="src\libsodium\crypto_verify\sodium\verify.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2.c">
+    <ClCompile Include="src\libsodium\randombytes\randombytes.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2-core.c">
+    <ClCompile Include="src\libsodium\randombytes\nativeclient\randombytes_nativeclient.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2-encoding.c">
+    <ClCompile Include="src\libsodium\randombytes\salsa20\randombytes_salsa20_random.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2-fill-block-ref.c">
+    <ClCompile Include="src\libsodium\randombytes\sysrandom\randombytes_sysrandom.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\blake2b-long.c">
+    <ClCompile Include="src\libsodium\sodium\core.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\pwhash_argon2i.c">
+    <ClCompile Include="src\libsodium\sodium\runtime.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_pwhash\argon2\argon2-fill-block-ssse3.c">
+    <ClCompile Include="src\libsodium\sodium\utils.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="src\libsodium\crypto_core\hchacha20\core_hchacha20.c">
+    <ClCompile Include="src\libsodium\sodium\version.c">
       <Filter>Source Files</Filter>
     </ClCompile>
   </ItemGroup>
   <ItemGroup>
+    <ClInclude Include="src\libsodium\crypto_core\curve25519\ref10\base.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_core\curve25519\ref10\base2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-avx2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-sse41.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-compress-ssse3.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-load-avx2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-load-sse2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_generichash\blake2b\ref\blake2b-load-sse41.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_onetimeauth\poly1305\onetimeauth_poly1305.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_onetimeauth\poly1305\donna\poly1305_donna.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_onetimeauth\poly1305\donna\poly1305_donna32.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_onetimeauth\poly1305\donna\poly1305_donna64.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_onetimeauth\poly1305\sse2\poly1305_sse2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\argon2-core.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\argon2-encoding.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\argon2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\blake2b-long.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\blamka-round-ref.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_pwhash\argon2\blamka-round-ssse3.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\crypto_scrypt.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_pwhash\scryptsalsa208sha256\pbkdf2-sha256.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\scalarmult_curve25519.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\donna_c64\curve25519_donna_c64.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\ref10\x25519_ref10.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\consts_namespace.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\curve25519_sandy2x.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe51.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\fe51_namespace.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\ladder.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\ladder_base.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\ladder_base_namespace.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_scalarmult\curve25519\sandy2x\ladder_namespace.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_shorthash\siphash24\ref\shorthash_siphash_ref.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_sign\ed25519\ref10\ed25519_ref10.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\aes128ctr\nacl\common.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\aes128ctr\nacl\consts.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\aes128ctr\nacl\int128.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\stream_chacha20.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\chacha20_dolbeau-avx2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\chacha20_dolbeau-ssse3.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\u0.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\u1.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\u4.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\dolbeau\u8.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\chacha20\ref\chacha20_ref.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\stream_salsa20.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\ref\salsa20_ref.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6\salsa20_xmm6.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\salsa20_xmm6int-avx2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\salsa20_xmm6int-sse2.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\u0.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\u1.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\u4.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\crypto_stream\salsa20\xmm6int\u8.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\include\sodium.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="src\libsodium\include\sodium\core.h">
       <Filter>Header Files</Filter>
     </ClInclude>
@@ -371,6 +512,9 @@
     <ClInclude Include="src\libsodium\include\sodium\crypto_aead_chacha20poly1305.h">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="src\libsodium\include\sodium\crypto_aead_xchacha20poly1305.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="src\libsodium\include\sodium\crypto_auth.h">
       <Filter>Header Files</Filter>
     </ClInclude>
@@ -386,6 +530,9 @@
     <ClInclude Include="src\libsodium\include\sodium\crypto_box.h">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="src\libsodium\include\sodium\crypto_box_curve25519xchacha20poly1305.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="src\libsodium\include\sodium\crypto_box_curve25519xsalsa20poly1305.h">
       <Filter>Header Files</Filter>
     </ClInclude>
@@ -398,10 +545,10 @@
     <ClInclude Include="src\libsodium\include\sodium\crypto_core_salsa20.h">
       <Filter>Header Files</Filter>
     </ClInclude>
-    <ClInclude Include="src\libsodium\include\sodium\crypto_core_salsa208.h">
+    <ClInclude Include="src\libsodium\include\sodium\crypto_core_salsa2012.h">
       <Filter>Header Files</Filter>
     </ClInclude>
-    <ClInclude Include="src\libsodium\include\sodium\crypto_core_salsa2012.h">
+    <ClInclude Include="src\libsodium\include\sodium\crypto_core_salsa208.h">
       <Filter>Header Files</Filter>
     </ClInclude>
     <ClInclude Include="src\libsodium\include\sodium\crypto_generichash.h">
@@ -419,10 +566,13 @@
     <ClInclude Include="src\libsodium\include\sodium\crypto_hash_sha512.h">
       <Filter>Header Files</Filter>
     </ClInclude>
-    <ClInclude Include="src\libsodium\include\sodium\crypto_int32.h">
+    <ClInclude Include="src\libsodium\include\sodium\crypto_kdf.h">
       <Filter>Header Files</Filter>
     </ClInclude>
-    <ClInclude Include="src\libsodium\include\sodium\crypto_int64.h">
+    <ClInclude Include="src\libsodium\include\sodium\crypto_kdf_blake2b.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\include\sodium\crypto_kx.h">
       <Filter>Header Files</Filter>
     </ClInclude>
     <ClInclude Include="src\libsodium\include\sodium\crypto_onetimeauth.h">
@@ -449,6 +599,9 @@
     <ClInclude Include="src\libsodium\include\sodium\crypto_secretbox.h">
       <Filter>Header Files</Filter>
     </ClInclude>
+    <ClInclude Include="src\libsodium\include\sodium\crypto_secretbox_xchacha20poly1305.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
     <ClInclude Include="src\libsodium\include\sodium\crypto_secretbox_xsalsa20poly1305.h">
       <Filter>Header Files</Filter>
     </ClInclude>
@@ -479,25 +632,16 @@
     <ClInclude Include="src\libsodium\include\sodium\crypto_stream_salsa20.h">
       <Filter>Header Files</Filter>
     </ClInclude>
-    <ClInclude Include="src\libsodium\include\sodium\crypto_stream_salsa208.h">
-      <Filter>Header Files</Filter>
-    </ClInclude>
     <ClInclude Include="src\libsodium\include\sodium\crypto_stream_salsa2012.h">
       <Filter>Header Files</Filter>
     </ClInclude>
-    <ClInclude Include="src\libsodium\include\sodium\crypto_stream_xsalsa20.h">
-      <Filter>Header Files</Filter>
-    </ClInclude>
-    <ClInclude Include="src\libsodium\include\sodium\crypto_uint8.h">
-      <Filter>Header Files</Filter>
-    </ClInclude>
-    <ClInclude Include="src\libsodium\include\sodium\crypto_uint16.h">
+    <ClInclude Include="src\libsodium\include\sodium\crypto_stream_salsa208.h">
       <Filter>Header Files</Filter>
     </ClInclude>
-    <ClInclude Include="src\libsodium\include\sodium\crypto_uint32.h">
+    <ClInclude Include="src\libsodium\include\sodium\crypto_stream_xchacha20.h">
       <Filter>Header Files</Filter>
     </ClInclude>
-    <ClInclude Include="src\libsodium\include\sodium\crypto_uint64.h">
+    <ClInclude Include="src\libsodium\include\sodium\crypto_stream_xsalsa20.h">
       <Filter>Header Files</Filter>
     </ClInclude>
     <ClInclude Include="src\libsodium\include\sodium\crypto_verify_16.h">
@@ -530,7 +674,16 @@
     <ClInclude Include="src\libsodium\include\sodium\utils.h">
       <Filter>Header Files</Filter>
     </ClInclude>
-    <ClInclude Include="src\libsodium\include\sodium\version.h">
+    <ClInclude Include="src\libsodium\include\sodium\private\common.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\include\sodium\private\curve25519_ref10.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\include\sodium\private\mutex.h">
+      <Filter>Header Files</Filter>
+    </ClInclude>
+    <ClInclude Include="src\libsodium\include\sodium\private\sse2_64_32.h">
       <Filter>Header Files</Filter>
     </ClInclude>
   </ItemGroup>
diff -urpN libsodium-1.0.11/LICENSE libsodium-1.0.12/LICENSE
--- libsodium-1.0.11/LICENSE	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/LICENSE	2017-03-06 11:13:57.000000000 +0100
@@ -1,7 +1,7 @@
 /*
  * ISC License
  *
- * Copyright (c) 2013-2016
+ * Copyright (c) 2013-2017
  * Frank Denis <j at pureftpd dot org>
  *
  * Permission to use, copy, modify, and/or distribute this software for any
diff -urpN libsodium-1.0.11/m4/ax_check_compile_flag.m4 libsodium-1.0.12/m4/ax_check_compile_flag.m4
--- libsodium-1.0.11/m4/ax_check_compile_flag.m4	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/m4/ax_check_compile_flag.m4	2017-03-06 11:13:57.000000000 +0100
@@ -53,7 +53,7 @@
 #   modified version of the Autoconf Macro, you may extend this special
 #   exception to the GPL to apply to your modified version as well.
 
-#serial 2
+#serial 4
 
 AC_DEFUN([AX_CHECK_COMPILE_FLAG],
 [AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF
@@ -61,8 +61,8 @@ AS_VAR_PUSHDEF([CACHEVAR],[ax_cv_check_[
 AC_CACHE_CHECK([whether _AC_LANG compiler accepts $1], CACHEVAR, [
   ax_check_save_flags=$[]_AC_LANG_PREFIX[]FLAGS
   _AC_LANG_PREFIX[]FLAGS="$[]_AC_LANG_PREFIX[]FLAGS $4 $1"
-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdio.h>]],
-  [[char x[42U], fodder = 0;if (fodder > -1000 && fgets(x,1000,stdin)) puts(x)]])],
+  AC_TRY_LINK([#include <stdio.h>],
+    [char x[42U], fodder = 0;if (fodder > -1000 && fgets(x,1000,stdin)) puts(x)],
     [AS_VAR_SET(CACHEVAR,[yes])],
     [AS_VAR_SET(CACHEVAR,[no])])
   _AC_LANG_PREFIX[]FLAGS=$ax_check_save_flags])
diff -urpN libsodium-1.0.11/m4/ax_check_link_flag.m4 libsodium-1.0.12/m4/ax_check_link_flag.m4
--- libsodium-1.0.11/m4/ax_check_link_flag.m4	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/m4/ax_check_link_flag.m4	2017-03-06 11:13:57.000000000 +0100
@@ -53,7 +53,7 @@
 #   modified version of the Autoconf Macro, you may extend this special
 #   exception to the GPL to apply to your modified version as well.
 
-#serial 2
+#serial 4
 
 AC_DEFUN([AX_CHECK_LINK_FLAG],
 [AC_PREREQ(2.64)dnl for _AC_LANG_PREFIX and AS_VAR_IF
diff -urpN libsodium-1.0.11/m4/ax_pthread.m4 libsodium-1.0.12/m4/ax_pthread.m4
--- libsodium-1.0.11/m4/ax_pthread.m4	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/m4/ax_pthread.m4	2017-03-06 11:13:57.000000000 +0100
@@ -82,7 +82,7 @@
 #   modified version of the Autoconf Macro, you may extend this special
 #   exception to the GPL to apply to your modified version as well.
 
-#serial 22
+#serial 23
 
 AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])
 AC_DEFUN([AX_PTHREAD], [
@@ -100,22 +100,22 @@ ax_pthread_ok=no
 # etcetera environment variables, and if threads linking works using
 # them:
 if test "x$PTHREAD_CFLAGS$PTHREAD_LIBS" != "x"; then
-	ax_pthread_save_CC="$CC"
-	ax_pthread_save_CFLAGS="$CFLAGS"
-	ax_pthread_save_LIBS="$LIBS"
-	AS_IF([test "x$PTHREAD_CC" != "x"], [CC="$PTHREAD_CC"])
-	CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
-	LIBS="$PTHREAD_LIBS $LIBS"
-	AC_MSG_CHECKING([for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS])
-	AC_LINK_IFELSE([AC_LANG_CALL([], [pthread_join])], [ax_pthread_ok=yes])
-	AC_MSG_RESULT([$ax_pthread_ok])
-	if test "x$ax_pthread_ok" = "xno"; then
-		PTHREAD_LIBS=""
-		PTHREAD_CFLAGS=""
-	fi
-	CC="$ax_pthread_save_CC"
-	CFLAGS="$ax_pthread_save_CFLAGS"
-	LIBS="$ax_pthread_save_LIBS"
+        ax_pthread_save_CC="$CC"
+        ax_pthread_save_CFLAGS="$CFLAGS"
+        ax_pthread_save_LIBS="$LIBS"
+        AS_IF([test "x$PTHREAD_CC" != "x"], [CC="$PTHREAD_CC"])
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+        AC_MSG_CHECKING([for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS])
+        AC_LINK_IFELSE([AC_LANG_CALL([], [pthread_join])], [ax_pthread_ok=yes])
+        AC_MSG_RESULT([$ax_pthread_ok])
+        if test "x$ax_pthread_ok" = "xno"; then
+                PTHREAD_LIBS=""
+                PTHREAD_CFLAGS=""
+        fi
+        CC="$ax_pthread_save_CC"
+        CFLAGS="$ax_pthread_save_CFLAGS"
+        LIBS="$ax_pthread_save_LIBS"
 fi
 
 # We must check for the threads library under a number of different
@@ -152,50 +152,50 @@ ax_pthread_flags="pthreads none -Kthread
 
 case $host_os in
 
-	freebsd*)
+        freebsd*)
 
-	# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
-	# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
+        # -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
+        # lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
 
-	ax_pthread_flags="-kthread lthread $ax_pthread_flags"
-	;;
+        ax_pthread_flags="-kthread lthread $ax_pthread_flags"
+        ;;
 
-	hpux*)
-
-	# From the cc(1) man page: "[-mt] Sets various -D flags to enable
-	# multi-threading and also sets -lpthread."
-
-	ax_pthread_flags="-mt -pthread pthread $ax_pthread_flags"
-	;;
-
-	openedition*)
-
-	# IBM z/OS requires a feature-test macro to be defined in order to
-	# enable POSIX threads at all, so give the user a hint if this is
-	# not set. (We don't define these ourselves, as they can affect
-	# other portions of the system API in unpredictable ways.)
-
-	AC_EGREP_CPP([AX_PTHREAD_ZOS_MISSING],
-	    [
-#	     if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)
-	     AX_PTHREAD_ZOS_MISSING
-#	     endif
-	    ],
-	    [AC_MSG_WARN([IBM z/OS requires -D_OPEN_THREADS or -D_UNIX03_THREADS to enable pthreads support.])])
-	;;
-
-	solaris*)
-
-	# On Solaris (at least, for some versions), libc contains stubbed
-	# (non-functional) versions of the pthreads routines, so link-based
-	# tests will erroneously succeed. (N.B.: The stubs are missing
-	# pthread_cleanup_push, or rather a function called by this macro,
-	# so we could check for that, but who knows whether they'll stub
-	# that too in a future libc.)  So we'll check first for the
-	# standard Solaris way of linking pthreads (-mt -lpthread).
+        hpux*)
+
+        # From the cc(1) man page: "[-mt] Sets various -D flags to enable
+        # multi-threading and also sets -lpthread."
+
+        ax_pthread_flags="-mt -pthread pthread $ax_pthread_flags"
+        ;;
+
+        openedition*)
+
+        # IBM z/OS requires a feature-test macro to be defined in order to
+        # enable POSIX threads at all, so give the user a hint if this is
+        # not set. (We don't define these ourselves, as they can affect
+        # other portions of the system API in unpredictable ways.)
+
+        AC_EGREP_CPP([AX_PTHREAD_ZOS_MISSING],
+            [
+#            if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)
+             AX_PTHREAD_ZOS_MISSING
+#            endif
+            ],
+            [AC_MSG_WARN([IBM z/OS requires -D_OPEN_THREADS or -D_UNIX03_THREADS to enable pthreads support.])])
+        ;;
+
+        solaris*)
+
+        # On Solaris (at least, for some versions), libc contains stubbed
+        # (non-functional) versions of the pthreads routines, so link-based
+        # tests will erroneously succeed. (N.B.: The stubs are missing
+        # pthread_cleanup_push, or rather a function called by this macro,
+        # so we could check for that, but who knows whether they'll stub
+        # that too in a future libc.)  So we'll check first for the
+        # standard Solaris way of linking pthreads (-mt -lpthread).
 
-	ax_pthread_flags="-mt,pthread pthread $ax_pthread_flags"
-	;;
+        ax_pthread_flags="-mt,pthread pthread $ax_pthread_flags"
+        ;;
 esac
 
 # GCC generally uses -pthread, or -pthreads on some platforms (e.g. SPARC)
@@ -208,17 +208,17 @@ AS_IF([test "x$GCC" = "xyes"],
 # correctly enabled
 
 case $host_os in
-	darwin* | hpux* | linux* | osf* | solaris*)
-	ax_pthread_check_macro="_REENTRANT"
-	;;
-
-	aix* | freebsd*)
-	ax_pthread_check_macro="_THREAD_SAFE"
-	;;
-
-	*)
-	ax_pthread_check_macro="--"
-	;;
+        darwin* | hpux* | linux* | osf* | solaris*)
+        ax_pthread_check_macro="_REENTRANT"
+        ;;
+
+        aix*)
+        ax_pthread_check_macro="_THREAD_SAFE"
+        ;;
+
+        *)
+        ax_pthread_check_macro="--"
+        ;;
 esac
 AS_IF([test "x$ax_pthread_check_macro" = "x--"],
       [ax_pthread_check_cond=0],
@@ -231,13 +231,13 @@ AC_CACHE_CHECK([whether $CC is Clang],
     [ax_cv_PTHREAD_CLANG=no
      # Note that Autoconf sets GCC=yes for Clang as well as GCC
      if test "x$GCC" = "xyes"; then
-	AC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],
-	    [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */
-#	     if defined(__clang__) && defined(__llvm__)
-	     AX_PTHREAD_CC_IS_CLANG
-#	     endif
-	    ],
-	    [ax_cv_PTHREAD_CLANG=yes])
+        AC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],
+            [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */
+#            if defined(__clang__) && defined(__llvm__)
+             AX_PTHREAD_CC_IS_CLANG
+#            endif
+            ],
+            [ax_cv_PTHREAD_CLANG=yes])
      fi
     ])
 ax_pthread_clang="$ax_cv_PTHREAD_CLANG"
@@ -249,222 +249,222 @@ ax_pthread_clang_warning=no
 
 if test "x$ax_pthread_clang" = "xyes"; then
 
-	# Clang takes -pthread; it has never supported any other flag
+        # Clang takes -pthread; it has never supported any other flag
 
-	# (Note 1: This will need to be revisited if a system that Clang
-	# supports has POSIX threads in a separate library.  This tends not
-	# to be the way of modern systems, but it's conceivable.)
-
-	# (Note 2: On some systems, notably Darwin, -pthread is not needed
-	# to get POSIX threads support; the API is always present and
-	# active.  We could reasonably leave PTHREAD_CFLAGS empty.  But
-	# -pthread does define _REENTRANT, and while the Darwin headers
-	# ignore this macro, third-party headers might not.)
-
-	PTHREAD_CFLAGS="-pthread"
-	PTHREAD_LIBS=
-
-	ax_pthread_ok=yes
-
-	# However, older versions of Clang make a point of warning the user
-	# that, in an invocation where only linking and no compilation is
-	# taking place, the -pthread option has no effect ("argument unused
-	# during compilation").  They expect -pthread to be passed in only
-	# when source code is being compiled.
-	#
-	# Problem is, this is at odds with the way Automake and most other
-	# C build frameworks function, which is that the same flags used in
-	# compilation (CFLAGS) are also used in linking.  Many systems
-	# supported by AX_PTHREAD require exactly this for POSIX threads
-	# support, and in fact it is often not straightforward to specify a
-	# flag that is used only in the compilation phase and not in
-	# linking.  Such a scenario is extremely rare in practice.
-	#
-	# Even though use of the -pthread flag in linking would only print
-	# a warning, this can be a nuisance for well-run software projects
-	# that build with -Werror.  So if the active version of Clang has
-	# this misfeature, we search for an option to squash it.
-
-	AC_CACHE_CHECK([whether Clang needs flag to prevent "argument unused" warning when linking with -pthread],
-	    [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG],
-	    [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=unknown
-	     # Create an alternate version of $ac_link that compiles and
-	     # links in two steps (.c -> .o, .o -> exe) instead of one
-	     # (.c -> exe), because the warning occurs only in the second
-	     # step
-	     ax_pthread_save_ac_link="$ac_link"
-	     ax_pthread_sed='s/conftest\.\$ac_ext/conftest.$ac_objext/g'
-	     ax_pthread_link_step=`$as_echo "$ac_link" | sed "$ax_pthread_sed"`
-	     ax_pthread_2step_ac_link="($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)"
-	     ax_pthread_save_CFLAGS="$CFLAGS"
-	     for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do
-		AS_IF([test "x$ax_pthread_try" = "xunknown"], [break])
-		CFLAGS="-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS"
-		ac_link="$ax_pthread_save_ac_link"
-		AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],
-		    [ac_link="$ax_pthread_2step_ac_link"
-		     AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],
-			 [break])
-		    ])
-	     done
-	     ac_link="$ax_pthread_save_ac_link"
-	     CFLAGS="$ax_pthread_save_CFLAGS"
-	     AS_IF([test "x$ax_pthread_try" = "x"], [ax_pthread_try=no])
-	     ax_cv_PTHREAD_CLANG_NO_WARN_FLAG="$ax_pthread_try"
-	    ])
-
-	case "$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG" in
-		no | unknown) ;;
-		*) PTHREAD_CFLAGS="$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS" ;;
-	esac
+        # (Note 1: This will need to be revisited if a system that Clang
+        # supports has POSIX threads in a separate library.  This tends not
+        # to be the way of modern systems, but it's conceivable.)
+
+        # (Note 2: On some systems, notably Darwin, -pthread is not needed
+        # to get POSIX threads support; the API is always present and
+        # active.  We could reasonably leave PTHREAD_CFLAGS empty.  But
+        # -pthread does define _REENTRANT, and while the Darwin headers
+        # ignore this macro, third-party headers might not.)
+
+        PTHREAD_CFLAGS="-pthread"
+        PTHREAD_LIBS=
+
+        ax_pthread_ok=yes
+
+        # However, older versions of Clang make a point of warning the user
+        # that, in an invocation where only linking and no compilation is
+        # taking place, the -pthread option has no effect ("argument unused
+        # during compilation").  They expect -pthread to be passed in only
+        # when source code is being compiled.
+        #
+        # Problem is, this is at odds with the way Automake and most other
+        # C build frameworks function, which is that the same flags used in
+        # compilation (CFLAGS) are also used in linking.  Many systems
+        # supported by AX_PTHREAD require exactly this for POSIX threads
+        # support, and in fact it is often not straightforward to specify a
+        # flag that is used only in the compilation phase and not in
+        # linking.  Such a scenario is extremely rare in practice.
+        #
+        # Even though use of the -pthread flag in linking would only print
+        # a warning, this can be a nuisance for well-run software projects
+        # that build with -Werror.  So if the active version of Clang has
+        # this misfeature, we search for an option to squash it.
+
+        AC_CACHE_CHECK([whether Clang needs flag to prevent "argument unused" warning when linking with -pthread],
+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG],
+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=unknown
+             # Create an alternate version of $ac_link that compiles and
+             # links in two steps (.c -> .o, .o -> exe) instead of one
+             # (.c -> exe), because the warning occurs only in the second
+             # step
+             ax_pthread_save_ac_link="$ac_link"
+             ax_pthread_sed='s/conftest\.\$ac_ext/conftest.$ac_objext/g'
+             ax_pthread_link_step=`$as_echo "$ac_link" | sed "$ax_pthread_sed"`
+             ax_pthread_2step_ac_link="($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)"
+             ax_pthread_save_CFLAGS="$CFLAGS"
+             for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do
+                AS_IF([test "x$ax_pthread_try" = "xunknown"], [break])
+                CFLAGS="-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS"
+                ac_link="$ax_pthread_save_ac_link"
+                AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],
+                    [ac_link="$ax_pthread_2step_ac_link"
+                     AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],
+                         [break])
+                    ])
+             done
+             ac_link="$ax_pthread_save_ac_link"
+             CFLAGS="$ax_pthread_save_CFLAGS"
+             AS_IF([test "x$ax_pthread_try" = "x"], [ax_pthread_try=no])
+             ax_cv_PTHREAD_CLANG_NO_WARN_FLAG="$ax_pthread_try"
+            ])
+
+        case "$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG" in
+                no | unknown) ;;
+                *) PTHREAD_CFLAGS="$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS" ;;
+        esac
 
 fi # $ax_pthread_clang = yes
 
 if test "x$ax_pthread_ok" = "xno"; then
 for ax_pthread_try_flag in $ax_pthread_flags; do
 
-	case $ax_pthread_try_flag in
-		none)
-		AC_MSG_CHECKING([whether pthreads work without any flags])
-		;;
-
-		-mt,pthread)
-		AC_MSG_CHECKING([whether pthreads work with -mt -lpthread])
-		PTHREAD_CFLAGS="-mt"
-		PTHREAD_LIBS="-lpthread"
-		;;
-
-		-*)
-		AC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])
-		PTHREAD_CFLAGS="$ax_pthread_try_flag"
-		;;
-
-		pthread-config)
-		AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])
-		AS_IF([test "x$ax_pthread_config" = "xno"], [continue])
-		PTHREAD_CFLAGS="`pthread-config --cflags`"
-		PTHREAD_LIBS="`pthread-config --ldflags` `pthread-config --libs`"
-		;;
-
-		*)
-		AC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])
-		PTHREAD_LIBS="-l$ax_pthread_try_flag"
-		;;
-	esac
-
-	ax_pthread_save_CFLAGS="$CFLAGS"
-	ax_pthread_save_LIBS="$LIBS"
-	CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
-	LIBS="$PTHREAD_LIBS $LIBS"
-
-	# Check for various functions.  We must include pthread.h,
-	# since some functions may be macros.  (On the Sequent, we
-	# need a special flag -Kthread to make this header compile.)
-	# We check for pthread_join because it is in -lpthread on IRIX
-	# while pthread_create is in libc.  We check for pthread_attr_init
-	# due to DEC craziness with -lpthreads.  We check for
-	# pthread_cleanup_push because it is one of the few pthread
-	# functions on Solaris that doesn't have a non-functional libc stub.
-	# We try pthread_create on general principles.
-
-	AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>
-#			if $ax_pthread_check_cond
-#			 error "$ax_pthread_check_macro must be defined"
-#			endif
-			static void routine(void *a) { a = 0; }
-			static void *start_routine(void *a) { return a; }],
-		       [pthread_t th; pthread_attr_t attr;
-			pthread_create(&th, 0, start_routine, 0);
-			pthread_join(th, 0);
-			pthread_attr_init(&attr);
-			pthread_cleanup_push(routine, 0);
-			pthread_cleanup_pop(0) /* ; */])],
-	    [ax_pthread_ok=yes],
-	    [])
+        case $ax_pthread_try_flag in
+                none)
+                AC_MSG_CHECKING([whether pthreads work without any flags])
+                ;;
+
+                -mt,pthread)
+                AC_MSG_CHECKING([whether pthreads work with -mt -lpthread])
+                PTHREAD_CFLAGS="-mt"
+                PTHREAD_LIBS="-lpthread"
+                ;;
+
+                -*)
+                AC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])
+                PTHREAD_CFLAGS="$ax_pthread_try_flag"
+                ;;
+
+                pthread-config)
+                AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])
+                AS_IF([test "x$ax_pthread_config" = "xno"], [continue])
+                PTHREAD_CFLAGS="`pthread-config --cflags`"
+                PTHREAD_LIBS="`pthread-config --ldflags` `pthread-config --libs`"
+                ;;
+
+                *)
+                AC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])
+                PTHREAD_LIBS="-l$ax_pthread_try_flag"
+                ;;
+        esac
+
+        ax_pthread_save_CFLAGS="$CFLAGS"
+        ax_pthread_save_LIBS="$LIBS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+
+        # Check for various functions.  We must include pthread.h,
+        # since some functions may be macros.  (On the Sequent, we
+        # need a special flag -Kthread to make this header compile.)
+        # We check for pthread_join because it is in -lpthread on IRIX
+        # while pthread_create is in libc.  We check for pthread_attr_init
+        # due to DEC craziness with -lpthreads.  We check for
+        # pthread_cleanup_push because it is one of the few pthread
+        # functions on Solaris that doesn't have a non-functional libc stub.
+        # We try pthread_create on general principles.
+
+        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>
+#                       if $ax_pthread_check_cond
+#                        error "$ax_pthread_check_macro must be defined"
+#                       endif
+                        static void routine(void *a) { a = 0; }
+                        static void *start_routine(void *a) { return a; }],
+                       [pthread_t th; pthread_attr_t attr;
+                        pthread_create(&th, 0, start_routine, 0);
+                        pthread_join(th, 0);
+                        pthread_attr_init(&attr);
+                        pthread_cleanup_push(routine, 0);
+                        pthread_cleanup_pop(0) /* ; */])],
+            [ax_pthread_ok=yes],
+            [])
 
-	CFLAGS="$ax_pthread_save_CFLAGS"
-	LIBS="$ax_pthread_save_LIBS"
+        CFLAGS="$ax_pthread_save_CFLAGS"
+        LIBS="$ax_pthread_save_LIBS"
 
-	AC_MSG_RESULT([$ax_pthread_ok])
-	AS_IF([test "x$ax_pthread_ok" = "xyes"], [break])
+        AC_MSG_RESULT([$ax_pthread_ok])
+        AS_IF([test "x$ax_pthread_ok" = "xyes"], [break])
 
-	PTHREAD_LIBS=""
-	PTHREAD_CFLAGS=""
+        PTHREAD_LIBS=""
+        PTHREAD_CFLAGS=""
 done
 fi
 
 # Various other checks:
 if test "x$ax_pthread_ok" = "xyes"; then
-	ax_pthread_save_CFLAGS="$CFLAGS"
-	ax_pthread_save_LIBS="$LIBS"
-	CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
-	LIBS="$PTHREAD_LIBS $LIBS"
-
-	# Detect AIX lossage: JOINABLE attribute is called UNDETACHED.
-	AC_CACHE_CHECK([for joinable pthread attribute],
-	    [ax_cv_PTHREAD_JOINABLE_ATTR],
-	    [ax_cv_PTHREAD_JOINABLE_ATTR=unknown
-	     for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do
-		 AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],
-						 [int attr = $ax_pthread_attr; return attr /* ; */])],
-				[ax_cv_PTHREAD_JOINABLE_ATTR=$ax_pthread_attr; break],
-				[])
-	     done
-	    ])
-	AS_IF([test "x$ax_cv_PTHREAD_JOINABLE_ATTR" != "xunknown" && \
-	       test "x$ax_cv_PTHREAD_JOINABLE_ATTR" != "xPTHREAD_CREATE_JOINABLE" && \
-	       test "x$ax_pthread_joinable_attr_defined" != "xyes"],
-	      [AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE],
-				  [$ax_cv_PTHREAD_JOINABLE_ATTR],
-				  [Define to necessary symbol if this constant
-				   uses a non-standard name on your system.])
-	       ax_pthread_joinable_attr_defined=yes
-	      ])
-
-	AC_CACHE_CHECK([whether more special flags are required for pthreads],
-	    [ax_cv_PTHREAD_SPECIAL_FLAGS],
-	    [ax_cv_PTHREAD_SPECIAL_FLAGS=no
-	     case $host_os in
-	     solaris*)
-	     ax_cv_PTHREAD_SPECIAL_FLAGS="-D_POSIX_PTHREAD_SEMANTICS"
-	     ;;
-	     esac
-	    ])
-	AS_IF([test "x$ax_cv_PTHREAD_SPECIAL_FLAGS" != "xno" && \
-	       test "x$ax_pthread_special_flags_added" != "xyes"],
-	      [PTHREAD_CFLAGS="$ax_cv_PTHREAD_SPECIAL_FLAGS $PTHREAD_CFLAGS"
-	       ax_pthread_special_flags_added=yes])
-
-	AC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],
-	    [ax_cv_PTHREAD_PRIO_INHERIT],
-	    [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],
-					     [[int i = PTHREAD_PRIO_INHERIT;]])],
-			    [ax_cv_PTHREAD_PRIO_INHERIT=yes],
-			    [ax_cv_PTHREAD_PRIO_INHERIT=no])
-	    ])
-	AS_IF([test "x$ax_cv_PTHREAD_PRIO_INHERIT" = "xyes" && \
-	       test "x$ax_pthread_prio_inherit_defined" != "xyes"],
-	      [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])
-	       ax_pthread_prio_inherit_defined=yes
-	      ])
-
-	CFLAGS="$ax_pthread_save_CFLAGS"
-	LIBS="$ax_pthread_save_LIBS"
-
-	# More AIX lossage: compile with *_r variant
-	if test "x$GCC" != "xyes"; then
-	    case $host_os in
-		aix*)
-		AS_CASE(["x/$CC"],
-		    [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],
-		    [#handle absolute path differently from PATH based program lookup
-		     AS_CASE(["x$CC"],
-			 [x/*],
-			 [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC="${CC}_r"])],
-			 [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])
-		;;
-	    esac
-	fi
+        ax_pthread_save_CFLAGS="$CFLAGS"
+        ax_pthread_save_LIBS="$LIBS"
+        CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
+        LIBS="$PTHREAD_LIBS $LIBS"
+
+        # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.
+        AC_CACHE_CHECK([for joinable pthread attribute],
+            [ax_cv_PTHREAD_JOINABLE_ATTR],
+            [ax_cv_PTHREAD_JOINABLE_ATTR=unknown
+             for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do
+                 AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],
+                                                 [int attr = $ax_pthread_attr; return attr /* ; */])],
+                                [ax_cv_PTHREAD_JOINABLE_ATTR=$ax_pthread_attr; break],
+                                [])
+             done
+            ])
+        AS_IF([test "x$ax_cv_PTHREAD_JOINABLE_ATTR" != "xunknown" && \
+               test "x$ax_cv_PTHREAD_JOINABLE_ATTR" != "xPTHREAD_CREATE_JOINABLE" && \
+               test "x$ax_pthread_joinable_attr_defined" != "xyes"],
+              [AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE],
+                                  [$ax_cv_PTHREAD_JOINABLE_ATTR],
+                                  [Define to necessary symbol if this constant
+                                   uses a non-standard name on your system.])
+               ax_pthread_joinable_attr_defined=yes
+              ])
+
+        AC_CACHE_CHECK([whether more special flags are required for pthreads],
+            [ax_cv_PTHREAD_SPECIAL_FLAGS],
+            [ax_cv_PTHREAD_SPECIAL_FLAGS=no
+             case $host_os in
+             solaris*)
+             ax_cv_PTHREAD_SPECIAL_FLAGS="-D_POSIX_PTHREAD_SEMANTICS"
+             ;;
+             esac
+            ])
+        AS_IF([test "x$ax_cv_PTHREAD_SPECIAL_FLAGS" != "xno" && \
+               test "x$ax_pthread_special_flags_added" != "xyes"],
+              [PTHREAD_CFLAGS="$ax_cv_PTHREAD_SPECIAL_FLAGS $PTHREAD_CFLAGS"
+               ax_pthread_special_flags_added=yes])
+
+        AC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],
+            [ax_cv_PTHREAD_PRIO_INHERIT],
+            [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],
+                                             [[int i = PTHREAD_PRIO_INHERIT;]])],
+                            [ax_cv_PTHREAD_PRIO_INHERIT=yes],
+                            [ax_cv_PTHREAD_PRIO_INHERIT=no])
+            ])
+        AS_IF([test "x$ax_cv_PTHREAD_PRIO_INHERIT" = "xyes" && \
+               test "x$ax_pthread_prio_inherit_defined" != "xyes"],
+              [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])
+               ax_pthread_prio_inherit_defined=yes
+              ])
+
+        CFLAGS="$ax_pthread_save_CFLAGS"
+        LIBS="$ax_pthread_save_LIBS"
+
+        # More AIX lossage: compile with *_r variant
+        if test "x$GCC" != "xyes"; then
+            case $host_os in
+                aix*)
+                AS_CASE(["x/$CC"],
+                    [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],
+                    [#handle absolute path differently from PATH based program lookup
+                     AS_CASE(["x$CC"],
+                         [x/*],
+                         [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC="${CC}_r"])],
+                         [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])
+                ;;
+            esac
+        fi
 fi
 
 test -n "$PTHREAD_CC" || PTHREAD_CC="$CC"
@@ -475,11 +475,11 @@ AC_SUBST([PTHREAD_CC])
 
 # Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
 if test "x$ax_pthread_ok" = "xyes"; then
-	ifelse([$1],,[AC_DEFINE([HAVE_PTHREAD],[1],[Define if you have POSIX threads libraries and header files.])],[$1])
-	:
+        ifelse([$1],,[AC_DEFINE([HAVE_PTHREAD],[1],[Define if you have POSIX threads libraries and header files.])],[$1])
+        :
 else
-	ax_pthread_ok=no
-	$2
+        ax_pthread_ok=no
+        $2
 fi
 AC_LANG_POP
 ])dnl AX_PTHREAD
diff -urpN libsodium-1.0.11/Makefile.am libsodium-1.0.12/Makefile.am
--- libsodium-1.0.11/Makefile.am	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/Makefile.am	2017-03-06 11:13:57.000000000 +0100
@@ -10,6 +10,7 @@ EXTRA_DIST = \
 	THANKS
 
 SUBDIRS = \
+	contrib \
 	dist-build \
 	msvc-scripts \
 	src \
diff -urpN libsodium-1.0.11/Makefile.in libsodium-1.0.12/Makefile.in
--- libsodium-1.0.11/Makefile.in	2016-07-31 16:34:39.000000000 +0200
+++ libsodium-1.0.12/Makefile.in	2017-03-12 20:17:07.000000000 +0100
@@ -338,6 +338,7 @@ SAFECODE_HOME = @SAFECODE_HOME@
 SED = @SED@
 SET_MAKE = @SET_MAKE@
 SHELL = @SHELL@
+SODIUM_LIBRARY_MINIMAL_DEF = @SODIUM_LIBRARY_MINIMAL_DEF@
 SODIUM_LIBRARY_VERSION = @SODIUM_LIBRARY_VERSION@
 SODIUM_LIBRARY_VERSION_MAJOR = @SODIUM_LIBRARY_VERSION_MAJOR@
 SODIUM_LIBRARY_VERSION_MINOR = @SODIUM_LIBRARY_VERSION_MINOR@
@@ -414,6 +415,7 @@ EXTRA_DIST = \
 	THANKS
 
 SUBDIRS = \
+	contrib \
 	dist-build \
 	msvc-scripts \
 	src \
diff -urpN libsodium-1.0.11/msvc-scripts/Makefile.in libsodium-1.0.12/msvc-scripts/Makefile.in
--- libsodium-1.0.11/msvc-scripts/Makefile.in	2016-07-31 16:34:39.000000000 +0200
+++ libsodium-1.0.12/msvc-scripts/Makefile.in	2017-03-12 20:17:07.000000000 +0100
@@ -214,6 +214,7 @@ SAFECODE_HOME = @SAFECODE_HOME@
 SED = @SED@
 SET_MAKE = @SET_MAKE@
 SHELL = @SHELL@
+SODIUM_LIBRARY_MINIMAL_DEF = @SODIUM_LIBRARY_MINIMAL_DEF@
 SODIUM_LIBRARY_VERSION = @SODIUM_LIBRARY_VERSION@
 SODIUM_LIBRARY_VERSION_MAJOR = @SODIUM_LIBRARY_VERSION_MAJOR@
 SODIUM_LIBRARY_VERSION_MINOR = @SODIUM_LIBRARY_VERSION_MINOR@
diff -urpN libsodium-1.0.11/msvc-scripts/process.bat libsodium-1.0.12/msvc-scripts/process.bat
--- libsodium-1.0.11/msvc-scripts/process.bat	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/msvc-scripts/process.bat	2017-03-06 23:32:40.000000000 +0100
@@ -1,4 +1,5 @@
-cscript msvc-scripts/rep.vbs //Nologo s/@VERSION@/1.0.11/ < src\libsodium\include\sodium\version.h.in > tmp
+cscript msvc-scripts/rep.vbs //Nologo s/@VERSION@/1.0.12/ < src\libsodium\include\sodium\version.h.in > tmp
 cscript msvc-scripts/rep.vbs //Nologo s/@SODIUM_LIBRARY_VERSION_MAJOR@/9/ < tmp > tmp2
-cscript msvc-scripts/rep.vbs //Nologo s/@SODIUM_LIBRARY_VERSION_MINOR@/3/ < tmp2 > src\libsodium\include\sodium\version.h
-del tmp tmp2
+cscript msvc-scripts/rep.vbs //Nologo s/@SODIUM_LIBRARY_VERSION_MINOR@/4/ < tmp2 > tmp3
+cscript msvc-scripts/rep.vbs //Nologo s/@SODIUM_LIBRARY_MINIMAL_DEF@// < tmp3 > src\libsodium\include\sodium\version.h
+del tmp tmp2 tmp3
diff -urpN libsodium-1.0.11/src/libsodium/crypto_aead/aes256gcm/aesni/aead_aes256gcm_aesni.c libsodium-1.0.12/src/libsodium/crypto_aead/aes256gcm/aesni/aead_aes256gcm_aesni.c
--- libsodium-1.0.11/src/libsodium/crypto_aead/aes256gcm/aesni/aead_aes256gcm_aesni.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_aead/aes256gcm/aesni/aead_aes256gcm_aesni.c	2017-03-06 23:32:40.000000000 +0100
@@ -12,15 +12,19 @@
 
 #include "crypto_aead_aes256gcm.h"
 #include "export.h"
+#include "private/common.h"
+#include "private/sse2_64_32.h"
+#include "randombytes.h"
 #include "runtime.h"
 #include "utils.h"
 
-#if (defined(HAVE_TMMINTRIN_H) && defined(HAVE_WMMINTRIN_H)) || \
-    (defined(_MSC_VER) && _MSC_VER >= 1600 && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
+#if defined(HAVE_TMMINTRIN_H) && defined(HAVE_WMMINTRIN_H)
 
-#pragma GCC target("ssse3")
-#pragma GCC target("aes")
-#pragma GCC target("pclmul")
+# ifdef __GNUC__
+#  pragma GCC target("ssse3")
+#  pragma GCC target("aes")
+#  pragma GCC target("pclmul")
+# endif
 
 #include <tmmintrin.h>
 #include <wmmintrin.h>
@@ -96,12 +100,21 @@ static inline void
 aesni_encrypt1(unsigned char *out, __m128i nv, const __m128i *rkeys)
 {
     __m128i temp = _mm_xor_si128(nv, rkeys[0]);
-    int     roundctr;
 
-#pragma unroll(13)
-    for (roundctr = 1; roundctr < 14; roundctr++) {
-        temp = _mm_aesenc_si128(temp, rkeys[roundctr]);
-    }
+    temp = _mm_aesenc_si128(temp, rkeys[1]);
+    temp = _mm_aesenc_si128(temp, rkeys[2]);
+    temp = _mm_aesenc_si128(temp, rkeys[3]);
+    temp = _mm_aesenc_si128(temp, rkeys[4]);
+    temp = _mm_aesenc_si128(temp, rkeys[5]);
+    temp = _mm_aesenc_si128(temp, rkeys[6]);
+    temp = _mm_aesenc_si128(temp, rkeys[7]);
+    temp = _mm_aesenc_si128(temp, rkeys[8]);
+    temp = _mm_aesenc_si128(temp, rkeys[9]);
+    temp = _mm_aesenc_si128(temp, rkeys[10]);
+    temp = _mm_aesenc_si128(temp, rkeys[11]);
+    temp = _mm_aesenc_si128(temp, rkeys[12]);
+    temp = _mm_aesenc_si128(temp, rkeys[13]);
+
     temp = _mm_aesenclast_si128(temp, rkeys[14]);
     _mm_storeu_si128((__m128i *) out, temp);
 }
@@ -479,7 +492,7 @@ crypto_aead_aes256gcm_beforenm(crypto_ae
     __m128i        zero = _mm_setzero_si128();
     unsigned char *H = ctx->H;
 
-    (void) sizeof(int[(sizeof *ctx_) >= (sizeof *ctx) ? 1 : -1]);
+    COMPILER_ASSERT((sizeof *ctx_) >= (sizeof *ctx));
     aesni_key256_expand(k, rkeys);
     aesni_encrypt1(H, zero, rkeys);
 
@@ -562,7 +575,7 @@ crypto_aead_aes256gcm_encrypt_detached_a
         }                                                                                            \
     } while(0)
 
-/* remainder loop, with the slower GCM update to accomodate partial blocks */
+/* remainder loop, with the slower GCM update to accommodate partial blocks */
 #define LOOPRMD128                                           \
     do {                                                     \
         const int iter = 8;                                  \
@@ -1043,3 +1056,9 @@ crypto_aead_aes256gcm_statebytes(void)
 {
     return (sizeof(crypto_aead_aes256gcm_state) + (size_t) 15U) & ~(size_t) 15U;
 }
+
+void
+crypto_aead_aes256gcm_keygen(unsigned char k[crypto_aead_aes256gcm_KEYBYTES])
+{
+    randombytes_buf(k, crypto_aead_aes256gcm_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c libsodium-1.0.12/src/libsodium/crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c	2017-03-06 11:13:57.000000000 +0100
@@ -8,6 +8,7 @@
 #include "crypto_onetimeauth_poly1305.h"
 #include "crypto_stream_chacha20.h"
 #include "crypto_verify_16.h"
+#include "randombytes.h"
 #include "utils.h"
 
 #include "private/common.h"
@@ -195,7 +196,7 @@ crypto_aead_chacha20poly1305_decrypt_det
     crypto_onetimeauth_poly1305_final(&state, computed_mac);
     sodium_memzero(&state, sizeof state);
 
-    (void) sizeof(int[sizeof computed_mac == 16U ? 1 : -1]);
+    COMPILER_ASSERT(sizeof computed_mac == 16U);
     ret = crypto_verify_16(computed_mac, mac);
     sodium_memzero(computed_mac, sizeof computed_mac);
     if (m == NULL) {
@@ -279,7 +280,7 @@ crypto_aead_chacha20poly1305_ietf_decryp
     crypto_onetimeauth_poly1305_final(&state, computed_mac);
     sodium_memzero(&state, sizeof state);
 
-    (void) sizeof(int[sizeof computed_mac == 16U ? 1 : -1]);
+    COMPILER_ASSERT(sizeof computed_mac == 16U);
     ret = crypto_verify_16(computed_mac, mac);
     sodium_memzero(computed_mac, sizeof computed_mac);
     if (m == NULL) {
@@ -325,41 +326,61 @@ crypto_aead_chacha20poly1305_ietf_decryp
 }
 
 size_t
-crypto_aead_chacha20poly1305_ietf_keybytes(void) {
+crypto_aead_chacha20poly1305_ietf_keybytes(void)
+{
     return crypto_aead_chacha20poly1305_ietf_KEYBYTES;
 }
 
 size_t
-crypto_aead_chacha20poly1305_ietf_npubbytes(void) {
+crypto_aead_chacha20poly1305_ietf_npubbytes(void)
+{
     return crypto_aead_chacha20poly1305_ietf_NPUBBYTES;
 }
 
 size_t
-crypto_aead_chacha20poly1305_ietf_nsecbytes(void) {
+crypto_aead_chacha20poly1305_ietf_nsecbytes(void)
+{
     return crypto_aead_chacha20poly1305_ietf_NSECBYTES;
 }
 
 size_t
-crypto_aead_chacha20poly1305_ietf_abytes(void) {
+crypto_aead_chacha20poly1305_ietf_abytes(void)
+{
     return crypto_aead_chacha20poly1305_ietf_ABYTES;
 }
 
+void
+crypto_aead_chacha20poly1305_ietf_keygen(unsigned char k[crypto_aead_chacha20poly1305_ietf_KEYBYTES])
+{
+    randombytes_buf(k, crypto_aead_chacha20poly1305_ietf_KEYBYTES);
+}
+
 size_t
-crypto_aead_chacha20poly1305_keybytes(void) {
+crypto_aead_chacha20poly1305_keybytes(void)
+{
     return crypto_aead_chacha20poly1305_KEYBYTES;
 }
 
 size_t
-crypto_aead_chacha20poly1305_npubbytes(void) {
+crypto_aead_chacha20poly1305_npubbytes(void)
+{
     return crypto_aead_chacha20poly1305_NPUBBYTES;
 }
 
 size_t
-crypto_aead_chacha20poly1305_nsecbytes(void) {
+crypto_aead_chacha20poly1305_nsecbytes(void)
+{
     return crypto_aead_chacha20poly1305_NSECBYTES;
 }
 
 size_t
-crypto_aead_chacha20poly1305_abytes(void) {
+crypto_aead_chacha20poly1305_abytes(void)
+{
     return crypto_aead_chacha20poly1305_ABYTES;
 }
+
+void
+crypto_aead_chacha20poly1305_keygen(unsigned char k[crypto_aead_chacha20poly1305_KEYBYTES])
+{
+    randombytes_buf(k, crypto_aead_chacha20poly1305_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c libsodium-1.0.12/src/libsodium/crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,153 @@
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <limits.h>
+#include <string.h>
+
+#include "crypto_aead_xchacha20poly1305.h"
+#include "crypto_aead_chacha20poly1305.h"
+#include "crypto_core_hchacha20.h"
+#include "randombytes.h"
+#include "utils.h"
+
+#include "private/common.h"
+
+int
+crypto_aead_xchacha20poly1305_ietf_encrypt_detached(unsigned char *c,
+                                                    unsigned char *mac,
+                                                    unsigned long long *maclen_p,
+                                                    const unsigned char *m,
+                                                    unsigned long long mlen,
+                                                    const unsigned char *ad,
+                                                    unsigned long long adlen,
+                                                    const unsigned char *nsec,
+                                                    const unsigned char *npub,
+                                                    const unsigned char *k)
+{
+    unsigned char k2[crypto_core_hchacha20_OUTPUTBYTES];
+    unsigned char npub2[crypto_aead_chacha20poly1305_ietf_NPUBBYTES] = { 0 };
+    int           ret;
+
+    crypto_core_hchacha20(k2, npub, k, NULL);
+    memcpy(npub2 + 4, npub + crypto_core_hchacha20_INPUTBYTES,
+           crypto_aead_chacha20poly1305_ietf_NPUBBYTES - 4);
+    ret = crypto_aead_chacha20poly1305_ietf_encrypt_detached
+        (c, mac, maclen_p, m, mlen, ad, adlen, nsec, npub2, k2);
+    sodium_memzero(k2, crypto_core_hchacha20_OUTPUTBYTES);
+
+    return ret;
+}
+
+int
+crypto_aead_xchacha20poly1305_ietf_encrypt(unsigned char *c,
+                                           unsigned long long *clen_p,
+                                           const unsigned char *m,
+                                           unsigned long long mlen,
+                                           const unsigned char *ad,
+                                           unsigned long long adlen,
+                                           const unsigned char *nsec,
+                                           const unsigned char *npub,
+                                           const unsigned char *k)
+{
+    unsigned long long clen = 0ULL;
+    int                ret;
+
+    if (mlen > UINT64_MAX - crypto_aead_xchacha20poly1305_ietf_ABYTES) {
+        abort(); /* LCOV_EXCL_LINE */
+    }
+    ret = crypto_aead_xchacha20poly1305_ietf_encrypt_detached
+        (c, c + mlen, NULL, m, mlen, ad, adlen, nsec, npub, k);
+    if (clen_p != NULL) {
+        if (ret == 0) {
+            clen = mlen + crypto_aead_xchacha20poly1305_ietf_ABYTES;
+        }
+        *clen_p = clen;
+    }
+    return ret;
+}
+
+int
+crypto_aead_xchacha20poly1305_ietf_decrypt_detached(unsigned char *m,
+                                                    unsigned char *nsec,
+                                                    const unsigned char *c,
+                                                    unsigned long long clen,
+                                                    const unsigned char *mac,
+                                                    const unsigned char *ad,
+                                                    unsigned long long adlen,
+                                                    const unsigned char *npub,
+                                                    const unsigned char *k)
+{
+    unsigned char k2[crypto_core_hchacha20_OUTPUTBYTES];
+    unsigned char npub2[crypto_aead_chacha20poly1305_ietf_NPUBBYTES] = { 0 };
+    int           ret;
+
+    crypto_core_hchacha20(k2, npub, k, NULL);
+    memcpy(npub2 + 4, npub + crypto_core_hchacha20_INPUTBYTES,
+           crypto_aead_chacha20poly1305_ietf_NPUBBYTES - 4);
+    ret = crypto_aead_chacha20poly1305_ietf_decrypt_detached
+        (m, nsec, c, clen, mac, ad, adlen, npub2, k2);
+    sodium_memzero(k2, crypto_core_hchacha20_OUTPUTBYTES);
+
+    return ret;
+
+}
+
+int
+crypto_aead_xchacha20poly1305_ietf_decrypt(unsigned char *m,
+                                           unsigned long long *mlen_p,
+                                           unsigned char *nsec,
+                                           const unsigned char *c,
+                                           unsigned long long clen,
+                                           const unsigned char *ad,
+                                           unsigned long long adlen,
+                                           const unsigned char *npub,
+                                           const unsigned char *k)
+{
+    unsigned long long mlen = 0ULL;
+    int                ret = -1;
+
+    if (clen >= crypto_aead_xchacha20poly1305_ietf_ABYTES) {
+        ret = crypto_aead_xchacha20poly1305_ietf_decrypt_detached
+            (m, nsec,
+             c, clen - crypto_aead_xchacha20poly1305_ietf_ABYTES,
+             c + clen - crypto_aead_xchacha20poly1305_ietf_ABYTES,
+             ad, adlen, npub, k);
+    }
+    if (mlen_p != NULL) {
+        if (ret == 0) {
+            mlen = clen - crypto_aead_xchacha20poly1305_ietf_ABYTES;
+        }
+        *mlen_p = mlen;
+    }
+    return ret;
+}
+
+size_t
+crypto_aead_xchacha20poly1305_ietf_keybytes(void)
+{
+    return crypto_aead_xchacha20poly1305_ietf_KEYBYTES;
+}
+
+size_t
+crypto_aead_xchacha20poly1305_ietf_npubbytes(void)
+{
+    return crypto_aead_xchacha20poly1305_ietf_NPUBBYTES;
+}
+
+size_t
+crypto_aead_xchacha20poly1305_ietf_nsecbytes(void)
+{
+    return crypto_aead_xchacha20poly1305_ietf_NSECBYTES;
+}
+
+size_t
+crypto_aead_xchacha20poly1305_ietf_abytes(void)
+{
+    return crypto_aead_xchacha20poly1305_ietf_ABYTES;
+}
+
+void
+crypto_aead_xchacha20poly1305_ietf_keygen(unsigned char k[crypto_aead_xchacha20poly1305_ietf_KEYBYTES])
+{
+    randombytes_buf(k, crypto_aead_xchacha20poly1305_ietf_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/crypto_auth.c libsodium-1.0.12/src/libsodium/crypto_auth/crypto_auth.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/crypto_auth.c	2016-02-27 13:22:08.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_auth/crypto_auth.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,5 +1,6 @@
 
 #include "crypto_auth.h"
+#include "randombytes.h"
 
 size_t
 crypto_auth_bytes(void)
@@ -32,3 +33,9 @@ crypto_auth_verify(const unsigned char *
 {
     return crypto_auth_hmacsha512256_verify(h, in, inlen, k);
 }
+
+void
+crypto_auth_keygen(unsigned char k[crypto_auth_KEYBYTES])
+{
+    randombytes_buf(k, crypto_auth_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha256/auth_hmacsha256_api.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha256/auth_hmacsha256_api.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha256/auth_hmacsha256_api.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha256/auth_hmacsha256_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,16 +0,0 @@
-#include "crypto_auth_hmacsha256.h"
-
-size_t
-crypto_auth_hmacsha256_bytes(void) {
-    return crypto_auth_hmacsha256_BYTES;
-}
-
-size_t
-crypto_auth_hmacsha256_keybytes(void) {
-    return crypto_auth_hmacsha256_KEYBYTES;
-}
-
-size_t
-crypto_auth_hmacsha256_statebytes(void) {
-    return sizeof(crypto_auth_hmacsha256_state);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha256/auth_hmacsha256.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha256/auth_hmacsha256.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha256/auth_hmacsha256.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha256/auth_hmacsha256.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,118 @@
+
+#include <stddef.h>
+#include <stdint.h>
+#include <string.h>
+
+#include "crypto_auth_hmacsha256.h"
+#include "crypto_hash_sha256.h"
+#include "crypto_verify_32.h"
+#include "randombytes.h"
+#include "utils.h"
+
+size_t
+crypto_auth_hmacsha256_bytes(void)
+{
+    return crypto_auth_hmacsha256_BYTES;
+}
+
+size_t
+crypto_auth_hmacsha256_keybytes(void)
+{
+    return crypto_auth_hmacsha256_KEYBYTES;
+}
+
+size_t
+crypto_auth_hmacsha256_statebytes(void)
+{
+    return sizeof(crypto_auth_hmacsha256_state);
+}
+
+void
+crypto_auth_hmacsha256_keygen(unsigned char k[crypto_auth_hmacsha256_KEYBYTES])
+{
+    randombytes_buf(k, crypto_auth_hmacsha256_KEYBYTES);
+}
+
+int
+crypto_auth_hmacsha256_init(crypto_auth_hmacsha256_state *state,
+                            const unsigned char *key, size_t keylen)
+{
+    unsigned char pad[64];
+    unsigned char khash[32];
+    size_t        i;
+
+    if (keylen > 64) {
+        crypto_hash_sha256_init(&state->ictx);
+        crypto_hash_sha256_update(&state->ictx, key, keylen);
+        crypto_hash_sha256_final(&state->ictx, khash);
+        key    = khash;
+        keylen = 32;
+    }
+    crypto_hash_sha256_init(&state->ictx);
+    memset(pad, 0x36, 64);
+    for (i = 0; i < keylen; i++) {
+        pad[i] ^= key[i];
+    }
+    crypto_hash_sha256_update(&state->ictx, pad, 64);
+
+    crypto_hash_sha256_init(&state->octx);
+    memset(pad, 0x5c, 64);
+    for (i = 0; i < keylen; i++) {
+        pad[i] ^= key[i];
+    }
+    crypto_hash_sha256_update(&state->octx, pad, 64);
+
+    sodium_memzero((void *) pad, sizeof pad);
+    sodium_memzero((void *) khash, sizeof khash);
+
+    return 0;
+}
+
+int
+crypto_auth_hmacsha256_update(crypto_auth_hmacsha256_state *state,
+                              const unsigned char *in, unsigned long long inlen)
+{
+    crypto_hash_sha256_update(&state->ictx, in, inlen);
+
+    return 0;
+}
+
+int
+crypto_auth_hmacsha256_final(crypto_auth_hmacsha256_state *state,
+                             unsigned char *               out)
+{
+    unsigned char ihash[32];
+
+    crypto_hash_sha256_final(&state->ictx, ihash);
+    crypto_hash_sha256_update(&state->octx, ihash, 32);
+    crypto_hash_sha256_final(&state->octx, out);
+
+    sodium_memzero((void *) ihash, sizeof ihash);
+
+    return 0;
+}
+
+int
+crypto_auth_hmacsha256(unsigned char *out, const unsigned char *in,
+                       unsigned long long inlen, const unsigned char *k)
+{
+    crypto_auth_hmacsha256_state state;
+
+    crypto_auth_hmacsha256_init(&state, k, crypto_auth_hmacsha256_KEYBYTES);
+    crypto_auth_hmacsha256_update(&state, in, inlen);
+    crypto_auth_hmacsha256_final(&state, out);
+
+    return 0;
+}
+
+int
+crypto_auth_hmacsha256_verify(const unsigned char *h, const unsigned char *in,
+                              unsigned long long inlen, const unsigned char *k)
+{
+    unsigned char correct[32];
+
+    crypto_auth_hmacsha256(correct, in, inlen, k);
+
+    return crypto_verify_32(h, correct) | (-(h == correct)) |
+           sodium_memcmp(correct, h, 32);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha256/cp/hmac_hmacsha256.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha256/cp/hmac_hmacsha256.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha256/cp/hmac_hmacsha256.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha256/cp/hmac_hmacsha256.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,110 +0,0 @@
-
-/*-
- * Copyright 2005,2007,2009 Colin Percival
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- */
-
-#include "crypto_auth_hmacsha256.h"
-#include "crypto_hash_sha256.h"
-#include "utils.h"
-
-#include <sys/types.h>
-
-#include <stdint.h>
-#include <string.h>
-
-int
-crypto_auth_hmacsha256_init(crypto_auth_hmacsha256_state *state,
-                            const unsigned char *key,
-                            size_t keylen)
-{
-    unsigned char pad[64];
-    unsigned char khash[32];
-    size_t        i;
-
-    if (keylen > 64) {
-        crypto_hash_sha256_init(&state->ictx);
-        crypto_hash_sha256_update(&state->ictx, key, keylen);
-        crypto_hash_sha256_final(&state->ictx, khash);
-        key = khash;
-        keylen = 32;
-    }
-    crypto_hash_sha256_init(&state->ictx);
-    memset(pad, 0x36, 64);
-    for (i = 0; i < keylen; i++) {
-        pad[i] ^= key[i];
-    }
-    crypto_hash_sha256_update(&state->ictx, pad, 64);
-
-    crypto_hash_sha256_init(&state->octx);
-    memset(pad, 0x5c, 64);
-    for (i = 0; i < keylen; i++) {
-        pad[i] ^= key[i];
-    }
-    crypto_hash_sha256_update(&state->octx, pad, 64);
-
-    sodium_memzero((void *) pad, sizeof pad);
-    sodium_memzero((void *) khash, sizeof khash);
-
-    return 0;
-}
-
-int
-crypto_auth_hmacsha256_update(crypto_auth_hmacsha256_state *state,
-                              const unsigned char *in,
-                              unsigned long long inlen)
-{
-    crypto_hash_sha256_update(&state->ictx, in, inlen);
-
-    return 0;
-}
-
-int
-crypto_auth_hmacsha256_final(crypto_auth_hmacsha256_state *state,
-                             unsigned char *out)
-{
-    unsigned char ihash[32];
-
-    crypto_hash_sha256_final(&state->ictx, ihash);
-    crypto_hash_sha256_update(&state->octx, ihash, 32);
-    crypto_hash_sha256_final(&state->octx, out);
-
-    sodium_memzero((void *) ihash, sizeof ihash);
-
-    return 0;
-}
-
-int
-crypto_auth_hmacsha256(unsigned char *out, const unsigned char *in,
-                       unsigned long long inlen, const unsigned char *k)
-{
-    crypto_auth_hmacsha256_state state;
-
-    crypto_auth_hmacsha256_init(&state, k, crypto_auth_hmacsha256_KEYBYTES);
-    crypto_auth_hmacsha256_update(&state, in, inlen);
-    crypto_auth_hmacsha256_final(&state, out);
-
-    return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha256/cp/verify_hmacsha256.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha256/cp/verify_hmacsha256.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha256/cp/verify_hmacsha256.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha256/cp/verify_hmacsha256.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,11 +0,0 @@
-#include "crypto_auth_hmacsha256.h"
-#include "crypto_verify_32.h"
-#include "utils.h"
-
-int crypto_auth_hmacsha256_verify(const unsigned char *h,const unsigned char *in,unsigned long long inlen,const unsigned char *k)
-{
-  unsigned char correct[32];
-  crypto_auth_hmacsha256(correct,in,inlen,k);
-  return crypto_verify_32(h,correct) | (-(h == correct)) |
-         sodium_memcmp(correct,h,32);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512/auth_hmacsha512_api.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512/auth_hmacsha512_api.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512/auth_hmacsha512_api.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512/auth_hmacsha512_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,16 +0,0 @@
-#include "crypto_auth_hmacsha512.h"
-
-size_t
-crypto_auth_hmacsha512_bytes(void) {
-    return crypto_auth_hmacsha512_BYTES;
-}
-
-size_t
-crypto_auth_hmacsha512_keybytes(void) {
-    return crypto_auth_hmacsha512_KEYBYTES;
-}
-
-size_t
-crypto_auth_hmacsha512_statebytes(void) {
-    return sizeof(crypto_auth_hmacsha512_state);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512/auth_hmacsha512.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512/auth_hmacsha512.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512/auth_hmacsha512.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512/auth_hmacsha512.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,118 @@
+
+#include <stddef.h>
+#include <stdint.h>
+#include <string.h>
+
+#include "crypto_auth_hmacsha512.h"
+#include "crypto_hash_sha512.h"
+#include "crypto_verify_64.h"
+#include "randombytes.h"
+#include "utils.h"
+
+size_t
+crypto_auth_hmacsha512_bytes(void)
+{
+    return crypto_auth_hmacsha512_BYTES;
+}
+
+size_t
+crypto_auth_hmacsha512_keybytes(void)
+{
+    return crypto_auth_hmacsha512_KEYBYTES;
+}
+
+size_t
+crypto_auth_hmacsha512_statebytes(void)
+{
+    return sizeof(crypto_auth_hmacsha512_state);
+}
+
+void
+crypto_auth_hmacsha512_keygen(unsigned char k[crypto_auth_hmacsha512_KEYBYTES])
+{
+    randombytes_buf(k, crypto_auth_hmacsha512_KEYBYTES);
+}
+
+int
+crypto_auth_hmacsha512_init(crypto_auth_hmacsha512_state *state,
+                            const unsigned char *key, size_t keylen)
+{
+    unsigned char pad[128];
+    unsigned char khash[64];
+    size_t        i;
+
+    if (keylen > 128) {
+        crypto_hash_sha512_init(&state->ictx);
+        crypto_hash_sha512_update(&state->ictx, key, keylen);
+        crypto_hash_sha512_final(&state->ictx, khash);
+        key    = khash;
+        keylen = 64;
+    }
+    crypto_hash_sha512_init(&state->ictx);
+    memset(pad, 0x36, 128);
+    for (i = 0; i < keylen; i++) {
+        pad[i] ^= key[i];
+    }
+    crypto_hash_sha512_update(&state->ictx, pad, 128);
+
+    crypto_hash_sha512_init(&state->octx);
+    memset(pad, 0x5c, 128);
+    for (i = 0; i < keylen; i++) {
+        pad[i] ^= key[i];
+    }
+    crypto_hash_sha512_update(&state->octx, pad, 128);
+
+    sodium_memzero((void *) pad, sizeof pad);
+    sodium_memzero((void *) khash, sizeof khash);
+
+    return 0;
+}
+
+int
+crypto_auth_hmacsha512_update(crypto_auth_hmacsha512_state *state,
+                              const unsigned char *in, unsigned long long inlen)
+{
+    crypto_hash_sha512_update(&state->ictx, in, inlen);
+
+    return 0;
+}
+
+int
+crypto_auth_hmacsha512_final(crypto_auth_hmacsha512_state *state,
+                             unsigned char *               out)
+{
+    unsigned char ihash[64];
+
+    crypto_hash_sha512_final(&state->ictx, ihash);
+    crypto_hash_sha512_update(&state->octx, ihash, 64);
+    crypto_hash_sha512_final(&state->octx, out);
+
+    sodium_memzero((void *) ihash, sizeof ihash);
+
+    return 0;
+}
+
+int
+crypto_auth_hmacsha512(unsigned char *out, const unsigned char *in,
+                       unsigned long long inlen, const unsigned char *k)
+{
+    crypto_auth_hmacsha512_state state;
+
+    crypto_auth_hmacsha512_init(&state, k, crypto_auth_hmacsha512_KEYBYTES);
+    crypto_auth_hmacsha512_update(&state, in, inlen);
+    crypto_auth_hmacsha512_final(&state, out);
+
+    return 0;
+}
+
+int
+crypto_auth_hmacsha512_verify(const unsigned char *h, const unsigned char *in,
+                              unsigned long long inlen, const unsigned char *k)
+{
+    unsigned char correct[64];
+
+    crypto_auth_hmacsha512(correct, in, inlen, k);
+
+    return crypto_verify_64(h, correct) | (-(h == correct)) |
+           sodium_memcmp(correct, h, 64);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512/cp/hmac_hmacsha512.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512/cp/hmac_hmacsha512.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512/cp/hmac_hmacsha512.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512/cp/hmac_hmacsha512.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,110 +0,0 @@
-
-/*-
- * Copyright 2005,2007,2009 Colin Percival
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- */
-
-#include "crypto_auth_hmacsha512.h"
-#include "crypto_hash_sha512.h"
-#include "utils.h"
-
-#include <sys/types.h>
-
-#include <stdint.h>
-#include <string.h>
-
-int
-crypto_auth_hmacsha512_init(crypto_auth_hmacsha512_state *state,
-                            const unsigned char *key,
-                            size_t keylen)
-{
-    unsigned char pad[128];
-    unsigned char khash[64];
-    size_t        i;
-
-    if (keylen > 128) {
-        crypto_hash_sha512_init(&state->ictx);
-        crypto_hash_sha512_update(&state->ictx, key, keylen);
-        crypto_hash_sha512_final(&state->ictx, khash);
-        key = khash;
-        keylen = 64;
-    }
-    crypto_hash_sha512_init(&state->ictx);
-    memset(pad, 0x36, 128);
-    for (i = 0; i < keylen; i++) {
-        pad[i] ^= key[i];
-    }
-    crypto_hash_sha512_update(&state->ictx, pad, 128);
-
-    crypto_hash_sha512_init(&state->octx);
-    memset(pad, 0x5c, 128);
-    for (i = 0; i < keylen; i++) {
-        pad[i] ^= key[i];
-    }
-    crypto_hash_sha512_update(&state->octx, pad, 128);
-
-    sodium_memzero((void *) pad, sizeof pad);
-    sodium_memzero((void *) khash, sizeof khash);
-
-    return 0;
-}
-
-int
-crypto_auth_hmacsha512_update(crypto_auth_hmacsha512_state *state,
-                              const unsigned char *in,
-                              unsigned long long inlen)
-{
-    crypto_hash_sha512_update(&state->ictx, in, inlen);
-
-    return 0;
-}
-
-int
-crypto_auth_hmacsha512_final(crypto_auth_hmacsha512_state *state,
-                             unsigned char *out)
-{
-    unsigned char ihash[64];
-
-    crypto_hash_sha512_final(&state->ictx, ihash);
-    crypto_hash_sha512_update(&state->octx, ihash, 64);
-    crypto_hash_sha512_final(&state->octx, out);
-
-    sodium_memzero((void *) ihash, sizeof ihash);
-
-    return 0;
-}
-
-int
-crypto_auth_hmacsha512(unsigned char *out, const unsigned char *in,
-                       unsigned long long inlen, const unsigned char *k)
-{
-    crypto_auth_hmacsha512_state state;
-
-    crypto_auth_hmacsha512_init(&state, k, crypto_auth_hmacsha512_KEYBYTES);
-    crypto_auth_hmacsha512_update(&state, in, inlen);
-    crypto_auth_hmacsha512_final(&state, out);
-
-    return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512/cp/verify_hmacsha512.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512/cp/verify_hmacsha512.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512/cp/verify_hmacsha512.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512/cp/verify_hmacsha512.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,12 +0,0 @@
-#include "crypto_auth_hmacsha512.h"
-#include "crypto_verify_64.h"
-#include "utils.h"
-
-int crypto_auth_hmacsha512_verify(const unsigned char *h, const unsigned char *in,
-                                  unsigned long long inlen, const unsigned char *k)
-{
-  unsigned char correct[64];
-  crypto_auth_hmacsha512(correct,in,inlen,k);
-  return crypto_verify_64(h,correct) | (-(h == correct)) |
-         sodium_memcmp(correct,h,64);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512256/auth_hmacsha512256_api.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512256/auth_hmacsha512256_api.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512256/auth_hmacsha512256_api.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512256/auth_hmacsha512256_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,16 +0,0 @@
-#include "crypto_auth_hmacsha512256.h"
-
-size_t
-crypto_auth_hmacsha512256_bytes(void) {
-    return crypto_auth_hmacsha512256_BYTES;
-}
-
-size_t
-crypto_auth_hmacsha512256_keybytes(void) {
-    return crypto_auth_hmacsha512256_KEYBYTES;
-}
-
-size_t
-crypto_auth_hmacsha512256_statebytes(void) {
-    return sizeof(crypto_auth_hmacsha512256_state);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512256/auth_hmacsha512256.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512256/auth_hmacsha512256.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512256/auth_hmacsha512256.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512256/auth_hmacsha512256.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,93 @@
+
+#include <stddef.h>
+#include <stdint.h>
+#include <string.h>
+
+#include "crypto_auth_hmacsha512.h"
+#include "crypto_auth_hmacsha512256.h"
+#include "crypto_hash_sha512.h"
+#include "crypto_verify_32.h"
+#include "randombytes.h"
+#include "utils.h"
+
+size_t
+crypto_auth_hmacsha512256_bytes(void)
+{
+    return crypto_auth_hmacsha512256_BYTES;
+}
+
+size_t
+crypto_auth_hmacsha512256_keybytes(void)
+{
+    return crypto_auth_hmacsha512256_KEYBYTES;
+}
+
+size_t
+crypto_auth_hmacsha512256_statebytes(void)
+{
+    return sizeof(crypto_auth_hmacsha512256_state);
+}
+
+void
+crypto_auth_hmacsha512256_keygen(
+    unsigned char k[crypto_auth_hmacsha512256_KEYBYTES])
+{
+    randombytes_buf(k, crypto_auth_hmacsha512256_KEYBYTES);
+}
+
+int
+crypto_auth_hmacsha512256_init(crypto_auth_hmacsha512256_state *state,
+                               const unsigned char *key, size_t keylen)
+{
+    return crypto_auth_hmacsha512_init((crypto_auth_hmacsha512_state *) state,
+                                       key, keylen);
+}
+
+int
+crypto_auth_hmacsha512256_update(crypto_auth_hmacsha512256_state *state,
+                                 const unsigned char *            in,
+                                 unsigned long long               inlen)
+{
+    return crypto_auth_hmacsha512_update((crypto_auth_hmacsha512_state *) state,
+                                         in, inlen);
+}
+
+int
+crypto_auth_hmacsha512256_final(crypto_auth_hmacsha512256_state *state,
+                                unsigned char *                  out)
+{
+    unsigned char out0[64];
+
+    crypto_auth_hmacsha512_final((crypto_auth_hmacsha512_state *) state, out0);
+    memcpy(out, out0, 32);
+
+    return 0;
+}
+
+int
+crypto_auth_hmacsha512256(unsigned char *out, const unsigned char *in,
+                          unsigned long long inlen, const unsigned char *k)
+{
+    crypto_auth_hmacsha512256_state state;
+
+    crypto_auth_hmacsha512256_init(&state, k,
+                                   crypto_auth_hmacsha512256_KEYBYTES);
+    crypto_auth_hmacsha512256_update(&state, in, inlen);
+    crypto_auth_hmacsha512256_final(&state, out);
+
+    return 0;
+}
+
+int
+crypto_auth_hmacsha512256_verify(const unsigned char *h,
+                                 const unsigned char *in,
+                                 unsigned long long   inlen,
+                                 const unsigned char *k)
+{
+    unsigned char correct[32];
+
+    crypto_auth_hmacsha512256(correct, in, inlen, k);
+
+    return crypto_verify_32(h, correct) | (-(h == correct)) |
+           sodium_memcmp(correct, h, 32);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,54 +0,0 @@
-
-#include "crypto_auth_hmacsha512256.h"
-#include "crypto_auth_hmacsha512.h"
-#include "crypto_hash_sha512.h"
-#include "utils.h"
-
-#include <sys/types.h>
-
-#include <stdint.h>
-#include <string.h>
-
-int
-crypto_auth_hmacsha512256_init(crypto_auth_hmacsha512256_state *state,
-                               const unsigned char *key,
-                               size_t keylen)
-{
-    return crypto_auth_hmacsha512_init((crypto_auth_hmacsha512_state *) state,
-                                       key, keylen);
-}
-
-int
-crypto_auth_hmacsha512256_update(crypto_auth_hmacsha512256_state *state,
-                                 const unsigned char *in,
-                                 unsigned long long inlen)
-{
-    return crypto_auth_hmacsha512_update((crypto_auth_hmacsha512_state *) state,
-                                         in, inlen);
-}
-
-int
-crypto_auth_hmacsha512256_final(crypto_auth_hmacsha512256_state *state,
-                                unsigned char *out)
-{
-    unsigned char out0[64];
-
-    crypto_auth_hmacsha512_final((crypto_auth_hmacsha512_state *) state, out0);
-    memcpy(out, out0, 32);
-
-    return 0;
-}
-
-int
-crypto_auth_hmacsha512256(unsigned char *out, const unsigned char *in,
-                          unsigned long long inlen, const unsigned char *k)
-{
-    crypto_auth_hmacsha512256_state state;
-
-    crypto_auth_hmacsha512256_init(&state, k,
-                                   crypto_auth_hmacsha512256_KEYBYTES);
-    crypto_auth_hmacsha512256_update(&state, in, inlen);
-    crypto_auth_hmacsha512256_final(&state, out);
-
-    return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c
--- libsodium-1.0.11/src/libsodium/crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,14 +0,0 @@
-#include "crypto_auth_hmacsha512256.h"
-#include "crypto_verify_32.h"
-#include "utils.h"
-
-int crypto_auth_hmacsha512256_verify(const unsigned char *h,
-                                     const unsigned char *in,
-                                     unsigned long long inlen,
-                                     const unsigned char *k)
-{
-  unsigned char correct[32];
-  crypto_auth_hmacsha512256(correct,in,inlen,k);
-  return crypto_verify_32(h,correct) | (-(h == correct)) |
-         sodium_memcmp(correct,h,32);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_box/crypto_box_easy.c libsodium-1.0.12/src/libsodium/crypto_box/crypto_box_easy.c
--- libsodium-1.0.11/src/libsodium/crypto_box/crypto_box_easy.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_box/crypto_box_easy.c	2017-03-06 11:13:57.000000000 +0100
@@ -5,6 +5,7 @@
 
 #include "crypto_box.h"
 #include "crypto_secretbox.h"
+#include "private/common.h"
 #include "utils.h"
 
 int
@@ -24,8 +25,7 @@ crypto_box_detached(unsigned char *c, un
     unsigned char k[crypto_box_BEFORENMBYTES];
     int           ret;
 
-    (void) sizeof(int[crypto_box_BEFORENMBYTES >=
-                      crypto_secretbox_KEYBYTES ? 1 : -1]);
+    COMPILER_ASSERT(crypto_box_BEFORENMBYTES >= crypto_secretbox_KEYBYTES);
     if (crypto_box_beforenm(k, pk, sk) != 0) {
         return -1;
     }
@@ -62,7 +62,8 @@ crypto_box_easy(unsigned char *c, const
 int
 crypto_box_open_detached_afternm(unsigned char *m, const unsigned char *c,
                                  const unsigned char *mac,
-                                 unsigned long long clen, const unsigned char *n,
+                                 unsigned long long clen,
+                                 const unsigned char *n,
                                  const unsigned char *k)
 {
     return crypto_secretbox_open_detached(m, c, mac, clen, n, k);
diff -urpN libsodium-1.0.11/src/libsodium/crypto_box/crypto_box_seal.c libsodium-1.0.12/src/libsodium/crypto_box/crypto_box_seal.c
--- libsodium-1.0.11/src/libsodium/crypto_box/crypto_box_seal.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_box/crypto_box_seal.c	2017-03-06 11:13:57.000000000 +0100
@@ -3,6 +3,7 @@
 
 #include "crypto_box.h"
 #include "crypto_generichash.h"
+#include "private/common.h"
 #include "utils.h"
 
 static int
@@ -54,7 +55,7 @@ crypto_box_seal_open(unsigned char *m, c
     }
     _crypto_box_seal_nonce(nonce, c, pk);
 
-    (void) sizeof(int[crypto_box_PUBLICKEYBYTES < crypto_box_SEALBYTES ? 1 : -1]);
+    COMPILER_ASSERT(crypto_box_PUBLICKEYBYTES < crypto_box_SEALBYTES);
     return crypto_box_open_easy(m, c + crypto_box_PUBLICKEYBYTES,
                                 clen - crypto_box_PUBLICKEYBYTES,
                                 nonce, c, sk);
diff -urpN libsodium-1.0.11/src/libsodium/crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c libsodium-1.0.12/src/libsodium/crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c	2017-03-09 13:05:09.000000000 +0100
@@ -0,0 +1,197 @@
+
+#include <limits.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "crypto_box_curve25519xchacha20poly1305.h"
+#include "crypto_core_hchacha20.h"
+#include "crypto_hash_sha512.h"
+#include "crypto_scalarmult_curve25519.h"
+#include "crypto_secretbox_xchacha20poly1305.h"
+#include "private/common.h"
+#include "randombytes.h"
+#include "utils.h"
+
+int
+crypto_box_curve25519xchacha20poly1305_seed_keypair(unsigned char *      pk,
+                                                    unsigned char *      sk,
+                                                    const unsigned char *seed)
+{
+    unsigned char hash[64];
+
+    crypto_hash_sha512(hash, seed, 32);
+    memcpy(sk, hash, 32);
+    sodium_memzero(hash, sizeof hash);
+
+    return crypto_scalarmult_curve25519_base(pk, sk);
+}
+
+int
+crypto_box_curve25519xchacha20poly1305_keypair(unsigned char *pk,
+                                               unsigned char *sk)
+{
+    randombytes_buf(sk, 32);
+
+    return crypto_scalarmult_curve25519_base(pk, sk);
+}
+
+int
+crypto_box_curve25519xchacha20poly1305_beforenm(unsigned char *      k,
+                                                const unsigned char *pk,
+                                                const unsigned char *sk)
+{
+    static const unsigned char zero[16] = { 0 };
+    unsigned char s[32];
+
+    if (crypto_scalarmult_curve25519(s, sk, pk) != 0) {
+        return -1;
+    }
+    return crypto_core_hchacha20(k, zero, s, NULL);
+}
+
+int
+crypto_box_curve25519xchacha20poly1305_detached_afternm(
+    unsigned char *c, unsigned char *mac, const unsigned char *m,
+    unsigned long long mlen, const unsigned char *n, const unsigned char *k)
+{
+    return crypto_secretbox_xchacha20poly1305_detached(c, mac, m, mlen, n, k);
+}
+
+int
+crypto_box_curve25519xchacha20poly1305_detached(
+    unsigned char *c, unsigned char *mac, const unsigned char *m,
+    unsigned long long mlen, const unsigned char *n, const unsigned char *pk,
+    const unsigned char *sk)
+{
+    unsigned char k[crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES];
+    int           ret;
+
+    COMPILER_ASSERT(crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES >=
+                    crypto_secretbox_xchacha20poly1305_KEYBYTES);
+    if (crypto_box_curve25519xchacha20poly1305_beforenm(k, pk, sk) != 0) {
+        return -1;
+    }
+    ret = crypto_box_curve25519xchacha20poly1305_detached_afternm(c, mac, m,
+                                                                  mlen, n, k);
+    sodium_memzero(k, sizeof k);
+
+    return ret;
+}
+
+int
+crypto_box_curve25519xchacha20poly1305_easy_afternm(unsigned char *      c,
+                                                    const unsigned char *m,
+                                                    unsigned long long   mlen,
+                                                    const unsigned char *n,
+                                                    const unsigned char *k)
+{
+    if (mlen > SIZE_MAX - crypto_box_curve25519xchacha20poly1305_MACBYTES) {
+        return -1;
+    }
+    return crypto_box_curve25519xchacha20poly1305_detached_afternm(
+        c + crypto_box_curve25519xchacha20poly1305_MACBYTES, c, m, mlen, n, k);
+}
+
+int
+crypto_box_curve25519xchacha20poly1305_easy(
+    unsigned char *c, const unsigned char *m, unsigned long long mlen,
+    const unsigned char *n, const unsigned char *pk, const unsigned char *sk)
+{
+    if (mlen > SIZE_MAX - crypto_box_curve25519xchacha20poly1305_MACBYTES) {
+        return -1;
+    }
+    return crypto_box_curve25519xchacha20poly1305_detached(
+        c + crypto_box_curve25519xchacha20poly1305_MACBYTES, c, m, mlen, n, pk,
+        sk);
+}
+
+int
+crypto_box_curve25519xchacha20poly1305_open_detached_afternm(
+    unsigned char *m, const unsigned char *c, const unsigned char *mac,
+    unsigned long long clen, const unsigned char *n, const unsigned char *k)
+{
+    return crypto_secretbox_xchacha20poly1305_open_detached(m, c, mac, clen, n,
+                                                            k);
+}
+
+int
+crypto_box_curve25519xchacha20poly1305_open_detached(
+    unsigned char *m, const unsigned char *c, const unsigned char *mac,
+    unsigned long long clen, const unsigned char *n, const unsigned char *pk,
+    const unsigned char *sk)
+{
+    unsigned char k[crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES];
+    int           ret;
+
+    if (crypto_box_curve25519xchacha20poly1305_beforenm(k, pk, sk) != 0) {
+        return -1;
+    }
+    ret = crypto_box_curve25519xchacha20poly1305_open_detached_afternm(
+        m, c, mac, clen, n, k);
+    sodium_memzero(k, sizeof k);
+
+    return ret;
+}
+
+int
+crypto_box_curve25519xchacha20poly1305_open_easy_afternm(
+    unsigned char *m, const unsigned char *c, unsigned long long clen,
+    const unsigned char *n, const unsigned char *k)
+{
+    if (clen < crypto_box_curve25519xchacha20poly1305_MACBYTES) {
+        return -1;
+    }
+    return crypto_box_curve25519xchacha20poly1305_open_detached_afternm(
+        m, c + crypto_box_curve25519xchacha20poly1305_MACBYTES, c,
+        clen - crypto_box_curve25519xchacha20poly1305_MACBYTES, n, k);
+}
+
+int
+crypto_box_curve25519xchacha20poly1305_open_easy(
+    unsigned char *m, const unsigned char *c, unsigned long long clen,
+    const unsigned char *n, const unsigned char *pk, const unsigned char *sk)
+{
+    if (clen < crypto_box_curve25519xchacha20poly1305_MACBYTES) {
+        return -1;
+    }
+    return crypto_box_curve25519xchacha20poly1305_open_detached(
+        m, c + crypto_box_curve25519xchacha20poly1305_MACBYTES, c,
+        clen - crypto_box_curve25519xchacha20poly1305_MACBYTES, n, pk, sk);
+}
+
+size_t
+crypto_box_curve25519xchacha20poly1305_seedbytes(void)
+{
+    return crypto_box_curve25519xchacha20poly1305_SEEDBYTES;
+}
+
+size_t
+crypto_box_curve25519xchacha20poly1305_publickeybytes(void)
+{
+    return crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES;
+}
+
+size_t
+crypto_box_curve25519xchacha20poly1305_secretkeybytes(void)
+{
+    return crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES;
+}
+
+size_t
+crypto_box_curve25519xchacha20poly1305_beforenmbytes(void)
+{
+    return crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES;
+}
+
+size_t
+crypto_box_curve25519xchacha20poly1305_noncebytes(void)
+{
+    return crypto_box_curve25519xchacha20poly1305_NONCEBYTES;
+}
+
+size_t
+crypto_box_curve25519xchacha20poly1305_macbytes(void)
+{
+    return crypto_box_curve25519xchacha20poly1305_MACBYTES;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c
--- libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c	2016-02-27 13:22:08.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,41 +0,0 @@
-#include "crypto_box_curve25519xsalsa20poly1305.h"
-
-size_t
-crypto_box_curve25519xsalsa20poly1305_seedbytes(void) {
-    return crypto_box_curve25519xsalsa20poly1305_SEEDBYTES;
-}
-
-size_t
-crypto_box_curve25519xsalsa20poly1305_publickeybytes(void) {
-    return crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES;
-}
-
-size_t
-crypto_box_curve25519xsalsa20poly1305_secretkeybytes(void) {
-    return crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES;
-}
-
-size_t
-crypto_box_curve25519xsalsa20poly1305_beforenmbytes(void) {
-    return crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES;
-}
-
-size_t
-crypto_box_curve25519xsalsa20poly1305_noncebytes(void) {
-    return crypto_box_curve25519xsalsa20poly1305_NONCEBYTES;
-}
-
-size_t
-crypto_box_curve25519xsalsa20poly1305_zerobytes(void) {
-    return crypto_box_curve25519xsalsa20poly1305_ZEROBYTES;
-}
-
-size_t
-crypto_box_curve25519xsalsa20poly1305_boxzerobytes(void) {
-    return crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES;
-}
-
-size_t
-crypto_box_curve25519xsalsa20poly1305_macbytes(void) {
-    return crypto_box_curve25519xsalsa20poly1305_MACBYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c	2017-03-09 13:09:31.000000000 +0100
@@ -0,0 +1,150 @@
+#include <string.h>
+
+#include "crypto_box_curve25519xsalsa20poly1305.h"
+#include "crypto_core_hsalsa20.h"
+#include "crypto_hash_sha512.h"
+#include "crypto_scalarmult_curve25519.h"
+#include "crypto_secretbox_xsalsa20poly1305.h"
+#include "randombytes.h"
+#include "utils.h"
+
+int
+crypto_box_curve25519xsalsa20poly1305_seed_keypair(unsigned char *      pk,
+                                                   unsigned char *      sk,
+                                                   const unsigned char *seed)
+{
+    unsigned char hash[64];
+
+    crypto_hash_sha512(hash, seed, 32);
+    memcpy(sk, hash, 32);
+    sodium_memzero(hash, sizeof hash);
+
+    return crypto_scalarmult_curve25519_base(pk, sk);
+}
+
+int
+crypto_box_curve25519xsalsa20poly1305_keypair(unsigned char *pk,
+                                              unsigned char *sk)
+{
+    randombytes_buf(sk, 32);
+
+    return crypto_scalarmult_curve25519_base(pk, sk);
+}
+
+int
+crypto_box_curve25519xsalsa20poly1305_beforenm(unsigned char *      k,
+                                               const unsigned char *pk,
+                                               const unsigned char *sk)
+{
+    static const unsigned char zero[16] = { 0 };
+    unsigned char s[32];
+
+    if (crypto_scalarmult_curve25519(s, sk, pk) != 0) {
+        return -1;
+    }
+    return crypto_core_hsalsa20(k, zero, s, NULL);
+}
+
+int
+crypto_box_curve25519xsalsa20poly1305_afternm(unsigned char *      c,
+                                              const unsigned char *m,
+                                              unsigned long long   mlen,
+                                              const unsigned char *n,
+                                              const unsigned char *k)
+{
+    return crypto_secretbox_xsalsa20poly1305(c, m, mlen, n, k);
+}
+
+int
+crypto_box_curve25519xsalsa20poly1305_open_afternm(unsigned char *      m,
+                                                   const unsigned char *c,
+                                                   unsigned long long   clen,
+                                                   const unsigned char *n,
+                                                   const unsigned char *k)
+{
+    return crypto_secretbox_xsalsa20poly1305_open(m, c, clen, n, k);
+}
+
+int
+crypto_box_curve25519xsalsa20poly1305(unsigned char *c, const unsigned char *m,
+                                      unsigned long long   mlen,
+                                      const unsigned char *n,
+                                      const unsigned char *pk,
+                                      const unsigned char *sk)
+{
+    unsigned char k[crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES];
+    int           ret;
+
+    if (crypto_box_curve25519xsalsa20poly1305_beforenm(k, pk, sk) != 0) {
+        return -1;
+    }
+    ret = crypto_box_curve25519xsalsa20poly1305_afternm(c, m, mlen, n, k);
+    sodium_memzero(k, sizeof k);
+
+    return ret;
+}
+
+int
+crypto_box_curve25519xsalsa20poly1305_open(
+    unsigned char *m, const unsigned char *c, unsigned long long clen,
+    const unsigned char *n, const unsigned char *pk, const unsigned char *sk)
+{
+    unsigned char k[crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES];
+    int           ret;
+
+    if (crypto_box_curve25519xsalsa20poly1305_beforenm(k, pk, sk) != 0) {
+        return -1;
+    }
+    ret = crypto_box_curve25519xsalsa20poly1305_open_afternm(m, c, clen, n, k);
+    sodium_memzero(k, sizeof k);
+
+    return ret;
+}
+
+size_t
+crypto_box_curve25519xsalsa20poly1305_seedbytes(void)
+{
+    return crypto_box_curve25519xsalsa20poly1305_SEEDBYTES;
+}
+
+size_t
+crypto_box_curve25519xsalsa20poly1305_publickeybytes(void)
+{
+    return crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES;
+}
+
+size_t
+crypto_box_curve25519xsalsa20poly1305_secretkeybytes(void)
+{
+    return crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES;
+}
+
+size_t
+crypto_box_curve25519xsalsa20poly1305_beforenmbytes(void)
+{
+    return crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES;
+}
+
+size_t
+crypto_box_curve25519xsalsa20poly1305_noncebytes(void)
+{
+    return crypto_box_curve25519xsalsa20poly1305_NONCEBYTES;
+}
+
+size_t
+crypto_box_curve25519xsalsa20poly1305_zerobytes(void)
+{
+    return crypto_box_curve25519xsalsa20poly1305_ZEROBYTES;
+}
+
+size_t
+crypto_box_curve25519xsalsa20poly1305_boxzerobytes(void)
+{
+    return crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES;
+}
+
+size_t
+crypto_box_curve25519xsalsa20poly1305_macbytes(void)
+{
+    return crypto_box_curve25519xsalsa20poly1305_MACBYTES;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,22 +0,0 @@
-#include "crypto_box_curve25519xsalsa20poly1305.h"
-#include "crypto_secretbox_xsalsa20poly1305.h"
-
-int crypto_box_curve25519xsalsa20poly1305_afternm(
-  unsigned char *c,
-  const unsigned char *m,unsigned long long mlen,
-  const unsigned char *n,
-  const unsigned char *k
-)
-{
-  return crypto_secretbox_xsalsa20poly1305(c,m,mlen,n,k);
-}
-
-int crypto_box_curve25519xsalsa20poly1305_open_afternm(
-  unsigned char *m,
-  const unsigned char *c,unsigned long long clen,
-  const unsigned char *n,
-  const unsigned char *k
-)
-{
-  return crypto_secretbox_xsalsa20poly1305_open(m,c,clen,n,k);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,18 +0,0 @@
-#include "crypto_box_curve25519xsalsa20poly1305.h"
-#include "crypto_core_hsalsa20.h"
-#include "crypto_scalarmult_curve25519.h"
-
-static const unsigned char n[16] = {0};
-
-int crypto_box_curve25519xsalsa20poly1305_beforenm(
-  unsigned char *k,
-  const unsigned char *pk,
-  const unsigned char *sk
-)
-{
-  unsigned char s[32];
-  if (crypto_scalarmult_curve25519(s,sk,pk) != 0) {
-      return -1;
-  }
-  return crypto_core_hsalsa20(k,n,s,NULL);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,42 +0,0 @@
-#include "crypto_box_curve25519xsalsa20poly1305.h"
-#include "utils.h"
-
-int crypto_box_curve25519xsalsa20poly1305(
-  unsigned char *c,
-  const unsigned char *m,unsigned long long mlen,
-  const unsigned char *n,
-  const unsigned char *pk,
-  const unsigned char *sk
-)
-{
-  unsigned char k[crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES];
-  int           ret;
-
-  if (crypto_box_curve25519xsalsa20poly1305_beforenm(k,pk,sk) != 0) {
-      return -1;
-  }
-  ret = crypto_box_curve25519xsalsa20poly1305_afternm(c,m,mlen,n,k);
-  sodium_memzero(k, sizeof k);
-
-  return ret;
-}
-
-int crypto_box_curve25519xsalsa20poly1305_open(
-  unsigned char *m,
-  const unsigned char *c,unsigned long long clen,
-  const unsigned char *n,
-  const unsigned char *pk,
-  const unsigned char *sk
-)
-{
-  unsigned char k[crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES];
-  int           ret;
-
-  if (crypto_box_curve25519xsalsa20poly1305_beforenm(k,pk,sk) != 0) {
-      return -1;
-  }
-  ret = crypto_box_curve25519xsalsa20poly1305_open_afternm(m,c,clen,n,k);
-  sodium_memzero(k, sizeof k);
-
-  return ret;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,29 +0,0 @@
-#include <string.h>
-
-#include "crypto_box_curve25519xsalsa20poly1305.h"
-#include "crypto_hash_sha512.h"
-#include "crypto_scalarmult_curve25519.h"
-#include "randombytes.h"
-#include "utils.h"
-
-int crypto_box_curve25519xsalsa20poly1305_seed_keypair(
-  unsigned char *pk,
-  unsigned char *sk,
-  const unsigned char *seed
-)
-{
-  unsigned char hash[64];
-  crypto_hash_sha512(hash,seed,32);
-  memmove(sk,hash,32);
-  sodium_memzero(hash, sizeof hash);
-  return crypto_scalarmult_curve25519_base(pk,sk);
-}
-
-int crypto_box_curve25519xsalsa20poly1305_keypair(
-  unsigned char *pk,
-  unsigned char *sk
-)
-{
-  randombytes_buf(sk,32);
-  return crypto_scalarmult_curve25519_base(pk,sk);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/curve25519/ref10/curve25519_ref10.c libsodium-1.0.12/src/libsodium/crypto_core/curve25519/ref10/curve25519_ref10.c
--- libsodium-1.0.11/src/libsodium/crypto_core/curve25519/ref10/curve25519_ref10.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_core/curve25519/ref10/curve25519_ref10.c	2017-03-06 11:13:57.000000000 +0100
@@ -4,7 +4,7 @@
 #include "crypto_verify_32.h"
 #include "private/curve25519_ref10.h"
 
-static uint64_t load_3(const unsigned char *in)
+static inline uint64_t load_3(const unsigned char *in)
 {
     uint64_t result;
     result = (uint64_t) in[0];
@@ -14,7 +14,7 @@ static uint64_t load_3(const unsigned ch
     return result;
 }
 
-static uint64_t load_4(const unsigned char *in)
+static inline uint64_t load_4(const unsigned char *in)
 {
     uint64_t result;
     result = (uint64_t) in[0];
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/hchacha20/core_hchacha20.c libsodium-1.0.12/src/libsodium/crypto_core/hchacha20/core_hchacha20.c
--- libsodium-1.0.11/src/libsodium/crypto_core/hchacha20/core_hchacha20.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_core/hchacha20/core_hchacha20.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,10 +2,17 @@
 #include <stdint.h>
 #include <stdlib.h>
 
-#include "core_hchacha20.h"
 #include "crypto_core_hchacha20.h"
 #include "private/common.h"
 
+#define QUARTERROUND(A, B, C, D)     \
+  do {                               \
+      A += B; D = ROTL32(D ^ A, 16); \
+      C += D; B = ROTL32(B ^ C, 12); \
+      A += B; D = ROTL32(D ^ A,  8); \
+      C += D; B = ROTL32(B ^ C,  7); \
+  } while(0)
+
 int
 crypto_core_hchacha20(unsigned char *out, const unsigned char *in,
                       const unsigned char *k, const unsigned char *c)
@@ -15,10 +22,10 @@ crypto_core_hchacha20(unsigned char *out
     uint32_t x8, x9, x10, x11, x12, x13, x14, x15;
 
     if (c == NULL) {
-        x0 = U32C(0x61707865);
-        x1 = U32C(0x3320646e);
-        x2 = U32C(0x79622d32);
-        x3 = U32C(0x6b206574);
+        x0 = 0x61707865;
+        x1 = 0x3320646e;
+        x2 = 0x79622d32;
+        x3 = 0x6b206574;
     } else {
         x0 = LOAD32_LE(c +  0);
         x1 = LOAD32_LE(c +  4);
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/hchacha20/core_hchacha20.h libsodium-1.0.12/src/libsodium/crypto_core/hchacha20/core_hchacha20.h
--- libsodium-1.0.11/src/libsodium/crypto_core/hchacha20/core_hchacha20.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_core/hchacha20/core_hchacha20.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,28 +0,0 @@
-#ifndef core_hchacha20_H
-#define core_hchacha20_H
-
-#include <stdint.h>
-#include <stdlib.h>
-#include <string.h>
-
-#define U8C(v)  (v##U)
-#define U32C(v) (v##U)
-
-#define U8V(v)  ((uint8_t)(v) & U8C(0xFF))
-#define U32V(v) ((uint32_t)(v) & U32C(0xFFFFFFFF))
-
-#define ROTL32(v, n) (U32V((v) << (n)) | ((v) >> (32 - (n))))
-
-#define ROTATE(v, c) (ROTL32(v, c))
-#define XOR(v, w)    ((v) ^ (w))
-#define PLUS(v, w)   (U32V((v) + (w)))
-
-#define QUARTERROUND(a, b, c, d) \
-  do { \
-      a = PLUS(a, b); d = ROTATE(XOR(d, a), 16); \
-      c = PLUS(c, d); b = ROTATE(XOR(b, c), 12); \
-      a = PLUS(a, b); d = ROTATE(XOR(d, a),  8); \
-      c = PLUS(c, d); b = ROTATE(XOR(b, c),  7); \
-  } while(0)
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/hsalsa20/core_hsalsa20_api.c libsodium-1.0.12/src/libsodium/crypto_core/hsalsa20/core_hsalsa20_api.c
--- libsodium-1.0.11/src/libsodium/crypto_core/hsalsa20/core_hsalsa20_api.c	2016-02-27 13:22:08.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_core/hsalsa20/core_hsalsa20_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,21 +0,0 @@
-#include "crypto_core_hsalsa20.h"
-
-size_t
-crypto_core_hsalsa20_outputbytes(void) {
-    return crypto_core_hsalsa20_OUTPUTBYTES;
-}
-
-size_t
-crypto_core_hsalsa20_inputbytes(void) {
-    return crypto_core_hsalsa20_INPUTBYTES;
-}
-
-size_t
-crypto_core_hsalsa20_keybytes(void) {
-    return crypto_core_hsalsa20_KEYBYTES;
-}
-
-size_t
-crypto_core_hsalsa20_constbytes(void) {
-    return crypto_core_hsalsa20_CONSTBYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/hsalsa20/core_hsalsa20.c libsodium-1.0.12/src/libsodium/crypto_core/hsalsa20/core_hsalsa20.c
--- libsodium-1.0.11/src/libsodium/crypto_core/hsalsa20/core_hsalsa20.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_core/hsalsa20/core_hsalsa20.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,21 @@
+#include "crypto_core_hsalsa20.h"
+
+size_t
+crypto_core_hsalsa20_outputbytes(void) {
+    return crypto_core_hsalsa20_OUTPUTBYTES;
+}
+
+size_t
+crypto_core_hsalsa20_inputbytes(void) {
+    return crypto_core_hsalsa20_INPUTBYTES;
+}
+
+size_t
+crypto_core_hsalsa20_keybytes(void) {
+    return crypto_core_hsalsa20_KEYBYTES;
+}
+
+size_t
+crypto_core_hsalsa20_constbytes(void) {
+    return crypto_core_hsalsa20_CONSTBYTES;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/hsalsa20/ref2/core_hsalsa20.c libsodium-1.0.12/src/libsodium/crypto_core/hsalsa20/ref2/core_hsalsa20.c
--- libsodium-1.0.11/src/libsodium/crypto_core/hsalsa20/ref2/core_hsalsa20.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_core/hsalsa20/ref2/core_hsalsa20.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,100 +0,0 @@
-/*
-version 20080912
-D. J. Bernstein
-Public domain.
-*/
-
-#include <stdint.h>
-#include <stdlib.h>
-
-#include "crypto_core_hsalsa20.h"
-#include "private/common.h"
-
-#define ROUNDS 20
-#define U32C(v) (v##U)
-
-static uint32_t rotate(uint32_t u,int c)
-{
-  return (u << c) | (u >> (32 - c));
-}
-
-int crypto_core_hsalsa20(
-        unsigned char *out,
-  const unsigned char *in,
-  const unsigned char *k,
-  const unsigned char *c
-)
-{
-  uint32_t x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;
-  int i;
-
-  if (c == NULL) {
-    x0  = U32C(0x61707865);
-    x5  = U32C(0x3320646e);
-    x10 = U32C(0x79622d32);
-    x15 = U32C(0x6b206574);
-  } else {
-    x0  = LOAD32_LE(c +  0);
-    x5  = LOAD32_LE(c +  4);
-    x10 = LOAD32_LE(c +  8);
-    x15 = LOAD32_LE(c + 12);
-  }
-  x1 = LOAD32_LE(k + 0);
-  x2 = LOAD32_LE(k + 4);
-  x3 = LOAD32_LE(k + 8);
-  x4 = LOAD32_LE(k + 12);
-  x11 = LOAD32_LE(k + 16);
-  x12 = LOAD32_LE(k + 20);
-  x13 = LOAD32_LE(k + 24);
-  x14 = LOAD32_LE(k + 28);
-  x6 = LOAD32_LE(in + 0);
-  x7 = LOAD32_LE(in + 4);
-  x8 = LOAD32_LE(in + 8);
-  x9 = LOAD32_LE(in + 12);
-
-  for (i = ROUNDS;i > 0;i -= 2) {
-     x4 ^= rotate( x0+x12, 7);
-     x8 ^= rotate( x4+ x0, 9);
-    x12 ^= rotate( x8+ x4,13);
-     x0 ^= rotate(x12+ x8,18);
-     x9 ^= rotate( x5+ x1, 7);
-    x13 ^= rotate( x9+ x5, 9);
-     x1 ^= rotate(x13+ x9,13);
-     x5 ^= rotate( x1+x13,18);
-    x14 ^= rotate(x10+ x6, 7);
-     x2 ^= rotate(x14+x10, 9);
-     x6 ^= rotate( x2+x14,13);
-    x10 ^= rotate( x6+ x2,18);
-     x3 ^= rotate(x15+x11, 7);
-     x7 ^= rotate( x3+x15, 9);
-    x11 ^= rotate( x7+ x3,13);
-    x15 ^= rotate(x11+ x7,18);
-     x1 ^= rotate( x0+ x3, 7);
-     x2 ^= rotate( x1+ x0, 9);
-     x3 ^= rotate( x2+ x1,13);
-     x0 ^= rotate( x3+ x2,18);
-     x6 ^= rotate( x5+ x4, 7);
-     x7 ^= rotate( x6+ x5, 9);
-     x4 ^= rotate( x7+ x6,13);
-     x5 ^= rotate( x4+ x7,18);
-    x11 ^= rotate(x10+ x9, 7);
-     x8 ^= rotate(x11+x10, 9);
-     x9 ^= rotate( x8+x11,13);
-    x10 ^= rotate( x9+ x8,18);
-    x12 ^= rotate(x15+x14, 7);
-    x13 ^= rotate(x12+x15, 9);
-    x14 ^= rotate(x13+x12,13);
-    x15 ^= rotate(x14+x13,18);
-  }
-
-  STORE32_LE(out + 0,x0);
-  STORE32_LE(out + 4,x5);
-  STORE32_LE(out + 8,x10);
-  STORE32_LE(out + 12,x15);
-  STORE32_LE(out + 16,x6);
-  STORE32_LE(out + 20,x7);
-  STORE32_LE(out + 24,x8);
-  STORE32_LE(out + 28,x9);
-
-  return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c libsodium-1.0.12/src/libsodium/crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c
--- libsodium-1.0.11/src/libsodium/crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,95 @@
+/*
+version 20080912
+D. J. Bernstein
+Public domain.
+*/
+
+#include <stdint.h>
+#include <stdlib.h>
+
+#include "crypto_core_hsalsa20.h"
+#include "private/common.h"
+
+#define ROUNDS 20
+#define U32C(v) (v##U)
+
+int
+crypto_core_hsalsa20(unsigned char *out,
+                     const unsigned char *in,
+                     const unsigned char *k,
+                     const unsigned char *c)
+{
+    uint32_t x0, x1, x2, x3, x4, x5, x6, x7, x8,
+             x9, x10, x11, x12, x13, x14,  x15;
+    int      i;
+
+    if (c == NULL) {
+        x0 = U32C(0x61707865);
+        x5 = U32C(0x3320646e);
+        x10 = U32C(0x79622d32);
+        x15 = U32C(0x6b206574);
+    } else {
+        x0 = LOAD32_LE(c + 0);
+        x5 = LOAD32_LE(c + 4);
+        x10 = LOAD32_LE(c + 8);
+        x15 = LOAD32_LE(c + 12);
+    }
+    x1 = LOAD32_LE(k + 0);
+    x2 = LOAD32_LE(k + 4);
+    x3 = LOAD32_LE(k + 8);
+    x4 = LOAD32_LE(k + 12);
+    x11 = LOAD32_LE(k + 16);
+    x12 = LOAD32_LE(k + 20);
+    x13 = LOAD32_LE(k + 24);
+    x14 = LOAD32_LE(k + 28);
+    x6 = LOAD32_LE(in + 0);
+    x7 = LOAD32_LE(in + 4);
+    x8 = LOAD32_LE(in + 8);
+    x9 = LOAD32_LE(in + 12);
+
+    for (i = ROUNDS; i > 0; i -= 2) {
+        x4 ^= ROTL32(x0 + x12, 7);
+        x8 ^= ROTL32(x4 + x0, 9);
+        x12 ^= ROTL32(x8 + x4, 13);
+        x0 ^= ROTL32(x12 + x8, 18);
+        x9 ^= ROTL32(x5 + x1, 7);
+        x13 ^= ROTL32(x9 + x5, 9);
+        x1 ^= ROTL32(x13 + x9, 13);
+        x5 ^= ROTL32(x1 + x13, 18);
+        x14 ^= ROTL32(x10 + x6, 7);
+        x2 ^= ROTL32(x14 + x10, 9);
+        x6 ^= ROTL32(x2 + x14, 13);
+        x10 ^= ROTL32(x6 + x2, 18);
+        x3 ^= ROTL32(x15 + x11, 7);
+        x7 ^= ROTL32(x3 + x15, 9);
+        x11 ^= ROTL32(x7 + x3, 13);
+        x15 ^= ROTL32(x11 + x7, 18);
+        x1 ^= ROTL32(x0 + x3, 7);
+        x2 ^= ROTL32(x1 + x0, 9);
+        x3 ^= ROTL32(x2 + x1, 13);
+        x0 ^= ROTL32(x3 + x2, 18);
+        x6 ^= ROTL32(x5 + x4, 7);
+        x7 ^= ROTL32(x6 + x5, 9);
+        x4 ^= ROTL32(x7 + x6, 13);
+        x5 ^= ROTL32(x4 + x7, 18);
+        x11 ^= ROTL32(x10 + x9, 7);
+        x8 ^= ROTL32(x11 + x10, 9);
+        x9 ^= ROTL32(x8 + x11, 13);
+        x10 ^= ROTL32(x9 + x8, 18);
+        x12 ^= ROTL32(x15 + x14, 7);
+        x13 ^= ROTL32(x12 + x15, 9);
+        x14 ^= ROTL32(x13 + x12, 13);
+        x15 ^= ROTL32(x14 + x13, 18);
+    }
+
+    STORE32_LE(out + 0, x0);
+    STORE32_LE(out + 4, x5);
+    STORE32_LE(out + 8, x10);
+    STORE32_LE(out + 12, x15);
+    STORE32_LE(out + 16, x6);
+    STORE32_LE(out + 20, x7);
+    STORE32_LE(out + 24, x8);
+    STORE32_LE(out + 28, x9);
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/salsa/ref/core_salsa_ref.c libsodium-1.0.12/src/libsodium/crypto_core/salsa/ref/core_salsa_ref.c
--- libsodium-1.0.11/src/libsodium/crypto_core/salsa/ref/core_salsa_ref.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_core/salsa/ref/core_salsa_ref.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,195 @@
+
+#include <stdint.h>
+#include <stdlib.h>
+
+#include "crypto_core_salsa20.h"
+#include "crypto_core_salsa2012.h"
+#include "crypto_core_salsa208.h"
+#include "private/common.h"
+
+static void
+crypto_core_salsa(unsigned char *out, const unsigned char *in,
+                  const unsigned char *k, const unsigned char *c,
+                  const int rounds)
+{
+    uint32_t x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14,
+        x15;
+    uint32_t j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14,
+        j15;
+    int i;
+
+    j0  = x0  = 0x61707865;
+    j5  = x5  = 0x3320646e;
+    j10 = x10 = 0x79622d32;
+    j15 = x15 = 0x6b206574;
+    if (c != NULL) {
+        j0  = x0  = LOAD32_LE(c + 0);
+        j5  = x5  = LOAD32_LE(c + 4);
+        j10 = x10 = LOAD32_LE(c + 8);
+        j15 = x15 = LOAD32_LE(c + 12);
+    }
+    j1  = x1  = LOAD32_LE(k + 0);
+    j2  = x2  = LOAD32_LE(k + 4);
+    j3  = x3  = LOAD32_LE(k + 8);
+    j4  = x4  = LOAD32_LE(k + 12);
+    j11 = x11 = LOAD32_LE(k + 16);
+    j12 = x12 = LOAD32_LE(k + 20);
+    j13 = x13 = LOAD32_LE(k + 24);
+    j14 = x14 = LOAD32_LE(k + 28);
+
+    j6  = x6  = LOAD32_LE(in + 0);
+    j7  = x7  = LOAD32_LE(in + 4);
+    j8  = x8  = LOAD32_LE(in + 8);
+    j9  = x9  = LOAD32_LE(in + 12);
+
+    for (i = 0; i < rounds; i += 2) {
+        x4  ^= ROTL32(x0  + x12, 7);
+        x8  ^= ROTL32(x4  + x0, 9);
+        x12 ^= ROTL32(x8  + x4, 13);
+        x0  ^= ROTL32(x12 + x8, 18);
+        x9  ^= ROTL32(x5  + x1, 7);
+        x13 ^= ROTL32(x9  + x5, 9);
+        x1  ^= ROTL32(x13 + x9, 13);
+        x5  ^= ROTL32(x1  + x13, 18);
+        x14 ^= ROTL32(x10 + x6, 7);
+        x2  ^= ROTL32(x14 + x10, 9);
+        x6  ^= ROTL32(x2  + x14, 13);
+        x10 ^= ROTL32(x6  + x2, 18);
+        x3  ^= ROTL32(x15 + x11, 7);
+        x7  ^= ROTL32(x3  + x15, 9);
+        x11 ^= ROTL32(x7  + x3, 13);
+        x15 ^= ROTL32(x11 + x7, 18);
+        x1  ^= ROTL32(x0  + x3, 7);
+        x2  ^= ROTL32(x1  + x0, 9);
+        x3  ^= ROTL32(x2  + x1, 13);
+        x0  ^= ROTL32(x3  + x2, 18);
+        x6  ^= ROTL32(x5  + x4, 7);
+        x7  ^= ROTL32(x6  + x5, 9);
+        x4  ^= ROTL32(x7  + x6, 13);
+        x5  ^= ROTL32(x4  + x7, 18);
+        x11 ^= ROTL32(x10 + x9, 7);
+        x8  ^= ROTL32(x11 + x10, 9);
+        x9  ^= ROTL32(x8  + x11, 13);
+        x10 ^= ROTL32(x9  + x8, 18);
+        x12 ^= ROTL32(x15 + x14, 7);
+        x13 ^= ROTL32(x12 + x15, 9);
+        x14 ^= ROTL32(x13 + x12, 13);
+        x15 ^= ROTL32(x14 + x13, 18);
+    }
+    STORE32_LE(out + 0,  x0  + j0);
+    STORE32_LE(out + 4,  x1  + j1);
+    STORE32_LE(out + 8,  x2  + j2);
+    STORE32_LE(out + 12, x3  + j3);
+    STORE32_LE(out + 16, x4  + j4);
+    STORE32_LE(out + 20, x5  + j5);
+    STORE32_LE(out + 24, x6  + j6);
+    STORE32_LE(out + 28, x7  + j7);
+    STORE32_LE(out + 32, x8  + j8);
+    STORE32_LE(out + 36, x9  + j9);
+    STORE32_LE(out + 40, x10 + j10);
+    STORE32_LE(out + 44, x11 + j11);
+    STORE32_LE(out + 48, x12 + j12);
+    STORE32_LE(out + 52, x13 + j13);
+    STORE32_LE(out + 56, x14 + j14);
+    STORE32_LE(out + 60, x15 + j15);
+}
+
+int
+crypto_core_salsa20(unsigned char *out, const unsigned char *in,
+                    const unsigned char *k, const unsigned char *c)
+{
+    crypto_core_salsa(out, in, k, c, 20);
+    return 0;
+}
+
+size_t
+crypto_core_salsa20_outputbytes(void)
+{
+    return crypto_core_salsa20_OUTPUTBYTES;
+}
+
+size_t
+crypto_core_salsa20_inputbytes(void)
+{
+    return crypto_core_salsa20_INPUTBYTES;
+}
+
+size_t
+crypto_core_salsa20_keybytes(void)
+{
+    return crypto_core_salsa20_KEYBYTES;
+}
+
+size_t
+crypto_core_salsa20_constbytes(void)
+{
+    return crypto_core_salsa20_CONSTBYTES;
+}
+
+#ifndef MINIMAL
+
+int
+crypto_core_salsa2012(unsigned char *out, const unsigned char *in,
+                      const unsigned char *k, const unsigned char *c)
+{
+    crypto_core_salsa(out, in, k, c, 12);
+    return 0;
+}
+
+size_t
+crypto_core_salsa2012_outputbytes(void)
+{
+    return crypto_core_salsa2012_OUTPUTBYTES;
+}
+
+size_t
+crypto_core_salsa2012_inputbytes(void)
+{
+    return crypto_core_salsa2012_INPUTBYTES;
+}
+
+size_t
+crypto_core_salsa2012_keybytes(void)
+{
+    return crypto_core_salsa2012_KEYBYTES;
+}
+
+size_t
+crypto_core_salsa2012_constbytes(void)
+{
+    return crypto_core_salsa2012_CONSTBYTES;
+}
+
+int
+crypto_core_salsa208(unsigned char *out, const unsigned char *in,
+                     const unsigned char *k, const unsigned char *c)
+{
+    crypto_core_salsa(out, in, k, c, 8);
+    return 0;
+}
+
+size_t
+crypto_core_salsa208_outputbytes(void)
+{
+    return crypto_core_salsa208_OUTPUTBYTES;
+}
+
+size_t
+crypto_core_salsa208_inputbytes(void)
+{
+    return crypto_core_salsa208_INPUTBYTES;
+}
+
+size_t
+crypto_core_salsa208_keybytes(void)
+{
+    return crypto_core_salsa208_KEYBYTES;
+}
+
+size_t
+crypto_core_salsa208_constbytes(void)
+{
+    return crypto_core_salsa208_CONSTBYTES;
+}
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/salsa20/core_salsa20_api.c libsodium-1.0.12/src/libsodium/crypto_core/salsa20/core_salsa20_api.c
--- libsodium-1.0.11/src/libsodium/crypto_core/salsa20/core_salsa20_api.c	2016-02-27 13:22:08.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_core/salsa20/core_salsa20_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,21 +0,0 @@
-#include "crypto_core_salsa20.h"
-
-size_t
-crypto_core_salsa20_outputbytes(void) {
-    return crypto_core_salsa20_OUTPUTBYTES;
-}
-
-size_t
-crypto_core_salsa20_inputbytes(void) {
-    return crypto_core_salsa20_INPUTBYTES;
-}
-
-size_t
-crypto_core_salsa20_keybytes(void) {
-    return crypto_core_salsa20_KEYBYTES;
-}
-
-size_t
-crypto_core_salsa20_constbytes(void) {
-    return crypto_core_salsa20_CONSTBYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/salsa20/ref/core_salsa20.c libsodium-1.0.12/src/libsodium/crypto_core/salsa20/ref/core_salsa20.c
--- libsodium-1.0.11/src/libsodium/crypto_core/salsa20/ref/core_salsa20.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_core/salsa20/ref/core_salsa20.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,126 +0,0 @@
-/*
-version 20080912
-D. J. Bernstein
-Public domain.
-*/
-
-#include <stdint.h>
-#include <stdlib.h>
-
-#include "crypto_core_salsa20.h"
-#include "private/common.h"
-
-#define ROUNDS 20
-#define U32C(v) (v##U)
-
-static uint32_t rotate(uint32_t u,int c)
-{
-  return (u << c) | (u >> (32 - c));
-}
-
-int crypto_core_salsa20(
-        unsigned char *out,
-  const unsigned char *in,
-  const unsigned char *k,
-  const unsigned char *c
-)
-{
-  uint32_t x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;
-  uint32_t j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;
-  int i;
-
-  if (c == NULL) {
-    j0 = x0 = U32C(0x61707865);
-    j5 = x5 = U32C(0x3320646e);
-    j10 = x10 = U32C(0x79622d32);
-    j15 = x15 = U32C(0x6b206574);
-  } else {
-    j0 = x0 = LOAD32_LE(c + 0);
-    j5 = x5 = LOAD32_LE(c + 4);
-    j10 = x10 = LOAD32_LE(c + 8);
-    j15 = x15 = LOAD32_LE(c + 12);
-  }
-  j1 = x1 = LOAD32_LE(k + 0);
-  j2 = x2 = LOAD32_LE(k + 4);
-  j3 = x3 = LOAD32_LE(k + 8);
-  j4 = x4 = LOAD32_LE(k + 12);
-  j6 = x6 = LOAD32_LE(in + 0);
-  j7 = x7 = LOAD32_LE(in + 4);
-  j8 = x8 = LOAD32_LE(in + 8);
-  j9 = x9 = LOAD32_LE(in + 12);
-  j11 = x11 = LOAD32_LE(k + 16);
-  j12 = x12 = LOAD32_LE(k + 20);
-  j13 = x13 = LOAD32_LE(k + 24);
-  j14 = x14 = LOAD32_LE(k + 28);
-
-  for (i = ROUNDS;i > 0;i -= 2) {
-     x4 ^= rotate( x0+x12, 7);
-     x8 ^= rotate( x4+ x0, 9);
-    x12 ^= rotate( x8+ x4,13);
-     x0 ^= rotate(x12+ x8,18);
-     x9 ^= rotate( x5+ x1, 7);
-    x13 ^= rotate( x9+ x5, 9);
-     x1 ^= rotate(x13+ x9,13);
-     x5 ^= rotate( x1+x13,18);
-    x14 ^= rotate(x10+ x6, 7);
-     x2 ^= rotate(x14+x10, 9);
-     x6 ^= rotate( x2+x14,13);
-    x10 ^= rotate( x6+ x2,18);
-     x3 ^= rotate(x15+x11, 7);
-     x7 ^= rotate( x3+x15, 9);
-    x11 ^= rotate( x7+ x3,13);
-    x15 ^= rotate(x11+ x7,18);
-     x1 ^= rotate( x0+ x3, 7);
-     x2 ^= rotate( x1+ x0, 9);
-     x3 ^= rotate( x2+ x1,13);
-     x0 ^= rotate( x3+ x2,18);
-     x6 ^= rotate( x5+ x4, 7);
-     x7 ^= rotate( x6+ x5, 9);
-     x4 ^= rotate( x7+ x6,13);
-     x5 ^= rotate( x4+ x7,18);
-    x11 ^= rotate(x10+ x9, 7);
-     x8 ^= rotate(x11+x10, 9);
-     x9 ^= rotate( x8+x11,13);
-    x10 ^= rotate( x9+ x8,18);
-    x12 ^= rotate(x15+x14, 7);
-    x13 ^= rotate(x12+x15, 9);
-    x14 ^= rotate(x13+x12,13);
-    x15 ^= rotate(x14+x13,18);
-  }
-
-  x0 += j0;
-  x1 += j1;
-  x2 += j2;
-  x3 += j3;
-  x4 += j4;
-  x5 += j5;
-  x6 += j6;
-  x7 += j7;
-  x8 += j8;
-  x9 += j9;
-  x10 += j10;
-  x11 += j11;
-  x12 += j12;
-  x13 += j13;
-  x14 += j14;
-  x15 += j15;
-
-  STORE32_LE(out + 0,x0);
-  STORE32_LE(out + 4,x1);
-  STORE32_LE(out + 8,x2);
-  STORE32_LE(out + 12,x3);
-  STORE32_LE(out + 16,x4);
-  STORE32_LE(out + 20,x5);
-  STORE32_LE(out + 24,x6);
-  STORE32_LE(out + 28,x7);
-  STORE32_LE(out + 32,x8);
-  STORE32_LE(out + 36,x9);
-  STORE32_LE(out + 40,x10);
-  STORE32_LE(out + 44,x11);
-  STORE32_LE(out + 48,x12);
-  STORE32_LE(out + 52,x13);
-  STORE32_LE(out + 56,x14);
-  STORE32_LE(out + 60,x15);
-
-  return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/salsa2012/core_salsa2012_api.c libsodium-1.0.12/src/libsodium/crypto_core/salsa2012/core_salsa2012_api.c
--- libsodium-1.0.11/src/libsodium/crypto_core/salsa2012/core_salsa2012_api.c	2016-02-27 13:22:08.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_core/salsa2012/core_salsa2012_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,21 +0,0 @@
-#include "crypto_core_salsa2012.h"
-
-size_t
-crypto_core_salsa2012_outputbytes(void) {
-    return crypto_core_salsa2012_OUTPUTBYTES;
-}
-
-size_t
-crypto_core_salsa2012_inputbytes(void) {
-    return crypto_core_salsa2012_INPUTBYTES;
-}
-
-size_t
-crypto_core_salsa2012_keybytes(void) {
-    return crypto_core_salsa2012_KEYBYTES;
-}
-
-size_t
-crypto_core_salsa2012_constbytes(void) {
-    return crypto_core_salsa2012_CONSTBYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/salsa2012/ref/core_salsa2012.c libsodium-1.0.12/src/libsodium/crypto_core/salsa2012/ref/core_salsa2012.c
--- libsodium-1.0.11/src/libsodium/crypto_core/salsa2012/ref/core_salsa2012.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_core/salsa2012/ref/core_salsa2012.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,126 +0,0 @@
-/*
-version 20080913
-D. J. Bernstein
-Public domain.
-*/
-
-#include <stdint.h>
-#include <stdlib.h>
-
-#include "crypto_core_salsa2012.h"
-#include "private/common.h"
-
-#define ROUNDS 12
-#define U32C(v) (v##U)
-
-static uint32_t rotate(uint32_t u,int c)
-{
-  return (u << c) | (u >> (32 - c));
-}
-
-int crypto_core_salsa2012(
-        unsigned char *out,
-  const unsigned char *in,
-  const unsigned char *k,
-  const unsigned char *c
-)
-{
-  uint32_t x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;
-  uint32_t j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;
-  int i;
-
-  if (c == NULL) {
-    j0 = x0 = U32C(0x61707865);
-    j5 = x5 = U32C(0x3320646e);
-    j10 = x10 = U32C(0x79622d32);
-    j15 = x15 = U32C(0x6b206574);
-  } else {
-    j0 = x0 = LOAD32_LE(c + 0);
-    j5 = x5 = LOAD32_LE(c + 4);
-    j10 = x10 = LOAD32_LE(c + 8);
-    j15 = x15 = LOAD32_LE(c + 12);
-  }
-  j1 = x1 = LOAD32_LE(k + 0);
-  j2 = x2 = LOAD32_LE(k + 4);
-  j3 = x3 = LOAD32_LE(k + 8);
-  j4 = x4 = LOAD32_LE(k + 12);
-  j6 = x6 = LOAD32_LE(in + 0);
-  j7 = x7 = LOAD32_LE(in + 4);
-  j8 = x8 = LOAD32_LE(in + 8);
-  j9 = x9 = LOAD32_LE(in + 12);
-  j11 = x11 = LOAD32_LE(k + 16);
-  j12 = x12 = LOAD32_LE(k + 20);
-  j13 = x13 = LOAD32_LE(k + 24);
-  j14 = x14 = LOAD32_LE(k + 28);
-
-  for (i = ROUNDS;i > 0;i -= 2) {
-     x4 ^= rotate( x0+x12, 7);
-     x8 ^= rotate( x4+ x0, 9);
-    x12 ^= rotate( x8+ x4,13);
-     x0 ^= rotate(x12+ x8,18);
-     x9 ^= rotate( x5+ x1, 7);
-    x13 ^= rotate( x9+ x5, 9);
-     x1 ^= rotate(x13+ x9,13);
-     x5 ^= rotate( x1+x13,18);
-    x14 ^= rotate(x10+ x6, 7);
-     x2 ^= rotate(x14+x10, 9);
-     x6 ^= rotate( x2+x14,13);
-    x10 ^= rotate( x6+ x2,18);
-     x3 ^= rotate(x15+x11, 7);
-     x7 ^= rotate( x3+x15, 9);
-    x11 ^= rotate( x7+ x3,13);
-    x15 ^= rotate(x11+ x7,18);
-     x1 ^= rotate( x0+ x3, 7);
-     x2 ^= rotate( x1+ x0, 9);
-     x3 ^= rotate( x2+ x1,13);
-     x0 ^= rotate( x3+ x2,18);
-     x6 ^= rotate( x5+ x4, 7);
-     x7 ^= rotate( x6+ x5, 9);
-     x4 ^= rotate( x7+ x6,13);
-     x5 ^= rotate( x4+ x7,18);
-    x11 ^= rotate(x10+ x9, 7);
-     x8 ^= rotate(x11+x10, 9);
-     x9 ^= rotate( x8+x11,13);
-    x10 ^= rotate( x9+ x8,18);
-    x12 ^= rotate(x15+x14, 7);
-    x13 ^= rotate(x12+x15, 9);
-    x14 ^= rotate(x13+x12,13);
-    x15 ^= rotate(x14+x13,18);
-  }
-
-  x0 += j0;
-  x1 += j1;
-  x2 += j2;
-  x3 += j3;
-  x4 += j4;
-  x5 += j5;
-  x6 += j6;
-  x7 += j7;
-  x8 += j8;
-  x9 += j9;
-  x10 += j10;
-  x11 += j11;
-  x12 += j12;
-  x13 += j13;
-  x14 += j14;
-  x15 += j15;
-
-  STORE32_LE(out + 0,x0);
-  STORE32_LE(out + 4,x1);
-  STORE32_LE(out + 8,x2);
-  STORE32_LE(out + 12,x3);
-  STORE32_LE(out + 16,x4);
-  STORE32_LE(out + 20,x5);
-  STORE32_LE(out + 24,x6);
-  STORE32_LE(out + 28,x7);
-  STORE32_LE(out + 32,x8);
-  STORE32_LE(out + 36,x9);
-  STORE32_LE(out + 40,x10);
-  STORE32_LE(out + 44,x11);
-  STORE32_LE(out + 48,x12);
-  STORE32_LE(out + 52,x13);
-  STORE32_LE(out + 56,x14);
-  STORE32_LE(out + 60,x15);
-
-  return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/salsa208/core_salsa208_api.c libsodium-1.0.12/src/libsodium/crypto_core/salsa208/core_salsa208_api.c
--- libsodium-1.0.11/src/libsodium/crypto_core/salsa208/core_salsa208_api.c	2016-02-27 13:22:08.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_core/salsa208/core_salsa208_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,21 +0,0 @@
-#include "crypto_core_salsa208.h"
-
-size_t
-crypto_core_salsa208_outputbytes(void) {
-    return crypto_core_salsa208_OUTPUTBYTES;
-}
-
-size_t
-crypto_core_salsa208_inputbytes(void) {
-    return crypto_core_salsa208_INPUTBYTES;
-}
-
-size_t
-crypto_core_salsa208_keybytes(void) {
-    return crypto_core_salsa208_KEYBYTES;
-}
-
-size_t
-crypto_core_salsa208_constbytes(void) {
-    return crypto_core_salsa208_CONSTBYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_core/salsa208/ref/core_salsa208.c libsodium-1.0.12/src/libsodium/crypto_core/salsa208/ref/core_salsa208.c
--- libsodium-1.0.11/src/libsodium/crypto_core/salsa208/ref/core_salsa208.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_core/salsa208/ref/core_salsa208.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,126 +0,0 @@
-/*
-version 20080913
-D. J. Bernstein
-Public domain.
-*/
-
-#include <stdint.h>
-#include <stdlib.h>
-
-#include "crypto_core_salsa208.h"
-#include "private/common.h"
-
-#define ROUNDS 8
-#define U32C(v) (v##U)
-
-static uint32_t rotate(uint32_t u,int c)
-{
-  return (u << c) | (u >> (32 - c));
-}
-
-int crypto_core_salsa208(
-        unsigned char *out,
-  const unsigned char *in,
-  const unsigned char *k,
-  const unsigned char *c
-)
-{
-  uint32_t x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;
-  uint32_t j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;
-  int i;
-
-  if (c == NULL) {
-    j0 = x0 = U32C(0x61707865);
-    j5 = x5 = U32C(0x3320646e);
-    j10 = x10 = U32C(0x79622d32);
-    j15 = x15 = U32C(0x6b206574);
-  } else {
-    j0 = x0 = LOAD32_LE(c + 0);
-    j5 = x5 = LOAD32_LE(c + 4);
-    j10 = x10 = LOAD32_LE(c + 8);
-    j15 = x15 = LOAD32_LE(c + 12);
-  }
-  j1 = x1 = LOAD32_LE(k + 0);
-  j2 = x2 = LOAD32_LE(k + 4);
-  j3 = x3 = LOAD32_LE(k + 8);
-  j4 = x4 = LOAD32_LE(k + 12);
-  j6 = x6 = LOAD32_LE(in + 0);
-  j7 = x7 = LOAD32_LE(in + 4);
-  j8 = x8 = LOAD32_LE(in + 8);
-  j9 = x9 = LOAD32_LE(in + 12);
-  j11 = x11 = LOAD32_LE(k + 16);
-  j12 = x12 = LOAD32_LE(k + 20);
-  j13 = x13 = LOAD32_LE(k + 24);
-  j14 = x14 = LOAD32_LE(k + 28);
-
-  for (i = ROUNDS;i > 0;i -= 2) {
-     x4 ^= rotate( x0+x12, 7);
-     x8 ^= rotate( x4+ x0, 9);
-    x12 ^= rotate( x8+ x4,13);
-     x0 ^= rotate(x12+ x8,18);
-     x9 ^= rotate( x5+ x1, 7);
-    x13 ^= rotate( x9+ x5, 9);
-     x1 ^= rotate(x13+ x9,13);
-     x5 ^= rotate( x1+x13,18);
-    x14 ^= rotate(x10+ x6, 7);
-     x2 ^= rotate(x14+x10, 9);
-     x6 ^= rotate( x2+x14,13);
-    x10 ^= rotate( x6+ x2,18);
-     x3 ^= rotate(x15+x11, 7);
-     x7 ^= rotate( x3+x15, 9);
-    x11 ^= rotate( x7+ x3,13);
-    x15 ^= rotate(x11+ x7,18);
-     x1 ^= rotate( x0+ x3, 7);
-     x2 ^= rotate( x1+ x0, 9);
-     x3 ^= rotate( x2+ x1,13);
-     x0 ^= rotate( x3+ x2,18);
-     x6 ^= rotate( x5+ x4, 7);
-     x7 ^= rotate( x6+ x5, 9);
-     x4 ^= rotate( x7+ x6,13);
-     x5 ^= rotate( x4+ x7,18);
-    x11 ^= rotate(x10+ x9, 7);
-     x8 ^= rotate(x11+x10, 9);
-     x9 ^= rotate( x8+x11,13);
-    x10 ^= rotate( x9+ x8,18);
-    x12 ^= rotate(x15+x14, 7);
-    x13 ^= rotate(x12+x15, 9);
-    x14 ^= rotate(x13+x12,13);
-    x15 ^= rotate(x14+x13,18);
-  }
-
-  x0 += j0;
-  x1 += j1;
-  x2 += j2;
-  x3 += j3;
-  x4 += j4;
-  x5 += j5;
-  x6 += j6;
-  x7 += j7;
-  x8 += j8;
-  x9 += j9;
-  x10 += j10;
-  x11 += j11;
-  x12 += j12;
-  x13 += j13;
-  x14 += j14;
-  x15 += j15;
-
-  STORE32_LE(out + 0,x0);
-  STORE32_LE(out + 4,x1);
-  STORE32_LE(out + 8,x2);
-  STORE32_LE(out + 12,x3);
-  STORE32_LE(out + 16,x4);
-  STORE32_LE(out + 20,x5);
-  STORE32_LE(out + 24,x6);
-  STORE32_LE(out + 28,x7);
-  STORE32_LE(out + 32,x8);
-  STORE32_LE(out + 36,x9);
-  STORE32_LE(out + 40,x10);
-  STORE32_LE(out + 44,x11);
-  STORE32_LE(out + 48,x12);
-  STORE32_LE(out + 52,x13);
-  STORE32_LE(out + 56,x14);
-  STORE32_LE(out + 60,x15);
-
-  return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/generichash_blake2_api.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/generichash_blake2_api.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/generichash_blake2_api.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/generichash_blake2_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,48 +0,0 @@
-#include "crypto_generichash_blake2b.h"
-
-size_t
-crypto_generichash_blake2b_bytes_min(void) {
-    return crypto_generichash_blake2b_BYTES_MIN;
-}
-
-size_t
-crypto_generichash_blake2b_bytes_max(void) {
-    return crypto_generichash_blake2b_BYTES_MAX;
-}
-
-size_t
-crypto_generichash_blake2b_bytes(void) {
-    return crypto_generichash_blake2b_BYTES;
-}
-
-size_t
-crypto_generichash_blake2b_keybytes_min(void) {
-    return crypto_generichash_blake2b_KEYBYTES_MIN;
-}
-
-size_t
-crypto_generichash_blake2b_keybytes_max(void) {
-    return crypto_generichash_blake2b_KEYBYTES_MAX;
-}
-
-size_t
-crypto_generichash_blake2b_keybytes(void) {
-    return crypto_generichash_blake2b_KEYBYTES;
-}
-
-size_t
-crypto_generichash_blake2b_saltbytes(void) {
-    return crypto_generichash_blake2b_SALTBYTES;
-}
-
-size_t
-crypto_generichash_blake2b_personalbytes(void) {
-    return crypto_generichash_blake2b_PERSONALBYTES;
-}
-
-size_t
-crypto_generichash_blake2b_statebytes(void)
-{
-    return (sizeof(crypto_generichash_blake2b_state) + (size_t) 63U)
-        & ~(size_t) 63U;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-avx2.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-avx2.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-avx2.c	2016-07-24 20:03:51.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-avx2.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,45 +0,0 @@
-
-#define BLAKE2_USE_SSSE3
-#define BLAKE2_USE_SSE41
-#define BLAKE2_USE_AVX2
-
-#include <stdint.h>
-#include <string.h>
-
-#if (defined(HAVE_AVX2INTRIN_H) && defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64)) && _MSC_VER >= 1700)
-
-#pragma GCC target("sse2")
-#pragma GCC target("ssse3")
-#pragma GCC target("sse4.1")
-#pragma GCC target("avx2")
-
-#include <emmintrin.h>
-#include <tmmintrin.h>
-#include <smmintrin.h>
-#include <immintrin.h>
-
-#include "blake2.h"
-#include "blake2-impl.h"
-#include "blake2b-compress-avx2.h"
-
-CRYPTO_ALIGN(64) static const uint64_t blake2b_IV[8] =
-{
-    0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL,
-    0x3c6ef372fe94f82bULL, 0xa54ff53a5f1d36f1ULL,
-    0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
-    0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
-};
-
-int blake2b_compress_avx2( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] )
-{
-    __m256i a = LOADU(&S->h[0]);
-    __m256i b = LOADU(&S->h[4]);
-    BLAKE2B_COMPRESS_V1(a, b, block, S->t[0], S->t[1], S->f[0], S->f[1]);
-    STOREU(&S->h[0], a);
-    STOREU(&S->h[4], b);
-
-    return 0;
-}
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-avx2.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-avx2.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-avx2.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-avx2.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,123 +0,0 @@
-
-#ifndef blake2b_compress_avx2_H
-#define blake2b_compress_avx2_H
-
-#define LOAD128(p)     _mm_load_si128((__m128i *)(p))
-#define STORE128(p, r) _mm_store_si128((__m128i *)(p), r)
-
-#define LOADU128(p)     _mm_loadu_si128((__m128i *)(p))
-#define STOREU128(p, r) _mm_storeu_si128((__m128i *)(p), r)
-
-#define LOAD(p)     _mm256_load_si256((__m256i *)(p))
-#define STORE(p, r) _mm256_store_si256((__m256i *)(p), r)
-
-#define LOADU(p)     _mm256_loadu_si256((__m256i *)(p))
-#define STOREU(p, r) _mm256_storeu_si256((__m256i *)(p), r)
-
-static inline uint64_t LOADU64(const void *p) {
-    uint64_t v;
-    memcpy(&v, p, sizeof v);
-    return v;
-}
-
-#define ROTATE16 _mm256_setr_epi8(2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9, \
-                                  2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9)
-
-#define ROTATE24 _mm256_setr_epi8(3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10, \
-                                  3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10)
-
-#define ADD(a, b) _mm256_add_epi64(a, b)
-#define SUB(a, b) _mm256_sub_epi64(a, b)
-
-#define XOR(a, b) _mm256_xor_si256(a, b)
-#define AND(a, b) _mm256_and_si256(a, b)
-#define  OR(a, b) _mm256_or_si256(a, b)
-
-#define ROT32(x) _mm256_shuffle_epi32((x), _MM_SHUFFLE(2, 3, 0, 1))
-#define ROT24(x) _mm256_shuffle_epi8((x), ROTATE24)
-#define ROT16(x) _mm256_shuffle_epi8((x), ROTATE16)
-#define ROT63(x) _mm256_or_si256(_mm256_srli_epi64((x), 63), ADD((x), (x)))
-
-#define BLAKE2B_G1_V1(a, b, c, d, m) do {       \
-    a = ADD(a, m);                              \
-    a = ADD(a, b); d = XOR(d, a); d = ROT32(d); \
-    c = ADD(c, d); b = XOR(b, c); b = ROT24(b); \
-} while(0)
-
-#define BLAKE2B_G2_V1(a, b, c, d, m) do {       \
-    a = ADD(a, m);                              \
-    a = ADD(a, b); d = XOR(d, a); d = ROT16(d); \
-    c = ADD(c, d); b = XOR(b, c); b = ROT63(b); \
-} while(0)
-
-#define BLAKE2B_DIAG_V1(a, b, c, d) do {                   \
-    d = _mm256_permute4x64_epi64(d, _MM_SHUFFLE(2,1,0,3)); \
-    c = _mm256_permute4x64_epi64(c, _MM_SHUFFLE(1,0,3,2)); \
-    b = _mm256_permute4x64_epi64(b, _MM_SHUFFLE(0,3,2,1)); \
-} while(0)
-
-#define BLAKE2B_UNDIAG_V1(a, b, c, d) do {                 \
-    d = _mm256_permute4x64_epi64(d, _MM_SHUFFLE(0,3,2,1)); \
-    c = _mm256_permute4x64_epi64(c, _MM_SHUFFLE(1,0,3,2)); \
-    b = _mm256_permute4x64_epi64(b, _MM_SHUFFLE(2,1,0,3)); \
-} while(0)
-
-#include "blake2b-load-avx2.h"
-
-#define BLAKE2B_ROUND_V1(a, b, c, d, r, m) do { \
-    __m256i b0;                                 \
-    BLAKE2B_LOAD_MSG_ ##r ##_1(b0);             \
-    BLAKE2B_G1_V1(a, b, c, d, b0);              \
-    BLAKE2B_LOAD_MSG_ ##r ##_2(b0);             \
-    BLAKE2B_G2_V1(a, b, c, d, b0);              \
-    BLAKE2B_DIAG_V1(a, b, c, d);                \
-    BLAKE2B_LOAD_MSG_ ##r ##_3(b0);             \
-    BLAKE2B_G1_V1(a, b, c, d, b0);              \
-    BLAKE2B_LOAD_MSG_ ##r ##_4(b0);             \
-    BLAKE2B_G2_V1(a, b, c, d, b0);              \
-    BLAKE2B_UNDIAG_V1(a, b, c, d);              \
-} while(0)
-
-#define BLAKE2B_ROUNDS_V1(a, b, c, d, m) do { \
-    BLAKE2B_ROUND_V1(a, b, c, d,  0, (m));    \
-    BLAKE2B_ROUND_V1(a, b, c, d,  1, (m));    \
-    BLAKE2B_ROUND_V1(a, b, c, d,  2, (m));    \
-    BLAKE2B_ROUND_V1(a, b, c, d,  3, (m));    \
-    BLAKE2B_ROUND_V1(a, b, c, d,  4, (m));    \
-    BLAKE2B_ROUND_V1(a, b, c, d,  5, (m));    \
-    BLAKE2B_ROUND_V1(a, b, c, d,  6, (m));    \
-    BLAKE2B_ROUND_V1(a, b, c, d,  7, (m));    \
-    BLAKE2B_ROUND_V1(a, b, c, d,  8, (m));    \
-    BLAKE2B_ROUND_V1(a, b, c, d,  9, (m));    \
-    BLAKE2B_ROUND_V1(a, b, c, d, 10, (m));    \
-    BLAKE2B_ROUND_V1(a, b, c, d, 11, (m));    \
-} while(0)
-
-#define DECLARE_MESSAGE_WORDS(m)                                         \
-    const __m256i m0 = _mm256_broadcastsi128_si256(LOADU128((m) +   0)); \
-    const __m256i m1 = _mm256_broadcastsi128_si256(LOADU128((m) +  16)); \
-    const __m256i m2 = _mm256_broadcastsi128_si256(LOADU128((m) +  32)); \
-    const __m256i m3 = _mm256_broadcastsi128_si256(LOADU128((m) +  48)); \
-    const __m256i m4 = _mm256_broadcastsi128_si256(LOADU128((m) +  64)); \
-    const __m256i m5 = _mm256_broadcastsi128_si256(LOADU128((m) +  80)); \
-    const __m256i m6 = _mm256_broadcastsi128_si256(LOADU128((m) +  96)); \
-    const __m256i m7 = _mm256_broadcastsi128_si256(LOADU128((m) + 112)); \
-    __m256i t0, t1;
-
-#define BLAKE2B_COMPRESS_V1(a, b, m, t0, t1, f0, f1) do { \
-    DECLARE_MESSAGE_WORDS(m)                              \
-    const __m256i iv0 = a;                                \
-    const __m256i iv1 = b;                                \
-    __m256i c = LOAD(&blake2b_IV[0]);                     \
-    __m256i d = XOR(                                      \
-      LOAD(&blake2b_IV[4]),                               \
-      _mm256_set_epi64x(f1, f0, t1, t0)                   \
-    );                                                    \
-    BLAKE2B_ROUNDS_V1(a, b, c, d, m);                     \
-    a = XOR(a, c);                                        \
-    b = XOR(b, d);                                        \
-    a = XOR(a, iv0);                                      \
-    b = XOR(b, iv1);                                      \
-} while(0)
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ref.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ref.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ref.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ref.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,94 +0,0 @@
-
-#include <stdint.h>
-#include <string.h>
-
-#include "blake2.h"
-#include "blake2-impl.h"
-#include "private/common.h"
-
-CRYPTO_ALIGN(64) static const uint64_t blake2b_IV[8] =
-{
-  0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL,
-  0x3c6ef372fe94f82bULL, 0xa54ff53a5f1d36f1ULL,
-  0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
-  0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
-};
-
-static const uint8_t blake2b_sigma[12][16] =
-{
-  {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
-  { 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 } ,
-  { 11,  8, 12,  0,  5,  2, 15, 13, 10, 14,  3,  6,  7,  1,  9,  4 } ,
-  {  7,  9,  3,  1, 13, 12, 11, 14,  2,  6,  5, 10,  4,  0, 15,  8 } ,
-  {  9,  0,  5,  7,  2,  4, 10, 15, 14,  1, 11, 12,  6,  8,  3, 13 } ,
-  {  2, 12,  6, 10,  0, 11,  8,  3,  4, 13,  7,  5, 15, 14,  1,  9 } ,
-  { 12,  5,  1, 15, 14, 13,  4, 10,  0,  7,  6,  3,  9,  2,  8, 11 } ,
-  { 13, 11,  7, 14, 12,  1,  3,  9,  5,  0, 15,  4,  8,  6,  2, 10 } ,
-  {  6, 15, 14,  9, 11,  3,  0,  8, 12,  2, 13,  7,  1,  4, 10,  5 } ,
-  { 10,  2,  8,  4,  7,  6,  1,  5, 15, 11,  9, 14,  3, 12, 13 , 0 } ,
-  {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
-  { 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 }
-};
-
-int blake2b_compress_ref( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] )
-{
-  uint64_t m[16];
-  uint64_t v[16];
-  int      i;
-
-  for( i = 0; i < 16; ++i )
-    m[i] = LOAD64_LE( block + i * sizeof( m[i] ) );
-
-  for( i = 0; i < 8; ++i )
-    v[i] = S->h[i];
-
-  v[ 8] = blake2b_IV[0];
-  v[ 9] = blake2b_IV[1];
-  v[10] = blake2b_IV[2];
-  v[11] = blake2b_IV[3];
-  v[12] = S->t[0] ^ blake2b_IV[4];
-  v[13] = S->t[1] ^ blake2b_IV[5];
-  v[14] = S->f[0] ^ blake2b_IV[6];
-  v[15] = S->f[1] ^ blake2b_IV[7];
-#define G(r,i,a,b,c,d) \
-  do { \
-    a = a + b + m[blake2b_sigma[r][2*i+0]]; \
-    d = rotr64(d ^ a, 32); \
-    c = c + d; \
-    b = rotr64(b ^ c, 24); \
-    a = a + b + m[blake2b_sigma[r][2*i+1]]; \
-    d = rotr64(d ^ a, 16); \
-    c = c + d; \
-    b = rotr64(b ^ c, 63); \
-  } while(0)
-#define ROUND(r)  \
-  do { \
-    G(r,0,v[ 0],v[ 4],v[ 8],v[12]); \
-    G(r,1,v[ 1],v[ 5],v[ 9],v[13]); \
-    G(r,2,v[ 2],v[ 6],v[10],v[14]); \
-    G(r,3,v[ 3],v[ 7],v[11],v[15]); \
-    G(r,4,v[ 0],v[ 5],v[10],v[15]); \
-    G(r,5,v[ 1],v[ 6],v[11],v[12]); \
-    G(r,6,v[ 2],v[ 7],v[ 8],v[13]); \
-    G(r,7,v[ 3],v[ 4],v[ 9],v[14]); \
-  } while(0)
-  ROUND( 0 );
-  ROUND( 1 );
-  ROUND( 2 );
-  ROUND( 3 );
-  ROUND( 4 );
-  ROUND( 5 );
-  ROUND( 6 );
-  ROUND( 7 );
-  ROUND( 8 );
-  ROUND( 9 );
-  ROUND( 10 );
-  ROUND( 11 );
-
-  for( i = 0; i < 8; ++i )
-    S->h[i] = S->h[i] ^ v[i] ^ v[i + 8];
-
-#undef G
-#undef ROUND
-  return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-sse41.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-sse41.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-sse41.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-sse41.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,80 +0,0 @@
-
-#define BLAKE2_USE_SSSE3
-#define BLAKE2_USE_SSE41
-
-#include <stdint.h>
-#include <string.h>
-
-#if (defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
-
-#pragma GCC target("sse2")
-#pragma GCC target("ssse3")
-#pragma GCC target("sse4.1")
-
-#include <emmintrin.h>
-#include <tmmintrin.h>
-#include <smmintrin.h>
-
-#include "blake2.h"
-#include "blake2-impl.h"
-#include "blake2b-compress-sse41.h"
-
-CRYPTO_ALIGN(64) static const uint64_t blake2b_IV[8] =
-{
-  0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL,
-  0x3c6ef372fe94f82bULL, 0xa54ff53a5f1d36f1ULL,
-  0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
-  0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
-};
-
-int blake2b_compress_sse41( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] )
-{
-  __m128i row1l, row1h;
-  __m128i row2l, row2h;
-  __m128i row3l, row3h;
-  __m128i row4l, row4h;
-  __m128i b0, b1;
-  __m128i t0, t1;
-  const __m128i r16 = _mm_setr_epi8( 2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9 );
-  const __m128i r24 = _mm_setr_epi8( 3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10 );
-  const __m128i m0 = LOADU( block + 00 );
-  const __m128i m1 = LOADU( block + 16 );
-  const __m128i m2 = LOADU( block + 32 );
-  const __m128i m3 = LOADU( block + 48 );
-  const __m128i m4 = LOADU( block + 64 );
-  const __m128i m5 = LOADU( block + 80 );
-  const __m128i m6 = LOADU( block + 96 );
-  const __m128i m7 = LOADU( block + 112 );
-  row1l = LOADU( &S->h[0] );
-  row1h = LOADU( &S->h[2] );
-  row2l = LOADU( &S->h[4] );
-  row2h = LOADU( &S->h[6] );
-  row3l = LOADU( &blake2b_IV[0] );
-  row3h = LOADU( &blake2b_IV[2] );
-  row4l = _mm_xor_si128( LOADU( &blake2b_IV[4] ), LOADU( &S->t[0] ) );
-  row4h = _mm_xor_si128( LOADU( &blake2b_IV[6] ), LOADU( &S->f[0] ) );
-  ROUND( 0 );
-  ROUND( 1 );
-  ROUND( 2 );
-  ROUND( 3 );
-  ROUND( 4 );
-  ROUND( 5 );
-  ROUND( 6 );
-  ROUND( 7 );
-  ROUND( 8 );
-  ROUND( 9 );
-  ROUND( 10 );
-  ROUND( 11 );
-  row1l = _mm_xor_si128( row3l, row1l );
-  row1h = _mm_xor_si128( row3h, row1h );
-  STOREU( &S->h[0], _mm_xor_si128( LOADU( &S->h[0] ), row1l ) );
-  STOREU( &S->h[2], _mm_xor_si128( LOADU( &S->h[2] ), row1h ) );
-  row2l = _mm_xor_si128( row4l, row2l );
-  row2h = _mm_xor_si128( row4h, row2h );
-  STOREU( &S->h[4], _mm_xor_si128( LOADU( &S->h[4] ), row2l ) );
-  STOREU( &S->h[6], _mm_xor_si128( LOADU( &S->h[6] ), row2h ) );
-  return 0;
-}
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-sse41.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-sse41.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-sse41.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-sse41.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,97 +0,0 @@
-
-#ifndef blake2b_compress_sse41_H
-#define blake2b_compress_sse41_H
-
-#define LOADU(p)  _mm_loadu_si128( (const __m128i *)(const void *)(p) )
-#define STOREU(p,r) _mm_storeu_si128((__m128i *)(void *)(p), r)
-
-#define _mm_roti_epi64(x, c) \
-    (-(c) == 32) ? _mm_shuffle_epi32((x), _MM_SHUFFLE(2,3,0,1))  \
-    : (-(c) == 24) ? _mm_shuffle_epi8((x), r24) \
-    : (-(c) == 16) ? _mm_shuffle_epi8((x), r16) \
-    : (-(c) == 63) ? _mm_xor_si128(_mm_srli_epi64((x), -(c)), _mm_add_epi64((x), (x)))  \
-    : _mm_xor_si128(_mm_srli_epi64((x), -(c)), _mm_slli_epi64((x), 64-(-(c))))
-
-#define G1(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1) \
-  row1l = _mm_add_epi64(_mm_add_epi64(row1l, b0), row2l); \
-  row1h = _mm_add_epi64(_mm_add_epi64(row1h, b1), row2h); \
-  \
-  row4l = _mm_xor_si128(row4l, row1l); \
-  row4h = _mm_xor_si128(row4h, row1h); \
-  \
-  row4l = _mm_roti_epi64(row4l, -32); \
-  row4h = _mm_roti_epi64(row4h, -32); \
-  \
-  row3l = _mm_add_epi64(row3l, row4l); \
-  row3h = _mm_add_epi64(row3h, row4h); \
-  \
-  row2l = _mm_xor_si128(row2l, row3l); \
-  row2h = _mm_xor_si128(row2h, row3h); \
-  \
-  row2l = _mm_roti_epi64(row2l, -24); \
-  row2h = _mm_roti_epi64(row2h, -24); \
-
-#define G2(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1) \
-  row1l = _mm_add_epi64(_mm_add_epi64(row1l, b0), row2l); \
-  row1h = _mm_add_epi64(_mm_add_epi64(row1h, b1), row2h); \
-  \
-  row4l = _mm_xor_si128(row4l, row1l); \
-  row4h = _mm_xor_si128(row4h, row1h); \
-  \
-  row4l = _mm_roti_epi64(row4l, -16); \
-  row4h = _mm_roti_epi64(row4h, -16); \
-  \
-  row3l = _mm_add_epi64(row3l, row4l); \
-  row3h = _mm_add_epi64(row3h, row4h); \
-  \
-  row2l = _mm_xor_si128(row2l, row3l); \
-  row2h = _mm_xor_si128(row2h, row3h); \
-  \
-  row2l = _mm_roti_epi64(row2l, -63); \
-  row2h = _mm_roti_epi64(row2h, -63); \
-
-#define DIAGONALIZE(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h) \
-  t0 = _mm_alignr_epi8(row2h, row2l, 8); \
-  t1 = _mm_alignr_epi8(row2l, row2h, 8); \
-  row2l = t0; \
-  row2h = t1; \
-  \
-  t0 = row3l; \
-  row3l = row3h; \
-  row3h = t0;    \
-  \
-  t0 = _mm_alignr_epi8(row4h, row4l, 8); \
-  t1 = _mm_alignr_epi8(row4l, row4h, 8); \
-  row4l = t1; \
-  row4h = t0;
-
-#define UNDIAGONALIZE(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h) \
-  t0 = _mm_alignr_epi8(row2l, row2h, 8); \
-  t1 = _mm_alignr_epi8(row2h, row2l, 8); \
-  row2l = t0; \
-  row2h = t1; \
-  \
-  t0 = row3l; \
-  row3l = row3h; \
-  row3h = t0; \
-  \
-  t0 = _mm_alignr_epi8(row4l, row4h, 8); \
-  t1 = _mm_alignr_epi8(row4h, row4l, 8); \
-  row4l = t1; \
-  row4h = t0;
-
-#include "blake2b-load-sse41.h"
-
-#define ROUND(r) \
-  LOAD_MSG_ ##r ##_1(b0, b1); \
-  G1(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1); \
-  LOAD_MSG_ ##r ##_2(b0, b1); \
-  G2(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1); \
-  DIAGONALIZE(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h); \
-  LOAD_MSG_ ##r ##_3(b0, b1); \
-  G1(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1); \
-  LOAD_MSG_ ##r ##_4(b0, b1); \
-  G2(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1); \
-  UNDIAGONALIZE(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h);
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ssse3.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ssse3.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ssse3.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ssse3.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,87 +0,0 @@
-
-#include <stdint.h>
-#include <string.h>
-
-#if (defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64)))
-
-#pragma GCC target("sse2")
-#pragma GCC target("ssse3")
-
-#ifdef _MSC_VER
-# include <intrin.h> /* for _mm_set_epi64x */
-#endif
-#include <emmintrin.h>
-#include <tmmintrin.h>
-
-#include "blake2.h"
-#include "blake2-impl.h"
-#include "blake2b-compress-ssse3.h"
-
-CRYPTO_ALIGN(64) static const uint64_t blake2b_IV[8] =
-{
-  0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL,
-  0x3c6ef372fe94f82bULL, 0xa54ff53a5f1d36f1ULL,
-  0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
-  0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
-};
-
-int blake2b_compress_ssse3( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] )
-{
-  __m128i row1l, row1h;
-  __m128i row2l, row2h;
-  __m128i row3l, row3h;
-  __m128i row4l, row4h;
-  __m128i b0, b1;
-  __m128i t0, t1;
-  const __m128i r16 = _mm_setr_epi8( 2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9 );
-  const __m128i r24 = _mm_setr_epi8( 3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10 );
-  const uint64_t  m0 = ( ( uint64_t * )block )[ 0];
-  const uint64_t  m1 = ( ( uint64_t * )block )[ 1];
-  const uint64_t  m2 = ( ( uint64_t * )block )[ 2];
-  const uint64_t  m3 = ( ( uint64_t * )block )[ 3];
-  const uint64_t  m4 = ( ( uint64_t * )block )[ 4];
-  const uint64_t  m5 = ( ( uint64_t * )block )[ 5];
-  const uint64_t  m6 = ( ( uint64_t * )block )[ 6];
-  const uint64_t  m7 = ( ( uint64_t * )block )[ 7];
-  const uint64_t  m8 = ( ( uint64_t * )block )[ 8];
-  const uint64_t  m9 = ( ( uint64_t * )block )[ 9];
-  const uint64_t m10 = ( ( uint64_t * )block )[10];
-  const uint64_t m11 = ( ( uint64_t * )block )[11];
-  const uint64_t m12 = ( ( uint64_t * )block )[12];
-  const uint64_t m13 = ( ( uint64_t * )block )[13];
-  const uint64_t m14 = ( ( uint64_t * )block )[14];
-  const uint64_t m15 = ( ( uint64_t * )block )[15];
-
-  row1l = LOADU( &S->h[0] );
-  row1h = LOADU( &S->h[2] );
-  row2l = LOADU( &S->h[4] );
-  row2h = LOADU( &S->h[6] );
-  row3l = LOADU( &blake2b_IV[0] );
-  row3h = LOADU( &blake2b_IV[2] );
-  row4l = _mm_xor_si128( LOADU( &blake2b_IV[4] ), LOADU( &S->t[0] ) );
-  row4h = _mm_xor_si128( LOADU( &blake2b_IV[6] ), LOADU( &S->f[0] ) );
-  ROUND( 0 );
-  ROUND( 1 );
-  ROUND( 2 );
-  ROUND( 3 );
-  ROUND( 4 );
-  ROUND( 5 );
-  ROUND( 6 );
-  ROUND( 7 );
-  ROUND( 8 );
-  ROUND( 9 );
-  ROUND( 10 );
-  ROUND( 11 );
-  row1l = _mm_xor_si128( row3l, row1l );
-  row1h = _mm_xor_si128( row3h, row1h );
-  STOREU( &S->h[0], _mm_xor_si128( LOADU( &S->h[0] ), row1l ) );
-  STOREU( &S->h[2], _mm_xor_si128( LOADU( &S->h[2] ), row1h ) );
-  row2l = _mm_xor_si128( row4l, row2l );
-  row2h = _mm_xor_si128( row4h, row2h );
-  STOREU( &S->h[4], _mm_xor_si128( LOADU( &S->h[4] ), row2l ) );
-  STOREU( &S->h[6], _mm_xor_si128( LOADU( &S->h[6] ), row2h ) );
-  return 0;
-}
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ssse3.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ssse3.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ssse3.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-compress-ssse3.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,97 +0,0 @@
-
-#ifndef blake2b_compress_ssse3_H
-#define blake2b_compress_ssse3_H
-
-#define LOADU(p)  _mm_loadu_si128( (const __m128i *)(const void *)(p) )
-#define STOREU(p,r) _mm_storeu_si128((__m128i *)(void *)(p), r)
-
-#define _mm_roti_epi64(x, c) \
-    (-(c) == 32) ? _mm_shuffle_epi32((x), _MM_SHUFFLE(2,3,0,1))  \
-    : (-(c) == 24) ? _mm_shuffle_epi8((x), r24) \
-    : (-(c) == 16) ? _mm_shuffle_epi8((x), r16) \
-    : (-(c) == 63) ? _mm_xor_si128(_mm_srli_epi64((x), -(c)), _mm_add_epi64((x), (x)))  \
-    : _mm_xor_si128(_mm_srli_epi64((x), -(c)), _mm_slli_epi64((x), 64-(-(c))))
-
-#define G1(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1) \
-  row1l = _mm_add_epi64(_mm_add_epi64(row1l, b0), row2l); \
-  row1h = _mm_add_epi64(_mm_add_epi64(row1h, b1), row2h); \
-  \
-  row4l = _mm_xor_si128(row4l, row1l); \
-  row4h = _mm_xor_si128(row4h, row1h); \
-  \
-  row4l = _mm_roti_epi64(row4l, -32); \
-  row4h = _mm_roti_epi64(row4h, -32); \
-  \
-  row3l = _mm_add_epi64(row3l, row4l); \
-  row3h = _mm_add_epi64(row3h, row4h); \
-  \
-  row2l = _mm_xor_si128(row2l, row3l); \
-  row2h = _mm_xor_si128(row2h, row3h); \
-  \
-  row2l = _mm_roti_epi64(row2l, -24); \
-  row2h = _mm_roti_epi64(row2h, -24); \
-
-#define G2(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1) \
-  row1l = _mm_add_epi64(_mm_add_epi64(row1l, b0), row2l); \
-  row1h = _mm_add_epi64(_mm_add_epi64(row1h, b1), row2h); \
-  \
-  row4l = _mm_xor_si128(row4l, row1l); \
-  row4h = _mm_xor_si128(row4h, row1h); \
-  \
-  row4l = _mm_roti_epi64(row4l, -16); \
-  row4h = _mm_roti_epi64(row4h, -16); \
-  \
-  row3l = _mm_add_epi64(row3l, row4l); \
-  row3h = _mm_add_epi64(row3h, row4h); \
-  \
-  row2l = _mm_xor_si128(row2l, row3l); \
-  row2h = _mm_xor_si128(row2h, row3h); \
-  \
-  row2l = _mm_roti_epi64(row2l, -63); \
-  row2h = _mm_roti_epi64(row2h, -63); \
-
-#define DIAGONALIZE(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h) \
-  t0 = _mm_alignr_epi8(row2h, row2l, 8); \
-  t1 = _mm_alignr_epi8(row2l, row2h, 8); \
-  row2l = t0; \
-  row2h = t1; \
-  \
-  t0 = row3l; \
-  row3l = row3h; \
-  row3h = t0;    \
-  \
-  t0 = _mm_alignr_epi8(row4h, row4l, 8); \
-  t1 = _mm_alignr_epi8(row4l, row4h, 8); \
-  row4l = t1; \
-  row4h = t0;
-
-#define UNDIAGONALIZE(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h) \
-  t0 = _mm_alignr_epi8(row2l, row2h, 8); \
-  t1 = _mm_alignr_epi8(row2h, row2l, 8); \
-  row2l = t0; \
-  row2h = t1; \
-  \
-  t0 = row3l; \
-  row3l = row3h; \
-  row3h = t0; \
-  \
-  t0 = _mm_alignr_epi8(row4l, row4h, 8); \
-  t1 = _mm_alignr_epi8(row4h, row4l, 8); \
-  row4l = t1; \
-  row4h = t0;
-
-#include "blake2b-load-sse2.h"
-
-#define ROUND(r) \
-  LOAD_MSG_ ##r ##_1(b0, b1); \
-  G1(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1); \
-  LOAD_MSG_ ##r ##_2(b0, b1); \
-  G2(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1); \
-  DIAGONALIZE(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h); \
-  LOAD_MSG_ ##r ##_3(b0, b1); \
-  G1(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1); \
-  LOAD_MSG_ ##r ##_4(b0, b1); \
-  G2(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h,b0,b1); \
-  UNDIAGONALIZE(row1l,row2l,row3l,row4l,row1h,row2h,row3h,row4h);
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-avx2.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-avx2.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-avx2.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-avx2.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,339 +0,0 @@
-#ifndef blake2b_load_avx2_H
-#define blake2b_load_avx2_H
-
-#define BLAKE2B_LOAD_MSG_0_1(b0) do { \
-    t0 = _mm256_unpacklo_epi64(m0, m1); \
-    t1 = _mm256_unpacklo_epi64(m2, m3); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_0_2(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m0, m1); \
-    t1 = _mm256_unpackhi_epi64(m2, m3); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_0_3(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m4, m5); \
-    t1 = _mm256_unpacklo_epi64(m6, m7); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_0_4(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m4, m5); \
-    t1 = _mm256_unpackhi_epi64(m6, m7); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_1_1(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m7, m2); \
-    t1 = _mm256_unpackhi_epi64(m4, m6); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_1_2(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m5, m4); \
-    t1 = _mm256_alignr_epi8(m3, m7, 8); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_1_3(b0) \
-do { \
-    t0 = _mm256_shuffle_epi32(m0, _MM_SHUFFLE(1,0,3,2)); \
-    t1 = _mm256_unpackhi_epi64(m5, m2); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_1_4(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m6, m1); \
-    t1 = _mm256_unpackhi_epi64(m3, m1); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_2_1(b0) \
-do { \
-    t0 = _mm256_alignr_epi8(m6, m5, 8); \
-    t1 = _mm256_unpackhi_epi64(m2, m7); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_2_2(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m4, m0); \
-    t1 = _mm256_blend_epi32(m6, m1, 0x33); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_2_3(b0) \
-do { \
-    t0 = _mm256_blend_epi32(m1, m5, 0x33); \
-    t1 = _mm256_unpackhi_epi64(m3, m4); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_2_4(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m7, m3); \
-    t1 = _mm256_alignr_epi8(m2, m0, 8); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_3_1(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m3, m1); \
-    t1 = _mm256_unpackhi_epi64(m6, m5); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_3_2(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m4, m0); \
-    t1 = _mm256_unpacklo_epi64(m6, m7); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_3_3(b0) \
-do { \
-    t0 = _mm256_blend_epi32(m2, m1, 0x33); \
-    t1 = _mm256_blend_epi32(m7, m2, 0x33); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_3_4(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m3, m5); \
-    t1 = _mm256_unpacklo_epi64(m0, m4); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_4_1(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m4, m2); \
-    t1 = _mm256_unpacklo_epi64(m1, m5); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_4_2(b0) \
-do { \
-    t0 = _mm256_blend_epi32(m3, m0, 0x33); \
-    t1 = _mm256_blend_epi32(m7, m2, 0x33); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_4_3(b0) \
-do { \
-    t0 = _mm256_blend_epi32(m5, m7, 0x33); \
-    t1 = _mm256_blend_epi32(m1, m3, 0x33); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_4_4(b0) \
-do { \
-    t0 = _mm256_alignr_epi8(m6, m0, 8); \
-    t1 = _mm256_blend_epi32(m6, m4, 0x33); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_5_1(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m1, m3); \
-    t1 = _mm256_unpacklo_epi64(m0, m4); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_5_2(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m6, m5); \
-    t1 = _mm256_unpackhi_epi64(m5, m1); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_5_3(b0) \
-do { \
-    t0 = _mm256_blend_epi32(m3, m2, 0x33); \
-    t1 = _mm256_unpackhi_epi64(m7, m0); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_5_4(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m6, m2); \
-    t1 = _mm256_blend_epi32(m4, m7, 0x33); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_6_1(b0) \
-do { \
-    t0 = _mm256_blend_epi32(m0, m6, 0x33); \
-    t1 = _mm256_unpacklo_epi64(m7, m2); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_6_2(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m2, m7); \
-    t1 = _mm256_alignr_epi8(m5, m6, 8); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_6_3(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m0, m3); \
-    t1 = _mm256_shuffle_epi32(m4, _MM_SHUFFLE(1,0,3,2)); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_6_4(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m3, m1); \
-    t1 = _mm256_blend_epi32(m5, m1, 0x33); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_7_1(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m6, m3); \
-    t1 = _mm256_blend_epi32(m1, m6, 0x33); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_7_2(b0) \
-do { \
-    t0 = _mm256_alignr_epi8(m7, m5, 8); \
-    t1 = _mm256_unpackhi_epi64(m0, m4); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_7_3(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m2, m7); \
-    t1 = _mm256_unpacklo_epi64(m4, m1); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_7_4(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m0, m2); \
-    t1 = _mm256_unpacklo_epi64(m3, m5); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_8_1(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m3, m7); \
-    t1 = _mm256_alignr_epi8(m0, m5, 8); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_8_2(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m7, m4); \
-    t1 = _mm256_alignr_epi8(m4, m1, 8); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_8_3(b0) \
-do { \
-    t0 = m6; \
-    t1 = _mm256_alignr_epi8(m5, m0, 8); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_8_4(b0) \
-do { \
-    t0 = _mm256_blend_epi32(m3, m1, 0x33); \
-    t1 = m2; \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_9_1(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m5, m4); \
-    t1 = _mm256_unpackhi_epi64(m3, m0); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_9_2(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m1, m2); \
-    t1 = _mm256_blend_epi32(m2, m3, 0x33); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_9_3(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m7, m4); \
-    t1 = _mm256_unpackhi_epi64(m1, m6); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_9_4(b0) \
-do { \
-    t0 = _mm256_alignr_epi8(m7, m5, 8); \
-    t1 = _mm256_unpacklo_epi64(m6, m0); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_10_1(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m0, m1); \
-    t1 = _mm256_unpacklo_epi64(m2, m3); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_10_2(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m0, m1); \
-    t1 = _mm256_unpackhi_epi64(m2, m3); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_10_3(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m4, m5); \
-    t1 = _mm256_unpacklo_epi64(m6, m7); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_10_4(b0) \
-do { \
-    t0 = _mm256_unpackhi_epi64(m4, m5); \
-    t1 = _mm256_unpackhi_epi64(m6, m7); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_11_1(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m7, m2); \
-    t1 = _mm256_unpackhi_epi64(m4, m6); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_11_2(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m5, m4); \
-    t1 = _mm256_alignr_epi8(m3, m7, 8); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_11_3(b0) \
-do { \
-    t0 = _mm256_shuffle_epi32(m0, _MM_SHUFFLE(1,0,3,2)); \
-    t1 = _mm256_unpackhi_epi64(m5, m2); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#define BLAKE2B_LOAD_MSG_11_4(b0) \
-do { \
-    t0 = _mm256_unpacklo_epi64(m6, m1); \
-    t1 = _mm256_unpackhi_epi64(m3, m1); \
-    b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
-} while(0)
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-sse2.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-sse2.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-sse2.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-sse2.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,66 +0,0 @@
-/*
-   BLAKE2 reference source code package - optimized C implementations
-
-   Written in 2012 by Samuel Neves <sneves@dei.uc.pt>
-
-   To the extent possible under law, the author(s) have dedicated all copyright
-   and related and neighboring rights to this software to the public domain
-   worldwide. This software is distributed without any warranty.
-
-   You should have received a copy of the CC0 Public Domain Dedication along with
-   this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
-*/
-
-#ifndef blake2b_load_sse2_H
-#define blake2b_load_sse2_H
-
-#define LOAD_MSG_0_1(b0, b1) b0 = _mm_set_epi64x(m2, m0); b1 = _mm_set_epi64x(m6, m4)
-#define LOAD_MSG_0_2(b0, b1) b0 = _mm_set_epi64x(m3, m1); b1 = _mm_set_epi64x(m7, m5)
-#define LOAD_MSG_0_3(b0, b1) b0 = _mm_set_epi64x(m10, m8); b1 = _mm_set_epi64x(m14, m12)
-#define LOAD_MSG_0_4(b0, b1) b0 = _mm_set_epi64x(m11, m9); b1 = _mm_set_epi64x(m15, m13)
-#define LOAD_MSG_1_1(b0, b1) b0 = _mm_set_epi64x(m4, m14); b1 = _mm_set_epi64x(m13, m9)
-#define LOAD_MSG_1_2(b0, b1) b0 = _mm_set_epi64x(m8, m10); b1 = _mm_set_epi64x(m6, m15)
-#define LOAD_MSG_1_3(b0, b1) b0 = _mm_set_epi64x(m0, m1); b1 = _mm_set_epi64x(m5, m11)
-#define LOAD_MSG_1_4(b0, b1) b0 = _mm_set_epi64x(m2, m12); b1 = _mm_set_epi64x(m3, m7)
-#define LOAD_MSG_2_1(b0, b1) b0 = _mm_set_epi64x(m12, m11); b1 = _mm_set_epi64x(m15, m5)
-#define LOAD_MSG_2_2(b0, b1) b0 = _mm_set_epi64x(m0, m8); b1 = _mm_set_epi64x(m13, m2)
-#define LOAD_MSG_2_3(b0, b1) b0 = _mm_set_epi64x(m3, m10); b1 = _mm_set_epi64x(m9, m7)
-#define LOAD_MSG_2_4(b0, b1) b0 = _mm_set_epi64x(m6, m14); b1 = _mm_set_epi64x(m4, m1)
-#define LOAD_MSG_3_1(b0, b1) b0 = _mm_set_epi64x(m3, m7); b1 = _mm_set_epi64x(m11, m13)
-#define LOAD_MSG_3_2(b0, b1) b0 = _mm_set_epi64x(m1, m9); b1 = _mm_set_epi64x(m14, m12)
-#define LOAD_MSG_3_3(b0, b1) b0 = _mm_set_epi64x(m5, m2); b1 = _mm_set_epi64x(m15, m4)
-#define LOAD_MSG_3_4(b0, b1) b0 = _mm_set_epi64x(m10, m6); b1 = _mm_set_epi64x(m8, m0)
-#define LOAD_MSG_4_1(b0, b1) b0 = _mm_set_epi64x(m5, m9); b1 = _mm_set_epi64x(m10, m2)
-#define LOAD_MSG_4_2(b0, b1) b0 = _mm_set_epi64x(m7, m0); b1 = _mm_set_epi64x(m15, m4)
-#define LOAD_MSG_4_3(b0, b1) b0 = _mm_set_epi64x(m11, m14); b1 = _mm_set_epi64x(m3, m6)
-#define LOAD_MSG_4_4(b0, b1) b0 = _mm_set_epi64x(m12, m1); b1 = _mm_set_epi64x(m13, m8)
-#define LOAD_MSG_5_1(b0, b1) b0 = _mm_set_epi64x(m6, m2); b1 = _mm_set_epi64x(m8, m0)
-#define LOAD_MSG_5_2(b0, b1) b0 = _mm_set_epi64x(m10, m12); b1 = _mm_set_epi64x(m3, m11)
-#define LOAD_MSG_5_3(b0, b1) b0 = _mm_set_epi64x(m7, m4); b1 = _mm_set_epi64x(m1, m15)
-#define LOAD_MSG_5_4(b0, b1) b0 = _mm_set_epi64x(m5, m13); b1 = _mm_set_epi64x(m9, m14)
-#define LOAD_MSG_6_1(b0, b1) b0 = _mm_set_epi64x(m1, m12); b1 = _mm_set_epi64x(m4, m14)
-#define LOAD_MSG_6_2(b0, b1) b0 = _mm_set_epi64x(m15, m5); b1 = _mm_set_epi64x(m10, m13)
-#define LOAD_MSG_6_3(b0, b1) b0 = _mm_set_epi64x(m6, m0); b1 = _mm_set_epi64x(m8, m9)
-#define LOAD_MSG_6_4(b0, b1) b0 = _mm_set_epi64x(m3, m7); b1 = _mm_set_epi64x(m11, m2)
-#define LOAD_MSG_7_1(b0, b1) b0 = _mm_set_epi64x(m7, m13); b1 = _mm_set_epi64x(m3, m12)
-#define LOAD_MSG_7_2(b0, b1) b0 = _mm_set_epi64x(m14, m11); b1 = _mm_set_epi64x(m9, m1)
-#define LOAD_MSG_7_3(b0, b1) b0 = _mm_set_epi64x(m15, m5); b1 = _mm_set_epi64x(m2, m8)
-#define LOAD_MSG_7_4(b0, b1) b0 = _mm_set_epi64x(m4, m0); b1 = _mm_set_epi64x(m10, m6)
-#define LOAD_MSG_8_1(b0, b1) b0 = _mm_set_epi64x(m14, m6); b1 = _mm_set_epi64x(m0, m11)
-#define LOAD_MSG_8_2(b0, b1) b0 = _mm_set_epi64x(m9, m15); b1 = _mm_set_epi64x(m8, m3)
-#define LOAD_MSG_8_3(b0, b1) b0 = _mm_set_epi64x(m13, m12); b1 = _mm_set_epi64x(m10, m1)
-#define LOAD_MSG_8_4(b0, b1) b0 = _mm_set_epi64x(m7, m2); b1 = _mm_set_epi64x(m5, m4)
-#define LOAD_MSG_9_1(b0, b1) b0 = _mm_set_epi64x(m8, m10); b1 = _mm_set_epi64x(m1, m7)
-#define LOAD_MSG_9_2(b0, b1) b0 = _mm_set_epi64x(m4, m2); b1 = _mm_set_epi64x(m5, m6)
-#define LOAD_MSG_9_3(b0, b1) b0 = _mm_set_epi64x(m9, m15); b1 = _mm_set_epi64x(m13, m3)
-#define LOAD_MSG_9_4(b0, b1) b0 = _mm_set_epi64x(m14, m11); b1 = _mm_set_epi64x(m0, m12)
-#define LOAD_MSG_10_1(b0, b1) b0 = _mm_set_epi64x(m2, m0); b1 = _mm_set_epi64x(m6, m4)
-#define LOAD_MSG_10_2(b0, b1) b0 = _mm_set_epi64x(m3, m1); b1 = _mm_set_epi64x(m7, m5)
-#define LOAD_MSG_10_3(b0, b1) b0 = _mm_set_epi64x(m10, m8); b1 = _mm_set_epi64x(m14, m12)
-#define LOAD_MSG_10_4(b0, b1) b0 = _mm_set_epi64x(m11, m9); b1 = _mm_set_epi64x(m15, m13)
-#define LOAD_MSG_11_1(b0, b1) b0 = _mm_set_epi64x(m4, m14); b1 = _mm_set_epi64x(m13, m9)
-#define LOAD_MSG_11_2(b0, b1) b0 = _mm_set_epi64x(m8, m10); b1 = _mm_set_epi64x(m6, m15)
-#define LOAD_MSG_11_3(b0, b1) b0 = _mm_set_epi64x(m0, m1); b1 = _mm_set_epi64x(m5, m11)
-#define LOAD_MSG_11_4(b0, b1) b0 = _mm_set_epi64x(m2, m12); b1 = _mm_set_epi64x(m3, m7)
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-sse41.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-sse41.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-sse41.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-load-sse41.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,400 +0,0 @@
-/*
-   BLAKE2 reference source code package - optimized C implementations
-
-   Written in 2012 by Samuel Neves <sneves@dei.uc.pt>
-
-   To the extent possible under law, the author(s) have dedicated all copyright
-   and related and neighboring rights to this software to the public domain
-   worldwide. This software is distributed without any warranty.
-
-   You should have received a copy of the CC0 Public Domain Dedication along with
-   this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
-*/
-
-#ifndef blake2b_load_sse41_H
-#define blake2b_load_sse41_H
-
-#define LOAD_MSG_0_1(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m0, m1); \
-b1 = _mm_unpacklo_epi64(m2, m3); \
-} while(0)
-
-
-#define LOAD_MSG_0_2(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m0, m1); \
-b1 = _mm_unpackhi_epi64(m2, m3); \
-} while(0)
-
-
-#define LOAD_MSG_0_3(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m4, m5); \
-b1 = _mm_unpacklo_epi64(m6, m7); \
-} while(0)
-
-
-#define LOAD_MSG_0_4(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m4, m5); \
-b1 = _mm_unpackhi_epi64(m6, m7); \
-} while(0)
-
-
-#define LOAD_MSG_1_1(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m7, m2); \
-b1 = _mm_unpackhi_epi64(m4, m6); \
-} while(0)
-
-
-#define LOAD_MSG_1_2(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m5, m4); \
-b1 = _mm_alignr_epi8(m3, m7, 8); \
-} while(0)
-
-
-#define LOAD_MSG_1_3(b0, b1) \
-do \
-{ \
-b0 = _mm_shuffle_epi32(m0, _MM_SHUFFLE(1,0,3,2)); \
-b1 = _mm_unpackhi_epi64(m5, m2); \
-} while(0)
-
-
-#define LOAD_MSG_1_4(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m6, m1); \
-b1 = _mm_unpackhi_epi64(m3, m1); \
-} while(0)
-
-
-#define LOAD_MSG_2_1(b0, b1) \
-do \
-{ \
-b0 = _mm_alignr_epi8(m6, m5, 8); \
-b1 = _mm_unpackhi_epi64(m2, m7); \
-} while(0)
-
-
-#define LOAD_MSG_2_2(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m4, m0); \
-b1 = _mm_blend_epi16(m1, m6, 0xF0); \
-} while(0)
-
-
-#define LOAD_MSG_2_3(b0, b1) \
-do \
-{ \
-b0 = _mm_blend_epi16(m5, m1, 0xF0); \
-b1 = _mm_unpackhi_epi64(m3, m4); \
-} while(0)
-
-
-#define LOAD_MSG_2_4(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m7, m3); \
-b1 = _mm_alignr_epi8(m2, m0, 8); \
-} while(0)
-
-
-#define LOAD_MSG_3_1(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m3, m1); \
-b1 = _mm_unpackhi_epi64(m6, m5); \
-} while(0)
-
-
-#define LOAD_MSG_3_2(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m4, m0); \
-b1 = _mm_unpacklo_epi64(m6, m7); \
-} while(0)
-
-
-#define LOAD_MSG_3_3(b0, b1) \
-do \
-{ \
-b0 = _mm_blend_epi16(m1, m2, 0xF0); \
-b1 = _mm_blend_epi16(m2, m7, 0xF0); \
-} while(0)
-
-
-#define LOAD_MSG_3_4(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m3, m5); \
-b1 = _mm_unpacklo_epi64(m0, m4); \
-} while(0)
-
-
-#define LOAD_MSG_4_1(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m4, m2); \
-b1 = _mm_unpacklo_epi64(m1, m5); \
-} while(0)
-
-
-#define LOAD_MSG_4_2(b0, b1) \
-do \
-{ \
-b0 = _mm_blend_epi16(m0, m3, 0xF0); \
-b1 = _mm_blend_epi16(m2, m7, 0xF0); \
-} while(0)
-
-
-#define LOAD_MSG_4_3(b0, b1) \
-do \
-{ \
-b0 = _mm_blend_epi16(m7, m5, 0xF0); \
-b1 = _mm_blend_epi16(m3, m1, 0xF0); \
-} while(0)
-
-
-#define LOAD_MSG_4_4(b0, b1) \
-do \
-{ \
-b0 = _mm_alignr_epi8(m6, m0, 8); \
-b1 = _mm_blend_epi16(m4, m6, 0xF0); \
-} while(0)
-
-
-#define LOAD_MSG_5_1(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m1, m3); \
-b1 = _mm_unpacklo_epi64(m0, m4); \
-} while(0)
-
-
-#define LOAD_MSG_5_2(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m6, m5); \
-b1 = _mm_unpackhi_epi64(m5, m1); \
-} while(0)
-
-
-#define LOAD_MSG_5_3(b0, b1) \
-do \
-{ \
-b0 = _mm_blend_epi16(m2, m3, 0xF0); \
-b1 = _mm_unpackhi_epi64(m7, m0); \
-} while(0)
-
-
-#define LOAD_MSG_5_4(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m6, m2); \
-b1 = _mm_blend_epi16(m7, m4, 0xF0); \
-} while(0)
-
-
-#define LOAD_MSG_6_1(b0, b1) \
-do \
-{ \
-b0 = _mm_blend_epi16(m6, m0, 0xF0); \
-b1 = _mm_unpacklo_epi64(m7, m2); \
-} while(0)
-
-
-#define LOAD_MSG_6_2(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m2, m7); \
-b1 = _mm_alignr_epi8(m5, m6, 8); \
-} while(0)
-
-
-#define LOAD_MSG_6_3(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m0, m3); \
-b1 = _mm_shuffle_epi32(m4, _MM_SHUFFLE(1,0,3,2)); \
-} while(0)
-
-
-#define LOAD_MSG_6_4(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m3, m1); \
-b1 = _mm_blend_epi16(m1, m5, 0xF0); \
-} while(0)
-
-
-#define LOAD_MSG_7_1(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m6, m3); \
-b1 = _mm_blend_epi16(m6, m1, 0xF0); \
-} while(0)
-
-
-#define LOAD_MSG_7_2(b0, b1) \
-do \
-{ \
-b0 = _mm_alignr_epi8(m7, m5, 8); \
-b1 = _mm_unpackhi_epi64(m0, m4); \
-} while(0)
-
-
-#define LOAD_MSG_7_3(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m2, m7); \
-b1 = _mm_unpacklo_epi64(m4, m1); \
-} while(0)
-
-
-#define LOAD_MSG_7_4(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m0, m2); \
-b1 = _mm_unpacklo_epi64(m3, m5); \
-} while(0)
-
-
-#define LOAD_MSG_8_1(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m3, m7); \
-b1 = _mm_alignr_epi8(m0, m5, 8); \
-} while(0)
-
-
-#define LOAD_MSG_8_2(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m7, m4); \
-b1 = _mm_alignr_epi8(m4, m1, 8); \
-} while(0)
-
-
-#define LOAD_MSG_8_3(b0, b1) \
-do \
-{ \
-b0 = m6; \
-b1 = _mm_alignr_epi8(m5, m0, 8); \
-} while(0)
-
-
-#define LOAD_MSG_8_4(b0, b1) \
-do \
-{ \
-b0 = _mm_blend_epi16(m1, m3, 0xF0); \
-b1 = m2; \
-} while(0)
-
-
-#define LOAD_MSG_9_1(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m5, m4); \
-b1 = _mm_unpackhi_epi64(m3, m0); \
-} while(0)
-
-
-#define LOAD_MSG_9_2(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m1, m2); \
-b1 = _mm_blend_epi16(m3, m2, 0xF0); \
-} while(0)
-
-
-#define LOAD_MSG_9_3(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m7, m4); \
-b1 = _mm_unpackhi_epi64(m1, m6); \
-} while(0)
-
-
-#define LOAD_MSG_9_4(b0, b1) \
-do \
-{ \
-b0 = _mm_alignr_epi8(m7, m5, 8); \
-b1 = _mm_unpacklo_epi64(m6, m0); \
-} while(0)
-
-
-#define LOAD_MSG_10_1(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m0, m1); \
-b1 = _mm_unpacklo_epi64(m2, m3); \
-} while(0)
-
-
-#define LOAD_MSG_10_2(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m0, m1); \
-b1 = _mm_unpackhi_epi64(m2, m3); \
-} while(0)
-
-
-#define LOAD_MSG_10_3(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m4, m5); \
-b1 = _mm_unpacklo_epi64(m6, m7); \
-} while(0)
-
-
-#define LOAD_MSG_10_4(b0, b1) \
-do \
-{ \
-b0 = _mm_unpackhi_epi64(m4, m5); \
-b1 = _mm_unpackhi_epi64(m6, m7); \
-} while(0)
-
-
-#define LOAD_MSG_11_1(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m7, m2); \
-b1 = _mm_unpackhi_epi64(m4, m6); \
-} while(0)
-
-
-#define LOAD_MSG_11_2(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m5, m4); \
-b1 = _mm_alignr_epi8(m3, m7, 8); \
-} while(0)
-
-
-#define LOAD_MSG_11_3(b0, b1) \
-do \
-{ \
-b0 = _mm_shuffle_epi32(m0, _MM_SHUFFLE(1,0,3,2)); \
-b1 = _mm_unpackhi_epi64(m5, m2); \
-} while(0)
-
-
-#define LOAD_MSG_11_4(b0, b1) \
-do \
-{ \
-b0 = _mm_unpacklo_epi64(m6, m1); \
-b1 = _mm_unpackhi_epi64(m3, m1); \
-} while(0)
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-ref.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-ref.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2b-ref.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2b-ref.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,456 +0,0 @@
-/*
-   BLAKE2 reference source code package - C implementations
-
-   Written in 2012 by Samuel Neves <sneves@dei.uc.pt>
-
-   To the extent possible under law, the author(s) have dedicated all copyright
-   and related and neighboring rights to this software to the public domain
-   worldwide. This software is distributed without any warranty.
-
-   You should have received a copy of the CC0 Public Domain Dedication along with
-   this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
-*/
-
-#include <assert.h>
-#include <stdint.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include "blake2.h"
-#include "blake2-impl.h"
-#include "runtime.h"
-#include "private/common.h"
-
-#ifdef HAVE_TI_MODE
-# if defined(__SIZEOF_INT128__)
-typedef unsigned __int128 uint128_t;
-# else
-typedef unsigned uint128_t __attribute__ ((mode(TI)));
-# endif
-#endif
-
-static blake2b_compress_fn blake2b_compress = blake2b_compress_ref;
-
-static const uint64_t blake2b_IV[8] =
-{
-  0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL,
-  0x3c6ef372fe94f82bULL, 0xa54ff53a5f1d36f1ULL,
-  0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
-  0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
-};
-
-/* LCOV_EXCL_START */
-static inline int blake2b_set_lastnode( blake2b_state *S )
-{
-  S->f[1] = -1;
-  return 0;
-}
-/* LCOV_EXCL_STOP */
-#if 0
-static inline int blake2b_clear_lastnode( blake2b_state *S )
-{
-  S->f[1] = 0;
-  return 0;
-}
-#endif
-
-static inline int blake2b_is_lastblock( const blake2b_state *S )
-{
-  return S->f[0] != 0;
-}
-
-static inline int blake2b_set_lastblock( blake2b_state *S )
-{
-  if( S->last_node ) blake2b_set_lastnode( S );
-
-  S->f[0] = -1;
-  return 0;
-}
-#if 0
-static inline int blake2b_clear_lastblock( blake2b_state *S )
-{
-  if( S->last_node ) blake2b_clear_lastnode( S );
-
-  S->f[0] = 0;
-  return 0;
-}
-#endif
-static inline int blake2b_increment_counter( blake2b_state *S, const uint64_t inc )
-{
-#ifdef HAVE_TI_MODE
-  uint128_t t = ( ( uint128_t )S->t[1] << 64 ) | S->t[0];
-  t += inc;
-  S->t[0] = ( uint64_t )( t >>  0 );
-  S->t[1] = ( uint64_t )( t >> 64 );
-#else
-  S->t[0] += inc;
-  S->t[1] += ( S->t[0] < inc );
-#endif
-  return 0;
-}
-
-/* Parameter-related functions */
-#if 0
-/* Redundant: digest length is directly set in blake2b_init(), blake2b_init_salt_personal(),
- * blake2b_init_key() and blake2b_init_key_salt_personal() */
-static inline int blake2b_param_set_digest_length( blake2b_param *P, const uint8_t digest_length )
-{
-  P->digest_length = digest_length;
-  return 0;
-}
-
-static inline int blake2b_param_set_fanout( blake2b_param *P, const uint8_t fanout )
-{
-  P->fanout = fanout;
-  return 0;
-}
-
-static inline int blake2b_param_set_max_depth( blake2b_param *P, const uint8_t depth )
-{
-  P->depth = depth;
-  return 0;
-}
-
-static inline int blake2b_param_set_leaf_length( blake2b_param *P, const uint32_t leaf_length )
-{
-  STORE32_LE( P->leaf_length, leaf_length );
-  return 0;
-}
-
-static inline int blake2b_param_set_node_offset( blake2b_param *P, const uint64_t node_offset )
-{
-  STORE64_LE( P->node_offset, node_offset );
-  return 0;
-}
-
-static inline int blake2b_param_set_node_depth( blake2b_param *P, const uint8_t node_depth )
-{
-  P->node_depth = node_depth;
-  return 0;
-}
-
-static inline int blake2b_param_set_inner_length( blake2b_param *P, const uint8_t inner_length )
-{
-  P->inner_length = inner_length;
-  return 0;
-}
-#endif
-static inline int blake2b_param_set_salt( blake2b_param *P, const uint8_t salt[BLAKE2B_SALTBYTES] )
-{
-  memcpy( P->salt, salt, BLAKE2B_SALTBYTES );
-  return 0;
-}
-
-static inline int blake2b_param_set_personal( blake2b_param *P, const uint8_t personal[BLAKE2B_PERSONALBYTES] )
-{
-  memcpy( P->personal, personal, BLAKE2B_PERSONALBYTES );
-  return 0;
-}
-
-static inline int blake2b_init0( blake2b_state *S )
-{
-  int i;
-  memset( S, 0, sizeof( blake2b_state ) );
-
-  for( i = 0; i < 8; ++i ) S->h[i] = blake2b_IV[i];
-
-  return 0;
-}
-
-/* init xors IV with input parameter block */
-int blake2b_init_param( blake2b_state *S, const blake2b_param *P )
-{
-  size_t i;
-  const uint8_t *p;
-
-  (void) sizeof(int[sizeof *P == 64 ? 1 : -1]);
-  blake2b_init0( S );
-  p = ( const uint8_t * )( P );
-
-  /* IV XOR ParamBlock */
-  for( i = 0; i < 8; ++i )
-    S->h[i] ^= LOAD64_LE( p + sizeof( S->h[i] ) * i );
-
-  return 0;
-}
-
-int blake2b_init( blake2b_state *S, const uint8_t outlen )
-{
-  blake2b_param P[1];
-
-  if ( ( !outlen ) || ( outlen > BLAKE2B_OUTBYTES ) ) abort();
-
-  P->digest_length = outlen;
-  P->key_length    = 0;
-  P->fanout        = 1;
-  P->depth         = 1;
-  STORE32_LE( P->leaf_length, 0 );
-  STORE64_LE( P->node_offset, 0 );
-  P->node_depth    = 0;
-  P->inner_length  = 0;
-  memset( P->reserved, 0, sizeof( P->reserved ) );
-  memset( P->salt,     0, sizeof( P->salt ) );
-  memset( P->personal, 0, sizeof( P->personal ) );
-  return blake2b_init_param( S, P );
-}
-
-int blake2b_init_salt_personal( blake2b_state *S, const uint8_t outlen,
-                                const void *salt, const void *personal )
-{
-  blake2b_param P[1];
-
-  if ( ( !outlen ) || ( outlen > BLAKE2B_OUTBYTES ) ) abort();
-
-  P->digest_length = outlen;
-  P->key_length    = 0;
-  P->fanout        = 1;
-  P->depth         = 1;
-  STORE32_LE( P->leaf_length, 0 );
-  STORE64_LE( P->node_offset, 0 );
-  P->node_depth    = 0;
-  P->inner_length  = 0;
-  memset( P->reserved, 0, sizeof( P->reserved ) );
-  if (salt != NULL) {
-    blake2b_param_set_salt( P, (const uint8_t *) salt );
-  } else {
-    memset( P->salt, 0, sizeof( P->salt ) );
-  }
-  if (personal != NULL) {
-    blake2b_param_set_personal( P, (const uint8_t *) personal );
-  } else {
-    memset( P->personal, 0, sizeof( P->personal ) );
-  }
-  return blake2b_init_param( S, P );
-}
-
-int blake2b_init_key( blake2b_state *S, const uint8_t outlen, const void *key, const uint8_t keylen )
-{
-  blake2b_param P[1];
-
-  if ( ( !outlen ) || ( outlen > BLAKE2B_OUTBYTES ) ) abort();
-
-  if ( !key || !keylen || keylen > BLAKE2B_KEYBYTES ) abort();
-
-  P->digest_length = outlen;
-  P->key_length    = keylen;
-  P->fanout        = 1;
-  P->depth         = 1;
-  STORE32_LE( P->leaf_length, 0 );
-  STORE64_LE( P->node_offset, 0 );
-  P->node_depth    = 0;
-  P->inner_length  = 0;
-  memset( P->reserved, 0, sizeof( P->reserved ) );
-  memset( P->salt,     0, sizeof( P->salt ) );
-  memset( P->personal, 0, sizeof( P->personal ) );
-
-  if( blake2b_init_param( S, P ) < 0 ) abort();
-
-  {
-    uint8_t block[BLAKE2B_BLOCKBYTES];
-    memset( block, 0, BLAKE2B_BLOCKBYTES );
-    memcpy( block, key, keylen );
-    blake2b_update( S, block, BLAKE2B_BLOCKBYTES );
-    secure_zero_memory( block, BLAKE2B_BLOCKBYTES ); /* Burn the key from stack */
-  }
-  return 0;
-}
-
-int blake2b_init_key_salt_personal( blake2b_state *S, const uint8_t outlen, const void *key, const uint8_t keylen,
-                                    const void *salt, const void *personal )
-{
-  blake2b_param P[1];
-
-  if ( ( !outlen ) || ( outlen > BLAKE2B_OUTBYTES ) ) abort();
-
-  if ( !key || !keylen || keylen > BLAKE2B_KEYBYTES ) abort();
-
-  P->digest_length = outlen;
-  P->key_length    = keylen;
-  P->fanout        = 1;
-  P->depth         = 1;
-  STORE32_LE( P->leaf_length, 0 );
-  STORE64_LE( P->node_offset, 0 );
-  P->node_depth    = 0;
-  P->inner_length  = 0;
-  memset( P->reserved, 0, sizeof( P->reserved ) );
-  if (salt != NULL) {
-    blake2b_param_set_salt( P, (const uint8_t *) salt );
-  } else {
-    memset( P->salt, 0, sizeof( P->salt ) );
-  }
-  if (personal != NULL) {
-    blake2b_param_set_personal( P, (const uint8_t *) personal );
-  } else {
-    memset( P->personal, 0, sizeof( P->personal ) );
-  }
-
-  if( blake2b_init_param( S, P ) < 0 ) abort();
-
-  {
-    uint8_t block[BLAKE2B_BLOCKBYTES];
-    memset( block, 0, BLAKE2B_BLOCKBYTES );
-    memcpy( block, key, keylen );
-    blake2b_update( S, block, BLAKE2B_BLOCKBYTES );
-    secure_zero_memory( block, BLAKE2B_BLOCKBYTES ); /* Burn the key from stack */
-  }
-  return 0;
-}
-
-/* inlen now in bytes */
-int blake2b_update( blake2b_state *S, const uint8_t *in, uint64_t inlen )
-{
-  while( inlen > 0 )
-  {
-    size_t left = S->buflen;
-    size_t fill = 2 * BLAKE2B_BLOCKBYTES - left;
-
-    if( inlen > fill )
-    {
-      memcpy( S->buf + left, in, fill ); /* Fill buffer */
-      S->buflen += fill;
-      blake2b_increment_counter( S, BLAKE2B_BLOCKBYTES );
-      blake2b_compress( S, S->buf ); /* Compress */
-      memcpy( S->buf, S->buf + BLAKE2B_BLOCKBYTES, BLAKE2B_BLOCKBYTES ); /* Shift buffer left */
-      S->buflen -= BLAKE2B_BLOCKBYTES;
-      in += fill;
-      inlen -= fill;
-    }
-    else /* inlen <= fill */
-    {
-      memcpy( S->buf + left, in, inlen );
-      S->buflen += inlen; /* Be lazy, do not compress */
-      in += inlen;
-      inlen -= inlen;
-    }
-  }
-
-  return 0;
-}
-
-int blake2b_final( blake2b_state *S, uint8_t *out, uint8_t outlen )
-{
-  if( !outlen || outlen > BLAKE2B_OUTBYTES ) {
-    abort(); /* LCOV_EXCL_LINE */
-  }
-  if( blake2b_is_lastblock( S ) ) {
-    return -1;
-  }
-  if( S->buflen > BLAKE2B_BLOCKBYTES )
-  {
-    blake2b_increment_counter( S, BLAKE2B_BLOCKBYTES );
-    blake2b_compress( S, S->buf );
-    S->buflen -= BLAKE2B_BLOCKBYTES;
-    assert( S->buflen <= BLAKE2B_BLOCKBYTES );
-    memcpy( S->buf, S->buf + BLAKE2B_BLOCKBYTES, S->buflen );
-  }
-
-  blake2b_increment_counter( S, S->buflen );
-  blake2b_set_lastblock( S );
-  memset( S->buf + S->buflen, 0, 2 * BLAKE2B_BLOCKBYTES - S->buflen ); /* Padding */
-  blake2b_compress( S, S->buf );
-
-#ifdef NATIVE_LITTLE_ENDIAN
-  memcpy( out, &S->h[0], outlen );
-#else
-  {
-    uint8_t buffer[BLAKE2B_OUTBYTES];
-    int     i;
-
-    for( i = 0; i < 8; ++i ) /* Output full hash to temp buffer */
-      STORE64_LE( buffer + sizeof( S->h[i] ) * i, S->h[i] );
-    memcpy( out, buffer, outlen );
-  }
-#endif
-  return 0;
-}
-
-/* inlen, at least, should be uint64_t. Others can be size_t. */
-int blake2b( uint8_t *out, const void *in, const void *key, const uint8_t outlen, const uint64_t inlen, uint8_t keylen )
-{
-  blake2b_state S[1];
-
-  /* Verify parameters */
-  if( NULL == in && inlen > 0 ) abort();
-
-  if( NULL == out ) abort();
-
-  if( !outlen || outlen > BLAKE2B_OUTBYTES ) abort();
-
-  if( NULL == key && keylen > 0 ) abort();
-
-  if( keylen > BLAKE2B_KEYBYTES ) abort();
-
-  if( keylen > 0 )
-  {
-    if( blake2b_init_key( S, outlen, key, keylen ) < 0 ) abort();
-  }
-  else
-  {
-    if( blake2b_init( S, outlen ) < 0 ) abort();
-  }
-
-  blake2b_update( S, ( const uint8_t * )in, inlen );
-  blake2b_final( S, out, outlen );
-  return 0;
-}
-
-int blake2b_salt_personal( uint8_t *out, const void *in, const void *key, const uint8_t outlen, const uint64_t inlen, uint8_t keylen,
-                           const void *salt, const void *personal )
-{
-  blake2b_state S[1];
-
-  /* Verify parameters */
-  if( NULL == in && inlen > 0 ) abort();
-
-  if( NULL == out ) abort();
-
-  if( !outlen || outlen > BLAKE2B_OUTBYTES ) abort();
-
-  if( NULL == key && keylen > 0 ) abort();
-
-  if( keylen > BLAKE2B_KEYBYTES ) abort();
-
-  if( keylen > 0 )
-  {
-    if( blake2b_init_key_salt_personal( S, outlen, key, keylen, salt, personal ) < 0 ) abort();
-  }
-  else
-  {
-    if( blake2b_init_salt_personal( S, outlen, salt, personal ) < 0 ) abort();
-  }
-
-  blake2b_update( S, ( const uint8_t * )in, inlen );
-  blake2b_final( S, out, outlen );
-  return 0;
-}
-
-int
-blake2b_pick_best_implementation(void)
-{
-/* LCOV_EXCL_START */
-#if (defined(HAVE_AVX2INTRIN_H) && defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64)) && _MSC_VER >= 1700)
-  if (sodium_runtime_has_avx2()) {
-    blake2b_compress = blake2b_compress_avx2;
-    return 0;
-  }
-#endif
-#if (defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
-  if (sodium_runtime_has_sse41()) {
-    blake2b_compress = blake2b_compress_sse41;
-    return 0;
-  }
-#endif
-#if (defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64)))
-  if (sodium_runtime_has_ssse3()) {
-    blake2b_compress = blake2b_compress_ssse3;
-    return 0;
-  }
-#endif
-  blake2b_compress = blake2b_compress_ref;
-
-  return 0;
-/* LCOV_EXCL_STOP */
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,97 +0,0 @@
-/*
-   BLAKE2 reference source code package - reference C implementations
-
-   Written in 2012 by Samuel Neves <sneves@dei.uc.pt>
-
-   To the extent possible under law, the author(s) have dedicated all copyright
-   and related and neighboring rights to this software to the public domain
-   worldwide. This software is distributed without any warranty.
-
-   All code is triple-licensed under the
-   [CC0](http://creativecommons.org/publicdomain/zero/1.0), the
-   [OpenSSL Licence](https://www.openssl.org/source/license.html), or
-   the [Apache Public License 2.0](http://www.apache.org/licenses/LICENSE-2.0),
-   at your choosing.
- */
-
-#ifndef blake2_H
-#define blake2_H
-
-#include <stddef.h>
-#include <stdint.h>
-
-#include "crypto_generichash_blake2b.h"
-#include "export.h"
-
-#define blake2b_init_param               crypto_generichash_blake2b__init_param
-#define blake2b_init                     crypto_generichash_blake2b__init
-#define blake2b_init_salt_personal       crypto_generichash_blake2b__init_salt_personal
-#define blake2b_init_key                 crypto_generichash_blake2b__init_key
-#define blake2b_init_key_salt_personal   crypto_generichash_blake2b__init_key_salt_personal
-#define blake2b_update                   crypto_generichash_blake2b__update
-#define blake2b_final                    crypto_generichash_blake2b__final
-#define blake2b                          crypto_generichash_blake2b__blake2b
-#define blake2b_salt_personal            crypto_generichash_blake2b__blake2b_salt_personal
-#define blake2b_pick_best_implementation crypto_generichash_blake2b__pick_best_implementation
-
-enum blake2b_constant
-{
-  BLAKE2B_BLOCKBYTES = 128,
-  BLAKE2B_OUTBYTES   = 64,
-  BLAKE2B_KEYBYTES   = 64,
-  BLAKE2B_SALTBYTES  = 16,
-  BLAKE2B_PERSONALBYTES = 16
-};
-
-#if defined(__IBMC__) || defined(__SUNPRO_C) || defined(__SUNPRO_CC)
-# pragma pack(1)
-#else
-# pragma pack(push, 1)
-#endif
-
-typedef struct blake2b_param_
-{
-  uint8_t  digest_length;  /*  1 */
-  uint8_t  key_length;     /*  2 */
-  uint8_t  fanout;         /*  3 */
-  uint8_t  depth;          /*  4 */
-  uint8_t  leaf_length[4]; /*  8 */
-  uint8_t  node_offset[8]; /* 16 */
-  uint8_t  node_depth;     /* 17 */
-  uint8_t  inner_length;   /* 18 */
-  uint8_t  reserved[14];   /* 32 */
-  uint8_t  salt[BLAKE2B_SALTBYTES]; /* 48 */
-  uint8_t  personal[BLAKE2B_PERSONALBYTES];  /* 64 */
-} blake2b_param;
-
-typedef crypto_generichash_blake2b_state blake2b_state;
-
-#if defined(__IBMC__) || defined(__SUNPRO_C) || defined(__SUNPRO_CC)
-# pragma pack()
-#else
-# pragma pack(pop)
-#endif
-
-/* Streaming API */
-int blake2b_init( blake2b_state *S, const uint8_t outlen );
-int blake2b_init_salt_personal( blake2b_state *S, const uint8_t outlen,
-                                const void *personal, const void *salt );
-int blake2b_init_key( blake2b_state *S, const uint8_t outlen, const void *key, const uint8_t keylen );
-int blake2b_init_key_salt_personal( blake2b_state *S, const uint8_t outlen, const void *key, const uint8_t keylen,
-                                    const void *salt, const void *personal );
-int blake2b_init_param( blake2b_state *S, const blake2b_param *P );
-int blake2b_update( blake2b_state *S, const uint8_t *in, uint64_t inlen );
-int blake2b_final( blake2b_state *S, uint8_t *out, uint8_t outlen );
-
-/* Simple API */
-int blake2b( uint8_t *out, const void *in, const void *key, const uint8_t outlen, const uint64_t inlen, uint8_t keylen );
-int blake2b_salt_personal( uint8_t *out, const void *in, const void *key, const uint8_t outlen, const uint64_t inlen, uint8_t keylen, const void *salt, const void *personal );
-
-typedef int ( *blake2b_compress_fn )( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] );
-int blake2b_pick_best_implementation(void);
-int blake2b_compress_ref( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] );
-int blake2b_compress_ssse3( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] );
-int blake2b_compress_sse41( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] );
-int blake2b_compress_avx2( blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES] );
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2-impl.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2-impl.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/blake2-impl.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/blake2-impl.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,48 +0,0 @@
-/*
-   BLAKE2 reference source code package - reference C implementations
-
-   Written in 2012 by Samuel Neves <sneves@dei.uc.pt>
-
-   To the extent possible under law, the author(s) have dedicated all copyright
-   and related and neighboring rights to this software to the public domain
-   worldwide. This software is distributed without any warranty.
-
-   You should have received a copy of the CC0 Public Domain Dedication along with
-   this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
-*/
-
-#ifndef blake2_impl_H
-#define blake2_impl_H
-
-#include <stdint.h>
-#include <string.h>
-
-#include "utils.h"
-
-static inline uint32_t rotl32( const uint32_t w, const unsigned c )
-{
-  return ( w << c ) | ( w >> ( 32 - c ) );
-}
-
-static inline uint64_t rotl64( const uint64_t w, const unsigned c )
-{
-  return ( w << c ) | ( w >> ( 64 - c ) );
-}
-
-static inline uint32_t rotr32( const uint32_t w, const unsigned c )
-{
-  return ( w >> c ) | ( w << ( 32 - c ) );
-}
-
-static inline uint64_t rotr64( const uint64_t w, const unsigned c )
-{
-  return ( w >> c ) | ( w << ( 64 - c ) );
-}
-
-/* prevents compiler optimizing out memset() */
-static inline void secure_zero_memory( void *v, size_t n )
-{
-  sodium_memzero(v, n);
-}
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/generichash_blake2b.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/generichash_blake2b.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2/ref/generichash_blake2b.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2/ref/generichash_blake2b.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,114 +0,0 @@
-
-#include <assert.h>
-#include <limits.h>
-#include <stdint.h>
-
-#include "crypto_generichash_blake2b.h"
-#include "blake2.h"
-
-int
-crypto_generichash_blake2b(unsigned char *out, size_t outlen,
-                           const unsigned char *in, unsigned long long inlen,
-                           const unsigned char *key, size_t keylen)
-{
-    if (outlen <= 0U || outlen > BLAKE2B_OUTBYTES ||
-        keylen > BLAKE2B_KEYBYTES || inlen > UINT64_MAX) {
-        return -1;
-    }
-    assert(outlen <= UINT8_MAX);
-    assert(keylen <= UINT8_MAX);
-
-    return blake2b((uint8_t *) out, in, key,
-                   (uint8_t) outlen, (uint64_t) inlen, (uint8_t) keylen);
-}
-
-int
-crypto_generichash_blake2b_salt_personal(unsigned char *out, size_t outlen,
-                                         const unsigned char *in, unsigned long long inlen,
-                                         const unsigned char *key, size_t keylen,
-                                         const unsigned char *salt,
-                                         const unsigned char *personal)
-{
-    if (outlen <= 0U || outlen > BLAKE2B_OUTBYTES ||
-        keylen > BLAKE2B_KEYBYTES || inlen > UINT64_MAX) {
-        return -1;
-    }
-    assert(outlen <= UINT8_MAX);
-    assert(keylen <= UINT8_MAX);
-
-    return blake2b_salt_personal((uint8_t *) out, in, key,
-                                 (uint8_t) outlen, (uint64_t) inlen, (uint8_t) keylen,
-                                 salt, personal);
-}
-
-int
-crypto_generichash_blake2b_init(crypto_generichash_blake2b_state *state,
-                                const unsigned char *key,
-                                const size_t keylen, const size_t outlen)
-{
-    if (outlen <= 0U || outlen > BLAKE2B_OUTBYTES ||
-        keylen > BLAKE2B_KEYBYTES) {
-        return -1;
-    }
-    assert(outlen <= UINT8_MAX);
-    assert(keylen <= UINT8_MAX);
-    if (key == NULL || keylen <= 0U) {
-        if (blake2b_init(state, (uint8_t) outlen) != 0) {
-            return -1; /* LCOV_EXCL_LINE */
-        }
-    } else if (blake2b_init_key(state, (uint8_t) outlen, key,
-                                (uint8_t) keylen) != 0) {
-        return -1; /* LCOV_EXCL_LINE */
-    }
-    return 0;
-}
-
-int
-crypto_generichash_blake2b_init_salt_personal(crypto_generichash_blake2b_state *state,
-                                              const unsigned char *key,
-                                              const size_t keylen, const size_t outlen,
-                                              const unsigned char *salt,
-                                              const unsigned char *personal)
-{
-    if (outlen <= 0U || outlen > BLAKE2B_OUTBYTES ||
-        keylen > BLAKE2B_KEYBYTES) {
-        return -1;
-    }
-    assert(outlen <= UINT8_MAX);
-    assert(keylen <= UINT8_MAX);
-    if (key == NULL || keylen <= 0U) {
-        if (blake2b_init_salt_personal(state, (uint8_t) outlen,
-                                       salt, personal) != 0) {
-            return -1; /* LCOV_EXCL_LINE */
-        }
-    } else if (blake2b_init_key_salt_personal(state,
-                                              (uint8_t) outlen, key,
-                                              (uint8_t) keylen,
-                                              salt, personal) != 0) {
-        return -1; /* LCOV_EXCL_LINE */
-    }
-    return 0;
-}
-
-int
-crypto_generichash_blake2b_update(crypto_generichash_blake2b_state *state,
-                                  const unsigned char *in,
-                                  unsigned long long inlen)
-{
-    return blake2b_update(state, (const uint8_t *) in, (uint64_t) inlen);
-}
-
-int
-crypto_generichash_blake2b_final(crypto_generichash_blake2b_state *state,
-                                 unsigned char *out,
-                                 const size_t outlen)
-{
-    assert(outlen <= UINT8_MAX);
-    return blake2b_final(state, (uint8_t *) out, (uint8_t) outlen);
-}
-
-int
-_crypto_generichash_blake2b_pick_best_implementation(void)
-{
-    return blake2b_pick_best_implementation();
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/generichash_blake2.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/generichash_blake2.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/generichash_blake2.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/generichash_blake2.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,55 @@
+#include "crypto_generichash_blake2b.h"
+#include "randombytes.h"
+
+size_t
+crypto_generichash_blake2b_bytes_min(void) {
+    return crypto_generichash_blake2b_BYTES_MIN;
+}
+
+size_t
+crypto_generichash_blake2b_bytes_max(void) {
+    return crypto_generichash_blake2b_BYTES_MAX;
+}
+
+size_t
+crypto_generichash_blake2b_bytes(void) {
+    return crypto_generichash_blake2b_BYTES;
+}
+
+size_t
+crypto_generichash_blake2b_keybytes_min(void) {
+    return crypto_generichash_blake2b_KEYBYTES_MIN;
+}
+
+size_t
+crypto_generichash_blake2b_keybytes_max(void) {
+    return crypto_generichash_blake2b_KEYBYTES_MAX;
+}
+
+size_t
+crypto_generichash_blake2b_keybytes(void) {
+    return crypto_generichash_blake2b_KEYBYTES;
+}
+
+size_t
+crypto_generichash_blake2b_saltbytes(void) {
+    return crypto_generichash_blake2b_SALTBYTES;
+}
+
+size_t
+crypto_generichash_blake2b_personalbytes(void) {
+    return crypto_generichash_blake2b_PERSONALBYTES;
+}
+
+size_t
+crypto_generichash_blake2b_statebytes(void)
+{
+    return (sizeof(crypto_generichash_blake2b_state) + (size_t) 63U)
+        & ~(size_t) 63U;
+}
+
+void
+crypto_generichash_blake2b_keygen(unsigned char k[crypto_generichash_blake2b_KEYBYTES])
+{
+    randombytes_buf(k, crypto_generichash_blake2b_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.c	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,49 @@
+
+#define BLAKE2_USE_SSSE3
+#define BLAKE2_USE_SSE41
+#define BLAKE2_USE_AVX2
+
+#include <stdint.h>
+#include <string.h>
+
+#include "blake2.h"
+#include "private/common.h"
+#include "private/sse2_64_32.h"
+
+#if defined(HAVE_AVX2INTRIN_H) && defined(HAVE_EMMINTRIN_H) && \
+    defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)
+
+# ifdef __GNUC__
+#  pragma GCC target("sse2")
+#  pragma GCC target("ssse3")
+#  pragma GCC target("sse4.1")
+#  pragma GCC target("avx2")
+# endif
+
+#include <emmintrin.h>
+#include <immintrin.h>
+#include <smmintrin.h>
+#include <tmmintrin.h>
+
+#include "blake2b-compress-avx2.h"
+
+CRYPTO_ALIGN(64)
+static const uint64_t blake2b_IV[8] = {
+    0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
+    0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
+    0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
+};
+
+int
+blake2b_compress_avx2(blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES])
+{
+    __m256i a = LOADU(&S->h[0]);
+    __m256i b = LOADU(&S->h[4]);
+    BLAKE2B_COMPRESS_V1(a, b, block, S->t[0], S->t[1], S->f[0], S->f[1]);
+    STOREU(&S->h[0], a);
+    STOREU(&S->h[4], b);
+
+    return 0;
+}
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-avx2.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,140 @@
+
+#ifndef blake2b_compress_avx2_H
+#define blake2b_compress_avx2_H
+
+#define LOAD128(p) _mm_load_si128((__m128i *) (p))
+#define STORE128(p, r) _mm_store_si128((__m128i *) (p), r)
+
+#define LOADU128(p) _mm_loadu_si128((__m128i *) (p))
+#define STOREU128(p, r) _mm_storeu_si128((__m128i *) (p), r)
+
+#define LOAD(p) _mm256_load_si256((__m256i *) (p))
+#define STORE(p, r) _mm256_store_si256((__m256i *) (p), r)
+
+#define LOADU(p) _mm256_loadu_si256((__m256i *) (p))
+#define STOREU(p, r) _mm256_storeu_si256((__m256i *) (p), r)
+
+static inline uint64_t
+LOADU64(const void *p)
+{
+    uint64_t v;
+    memcpy(&v, p, sizeof v);
+    return v;
+}
+
+#define ROTATE16                                                              \
+    _mm256_setr_epi8(2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9, 2, \
+                     3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9)
+
+#define ROTATE24                                                              \
+    _mm256_setr_epi8(3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10, 3, \
+                     4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10)
+
+#define ADD(a, b) _mm256_add_epi64(a, b)
+#define SUB(a, b) _mm256_sub_epi64(a, b)
+
+#define XOR(a, b) _mm256_xor_si256(a, b)
+#define AND(a, b) _mm256_and_si256(a, b)
+#define OR(a, b) _mm256_or_si256(a, b)
+
+#define ROT32(x) _mm256_shuffle_epi32((x), _MM_SHUFFLE(2, 3, 0, 1))
+#define ROT24(x) _mm256_shuffle_epi8((x), ROTATE24)
+#define ROT16(x) _mm256_shuffle_epi8((x), ROTATE16)
+#define ROT63(x) _mm256_or_si256(_mm256_srli_epi64((x), 63), ADD((x), (x)))
+
+#define BLAKE2B_G1_V1(a, b, c, d, m) \
+    do {                             \
+        a = ADD(a, m);               \
+        a = ADD(a, b);               \
+        d = XOR(d, a);               \
+        d = ROT32(d);                \
+        c = ADD(c, d);               \
+        b = XOR(b, c);               \
+        b = ROT24(b);                \
+    } while (0)
+
+#define BLAKE2B_G2_V1(a, b, c, d, m) \
+    do {                             \
+        a = ADD(a, m);               \
+        a = ADD(a, b);               \
+        d = XOR(d, a);               \
+        d = ROT16(d);                \
+        c = ADD(c, d);               \
+        b = XOR(b, c);               \
+        b = ROT63(b);                \
+    } while (0)
+
+#define BLAKE2B_DIAG_V1(a, b, c, d)                               \
+    do {                                                          \
+        d = _mm256_permute4x64_epi64(d, _MM_SHUFFLE(2, 1, 0, 3)); \
+        c = _mm256_permute4x64_epi64(c, _MM_SHUFFLE(1, 0, 3, 2)); \
+        b = _mm256_permute4x64_epi64(b, _MM_SHUFFLE(0, 3, 2, 1)); \
+    } while (0)
+
+#define BLAKE2B_UNDIAG_V1(a, b, c, d)                             \
+    do {                                                          \
+        d = _mm256_permute4x64_epi64(d, _MM_SHUFFLE(0, 3, 2, 1)); \
+        c = _mm256_permute4x64_epi64(c, _MM_SHUFFLE(1, 0, 3, 2)); \
+        b = _mm256_permute4x64_epi64(b, _MM_SHUFFLE(2, 1, 0, 3)); \
+    } while (0)
+
+#include "blake2b-load-avx2.h"
+
+#define BLAKE2B_ROUND_V1(a, b, c, d, r, m) \
+    do {                                   \
+        __m256i b0;                        \
+        BLAKE2B_LOAD_MSG_##r##_1(b0);      \
+        BLAKE2B_G1_V1(a, b, c, d, b0);     \
+        BLAKE2B_LOAD_MSG_##r##_2(b0);      \
+        BLAKE2B_G2_V1(a, b, c, d, b0);     \
+        BLAKE2B_DIAG_V1(a, b, c, d);       \
+        BLAKE2B_LOAD_MSG_##r##_3(b0);      \
+        BLAKE2B_G1_V1(a, b, c, d, b0);     \
+        BLAKE2B_LOAD_MSG_##r##_4(b0);      \
+        BLAKE2B_G2_V1(a, b, c, d, b0);     \
+        BLAKE2B_UNDIAG_V1(a, b, c, d);     \
+    } while (0)
+
+#define BLAKE2B_ROUNDS_V1(a, b, c, d, m)       \
+    do {                                       \
+        BLAKE2B_ROUND_V1(a, b, c, d, 0, (m));  \
+        BLAKE2B_ROUND_V1(a, b, c, d, 1, (m));  \
+        BLAKE2B_ROUND_V1(a, b, c, d, 2, (m));  \
+        BLAKE2B_ROUND_V1(a, b, c, d, 3, (m));  \
+        BLAKE2B_ROUND_V1(a, b, c, d, 4, (m));  \
+        BLAKE2B_ROUND_V1(a, b, c, d, 5, (m));  \
+        BLAKE2B_ROUND_V1(a, b, c, d, 6, (m));  \
+        BLAKE2B_ROUND_V1(a, b, c, d, 7, (m));  \
+        BLAKE2B_ROUND_V1(a, b, c, d, 8, (m));  \
+        BLAKE2B_ROUND_V1(a, b, c, d, 9, (m));  \
+        BLAKE2B_ROUND_V1(a, b, c, d, 10, (m)); \
+        BLAKE2B_ROUND_V1(a, b, c, d, 11, (m)); \
+    } while (0)
+
+#define DECLARE_MESSAGE_WORDS(m)                                         \
+    const __m256i m0 = _mm256_broadcastsi128_si256(LOADU128((m) + 0));   \
+    const __m256i m1 = _mm256_broadcastsi128_si256(LOADU128((m) + 16));  \
+    const __m256i m2 = _mm256_broadcastsi128_si256(LOADU128((m) + 32));  \
+    const __m256i m3 = _mm256_broadcastsi128_si256(LOADU128((m) + 48));  \
+    const __m256i m4 = _mm256_broadcastsi128_si256(LOADU128((m) + 64));  \
+    const __m256i m5 = _mm256_broadcastsi128_si256(LOADU128((m) + 80));  \
+    const __m256i m6 = _mm256_broadcastsi128_si256(LOADU128((m) + 96));  \
+    const __m256i m7 = _mm256_broadcastsi128_si256(LOADU128((m) + 112)); \
+    __m256i       t0, t1;
+
+#define BLAKE2B_COMPRESS_V1(a, b, m, t0, t1, f0, f1)                      \
+    do {                                                                  \
+        DECLARE_MESSAGE_WORDS(m)                                          \
+        const __m256i iv0 = a;                                            \
+        const __m256i iv1 = b;                                            \
+        __m256i       c   = LOAD(&blake2b_IV[0]);                         \
+        __m256i       d =                                                 \
+            XOR(LOAD(&blake2b_IV[4]), _mm256_set_epi64x(f1, f0, t1, t0)); \
+        BLAKE2B_ROUNDS_V1(a, b, c, d, m);                                 \
+        a = XOR(a, c);                                                    \
+        b = XOR(b, d);                                                    \
+        a = XOR(a, iv0);                                                  \
+        b = XOR(b, iv1);                                                  \
+    } while (0)
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ref.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ref.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ref.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ref.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,92 @@
+
+#include <stdint.h>
+#include <string.h>
+
+#include "blake2.h"
+#include "private/common.h"
+
+CRYPTO_ALIGN(64)
+static const uint64_t blake2b_IV[8] = {
+    0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
+    0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
+    0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
+};
+
+static const uint8_t blake2b_sigma[12][16] = {
+    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },
+    { 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3 },
+    { 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4 },
+    { 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8 },
+    { 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13 },
+    { 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9 },
+    { 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11 },
+    { 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10 },
+    { 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5 },
+    { 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0 },
+    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 },
+    { 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3 }
+};
+
+int
+blake2b_compress_ref(blake2b_state *S, const uint8_t block[BLAKE2B_BLOCKBYTES])
+{
+    uint64_t m[16];
+    uint64_t v[16];
+    int      i;
+
+    for (i   = 0; i < 16; ++i)
+        m[i] = LOAD64_LE(block + i * sizeof(m[i]));
+
+    for (i   = 0; i < 8; ++i)
+        v[i] = S->h[i];
+
+    v[8]  = blake2b_IV[0];
+    v[9]  = blake2b_IV[1];
+    v[10] = blake2b_IV[2];
+    v[11] = blake2b_IV[3];
+    v[12] = S->t[0] ^ blake2b_IV[4];
+    v[13] = S->t[1] ^ blake2b_IV[5];
+    v[14] = S->f[0] ^ blake2b_IV[6];
+    v[15] = S->f[1] ^ blake2b_IV[7];
+#define G(r, i, a, b, c, d)                         \
+    do {                                            \
+        a = a + b + m[blake2b_sigma[r][2 * i + 0]]; \
+        d = ROTR64(d ^ a, 32);                      \
+        c = c + d;                                  \
+        b = ROTR64(b ^ c, 24);                      \
+        a = a + b + m[blake2b_sigma[r][2 * i + 1]]; \
+        d = ROTR64(d ^ a, 16);                      \
+        c = c + d;                                  \
+        b = ROTR64(b ^ c, 63);                      \
+    } while (0)
+#define ROUND(r)                           \
+    do {                                   \
+        G(r, 0, v[0], v[4], v[8], v[12]);  \
+        G(r, 1, v[1], v[5], v[9], v[13]);  \
+        G(r, 2, v[2], v[6], v[10], v[14]); \
+        G(r, 3, v[3], v[7], v[11], v[15]); \
+        G(r, 4, v[0], v[5], v[10], v[15]); \
+        G(r, 5, v[1], v[6], v[11], v[12]); \
+        G(r, 6, v[2], v[7], v[8], v[13]);  \
+        G(r, 7, v[3], v[4], v[9], v[14]);  \
+    } while (0)
+    ROUND(0);
+    ROUND(1);
+    ROUND(2);
+    ROUND(3);
+    ROUND(4);
+    ROUND(5);
+    ROUND(6);
+    ROUND(7);
+    ROUND(8);
+    ROUND(9);
+    ROUND(10);
+    ROUND(11);
+
+    for (i      = 0; i < 8; ++i)
+        S->h[i] = S->h[i] ^ v[i] ^ v[i + 8];
+
+#undef G
+#undef ROUND
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.c	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,87 @@
+
+#define BLAKE2_USE_SSSE3
+#define BLAKE2_USE_SSE41
+
+#include <stdint.h>
+#include <string.h>
+
+#include "blake2.h"
+#include "private/common.h"
+#include "private/sse2_64_32.h"
+
+#if defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H) && \
+    defined(HAVE_SMMINTRIN_H)
+
+# ifdef __GNUC__
+#  pragma GCC target("sse2")
+#  pragma GCC target("ssse3")
+#  pragma GCC target("sse4.1")
+# endif
+
+#include <emmintrin.h>
+#include <smmintrin.h>
+#include <tmmintrin.h>
+
+#include "blake2b-compress-sse41.h"
+
+CRYPTO_ALIGN(64)
+static const uint64_t blake2b_IV[8] = {
+    0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
+    0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
+    0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
+};
+
+int
+blake2b_compress_sse41(blake2b_state *S,
+                       const uint8_t  block[BLAKE2B_BLOCKBYTES])
+{
+    __m128i       row1l, row1h;
+    __m128i       row2l, row2h;
+    __m128i       row3l, row3h;
+    __m128i       row4l, row4h;
+    __m128i       b0, b1;
+    __m128i       t0, t1;
+    const __m128i r16 =
+        _mm_setr_epi8(2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
+    const __m128i r24 =
+        _mm_setr_epi8(3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
+    const __m128i m0 = LOADU(block + 00);
+    const __m128i m1 = LOADU(block + 16);
+    const __m128i m2 = LOADU(block + 32);
+    const __m128i m3 = LOADU(block + 48);
+    const __m128i m4 = LOADU(block + 64);
+    const __m128i m5 = LOADU(block + 80);
+    const __m128i m6 = LOADU(block + 96);
+    const __m128i m7 = LOADU(block + 112);
+    row1l            = LOADU(&S->h[0]);
+    row1h            = LOADU(&S->h[2]);
+    row2l            = LOADU(&S->h[4]);
+    row2h            = LOADU(&S->h[6]);
+    row3l            = LOADU(&blake2b_IV[0]);
+    row3h            = LOADU(&blake2b_IV[2]);
+    row4l            = _mm_xor_si128(LOADU(&blake2b_IV[4]), LOADU(&S->t[0]));
+    row4h            = _mm_xor_si128(LOADU(&blake2b_IV[6]), LOADU(&S->f[0]));
+    ROUND(0);
+    ROUND(1);
+    ROUND(2);
+    ROUND(3);
+    ROUND(4);
+    ROUND(5);
+    ROUND(6);
+    ROUND(7);
+    ROUND(8);
+    ROUND(9);
+    ROUND(10);
+    ROUND(11);
+    row1l = _mm_xor_si128(row3l, row1l);
+    row1h = _mm_xor_si128(row3h, row1h);
+    STOREU(&S->h[0], _mm_xor_si128(LOADU(&S->h[0]), row1l));
+    STOREU(&S->h[2], _mm_xor_si128(LOADU(&S->h[2]), row1h));
+    row2l = _mm_xor_si128(row4l, row2l);
+    row2h = _mm_xor_si128(row4h, row2h);
+    STOREU(&S->h[4], _mm_xor_si128(LOADU(&S->h[4]), row2l));
+    STOREU(&S->h[6], _mm_xor_si128(LOADU(&S->h[6]), row2h));
+    return 0;
+}
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-sse41.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,103 @@
+
+#ifndef blake2b_compress_sse41_H
+#define blake2b_compress_sse41_H
+
+#define LOADU(p) _mm_loadu_si128((const __m128i *) (const void *) (p))
+#define STOREU(p, r) _mm_storeu_si128((__m128i *) (void *) (p), r)
+
+#define _mm_roti_epi64(x, c)                                         \
+    (-(c) == 32)                                                     \
+        ? _mm_shuffle_epi32((x), _MM_SHUFFLE(2, 3, 0, 1))            \
+        : (-(c) == 24)                                               \
+              ? _mm_shuffle_epi8((x), r24)                           \
+              : (-(c) == 16)                                         \
+                    ? _mm_shuffle_epi8((x), r16)                     \
+                    : (-(c) == 63)                                   \
+                          ? _mm_xor_si128(_mm_srli_epi64((x), -(c)), \
+                                          _mm_add_epi64((x), (x)))   \
+                          : _mm_xor_si128(_mm_srli_epi64((x), -(c)), \
+                                          _mm_slli_epi64((x), 64 - (-(c))))
+
+#define G1(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1) \
+    row1l = _mm_add_epi64(_mm_add_epi64(row1l, b0), row2l);                \
+    row1h = _mm_add_epi64(_mm_add_epi64(row1h, b1), row2h);                \
+                                                                           \
+    row4l = _mm_xor_si128(row4l, row1l);                                   \
+    row4h = _mm_xor_si128(row4h, row1h);                                   \
+                                                                           \
+    row4l = _mm_roti_epi64(row4l, -32);                                    \
+    row4h = _mm_roti_epi64(row4h, -32);                                    \
+                                                                           \
+    row3l = _mm_add_epi64(row3l, row4l);                                   \
+    row3h = _mm_add_epi64(row3h, row4h);                                   \
+                                                                           \
+    row2l = _mm_xor_si128(row2l, row3l);                                   \
+    row2h = _mm_xor_si128(row2h, row3h);                                   \
+                                                                           \
+    row2l = _mm_roti_epi64(row2l, -24);                                    \
+    row2h = _mm_roti_epi64(row2h, -24);
+
+#define G2(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1) \
+    row1l = _mm_add_epi64(_mm_add_epi64(row1l, b0), row2l);                \
+    row1h = _mm_add_epi64(_mm_add_epi64(row1h, b1), row2h);                \
+                                                                           \
+    row4l = _mm_xor_si128(row4l, row1l);                                   \
+    row4h = _mm_xor_si128(row4h, row1h);                                   \
+                                                                           \
+    row4l = _mm_roti_epi64(row4l, -16);                                    \
+    row4h = _mm_roti_epi64(row4h, -16);                                    \
+                                                                           \
+    row3l = _mm_add_epi64(row3l, row4l);                                   \
+    row3h = _mm_add_epi64(row3h, row4h);                                   \
+                                                                           \
+    row2l = _mm_xor_si128(row2l, row3l);                                   \
+    row2h = _mm_xor_si128(row2h, row3h);                                   \
+                                                                           \
+    row2l = _mm_roti_epi64(row2l, -63);                                    \
+    row2h = _mm_roti_epi64(row2h, -63);
+
+#define DIAGONALIZE(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h) \
+    t0    = _mm_alignr_epi8(row2h, row2l, 8);                               \
+    t1    = _mm_alignr_epi8(row2l, row2h, 8);                               \
+    row2l = t0;                                                             \
+    row2h = t1;                                                             \
+                                                                            \
+    t0    = row3l;                                                          \
+    row3l = row3h;                                                          \
+    row3h = t0;                                                             \
+                                                                            \
+    t0    = _mm_alignr_epi8(row4h, row4l, 8);                               \
+    t1    = _mm_alignr_epi8(row4l, row4h, 8);                               \
+    row4l = t1;                                                             \
+    row4h = t0;
+
+#define UNDIAGONALIZE(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h) \
+    t0    = _mm_alignr_epi8(row2l, row2h, 8);                                 \
+    t1    = _mm_alignr_epi8(row2h, row2l, 8);                                 \
+    row2l = t0;                                                               \
+    row2h = t1;                                                               \
+                                                                              \
+    t0    = row3l;                                                            \
+    row3l = row3h;                                                            \
+    row3h = t0;                                                               \
+                                                                              \
+    t0    = _mm_alignr_epi8(row4l, row4h, 8);                                 \
+    t1    = _mm_alignr_epi8(row4h, row4l, 8);                                 \
+    row4l = t1;                                                               \
+    row4h = t0;
+
+#include "blake2b-load-sse41.h"
+
+#define ROUND(r)                                                         \
+    LOAD_MSG_##r##_1(b0, b1);                                            \
+    G1(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1);  \
+    LOAD_MSG_##r##_2(b0, b1);                                            \
+    G2(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1);  \
+    DIAGONALIZE(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h); \
+    LOAD_MSG_##r##_3(b0, b1);                                            \
+    G1(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1);  \
+    LOAD_MSG_##r##_4(b0, b1);                                            \
+    G2(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1);  \
+    UNDIAGONALIZE(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h);
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,90 @@
+
+#include <stdint.h>
+#include <string.h>
+
+#include "blake2.h"
+#include "private/common.h"
+#include "private/sse2_64_32.h"
+
+#if defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)
+
+# ifdef __GNUC__
+#  pragma GCC target("sse2")
+#  pragma GCC target("ssse3")
+# endif
+
+#include <emmintrin.h>
+#include <tmmintrin.h>
+
+#include "blake2b-compress-ssse3.h"
+
+CRYPTO_ALIGN(64)
+static const uint64_t blake2b_IV[8] = {
+    0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
+    0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
+    0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
+};
+
+int
+blake2b_compress_ssse3(blake2b_state *S,
+                       const uint8_t  block[BLAKE2B_BLOCKBYTES])
+{
+    __m128i       row1l, row1h;
+    __m128i       row2l, row2h;
+    __m128i       row3l, row3h;
+    __m128i       row4l, row4h;
+    __m128i       b0, b1;
+    __m128i       t0, t1;
+    const __m128i r16 =
+        _mm_setr_epi8(2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9);
+    const __m128i r24 =
+        _mm_setr_epi8(3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10);
+    const uint64_t m0  = ((uint64_t *) block)[0];
+    const uint64_t m1  = ((uint64_t *) block)[1];
+    const uint64_t m2  = ((uint64_t *) block)[2];
+    const uint64_t m3  = ((uint64_t *) block)[3];
+    const uint64_t m4  = ((uint64_t *) block)[4];
+    const uint64_t m5  = ((uint64_t *) block)[5];
+    const uint64_t m6  = ((uint64_t *) block)[6];
+    const uint64_t m7  = ((uint64_t *) block)[7];
+    const uint64_t m8  = ((uint64_t *) block)[8];
+    const uint64_t m9  = ((uint64_t *) block)[9];
+    const uint64_t m10 = ((uint64_t *) block)[10];
+    const uint64_t m11 = ((uint64_t *) block)[11];
+    const uint64_t m12 = ((uint64_t *) block)[12];
+    const uint64_t m13 = ((uint64_t *) block)[13];
+    const uint64_t m14 = ((uint64_t *) block)[14];
+    const uint64_t m15 = ((uint64_t *) block)[15];
+
+    row1l = LOADU(&S->h[0]);
+    row1h = LOADU(&S->h[2]);
+    row2l = LOADU(&S->h[4]);
+    row2h = LOADU(&S->h[6]);
+    row3l = LOADU(&blake2b_IV[0]);
+    row3h = LOADU(&blake2b_IV[2]);
+    row4l = _mm_xor_si128(LOADU(&blake2b_IV[4]), LOADU(&S->t[0]));
+    row4h = _mm_xor_si128(LOADU(&blake2b_IV[6]), LOADU(&S->f[0]));
+    ROUND(0);
+    ROUND(1);
+    ROUND(2);
+    ROUND(3);
+    ROUND(4);
+    ROUND(5);
+    ROUND(6);
+    ROUND(7);
+    ROUND(8);
+    ROUND(9);
+    ROUND(10);
+    ROUND(11);
+    row1l = _mm_xor_si128(row3l, row1l);
+    row1h = _mm_xor_si128(row3h, row1h);
+    STOREU(&S->h[0], _mm_xor_si128(LOADU(&S->h[0]), row1l));
+    STOREU(&S->h[2], _mm_xor_si128(LOADU(&S->h[2]), row1h));
+    row2l = _mm_xor_si128(row4l, row2l);
+    row2h = _mm_xor_si128(row4h, row2h);
+    STOREU(&S->h[4], _mm_xor_si128(LOADU(&S->h[4]), row2l));
+    STOREU(&S->h[6], _mm_xor_si128(LOADU(&S->h[6]), row2h));
+    return 0;
+}
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-compress-ssse3.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,103 @@
+
+#ifndef blake2b_compress_ssse3_H
+#define blake2b_compress_ssse3_H
+
+#define LOADU(p) _mm_loadu_si128((const __m128i *) (const void *) (p))
+#define STOREU(p, r) _mm_storeu_si128((__m128i *) (void *) (p), r)
+
+#define _mm_roti_epi64(x, c)                                         \
+    (-(c) == 32)                                                     \
+        ? _mm_shuffle_epi32((x), _MM_SHUFFLE(2, 3, 0, 1))            \
+        : (-(c) == 24)                                               \
+              ? _mm_shuffle_epi8((x), r24)                           \
+              : (-(c) == 16)                                         \
+                    ? _mm_shuffle_epi8((x), r16)                     \
+                    : (-(c) == 63)                                   \
+                          ? _mm_xor_si128(_mm_srli_epi64((x), -(c)), \
+                                          _mm_add_epi64((x), (x)))   \
+                          : _mm_xor_si128(_mm_srli_epi64((x), -(c)), \
+                                          _mm_slli_epi64((x), 64 - (-(c))))
+
+#define G1(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1) \
+    row1l = _mm_add_epi64(_mm_add_epi64(row1l, b0), row2l);                \
+    row1h = _mm_add_epi64(_mm_add_epi64(row1h, b1), row2h);                \
+                                                                           \
+    row4l = _mm_xor_si128(row4l, row1l);                                   \
+    row4h = _mm_xor_si128(row4h, row1h);                                   \
+                                                                           \
+    row4l = _mm_roti_epi64(row4l, -32);                                    \
+    row4h = _mm_roti_epi64(row4h, -32);                                    \
+                                                                           \
+    row3l = _mm_add_epi64(row3l, row4l);                                   \
+    row3h = _mm_add_epi64(row3h, row4h);                                   \
+                                                                           \
+    row2l = _mm_xor_si128(row2l, row3l);                                   \
+    row2h = _mm_xor_si128(row2h, row3h);                                   \
+                                                                           \
+    row2l = _mm_roti_epi64(row2l, -24);                                    \
+    row2h = _mm_roti_epi64(row2h, -24);
+
+#define G2(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1) \
+    row1l = _mm_add_epi64(_mm_add_epi64(row1l, b0), row2l);                \
+    row1h = _mm_add_epi64(_mm_add_epi64(row1h, b1), row2h);                \
+                                                                           \
+    row4l = _mm_xor_si128(row4l, row1l);                                   \
+    row4h = _mm_xor_si128(row4h, row1h);                                   \
+                                                                           \
+    row4l = _mm_roti_epi64(row4l, -16);                                    \
+    row4h = _mm_roti_epi64(row4h, -16);                                    \
+                                                                           \
+    row3l = _mm_add_epi64(row3l, row4l);                                   \
+    row3h = _mm_add_epi64(row3h, row4h);                                   \
+                                                                           \
+    row2l = _mm_xor_si128(row2l, row3l);                                   \
+    row2h = _mm_xor_si128(row2h, row3h);                                   \
+                                                                           \
+    row2l = _mm_roti_epi64(row2l, -63);                                    \
+    row2h = _mm_roti_epi64(row2h, -63);
+
+#define DIAGONALIZE(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h) \
+    t0    = _mm_alignr_epi8(row2h, row2l, 8);                               \
+    t1    = _mm_alignr_epi8(row2l, row2h, 8);                               \
+    row2l = t0;                                                             \
+    row2h = t1;                                                             \
+                                                                            \
+    t0    = row3l;                                                          \
+    row3l = row3h;                                                          \
+    row3h = t0;                                                             \
+                                                                            \
+    t0    = _mm_alignr_epi8(row4h, row4l, 8);                               \
+    t1    = _mm_alignr_epi8(row4l, row4h, 8);                               \
+    row4l = t1;                                                             \
+    row4h = t0;
+
+#define UNDIAGONALIZE(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h) \
+    t0    = _mm_alignr_epi8(row2l, row2h, 8);                                 \
+    t1    = _mm_alignr_epi8(row2h, row2l, 8);                                 \
+    row2l = t0;                                                               \
+    row2h = t1;                                                               \
+                                                                              \
+    t0    = row3l;                                                            \
+    row3l = row3h;                                                            \
+    row3h = t0;                                                               \
+                                                                              \
+    t0    = _mm_alignr_epi8(row4l, row4h, 8);                                 \
+    t1    = _mm_alignr_epi8(row4h, row4l, 8);                                 \
+    row4l = t1;                                                               \
+    row4h = t0;
+
+#include "blake2b-load-sse2.h"
+
+#define ROUND(r)                                                         \
+    LOAD_MSG_##r##_1(b0, b1);                                            \
+    G1(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1);  \
+    LOAD_MSG_##r##_2(b0, b1);                                            \
+    G2(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1);  \
+    DIAGONALIZE(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h); \
+    LOAD_MSG_##r##_3(b0, b1);                                            \
+    G1(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1);  \
+    LOAD_MSG_##r##_4(b0, b1);                                            \
+    G2(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h, b0, b1);  \
+    UNDIAGONALIZE(row1l, row2l, row3l, row4l, row1h, row2h, row3h, row4h);
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-avx2.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-avx2.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-avx2.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-avx2.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,340 @@
+#ifndef blake2b_load_avx2_H
+#define blake2b_load_avx2_H
+
+#define BLAKE2B_LOAD_MSG_0_1(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m0, m1);    \
+        t1 = _mm256_unpacklo_epi64(m2, m3);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_0_2(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m0, m1);    \
+        t1 = _mm256_unpackhi_epi64(m2, m3);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_0_3(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m4, m5);    \
+        t1 = _mm256_unpacklo_epi64(m6, m7);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_0_4(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m4, m5);    \
+        t1 = _mm256_unpackhi_epi64(m6, m7);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_1_1(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m7, m2);    \
+        t1 = _mm256_unpackhi_epi64(m4, m6);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_1_2(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m5, m4);    \
+        t1 = _mm256_alignr_epi8(m3, m7, 8);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_1_3(b0)                                \
+    do {                                                        \
+        t0 = _mm256_shuffle_epi32(m0, _MM_SHUFFLE(1, 0, 3, 2)); \
+        t1 = _mm256_unpackhi_epi64(m5, m2);                     \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0);                  \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_1_4(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m6, m1);    \
+        t1 = _mm256_unpackhi_epi64(m3, m1);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_2_1(b0)               \
+    do {                                       \
+        t0 = _mm256_alignr_epi8(m6, m5, 8);    \
+        t1 = _mm256_unpackhi_epi64(m2, m7);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_2_2(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m4, m0);    \
+        t1 = _mm256_blend_epi32(m6, m1, 0x33); \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_2_3(b0)               \
+    do {                                       \
+        t0 = _mm256_blend_epi32(m1, m5, 0x33); \
+        t1 = _mm256_unpackhi_epi64(m3, m4);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_2_4(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m7, m3);    \
+        t1 = _mm256_alignr_epi8(m2, m0, 8);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_3_1(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m3, m1);    \
+        t1 = _mm256_unpackhi_epi64(m6, m5);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_3_2(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m4, m0);    \
+        t1 = _mm256_unpacklo_epi64(m6, m7);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_3_3(b0)               \
+    do {                                       \
+        t0 = _mm256_blend_epi32(m2, m1, 0x33); \
+        t1 = _mm256_blend_epi32(m7, m2, 0x33); \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_3_4(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m3, m5);    \
+        t1 = _mm256_unpacklo_epi64(m0, m4);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_4_1(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m4, m2);    \
+        t1 = _mm256_unpacklo_epi64(m1, m5);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_4_2(b0)               \
+    do {                                       \
+        t0 = _mm256_blend_epi32(m3, m0, 0x33); \
+        t1 = _mm256_blend_epi32(m7, m2, 0x33); \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_4_3(b0)               \
+    do {                                       \
+        t0 = _mm256_blend_epi32(m5, m7, 0x33); \
+        t1 = _mm256_blend_epi32(m1, m3, 0x33); \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_4_4(b0)               \
+    do {                                       \
+        t0 = _mm256_alignr_epi8(m6, m0, 8);    \
+        t1 = _mm256_blend_epi32(m6, m4, 0x33); \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_5_1(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m1, m3);    \
+        t1 = _mm256_unpacklo_epi64(m0, m4);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_5_2(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m6, m5);    \
+        t1 = _mm256_unpackhi_epi64(m5, m1);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_5_3(b0)               \
+    do {                                       \
+        t0 = _mm256_blend_epi32(m3, m2, 0x33); \
+        t1 = _mm256_unpackhi_epi64(m7, m0);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_5_4(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m6, m2);    \
+        t1 = _mm256_blend_epi32(m4, m7, 0x33); \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_6_1(b0)               \
+    do {                                       \
+        t0 = _mm256_blend_epi32(m0, m6, 0x33); \
+        t1 = _mm256_unpacklo_epi64(m7, m2);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_6_2(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m2, m7);    \
+        t1 = _mm256_alignr_epi8(m5, m6, 8);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_6_3(b0)                                \
+    do {                                                        \
+        t0 = _mm256_unpacklo_epi64(m0, m3);                     \
+        t1 = _mm256_shuffle_epi32(m4, _MM_SHUFFLE(1, 0, 3, 2)); \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0);                  \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_6_4(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m3, m1);    \
+        t1 = _mm256_blend_epi32(m5, m1, 0x33); \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_7_1(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m6, m3);    \
+        t1 = _mm256_blend_epi32(m1, m6, 0x33); \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_7_2(b0)               \
+    do {                                       \
+        t0 = _mm256_alignr_epi8(m7, m5, 8);    \
+        t1 = _mm256_unpackhi_epi64(m0, m4);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_7_3(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m2, m7);    \
+        t1 = _mm256_unpacklo_epi64(m4, m1);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_7_4(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m0, m2);    \
+        t1 = _mm256_unpacklo_epi64(m3, m5);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_8_1(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m3, m7);    \
+        t1 = _mm256_alignr_epi8(m0, m5, 8);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_8_2(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m7, m4);    \
+        t1 = _mm256_alignr_epi8(m4, m1, 8);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_8_3(b0)               \
+    do {                                       \
+        t0 = m6;                               \
+        t1 = _mm256_alignr_epi8(m5, m0, 8);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_8_4(b0)               \
+    do {                                       \
+        t0 = _mm256_blend_epi32(m3, m1, 0x33); \
+        t1 = m2;                               \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_9_1(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m5, m4);    \
+        t1 = _mm256_unpackhi_epi64(m3, m0);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_9_2(b0)               \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m1, m2);    \
+        t1 = _mm256_blend_epi32(m2, m3, 0x33); \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_9_3(b0)               \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m7, m4);    \
+        t1 = _mm256_unpackhi_epi64(m1, m6);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_9_4(b0)               \
+    do {                                       \
+        t0 = _mm256_alignr_epi8(m7, m5, 8);    \
+        t1 = _mm256_unpacklo_epi64(m6, m0);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_10_1(b0)              \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m0, m1);    \
+        t1 = _mm256_unpacklo_epi64(m2, m3);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_10_2(b0)              \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m0, m1);    \
+        t1 = _mm256_unpackhi_epi64(m2, m3);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_10_3(b0)              \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m4, m5);    \
+        t1 = _mm256_unpacklo_epi64(m6, m7);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_10_4(b0)              \
+    do {                                       \
+        t0 = _mm256_unpackhi_epi64(m4, m5);    \
+        t1 = _mm256_unpackhi_epi64(m6, m7);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_11_1(b0)              \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m7, m2);    \
+        t1 = _mm256_unpackhi_epi64(m4, m6);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_11_2(b0)              \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m5, m4);    \
+        t1 = _mm256_alignr_epi8(m3, m7, 8);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_11_3(b0)                               \
+    do {                                                        \
+        t0 = _mm256_shuffle_epi32(m0, _MM_SHUFFLE(1, 0, 3, 2)); \
+        t1 = _mm256_unpackhi_epi64(m5, m2);                     \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0);                  \
+    } while (0)
+
+#define BLAKE2B_LOAD_MSG_11_4(b0)              \
+    do {                                       \
+        t0 = _mm256_unpacklo_epi64(m6, m1);    \
+        t1 = _mm256_unpackhi_epi64(m3, m1);    \
+        b0 = _mm256_blend_epi32(t0, t1, 0xF0); \
+    } while (0)
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse2.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse2.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse2.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse2.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,164 @@
+/*
+   BLAKE2 reference source code package - optimized C implementations
+
+   Written in 2012 by Samuel Neves <sneves@dei.uc.pt>
+
+   To the extent possible under law, the author(s) have dedicated all copyright
+   and related and neighboring rights to this software to the public domain
+   worldwide. This software is distributed without any warranty.
+
+   You should have received a copy of the CC0 Public Domain Dedication along
+   with
+   this software. If not, see
+   <http://creativecommons.org/publicdomain/zero/1.0/>.
+*/
+
+#ifndef blake2b_load_sse2_H
+#define blake2b_load_sse2_H
+
+#define LOAD_MSG_0_1(b0, b1)     \
+    b0 = _mm_set_epi64x(m2, m0); \
+    b1 = _mm_set_epi64x(m6, m4)
+#define LOAD_MSG_0_2(b0, b1)     \
+    b0 = _mm_set_epi64x(m3, m1); \
+    b1 = _mm_set_epi64x(m7, m5)
+#define LOAD_MSG_0_3(b0, b1)      \
+    b0 = _mm_set_epi64x(m10, m8); \
+    b1 = _mm_set_epi64x(m14, m12)
+#define LOAD_MSG_0_4(b0, b1)      \
+    b0 = _mm_set_epi64x(m11, m9); \
+    b1 = _mm_set_epi64x(m15, m13)
+#define LOAD_MSG_1_1(b0, b1)      \
+    b0 = _mm_set_epi64x(m4, m14); \
+    b1 = _mm_set_epi64x(m13, m9)
+#define LOAD_MSG_1_2(b0, b1)      \
+    b0 = _mm_set_epi64x(m8, m10); \
+    b1 = _mm_set_epi64x(m6, m15)
+#define LOAD_MSG_1_3(b0, b1)     \
+    b0 = _mm_set_epi64x(m0, m1); \
+    b1 = _mm_set_epi64x(m5, m11)
+#define LOAD_MSG_1_4(b0, b1)      \
+    b0 = _mm_set_epi64x(m2, m12); \
+    b1 = _mm_set_epi64x(m3, m7)
+#define LOAD_MSG_2_1(b0, b1)       \
+    b0 = _mm_set_epi64x(m12, m11); \
+    b1 = _mm_set_epi64x(m15, m5)
+#define LOAD_MSG_2_2(b0, b1)     \
+    b0 = _mm_set_epi64x(m0, m8); \
+    b1 = _mm_set_epi64x(m13, m2)
+#define LOAD_MSG_2_3(b0, b1)      \
+    b0 = _mm_set_epi64x(m3, m10); \
+    b1 = _mm_set_epi64x(m9, m7)
+#define LOAD_MSG_2_4(b0, b1)      \
+    b0 = _mm_set_epi64x(m6, m14); \
+    b1 = _mm_set_epi64x(m4, m1)
+#define LOAD_MSG_3_1(b0, b1)     \
+    b0 = _mm_set_epi64x(m3, m7); \
+    b1 = _mm_set_epi64x(m11, m13)
+#define LOAD_MSG_3_2(b0, b1)     \
+    b0 = _mm_set_epi64x(m1, m9); \
+    b1 = _mm_set_epi64x(m14, m12)
+#define LOAD_MSG_3_3(b0, b1)     \
+    b0 = _mm_set_epi64x(m5, m2); \
+    b1 = _mm_set_epi64x(m15, m4)
+#define LOAD_MSG_3_4(b0, b1)      \
+    b0 = _mm_set_epi64x(m10, m6); \
+    b1 = _mm_set_epi64x(m8, m0)
+#define LOAD_MSG_4_1(b0, b1)     \
+    b0 = _mm_set_epi64x(m5, m9); \
+    b1 = _mm_set_epi64x(m10, m2)
+#define LOAD_MSG_4_2(b0, b1)     \
+    b0 = _mm_set_epi64x(m7, m0); \
+    b1 = _mm_set_epi64x(m15, m4)
+#define LOAD_MSG_4_3(b0, b1)       \
+    b0 = _mm_set_epi64x(m11, m14); \
+    b1 = _mm_set_epi64x(m3, m6)
+#define LOAD_MSG_4_4(b0, b1)      \
+    b0 = _mm_set_epi64x(m12, m1); \
+    b1 = _mm_set_epi64x(m13, m8)
+#define LOAD_MSG_5_1(b0, b1)     \
+    b0 = _mm_set_epi64x(m6, m2); \
+    b1 = _mm_set_epi64x(m8, m0)
+#define LOAD_MSG_5_2(b0, b1)       \
+    b0 = _mm_set_epi64x(m10, m12); \
+    b1 = _mm_set_epi64x(m3, m11)
+#define LOAD_MSG_5_3(b0, b1)     \
+    b0 = _mm_set_epi64x(m7, m4); \
+    b1 = _mm_set_epi64x(m1, m15)
+#define LOAD_MSG_5_4(b0, b1)      \
+    b0 = _mm_set_epi64x(m5, m13); \
+    b1 = _mm_set_epi64x(m9, m14)
+#define LOAD_MSG_6_1(b0, b1)      \
+    b0 = _mm_set_epi64x(m1, m12); \
+    b1 = _mm_set_epi64x(m4, m14)
+#define LOAD_MSG_6_2(b0, b1)      \
+    b0 = _mm_set_epi64x(m15, m5); \
+    b1 = _mm_set_epi64x(m10, m13)
+#define LOAD_MSG_6_3(b0, b1)     \
+    b0 = _mm_set_epi64x(m6, m0); \
+    b1 = _mm_set_epi64x(m8, m9)
+#define LOAD_MSG_6_4(b0, b1)     \
+    b0 = _mm_set_epi64x(m3, m7); \
+    b1 = _mm_set_epi64x(m11, m2)
+#define LOAD_MSG_7_1(b0, b1)      \
+    b0 = _mm_set_epi64x(m7, m13); \
+    b1 = _mm_set_epi64x(m3, m12)
+#define LOAD_MSG_7_2(b0, b1)       \
+    b0 = _mm_set_epi64x(m14, m11); \
+    b1 = _mm_set_epi64x(m9, m1)
+#define LOAD_MSG_7_3(b0, b1)      \
+    b0 = _mm_set_epi64x(m15, m5); \
+    b1 = _mm_set_epi64x(m2, m8)
+#define LOAD_MSG_7_4(b0, b1)     \
+    b0 = _mm_set_epi64x(m4, m0); \
+    b1 = _mm_set_epi64x(m10, m6)
+#define LOAD_MSG_8_1(b0, b1)      \
+    b0 = _mm_set_epi64x(m14, m6); \
+    b1 = _mm_set_epi64x(m0, m11)
+#define LOAD_MSG_8_2(b0, b1)      \
+    b0 = _mm_set_epi64x(m9, m15); \
+    b1 = _mm_set_epi64x(m8, m3)
+#define LOAD_MSG_8_3(b0, b1)       \
+    b0 = _mm_set_epi64x(m13, m12); \
+    b1 = _mm_set_epi64x(m10, m1)
+#define LOAD_MSG_8_4(b0, b1)     \
+    b0 = _mm_set_epi64x(m7, m2); \
+    b1 = _mm_set_epi64x(m5, m4)
+#define LOAD_MSG_9_1(b0, b1)      \
+    b0 = _mm_set_epi64x(m8, m10); \
+    b1 = _mm_set_epi64x(m1, m7)
+#define LOAD_MSG_9_2(b0, b1)     \
+    b0 = _mm_set_epi64x(m4, m2); \
+    b1 = _mm_set_epi64x(m5, m6)
+#define LOAD_MSG_9_3(b0, b1)      \
+    b0 = _mm_set_epi64x(m9, m15); \
+    b1 = _mm_set_epi64x(m13, m3)
+#define LOAD_MSG_9_4(b0, b1)       \
+    b0 = _mm_set_epi64x(m14, m11); \
+    b1 = _mm_set_epi64x(m0, m12)
+#define LOAD_MSG_10_1(b0, b1)    \
+    b0 = _mm_set_epi64x(m2, m0); \
+    b1 = _mm_set_epi64x(m6, m4)
+#define LOAD_MSG_10_2(b0, b1)    \
+    b0 = _mm_set_epi64x(m3, m1); \
+    b1 = _mm_set_epi64x(m7, m5)
+#define LOAD_MSG_10_3(b0, b1)     \
+    b0 = _mm_set_epi64x(m10, m8); \
+    b1 = _mm_set_epi64x(m14, m12)
+#define LOAD_MSG_10_4(b0, b1)     \
+    b0 = _mm_set_epi64x(m11, m9); \
+    b1 = _mm_set_epi64x(m15, m13)
+#define LOAD_MSG_11_1(b0, b1)     \
+    b0 = _mm_set_epi64x(m4, m14); \
+    b1 = _mm_set_epi64x(m13, m9)
+#define LOAD_MSG_11_2(b0, b1)     \
+    b0 = _mm_set_epi64x(m8, m10); \
+    b1 = _mm_set_epi64x(m6, m15)
+#define LOAD_MSG_11_3(b0, b1)    \
+    b0 = _mm_set_epi64x(m0, m1); \
+    b1 = _mm_set_epi64x(m5, m11)
+#define LOAD_MSG_11_4(b0, b1)     \
+    b0 = _mm_set_epi64x(m2, m12); \
+    b1 = _mm_set_epi64x(m3, m7)
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse41.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse41.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse41.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-load-sse41.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,307 @@
+/*
+   BLAKE2 reference source code package - optimized C implementations
+
+   Written in 2012 by Samuel Neves <sneves@dei.uc.pt>
+
+   To the extent possible under law, the author(s) have dedicated all copyright
+   and related and neighboring rights to this software to the public domain
+   worldwide. This software is distributed without any warranty.
+
+   You should have received a copy of the CC0 Public Domain Dedication along
+   with
+   this software. If not, see
+   <http://creativecommons.org/publicdomain/zero/1.0/>.
+*/
+
+#ifndef blake2b_load_sse41_H
+#define blake2b_load_sse41_H
+
+#define LOAD_MSG_0_1(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m0, m1); \
+        b1 = _mm_unpacklo_epi64(m2, m3); \
+    } while (0)
+
+#define LOAD_MSG_0_2(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpackhi_epi64(m0, m1); \
+        b1 = _mm_unpackhi_epi64(m2, m3); \
+    } while (0)
+
+#define LOAD_MSG_0_3(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m4, m5); \
+        b1 = _mm_unpacklo_epi64(m6, m7); \
+    } while (0)
+
+#define LOAD_MSG_0_4(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpackhi_epi64(m4, m5); \
+        b1 = _mm_unpackhi_epi64(m6, m7); \
+    } while (0)
+
+#define LOAD_MSG_1_1(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m7, m2); \
+        b1 = _mm_unpackhi_epi64(m4, m6); \
+    } while (0)
+
+#define LOAD_MSG_1_2(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m5, m4); \
+        b1 = _mm_alignr_epi8(m3, m7, 8); \
+    } while (0)
+
+#define LOAD_MSG_1_3(b0, b1)                                 \
+    do {                                                     \
+        b0 = _mm_shuffle_epi32(m0, _MM_SHUFFLE(1, 0, 3, 2)); \
+        b1 = _mm_unpackhi_epi64(m5, m2);                     \
+    } while (0)
+
+#define LOAD_MSG_1_4(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m6, m1); \
+        b1 = _mm_unpackhi_epi64(m3, m1); \
+    } while (0)
+
+#define LOAD_MSG_2_1(b0, b1)             \
+    do {                                 \
+        b0 = _mm_alignr_epi8(m6, m5, 8); \
+        b1 = _mm_unpackhi_epi64(m2, m7); \
+    } while (0)
+
+#define LOAD_MSG_2_2(b0, b1)                \
+    do {                                    \
+        b0 = _mm_unpacklo_epi64(m4, m0);    \
+        b1 = _mm_blend_epi16(m1, m6, 0xF0); \
+    } while (0)
+
+#define LOAD_MSG_2_3(b0, b1)                \
+    do {                                    \
+        b0 = _mm_blend_epi16(m5, m1, 0xF0); \
+        b1 = _mm_unpackhi_epi64(m3, m4);    \
+    } while (0)
+
+#define LOAD_MSG_2_4(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m7, m3); \
+        b1 = _mm_alignr_epi8(m2, m0, 8); \
+    } while (0)
+
+#define LOAD_MSG_3_1(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpackhi_epi64(m3, m1); \
+        b1 = _mm_unpackhi_epi64(m6, m5); \
+    } while (0)
+
+#define LOAD_MSG_3_2(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpackhi_epi64(m4, m0); \
+        b1 = _mm_unpacklo_epi64(m6, m7); \
+    } while (0)
+
+#define LOAD_MSG_3_3(b0, b1)                \
+    do {                                    \
+        b0 = _mm_blend_epi16(m1, m2, 0xF0); \
+        b1 = _mm_blend_epi16(m2, m7, 0xF0); \
+    } while (0)
+
+#define LOAD_MSG_3_4(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m3, m5); \
+        b1 = _mm_unpacklo_epi64(m0, m4); \
+    } while (0)
+
+#define LOAD_MSG_4_1(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpackhi_epi64(m4, m2); \
+        b1 = _mm_unpacklo_epi64(m1, m5); \
+    } while (0)
+
+#define LOAD_MSG_4_2(b0, b1)                \
+    do {                                    \
+        b0 = _mm_blend_epi16(m0, m3, 0xF0); \
+        b1 = _mm_blend_epi16(m2, m7, 0xF0); \
+    } while (0)
+
+#define LOAD_MSG_4_3(b0, b1)                \
+    do {                                    \
+        b0 = _mm_blend_epi16(m7, m5, 0xF0); \
+        b1 = _mm_blend_epi16(m3, m1, 0xF0); \
+    } while (0)
+
+#define LOAD_MSG_4_4(b0, b1)                \
+    do {                                    \
+        b0 = _mm_alignr_epi8(m6, m0, 8);    \
+        b1 = _mm_blend_epi16(m4, m6, 0xF0); \
+    } while (0)
+
+#define LOAD_MSG_5_1(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m1, m3); \
+        b1 = _mm_unpacklo_epi64(m0, m4); \
+    } while (0)
+
+#define LOAD_MSG_5_2(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m6, m5); \
+        b1 = _mm_unpackhi_epi64(m5, m1); \
+    } while (0)
+
+#define LOAD_MSG_5_3(b0, b1)                \
+    do {                                    \
+        b0 = _mm_blend_epi16(m2, m3, 0xF0); \
+        b1 = _mm_unpackhi_epi64(m7, m0);    \
+    } while (0)
+
+#define LOAD_MSG_5_4(b0, b1)                \
+    do {                                    \
+        b0 = _mm_unpackhi_epi64(m6, m2);    \
+        b1 = _mm_blend_epi16(m7, m4, 0xF0); \
+    } while (0)
+
+#define LOAD_MSG_6_1(b0, b1)                \
+    do {                                    \
+        b0 = _mm_blend_epi16(m6, m0, 0xF0); \
+        b1 = _mm_unpacklo_epi64(m7, m2);    \
+    } while (0)
+
+#define LOAD_MSG_6_2(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpackhi_epi64(m2, m7); \
+        b1 = _mm_alignr_epi8(m5, m6, 8); \
+    } while (0)
+
+#define LOAD_MSG_6_3(b0, b1)                                 \
+    do {                                                     \
+        b0 = _mm_unpacklo_epi64(m0, m3);                     \
+        b1 = _mm_shuffle_epi32(m4, _MM_SHUFFLE(1, 0, 3, 2)); \
+    } while (0)
+
+#define LOAD_MSG_6_4(b0, b1)                \
+    do {                                    \
+        b0 = _mm_unpackhi_epi64(m3, m1);    \
+        b1 = _mm_blend_epi16(m1, m5, 0xF0); \
+    } while (0)
+
+#define LOAD_MSG_7_1(b0, b1)                \
+    do {                                    \
+        b0 = _mm_unpackhi_epi64(m6, m3);    \
+        b1 = _mm_blend_epi16(m6, m1, 0xF0); \
+    } while (0)
+
+#define LOAD_MSG_7_2(b0, b1)             \
+    do {                                 \
+        b0 = _mm_alignr_epi8(m7, m5, 8); \
+        b1 = _mm_unpackhi_epi64(m0, m4); \
+    } while (0)
+
+#define LOAD_MSG_7_3(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpackhi_epi64(m2, m7); \
+        b1 = _mm_unpacklo_epi64(m4, m1); \
+    } while (0)
+
+#define LOAD_MSG_7_4(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m0, m2); \
+        b1 = _mm_unpacklo_epi64(m3, m5); \
+    } while (0)
+
+#define LOAD_MSG_8_1(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m3, m7); \
+        b1 = _mm_alignr_epi8(m0, m5, 8); \
+    } while (0)
+
+#define LOAD_MSG_8_2(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpackhi_epi64(m7, m4); \
+        b1 = _mm_alignr_epi8(m4, m1, 8); \
+    } while (0)
+
+#define LOAD_MSG_8_3(b0, b1)             \
+    do {                                 \
+        b0 = m6;                         \
+        b1 = _mm_alignr_epi8(m5, m0, 8); \
+    } while (0)
+
+#define LOAD_MSG_8_4(b0, b1)                \
+    do {                                    \
+        b0 = _mm_blend_epi16(m1, m3, 0xF0); \
+        b1 = m2;                            \
+    } while (0)
+
+#define LOAD_MSG_9_1(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m5, m4); \
+        b1 = _mm_unpackhi_epi64(m3, m0); \
+    } while (0)
+
+#define LOAD_MSG_9_2(b0, b1)                \
+    do {                                    \
+        b0 = _mm_unpacklo_epi64(m1, m2);    \
+        b1 = _mm_blend_epi16(m3, m2, 0xF0); \
+    } while (0)
+
+#define LOAD_MSG_9_3(b0, b1)             \
+    do {                                 \
+        b0 = _mm_unpackhi_epi64(m7, m4); \
+        b1 = _mm_unpackhi_epi64(m1, m6); \
+    } while (0)
+
+#define LOAD_MSG_9_4(b0, b1)             \
+    do {                                 \
+        b0 = _mm_alignr_epi8(m7, m5, 8); \
+        b1 = _mm_unpacklo_epi64(m6, m0); \
+    } while (0)
+
+#define LOAD_MSG_10_1(b0, b1)            \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m0, m1); \
+        b1 = _mm_unpacklo_epi64(m2, m3); \
+    } while (0)
+
+#define LOAD_MSG_10_2(b0, b1)            \
+    do {                                 \
+        b0 = _mm_unpackhi_epi64(m0, m1); \
+        b1 = _mm_unpackhi_epi64(m2, m3); \
+    } while (0)
+
+#define LOAD_MSG_10_3(b0, b1)            \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m4, m5); \
+        b1 = _mm_unpacklo_epi64(m6, m7); \
+    } while (0)
+
+#define LOAD_MSG_10_4(b0, b1)            \
+    do {                                 \
+        b0 = _mm_unpackhi_epi64(m4, m5); \
+        b1 = _mm_unpackhi_epi64(m6, m7); \
+    } while (0)
+
+#define LOAD_MSG_11_1(b0, b1)            \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m7, m2); \
+        b1 = _mm_unpackhi_epi64(m4, m6); \
+    } while (0)
+
+#define LOAD_MSG_11_2(b0, b1)            \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m5, m4); \
+        b1 = _mm_alignr_epi8(m3, m7, 8); \
+    } while (0)
+
+#define LOAD_MSG_11_3(b0, b1)                                \
+    do {                                                     \
+        b0 = _mm_shuffle_epi32(m0, _MM_SHUFFLE(1, 0, 3, 2)); \
+        b1 = _mm_unpackhi_epi64(m5, m2);                     \
+    } while (0)
+
+#define LOAD_MSG_11_4(b0, b1)            \
+    do {                                 \
+        b0 = _mm_unpacklo_epi64(m6, m1); \
+        b1 = _mm_unpackhi_epi64(m3, m1); \
+    } while (0)
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-ref.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-ref.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2b-ref.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2b-ref.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,494 @@
+/*
+   BLAKE2 reference source code package - C implementations
+
+   Written in 2012 by Samuel Neves <sneves@dei.uc.pt>
+
+   To the extent possible under law, the author(s) have dedicated all copyright
+   and related and neighboring rights to this software to the public domain
+   worldwide. This software is distributed without any warranty.
+
+   You should have received a copy of the CC0 Public Domain Dedication along
+   with
+   this software. If not, see
+   <http://creativecommons.org/publicdomain/zero/1.0/>.
+*/
+
+#include <assert.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "blake2.h"
+#include "private/common.h"
+#include "runtime.h"
+#include "utils.h"
+
+#ifdef HAVE_TI_MODE
+# if defined(__SIZEOF_INT128__)
+typedef unsigned __int128 uint128_t;
+# else
+typedef unsigned uint128_t __attribute__((mode(TI)));
+# endif
+#endif
+
+static blake2b_compress_fn blake2b_compress = blake2b_compress_ref;
+
+static const uint64_t blake2b_IV[8] = {
+    0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
+    0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
+    0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
+};
+
+/* LCOV_EXCL_START */
+static inline int
+blake2b_set_lastnode(blake2b_state *S)
+{
+    S->f[1] = -1;
+    return 0;
+}
+/* LCOV_EXCL_STOP */
+#if 0
+static inline int blake2b_clear_lastnode( blake2b_state *S )
+{
+  S->f[1] = 0;
+  return 0;
+}
+#endif
+
+static inline int
+blake2b_is_lastblock(const blake2b_state *S)
+{
+    return S->f[0] != 0;
+}
+
+static inline int
+blake2b_set_lastblock(blake2b_state *S)
+{
+    if (S->last_node)
+        blake2b_set_lastnode(S);
+
+    S->f[0] = -1;
+    return 0;
+}
+#if 0
+static inline int blake2b_clear_lastblock( blake2b_state *S )
+{
+  if( S->last_node ) blake2b_clear_lastnode( S );
+
+  S->f[0] = 0;
+  return 0;
+}
+#endif
+static inline int
+blake2b_increment_counter(blake2b_state *S, const uint64_t inc)
+{
+#ifdef HAVE_TI_MODE
+    uint128_t t = ((uint128_t) S->t[1] << 64) | S->t[0];
+    t += inc;
+    S->t[0] = (uint64_t)(t >> 0);
+    S->t[1] = (uint64_t)(t >> 64);
+#else
+    S->t[0] += inc;
+    S->t[1] += (S->t[0] < inc);
+#endif
+    return 0;
+}
+
+/* Parameter-related functions */
+#if 0
+/* Redundant: digest length is directly set in blake2b_init(), blake2b_init_salt_personal(),
+ * blake2b_init_key() and blake2b_init_key_salt_personal() */
+static inline int blake2b_param_set_digest_length( blake2b_param *P, const uint8_t digest_length )
+{
+  P->digest_length = digest_length;
+  return 0;
+}
+
+static inline int blake2b_param_set_fanout( blake2b_param *P, const uint8_t fanout )
+{
+  P->fanout = fanout;
+  return 0;
+}
+
+static inline int blake2b_param_set_max_depth( blake2b_param *P, const uint8_t depth )
+{
+  P->depth = depth;
+  return 0;
+}
+
+static inline int blake2b_param_set_leaf_length( blake2b_param *P, const uint32_t leaf_length )
+{
+  STORE32_LE( P->leaf_length, leaf_length );
+  return 0;
+}
+
+static inline int blake2b_param_set_node_offset( blake2b_param *P, const uint64_t node_offset )
+{
+  STORE64_LE( P->node_offset, node_offset );
+  return 0;
+}
+
+static inline int blake2b_param_set_node_depth( blake2b_param *P, const uint8_t node_depth )
+{
+  P->node_depth = node_depth;
+  return 0;
+}
+
+static inline int blake2b_param_set_inner_length( blake2b_param *P, const uint8_t inner_length )
+{
+  P->inner_length = inner_length;
+  return 0;
+}
+#endif
+static inline int
+blake2b_param_set_salt(blake2b_param *P, const uint8_t salt[BLAKE2B_SALTBYTES])
+{
+    memcpy(P->salt, salt, BLAKE2B_SALTBYTES);
+    return 0;
+}
+
+static inline int
+blake2b_param_set_personal(blake2b_param *P,
+                           const uint8_t  personal[BLAKE2B_PERSONALBYTES])
+{
+    memcpy(P->personal, personal, BLAKE2B_PERSONALBYTES);
+    return 0;
+}
+
+static inline int
+blake2b_init0(blake2b_state *S)
+{
+    int i;
+    memset(S, 0, sizeof(blake2b_state));
+
+    for (i  = 0; i < 8; i++) {
+        S->h[i] = blake2b_IV[i];
+    }
+    return 0;
+}
+
+/* init xors IV with input parameter block */
+int
+blake2b_init_param(blake2b_state *S, const blake2b_param *P)
+{
+    size_t         i;
+    const uint8_t *p;
+
+    COMPILER_ASSERT(sizeof *P == 64);
+    blake2b_init0(S);
+    p = (const uint8_t *) (P);
+
+    /* IV XOR ParamBlock */
+    for (i = 0; i < 8; i++) {
+        S->h[i] ^= LOAD64_LE(p + sizeof(S->h[i]) * i);
+    }
+    return 0;
+}
+
+int
+blake2b_init(blake2b_state *S, const uint8_t outlen)
+{
+    blake2b_param P[1];
+
+    if ((!outlen) || (outlen > BLAKE2B_OUTBYTES))
+        abort();
+
+    P->digest_length = outlen;
+    P->key_length    = 0;
+    P->fanout        = 1;
+    P->depth         = 1;
+    STORE32_LE(P->leaf_length, 0);
+    STORE64_LE(P->node_offset, 0);
+    P->node_depth   = 0;
+    P->inner_length = 0;
+    memset(P->reserved, 0, sizeof(P->reserved));
+    memset(P->salt, 0, sizeof(P->salt));
+    memset(P->personal, 0, sizeof(P->personal));
+    return blake2b_init_param(S, P);
+}
+
+int
+blake2b_init_salt_personal(blake2b_state *S, const uint8_t outlen,
+                           const void *salt, const void *personal)
+{
+    blake2b_param P[1];
+
+    if ((!outlen) || (outlen > BLAKE2B_OUTBYTES))
+        abort();
+
+    P->digest_length = outlen;
+    P->key_length    = 0;
+    P->fanout        = 1;
+    P->depth         = 1;
+    STORE32_LE(P->leaf_length, 0);
+    STORE64_LE(P->node_offset, 0);
+    P->node_depth   = 0;
+    P->inner_length = 0;
+    memset(P->reserved, 0, sizeof(P->reserved));
+    if (salt != NULL) {
+        blake2b_param_set_salt(P, (const uint8_t *) salt);
+    } else {
+        memset(P->salt, 0, sizeof(P->salt));
+    }
+    if (personal != NULL) {
+        blake2b_param_set_personal(P, (const uint8_t *) personal);
+    } else {
+        memset(P->personal, 0, sizeof(P->personal));
+    }
+    return blake2b_init_param(S, P);
+}
+
+int
+blake2b_init_key(blake2b_state *S, const uint8_t outlen, const void *key,
+                 const uint8_t keylen)
+{
+    blake2b_param P[1];
+
+    if ((!outlen) || (outlen > BLAKE2B_OUTBYTES))
+        abort();
+
+    if (!key || !keylen || keylen > BLAKE2B_KEYBYTES)
+        abort();
+
+    P->digest_length = outlen;
+    P->key_length    = keylen;
+    P->fanout        = 1;
+    P->depth         = 1;
+    STORE32_LE(P->leaf_length, 0);
+    STORE64_LE(P->node_offset, 0);
+    P->node_depth   = 0;
+    P->inner_length = 0;
+    memset(P->reserved, 0, sizeof(P->reserved));
+    memset(P->salt, 0, sizeof(P->salt));
+    memset(P->personal, 0, sizeof(P->personal));
+
+    if (blake2b_init_param(S, P) < 0)
+        abort();
+
+    {
+        uint8_t block[BLAKE2B_BLOCKBYTES];
+        memset(block, 0, BLAKE2B_BLOCKBYTES);
+        memcpy(block, key, keylen);
+        blake2b_update(S, block, BLAKE2B_BLOCKBYTES);
+        sodium_memzero(block, BLAKE2B_BLOCKBYTES); /* Burn the key from stack */
+    }
+    return 0;
+}
+
+int
+blake2b_init_key_salt_personal(blake2b_state *S, const uint8_t outlen,
+                               const void *key, const uint8_t keylen,
+                               const void *salt, const void *personal)
+{
+    blake2b_param P[1];
+
+    if ((!outlen) || (outlen > BLAKE2B_OUTBYTES))
+        abort();
+
+    if (!key || !keylen || keylen > BLAKE2B_KEYBYTES)
+        abort();
+
+    P->digest_length = outlen;
+    P->key_length    = keylen;
+    P->fanout        = 1;
+    P->depth         = 1;
+    STORE32_LE(P->leaf_length, 0);
+    STORE64_LE(P->node_offset, 0);
+    P->node_depth   = 0;
+    P->inner_length = 0;
+    memset(P->reserved, 0, sizeof(P->reserved));
+    if (salt != NULL) {
+        blake2b_param_set_salt(P, (const uint8_t *) salt);
+    } else {
+        memset(P->salt, 0, sizeof(P->salt));
+    }
+    if (personal != NULL) {
+        blake2b_param_set_personal(P, (const uint8_t *) personal);
+    } else {
+        memset(P->personal, 0, sizeof(P->personal));
+    }
+
+    if (blake2b_init_param(S, P) < 0)
+        abort();
+
+    {
+        uint8_t block[BLAKE2B_BLOCKBYTES];
+        memset(block, 0, BLAKE2B_BLOCKBYTES);
+        memcpy(block, key, keylen);
+        blake2b_update(S, block, BLAKE2B_BLOCKBYTES);
+        sodium_memzero(block, BLAKE2B_BLOCKBYTES); /* Burn the key from stack */
+    }
+    return 0;
+}
+
+/* inlen now in bytes */
+int
+blake2b_update(blake2b_state *S, const uint8_t *in, uint64_t inlen)
+{
+    while (inlen > 0) {
+        size_t left = S->buflen;
+        size_t fill = 2 * BLAKE2B_BLOCKBYTES - left;
+
+        if (inlen > fill) {
+            memcpy(S->buf + left, in, fill); /* Fill buffer */
+            S->buflen += fill;
+            blake2b_increment_counter(S, BLAKE2B_BLOCKBYTES);
+            blake2b_compress(S, S->buf); /* Compress */
+            memcpy(S->buf, S->buf + BLAKE2B_BLOCKBYTES,
+                   BLAKE2B_BLOCKBYTES); /* Shift buffer left */
+            S->buflen -= BLAKE2B_BLOCKBYTES;
+            in += fill;
+            inlen -= fill;
+        } else /* inlen <= fill */
+        {
+            memcpy(S->buf + left, in, inlen);
+            S->buflen += inlen; /* Be lazy, do not compress */
+            in += inlen;
+            inlen -= inlen;
+        }
+    }
+
+    return 0;
+}
+
+int
+blake2b_final(blake2b_state *S, uint8_t *out, uint8_t outlen)
+{
+    if (!outlen || outlen > BLAKE2B_OUTBYTES) {
+        abort(); /* LCOV_EXCL_LINE */
+    }
+    if (blake2b_is_lastblock(S)) {
+        return -1;
+    }
+    if (S->buflen > BLAKE2B_BLOCKBYTES) {
+        blake2b_increment_counter(S, BLAKE2B_BLOCKBYTES);
+        blake2b_compress(S, S->buf);
+        S->buflen -= BLAKE2B_BLOCKBYTES;
+        assert(S->buflen <= BLAKE2B_BLOCKBYTES);
+        memcpy(S->buf, S->buf + BLAKE2B_BLOCKBYTES, S->buflen);
+    }
+
+    blake2b_increment_counter(S, S->buflen);
+    blake2b_set_lastblock(S);
+    memset(S->buf + S->buflen, 0,
+           2 * BLAKE2B_BLOCKBYTES - S->buflen); /* Padding */
+    blake2b_compress(S, S->buf);
+
+#ifdef NATIVE_LITTLE_ENDIAN
+    memcpy(out, &S->h[0], outlen);
+#else
+    {
+        uint8_t buffer[BLAKE2B_OUTBYTES];
+        int     i;
+
+        for (i = 0; i < 8; i++) { /* Output full hash to temp buffer */
+            STORE64_LE(buffer + sizeof(S->h[i]) * i, S->h[i]);
+        }
+        memcpy(out, buffer, outlen);
+    }
+#endif
+    return 0;
+}
+
+/* inlen, at least, should be uint64_t. Others can be size_t. */
+int
+blake2b(uint8_t *out, const void *in, const void *key, const uint8_t outlen,
+        const uint64_t inlen, uint8_t keylen)
+{
+    blake2b_state S[1];
+
+    /* Verify parameters */
+    if (NULL == in && inlen > 0)
+        abort();
+
+    if (NULL == out)
+        abort();
+
+    if (!outlen || outlen > BLAKE2B_OUTBYTES)
+        abort();
+
+    if (NULL == key && keylen > 0)
+        abort();
+
+    if (keylen > BLAKE2B_KEYBYTES)
+        abort();
+
+    if (keylen > 0) {
+        if (blake2b_init_key(S, outlen, key, keylen) < 0)
+            abort();
+    } else {
+        if (blake2b_init(S, outlen) < 0)
+            abort();
+    }
+
+    blake2b_update(S, (const uint8_t *) in, inlen);
+    blake2b_final(S, out, outlen);
+    return 0;
+}
+
+int
+blake2b_salt_personal(uint8_t *out, const void *in, const void *key,
+                      const uint8_t outlen, const uint64_t inlen,
+                      uint8_t keylen, const void *salt, const void *personal)
+{
+    blake2b_state S[1];
+
+    /* Verify parameters */
+    if (NULL == in && inlen > 0)
+        abort();
+
+    if (NULL == out)
+        abort();
+
+    if (!outlen || outlen > BLAKE2B_OUTBYTES)
+        abort();
+
+    if (NULL == key && keylen > 0)
+        abort();
+
+    if (keylen > BLAKE2B_KEYBYTES)
+        abort();
+
+    if (keylen > 0) {
+        if (blake2b_init_key_salt_personal(S, outlen, key, keylen, salt,
+                                           personal) < 0)
+            abort();
+    } else {
+        if (blake2b_init_salt_personal(S, outlen, salt, personal) < 0)
+            abort();
+    }
+
+    blake2b_update(S, (const uint8_t *) in, inlen);
+    blake2b_final(S, out, outlen);
+    return 0;
+}
+
+int
+blake2b_pick_best_implementation(void)
+{
+/* LCOV_EXCL_START */
+#if defined(HAVE_AVX2INTRIN_H) && defined(HAVE_TMMINTRIN_H) && \
+    defined(HAVE_SMMINTRIN_H)
+    if (sodium_runtime_has_avx2()) {
+        blake2b_compress = blake2b_compress_avx2;
+        return 0;
+    }
+#endif
+#if defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H) && \
+    defined(HAVE_SMMINTRIN_H)
+    if (sodium_runtime_has_sse41()) {
+        blake2b_compress = blake2b_compress_sse41;
+        return 0;
+    }
+#endif
+#if defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)
+    if (sodium_runtime_has_ssse3()) {
+        blake2b_compress = blake2b_compress_ssse3;
+        return 0;
+    }
+#endif
+    blake2b_compress = blake2b_compress_ref;
+
+    return 0;
+    /* LCOV_EXCL_STOP */
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2.h libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2.h
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/blake2.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/blake2.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,109 @@
+/*
+   BLAKE2 reference source code package - reference C implementations
+
+   Written in 2012 by Samuel Neves <sneves@dei.uc.pt>
+
+   To the extent possible under law, the author(s) have dedicated all copyright
+   and related and neighboring rights to this software to the public domain
+   worldwide. This software is distributed without any warranty.
+
+   All code is triple-licensed under the
+   [CC0](http://creativecommons.org/publicdomain/zero/1.0), the
+   [OpenSSL Licence](https://www.openssl.org/source/license.html), or
+   the [Apache Public License 2.0](http://www.apache.org/licenses/LICENSE-2.0),
+   at your choosing.
+ */
+
+#ifndef blake2_H
+#define blake2_H
+
+#include <stddef.h>
+#include <stdint.h>
+
+#include "crypto_generichash_blake2b.h"
+#include "export.h"
+
+#define blake2b_init_param crypto_generichash_blake2b__init_param
+#define blake2b_init crypto_generichash_blake2b__init
+#define blake2b_init_salt_personal \
+    crypto_generichash_blake2b__init_salt_personal
+#define blake2b_init_key crypto_generichash_blake2b__init_key
+#define blake2b_init_key_salt_personal \
+    crypto_generichash_blake2b__init_key_salt_personal
+#define blake2b_update crypto_generichash_blake2b__update
+#define blake2b_final crypto_generichash_blake2b__final
+#define blake2b crypto_generichash_blake2b__blake2b
+#define blake2b_salt_personal crypto_generichash_blake2b__blake2b_salt_personal
+#define blake2b_pick_best_implementation \
+    crypto_generichash_blake2b__pick_best_implementation
+
+enum blake2b_constant {
+    BLAKE2B_BLOCKBYTES    = 128,
+    BLAKE2B_OUTBYTES      = 64,
+    BLAKE2B_KEYBYTES      = 64,
+    BLAKE2B_SALTBYTES     = 16,
+    BLAKE2B_PERSONALBYTES = 16
+};
+
+#if defined(__IBMC__) || defined(__SUNPRO_C) || defined(__SUNPRO_CC)
+#pragma pack(1)
+#else
+#pragma pack(push, 1)
+#endif
+
+typedef struct blake2b_param_ {
+    uint8_t digest_length;                   /*  1 */
+    uint8_t key_length;                      /*  2 */
+    uint8_t fanout;                          /*  3 */
+    uint8_t depth;                           /*  4 */
+    uint8_t leaf_length[4];                  /*  8 */
+    uint8_t node_offset[8];                  /* 16 */
+    uint8_t node_depth;                      /* 17 */
+    uint8_t inner_length;                    /* 18 */
+    uint8_t reserved[14];                    /* 32 */
+    uint8_t salt[BLAKE2B_SALTBYTES];         /* 48 */
+    uint8_t personal[BLAKE2B_PERSONALBYTES]; /* 64 */
+} blake2b_param;
+
+typedef crypto_generichash_blake2b_state blake2b_state;
+
+#if defined(__IBMC__) || defined(__SUNPRO_C) || defined(__SUNPRO_CC)
+#pragma pack()
+#else
+#pragma pack(pop)
+#endif
+
+/* Streaming API */
+int blake2b_init(blake2b_state *S, const uint8_t outlen);
+int blake2b_init_salt_personal(blake2b_state *S, const uint8_t outlen,
+                               const void *personal, const void *salt);
+int blake2b_init_key(blake2b_state *S, const uint8_t outlen, const void *key,
+                     const uint8_t keylen);
+int blake2b_init_key_salt_personal(blake2b_state *S, const uint8_t outlen,
+                                   const void *key, const uint8_t keylen,
+                                   const void *salt, const void *personal);
+int blake2b_init_param(blake2b_state *S, const blake2b_param *P);
+int blake2b_update(blake2b_state *S, const uint8_t *in, uint64_t inlen);
+int blake2b_final(blake2b_state *S, uint8_t *out, uint8_t outlen);
+
+/* Simple API */
+int blake2b(uint8_t *out, const void *in, const void *key, const uint8_t outlen,
+            const uint64_t inlen, uint8_t keylen);
+int blake2b_salt_personal(uint8_t *out, const void *in, const void *key,
+                          const uint8_t outlen, const uint64_t inlen,
+                          uint8_t keylen, const void *salt,
+                          const void *personal);
+
+typedef int (*blake2b_compress_fn)(blake2b_state *S,
+                                   const uint8_t  block[BLAKE2B_BLOCKBYTES]);
+int blake2b_pick_best_implementation(void);
+int blake2b_compress_ref(blake2b_state *S,
+                         const uint8_t  block[BLAKE2B_BLOCKBYTES]);
+int blake2b_compress_ssse3(blake2b_state *S,
+                           const uint8_t  block[BLAKE2B_BLOCKBYTES]);
+int blake2b_compress_sse41(blake2b_state *S,
+                           const uint8_t  block[BLAKE2B_BLOCKBYTES]);
+int blake2b_compress_avx2(blake2b_state *S,
+                          const uint8_t  block[BLAKE2B_BLOCKBYTES]);
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/generichash_blake2b.c libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/generichash_blake2b.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/blake2b/ref/generichash_blake2b.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/blake2b/ref/generichash_blake2b.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,110 @@
+
+#include <assert.h>
+#include <limits.h>
+#include <stdint.h>
+
+#include "blake2.h"
+#include "crypto_generichash_blake2b.h"
+
+int
+crypto_generichash_blake2b(unsigned char *out, size_t outlen,
+                           const unsigned char *in, unsigned long long inlen,
+                           const unsigned char *key, size_t keylen)
+{
+    if (outlen <= 0U || outlen > BLAKE2B_OUTBYTES ||
+        keylen > BLAKE2B_KEYBYTES || inlen > UINT64_MAX) {
+        return -1;
+    }
+    assert(outlen <= UINT8_MAX);
+    assert(keylen <= UINT8_MAX);
+
+    return blake2b((uint8_t *) out, in, key, (uint8_t) outlen, (uint64_t) inlen,
+                   (uint8_t) keylen);
+}
+
+int
+crypto_generichash_blake2b_salt_personal(
+    unsigned char *out, size_t outlen, const unsigned char *in,
+    unsigned long long inlen, const unsigned char *key, size_t keylen,
+    const unsigned char *salt, const unsigned char *personal)
+{
+    if (outlen <= 0U || outlen > BLAKE2B_OUTBYTES ||
+        keylen > BLAKE2B_KEYBYTES || inlen > UINT64_MAX) {
+        return -1;
+    }
+    assert(outlen <= UINT8_MAX);
+    assert(keylen <= UINT8_MAX);
+
+    return blake2b_salt_personal((uint8_t *) out, in, key, (uint8_t) outlen,
+                                 (uint64_t) inlen, (uint8_t) keylen, salt,
+                                 personal);
+}
+
+int
+crypto_generichash_blake2b_init(crypto_generichash_blake2b_state *state,
+                                const unsigned char *key, const size_t keylen,
+                                const size_t outlen)
+{
+    if (outlen <= 0U || outlen > BLAKE2B_OUTBYTES ||
+        keylen > BLAKE2B_KEYBYTES) {
+        return -1;
+    }
+    assert(outlen <= UINT8_MAX);
+    assert(keylen <= UINT8_MAX);
+    if (key == NULL || keylen <= 0U) {
+        if (blake2b_init(state, (uint8_t) outlen) != 0) {
+            return -1; /* LCOV_EXCL_LINE */
+        }
+    } else if (blake2b_init_key(state, (uint8_t) outlen, key,
+                                (uint8_t) keylen) != 0) {
+        return -1; /* LCOV_EXCL_LINE */
+    }
+    return 0;
+}
+
+int
+crypto_generichash_blake2b_init_salt_personal(
+    crypto_generichash_blake2b_state *state, const unsigned char *key,
+    const size_t keylen, const size_t outlen, const unsigned char *salt,
+    const unsigned char *personal)
+{
+    if (outlen <= 0U || outlen > BLAKE2B_OUTBYTES ||
+        keylen > BLAKE2B_KEYBYTES) {
+        return -1;
+    }
+    assert(outlen <= UINT8_MAX);
+    assert(keylen <= UINT8_MAX);
+    if (key == NULL || keylen <= 0U) {
+        if (blake2b_init_salt_personal(state, (uint8_t) outlen, salt,
+                                       personal) != 0) {
+            return -1; /* LCOV_EXCL_LINE */
+        }
+    } else if (blake2b_init_key_salt_personal(state, (uint8_t) outlen, key,
+                                              (uint8_t) keylen, salt,
+                                              personal) != 0) {
+        return -1; /* LCOV_EXCL_LINE */
+    }
+    return 0;
+}
+
+int
+crypto_generichash_blake2b_update(crypto_generichash_blake2b_state *state,
+                                  const unsigned char *             in,
+                                  unsigned long long                inlen)
+{
+    return blake2b_update(state, (const uint8_t *) in, (uint64_t) inlen);
+}
+
+int
+crypto_generichash_blake2b_final(crypto_generichash_blake2b_state *state,
+                                 unsigned char *out, const size_t outlen)
+{
+    assert(outlen <= UINT8_MAX);
+    return blake2b_final(state, (uint8_t *) out, (uint8_t) outlen);
+}
+
+int
+_crypto_generichash_blake2b_pick_best_implementation(void)
+{
+    return blake2b_pick_best_implementation();
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_generichash/crypto_generichash.c libsodium-1.0.12/src/libsodium/crypto_generichash/crypto_generichash.c
--- libsodium-1.0.11/src/libsodium/crypto_generichash/crypto_generichash.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_generichash/crypto_generichash.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,5 +1,6 @@
 
 #include "crypto_generichash.h"
+#include "randombytes.h"
 
 size_t
 crypto_generichash_bytes_min(void)
@@ -82,3 +83,9 @@ crypto_generichash_final(crypto_generich
     return crypto_generichash_blake2b_final
         ((crypto_generichash_blake2b_state *) state, out, outlen);
 }
+
+void
+crypto_generichash_keygen(unsigned char k[crypto_generichash_KEYBYTES])
+{
+    randombytes_buf(k, crypto_generichash_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_hash/sha256/cp/hash_sha256.c libsodium-1.0.12/src/libsodium/crypto_hash/sha256/cp/hash_sha256.c
--- libsodium-1.0.11/src/libsodium/crypto_hash/sha256/cp/hash_sha256.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_hash/sha256/cp/hash_sha256.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,269 +0,0 @@
-
-/*-
- * Copyright 2005,2007,2009 Colin Percival
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- */
-
-#include "crypto_hash_sha256.h"
-#include "utils.h"
-#include "private/common.h"
-
-#include <sys/types.h>
-
-#include <limits.h>
-#include <stdint.h>
-#include <stdlib.h>
-#include <string.h>
-
-static void
-be32enc_vect(unsigned char *dst, const uint32_t *src, size_t len)
-{
-    size_t i;
-
-    for (i = 0; i < len / 4; i++) {
-        STORE32_BE(dst + i * 4, src[i]);
-    }
-}
-
-static void
-be32dec_vect(uint32_t *dst, const unsigned char *src, size_t len)
-{
-    size_t i;
-
-    for (i = 0; i < len / 4; i++) {
-        dst[i] = LOAD32_BE(src + i * 4);
-    }
-}
-
-#define Ch(x, y, z)     ((x & (y ^ z)) ^ z)
-#define Maj(x, y, z)    ((x & (y | z)) | (y & z))
-#define SHR(x, n)       (x >> n)
-#define ROTR(x, n)      ((x >> n) | (x << (32 - n)))
-#define S0(x)           (ROTR(x, 2) ^ ROTR(x, 13) ^ ROTR(x, 22))
-#define S1(x)           (ROTR(x, 6) ^ ROTR(x, 11) ^ ROTR(x, 25))
-#define s0(x)           (ROTR(x, 7) ^ ROTR(x, 18) ^ SHR(x, 3))
-#define s1(x)           (ROTR(x, 17) ^ ROTR(x, 19) ^ SHR(x, 10))
-
-#define RND(a, b, c, d, e, f, g, h, k)              \
-    t0 = h + S1(e) + Ch(e, f, g) + k;               \
-    t1 = S0(a) + Maj(a, b, c);                      \
-    d += t0;                                        \
-    h  = t0 + t1;
-
-#define RNDr(S, W, i, k)                    \
-    RND(S[(64 - i) % 8], S[(65 - i) % 8],   \
-        S[(66 - i) % 8], S[(67 - i) % 8],   \
-        S[(68 - i) % 8], S[(69 - i) % 8],   \
-        S[(70 - i) % 8], S[(71 - i) % 8],   \
-        W[i] + k)
-
-static void
-SHA256_Transform(uint32_t *state, const unsigned char block[64])
-{
-    uint32_t W[64];
-    uint32_t S[8];
-    uint32_t t0, t1;
-    int i;
-
-    be32dec_vect(W, block, 64);
-    for (i = 16; i < 64; i++) {
-        W[i] = s1(W[i - 2]) + W[i - 7] + s0(W[i - 15]) + W[i - 16];
-    }
-
-    memcpy(S, state, 32);
-
-    RNDr(S, W, 0, 0x428a2f98);
-    RNDr(S, W, 1, 0x71374491);
-    RNDr(S, W, 2, 0xb5c0fbcf);
-    RNDr(S, W, 3, 0xe9b5dba5);
-    RNDr(S, W, 4, 0x3956c25b);
-    RNDr(S, W, 5, 0x59f111f1);
-    RNDr(S, W, 6, 0x923f82a4);
-    RNDr(S, W, 7, 0xab1c5ed5);
-    RNDr(S, W, 8, 0xd807aa98);
-    RNDr(S, W, 9, 0x12835b01);
-    RNDr(S, W, 10, 0x243185be);
-    RNDr(S, W, 11, 0x550c7dc3);
-    RNDr(S, W, 12, 0x72be5d74);
-    RNDr(S, W, 13, 0x80deb1fe);
-    RNDr(S, W, 14, 0x9bdc06a7);
-    RNDr(S, W, 15, 0xc19bf174);
-    RNDr(S, W, 16, 0xe49b69c1);
-    RNDr(S, W, 17, 0xefbe4786);
-    RNDr(S, W, 18, 0x0fc19dc6);
-    RNDr(S, W, 19, 0x240ca1cc);
-    RNDr(S, W, 20, 0x2de92c6f);
-    RNDr(S, W, 21, 0x4a7484aa);
-    RNDr(S, W, 22, 0x5cb0a9dc);
-    RNDr(S, W, 23, 0x76f988da);
-    RNDr(S, W, 24, 0x983e5152);
-    RNDr(S, W, 25, 0xa831c66d);
-    RNDr(S, W, 26, 0xb00327c8);
-    RNDr(S, W, 27, 0xbf597fc7);
-    RNDr(S, W, 28, 0xc6e00bf3);
-    RNDr(S, W, 29, 0xd5a79147);
-    RNDr(S, W, 30, 0x06ca6351);
-    RNDr(S, W, 31, 0x14292967);
-    RNDr(S, W, 32, 0x27b70a85);
-    RNDr(S, W, 33, 0x2e1b2138);
-    RNDr(S, W, 34, 0x4d2c6dfc);
-    RNDr(S, W, 35, 0x53380d13);
-    RNDr(S, W, 36, 0x650a7354);
-    RNDr(S, W, 37, 0x766a0abb);
-    RNDr(S, W, 38, 0x81c2c92e);
-    RNDr(S, W, 39, 0x92722c85);
-    RNDr(S, W, 40, 0xa2bfe8a1);
-    RNDr(S, W, 41, 0xa81a664b);
-    RNDr(S, W, 42, 0xc24b8b70);
-    RNDr(S, W, 43, 0xc76c51a3);
-    RNDr(S, W, 44, 0xd192e819);
-    RNDr(S, W, 45, 0xd6990624);
-    RNDr(S, W, 46, 0xf40e3585);
-    RNDr(S, W, 47, 0x106aa070);
-    RNDr(S, W, 48, 0x19a4c116);
-    RNDr(S, W, 49, 0x1e376c08);
-    RNDr(S, W, 50, 0x2748774c);
-    RNDr(S, W, 51, 0x34b0bcb5);
-    RNDr(S, W, 52, 0x391c0cb3);
-    RNDr(S, W, 53, 0x4ed8aa4a);
-    RNDr(S, W, 54, 0x5b9cca4f);
-    RNDr(S, W, 55, 0x682e6ff3);
-    RNDr(S, W, 56, 0x748f82ee);
-    RNDr(S, W, 57, 0x78a5636f);
-    RNDr(S, W, 58, 0x84c87814);
-    RNDr(S, W, 59, 0x8cc70208);
-    RNDr(S, W, 60, 0x90befffa);
-    RNDr(S, W, 61, 0xa4506ceb);
-    RNDr(S, W, 62, 0xbef9a3f7);
-    RNDr(S, W, 63, 0xc67178f2);
-
-    for (i = 0; i < 8; i++) {
-        state[i] += S[i];
-    }
-
-    sodium_memzero((void *) W, sizeof W);
-    sodium_memzero((void *) S, sizeof S);
-    sodium_memzero((void *) &t0, sizeof t0);
-    sodium_memzero((void *) &t1, sizeof t1);
-}
-
-static unsigned char PAD[64] = {
-    0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-};
-
-static void
-SHA256_Pad(crypto_hash_sha256_state *state)
-{
-    unsigned char len[8];
-    uint32_t r, plen;
-
-    STORE64_BE(len, state->count);
-
-    r = (state->count >> 3) & 0x3f;
-    plen = (r < 56) ? (56 - r) : (120 - r);
-    crypto_hash_sha256_update(state, PAD, (unsigned long long) plen);
-
-    crypto_hash_sha256_update(state, len, 8);
-}
-
-int
-crypto_hash_sha256_init(crypto_hash_sha256_state *state)
-{
-    static const uint32_t sha256_initstate[8] = {
-        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
-        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
-    };
-
-    state->count = (uint64_t) 0U;
-    memcpy(state->state, sha256_initstate, sizeof sha256_initstate);
-
-    return 0;
-}
-
-int
-crypto_hash_sha256_update(crypto_hash_sha256_state *state,
-                          const unsigned char *in,
-                          unsigned long long inlen)
-{
-    unsigned long long i;
-    uint32_t r;
-
-    if (inlen <= 0U) {
-        return 0;
-    }
-    r = (state->count >> 3) & 0x3f;
-    state->count += (uint64_t)(inlen) << 3;
-
-    if (inlen < 64 - r) {
-        for (i = 0; i < inlen; i++) {
-            state->buf[r + i] = in[i];
-        }
-        return 0;
-    }
-    for (i = 0; i < 64 - r; i++) {
-        state->buf[r + i] = in[i];
-    }
-    SHA256_Transform(state->state, state->buf);
-    in += 64 - r;
-    inlen -= 64 - r;
-
-    while (inlen >= 64) {
-        SHA256_Transform(state->state, in);
-        in += 64;
-        inlen -= 64;
-    }
-    inlen &= 63;
-    for (i = 0; i < inlen; i++) {
-        state->buf[i] = in[i];
-    }
-    return 0;
-}
-
-int
-crypto_hash_sha256_final(crypto_hash_sha256_state *state,
-                         unsigned char *out)
-{
-    SHA256_Pad(state);
-    be32enc_vect(out, state->state, 32);
-    sodium_memzero((void *) state, sizeof *state);
-
-    return 0;
-}
-
-int
-crypto_hash_sha256(unsigned char *out, const unsigned char *in,
-                   unsigned long long inlen)
-{
-    crypto_hash_sha256_state state;
-
-    crypto_hash_sha256_init(&state);
-    crypto_hash_sha256_update(&state, in, inlen);
-    crypto_hash_sha256_final(&state, out);
-
-    return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_hash/sha256/cp/hash_sha256_cp.c libsodium-1.0.12/src/libsodium/crypto_hash/sha256/cp/hash_sha256_cp.c
--- libsodium-1.0.11/src/libsodium/crypto_hash/sha256/cp/hash_sha256_cp.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_hash/sha256/cp/hash_sha256_cp.c	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,254 @@
+
+/*-
+ * Copyright 2005,2007,2009 Colin Percival
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ */
+
+#include <limits.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <sys/types.h>
+
+#include "crypto_hash_sha256.h"
+#include "private/common.h"
+#include "utils.h"
+
+static void
+be32enc_vect(unsigned char *dst, const uint32_t *src, size_t len)
+{
+    size_t i;
+
+    for (i = 0; i < len / 4; i++) {
+        STORE32_BE(dst + i * 4, src[i]);
+    }
+}
+
+static void
+be32dec_vect(uint32_t *dst, const unsigned char *src, size_t len)
+{
+    size_t i;
+
+    for (i = 0; i < len / 4; i++) {
+        dst[i] = LOAD32_BE(src + i * 4);
+    }
+}
+
+static const uint32_t Krnd[64] = {
+    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,
+    0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
+    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,
+    0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
+    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
+    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
+    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,
+    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
+    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
+    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
+    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
+};
+
+#define Ch(x, y, z) ((x & (y ^ z)) ^ z)
+#define Maj(x, y, z) ((x & (y | z)) | (y & z))
+#define SHR(x, n) (x >> n)
+#define ROTR(x, n) ROTR32(x, n)
+#define S0(x) (ROTR(x, 2) ^ ROTR(x, 13) ^ ROTR(x, 22))
+#define S1(x) (ROTR(x, 6) ^ ROTR(x, 11) ^ ROTR(x, 25))
+#define s0(x) (ROTR(x, 7) ^ ROTR(x, 18) ^ SHR(x, 3))
+#define s1(x) (ROTR(x, 17) ^ ROTR(x, 19) ^ SHR(x, 10))
+
+#define RND(a, b, c, d, e, f, g, h, k) \
+    h += S1(e) + Ch(e, f, g) + k;      \
+    d += h;                            \
+    h += S0(a) + Maj(a, b, c);
+
+#define RNDr(S, W, i, ii)                                                   \
+    RND(S[(64 - i) % 8], S[(65 - i) % 8], S[(66 - i) % 8], S[(67 - i) % 8], \
+        S[(68 - i) % 8], S[(69 - i) % 8], S[(70 - i) % 8], S[(71 - i) % 8], \
+        W[i + ii] + Krnd[i + ii])
+
+#define MSCH(W, ii, i) \
+    W[i + ii + 16] =   \
+        s1(W[i + ii + 14]) + W[i + ii + 9] + s0(W[i + ii + 1]) + W[i + ii]
+
+static void
+SHA256_Transform(uint32_t state[8], const uint8_t block[64], uint32_t W[64],
+                 uint32_t S[8])
+{
+    int i;
+
+    be32dec_vect(W, block, 64);
+    memcpy(S, state, 32);
+    for (i = 0; i < 64; i += 16) {
+        RNDr(S, W, 0, i);
+        RNDr(S, W, 1, i);
+        RNDr(S, W, 2, i);
+        RNDr(S, W, 3, i);
+        RNDr(S, W, 4, i);
+        RNDr(S, W, 5, i);
+        RNDr(S, W, 6, i);
+        RNDr(S, W, 7, i);
+        RNDr(S, W, 8, i);
+        RNDr(S, W, 9, i);
+        RNDr(S, W, 10, i);
+        RNDr(S, W, 11, i);
+        RNDr(S, W, 12, i);
+        RNDr(S, W, 13, i);
+        RNDr(S, W, 14, i);
+        RNDr(S, W, 15, i);
+        if (i == 48) {
+            break;
+        }
+        MSCH(W, 0, i);
+        MSCH(W, 1, i);
+        MSCH(W, 2, i);
+        MSCH(W, 3, i);
+        MSCH(W, 4, i);
+        MSCH(W, 5, i);
+        MSCH(W, 6, i);
+        MSCH(W, 7, i);
+        MSCH(W, 8, i);
+        MSCH(W, 9, i);
+        MSCH(W, 10, i);
+        MSCH(W, 11, i);
+        MSCH(W, 12, i);
+        MSCH(W, 13, i);
+        MSCH(W, 14, i);
+        MSCH(W, 15, i);
+    }
+    for (i = 0; i < 8; i++) {
+        state[i] += S[i];
+    }
+}
+
+static const uint8_t PAD[64] = { 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+                                 0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+                                 0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+                                 0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+                                 0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+
+static void
+SHA256_Pad(crypto_hash_sha256_state *state, uint32_t tmp32[64 + 8])
+{
+    uint64_t r;
+    uint64_t i;
+
+    r = (state->count >> 3) & 0x3f;
+    if (r < 56) {
+        for (i = 0; i < 56 - r; i++) {
+            state->buf[r + i] = PAD[i];
+        }
+    } else {
+        for (i = 0; i < 64 - r; i++) {
+            state->buf[r + i] = PAD[i];
+        }
+        SHA256_Transform(state->state, state->buf, &tmp32[0], &tmp32[64]);
+        memset(&state->buf[0], 0, 56);
+    }
+    STORE64_BE(&state->buf[56], state->count);
+    SHA256_Transform(state->state, state->buf, &tmp32[0], &tmp32[64]);
+}
+
+int
+crypto_hash_sha256_init(crypto_hash_sha256_state *state)
+{
+    static const uint32_t sha256_initial_state[8] = { 0x6a09e667, 0xbb67ae85,
+                                                      0x3c6ef372, 0xa54ff53a,
+                                                      0x510e527f, 0x9b05688c,
+                                                      0x1f83d9ab, 0x5be0cd19 };
+
+    state->count = (uint64_t) 0U;
+    memcpy(state->state, sha256_initial_state, sizeof sha256_initial_state);
+
+    return 0;
+}
+
+int
+crypto_hash_sha256_update(crypto_hash_sha256_state *state,
+                          const unsigned char *in, unsigned long long inlen)
+{
+    uint32_t           tmp32[64 + 8];
+    unsigned long long i;
+    unsigned long long r;
+
+    if (inlen <= 0U) {
+        return 0;
+    }
+    r = (unsigned long long) ((state->count >> 3) & 0x3f);
+
+    state->count += ((uint64_t) inlen) << 3;
+    if (inlen < 64 - r) {
+        for (i = 0; i < inlen; i++) {
+            state->buf[r + i] = in[i];
+        }
+        return 0;
+    }
+    for (i = 0; i < 64 - r; i++) {
+        state->buf[r + i] = in[i];
+    }
+    SHA256_Transform(state->state, state->buf, &tmp32[0], &tmp32[64]);
+    in += 64 - r;
+    inlen -= 64 - r;
+
+    while (inlen >= 64) {
+        SHA256_Transform(state->state, in, &tmp32[0], &tmp32[64]);
+        in += 64;
+        inlen -= 64;
+    }
+    inlen &= 63;
+    for (i = 0; i < inlen; i++) {
+        state->buf[i] = in[i];
+    }
+    sodium_memzero((void *) tmp32, sizeof tmp32);
+
+    return 0;
+}
+
+int
+crypto_hash_sha256_final(crypto_hash_sha256_state *state, unsigned char *out)
+{
+    uint32_t tmp32[64 + 8];
+
+    SHA256_Pad(state, tmp32);
+    be32enc_vect(out, state->state, 32);
+    sodium_memzero((void *) tmp32, sizeof tmp32);
+    sodium_memzero((void *) state, sizeof *state);
+
+    return 0;
+}
+
+int
+crypto_hash_sha256(unsigned char *out, const unsigned char *in,
+                   unsigned long long inlen)
+{
+    crypto_hash_sha256_state state;
+
+    crypto_hash_sha256_init(&state);
+    crypto_hash_sha256_update(&state, in, inlen);
+    crypto_hash_sha256_final(&state, out);
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_hash/sha256/hash_sha256_api.c libsodium-1.0.12/src/libsodium/crypto_hash/sha256/hash_sha256_api.c
--- libsodium-1.0.11/src/libsodium/crypto_hash/sha256/hash_sha256_api.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_hash/sha256/hash_sha256_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,11 +0,0 @@
-#include "crypto_hash_sha256.h"
-
-size_t
-crypto_hash_sha256_bytes(void) {
-    return crypto_hash_sha256_BYTES;
-}
-
-size_t
-crypto_hash_sha256_statebytes(void) {
-    return sizeof(crypto_hash_sha256_state);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_hash/sha256/hash_sha256.c libsodium-1.0.12/src/libsodium/crypto_hash/sha256/hash_sha256.c
--- libsodium-1.0.11/src/libsodium/crypto_hash/sha256/hash_sha256.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_hash/sha256/hash_sha256.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,13 @@
+#include "crypto_hash_sha256.h"
+
+size_t
+crypto_hash_sha256_bytes(void)
+{
+    return crypto_hash_sha256_BYTES;
+}
+
+size_t
+crypto_hash_sha256_statebytes(void)
+{
+    return sizeof(crypto_hash_sha256_state);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_hash/sha512/cp/hash_sha512.c libsodium-1.0.12/src/libsodium/crypto_hash/sha512/cp/hash_sha512.c
--- libsodium-1.0.11/src/libsodium/crypto_hash/sha512/cp/hash_sha512.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_hash/sha512/cp/hash_sha512.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,298 +0,0 @@
-
-/*-
- * Copyright 2005,2007,2009 Colin Percival
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- *
- */
-
-#include "crypto_hash_sha512.h"
-#include "utils.h"
-#include "private/common.h"
-
-#include <sys/types.h>
-
-#include <limits.h>
-#include <stdint.h>
-#include <stdlib.h>
-#include <string.h>
-
-static void
-be64enc_vect(unsigned char *dst, const uint64_t *src, size_t len)
-{
-    size_t i;
-
-    for (i = 0; i < len / 8; i++) {
-        STORE64_BE(dst + i * 8, src[i]);
-    }
-}
-
-static void
-be64dec_vect(uint64_t *dst, const unsigned char *src, size_t len)
-{
-    size_t i;
-
-    for (i = 0; i < len / 8; i++) {
-        dst[i] = LOAD64_BE(src + i * 8);
-    }
-}
-
-#define Ch(x, y, z)     ((x & (y ^ z)) ^ z)
-#define Maj(x, y, z)    ((x & (y | z)) | (y & z))
-#define SHR(x, n)       (x >> n)
-#define ROTR(x, n)      ((x >> n) | (x << (64 - n)))
-#define S0(x)           (ROTR(x, 28) ^ ROTR(x, 34) ^ ROTR(x, 39))
-#define S1(x)           (ROTR(x, 14) ^ ROTR(x, 18) ^ ROTR(x, 41))
-#define s0(x)           (ROTR(x, 1) ^ ROTR(x, 8) ^ SHR(x, 7))
-#define s1(x)           (ROTR(x, 19) ^ ROTR(x, 61) ^ SHR(x, 6))
-
-#define RND(a, b, c, d, e, f, g, h, k)              \
-    t0 = h + S1(e) + Ch(e, f, g) + k;               \
-    t1 = S0(a) + Maj(a, b, c);                      \
-    d += t0;                                        \
-    h  = t0 + t1;
-
-#define RNDr(S, W, i, k)                    \
-    RND(S[(80 - i) % 8], S[(81 - i) % 8],   \
-        S[(82 - i) % 8], S[(83 - i) % 8],   \
-        S[(84 - i) % 8], S[(85 - i) % 8],   \
-        S[(86 - i) % 8], S[(87 - i) % 8],   \
-        W[i] + k)
-
-static void
-SHA512_Transform(uint64_t *state, const unsigned char block[128])
-{
-    uint64_t W[80];
-    uint64_t S[8];
-    uint64_t t0, t1;
-    int i;
-
-    be64dec_vect(W, block, 128);
-    for (i = 16; i < 80; i++) {
-        W[i] = s1(W[i - 2]) + W[i - 7] + s0(W[i - 15]) + W[i - 16];
-    }
-
-    memcpy(S, state, 64);
-
-    RNDr(S, W, 0, 0x428a2f98d728ae22ULL);
-    RNDr(S, W, 1, 0x7137449123ef65cdULL);
-    RNDr(S, W, 2, 0xb5c0fbcfec4d3b2fULL);
-    RNDr(S, W, 3, 0xe9b5dba58189dbbcULL);
-    RNDr(S, W, 4, 0x3956c25bf348b538ULL);
-    RNDr(S, W, 5, 0x59f111f1b605d019ULL);
-    RNDr(S, W, 6, 0x923f82a4af194f9bULL);
-    RNDr(S, W, 7, 0xab1c5ed5da6d8118ULL);
-    RNDr(S, W, 8, 0xd807aa98a3030242ULL);
-    RNDr(S, W, 9, 0x12835b0145706fbeULL);
-    RNDr(S, W, 10, 0x243185be4ee4b28cULL);
-    RNDr(S, W, 11, 0x550c7dc3d5ffb4e2ULL);
-    RNDr(S, W, 12, 0x72be5d74f27b896fULL);
-    RNDr(S, W, 13, 0x80deb1fe3b1696b1ULL);
-    RNDr(S, W, 14, 0x9bdc06a725c71235ULL);
-    RNDr(S, W, 15, 0xc19bf174cf692694ULL);
-    RNDr(S, W, 16, 0xe49b69c19ef14ad2ULL);
-    RNDr(S, W, 17, 0xefbe4786384f25e3ULL);
-    RNDr(S, W, 18, 0x0fc19dc68b8cd5b5ULL);
-    RNDr(S, W, 19, 0x240ca1cc77ac9c65ULL);
-    RNDr(S, W, 20, 0x2de92c6f592b0275ULL);
-    RNDr(S, W, 21, 0x4a7484aa6ea6e483ULL);
-    RNDr(S, W, 22, 0x5cb0a9dcbd41fbd4ULL);
-    RNDr(S, W, 23, 0x76f988da831153b5ULL);
-    RNDr(S, W, 24, 0x983e5152ee66dfabULL);
-    RNDr(S, W, 25, 0xa831c66d2db43210ULL);
-    RNDr(S, W, 26, 0xb00327c898fb213fULL);
-    RNDr(S, W, 27, 0xbf597fc7beef0ee4ULL);
-    RNDr(S, W, 28, 0xc6e00bf33da88fc2ULL);
-    RNDr(S, W, 29, 0xd5a79147930aa725ULL);
-    RNDr(S, W, 30, 0x06ca6351e003826fULL);
-    RNDr(S, W, 31, 0x142929670a0e6e70ULL);
-    RNDr(S, W, 32, 0x27b70a8546d22ffcULL);
-    RNDr(S, W, 33, 0x2e1b21385c26c926ULL);
-    RNDr(S, W, 34, 0x4d2c6dfc5ac42aedULL);
-    RNDr(S, W, 35, 0x53380d139d95b3dfULL);
-    RNDr(S, W, 36, 0x650a73548baf63deULL);
-    RNDr(S, W, 37, 0x766a0abb3c77b2a8ULL);
-    RNDr(S, W, 38, 0x81c2c92e47edaee6ULL);
-    RNDr(S, W, 39, 0x92722c851482353bULL);
-    RNDr(S, W, 40, 0xa2bfe8a14cf10364ULL);
-    RNDr(S, W, 41, 0xa81a664bbc423001ULL);
-    RNDr(S, W, 42, 0xc24b8b70d0f89791ULL);
-    RNDr(S, W, 43, 0xc76c51a30654be30ULL);
-    RNDr(S, W, 44, 0xd192e819d6ef5218ULL);
-    RNDr(S, W, 45, 0xd69906245565a910ULL);
-    RNDr(S, W, 46, 0xf40e35855771202aULL);
-    RNDr(S, W, 47, 0x106aa07032bbd1b8ULL);
-    RNDr(S, W, 48, 0x19a4c116b8d2d0c8ULL);
-    RNDr(S, W, 49, 0x1e376c085141ab53ULL);
-    RNDr(S, W, 50, 0x2748774cdf8eeb99ULL);
-    RNDr(S, W, 51, 0x34b0bcb5e19b48a8ULL);
-    RNDr(S, W, 52, 0x391c0cb3c5c95a63ULL);
-    RNDr(S, W, 53, 0x4ed8aa4ae3418acbULL);
-    RNDr(S, W, 54, 0x5b9cca4f7763e373ULL);
-    RNDr(S, W, 55, 0x682e6ff3d6b2b8a3ULL);
-    RNDr(S, W, 56, 0x748f82ee5defb2fcULL);
-    RNDr(S, W, 57, 0x78a5636f43172f60ULL);
-    RNDr(S, W, 58, 0x84c87814a1f0ab72ULL);
-    RNDr(S, W, 59, 0x8cc702081a6439ecULL);
-    RNDr(S, W, 60, 0x90befffa23631e28ULL);
-    RNDr(S, W, 61, 0xa4506cebde82bde9ULL);
-    RNDr(S, W, 62, 0xbef9a3f7b2c67915ULL);
-    RNDr(S, W, 63, 0xc67178f2e372532bULL);
-    RNDr(S, W, 64, 0xca273eceea26619cULL);
-    RNDr(S, W, 65, 0xd186b8c721c0c207ULL);
-    RNDr(S, W, 66, 0xeada7dd6cde0eb1eULL);
-    RNDr(S, W, 67, 0xf57d4f7fee6ed178ULL);
-    RNDr(S, W, 68, 0x06f067aa72176fbaULL);
-    RNDr(S, W, 69, 0x0a637dc5a2c898a6ULL);
-    RNDr(S, W, 70, 0x113f9804bef90daeULL);
-    RNDr(S, W, 71, 0x1b710b35131c471bULL);
-    RNDr(S, W, 72, 0x28db77f523047d84ULL);
-    RNDr(S, W, 73, 0x32caab7b40c72493ULL);
-    RNDr(S, W, 74, 0x3c9ebe0a15c9bebcULL);
-    RNDr(S, W, 75, 0x431d67c49c100d4cULL);
-    RNDr(S, W, 76, 0x4cc5d4becb3e42b6ULL);
-    RNDr(S, W, 77, 0x597f299cfc657e2aULL);
-    RNDr(S, W, 78, 0x5fcb6fab3ad6faecULL);
-    RNDr(S, W, 79, 0x6c44198c4a475817ULL);
-
-    for (i = 0; i < 8; i++) {
-        state[i] += S[i];
-    }
-
-    sodium_memzero((void *) W, sizeof W);
-    sodium_memzero((void *) S, sizeof S);
-    sodium_memzero((void *) &t0, sizeof t0);
-    sodium_memzero((void *) &t1, sizeof t1);
-}
-
-static unsigned char PAD[128] = {
-    0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
-};
-
-static void
-SHA512_Pad(crypto_hash_sha512_state *state)
-{
-    unsigned char len[16];
-    uint64_t r, plen;
-
-    be64enc_vect(len, state->count, 16);
-
-    r = (state->count[1] >> 3) & 0x7f;
-    plen = (r < 112) ? (112 - r) : (240 - r);
-    crypto_hash_sha512_update(state, PAD, (unsigned long long) plen);
-
-    crypto_hash_sha512_update(state, len, 16);
-}
-
-int
-crypto_hash_sha512_init(crypto_hash_sha512_state *state)
-{
-    static const uint64_t sha512_initstate[8] = {
-        0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL,
-        0x3c6ef372fe94f82bULL, 0xa54ff53a5f1d36f1ULL,
-        0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
-        0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
-    };
-
-    state->count[0] = state->count[1] = (uint64_t) 0U;
-    memcpy(state->state, sha512_initstate, sizeof sha512_initstate);
-
-    return 0;
-}
-
-int
-crypto_hash_sha512_update(crypto_hash_sha512_state *state,
-                          const unsigned char *in,
-                          unsigned long long inlen)
-{
-    unsigned long long i;
-    uint64_t bitlen[2];
-    uint64_t r;
-
-    r = (state->count[1] >> 3) & 0x7f;
-
-    bitlen[1] = ((uint64_t)inlen) << 3;
-    bitlen[0] = ((uint64_t)inlen) >> 61;
-
-    /* LCOV_EXCL_START */
-    if ((state->count[1] += bitlen[1]) < bitlen[1]) {
-        state->count[0]++;
-    }
-    /* LCOV_EXCL_STOP */
-    state->count[0] += bitlen[0];
-
-    if (inlen < 128 - r) {
-        for (i = 0; i < inlen; i++) {
-            state->buf[r + i] = in[i];
-        }
-        return 0;
-    }
-    for (i = 0; i < 128 - r; i++) {
-        state->buf[r + i] = in[i];
-    }
-    SHA512_Transform(state->state, state->buf);
-    in += 128 - r;
-    inlen -= 128 - r;
-
-    while (inlen >= 128) {
-        SHA512_Transform(state->state, in);
-        in += 128;
-        inlen -= 128;
-    }
-    inlen &= 127;
-    for (i = 0; i < inlen; i++) {
-        state->buf[i] = in[i];
-    }
-    return 0;
-}
-
-int
-crypto_hash_sha512_final(crypto_hash_sha512_state *state,
-                         unsigned char *out)
-{
-    SHA512_Pad(state);
-    be64enc_vect(out, state->state, 64);
-    sodium_memzero((void *) state, sizeof *state);
-
-    return 0;
-}
-
-int
-crypto_hash_sha512(unsigned char *out, const unsigned char *in,
-                   unsigned long long inlen)
-{
-    crypto_hash_sha512_state state;
-
-    crypto_hash_sha512_init(&state);
-    crypto_hash_sha512_update(&state, in, inlen);
-    crypto_hash_sha512_final(&state, out);
-
-    return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_hash/sha512/cp/hash_sha512_cp.c libsodium-1.0.12/src/libsodium/crypto_hash/sha512/cp/hash_sha512_cp.c
--- libsodium-1.0.11/src/libsodium/crypto_hash/sha512/cp/hash_sha512_cp.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_hash/sha512/cp/hash_sha512_cp.c	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,280 @@
+
+/*-
+ * Copyright 2005,2007,2009 Colin Percival
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ */
+
+#include <limits.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include <sys/types.h>
+
+#include "crypto_hash_sha512.h"
+#include "private/common.h"
+#include "utils.h"
+
+static void
+be64enc_vect(unsigned char *dst, const uint64_t *src, size_t len)
+{
+    size_t i;
+
+    for (i = 0; i < len / 8; i++) {
+        STORE64_BE(dst + i * 8, src[i]);
+    }
+}
+
+static void
+be64dec_vect(uint64_t *dst, const unsigned char *src, size_t len)
+{
+    size_t i;
+
+    for (i = 0; i < len / 8; i++) {
+        dst[i] = LOAD64_BE(src + i * 8);
+    }
+}
+
+static const uint64_t Krnd[80] = {
+    0x428a2f98d728ae22ULL, 0x7137449123ef65cdULL, 0xb5c0fbcfec4d3b2fULL,
+    0xe9b5dba58189dbbcULL, 0x3956c25bf348b538ULL, 0x59f111f1b605d019ULL,
+    0x923f82a4af194f9bULL, 0xab1c5ed5da6d8118ULL, 0xd807aa98a3030242ULL,
+    0x12835b0145706fbeULL, 0x243185be4ee4b28cULL, 0x550c7dc3d5ffb4e2ULL,
+    0x72be5d74f27b896fULL, 0x80deb1fe3b1696b1ULL, 0x9bdc06a725c71235ULL,
+    0xc19bf174cf692694ULL, 0xe49b69c19ef14ad2ULL, 0xefbe4786384f25e3ULL,
+    0x0fc19dc68b8cd5b5ULL, 0x240ca1cc77ac9c65ULL, 0x2de92c6f592b0275ULL,
+    0x4a7484aa6ea6e483ULL, 0x5cb0a9dcbd41fbd4ULL, 0x76f988da831153b5ULL,
+    0x983e5152ee66dfabULL, 0xa831c66d2db43210ULL, 0xb00327c898fb213fULL,
+    0xbf597fc7beef0ee4ULL, 0xc6e00bf33da88fc2ULL, 0xd5a79147930aa725ULL,
+    0x06ca6351e003826fULL, 0x142929670a0e6e70ULL, 0x27b70a8546d22ffcULL,
+    0x2e1b21385c26c926ULL, 0x4d2c6dfc5ac42aedULL, 0x53380d139d95b3dfULL,
+    0x650a73548baf63deULL, 0x766a0abb3c77b2a8ULL, 0x81c2c92e47edaee6ULL,
+    0x92722c851482353bULL, 0xa2bfe8a14cf10364ULL, 0xa81a664bbc423001ULL,
+    0xc24b8b70d0f89791ULL, 0xc76c51a30654be30ULL, 0xd192e819d6ef5218ULL,
+    0xd69906245565a910ULL, 0xf40e35855771202aULL, 0x106aa07032bbd1b8ULL,
+    0x19a4c116b8d2d0c8ULL, 0x1e376c085141ab53ULL, 0x2748774cdf8eeb99ULL,
+    0x34b0bcb5e19b48a8ULL, 0x391c0cb3c5c95a63ULL, 0x4ed8aa4ae3418acbULL,
+    0x5b9cca4f7763e373ULL, 0x682e6ff3d6b2b8a3ULL, 0x748f82ee5defb2fcULL,
+    0x78a5636f43172f60ULL, 0x84c87814a1f0ab72ULL, 0x8cc702081a6439ecULL,
+    0x90befffa23631e28ULL, 0xa4506cebde82bde9ULL, 0xbef9a3f7b2c67915ULL,
+    0xc67178f2e372532bULL, 0xca273eceea26619cULL, 0xd186b8c721c0c207ULL,
+    0xeada7dd6cde0eb1eULL, 0xf57d4f7fee6ed178ULL, 0x06f067aa72176fbaULL,
+    0x0a637dc5a2c898a6ULL, 0x113f9804bef90daeULL, 0x1b710b35131c471bULL,
+    0x28db77f523047d84ULL, 0x32caab7b40c72493ULL, 0x3c9ebe0a15c9bebcULL,
+    0x431d67c49c100d4cULL, 0x4cc5d4becb3e42b6ULL, 0x597f299cfc657e2aULL,
+    0x5fcb6fab3ad6faecULL, 0x6c44198c4a475817ULL
+};
+
+#define Ch(x, y, z) ((x & (y ^ z)) ^ z)
+#define Maj(x, y, z) ((x & (y | z)) | (y & z))
+#define SHR(x, n) (x >> n)
+#define ROTR(x, n) ROTR64(x, n)
+#define S0(x) (ROTR(x, 28) ^ ROTR(x, 34) ^ ROTR(x, 39))
+#define S1(x) (ROTR(x, 14) ^ ROTR(x, 18) ^ ROTR(x, 41))
+#define s0(x) (ROTR(x, 1) ^ ROTR(x, 8) ^ SHR(x, 7))
+#define s1(x) (ROTR(x, 19) ^ ROTR(x, 61) ^ SHR(x, 6))
+
+#define RND(a, b, c, d, e, f, g, h, k) \
+    h += S1(e) + Ch(e, f, g) + k;      \
+    d += h;                            \
+    h += S0(a) + Maj(a, b, c);
+
+#define RNDr(S, W, i, ii)                                                   \
+    RND(S[(80 - i) % 8], S[(81 - i) % 8], S[(82 - i) % 8], S[(83 - i) % 8], \
+        S[(84 - i) % 8], S[(85 - i) % 8], S[(86 - i) % 8], S[(87 - i) % 8], \
+        W[i + ii] + Krnd[i + ii])
+
+#define MSCH(W, ii, i) \
+    W[i + ii + 16] =   \
+        s1(W[i + ii + 14]) + W[i + ii + 9] + s0(W[i + ii + 1]) + W[i + ii]
+
+static void
+SHA512_Transform(uint64_t *state, const uint8_t block[128], uint64_t W[80],
+                 uint64_t S[8])
+{
+    int i;
+
+    be64dec_vect(W, block, 128);
+    memcpy(S, state, 64);
+    for (i = 0; i < 80; i += 16) {
+        RNDr(S, W, 0, i);
+        RNDr(S, W, 1, i);
+        RNDr(S, W, 2, i);
+        RNDr(S, W, 3, i);
+        RNDr(S, W, 4, i);
+        RNDr(S, W, 5, i);
+        RNDr(S, W, 6, i);
+        RNDr(S, W, 7, i);
+        RNDr(S, W, 8, i);
+        RNDr(S, W, 9, i);
+        RNDr(S, W, 10, i);
+        RNDr(S, W, 11, i);
+        RNDr(S, W, 12, i);
+        RNDr(S, W, 13, i);
+        RNDr(S, W, 14, i);
+        RNDr(S, W, 15, i);
+        if (i == 64) {
+            break;
+        }
+        MSCH(W, 0, i);
+        MSCH(W, 1, i);
+        MSCH(W, 2, i);
+        MSCH(W, 3, i);
+        MSCH(W, 4, i);
+        MSCH(W, 5, i);
+        MSCH(W, 6, i);
+        MSCH(W, 7, i);
+        MSCH(W, 8, i);
+        MSCH(W, 9, i);
+        MSCH(W, 10, i);
+        MSCH(W, 11, i);
+        MSCH(W, 12, i);
+        MSCH(W, 13, i);
+        MSCH(W, 14, i);
+        MSCH(W, 15, i);
+    }
+    for (i = 0; i < 8; i++) {
+        state[i] += S[i];
+    }
+}
+
+static const uint8_t PAD[128] = {
+    0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+    0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+};
+
+static void
+SHA512_Pad(crypto_hash_sha512_state *state, uint64_t tmp64[80 + 8])
+{
+    uint64_t r;
+    uint64_t i;
+
+    r = (state->count[1] >> 3) & 0x7f;
+    if (r < 112) {
+        for (i = 0; i < 112 - r; i++) {
+            state->buf[r + i] = PAD[i];
+        }
+    } else {
+        for (i = 0; i < 128 - r; i++) {
+            state->buf[r + i] = PAD[i];
+        }
+        SHA512_Transform(state->state, state->buf, &tmp64[0], &tmp64[80]);
+        memset(&state->buf[0], 0, 112);
+    }
+    be64enc_vect(&state->buf[112], state->count, 16);
+    SHA512_Transform(state->state, state->buf, &tmp64[0], &tmp64[80]);
+}
+
+int
+crypto_hash_sha512_init(crypto_hash_sha512_state *state)
+{
+    static const uint64_t sha512_initial_state[8] = {
+        0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL,
+        0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL,
+        0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL
+    };
+
+    state->count[0] = state->count[1] = (uint64_t) 0U;
+    memcpy(state->state, sha512_initial_state, sizeof sha512_initial_state);
+
+    return 0;
+}
+
+int
+crypto_hash_sha512_update(crypto_hash_sha512_state *state,
+                          const unsigned char *in, unsigned long long inlen)
+{
+    uint64_t           tmp64[80 + 8];
+    uint64_t           bitlen[2];
+    unsigned long long i;
+    unsigned long long r;
+
+    if (inlen <= 0U) {
+        return 0;
+    }
+    r = (unsigned long long) ((state->count[1] >> 3) & 0x7f);
+
+    bitlen[1] = ((uint64_t) inlen) << 3;
+    bitlen[0] = ((uint64_t) inlen) >> 61;
+    if ((state->count[1] += bitlen[1]) < bitlen[1]) {
+        state->count[0]++;
+    }
+    state->count[0] += bitlen[0];
+    if (inlen < 128 - r) {
+        for (i = 0; i < inlen; i++) {
+            state->buf[r + i] = in[i];
+        }
+        return 0;
+    }
+    for (i = 0; i < 128 - r; i++) {
+        state->buf[r + i] = in[i];
+    }
+    SHA512_Transform(state->state, state->buf, &tmp64[0], &tmp64[80]);
+    in += 128 - r;
+    inlen -= 128 - r;
+
+    while (inlen >= 128) {
+        SHA512_Transform(state->state, in, &tmp64[0], &tmp64[80]);
+        in += 128;
+        inlen -= 128;
+    }
+    inlen &= 127;
+    for (i = 0; i < inlen; i++) {
+        state->buf[i] = in[i];
+    }
+    sodium_memzero((void *) tmp64, sizeof tmp64);
+
+    return 0;
+}
+
+int
+crypto_hash_sha512_final(crypto_hash_sha512_state *state, unsigned char *out)
+{
+    uint64_t tmp64[80 + 8];
+
+    SHA512_Pad(state, tmp64);
+    be64enc_vect(out, state->state, 64);
+    sodium_memzero((void *) tmp64, sizeof tmp64);
+    sodium_memzero((void *) state, sizeof *state);
+
+    return 0;
+}
+
+int
+crypto_hash_sha512(unsigned char *out, const unsigned char *in,
+                   unsigned long long inlen)
+{
+    crypto_hash_sha512_state state;
+
+    crypto_hash_sha512_init(&state);
+    crypto_hash_sha512_update(&state, in, inlen);
+    crypto_hash_sha512_final(&state, out);
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_hash/sha512/hash_sha512_api.c libsodium-1.0.12/src/libsodium/crypto_hash/sha512/hash_sha512_api.c
--- libsodium-1.0.11/src/libsodium/crypto_hash/sha512/hash_sha512_api.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_hash/sha512/hash_sha512_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,11 +0,0 @@
-#include "crypto_hash_sha512.h"
-
-size_t
-crypto_hash_sha512_bytes(void) {
-    return crypto_hash_sha512_BYTES;
-}
-
-size_t
-crypto_hash_sha512_statebytes(void) {
-    return sizeof(crypto_hash_sha512_state);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_hash/sha512/hash_sha512.c libsodium-1.0.12/src/libsodium/crypto_hash/sha512/hash_sha512.c
--- libsodium-1.0.11/src/libsodium/crypto_hash/sha512/hash_sha512.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_hash/sha512/hash_sha512.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,13 @@
+#include "crypto_hash_sha512.h"
+
+size_t
+crypto_hash_sha512_bytes(void)
+{
+    return crypto_hash_sha512_BYTES;
+}
+
+size_t
+crypto_hash_sha512_statebytes(void)
+{
+    return sizeof(crypto_hash_sha512_state);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_kdf/blake2b/kdf_blake2b.c libsodium-1.0.12/src/libsodium/crypto_kdf/blake2b/kdf_blake2b.c
--- libsodium-1.0.11/src/libsodium/crypto_kdf/blake2b/kdf_blake2b.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_kdf/blake2b/kdf_blake2b.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,52 @@
+#include <errno.h>
+
+#include "crypto_kdf_blake2b.h"
+#include "crypto_generichash_blake2b.h"
+#include "private/common.h"
+
+size_t
+crypto_kdf_blake2b_bytes_min(void)
+{
+    return crypto_kdf_blake2b_BYTES_MIN;
+}
+
+size_t
+crypto_kdf_blake2b_bytes_max(void)
+{
+    return crypto_kdf_blake2b_BYTES_MAX;
+}
+
+size_t
+crypto_kdf_blake2b_contextbytes(void)
+{
+    return crypto_kdf_blake2b_CONTEXTBYTES;
+}
+
+size_t
+crypto_kdf_blake2b_keybytes(void)
+{
+    return crypto_kdf_blake2b_KEYBYTES;
+}
+
+int crypto_kdf_blake2b_derive_from_key(unsigned char *subkey, size_t subkey_len,
+                                       uint64_t subkey_id,
+                                       const char ctx[crypto_kdf_blake2b_CONTEXTBYTES],
+                                       const unsigned char key[crypto_kdf_blake2b_KEYBYTES])
+{
+    unsigned char ctx_padded[crypto_generichash_blake2b_PERSONALBYTES];
+    unsigned char salt[crypto_generichash_blake2b_SALTBYTES];
+
+    memcpy(ctx_padded, ctx, crypto_kdf_blake2b_CONTEXTBYTES);
+    memset(ctx_padded + crypto_kdf_blake2b_CONTEXTBYTES, 0, sizeof ctx_padded - crypto_kdf_blake2b_CONTEXTBYTES);
+    STORE64_LE(salt, subkey_id);
+    memset(salt + 8, 0, (sizeof salt) - 8);
+    if (subkey_len < crypto_kdf_blake2b_BYTES_MIN ||
+        subkey_len > crypto_kdf_blake2b_BYTES_MAX) {
+        errno = EINVAL;
+        return -1;
+    }
+    return crypto_generichash_blake2b_salt_personal(subkey, subkey_len,
+                                                    NULL, 0,
+                                                    key, crypto_kdf_blake2b_KEYBYTES,
+                                                    salt, ctx_padded);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_kdf/crypto_kdf.c libsodium-1.0.12/src/libsodium/crypto_kdf/crypto_kdf.c
--- libsodium-1.0.11/src/libsodium/crypto_kdf/crypto_kdf.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_kdf/crypto_kdf.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,49 @@
+
+#include "crypto_kdf.h"
+#include "randombytes.h"
+
+const char *
+crypto_kdf_primitive(void)
+{
+    return crypto_kdf_PRIMITIVE;
+}
+
+size_t
+crypto_kdf_bytes_min(void)
+{
+    return crypto_kdf_BYTES_MIN;
+}
+
+size_t
+crypto_kdf_bytes_max(void)
+{
+    return crypto_kdf_BYTES_MAX;
+}
+
+size_t
+crypto_kdf_contextbytes(void)
+{
+    return crypto_kdf_CONTEXTBYTES;
+}
+
+size_t
+crypto_kdf_keybytes(void)
+{
+    return crypto_kdf_KEYBYTES;
+}
+
+int
+crypto_kdf_derive_from_key(unsigned char *subkey, size_t subkey_len,
+                           uint64_t subkey_id,
+                           const char ctx[crypto_kdf_CONTEXTBYTES],
+                           const unsigned char key[crypto_kdf_KEYBYTES])
+{
+    return crypto_kdf_blake2b_derive_from_key(subkey, subkey_len,
+                                              subkey_id, ctx, key);
+}
+
+void
+crypto_kdf_keygen(unsigned char k[crypto_kdf_KEYBYTES])
+{
+    randombytes_buf(k, crypto_kdf_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_kx/crypto_kx.c libsodium-1.0.12/src/libsodium/crypto_kx/crypto_kx.c
--- libsodium-1.0.11/src/libsodium/crypto_kx/crypto_kx.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_kx/crypto_kx.c	2017-03-12 12:51:49.000000000 +0100
@@ -0,0 +1,136 @@
+
+#include <stddef.h>
+
+#include "crypto_generichash.h"
+#include "crypto_kx.h"
+#include "crypto_scalarmult.h"
+#include "private/common.h"
+#include "randombytes.h"
+#include "utils.h"
+
+int
+crypto_kx_seed_keypair(unsigned char pk[crypto_kx_PUBLICKEYBYTES],
+                       unsigned char sk[crypto_kx_SECRETKEYBYTES],
+                       const unsigned char seed[crypto_kx_SEEDBYTES])
+{
+    crypto_generichash(sk, crypto_kx_SECRETKEYBYTES,
+                       seed, crypto_kx_SEEDBYTES, NULL, 0);
+    return crypto_scalarmult_base(pk, sk);
+}
+
+int
+crypto_kx_keypair(unsigned char pk[crypto_kx_PUBLICKEYBYTES],
+                  unsigned char sk[crypto_kx_SECRETKEYBYTES])
+{
+    COMPILER_ASSERT(crypto_kx_SECRETKEYBYTES == crypto_scalarmult_SCALARBYTES);
+    COMPILER_ASSERT(crypto_kx_PUBLICKEYBYTES == crypto_scalarmult_BYTES);
+
+    randombytes_buf(sk, crypto_kx_SECRETKEYBYTES);
+    return crypto_scalarmult_base(pk, sk);
+}
+
+int
+crypto_kx_client_session_keys(unsigned char rx[crypto_kx_SESSIONKEYBYTES],
+                              unsigned char tx[crypto_kx_SESSIONKEYBYTES],
+                              const unsigned char client_pk[crypto_kx_PUBLICKEYBYTES],
+                              const unsigned char client_sk[crypto_kx_SECRETKEYBYTES],
+                              const unsigned char server_pk[crypto_kx_PUBLICKEYBYTES])
+{
+    crypto_generichash_state h;
+    unsigned char            q[crypto_scalarmult_BYTES];
+    unsigned char            keys[2 * crypto_kx_SESSIONKEYBYTES];
+    int                      i;
+
+    if (rx == NULL) {
+        rx = tx;
+    }
+    if (tx == NULL) {
+        tx = rx;
+    }
+    if (crypto_scalarmult(q, client_sk, server_pk) != 0) {
+        return -1;
+    }
+    COMPILER_ASSERT(sizeof keys <= crypto_generichash_BYTES_MAX);
+    crypto_generichash_init(&h, NULL, 0U, sizeof keys);
+    crypto_generichash_update(&h, q, crypto_scalarmult_BYTES);
+    sodium_memzero(q, sizeof q);
+    crypto_generichash_update(&h, client_pk, crypto_kx_PUBLICKEYBYTES);
+    crypto_generichash_update(&h, server_pk, crypto_kx_PUBLICKEYBYTES);
+    crypto_generichash_final(&h, keys, sizeof keys);
+    sodium_memzero(&h, sizeof h);
+    for (i = 0; i < crypto_kx_SESSIONKEYBYTES; i++) {
+        rx[i] = keys[i];
+        tx[i] = keys[i + crypto_kx_SESSIONKEYBYTES];
+    }
+    sodium_memzero(keys, sizeof keys);
+
+    return 0;
+}
+
+int
+crypto_kx_server_session_keys(unsigned char rx[crypto_kx_SESSIONKEYBYTES],
+                              unsigned char tx[crypto_kx_SESSIONKEYBYTES],
+                              const unsigned char server_pk[crypto_kx_PUBLICKEYBYTES],
+                              const unsigned char server_sk[crypto_kx_SECRETKEYBYTES],
+                              const unsigned char client_pk[crypto_kx_PUBLICKEYBYTES])
+{
+    crypto_generichash_state h;
+    unsigned char            q[crypto_scalarmult_BYTES];
+    unsigned char            keys[2 * crypto_kx_SESSIONKEYBYTES];
+    int                      i;
+
+    if (rx == NULL) {
+        rx = tx;
+    }
+    if (tx == NULL) {
+        tx = rx;
+    }
+    if (crypto_scalarmult(q, server_sk, client_pk) != 0) {
+        return -1;
+    }
+    COMPILER_ASSERT(sizeof keys <= crypto_generichash_BYTES_MAX);
+    crypto_generichash_init(&h, NULL, 0U, sizeof keys);
+    crypto_generichash_update(&h, q, crypto_scalarmult_BYTES);
+    sodium_memzero(q, sizeof q);
+    crypto_generichash_update(&h, client_pk, crypto_kx_PUBLICKEYBYTES);
+    crypto_generichash_update(&h, server_pk, crypto_kx_PUBLICKEYBYTES);
+    crypto_generichash_final(&h, keys, sizeof keys);
+    sodium_memzero(&h, sizeof h);
+    for (i = 0; i < crypto_kx_SESSIONKEYBYTES; i++) {
+        tx[i] = keys[i];
+        rx[i] = keys[i + crypto_kx_SESSIONKEYBYTES];
+    }
+    sodium_memzero(keys, sizeof keys);
+
+    return 0;
+}
+
+size_t
+crypto_kx_publickeybytes(void)
+{
+    return crypto_kx_PUBLICKEYBYTES;
+}
+
+size_t
+crypto_kx_secretkeybytes(void)
+{
+    return crypto_kx_SECRETKEYBYTES;
+}
+
+size_t
+crypto_kx_seedbytes(void)
+{
+    return crypto_kx_SEEDBYTES;
+}
+
+size_t
+crypto_kx_sessionkeybytes(void)
+{
+    return crypto_kx_SESSIONKEYBYTES;
+}
+
+const char *
+crypto_kx_primitive(void)
+{
+    return crypto_kx_PRIMITIVE;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_onetimeauth/crypto_onetimeauth.c libsodium-1.0.12/src/libsodium/crypto_onetimeauth/crypto_onetimeauth.c
--- libsodium-1.0.11/src/libsodium/crypto_onetimeauth/crypto_onetimeauth.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_onetimeauth/crypto_onetimeauth.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,5 +1,6 @@
 
 #include "crypto_onetimeauth.h"
+#include "randombytes.h"
 
 size_t
 crypto_onetimeauth_statebytes(void)
@@ -63,3 +64,8 @@ crypto_onetimeauth_primitive(void)
 {
     return crypto_onetimeauth_PRIMITIVE;
 }
+
+void crypto_onetimeauth_keygen(unsigned char k[crypto_onetimeauth_KEYBYTES])
+{
+    randombytes_buf(k, crypto_onetimeauth_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h
--- libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna32.h	2017-03-06 11:13:57.000000000 +0100
@@ -1,11 +1,12 @@
 /*
-        poly1305 implementation using 32 bit * 32 bit = 64 bit multiplication and 64 bit addition
+   poly1305 implementation using 32 bit * 32 bit = 64 bit multiplication
+   and 64 bit addition
 */
 
 #if defined(_MSC_VER)
 # define POLY1305_NOINLINE __declspec(noinline)
 #elif defined(__GNUC__)
-# define POLY1305_NOINLINE __attribute__ ((noinline))
+# define POLY1305_NOINLINE __attribute__((noinline))
 #else
 # define POLY1305_NOINLINE
 #endif
@@ -16,173 +17,219 @@
 
 /* 17 + sizeof(unsigned long long) + 14*sizeof(unsigned long) */
 typedef struct poly1305_state_internal_t {
-        unsigned long r[5];
-        unsigned long h[5];
-        unsigned long pad[4];
-        unsigned long long leftover;
-        unsigned char buffer[poly1305_block_size];
-        unsigned char final;
+    unsigned long      r[5];
+    unsigned long      h[5];
+    unsigned long      pad[4];
+    unsigned long long leftover;
+    unsigned char      buffer[poly1305_block_size];
+    unsigned char      final;
 } poly1305_state_internal_t;
 
 static void
 poly1305_init(poly1305_state_internal_t *st, const unsigned char key[32])
 {
-        /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
-        st->r[0] = (LOAD32_LE(&key[ 0])     ) & 0x3ffffff;
-        st->r[1] = (LOAD32_LE(&key[ 3]) >> 2) & 0x3ffff03;
-        st->r[2] = (LOAD32_LE(&key[ 6]) >> 4) & 0x3ffc0ff;
-        st->r[3] = (LOAD32_LE(&key[ 9]) >> 6) & 0x3f03fff;
-        st->r[4] = (LOAD32_LE(&key[12]) >> 8) & 0x00fffff;
-
-        /* h = 0 */
-        st->h[0] = 0;
-        st->h[1] = 0;
-        st->h[2] = 0;
-        st->h[3] = 0;
-        st->h[4] = 0;
-
-        /* save pad for later */
-        st->pad[0] = LOAD32_LE(&key[16]);
-        st->pad[1] = LOAD32_LE(&key[20]);
-        st->pad[2] = LOAD32_LE(&key[24]);
-        st->pad[3] = LOAD32_LE(&key[28]);
+    /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
+    st->r[0] = (LOAD32_LE(&key[0])) & 0x3ffffff;
+    st->r[1] = (LOAD32_LE(&key[3]) >> 2) & 0x3ffff03;
+    st->r[2] = (LOAD32_LE(&key[6]) >> 4) & 0x3ffc0ff;
+    st->r[3] = (LOAD32_LE(&key[9]) >> 6) & 0x3f03fff;
+    st->r[4] = (LOAD32_LE(&key[12]) >> 8) & 0x00fffff;
+
+    /* h = 0 */
+    st->h[0] = 0;
+    st->h[1] = 0;
+    st->h[2] = 0;
+    st->h[3] = 0;
+    st->h[4] = 0;
+
+    /* save pad for later */
+    st->pad[0] = LOAD32_LE(&key[16]);
+    st->pad[1] = LOAD32_LE(&key[20]);
+    st->pad[2] = LOAD32_LE(&key[24]);
+    st->pad[3] = LOAD32_LE(&key[28]);
 
-        st->leftover = 0;
-        st->final = 0;
+    st->leftover = 0;
+    st->final    = 0;
 }
 
 static void
-poly1305_blocks(poly1305_state_internal_t *st, const unsigned char *m, unsigned long long bytes)
+poly1305_blocks(poly1305_state_internal_t *st, const unsigned char *m,
+                unsigned long long bytes)
 {
-        const unsigned long hibit = (st->final) ? 0UL : (1UL << 24); /* 1 << 128 */
-        unsigned long r0,r1,r2,r3,r4;
-        unsigned long s1,s2,s3,s4;
-        unsigned long h0,h1,h2,h3,h4;
-        unsigned long long d0,d1,d2,d3,d4;
-        unsigned long c;
-
-        r0 = st->r[0];
-        r1 = st->r[1];
-        r2 = st->r[2];
-        r3 = st->r[3];
-        r4 = st->r[4];
-
-        s1 = r1 * 5;
-        s2 = r2 * 5;
-        s3 = r3 * 5;
-        s4 = r4 * 5;
-
-        h0 = st->h[0];
-        h1 = st->h[1];
-        h2 = st->h[2];
-        h3 = st->h[3];
-        h4 = st->h[4];
-
-        while (bytes >= poly1305_block_size) {
-                /* h += m[i] */
-                h0 += (LOAD32_LE(m+ 0)     ) & 0x3ffffff;
-                h1 += (LOAD32_LE(m+ 3) >> 2) & 0x3ffffff;
-                h2 += (LOAD32_LE(m+ 6) >> 4) & 0x3ffffff;
-                h3 += (LOAD32_LE(m+ 9) >> 6) & 0x3ffffff;
-                h4 += (LOAD32_LE(m+12) >> 8) | hibit;
-
-                /* h *= r */
-                d0 = ((unsigned long long)h0 * r0) + ((unsigned long long)h1 * s4) + ((unsigned long long)h2 * s3) + ((unsigned long long)h3 * s2) + ((unsigned long long)h4 * s1);
-                d1 = ((unsigned long long)h0 * r1) + ((unsigned long long)h1 * r0) + ((unsigned long long)h2 * s4) + ((unsigned long long)h3 * s3) + ((unsigned long long)h4 * s2);
-                d2 = ((unsigned long long)h0 * r2) + ((unsigned long long)h1 * r1) + ((unsigned long long)h2 * r0) + ((unsigned long long)h3 * s4) + ((unsigned long long)h4 * s3);
-                d3 = ((unsigned long long)h0 * r3) + ((unsigned long long)h1 * r2) + ((unsigned long long)h2 * r1) + ((unsigned long long)h3 * r0) + ((unsigned long long)h4 * s4);
-                d4 = ((unsigned long long)h0 * r4) + ((unsigned long long)h1 * r3) + ((unsigned long long)h2 * r2) + ((unsigned long long)h3 * r1) + ((unsigned long long)h4 * r0);
-
-                /* (partial) h %= p */
-                              c = (unsigned long)(d0 >> 26); h0 = (unsigned long)d0 & 0x3ffffff;
-                d1 += c;      c = (unsigned long)(d1 >> 26); h1 = (unsigned long)d1 & 0x3ffffff;
-                d2 += c;      c = (unsigned long)(d2 >> 26); h2 = (unsigned long)d2 & 0x3ffffff;
-                d3 += c;      c = (unsigned long)(d3 >> 26); h3 = (unsigned long)d3 & 0x3ffffff;
-                d4 += c;      c = (unsigned long)(d4 >> 26); h4 = (unsigned long)d4 & 0x3ffffff;
-                h0 += c * 5;  c =                (h0 >> 26); h0 =                h0 & 0x3ffffff;
-                h1 += c;
-
-                m += poly1305_block_size;
-                bytes -= poly1305_block_size;
-        }
-
-        st->h[0] = h0;
-        st->h[1] = h1;
-        st->h[2] = h2;
-        st->h[3] = h3;
-        st->h[4] = h4;
+    const unsigned long hibit = (st->final) ? 0UL : (1UL << 24); /* 1 << 128 */
+    unsigned long       r0, r1, r2, r3, r4;
+    unsigned long       s1, s2, s3, s4;
+    unsigned long       h0, h1, h2, h3, h4;
+    unsigned long long  d0, d1, d2, d3, d4;
+    unsigned long       c;
+
+    r0 = st->r[0];
+    r1 = st->r[1];
+    r2 = st->r[2];
+    r3 = st->r[3];
+    r4 = st->r[4];
+
+    s1 = r1 * 5;
+    s2 = r2 * 5;
+    s3 = r3 * 5;
+    s4 = r4 * 5;
+
+    h0 = st->h[0];
+    h1 = st->h[1];
+    h2 = st->h[2];
+    h3 = st->h[3];
+    h4 = st->h[4];
+
+    while (bytes >= poly1305_block_size) {
+        /* h += m[i] */
+        h0 += (LOAD32_LE(m + 0)) & 0x3ffffff;
+        h1 += (LOAD32_LE(m + 3) >> 2) & 0x3ffffff;
+        h2 += (LOAD32_LE(m + 6) >> 4) & 0x3ffffff;
+        h3 += (LOAD32_LE(m + 9) >> 6) & 0x3ffffff;
+        h4 += (LOAD32_LE(m + 12) >> 8) | hibit;
+
+        /* h *= r */
+        d0 = ((unsigned long long) h0 * r0) + ((unsigned long long) h1 * s4) +
+             ((unsigned long long) h2 * s3) + ((unsigned long long) h3 * s2) +
+             ((unsigned long long) h4 * s1);
+        d1 = ((unsigned long long) h0 * r1) + ((unsigned long long) h1 * r0) +
+             ((unsigned long long) h2 * s4) + ((unsigned long long) h3 * s3) +
+             ((unsigned long long) h4 * s2);
+        d2 = ((unsigned long long) h0 * r2) + ((unsigned long long) h1 * r1) +
+             ((unsigned long long) h2 * r0) + ((unsigned long long) h3 * s4) +
+             ((unsigned long long) h4 * s3);
+        d3 = ((unsigned long long) h0 * r3) + ((unsigned long long) h1 * r2) +
+             ((unsigned long long) h2 * r1) + ((unsigned long long) h3 * r0) +
+             ((unsigned long long) h4 * s4);
+        d4 = ((unsigned long long) h0 * r4) + ((unsigned long long) h1 * r3) +
+             ((unsigned long long) h2 * r2) + ((unsigned long long) h3 * r1) +
+             ((unsigned long long) h4 * r0);
+
+        /* (partial) h %= p */
+        c  = (unsigned long) (d0 >> 26);
+        h0 = (unsigned long) d0 & 0x3ffffff;
+        d1 += c;
+        c  = (unsigned long) (d1 >> 26);
+        h1 = (unsigned long) d1 & 0x3ffffff;
+        d2 += c;
+        c  = (unsigned long) (d2 >> 26);
+        h2 = (unsigned long) d2 & 0x3ffffff;
+        d3 += c;
+        c  = (unsigned long) (d3 >> 26);
+        h3 = (unsigned long) d3 & 0x3ffffff;
+        d4 += c;
+        c  = (unsigned long) (d4 >> 26);
+        h4 = (unsigned long) d4 & 0x3ffffff;
+        h0 += c * 5;
+        c  = (h0 >> 26);
+        h0 = h0 & 0x3ffffff;
+        h1 += c;
+
+        m += poly1305_block_size;
+        bytes -= poly1305_block_size;
+    }
+
+    st->h[0] = h0;
+    st->h[1] = h1;
+    st->h[2] = h2;
+    st->h[3] = h3;
+    st->h[4] = h4;
 }
 
 static POLY1305_NOINLINE void
 poly1305_finish(poly1305_state_internal_t *st, unsigned char mac[16])
 {
-        unsigned long h0,h1,h2,h3,h4,c;
-        unsigned long g0,g1,g2,g3,g4;
-        unsigned long long f;
-        unsigned long mask;
-
-        /* process the remaining block */
-        if (st->leftover) {
-                unsigned long long i = st->leftover;
-                st->buffer[i++] = 1;
-                for (; i < poly1305_block_size; i++)
-                        st->buffer[i] = 0;
-                st->final = 1;
-                poly1305_blocks(st, st->buffer, poly1305_block_size);
+    unsigned long      h0, h1, h2, h3, h4, c;
+    unsigned long      g0, g1, g2, g3, g4;
+    unsigned long long f;
+    unsigned long      mask;
+
+    /* process the remaining block */
+    if (st->leftover) {
+        unsigned long long i = st->leftover;
+
+        st->buffer[i++] = 1;
+        for (; i < poly1305_block_size; i++) {
+            st->buffer[i] = 0;
         }
+        st->final = 1;
+        poly1305_blocks(st, st->buffer, poly1305_block_size);
+    }
+
+    /* fully carry h */
+    h0 = st->h[0];
+    h1 = st->h[1];
+    h2 = st->h[2];
+    h3 = st->h[3];
+    h4 = st->h[4];
+
+    c  = h1 >> 26;
+    h1 = h1 & 0x3ffffff;
+    h2 += c;
+    c  = h2 >> 26;
+    h2 = h2 & 0x3ffffff;
+    h3 += c;
+    c  = h3 >> 26;
+    h3 = h3 & 0x3ffffff;
+    h4 += c;
+    c  = h4 >> 26;
+    h4 = h4 & 0x3ffffff;
+    h0 += c * 5;
+    c  = h0 >> 26;
+    h0 = h0 & 0x3ffffff;
+    h1 += c;
+
+    /* compute h + -p */
+    g0 = h0 + 5;
+    c  = g0 >> 26;
+    g0 &= 0x3ffffff;
+    g1 = h1 + c;
+    c  = g1 >> 26;
+    g1 &= 0x3ffffff;
+    g2 = h2 + c;
+    c  = g2 >> 26;
+    g2 &= 0x3ffffff;
+    g3 = h3 + c;
+    c  = g3 >> 26;
+    g3 &= 0x3ffffff;
+    g4 = h4 + c - (1UL << 26);
+
+    /* select h if h < p, or h + -p if h >= p */
+    mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
+    g0 &= mask;
+    g1 &= mask;
+    g2 &= mask;
+    g3 &= mask;
+    g4 &= mask;
+    mask = ~mask;
+
+    h0 = (h0 & mask) | g0;
+    h1 = (h1 & mask) | g1;
+    h2 = (h2 & mask) | g2;
+    h3 = (h3 & mask) | g3;
+    h4 = (h4 & mask) | g4;
+
+    /* h = h % (2^128) */
+    h0 = ((h0) | (h1 << 26)) & 0xffffffff;
+    h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
+    h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
+    h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
+
+    /* mac = (h + pad) % (2^128) */
+    f  = (unsigned long long) h0 + st->pad[0];
+    h0 = (unsigned long) f;
+    f  = (unsigned long long) h1 + st->pad[1] + (f >> 32);
+    h1 = (unsigned long) f;
+    f  = (unsigned long long) h2 + st->pad[2] + (f >> 32);
+    h2 = (unsigned long) f;
+    f  = (unsigned long long) h3 + st->pad[3] + (f >> 32);
+    h3 = (unsigned long) f;
+
+    STORE32_LE(mac + 0, h0);
+    STORE32_LE(mac + 4, h1);
+    STORE32_LE(mac + 8, h2);
+    STORE32_LE(mac + 12, h3);
 
-        /* fully carry h */
-        h0 = st->h[0];
-        h1 = st->h[1];
-        h2 = st->h[2];
-        h3 = st->h[3];
-        h4 = st->h[4];
-
-                     c = h1 >> 26; h1 = h1 & 0x3ffffff;
-        h2 +=     c; c = h2 >> 26; h2 = h2 & 0x3ffffff;
-        h3 +=     c; c = h3 >> 26; h3 = h3 & 0x3ffffff;
-        h4 +=     c; c = h4 >> 26; h4 = h4 & 0x3ffffff;
-        h0 += c * 5; c = h0 >> 26; h0 = h0 & 0x3ffffff;
-        h1 +=     c;
-
-        /* compute h + -p */
-        g0 = h0 + 5; c = g0 >> 26; g0 &= 0x3ffffff;
-        g1 = h1 + c; c = g1 >> 26; g1 &= 0x3ffffff;
-        g2 = h2 + c; c = g2 >> 26; g2 &= 0x3ffffff;
-        g3 = h3 + c; c = g3 >> 26; g3 &= 0x3ffffff;
-        g4 = h4 + c - (1UL << 26);
-
-        /* select h if h < p, or h + -p if h >= p */
-        mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
-        g0 &= mask;
-        g1 &= mask;
-        g2 &= mask;
-        g3 &= mask;
-        g4 &= mask;
-        mask = ~mask;
-        h0 = (h0 & mask) | g0;
-        h1 = (h1 & mask) | g1;
-        h2 = (h2 & mask) | g2;
-        h3 = (h3 & mask) | g3;
-        h4 = (h4 & mask) | g4;
-
-        /* h = h % (2^128) */
-        h0 = ((h0      ) | (h1 << 26)) & 0xffffffff;
-        h1 = ((h1 >>  6) | (h2 << 20)) & 0xffffffff;
-        h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
-        h3 = ((h3 >> 18) | (h4 <<  8)) & 0xffffffff;
-
-        /* mac = (h + pad) % (2^128) */
-        f = (unsigned long long)h0 + st->pad[0]            ; h0 = (unsigned long)f;
-        f = (unsigned long long)h1 + st->pad[1] + (f >> 32); h1 = (unsigned long)f;
-        f = (unsigned long long)h2 + st->pad[2] + (f >> 32); h2 = (unsigned long)f;
-        f = (unsigned long long)h3 + st->pad[3] + (f >> 32); h3 = (unsigned long)f;
-
-        STORE32_LE(mac +  0, h0);
-        STORE32_LE(mac +  4, h1);
-        STORE32_LE(mac +  8, h2);
-        STORE32_LE(mac + 12, h3);
-
-        /* zero out the state */
-        sodium_memzero((void *)st, sizeof *st);
+    /* zero out the state */
+    sodium_memzero((void *) st, sizeof *st);
 }
diff -urpN libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna64.h libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna64.h
--- libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna64.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna64.h	2017-03-06 11:13:57.000000000 +0100
@@ -1,23 +1,24 @@
 /*
-        poly1305 implementation using 64 bit * 64 bit = 128 bit multiplication and 128 bit addition
+   poly1305 implementation using 64 bit * 64 bit = 128 bit multiplication
+   and 128 bit addition
 */
 
 #if defined(__SIZEOF_INT128__)
 typedef unsigned __int128 uint128_t;
 #else
-typedef unsigned uint128_t __attribute__ ((mode(TI)));
+typedef unsigned uint128_t __attribute__((mode(TI)));
 #endif
 
-#define MUL(out, x, y) out = ((uint128_t)x * y)
+#define MUL(out, x, y) out = ((uint128_t) x * y)
 #define ADD(out, in) out += in
 #define ADDLO(out, in) out += in
-#define SHR(in, shift) (unsigned long long)(in >> (shift))
-#define LO(in) (unsigned long long)(in)
+#define SHR(in, shift) (unsigned long long) (in >> (shift))
+#define LO(in) (unsigned long long) (in)
 
 #if defined(_MSC_VER)
 # define POLY1305_NOINLINE __declspec(noinline)
 #elif defined(__GNUC__)
-# define POLY1305_NOINLINE __attribute__ ((noinline))
+# define POLY1305_NOINLINE __attribute__((noinline))
 #else
 # define POLY1305_NOINLINE
 #endif
@@ -28,154 +29,197 @@ typedef unsigned uint128_t __attribute__
 
 /* 17 + sizeof(unsigned long long) + 8*sizeof(unsigned long long) */
 typedef struct poly1305_state_internal_t {
-        unsigned long long r[3];
-        unsigned long long h[3];
-        unsigned long long pad[2];
-        unsigned long long leftover;
-        unsigned char buffer[poly1305_block_size];
-        unsigned char final;
+    unsigned long long r[3];
+    unsigned long long h[3];
+    unsigned long long pad[2];
+    unsigned long long leftover;
+    unsigned char      buffer[poly1305_block_size];
+    unsigned char      final;
 } poly1305_state_internal_t;
 
 static void
 poly1305_init(poly1305_state_internal_t *st, const unsigned char key[32])
 {
-        unsigned long long t0,t1;
+    unsigned long long t0, t1;
 
-        /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
-        t0 = LOAD64_LE(&key[0]);
-        t1 = LOAD64_LE(&key[8]);
-
-        st->r[0] = ( t0                    ) & 0xffc0fffffff;
-        st->r[1] = ((t0 >> 44) | (t1 << 20)) & 0xfffffc0ffff;
-        st->r[2] = ((t1 >> 24)             ) & 0x00ffffffc0f;
-
-        /* h = 0 */
-        st->h[0] = 0;
-        st->h[1] = 0;
-        st->h[2] = 0;
-
-        /* save pad for later */
-        st->pad[0] = LOAD64_LE(&key[16]);
-        st->pad[1] = LOAD64_LE(&key[24]);
+    /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
+    t0 = LOAD64_LE(&key[0]);
+    t1 = LOAD64_LE(&key[8]);
+
+    st->r[0] = (t0) &0xffc0fffffff;
+    st->r[1] = ((t0 >> 44) | (t1 << 20)) & 0xfffffc0ffff;
+    st->r[2] = ((t1 >> 24)) & 0x00ffffffc0f;
+
+    /* h = 0 */
+    st->h[0] = 0;
+    st->h[1] = 0;
+    st->h[2] = 0;
+
+    /* save pad for later */
+    st->pad[0] = LOAD64_LE(&key[16]);
+    st->pad[1] = LOAD64_LE(&key[24]);
 
-        st->leftover = 0;
-        st->final = 0;
+    st->leftover = 0;
+    st->final    = 0;
 }
 
 static void
-poly1305_blocks(poly1305_state_internal_t *st, const unsigned char *m, unsigned long long bytes)
+poly1305_blocks(poly1305_state_internal_t *st, const unsigned char *m,
+                unsigned long long bytes)
 {
-        const unsigned long long hibit = (st->final) ? 0ULL : (1ULL << 40); /* 1 << 128 */
-        unsigned long long r0,r1,r2;
-        unsigned long long s1,s2;
-        unsigned long long h0,h1,h2;
-        unsigned long long c;
-        uint128_t d0,d1,d2,d;
-
-        r0 = st->r[0];
-        r1 = st->r[1];
-        r2 = st->r[2];
-
-        h0 = st->h[0];
-        h1 = st->h[1];
-        h2 = st->h[2];
-
-        s1 = r1 * (5 << 2);
-        s2 = r2 * (5 << 2);
-
-        while (bytes >= poly1305_block_size) {
-                unsigned long long t0,t1;
-
-                /* h += m[i] */
-                t0 = LOAD64_LE(&m[0]);
-                t1 = LOAD64_LE(&m[8]);
-
-                h0 += (( t0                    ) & 0xfffffffffff);
-                h1 += (((t0 >> 44) | (t1 << 20)) & 0xfffffffffff);
-                h2 += (((t1 >> 24)             ) & 0x3ffffffffff) | hibit;
-
-                /* h *= r */
-                MUL(d0, h0, r0); MUL(d, h1, s2); ADD(d0, d); MUL(d, h2, s1); ADD(d0, d);
-                MUL(d1, h0, r1); MUL(d, h1, r0); ADD(d1, d); MUL(d, h2, s2); ADD(d1, d);
-                MUL(d2, h0, r2); MUL(d, h1, r1); ADD(d2, d); MUL(d, h2, r0); ADD(d2, d);
-
-                /* (partial) h %= p */
-                              c = SHR(d0, 44); h0 = LO(d0) & 0xfffffffffff;
-                ADDLO(d1, c); c = SHR(d1, 44); h1 = LO(d1) & 0xfffffffffff;
-                ADDLO(d2, c); c = SHR(d2, 42); h2 = LO(d2) & 0x3ffffffffff;
-                h0  += c * 5; c = (h0 >> 44);  h0 =    h0  & 0xfffffffffff;
-                h1  += c;
-
-                m += poly1305_block_size;
-                bytes -= poly1305_block_size;
-        }
+    const unsigned long long hibit =
+        (st->final) ? 0ULL : (1ULL << 40); /* 1 << 128 */
+    unsigned long long r0, r1, r2;
+    unsigned long long s1, s2;
+    unsigned long long h0, h1, h2;
+    unsigned long long c;
+    uint128_t          d0, d1, d2, d;
+
+    r0 = st->r[0];
+    r1 = st->r[1];
+    r2 = st->r[2];
+
+    h0 = st->h[0];
+    h1 = st->h[1];
+    h2 = st->h[2];
+
+    s1 = r1 * (5 << 2);
+    s2 = r2 * (5 << 2);
+
+    while (bytes >= poly1305_block_size) {
+        unsigned long long t0, t1;
+
+        /* h += m[i] */
+        t0 = LOAD64_LE(&m[0]);
+        t1 = LOAD64_LE(&m[8]);
+
+        h0 += ((t0) &0xfffffffffff);
+        h1 += (((t0 >> 44) | (t1 << 20)) & 0xfffffffffff);
+        h2 += (((t1 >> 24)) & 0x3ffffffffff) | hibit;
+
+        /* h *= r */
+        MUL(d0, h0, r0);
+        MUL(d, h1, s2);
+        ADD(d0, d);
+        MUL(d, h2, s1);
+        ADD(d0, d);
+        MUL(d1, h0, r1);
+        MUL(d, h1, r0);
+        ADD(d1, d);
+        MUL(d, h2, s2);
+        ADD(d1, d);
+        MUL(d2, h0, r2);
+        MUL(d, h1, r1);
+        ADD(d2, d);
+        MUL(d, h2, r0);
+        ADD(d2, d);
+
+        /* (partial) h %= p */
+        c  = SHR(d0, 44);
+        h0 = LO(d0) & 0xfffffffffff;
+        ADDLO(d1, c);
+        c  = SHR(d1, 44);
+        h1 = LO(d1) & 0xfffffffffff;
+        ADDLO(d2, c);
+        c  = SHR(d2, 42);
+        h2 = LO(d2) & 0x3ffffffffff;
+        h0 += c * 5;
+        c  = (h0 >> 44);
+        h0 = h0 & 0xfffffffffff;
+        h1 += c;
 
-        st->h[0] = h0;
-        st->h[1] = h1;
-        st->h[2] = h2;
+        m += poly1305_block_size;
+        bytes -= poly1305_block_size;
+    }
+
+    st->h[0] = h0;
+    st->h[1] = h1;
+    st->h[2] = h2;
 }
 
-
 static POLY1305_NOINLINE void
 poly1305_finish(poly1305_state_internal_t *st, unsigned char mac[16])
 {
-        unsigned long long h0,h1,h2,c;
-        unsigned long long g0,g1,g2;
-        unsigned long long t0,t1;
-
-        /* process the remaining block */
-        if (st->leftover) {
-                unsigned long long i = st->leftover;
-                st->buffer[i] = 1;
-                for (i = i + 1; i < poly1305_block_size; i++)
-                        st->buffer[i] = 0;
-                st->final = 1;
-                poly1305_blocks(st, st->buffer, poly1305_block_size);
-        }
+    unsigned long long h0, h1, h2, c;
+    unsigned long long g0, g1, g2;
+    unsigned long long t0, t1;
+
+    /* process the remaining block */
+    if (st->leftover) {
+        unsigned long long i = st->leftover;
 
-        /* fully carry h */
-        h0 = st->h[0];
-        h1 = st->h[1];
-        h2 = st->h[2];
-
-                     c = (h1 >> 44); h1 &= 0xfffffffffff;
-        h2 += c;     c = (h2 >> 42); h2 &= 0x3ffffffffff;
-        h0 += c * 5; c = (h0 >> 44); h0 &= 0xfffffffffff;
-        h1 += c;         c = (h1 >> 44); h1 &= 0xfffffffffff;
-        h2 += c;     c = (h2 >> 42); h2 &= 0x3ffffffffff;
-        h0 += c * 5; c = (h0 >> 44); h0 &= 0xfffffffffff;
-        h1 += c;
+        st->buffer[i] = 1;
 
-        /* compute h + -p */
-        g0 = h0 + 5; c = (g0 >> 44); g0 &= 0xfffffffffff;
-        g1 = h1 + c; c = (g1 >> 44); g1 &= 0xfffffffffff;
-        g2 = h2 + c - (1ULL << 42);
-
-        /* select h if h < p, or h + -p if h >= p */
-        c = (g2 >> ((sizeof(unsigned long long) * 8) - 1)) - 1;
-        g0 &= c;
-        g1 &= c;
-        g2 &= c;
-        c = ~c;
-        h0 = (h0 & c) | g0;
-        h1 = (h1 & c) | g1;
-        h2 = (h2 & c) | g2;
-
-        /* h = (h + pad) */
-        t0 = st->pad[0];
-        t1 = st->pad[1];
-
-        h0 += (( t0                    ) & 0xfffffffffff)    ; c = (h0 >> 44); h0 &= 0xfffffffffff;
-        h1 += (((t0 >> 44) | (t1 << 20)) & 0xfffffffffff) + c; c = (h1 >> 44); h1 &= 0xfffffffffff;
-        h2 += (((t1 >> 24)             ) & 0x3ffffffffff) + c;                 h2 &= 0x3ffffffffff;
-
-        /* mac = h % (2^128) */
-        h0 = ((h0      ) | (h1 << 44));
-        h1 = ((h1 >> 20) | (h2 << 24));
+        for (i = i + 1; i < poly1305_block_size; i++) {
+            st->buffer[i] = 0;
+        }
+        st->final = 1;
+        poly1305_blocks(st, st->buffer, poly1305_block_size);
+    }
+
+    /* fully carry h */
+    h0 = st->h[0];
+    h1 = st->h[1];
+    h2 = st->h[2];
+
+    c = (h1 >> 44);
+    h1 &= 0xfffffffffff;
+    h2 += c;
+    c = (h2 >> 42);
+    h2 &= 0x3ffffffffff;
+    h0 += c * 5;
+    c = (h0 >> 44);
+    h0 &= 0xfffffffffff;
+    h1 += c;
+    c = (h1 >> 44);
+    h1 &= 0xfffffffffff;
+    h2 += c;
+    c = (h2 >> 42);
+    h2 &= 0x3ffffffffff;
+    h0 += c * 5;
+    c = (h0 >> 44);
+    h0 &= 0xfffffffffff;
+    h1 += c;
+
+    /* compute h + -p */
+    g0 = h0 + 5;
+    c  = (g0 >> 44);
+    g0 &= 0xfffffffffff;
+    g1 = h1 + c;
+    c  = (g1 >> 44);
+    g1 &= 0xfffffffffff;
+    g2 = h2 + c - (1ULL << 42);
+
+    /* select h if h < p, or h + -p if h >= p */
+    c = (g2 >> ((sizeof(unsigned long long) * 8) - 1)) - 1;
+    g0 &= c;
+    g1 &= c;
+    g2 &= c;
+    c  = ~c;
+    h0 = (h0 & c) | g0;
+    h1 = (h1 & c) | g1;
+    h2 = (h2 & c) | g2;
+
+    /* h = (h + pad) */
+    t0 = st->pad[0];
+    t1 = st->pad[1];
+
+    h0 += ((t0) &0xfffffffffff);
+    c = (h0 >> 44);
+    h0 &= 0xfffffffffff;
+    h1 += (((t0 >> 44) | (t1 << 20)) & 0xfffffffffff) + c;
+    c = (h1 >> 44);
+    h1 &= 0xfffffffffff;
+    h2 += (((t1 >> 24)) & 0x3ffffffffff) + c;
+    h2 &= 0x3ffffffffff;
+
+    /* mac = h % (2^128) */
+    h0 = ((h0) | (h1 << 44));
+    h1 = ((h1 >> 20) | (h2 << 24));
 
-        STORE64_LE(&mac[0], h0);
-        STORE64_LE(&mac[8], h1);
+    STORE64_LE(&mac[0], h0);
+    STORE64_LE(&mac[8], h1);
 
-        /* zero out the state */
-        sodium_memzero((void *)st, sizeof *st);
+    /* zero out the state */
+    sodium_memzero((void *) st, sizeof *st);
 }
diff -urpN libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna.c libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna.c
--- libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,11 +1,13 @@
 
+#include "poly1305_donna.h"
 #include "crypto_verify_16.h"
+#include "private/common.h"
 #include "utils.h"
-#include "poly1305_donna.h"
+
 #ifdef HAVE_TI_MODE
-# include "poly1305_donna64.h"
+#include "poly1305_donna64.h"
 #else
-# include "poly1305_donna32.h"
+#include "poly1305_donna32.h"
 #endif
 #include "../onetimeauth_poly1305.h"
 
@@ -19,15 +21,18 @@ poly1305_update(poly1305_state_internal_
     if (st->leftover) {
         unsigned long long want = (poly1305_block_size - st->leftover);
 
-        if (want > bytes)
+        if (want > bytes) {
             want = bytes;
-        for (i = 0; i < want; i++)
+        }
+        for (i = 0; i < want; i++) {
             st->buffer[st->leftover + i] = m[i];
+        }
         bytes -= want;
         m += want;
         st->leftover += want;
-        if (st->leftover < poly1305_block_size)
+        if (st->leftover < poly1305_block_size) {
             return;
+        }
         poly1305_blocks(st, st->buffer, poly1305_block_size);
         st->leftover = 0;
     }
@@ -52,7 +57,7 @@ poly1305_update(poly1305_state_internal_
 
 static int
 crypto_onetimeauth_poly1305_donna(unsigned char *out, const unsigned char *m,
-                                  unsigned long long inlen,
+                                  unsigned long long   inlen,
                                   const unsigned char *key)
 {
     CRYPTO_ALIGN(64) poly1305_state_internal_t state;
@@ -66,30 +71,30 @@ crypto_onetimeauth_poly1305_donna(unsign
 
 static int
 crypto_onetimeauth_poly1305_donna_init(crypto_onetimeauth_poly1305_state *state,
-                                       const unsigned char *key)
+                                       const unsigned char *              key)
 {
-    (void) sizeof(int[sizeof (crypto_onetimeauth_poly1305_state) >=
-                      sizeof (poly1305_state_internal_t) ? 1 : -1]);
-    poly1305_init((poly1305_state_internal_t *)(void *) state, key);
+    COMPILER_ASSERT(sizeof(crypto_onetimeauth_poly1305_state) >=
+        sizeof(poly1305_state_internal_t));
+    poly1305_init((poly1305_state_internal_t *) (void *) state, key);
 
     return 0;
 }
 
 static int
-crypto_onetimeauth_poly1305_donna_update(crypto_onetimeauth_poly1305_state *state,
-                                         const unsigned char *in,
-                                         unsigned long long inlen)
+crypto_onetimeauth_poly1305_donna_update(
+    crypto_onetimeauth_poly1305_state *state, const unsigned char *in,
+    unsigned long long inlen)
 {
-    poly1305_update((poly1305_state_internal_t *)(void *) state, in, inlen);
+    poly1305_update((poly1305_state_internal_t *) (void *) state, in, inlen);
 
     return 0;
 }
 
 static int
-crypto_onetimeauth_poly1305_donna_final(crypto_onetimeauth_poly1305_state *state,
-                                        unsigned char *out)
+crypto_onetimeauth_poly1305_donna_final(
+    crypto_onetimeauth_poly1305_state *state, unsigned char *out)
 {
-    poly1305_finish((poly1305_state_internal_t *)(void *) state, out);
+    poly1305_finish((poly1305_state_internal_t *) (void *) state, out);
 
     return 0;
 }
@@ -97,21 +102,23 @@ crypto_onetimeauth_poly1305_donna_final(
 static int
 crypto_onetimeauth_poly1305_donna_verify(const unsigned char *h,
                                          const unsigned char *in,
-                                         unsigned long long inlen,
+                                         unsigned long long   inlen,
                                          const unsigned char *k)
 {
     unsigned char correct[16];
 
-    crypto_onetimeauth_poly1305_donna(correct,in,inlen,k);
+    crypto_onetimeauth_poly1305_donna(correct, in, inlen, k);
 
-    return crypto_verify_16(h,correct);
+    return crypto_verify_16(h, correct);
 }
 
 struct crypto_onetimeauth_poly1305_implementation
-crypto_onetimeauth_poly1305_donna_implementation = {
-    SODIUM_C99(.onetimeauth =) crypto_onetimeauth_poly1305_donna,
-    SODIUM_C99(.onetimeauth_verify =) crypto_onetimeauth_poly1305_donna_verify,
-    SODIUM_C99(.onetimeauth_init =) crypto_onetimeauth_poly1305_donna_init,
-    SODIUM_C99(.onetimeauth_update =) crypto_onetimeauth_poly1305_donna_update,
-    SODIUM_C99(.onetimeauth_final =) crypto_onetimeauth_poly1305_donna_final
-};
+    crypto_onetimeauth_poly1305_donna_implementation = {
+        SODIUM_C99(.onetimeauth =) crypto_onetimeauth_poly1305_donna,
+        SODIUM_C99(.onetimeauth_verify =)
+            crypto_onetimeauth_poly1305_donna_verify,
+        SODIUM_C99(.onetimeauth_init =) crypto_onetimeauth_poly1305_donna_init,
+        SODIUM_C99(.onetimeauth_update =)
+            crypto_onetimeauth_poly1305_donna_update,
+        SODIUM_C99(.onetimeauth_final =) crypto_onetimeauth_poly1305_donna_final
+    };
diff -urpN libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna.h libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna.h
--- libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/donna/poly1305_donna.h	2017-03-06 11:13:57.000000000 +0100
@@ -3,8 +3,8 @@
 
 #include <stddef.h>
 
-#include "crypto_onetimeauth_poly1305.h"
 #include "../onetimeauth_poly1305.h"
+#include "crypto_onetimeauth_poly1305.h"
 
 extern struct crypto_onetimeauth_poly1305_implementation
     crypto_onetimeauth_poly1305_donna_implementation;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/onetimeauth_poly1305.c libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/onetimeauth_poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/onetimeauth_poly1305.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/onetimeauth_poly1305.c	2017-03-06 23:32:40.000000000 +0100
@@ -1,7 +1,10 @@
 
-#include "crypto_onetimeauth_poly1305.h"
 #include "onetimeauth_poly1305.h"
+#include "crypto_onetimeauth_poly1305.h"
+#include "private/common.h"
+#include "randombytes.h"
 #include "runtime.h"
+
 #include "donna/poly1305_donna.h"
 #if defined(HAVE_TI_MODE) && defined(HAVE_EMMINTRIN_H)
 # include "sse2/poly1305_sse2.h"
@@ -20,7 +23,7 @@ crypto_onetimeauth_poly1305(unsigned cha
 int
 crypto_onetimeauth_poly1305_verify(const unsigned char *h,
                                    const unsigned char *in,
-                                   unsigned long long inlen,
+                                   unsigned long long   inlen,
                                    const unsigned char *k)
 {
     return implementation->onetimeauth_verify(h, in, inlen, k);
@@ -28,36 +31,51 @@ crypto_onetimeauth_poly1305_verify(const
 
 int
 crypto_onetimeauth_poly1305_init(crypto_onetimeauth_poly1305_state *state,
-                                 const unsigned char *key)
+                                 const unsigned char *              key)
 {
     return implementation->onetimeauth_init(state, key);
 }
 
 int
 crypto_onetimeauth_poly1305_update(crypto_onetimeauth_poly1305_state *state,
-                                   const unsigned char *in,
-                                   unsigned long long inlen)
+                                   const unsigned char *              in,
+                                   unsigned long long                 inlen)
 {
     return implementation->onetimeauth_update(state, in, inlen);
 }
 
 int
 crypto_onetimeauth_poly1305_final(crypto_onetimeauth_poly1305_state *state,
-                                  unsigned char *out)
+                                  unsigned char *                    out)
 {
     return implementation->onetimeauth_final(state, out);
 }
 
 size_t
-crypto_onetimeauth_poly1305_bytes(void) {
+crypto_onetimeauth_poly1305_bytes(void)
+{
     return crypto_onetimeauth_poly1305_BYTES;
 }
 
 size_t
-crypto_onetimeauth_poly1305_keybytes(void) {
+crypto_onetimeauth_poly1305_keybytes(void)
+{
     return crypto_onetimeauth_poly1305_KEYBYTES;
 }
 
+size_t
+crypto_onetimeauth_poly1305_statebytes(void)
+{
+    return sizeof(crypto_onetimeauth_poly1305_state);
+}
+
+void
+crypto_onetimeauth_poly1305_keygen(
+    unsigned char k[crypto_onetimeauth_poly1305_KEYBYTES])
+{
+    randombytes_buf(k, crypto_onetimeauth_poly1305_KEYBYTES);
+}
+
 int
 _crypto_onetimeauth_poly1305_pick_best_implementation(void)
 {
diff -urpN libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/onetimeauth_poly1305.h libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/onetimeauth_poly1305.h
--- libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/onetimeauth_poly1305.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/onetimeauth_poly1305.h	2017-03-06 11:13:57.000000000 +0100
@@ -2,22 +2,20 @@
 #ifndef onetimeauth_poly1305_H
 #define onetimeauth_poly1305_H
 
+#include "crypto_onetimeauth_poly1305.h"
+
 typedef struct crypto_onetimeauth_poly1305_implementation {
-    int (*onetimeauth)(unsigned char *out,
-                       const unsigned char *in,
-                       unsigned long long inlen,
-                       const unsigned char *k);
-    int (*onetimeauth_verify)(const unsigned char *h,
-                              const unsigned char *in,
-                              unsigned long long inlen,
-                              const unsigned char *k);
+    int (*onetimeauth)(unsigned char *out, const unsigned char *in,
+                       unsigned long long inlen, const unsigned char *k);
+    int (*onetimeauth_verify)(const unsigned char *h, const unsigned char *in,
+                              unsigned long long inlen, const unsigned char *k);
     int (*onetimeauth_init)(crypto_onetimeauth_poly1305_state *state,
-                            const unsigned char *key);
+                            const unsigned char *              key);
     int (*onetimeauth_update)(crypto_onetimeauth_poly1305_state *state,
-                              const unsigned char *in,
-                              unsigned long long inlen);
+                              const unsigned char *              in,
+                              unsigned long long                 inlen);
     int (*onetimeauth_final)(crypto_onetimeauth_poly1305_state *state,
-                             unsigned char *out);
+                             unsigned char *                    out);
 } crypto_onetimeauth_poly1305_implementation;
 
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/sse2/poly1305_sse2.c libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/sse2/poly1305_sse2.c
--- libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/sse2/poly1305_sse2.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/sse2/poly1305_sse2.c	2017-03-06 23:32:40.000000000 +0100
@@ -2,67 +2,73 @@
 #include <stdint.h>
 #include <string.h>
 
+#include "../onetimeauth_poly1305.h"
 #include "crypto_verify_16.h"
-#include "utils.h"
 #include "poly1305_sse2.h"
-#include "../onetimeauth_poly1305.h"
+#include "private/common.h"
+#include "private/sse2_64_32.h"
+#include "utils.h"
 
 #if defined(HAVE_TI_MODE) && defined(HAVE_EMMINTRIN_H)
 
-#pragma GCC target("sse2")
+# ifdef __GNUC__
+#  pragma GCC target("sse2")
+# endif
 
-#include <emmintrin.h>
+# include <emmintrin.h>
 
 typedef __m128i xmmi;
 
-#if defined(__SIZEOF_INT128__)
+# if defined(__SIZEOF_INT128__)
 typedef unsigned __int128 uint128_t;
-#else
-typedef unsigned uint128_t __attribute__ ((mode(TI)));
-#endif
+# else
+typedef unsigned uint128_t __attribute__((mode(TI)));
+# endif
+
+# if defined(_MSC_VER)
+#  define POLY1305_NOINLINE __declspec(noinline)
+# elif defined(__GNUC__)
+#  define POLY1305_NOINLINE __attribute__((noinline))
+# else
+#  define POLY1305_NOINLINE
+# endif
 
-#if defined(_MSC_VER)
-# define POLY1305_NOINLINE __declspec(noinline)
-#elif defined(__GNUC__)
-# define POLY1305_NOINLINE __attribute__ ((noinline))
-#else
-# define POLY1305_NOINLINE
-#endif
-
-#define poly1305_block_size 32
+# define poly1305_block_size 32
 
 enum poly1305_state_flags_t {
-    poly1305_started = 1,
-    poly1305_final_shift8 = 4,
+    poly1305_started       = 1,
+    poly1305_final_shift8  = 4,
     poly1305_final_shift16 = 8,
-    poly1305_final_r2_r = 16, /* use [r^2,r] for the final block */
-    poly1305_final_r_1 = 32, /* use [r,1] for the final block */
+    poly1305_final_r2_r    = 16, /* use [r^2,r] for the final block */
+    poly1305_final_r_1     = 32, /* use [r,1] for the final block */
 };
 
 typedef struct poly1305_state_internal_t {
     union {
         uint64_t h[3];
         uint32_t hh[10];
-    };                       /*  40 bytes  */
-    uint32_t R[5];           /*  20 bytes  */
-    uint32_t R2[5];          /*  20 bytes  */
-    uint32_t R4[5];          /*  20 bytes  */
-    uint64_t pad[2];         /*  16 bytes  */
-    uint64_t flags;          /*   8 bytes  */
-    unsigned long long leftover; /* 8 bytes */
-    unsigned char buffer[poly1305_block_size]; /* 32 bytes */
-} poly1305_state_internal_t;   /* 164 bytes total */
+    };                                              /*  40 bytes  */
+    uint32_t           R[5];                        /*  20 bytes  */
+    uint32_t           R2[5];                       /*  20 bytes  */
+    uint32_t           R4[5];                       /*  20 bytes  */
+    uint64_t           pad[2];                      /*  16 bytes  */
+    uint64_t           flags;                       /*   8 bytes  */
+    unsigned long long leftover;                    /* 8 bytes */
+    unsigned char      buffer[poly1305_block_size]; /* 32 bytes */
+} poly1305_state_internal_t;                        /* 164 bytes total */
 
 /*
- * _mm_loadl_epi64() is turned into a simple MOVQ. So, unaligned accesses are totally fine, even though this intrinsic requires a __m128i* input.
+ * _mm_loadl_epi64() is turned into a simple MOVQ. So, unaligned accesses are
+ * totally fine, even though this intrinsic requires a __m128i* input.
  * This confuses dynamic analysis, so force alignment, only in debug mode.
  */
-#ifdef DEBUG
+# ifdef DEBUG
 static xmmi
 _fakealign_mm_loadl_epi64(const void *m)
 {
     xmmi tmp;
     memcpy(&tmp, m, 8);
+
     return _mm_loadl_epi64(&tmp);
 }
 # define _mm_loadl_epi64(X) _fakealign_mm_loadl_epi64(X)
@@ -70,51 +76,71 @@ _fakealign_mm_loadl_epi64(const void *m)
 
 /* copy 0-31 bytes */
 static inline void
-poly1305_block_copy31(unsigned char *dst, const unsigned char *src, unsigned long long bytes)
+poly1305_block_copy31(unsigned char *dst, const unsigned char *src,
+                      unsigned long long bytes)
 {
     if (bytes & 16) {
         _mm_store_si128((xmmi *) (void *) dst,
                         _mm_loadu_si128((const xmmi *) (const void *) src));
-        src += 16; dst += 16;
+        src += 16;
+        dst += 16;
+    }
+    if (bytes & 8) {
+        memcpy(dst, src, 8);
+        src += 8;
+        dst += 8;
+    }
+    if (bytes & 4) {
+        memcpy(dst, src, 4);
+        src += 4;
+        dst += 4;
+    }
+    if (bytes & 2) {
+        memcpy(dst, src, 2);
+        src += 2;
+        dst += 2;
+    }
+    if (bytes & 1) {
+        *dst = *src;
     }
-    if (bytes &  8) { memcpy(dst, src, 8); src += 8; dst += 8; }
-    if (bytes &  4) { memcpy(dst, src, 4); src += 4; dst += 4; }
-    if (bytes &  2) { memcpy(dst, src, 2); src += 2; dst += 2; }
-    if (bytes &  1) { *dst = *src; }
 }
 
 static POLY1305_NOINLINE void
-poly1305_init_ext(poly1305_state_internal_t *st,
-                  const unsigned char key[32], unsigned long long bytes)
+poly1305_init_ext(poly1305_state_internal_t *st, const unsigned char key[32],
+                  unsigned long long bytes)
 {
-    uint32_t *R;
-    uint128_t d[3];
-    uint64_t r0,r1,r2;
-    uint64_t rt0,rt1,rt2,st2,c;
-    uint64_t t0,t1;
+    uint32_t *         R;
+    uint128_t          d[3];
+    uint64_t           r0, r1, r2;
+    uint64_t           rt0, rt1, rt2, st2, c;
+    uint64_t           t0, t1;
     unsigned long long i;
 
-    if (!bytes) bytes = ~(unsigned long long)0;
-
+    if (!bytes) {
+        bytes = ~(unsigned long long) 0;
+    }
     /* H = 0 */
-    _mm_storeu_si128((xmmi *)(void *)&st->hh[0], _mm_setzero_si128());
-    _mm_storeu_si128((xmmi *)(void *)&st->hh[4], _mm_setzero_si128());
-    _mm_storeu_si128((xmmi *)(void *)&st->hh[8], _mm_setzero_si128());
+    _mm_storeu_si128((xmmi *) (void *) &st->hh[0], _mm_setzero_si128());
+    _mm_storeu_si128((xmmi *) (void *) &st->hh[4], _mm_setzero_si128());
+    _mm_storeu_si128((xmmi *) (void *) &st->hh[8], _mm_setzero_si128());
 
     /* clamp key */
     memcpy(&t0, key, 8);
     memcpy(&t1, key + 8, 8);
-    r0 = t0 & 0xffc0fffffff; t0 >>= 44; t0 |= t1 << 20;
-    r1 = t0 & 0xfffffc0ffff; t1 >>= 24;
+    r0 = t0 & 0xffc0fffffff;
+    t0 >>= 44;
+    t0 |= t1 << 20;
+    r1 = t0 & 0xfffffc0ffff;
+    t1 >>= 24;
     r2 = t1 & 0x00ffffffc0f;
 
     /* r^1 */
-    R = st->R;
-    R[0] = (uint32_t)( r0                      ) & 0x3ffffff;
-    R[1] = (uint32_t)(( r0 >> 26) | ( r1 << 18)) & 0x3ffffff;
-    R[2] = (uint32_t)(( r1 >>  8)              ) & 0x3ffffff;
-    R[3] = (uint32_t)(( r1 >> 34) | ( r2 << 10)) & 0x3ffffff;
-    R[4] = (uint32_t)(( r2 >> 16)              );
+    R    = st->R;
+    R[0] = (uint32_t)(r0) &0x3ffffff;
+    R[1] = (uint32_t)((r0 >> 26) | (r1 << 18)) & 0x3ffffff;
+    R[2] = (uint32_t)((r1 >> 8)) & 0x3ffffff;
+    R[3] = (uint32_t)((r1 >> 34) | (r2 << 10)) & 0x3ffffff;
+    R[4] = (uint32_t)((r2 >> 16));
 
     /* save pad */
     memcpy(&st->pad[0], key + 16, 8);
@@ -138,24 +164,37 @@ poly1305_init_ext(poly1305_state_interna
             }
         }
         st2 = rt2 * (5 << 2);
-        d[0] = ((uint128_t)rt0 * rt0) + ((uint128_t)(rt1 * 2) * st2);
-        d[1] = ((uint128_t)rt2 * st2) + ((uint128_t)(rt0 * 2) * rt1);
-        d[2] = ((uint128_t)rt1 * rt1) + ((uint128_t)(rt2 * 2) * rt0);
-        rt0 = (uint64_t)d[0] & 0xfffffffffff; c = (uint64_t)(d[0] >> 44);
-        d[1] += c   ; rt1 = (uint64_t)d[1] & 0xfffffffffff; c = (uint64_t)(d[1] >> 44);
-        d[2] += c   ; rt2 = (uint64_t)d[2] & 0x3ffffffffff; c = (uint64_t)(d[2] >> 42);
-        rt0 += c * 5; c = (rt0 >> 44); rt0 = rt0 & 0xfffffffffff;
-        rt1 += c    ; c = (rt1 >> 44); rt1 = rt1 & 0xfffffffffff;
-        rt2 += c    ; /* even if rt2 overflows, it will still fit in rp4 safely, and is safe to multiply with */
 
-        R[0] = (uint32_t)( rt0                     ) & 0x3ffffff;
+        d[0] = ((uint128_t) rt0 * rt0) + ((uint128_t)(rt1 * 2) * st2);
+        d[1] = ((uint128_t) rt2 * st2) + ((uint128_t)(rt0 * 2) * rt1);
+        d[2] = ((uint128_t) rt1 * rt1) + ((uint128_t)(rt2 * 2) * rt0);
+
+        rt0 = (uint64_t) d[0] & 0xfffffffffff;
+        c   = (uint64_t)(d[0] >> 44);
+        d[1] += c;
+
+        rt1 = (uint64_t) d[1] & 0xfffffffffff;
+        c   = (uint64_t)(d[1] >> 44);
+        d[2] += c;
+
+        rt2 = (uint64_t) d[2] & 0x3ffffffffff;
+        c   = (uint64_t)(d[2] >> 42);
+        rt0 += c * 5;
+        c   = (rt0 >> 44);
+        rt0 = rt0 & 0xfffffffffff;
+        rt1 += c;
+        c   = (rt1 >> 44);
+        rt1 = rt1 & 0xfffffffffff;
+        rt2 += c; /* even if rt2 overflows, it will still fit in rp4 safely, and
+                     is safe to multiply with */
+
+        R[0] = (uint32_t)(rt0) &0x3ffffff;
         R[1] = (uint32_t)((rt0 >> 26) | (rt1 << 18)) & 0x3ffffff;
-        R[2] = (uint32_t)((rt1 >> 8)               ) & 0x3ffffff;
+        R[2] = (uint32_t)((rt1 >> 8)) & 0x3ffffff;
         R[3] = (uint32_t)((rt1 >> 34) | (rt2 << 10)) & 0x3ffffff;
-        R[4] = (uint32_t)((rt2 >> 16)              );
+        R[4] = (uint32_t)((rt2 >> 16));
     }
-
-    st->flags = 0;
+    st->flags    = 0;
     st->leftover = 0U;
 }
 
@@ -163,25 +202,35 @@ static POLY1305_NOINLINE void
 poly1305_blocks(poly1305_state_internal_t *st, const unsigned char *m,
                 unsigned long long bytes)
 {
-    CRYPTO_ALIGN(64) xmmi HIBIT = _mm_shuffle_epi32(_mm_cvtsi32_si128(1 << 24), _MM_SHUFFLE(1,0,1,0));
-    const xmmi MMASK = _mm_shuffle_epi32(_mm_cvtsi32_si128((1 << 26) - 1), _MM_SHUFFLE(1,0,1,0));
-    const xmmi FIVE = _mm_shuffle_epi32(_mm_cvtsi32_si128(5), _MM_SHUFFLE(1,0,1,0));
-    xmmi H0,H1,H2,H3,H4;
-    xmmi T0,T1,T2,T3,T4,T5,T6,T7,T8;
-    xmmi M0,M1,M2,M3,M4;
-    xmmi M5,M6,M7,M8;
-    xmmi C1,C2;
-    xmmi R20,R21,R22,R23,R24,S21,S22,S23,S24;
-    xmmi R40,R41,R42,R43,R44,S41,S42,S43,S44;
-
-    if (st->flags & poly1305_final_shift8) HIBIT = _mm_srli_si128(HIBIT, 8);
-    if (st->flags & poly1305_final_shift16) HIBIT = _mm_setzero_si128();
+    CRYPTO_ALIGN(64)
+    xmmi HIBIT =
+        _mm_shuffle_epi32(_mm_cvtsi32_si128(1 << 24), _MM_SHUFFLE(1, 0, 1, 0));
+    const xmmi MMASK = _mm_shuffle_epi32(_mm_cvtsi32_si128((1 << 26) - 1),
+                                         _MM_SHUFFLE(1, 0, 1, 0));
+    const xmmi FIVE =
+        _mm_shuffle_epi32(_mm_cvtsi32_si128(5), _MM_SHUFFLE(1, 0, 1, 0));
+    xmmi H0, H1, H2, H3, H4;
+    xmmi T0, T1, T2, T3, T4, T5, T6, T7, T8;
+    xmmi M0, M1, M2, M3, M4;
+    xmmi M5, M6, M7, M8;
+    xmmi C1, C2;
+    xmmi R20, R21, R22, R23, R24, S21, S22, S23, S24;
+    xmmi R40, R41, R42, R43, R44, S41, S42, S43, S44;
 
+    if (st->flags & poly1305_final_shift8) {
+        HIBIT = _mm_srli_si128(HIBIT, 8);
+    }
+    if (st->flags & poly1305_final_shift16) {
+        HIBIT = _mm_setzero_si128();
+    }
     if (!(st->flags & poly1305_started)) {
         /* H = [Mx,My] */
-
-        T5 = _mm_unpacklo_epi64(_mm_loadl_epi64((const xmmi *)(const void *)(m + 0)), _mm_loadl_epi64((const xmmi *)(const void *)(m + 16)));
-        T6 = _mm_unpacklo_epi64(_mm_loadl_epi64((const xmmi *)(const void *)(m + 8)), _mm_loadl_epi64((const xmmi *)(const void *)(m + 24)));
+        T5 = _mm_unpacklo_epi64(
+            _mm_loadl_epi64((const xmmi *) (const void *) (m + 0)),
+            _mm_loadl_epi64((const xmmi *) (const void *) (m + 16)));
+        T6 = _mm_unpacklo_epi64(
+            _mm_loadl_epi64((const xmmi *) (const void *) (m + 8)),
+            _mm_loadl_epi64((const xmmi *) (const void *) (m + 24)));
         H0 = _mm_and_si128(MMASK, T5);
         H1 = _mm_and_si128(MMASK, _mm_srli_epi64(T5, 26));
         T5 = _mm_or_si128(_mm_srli_epi64(T5, 52), _mm_slli_epi64(T6, 12));
@@ -193,49 +242,47 @@ poly1305_blocks(poly1305_state_internal_
         bytes -= 32;
         st->flags |= poly1305_started;
     } else {
-        T0 = _mm_loadu_si128((const xmmi *)(const void *)&st->hh[0]);
-        T1 = _mm_loadu_si128((const xmmi *)(const void *)&st->hh[4]);
-        T2 = _mm_loadu_si128((const xmmi *)(const void *)&st->hh[8]);
-        H0 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(1,1,0,0));
-        H1 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(3,3,2,2));
-        H2 = _mm_shuffle_epi32(T1, _MM_SHUFFLE(1,1,0,0));
-        H3 = _mm_shuffle_epi32(T1, _MM_SHUFFLE(3,3,2,2));
-        H4 = _mm_shuffle_epi32(T2, _MM_SHUFFLE(1,1,0,0));
+        T0 = _mm_loadu_si128((const xmmi *) (const void *) &st->hh[0]);
+        T1 = _mm_loadu_si128((const xmmi *) (const void *) &st->hh[4]);
+        T2 = _mm_loadu_si128((const xmmi *) (const void *) &st->hh[8]);
+        H0 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(1, 1, 0, 0));
+        H1 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(3, 3, 2, 2));
+        H2 = _mm_shuffle_epi32(T1, _MM_SHUFFLE(1, 1, 0, 0));
+        H3 = _mm_shuffle_epi32(T1, _MM_SHUFFLE(3, 3, 2, 2));
+        H4 = _mm_shuffle_epi32(T2, _MM_SHUFFLE(1, 1, 0, 0));
     }
-
-    if (st->flags & (poly1305_final_r2_r|poly1305_final_r_1)) {
+    if (st->flags & (poly1305_final_r2_r | poly1305_final_r_1)) {
         if (st->flags & poly1305_final_r2_r) {
             /* use [r^2, r] */
-            T2 = _mm_loadu_si128((const xmmi *)(const void *)&st->R[0]);
-            T3 = _mm_cvtsi32_si128(st->R[4]);
-            T0 = _mm_loadu_si128((const xmmi *)(const void *)&st->R2[0]);
-            T1 = _mm_cvtsi32_si128(st->R2[4]);
-            T4 = _mm_unpacklo_epi32(T0, T2);
-            T5 = _mm_unpackhi_epi32(T0, T2);
+            T2  = _mm_loadu_si128((const xmmi *) (const void *) &st->R[0]);
+            T3  = _mm_cvtsi32_si128(st->R[4]);
+            T0  = _mm_loadu_si128((const xmmi *) (const void *) &st->R2[0]);
+            T1  = _mm_cvtsi32_si128(st->R2[4]);
+            T4  = _mm_unpacklo_epi32(T0, T2);
+            T5  = _mm_unpackhi_epi32(T0, T2);
             R24 = _mm_unpacklo_epi64(T1, T3);
         } else {
             /* use [r^1, 1] */
-            T0 = _mm_loadu_si128((const xmmi *)(const void *)&st->R[0]);
-            T1 = _mm_cvtsi32_si128(st->R[4]);
-            T2 = _mm_cvtsi32_si128(1);
-            T4 = _mm_unpacklo_epi32(T0, T2);
-            T5 = _mm_unpackhi_epi32(T0, T2);
+            T0  = _mm_loadu_si128((const xmmi *) (const void *) &st->R[0]);
+            T1  = _mm_cvtsi32_si128(st->R[4]);
+            T2  = _mm_cvtsi32_si128(1);
+            T4  = _mm_unpacklo_epi32(T0, T2);
+            T5  = _mm_unpackhi_epi32(T0, T2);
             R24 = T1;
         }
-
-        R20 = _mm_shuffle_epi32(T4, _MM_SHUFFLE(1,1,0,0));
-        R21 = _mm_shuffle_epi32(T4, _MM_SHUFFLE(3,3,2,2));
-        R22 = _mm_shuffle_epi32(T5, _MM_SHUFFLE(1,1,0,0));
-        R23 = _mm_shuffle_epi32(T5, _MM_SHUFFLE(3,3,2,2));
+        R20 = _mm_shuffle_epi32(T4, _MM_SHUFFLE(1, 1, 0, 0));
+        R21 = _mm_shuffle_epi32(T4, _MM_SHUFFLE(3, 3, 2, 2));
+        R22 = _mm_shuffle_epi32(T5, _MM_SHUFFLE(1, 1, 0, 0));
+        R23 = _mm_shuffle_epi32(T5, _MM_SHUFFLE(3, 3, 2, 2));
     } else {
         /* use [r^2, r^2] */
-        T0 = _mm_loadu_si128((const xmmi *)(const void *)&st->R2[0]);
-        T1 = _mm_cvtsi32_si128(st->R2[4]);
-        R20 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(0,0,0,0));
-        R21 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(1,1,1,1));
-        R22 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(2,2,2,2));
-        R23 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(3,3,3,3));
-        R24 = _mm_shuffle_epi32(T1, _MM_SHUFFLE(0,0,0,0));
+        T0  = _mm_loadu_si128((const xmmi *) (const void *) &st->R2[0]);
+        T1  = _mm_cvtsi32_si128(st->R2[4]);
+        R20 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(0, 0, 0, 0));
+        R21 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(1, 1, 1, 1));
+        R22 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(2, 2, 2, 2));
+        R23 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(3, 3, 3, 3));
+        R24 = _mm_shuffle_epi32(T1, _MM_SHUFFLE(0, 0, 0, 0));
     }
     S21 = _mm_mul_epu32(R21, FIVE);
     S22 = _mm_mul_epu32(R22, FIVE);
@@ -243,74 +290,120 @@ poly1305_blocks(poly1305_state_internal_
     S24 = _mm_mul_epu32(R24, FIVE);
 
     if (bytes >= 64) {
-        T0 = _mm_loadu_si128((const xmmi *)(const void *)&st->R4[0]);
-        T1 = _mm_cvtsi32_si128(st->R4[4]);
-        R40 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(0,0,0,0));
-        R41 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(1,1,1,1));
-        R42 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(2,2,2,2));
-        R43 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(3,3,3,3));
-        R44 = _mm_shuffle_epi32(T1, _MM_SHUFFLE(0,0,0,0));
+        T0  = _mm_loadu_si128((const xmmi *) (const void *) &st->R4[0]);
+        T1  = _mm_cvtsi32_si128(st->R4[4]);
+        R40 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(0, 0, 0, 0));
+        R41 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(1, 1, 1, 1));
+        R42 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(2, 2, 2, 2));
+        R43 = _mm_shuffle_epi32(T0, _MM_SHUFFLE(3, 3, 3, 3));
+        R44 = _mm_shuffle_epi32(T1, _MM_SHUFFLE(0, 0, 0, 0));
         S41 = _mm_mul_epu32(R41, FIVE);
         S42 = _mm_mul_epu32(R42, FIVE);
         S43 = _mm_mul_epu32(R43, FIVE);
         S44 = _mm_mul_epu32(R44, FIVE);
 
         while (bytes >= 64) {
-            xmmi v00,v01,v02,v03,v04;
-            xmmi v10,v11,v12,v13,v14;
-            xmmi v20,v21,v22,v23,v24;
-            xmmi v30,v31,v32,v33,v34;
-            xmmi v40,v41,v42,v43,v44;
-            xmmi T14,T15;
+            xmmi v00, v01, v02, v03, v04;
+            xmmi v10, v11, v12, v13, v14;
+            xmmi v20, v21, v22, v23, v24;
+            xmmi v30, v31, v32, v33, v34;
+            xmmi v40, v41, v42, v43, v44;
+            xmmi T14, T15;
 
             /* H *= [r^4,r^4], preload [Mx,My] */
             T15 = S42;
-            T0  = H4; T0  = _mm_mul_epu32(T0, S41);
-            v01 = H3; v01 = _mm_mul_epu32(v01, T15);
+            T0  = H4;
+            T0  = _mm_mul_epu32(T0, S41);
+            v01 = H3;
+            v01 = _mm_mul_epu32(v01, T15);
             T14 = S43;
-            T1  = H4; T1  = _mm_mul_epu32(T1 , T15);
-            v11 = H3; v11 = _mm_mul_epu32(v11, T14);
-            T2  = H4; T2  = _mm_mul_epu32(T2 , T14); T0 = _mm_add_epi64(T0, v01);
+            T1  = H4;
+            T1  = _mm_mul_epu32(T1, T15);
+            v11 = H3;
+            v11 = _mm_mul_epu32(v11, T14);
+            T2  = H4;
+            T2  = _mm_mul_epu32(T2, T14);
+            T0  = _mm_add_epi64(T0, v01);
             T15 = S44;
-            v02 = H2; v02 = _mm_mul_epu32(v02, T14);
-            T3  = H4; T3  = _mm_mul_epu32(T3 , T15); T1 = _mm_add_epi64(T1, v11);
-            v03 = H1; v03 = _mm_mul_epu32(v03, T15);
-            v12 = H2; v12 = _mm_mul_epu32(v12, T15); T0 = _mm_add_epi64(T0, v02);
+            v02 = H2;
+            v02 = _mm_mul_epu32(v02, T14);
+            T3  = H4;
+            T3  = _mm_mul_epu32(T3, T15);
+            T1  = _mm_add_epi64(T1, v11);
+            v03 = H1;
+            v03 = _mm_mul_epu32(v03, T15);
+            v12 = H2;
+            v12 = _mm_mul_epu32(v12, T15);
+            T0  = _mm_add_epi64(T0, v02);
             T14 = R40;
-            v21 = H3; v21 = _mm_mul_epu32(v21, T15);
-            v31 = H3; v31 = _mm_mul_epu32(v31, T14); T0 = _mm_add_epi64(T0, v03);
-            T4  = H4; T4  = _mm_mul_epu32(T4 , T14); T1 = _mm_add_epi64(T1, v12);
-            v04 = H0; v04 = _mm_mul_epu32(v04, T14); T2 = _mm_add_epi64(T2, v21);
-            v13 = H1; v13 = _mm_mul_epu32(v13, T14); T3 = _mm_add_epi64(T3, v31);
+            v21 = H3;
+            v21 = _mm_mul_epu32(v21, T15);
+            v31 = H3;
+            v31 = _mm_mul_epu32(v31, T14);
+            T0  = _mm_add_epi64(T0, v03);
+            T4  = H4;
+            T4  = _mm_mul_epu32(T4, T14);
+            T1  = _mm_add_epi64(T1, v12);
+            v04 = H0;
+            v04 = _mm_mul_epu32(v04, T14);
+            T2  = _mm_add_epi64(T2, v21);
+            v13 = H1;
+            v13 = _mm_mul_epu32(v13, T14);
+            T3  = _mm_add_epi64(T3, v31);
             T15 = R41;
-            v22 = H2; v22 = _mm_mul_epu32(v22, T14);
-            v32 = H2; v32 = _mm_mul_epu32(v32, T15); T0 = _mm_add_epi64(T0, v04);
-            v41 = H3; v41 = _mm_mul_epu32(v41, T15); T1 = _mm_add_epi64(T1, v13);
-            v14 = H0; v14 = _mm_mul_epu32(v14, T15); T2 = _mm_add_epi64(T2, v22);
+            v22 = H2;
+            v22 = _mm_mul_epu32(v22, T14);
+            v32 = H2;
+            v32 = _mm_mul_epu32(v32, T15);
+            T0  = _mm_add_epi64(T0, v04);
+            v41 = H3;
+            v41 = _mm_mul_epu32(v41, T15);
+            T1  = _mm_add_epi64(T1, v13);
+            v14 = H0;
+            v14 = _mm_mul_epu32(v14, T15);
+            T2  = _mm_add_epi64(T2, v22);
             T14 = R42;
-            T5 = _mm_unpacklo_epi64(_mm_loadl_epi64((const xmmi *)(const void *)(m + 0)), _mm_loadl_epi64((const xmmi *)(const void *)(m + 16)));
-            v23 = H1; v23 = _mm_mul_epu32(v23, T15); T3 = _mm_add_epi64(T3, v32);
-            v33 = H1; v33 = _mm_mul_epu32(v33, T14); T4 = _mm_add_epi64(T4, v41);
-            v42 = H2; v42 = _mm_mul_epu32(v42, T14); T1 = _mm_add_epi64(T1, v14);
+            T5  = _mm_unpacklo_epi64(
+                _mm_loadl_epi64((const xmmi *) (const void *) (m + 0)),
+                _mm_loadl_epi64((const xmmi *) (const void *) (m + 16)));
+            v23 = H1;
+            v23 = _mm_mul_epu32(v23, T15);
+            T3  = _mm_add_epi64(T3, v32);
+            v33 = H1;
+            v33 = _mm_mul_epu32(v33, T14);
+            T4  = _mm_add_epi64(T4, v41);
+            v42 = H2;
+            v42 = _mm_mul_epu32(v42, T14);
+            T1  = _mm_add_epi64(T1, v14);
             T15 = R43;
-            T6 = _mm_unpacklo_epi64(_mm_loadl_epi64((const xmmi *)(const void *)(m + 8)), _mm_loadl_epi64((const xmmi *)(const void *)(m + 24)));
-            v24 = H0; v24 = _mm_mul_epu32(v24, T14); T2 = _mm_add_epi64(T2, v23);
-            v34 = H0; v34 = _mm_mul_epu32(v34, T15); T3 = _mm_add_epi64(T3, v33);
-            M0 = _mm_and_si128(MMASK, T5);
-            v43 = H1; v43 = _mm_mul_epu32(v43, T15); T4 = _mm_add_epi64(T4, v42);
-            M1 = _mm_and_si128(MMASK, _mm_srli_epi64(T5, 26));
-            v44 = H0; v44 = _mm_mul_epu32(v44, R44); T2 = _mm_add_epi64(T2, v24);
-            T5 = _mm_or_si128(_mm_srli_epi64(T5, 52), _mm_slli_epi64(T6, 12));
-            T3 = _mm_add_epi64(T3, v34);
-            M3 = _mm_and_si128(MMASK, _mm_srli_epi64(T6, 14));
-            T4 = _mm_add_epi64(T4, v43);
-            M2 = _mm_and_si128(MMASK, T5);
-            T4 = _mm_add_epi64(T4, v44);
-            M4 = _mm_or_si128(_mm_srli_epi64(T6, 40), HIBIT);
+            T6  = _mm_unpacklo_epi64(
+                _mm_loadl_epi64((const xmmi *) (const void *) (m + 8)),
+                _mm_loadl_epi64((const xmmi *) (const void *) (m + 24)));
+            v24 = H0;
+            v24 = _mm_mul_epu32(v24, T14);
+            T2  = _mm_add_epi64(T2, v23);
+            v34 = H0;
+            v34 = _mm_mul_epu32(v34, T15);
+            T3  = _mm_add_epi64(T3, v33);
+            M0  = _mm_and_si128(MMASK, T5);
+            v43 = H1;
+            v43 = _mm_mul_epu32(v43, T15);
+            T4  = _mm_add_epi64(T4, v42);
+            M1  = _mm_and_si128(MMASK, _mm_srli_epi64(T5, 26));
+            v44 = H0;
+            v44 = _mm_mul_epu32(v44, R44);
+            T2  = _mm_add_epi64(T2, v24);
+            T5  = _mm_or_si128(_mm_srli_epi64(T5, 52), _mm_slli_epi64(T6, 12));
+            T3  = _mm_add_epi64(T3, v34);
+            M3  = _mm_and_si128(MMASK, _mm_srli_epi64(T6, 14));
+            T4  = _mm_add_epi64(T4, v43);
+            M2  = _mm_and_si128(MMASK, T5);
+            T4  = _mm_add_epi64(T4, v44);
+            M4  = _mm_or_si128(_mm_srli_epi64(T6, 40), HIBIT);
 
             /* H += [Mx',My'] */
-            T5 = _mm_loadu_si128((const xmmi *)(const void *)(m + 32));
-            T6 = _mm_loadu_si128((const xmmi *)(const void *)(m + 48));
+            T5 = _mm_loadu_si128((const xmmi *) (const void *) (m + 32));
+            T6 = _mm_loadu_si128((const xmmi *) (const void *) (m + 48));
             T7 = _mm_unpacklo_epi32(T5, T6);
             T8 = _mm_unpackhi_epi32(T5, T6);
             M5 = _mm_unpacklo_epi32(T7, _mm_setzero_si128());
@@ -328,46 +421,110 @@ poly1305_blocks(poly1305_state_internal_
 
             /* H += [Mx,My]*[r^2,r^2] */
             T15 = S22;
-            v00 = M4; v00 = _mm_mul_epu32(v00, S21);
-            v01 = M3; v01 = _mm_mul_epu32(v01, T15);
+            v00 = M4;
+            v00 = _mm_mul_epu32(v00, S21);
+            v01 = M3;
+            v01 = _mm_mul_epu32(v01, T15);
             T14 = S23;
-            v10 = M4; v10 = _mm_mul_epu32(v10, T15);
-            v11 = M3; v11 = _mm_mul_epu32(v11, T14); T0 = _mm_add_epi64(T0, v00);
-            v20 = M4; v20 = _mm_mul_epu32(v20, T14); T0 = _mm_add_epi64(T0, v01);
+            v10 = M4;
+            v10 = _mm_mul_epu32(v10, T15);
+            v11 = M3;
+            v11 = _mm_mul_epu32(v11, T14);
+            T0  = _mm_add_epi64(T0, v00);
+            v20 = M4;
+            v20 = _mm_mul_epu32(v20, T14);
+            T0  = _mm_add_epi64(T0, v01);
             T15 = S24;
-            v02 = M2; v02 = _mm_mul_epu32(v02, T14); T1 = _mm_add_epi64(T1, v10);
-            v30 = M4; v30 = _mm_mul_epu32(v30, T15); T1 = _mm_add_epi64(T1, v11);
-            v03 = M1; v03 = _mm_mul_epu32(v03, T15); T2 = _mm_add_epi64(T2, v20);
-            v12 = M2; v12 = _mm_mul_epu32(v12, T15); T0 = _mm_add_epi64(T0, v02);
+            v02 = M2;
+            v02 = _mm_mul_epu32(v02, T14);
+            T1  = _mm_add_epi64(T1, v10);
+            v30 = M4;
+            v30 = _mm_mul_epu32(v30, T15);
+            T1  = _mm_add_epi64(T1, v11);
+            v03 = M1;
+            v03 = _mm_mul_epu32(v03, T15);
+            T2  = _mm_add_epi64(T2, v20);
+            v12 = M2;
+            v12 = _mm_mul_epu32(v12, T15);
+            T0  = _mm_add_epi64(T0, v02);
             T14 = R20;
-            v21 = M3; v21 = _mm_mul_epu32(v21, T15); T3 = _mm_add_epi64(T3, v30);
-            v31 = M3; v31 = _mm_mul_epu32(v31, T14); T0 = _mm_add_epi64(T0, v03);
-            v40 = M4; v40 = _mm_mul_epu32(v40, T14); T1 = _mm_add_epi64(T1, v12);
-            v04 = M0; v04 = _mm_mul_epu32(v04, T14); T2 = _mm_add_epi64(T2, v21);
-            v13 = M1; v13 = _mm_mul_epu32(v13, T14); T3 = _mm_add_epi64(T3, v31);
+            v21 = M3;
+            v21 = _mm_mul_epu32(v21, T15);
+            T3  = _mm_add_epi64(T3, v30);
+            v31 = M3;
+            v31 = _mm_mul_epu32(v31, T14);
+            T0  = _mm_add_epi64(T0, v03);
+            v40 = M4;
+            v40 = _mm_mul_epu32(v40, T14);
+            T1  = _mm_add_epi64(T1, v12);
+            v04 = M0;
+            v04 = _mm_mul_epu32(v04, T14);
+            T2  = _mm_add_epi64(T2, v21);
+            v13 = M1;
+            v13 = _mm_mul_epu32(v13, T14);
+            T3  = _mm_add_epi64(T3, v31);
             T15 = R21;
-            v22 = M2; v22 = _mm_mul_epu32(v22, T14); T4 = _mm_add_epi64(T4, v40);
-            v32 = M2; v32 = _mm_mul_epu32(v32, T15); T0 = _mm_add_epi64(T0, v04);
-            v41 = M3; v41 = _mm_mul_epu32(v41, T15); T1 = _mm_add_epi64(T1, v13);
-            v14 = M0; v14 = _mm_mul_epu32(v14, T15); T2 = _mm_add_epi64(T2, v22);
+            v22 = M2;
+            v22 = _mm_mul_epu32(v22, T14);
+            T4  = _mm_add_epi64(T4, v40);
+            v32 = M2;
+            v32 = _mm_mul_epu32(v32, T15);
+            T0  = _mm_add_epi64(T0, v04);
+            v41 = M3;
+            v41 = _mm_mul_epu32(v41, T15);
+            T1  = _mm_add_epi64(T1, v13);
+            v14 = M0;
+            v14 = _mm_mul_epu32(v14, T15);
+            T2  = _mm_add_epi64(T2, v22);
             T14 = R22;
-            v23 = M1; v23 = _mm_mul_epu32(v23, T15); T3 = _mm_add_epi64(T3, v32);
-            v33 = M1; v33 = _mm_mul_epu32(v33, T14); T4 = _mm_add_epi64(T4, v41);
-            v42 = M2; v42 = _mm_mul_epu32(v42, T14); T1 = _mm_add_epi64(T1, v14);
+            v23 = M1;
+            v23 = _mm_mul_epu32(v23, T15);
+            T3  = _mm_add_epi64(T3, v32);
+            v33 = M1;
+            v33 = _mm_mul_epu32(v33, T14);
+            T4  = _mm_add_epi64(T4, v41);
+            v42 = M2;
+            v42 = _mm_mul_epu32(v42, T14);
+            T1  = _mm_add_epi64(T1, v14);
             T15 = R23;
-            v24 = M0; v24 = _mm_mul_epu32(v24, T14); T2 = _mm_add_epi64(T2, v23);
-            v34 = M0; v34 = _mm_mul_epu32(v34, T15); T3 = _mm_add_epi64(T3, v33);
-            v43 = M1; v43 = _mm_mul_epu32(v43, T15); T4 = _mm_add_epi64(T4, v42);
-            v44 = M0; v44 = _mm_mul_epu32(v44, R24); T2 = _mm_add_epi64(T2, v24);
-            T3 = _mm_add_epi64(T3, v34);
-            T4 = _mm_add_epi64(T4, v43);
-            T4 = _mm_add_epi64(T4, v44);
+            v24 = M0;
+            v24 = _mm_mul_epu32(v24, T14);
+            T2  = _mm_add_epi64(T2, v23);
+            v34 = M0;
+            v34 = _mm_mul_epu32(v34, T15);
+            T3  = _mm_add_epi64(T3, v33);
+            v43 = M1;
+            v43 = _mm_mul_epu32(v43, T15);
+            T4  = _mm_add_epi64(T4, v42);
+            v44 = M0;
+            v44 = _mm_mul_epu32(v44, R24);
+            T2  = _mm_add_epi64(T2, v24);
+            T3  = _mm_add_epi64(T3, v34);
+            T4  = _mm_add_epi64(T4, v43);
+            T4  = _mm_add_epi64(T4, v44);
 
             /* reduce */
-            C1 = _mm_srli_epi64(T0, 26); C2 = _mm_srli_epi64(T3, 26); T0 = _mm_and_si128(T0, MMASK); T3 = _mm_and_si128(T3, MMASK); T1 = _mm_add_epi64(T1, C1); T4 = _mm_add_epi64(T4, C2);
-            C1 = _mm_srli_epi64(T1, 26); C2 = _mm_srli_epi64(T4, 26); T1 = _mm_and_si128(T1, MMASK); T4 = _mm_and_si128(T4, MMASK); T2 = _mm_add_epi64(T2, C1); T0 = _mm_add_epi64(T0, _mm_mul_epu32(C2, FIVE));
-            C1 = _mm_srli_epi64(T2, 26); C2 = _mm_srli_epi64(T0, 26); T2 = _mm_and_si128(T2, MMASK); T0 = _mm_and_si128(T0, MMASK); T3 = _mm_add_epi64(T3, C1); T1 = _mm_add_epi64(T1, C2);
-            C1 = _mm_srli_epi64(T3, 26);                              T3 = _mm_and_si128(T3, MMASK);                                T4 = _mm_add_epi64(T4, C1);
+            C1 = _mm_srli_epi64(T0, 26);
+            C2 = _mm_srli_epi64(T3, 26);
+            T0 = _mm_and_si128(T0, MMASK);
+            T3 = _mm_and_si128(T3, MMASK);
+            T1 = _mm_add_epi64(T1, C1);
+            T4 = _mm_add_epi64(T4, C2);
+            C1 = _mm_srli_epi64(T1, 26);
+            C2 = _mm_srli_epi64(T4, 26);
+            T1 = _mm_and_si128(T1, MMASK);
+            T4 = _mm_and_si128(T4, MMASK);
+            T2 = _mm_add_epi64(T2, C1);
+            T0 = _mm_add_epi64(T0, _mm_mul_epu32(C2, FIVE));
+            C1 = _mm_srli_epi64(T2, 26);
+            C2 = _mm_srli_epi64(T0, 26);
+            T2 = _mm_and_si128(T2, MMASK);
+            T0 = _mm_and_si128(T0, MMASK);
+            T3 = _mm_add_epi64(T3, C1);
+            T1 = _mm_add_epi64(T1, C2);
+            C1 = _mm_srli_epi64(T3, 26);
+            T3 = _mm_and_si128(T3, MMASK);
+            T4 = _mm_add_epi64(T4, C1);
 
             /* Final: H = (H*[r^4,r^4] + [Mx,My]*[r^2,r^2] + [Mx',My']) */
             H0 = T0;
@@ -382,54 +539,96 @@ poly1305_blocks(poly1305_state_internal_
     }
 
     if (bytes >= 32) {
-        xmmi v01,v02,v03,v04;
-        xmmi v11,v12,v13,v14;
-        xmmi v21,v22,v23,v24;
-        xmmi v31,v32,v33,v34;
-        xmmi v41,v42,v43,v44;
-        xmmi T14,T15;
+        xmmi v01, v02, v03, v04;
+        xmmi v11, v12, v13, v14;
+        xmmi v21, v22, v23, v24;
+        xmmi v31, v32, v33, v34;
+        xmmi v41, v42, v43, v44;
+        xmmi T14, T15;
 
         /* H *= [r^2,r^2] */
         T15 = S22;
-        T0  = H4; T0  = _mm_mul_epu32(T0, S21);
-        v01 = H3; v01 = _mm_mul_epu32(v01, T15);
+        T0  = H4;
+        T0  = _mm_mul_epu32(T0, S21);
+        v01 = H3;
+        v01 = _mm_mul_epu32(v01, T15);
         T14 = S23;
-        T1  = H4; T1  = _mm_mul_epu32(T1 , T15);
-        v11 = H3; v11 = _mm_mul_epu32(v11, T14);
-        T2  = H4; T2  = _mm_mul_epu32(T2 , T14); T0 = _mm_add_epi64(T0, v01);
+        T1  = H4;
+        T1  = _mm_mul_epu32(T1, T15);
+        v11 = H3;
+        v11 = _mm_mul_epu32(v11, T14);
+        T2  = H4;
+        T2  = _mm_mul_epu32(T2, T14);
+        T0  = _mm_add_epi64(T0, v01);
         T15 = S24;
-        v02 = H2; v02 = _mm_mul_epu32(v02, T14);
-        T3  = H4; T3  = _mm_mul_epu32(T3 , T15); T1 = _mm_add_epi64(T1, v11);
-        v03 = H1; v03 = _mm_mul_epu32(v03, T15);
-        v12 = H2; v12 = _mm_mul_epu32(v12, T15); T0 = _mm_add_epi64(T0, v02);
+        v02 = H2;
+        v02 = _mm_mul_epu32(v02, T14);
+        T3  = H4;
+        T3  = _mm_mul_epu32(T3, T15);
+        T1  = _mm_add_epi64(T1, v11);
+        v03 = H1;
+        v03 = _mm_mul_epu32(v03, T15);
+        v12 = H2;
+        v12 = _mm_mul_epu32(v12, T15);
+        T0  = _mm_add_epi64(T0, v02);
         T14 = R20;
-        v21 = H3; v21 = _mm_mul_epu32(v21, T15);
-        v31 = H3; v31 = _mm_mul_epu32(v31, T14); T0 = _mm_add_epi64(T0, v03);
-        T4  = H4; T4  = _mm_mul_epu32(T4 , T14); T1 = _mm_add_epi64(T1, v12);
-        v04 = H0; v04 = _mm_mul_epu32(v04, T14); T2 = _mm_add_epi64(T2, v21);
-        v13 = H1; v13 = _mm_mul_epu32(v13, T14); T3 = _mm_add_epi64(T3, v31);
+        v21 = H3;
+        v21 = _mm_mul_epu32(v21, T15);
+        v31 = H3;
+        v31 = _mm_mul_epu32(v31, T14);
+        T0  = _mm_add_epi64(T0, v03);
+        T4  = H4;
+        T4  = _mm_mul_epu32(T4, T14);
+        T1  = _mm_add_epi64(T1, v12);
+        v04 = H0;
+        v04 = _mm_mul_epu32(v04, T14);
+        T2  = _mm_add_epi64(T2, v21);
+        v13 = H1;
+        v13 = _mm_mul_epu32(v13, T14);
+        T3  = _mm_add_epi64(T3, v31);
         T15 = R21;
-        v22 = H2; v22 = _mm_mul_epu32(v22, T14);
-        v32 = H2; v32 = _mm_mul_epu32(v32, T15); T0 = _mm_add_epi64(T0, v04);
-        v41 = H3; v41 = _mm_mul_epu32(v41, T15); T1 = _mm_add_epi64(T1, v13);
-        v14 = H0; v14 = _mm_mul_epu32(v14, T15); T2 = _mm_add_epi64(T2, v22);
+        v22 = H2;
+        v22 = _mm_mul_epu32(v22, T14);
+        v32 = H2;
+        v32 = _mm_mul_epu32(v32, T15);
+        T0  = _mm_add_epi64(T0, v04);
+        v41 = H3;
+        v41 = _mm_mul_epu32(v41, T15);
+        T1  = _mm_add_epi64(T1, v13);
+        v14 = H0;
+        v14 = _mm_mul_epu32(v14, T15);
+        T2  = _mm_add_epi64(T2, v22);
         T14 = R22;
-        v23 = H1; v23 = _mm_mul_epu32(v23, T15); T3 = _mm_add_epi64(T3, v32);
-        v33 = H1; v33 = _mm_mul_epu32(v33, T14); T4 = _mm_add_epi64(T4, v41);
-        v42 = H2; v42 = _mm_mul_epu32(v42, T14); T1 = _mm_add_epi64(T1, v14);
+        v23 = H1;
+        v23 = _mm_mul_epu32(v23, T15);
+        T3  = _mm_add_epi64(T3, v32);
+        v33 = H1;
+        v33 = _mm_mul_epu32(v33, T14);
+        T4  = _mm_add_epi64(T4, v41);
+        v42 = H2;
+        v42 = _mm_mul_epu32(v42, T14);
+        T1  = _mm_add_epi64(T1, v14);
         T15 = R23;
-        v24 = H0; v24 = _mm_mul_epu32(v24, T14); T2 = _mm_add_epi64(T2, v23);
-        v34 = H0; v34 = _mm_mul_epu32(v34, T15); T3 = _mm_add_epi64(T3, v33);
-        v43 = H1; v43 = _mm_mul_epu32(v43, T15); T4 = _mm_add_epi64(T4, v42);
-        v44 = H0; v44 = _mm_mul_epu32(v44, R24); T2 = _mm_add_epi64(T2, v24);
-        T3 = _mm_add_epi64(T3, v34);
-        T4 = _mm_add_epi64(T4, v43);
-        T4 = _mm_add_epi64(T4, v44);
+        v24 = H0;
+        v24 = _mm_mul_epu32(v24, T14);
+        T2  = _mm_add_epi64(T2, v23);
+        v34 = H0;
+        v34 = _mm_mul_epu32(v34, T15);
+        T3  = _mm_add_epi64(T3, v33);
+        v43 = H1;
+        v43 = _mm_mul_epu32(v43, T15);
+        T4  = _mm_add_epi64(T4, v42);
+        v44 = H0;
+        v44 = _mm_mul_epu32(v44, R24);
+        T2  = _mm_add_epi64(T2, v24);
+        T3  = _mm_add_epi64(T3, v34);
+        T4  = _mm_add_epi64(T4, v43);
+        T4  = _mm_add_epi64(T4, v44);
 
         /* H += [Mx,My] */
         if (m) {
-            T5 = _mm_loadu_si128((const xmmi *)(const void *)(m + 0));
-            T6 = _mm_loadu_si128((const xmmi *)(const void *)(m + 16));
+            T5 = _mm_loadu_si128((const xmmi *) (const void *) (m + 0));
+            T6 = _mm_loadu_si128((const xmmi *) (const void *) (m + 16));
             T7 = _mm_unpacklo_epi32(T5, T6);
             T8 = _mm_unpackhi_epi32(T5, T6);
             M0 = _mm_unpacklo_epi32(T7, _mm_setzero_si128());
@@ -447,10 +646,27 @@ poly1305_blocks(poly1305_state_internal_
         }
 
         /* reduce */
-        C1 = _mm_srli_epi64(T0, 26); C2 = _mm_srli_epi64(T3, 26); T0 = _mm_and_si128(T0, MMASK); T3 = _mm_and_si128(T3, MMASK); T1 = _mm_add_epi64(T1, C1); T4 = _mm_add_epi64(T4, C2);
-        C1 = _mm_srli_epi64(T1, 26); C2 = _mm_srli_epi64(T4, 26); T1 = _mm_and_si128(T1, MMASK); T4 = _mm_and_si128(T4, MMASK); T2 = _mm_add_epi64(T2, C1); T0 = _mm_add_epi64(T0, _mm_mul_epu32(C2, FIVE));
-        C1 = _mm_srli_epi64(T2, 26); C2 = _mm_srli_epi64(T0, 26); T2 = _mm_and_si128(T2, MMASK); T0 = _mm_and_si128(T0, MMASK); T3 = _mm_add_epi64(T3, C1); T1 = _mm_add_epi64(T1, C2);
-        C1 = _mm_srli_epi64(T3, 26);                              T3 = _mm_and_si128(T3, MMASK);                                T4 = _mm_add_epi64(T4, C1);
+        C1 = _mm_srli_epi64(T0, 26);
+        C2 = _mm_srli_epi64(T3, 26);
+        T0 = _mm_and_si128(T0, MMASK);
+        T3 = _mm_and_si128(T3, MMASK);
+        T1 = _mm_add_epi64(T1, C1);
+        T4 = _mm_add_epi64(T4, C2);
+        C1 = _mm_srli_epi64(T1, 26);
+        C2 = _mm_srli_epi64(T4, 26);
+        T1 = _mm_and_si128(T1, MMASK);
+        T4 = _mm_and_si128(T4, MMASK);
+        T2 = _mm_add_epi64(T2, C1);
+        T0 = _mm_add_epi64(T0, _mm_mul_epu32(C2, FIVE));
+        C1 = _mm_srli_epi64(T2, 26);
+        C2 = _mm_srli_epi64(T0, 26);
+        T2 = _mm_and_si128(T2, MMASK);
+        T0 = _mm_and_si128(T0, MMASK);
+        T3 = _mm_add_epi64(T3, C1);
+        T1 = _mm_add_epi64(T1, C2);
+        C1 = _mm_srli_epi64(T3, 26);
+        T3 = _mm_and_si128(T3, MMASK);
+        T4 = _mm_add_epi64(T4, C1);
 
         /* H = (H*[r^2,r^2] + [Mx,My]) */
         H0 = T0;
@@ -461,19 +677,19 @@ poly1305_blocks(poly1305_state_internal_
     }
 
     if (m) {
-        T0 = _mm_shuffle_epi32(H0, _MM_SHUFFLE(0,0,2,0));
-        T1 = _mm_shuffle_epi32(H1, _MM_SHUFFLE(0,0,2,0));
-        T2 = _mm_shuffle_epi32(H2, _MM_SHUFFLE(0,0,2,0));
-        T3 = _mm_shuffle_epi32(H3, _MM_SHUFFLE(0,0,2,0));
-        T4 = _mm_shuffle_epi32(H4, _MM_SHUFFLE(0,0,2,0));
+        T0 = _mm_shuffle_epi32(H0, _MM_SHUFFLE(0, 0, 2, 0));
+        T1 = _mm_shuffle_epi32(H1, _MM_SHUFFLE(0, 0, 2, 0));
+        T2 = _mm_shuffle_epi32(H2, _MM_SHUFFLE(0, 0, 2, 0));
+        T3 = _mm_shuffle_epi32(H3, _MM_SHUFFLE(0, 0, 2, 0));
+        T4 = _mm_shuffle_epi32(H4, _MM_SHUFFLE(0, 0, 2, 0));
         T0 = _mm_unpacklo_epi64(T0, T1);
         T1 = _mm_unpacklo_epi64(T2, T3);
-        _mm_storeu_si128((xmmi *)(void *)&st->hh[0], T0);
-        _mm_storeu_si128((xmmi *)(void *)&st->hh[4], T1);
-        _mm_storel_epi64((xmmi *)(void *)&st->hh[8], T4);
+        _mm_storeu_si128((xmmi *) (void *) &st->hh[0], T0);
+        _mm_storeu_si128((xmmi *) (void *) &st->hh[4], T1);
+        _mm_storel_epi64((xmmi *) (void *) &st->hh[8], T4);
     } else {
-        uint32_t t0,t1,t2,t3,t4,b;
-        uint64_t h0,h1,h2,g0,g1,g2,c,nc;
+        uint32_t t0, t1, t2, t3, t4, b;
+        uint64_t h0, h1, h2, g0, g1, g2, c, nc;
 
         /* H = H[0]+H[1] */
         T0 = H0;
@@ -488,29 +704,52 @@ poly1305_blocks(poly1305_state_internal_
         T3 = _mm_add_epi64(T3, _mm_srli_si128(T3, 8));
         T4 = _mm_add_epi64(T4, _mm_srli_si128(T4, 8));
 
-        t0 = _mm_cvtsi128_si32(T0)    ; b = (t0 >> 26); t0 &= 0x3ffffff;
-        t1 = _mm_cvtsi128_si32(T1) + b; b = (t1 >> 26); t1 &= 0x3ffffff;
-        t2 = _mm_cvtsi128_si32(T2) + b; b = (t2 >> 26); t2 &= 0x3ffffff;
-        t3 = _mm_cvtsi128_si32(T3) + b; b = (t3 >> 26); t3 &= 0x3ffffff;
+        t0 = _mm_cvtsi128_si32(T0);
+        b  = (t0 >> 26);
+        t0 &= 0x3ffffff;
+        t1 = _mm_cvtsi128_si32(T1) + b;
+        b  = (t1 >> 26);
+        t1 &= 0x3ffffff;
+        t2 = _mm_cvtsi128_si32(T2) + b;
+        b  = (t2 >> 26);
+        t2 &= 0x3ffffff;
+        t3 = _mm_cvtsi128_si32(T3) + b;
+        b  = (t3 >> 26);
+        t3 &= 0x3ffffff;
         t4 = _mm_cvtsi128_si32(T4) + b;
 
         /* everything except t4 is in range, so this is all safe */
-        h0 =  (((uint64_t)t0      ) | ((uint64_t)t1 << 26)                       ) & 0xfffffffffffull;
-        h1 =  (((uint64_t)t1 >> 18) | ((uint64_t)t2 <<  8) | ((uint64_t)t3 << 34)) & 0xfffffffffffull;
-        h2 =  (((uint64_t)t3 >> 10) | ((uint64_t)t4 << 16)                       );
-
-        c = (h2 >> 42); h2 &= 0x3ffffffffff;
-        h0 += c * 5; c = (h0 >> 44); h0 &= 0xfffffffffff;
-        h1 += c;     c = (h1 >> 44); h1 &= 0xfffffffffff;
-        h2 += c;     c = (h2 >> 42); h2 &= 0x3ffffffffff;
-        h0 += c * 5; c = (h0 >> 44); h0 &= 0xfffffffffff;
+        h0 = (((uint64_t) t0) | ((uint64_t) t1 << 26)) & 0xfffffffffffull;
+        h1 = (((uint64_t) t1 >> 18) | ((uint64_t) t2 << 8) |
+              ((uint64_t) t3 << 34)) &
+             0xfffffffffffull;
+        h2 = (((uint64_t) t3 >> 10) | ((uint64_t) t4 << 16));
+
+        c = (h2 >> 42);
+        h2 &= 0x3ffffffffff;
+        h0 += c * 5;
+        c = (h0 >> 44);
+        h0 &= 0xfffffffffff;
+        h1 += c;
+        c = (h1 >> 44);
+        h1 &= 0xfffffffffff;
+        h2 += c;
+        c = (h2 >> 42);
+        h2 &= 0x3ffffffffff;
+        h0 += c * 5;
+        c = (h0 >> 44);
+        h0 &= 0xfffffffffff;
         h1 += c;
 
-        g0 = h0 + 5; c = (g0 >> 44); g0 &= 0xfffffffffff;
-        g1 = h1 + c; c = (g1 >> 44); g1 &= 0xfffffffffff;
-        g2 = h2 + c - ((uint64_t)1 << 42);
+        g0 = h0 + 5;
+        c  = (g0 >> 44);
+        g0 &= 0xfffffffffff;
+        g1 = h1 + c;
+        c  = (g1 >> 44);
+        g1 &= 0xfffffffffff;
+        g2 = h2 + c - ((uint64_t) 1 << 42);
 
-        c = (g2 >> 63) - 1;
+        c  = (g2 >> 63) - 1;
         nc = ~c;
         h0 = (h0 & nc) | (g0 & c);
         h1 = (h1 & nc) | (g1 & c);
@@ -532,15 +771,18 @@ poly1305_update(poly1305_state_internal_
     if (st->leftover) {
         unsigned long long want = (poly1305_block_size - st->leftover);
 
-        if (want > bytes)
+        if (want > bytes) {
             want = bytes;
-        for (i = 0; i < want; i++)
+        }
+        for (i = 0; i < want; i++) {
             st->buffer[st->leftover + i] = m[i];
+        }
         bytes -= want;
         m += want;
         st->leftover += want;
-        if (st->leftover < poly1305_block_size)
+        if (st->leftover < poly1305_block_size) {
             return;
+        }
         poly1305_blocks(st, st->buffer, poly1305_block_size);
         st->leftover = 0;
     }
@@ -567,13 +809,17 @@ static POLY1305_NOINLINE void
 poly1305_finish_ext(poly1305_state_internal_t *st, const unsigned char *m,
                     unsigned long long leftover, unsigned char mac[16])
 {
-    uint64_t h0,h1,h2;
+    uint64_t h0, h1, h2;
 
     if (leftover) {
-        CRYPTO_ALIGN(16) unsigned char final[32] = {0};
+        CRYPTO_ALIGN(16) unsigned char final[32] = { 0 };
+
         poly1305_block_copy31(final, m, leftover);
-        if (leftover != 16) final[leftover] = 1;
-        st->flags |= (leftover >= 16) ? poly1305_final_shift8 : poly1305_final_shift16;
+        if (leftover != 16) {
+            final[leftover] = 1;
+        }
+        st->flags |=
+            (leftover >= 16) ? poly1305_final_shift8 : poly1305_final_shift16;
         poly1305_blocks(st, final, 32);
     }
 
@@ -592,14 +838,15 @@ poly1305_finish_ext(poly1305_state_inter
     h2 = st->h[2];
 
     /* pad */
-    h0 = ((h0      ) | (h1 << 44));
+    h0 = ((h0) | (h1 << 44));
     h1 = ((h1 >> 20) | (h2 << 24));
 #ifdef HAVE_AMD64_ASM
-    __asm__ __volatile__("addq %2, %0 ;\n"
-                         "adcq %3, %1 ;\n"
-                         : "+r"(h0), "+r"(h1)
-                         : "r"(st->pad[0]), "r"(st->pad[1])
-                         : "flags", "cc");
+    __asm__ __volatile__(
+        "addq %2, %0 ;\n"
+        "adcq %3, %1 ;\n"
+        : "+r"(h0), "+r"(h1)
+        : "r"(st->pad[0]), "r"(st->pad[1])
+        : "flags", "cc");
 #else
     {
         uint128_t h;
@@ -607,22 +854,22 @@ poly1305_finish_ext(poly1305_state_inter
         memcpy(&h, &st->pad[0], 16);
         h += ((uint128_t) h1 << 64) | h0;
         h0 = (uint64_t) h;
-        h1 = (uint64_t) (h >> 64);
+        h1 = (uint64_t)(h >> 64);
     }
 #endif
-    _mm_storeu_si128((xmmi *)(void *)st + 0, _mm_setzero_si128());
-    _mm_storeu_si128((xmmi *)(void *)st + 1, _mm_setzero_si128());
-    _mm_storeu_si128((xmmi *)(void *)st + 2, _mm_setzero_si128());
-    _mm_storeu_si128((xmmi *)(void *)st + 3, _mm_setzero_si128());
-    _mm_storeu_si128((xmmi *)(void *)st + 4, _mm_setzero_si128());
-    _mm_storeu_si128((xmmi *)(void *)st + 5, _mm_setzero_si128());
-    _mm_storeu_si128((xmmi *)(void *)st + 6, _mm_setzero_si128());
-    _mm_storeu_si128((xmmi *)(void *)st + 7, _mm_setzero_si128());
+    _mm_storeu_si128((xmmi *) (void *) st + 0, _mm_setzero_si128());
+    _mm_storeu_si128((xmmi *) (void *) st + 1, _mm_setzero_si128());
+    _mm_storeu_si128((xmmi *) (void *) st + 2, _mm_setzero_si128());
+    _mm_storeu_si128((xmmi *) (void *) st + 3, _mm_setzero_si128());
+    _mm_storeu_si128((xmmi *) (void *) st + 4, _mm_setzero_si128());
+    _mm_storeu_si128((xmmi *) (void *) st + 5, _mm_setzero_si128());
+    _mm_storeu_si128((xmmi *) (void *) st + 6, _mm_setzero_si128());
+    _mm_storeu_si128((xmmi *) (void *) st + 7, _mm_setzero_si128());
 
     memcpy(&mac[0], &h0, 8);
     memcpy(&mac[8], &h1, 8);
 
-    sodium_memzero((void *)st, sizeof *st);
+    sodium_memzero((void *) st, sizeof *st);
 }
 
 static void
@@ -633,41 +880,41 @@ poly1305_finish(poly1305_state_internal_
 
 static int
 crypto_onetimeauth_poly1305_sse2_init(crypto_onetimeauth_poly1305_state *state,
-                                      const unsigned char *key)
+                                      const unsigned char *              key)
 {
-    (void) sizeof(int[sizeof (crypto_onetimeauth_poly1305_state) >=
-                      sizeof (poly1305_state_internal_t) ? 1 : -1]);
-    poly1305_init_ext((poly1305_state_internal_t *)(void *) state, key, 0U);
+    COMPILER_ASSERT(sizeof(crypto_onetimeauth_poly1305_state) >=
+                    sizeof(poly1305_state_internal_t));
+    poly1305_init_ext((poly1305_state_internal_t *) (void *) state, key, 0U);
 
     return 0;
 }
 
 static int
-crypto_onetimeauth_poly1305_sse2_update(crypto_onetimeauth_poly1305_state *state,
-                                        const unsigned char *in,
-                                        unsigned long long inlen)
+crypto_onetimeauth_poly1305_sse2_update(
+    crypto_onetimeauth_poly1305_state *state, const unsigned char *in,
+    unsigned long long inlen)
 {
-    poly1305_update((poly1305_state_internal_t *)(void *) state, in, inlen);
+    poly1305_update((poly1305_state_internal_t *) (void *) state, in, inlen);
 
     return 0;
 }
 
 static int
 crypto_onetimeauth_poly1305_sse2_final(crypto_onetimeauth_poly1305_state *state,
-                                       unsigned char *out)
+                                       unsigned char *                    out)
 {
-    poly1305_finish((poly1305_state_internal_t *)(void *) state, out);
+    poly1305_finish((poly1305_state_internal_t *) (void *) state, out);
 
     return 0;
 }
 
 static int
 crypto_onetimeauth_poly1305_sse2(unsigned char *out, const unsigned char *m,
-                                 unsigned long long inlen,
+                                 unsigned long long   inlen,
                                  const unsigned char *key)
 {
     CRYPTO_ALIGN(64) poly1305_state_internal_t st;
-    unsigned long long blocks;
+    unsigned long long                         blocks;
 
     poly1305_init_ext(&st, key, inlen);
     blocks = inlen & ~31;
@@ -684,23 +931,25 @@ crypto_onetimeauth_poly1305_sse2(unsigne
 static int
 crypto_onetimeauth_poly1305_sse2_verify(const unsigned char *h,
                                         const unsigned char *in,
-                                        unsigned long long inlen,
+                                        unsigned long long   inlen,
                                         const unsigned char *k)
 {
     unsigned char correct[16];
 
-    crypto_onetimeauth_poly1305_sse2(correct,in,inlen,k);
+    crypto_onetimeauth_poly1305_sse2(correct, in, inlen, k);
 
-    return crypto_verify_16(h,correct);
+    return crypto_verify_16(h, correct);
 }
 
 struct crypto_onetimeauth_poly1305_implementation
-crypto_onetimeauth_poly1305_sse2_implementation = {
-    SODIUM_C99(.onetimeauth =) crypto_onetimeauth_poly1305_sse2,
-    SODIUM_C99(.onetimeauth_verify =) crypto_onetimeauth_poly1305_sse2_verify,
-    SODIUM_C99(.onetimeauth_init =) crypto_onetimeauth_poly1305_sse2_init,
-    SODIUM_C99(.onetimeauth_update =) crypto_onetimeauth_poly1305_sse2_update,
-    SODIUM_C99(.onetimeauth_final =) crypto_onetimeauth_poly1305_sse2_final
-};
+    crypto_onetimeauth_poly1305_sse2_implementation = {
+        SODIUM_C99(.onetimeauth =) crypto_onetimeauth_poly1305_sse2,
+        SODIUM_C99(.onetimeauth_verify =)
+            crypto_onetimeauth_poly1305_sse2_verify,
+        SODIUM_C99(.onetimeauth_init =) crypto_onetimeauth_poly1305_sse2_init,
+        SODIUM_C99(.onetimeauth_update =)
+            crypto_onetimeauth_poly1305_sse2_update,
+        SODIUM_C99(.onetimeauth_final =) crypto_onetimeauth_poly1305_sse2_final
+    };
 
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/sse2/poly1305_sse2.h libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/sse2/poly1305_sse2.h
--- libsodium-1.0.11/src/libsodium/crypto_onetimeauth/poly1305/sse2/poly1305_sse2.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_onetimeauth/poly1305/sse2/poly1305_sse2.h	2017-03-06 11:13:57.000000000 +0100
@@ -3,8 +3,8 @@
 
 #include <stddef.h>
 
-#include "crypto_onetimeauth_poly1305.h"
 #include "../onetimeauth_poly1305.h"
+#include "crypto_onetimeauth_poly1305.h"
 
 extern struct crypto_onetimeauth_poly1305_implementation
     crypto_onetimeauth_poly1305_sse2_implementation;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2.c libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2.c	2017-03-06 11:13:57.000000000 +0100
@@ -11,22 +11,24 @@
  * <http://creativecommons.org/publicdomain/zero/1.0/>.
  */
 
+#include <limits.h>
 #include <stdint.h>
-#include <string.h>
-#include <stdlib.h>
 #include <stdio.h>
-#include <limits.h>
+#include <stdlib.h>
+#include <string.h>
 
 #include "utils.h"
 
-#include "argon2.h"
-#include "argon2-encoding.h"
 #include "argon2-core.h"
+#include "argon2-encoding.h"
+#include "argon2.h"
 
-int argon2_ctx(argon2_context *context, argon2_type type) {
+int
+argon2_ctx(argon2_context *context, argon2_type type)
+{
     /* 1. Validate all inputs */
-    int result = validate_inputs(context);
-    uint32_t memory_blocks, segment_length;
+    int               result = validate_inputs(context);
+    uint32_t          memory_blocks, segment_length;
     argon2_instance_t instance;
 
     if (ARGON2_OK != result) {
@@ -49,14 +51,14 @@ int argon2_ctx(argon2_context *context,
     /* Ensure that all segments have equal length */
     memory_blocks = segment_length * (context->lanes * ARGON2_SYNC_POINTS);
 
-    instance.region = NULL;
-    instance.passes = context->t_cost;
-    instance.memory_blocks = memory_blocks;
+    instance.region         = NULL;
+    instance.passes         = context->t_cost;
+    instance.memory_blocks  = memory_blocks;
     instance.segment_length = segment_length;
-    instance.lane_length = segment_length * ARGON2_SYNC_POINTS;
-    instance.lanes = context->lanes;
-    instance.threads = context->threads;
-    instance.type = type;
+    instance.lane_length    = segment_length * ARGON2_SYNC_POINTS;
+    instance.lanes          = context->lanes;
+    instance.threads        = context->threads;
+    instance.type           = type;
 
     /* 3. Initialization: Hashing inputs, allocating memory, filling first
      * blocks
@@ -80,15 +82,16 @@ int argon2_ctx(argon2_context *context,
     return ARGON2_OK;
 }
 
-int argon2_hash(const uint32_t t_cost, const uint32_t m_cost,
-                const uint32_t parallelism, const void *pwd,
-                const size_t pwdlen, const void *salt, const size_t saltlen,
-                void *hash, const size_t hashlen, char *encoded,
-                const size_t encodedlen, argon2_type type) {
-
+int
+argon2_hash(const uint32_t t_cost, const uint32_t m_cost,
+            const uint32_t parallelism, const void *pwd, const size_t pwdlen,
+            const void *salt, const size_t saltlen, void *hash,
+            const size_t hashlen, char *encoded, const size_t encodedlen,
+            argon2_type type)
+{
     argon2_context context;
-    int result;
-    uint8_t *out;
+    int            result;
+    uint8_t *      out;
 
     if (pwdlen > ARGON2_MAX_PWD_LENGTH) {
         return ARGON2_PWD_TOO_LONG;
@@ -107,21 +110,21 @@ int argon2_hash(const uint32_t t_cost, c
         return ARGON2_MEMORY_ALLOCATION_ERROR;
     }
 
-    context.out = (uint8_t *)out;
-    context.outlen = (uint32_t)hashlen;
-    context.pwd = (uint8_t *)pwd;
-    context.pwdlen = (uint32_t)pwdlen;
-    context.salt = (uint8_t *)salt;
-    context.saltlen = (uint32_t)saltlen;
-    context.secret = NULL;
+    context.out       = (uint8_t *) out;
+    context.outlen    = (uint32_t) hashlen;
+    context.pwd       = (uint8_t *) pwd;
+    context.pwdlen    = (uint32_t) pwdlen;
+    context.salt      = (uint8_t *) salt;
+    context.saltlen   = (uint32_t) saltlen;
+    context.secret    = NULL;
     context.secretlen = 0;
-    context.ad = NULL;
-    context.adlen = 0;
-    context.t_cost = t_cost;
-    context.m_cost = m_cost;
-    context.lanes = parallelism;
-    context.threads = parallelism;
-    context.flags = ARGON2_DEFAULT_FLAGS;
+    context.ad        = NULL;
+    context.adlen     = 0;
+    context.t_cost    = t_cost;
+    context.m_cost    = m_cost;
+    context.lanes     = parallelism;
+    context.threads   = parallelism;
+    context.flags     = ARGON2_DEFAULT_FLAGS;
 
     result = argon2_ctx(&context, type);
 
@@ -152,39 +155,42 @@ int argon2_hash(const uint32_t t_cost, c
     return ARGON2_OK;
 }
 
-int argon2i_hash_encoded(const uint32_t t_cost, const uint32_t m_cost,
-                         const uint32_t parallelism, const void *pwd,
-                         const size_t pwdlen, const void *salt,
-                         const size_t saltlen, const size_t hashlen,
-                         char *encoded, const size_t encodedlen) {
-
+int
+argon2i_hash_encoded(const uint32_t t_cost, const uint32_t m_cost,
+                     const uint32_t parallelism, const void *pwd,
+                     const size_t pwdlen, const void *salt,
+                     const size_t saltlen, const size_t hashlen, char *encoded,
+                     const size_t encodedlen)
+{
     return argon2_hash(t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen,
                        NULL, hashlen, encoded, encodedlen, Argon2_i);
 }
 
-int argon2i_hash_raw(const uint32_t t_cost, const uint32_t m_cost,
-                     const uint32_t parallelism, const void *pwd,
-                     const size_t pwdlen, const void *salt,
-                     const size_t saltlen, void *hash, const size_t hashlen) {
-
+int
+argon2i_hash_raw(const uint32_t t_cost, const uint32_t m_cost,
+                 const uint32_t parallelism, const void *pwd,
+                 const size_t pwdlen, const void *salt, const size_t saltlen,
+                 void *hash, const size_t hashlen)
+{
     return argon2_hash(t_cost, m_cost, parallelism, pwd, pwdlen, salt, saltlen,
                        hash, hashlen, NULL, 0, Argon2_i);
 }
 
-int argon2_verify(const char *encoded, const void *pwd, const size_t pwdlen,
-                  argon2_type type) {
-
+int
+argon2_verify(const char *encoded, const void *pwd, const size_t pwdlen,
+              argon2_type type)
+{
     argon2_context ctx;
-    uint8_t *out;
-    int decode_result;
-    int ret;
-    size_t encoded_len;
+    uint8_t *      out;
+    int            decode_result;
+    int            ret;
+    size_t         encoded_len;
 
     memset(&ctx, 0, sizeof ctx);
 
-    ctx.pwd = NULL;
-    ctx.pwdlen = 0;
-    ctx.secret = NULL;
+    ctx.pwd       = NULL;
+    ctx.pwdlen    = 0;
+    ctx.secret    = NULL;
     ctx.secretlen = 0;
 
     /* max values, to be updated in decode_string */
@@ -192,13 +198,13 @@ int argon2_verify(const char *encoded, c
     if (encoded_len > UINT32_MAX) {
         return ARGON2_DECODING_LENGTH_FAIL;
     }
-    ctx.adlen = (uint32_t) encoded_len;
+    ctx.adlen   = (uint32_t) encoded_len;
     ctx.saltlen = (uint32_t) encoded_len;
-    ctx.outlen = (uint32_t) encoded_len;
+    ctx.outlen  = (uint32_t) encoded_len;
 
-    ctx.ad = (uint8_t *) malloc(ctx.adlen);
+    ctx.ad   = (uint8_t *) malloc(ctx.adlen);
     ctx.salt = (uint8_t *) malloc(ctx.saltlen);
-    ctx.out = (uint8_t *) malloc(ctx.outlen);
+    ctx.out  = (uint8_t *) malloc(ctx.outlen);
     if (!ctx.out || !ctx.salt || !ctx.ad) {
         free(ctx.ad);
         free(ctx.salt);
@@ -222,8 +228,8 @@ int argon2_verify(const char *encoded, c
         return decode_result;
     }
 
-    ret = argon2_hash(ctx.t_cost, ctx.m_cost, ctx.threads, pwd, pwdlen, ctx.salt,
-                      ctx.saltlen, out, ctx.outlen, NULL, 0, type);
+    ret = argon2_hash(ctx.t_cost, ctx.m_cost, ctx.threads, pwd, pwdlen,
+                      ctx.salt, ctx.saltlen, out, ctx.outlen, NULL, 0, type);
 
     free(ctx.ad);
     free(ctx.salt);
@@ -237,6 +243,8 @@ int argon2_verify(const char *encoded, c
     return ret;
 }
 
-int argon2i_verify(const char *encoded, const void *pwd, const size_t pwdlen) {
+int
+argon2i_verify(const char *encoded, const void *pwd, const size_t pwdlen)
+{
     return argon2_verify(encoded, pwd, pwdlen, Argon2_i);
 }
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-core.c libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-core.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-core.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-core.c	2017-03-06 23:32:40.000000000 +0100
@@ -11,22 +11,23 @@
  * <http://creativecommons.org/publicdomain/zero/1.0/>.
  */
 
-#ifdef HAVE_SYS_MMAN_H
-# include <sys/mman.h>
-#endif
 #include <errno.h>
 #include <stdint.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 
+#include <sys/types.h>
+#ifdef HAVE_SYS_MMAN_H
+# include <sys/mman.h>
+#endif
+
 #include "crypto_generichash_blake2b.h"
+#include "private/common.h"
 #include "runtime.h"
 #include "utils.h"
-#include "private/common.h"
 
 #include "argon2-core.h"
-#include "argon2-impl.h"
 #include "blake2b-long.h"
 
 #if !defined(MAP_ANON) && defined(MAP_ANONYMOUS)
@@ -36,32 +37,42 @@
 static fill_segment_fn fill_segment = fill_segment_ref;
 
 /***************Instance and Position constructors**********/
-void init_block_value(block *b, uint8_t in) {
+void
+init_block_value(block *b, uint8_t in)
+{
     memset(b->v, in, sizeof(b->v));
 }
 
-void copy_block(block *dst, const block *src) {
+void
+copy_block(block *dst, const block *src)
+{
     memcpy(dst->v, src->v, sizeof(uint64_t) * ARGON2_QWORDS_IN_BLOCK);
 }
 
-void xor_block(block *dst, const block *src) {
+void
+xor_block(block *dst, const block *src)
+{
     int i;
     for (i = 0; i < ARGON2_QWORDS_IN_BLOCK; ++i) {
         dst->v[i] ^= src->v[i];
     }
 }
 
-static void load_block(block *dst, const void *input) {
+static void
+load_block(block *dst, const void *input)
+{
     unsigned i;
     for (i = 0; i < ARGON2_QWORDS_IN_BLOCK; ++i) {
-        dst->v[i] = LOAD64_LE((const uint8_t *)input + i * sizeof(dst->v[i]));
+        dst->v[i] = LOAD64_LE((const uint8_t *) input + i * sizeof(dst->v[i]));
     }
 }
 
-static void store_block(void *output, const block *src) {
+static void
+store_block(void *output, const block *src)
+{
     unsigned i;
     for (i = 0; i < ARGON2_QWORDS_IN_BLOCK; ++i) {
-        STORE64_LE((uint8_t *)output + i * sizeof(src->v[i]), src->v[i]);
+        STORE64_LE((uint8_t *) output + i * sizeof(src->v[i]), src->v[i]);
     }
 }
 
@@ -73,8 +84,10 @@ static void store_block(void *output, co
  */
 static int allocate_memory(block_region **memory, uint32_t m_cost);
 
-static int allocate_memory(block_region **region, uint32_t m_cost) {
-    void *base;
+static int
+allocate_memory(block_region **region, uint32_t m_cost)
+{
+    void * base;
     block *memory;
     size_t memory_size;
 
@@ -83,24 +96,26 @@ static int allocate_memory(block_region
     }
     memory_size = sizeof(block) * m_cost;
     if (m_cost == 0 ||
-        memory_size / m_cost != sizeof(block)) { /*1. Check for multiplication overflow*/
+        memory_size / m_cost !=
+            sizeof(block)) { /*1. Check for multiplication overflow*/
         return ARGON2_MEMORY_ALLOCATION_ERROR; /* LCOV_EXCL_LINE */
     }
-    *region = (block_region *)malloc(sizeof(block_region));  /*2. Try to allocate region*/
+    *region = (block_region *) malloc(
+        sizeof(block_region)); /*2. Try to allocate region*/
     if (!*region) {
         return ARGON2_MEMORY_ALLOCATION_ERROR; /* LCOV_EXCL_LINE */
     }
 
 #if defined(MAP_ANON) && defined(HAVE_MMAP)
     if ((base = mmap(NULL, memory_size, PROT_READ | PROT_WRITE,
-# ifdef MAP_NOCORE
+#ifdef MAP_NOCORE
                      MAP_ANON | MAP_PRIVATE | MAP_NOCORE,
-# else
+#else
                      MAP_ANON | MAP_PRIVATE,
-# endif
+#endif
                      -1, 0)) == MAP_FAILED) {
         base = NULL; /* LCOV_EXCL_LINE */
-    } /* LCOV_EXCL_LINE */
+    }                /* LCOV_EXCL_LINE */
     memcpy(&memory, &base, sizeof memory);
 #elif defined(HAVE_POSIX_MEMALIGN)
     if ((errno = posix_memalign((void **) &base, 64, memory_size)) != 0) {
@@ -110,7 +125,7 @@ static int allocate_memory(block_region
 #else
     memory = NULL;
     if (memory_size + 63 < memory_size) {
-        base = NULL;
+        base  = NULL;
         errno = ENOMEM;
     } else if ((base = malloc(memory_size + 63)) != NULL) {
         uint8_t *aligned = ((uint8_t *) base) + 63;
@@ -121,9 +136,9 @@ static int allocate_memory(block_region
     if (base == NULL) {
         return ARGON2_MEMORY_ALLOCATION_ERROR; /* LCOV_EXCL_LINE */
     }
-    (*region)->base = base;
+    (*region)->base   = base;
     (*region)->memory = memory;
-    (*region)->size = memory_size;
+    (*region)->size   = memory_size;
 
     return ARGON2_OK;
 }
@@ -136,7 +151,9 @@ static int allocate_memory(block_region
  */
 static void clear_memory(argon2_instance_t *instance, int clear);
 
-static void clear_memory(argon2_instance_t *instance, int clear) {
+static void
+clear_memory(argon2_instance_t *instance, int clear)
+{
     if (instance->region != NULL && clear) {
         /* LCOV_EXCL_START */
         sodium_memzero(instance->region->memory,
@@ -150,7 +167,9 @@ static void clear_memory(argon2_instance
  */
 static void free_memory(block_region *memory);
 
-static void free_memory(block_region *region) {
+static void
+free_memory(block_region *region)
+{
     if (region->base) {
 #if defined(MAP_ANON) && defined(HAVE_MMAP)
         if (munmap(region->base, region->size)) {
@@ -163,18 +182,22 @@ static void free_memory(block_region *re
     free(region);
 }
 
-void finalize(const argon2_context *context, argon2_instance_t *instance) {
+void
+finalize(const argon2_context *context, argon2_instance_t *instance)
+{
     if (context != NULL && instance != NULL) {
-        block blockhash;
+        block    blockhash;
         uint32_t l;
 
-        copy_block(&blockhash, instance->region->memory + instance->lane_length - 1);
+        copy_block(&blockhash,
+                   instance->region->memory + instance->lane_length - 1);
 
         /* XOR the last blocks */
         for (l = 1; l < instance->lanes; ++l) {
             uint32_t last_block_in_lane =
                 l * instance->lane_length + (instance->lane_length - 1);
-            xor_block(&blockhash, instance->region->memory + last_block_in_lane);
+            xor_block(&blockhash,
+                      instance->region->memory + last_block_in_lane);
         }
 
         /* Hash the result */
@@ -197,9 +220,11 @@ void finalize(const argon2_context *cont
     }
 }
 
-uint32_t index_alpha(const argon2_instance_t *instance,
-                     const argon2_position_t *position, uint32_t pseudo_rand,
-                     int same_lane) {
+uint32_t
+index_alpha(const argon2_instance_t *instance,
+            const argon2_position_t *position, uint32_t pseudo_rand,
+            int same_lane)
+{
     /*
      * Pass 0:
      *      This lane : all already finished segments plus already constructed
@@ -267,8 +292,10 @@ uint32_t index_alpha(const argon2_instan
     return absolute_position;
 }
 
-int fill_memory_blocks(argon2_instance_t *instance) {
-    int result;
+int
+fill_memory_blocks(argon2_instance_t *instance)
+{
+    int      result;
     uint32_t r, s;
 
     if (instance == NULL || instance->lanes == 0) {
@@ -282,11 +309,11 @@ int fill_memory_blocks(argon2_instance_t
             for (l = 0; l < instance->lanes; ++l) {
                 argon2_position_t position;
 
-                position.pass = r;
-                position.lane = l;
-                position.slice = (uint8_t)s;
+                position.pass  = r;
+                position.lane  = l;
+                position.slice = (uint8_t) s;
                 position.index = 0;
-                result = fill_segment(instance, position);
+                result         = fill_segment(instance, position);
                 if (ARGON2_OK != result) {
                     return result; /* LCOV_EXCL_LINE */
                 }
@@ -296,8 +323,10 @@ int fill_memory_blocks(argon2_instance_t
     return ARGON2_OK;
 }
 
-int validate_inputs(const argon2_context *context) {
- /* LCOV_EXCL_START */
+int
+validate_inputs(const argon2_context *context)
+{
+    /* LCOV_EXCL_START */
     if (NULL == context) {
         return ARGON2_INCORRECT_PARAMETER;
     }
@@ -315,37 +344,37 @@ int validate_inputs(const argon2_context
         return ARGON2_OUTPUT_TOO_LONG;
     }
 
-    /* Validate password length */
+    /* Validate password (required param) */
     if (NULL == context->pwd) {
         if (0 != context->pwdlen) {
             return ARGON2_PWD_PTR_MISMATCH;
         }
-    } else {
-        if (ARGON2_MIN_PWD_LENGTH > context->pwdlen) {
-            return ARGON2_PWD_TOO_SHORT;
-        }
+    }
 
-        if (ARGON2_MAX_PWD_LENGTH < context->pwdlen) {
-            return ARGON2_PWD_TOO_LONG;
-        }
+    if (ARGON2_MIN_PWD_LENGTH > context->pwdlen) {
+        return ARGON2_PWD_TOO_SHORT;
+    }
+
+    if (ARGON2_MAX_PWD_LENGTH < context->pwdlen) {
+        return ARGON2_PWD_TOO_LONG;
     }
 
-    /* Validate salt length */
+    /* Validate salt (required param) */
     if (NULL == context->salt) {
         if (0 != context->saltlen) {
             return ARGON2_SALT_PTR_MISMATCH;
         }
-    } else {
-        if (ARGON2_MIN_SALT_LENGTH > context->saltlen) {
-            return ARGON2_SALT_TOO_SHORT;
-        }
+    }
 
-        if (ARGON2_MAX_SALT_LENGTH < context->saltlen) {
-            return ARGON2_SALT_TOO_LONG;
-        }
+    if (ARGON2_MIN_SALT_LENGTH > context->saltlen) {
+        return ARGON2_SALT_TOO_SHORT;
+    }
+
+    if (ARGON2_MAX_SALT_LENGTH < context->saltlen) {
+        return ARGON2_SALT_TOO_LONG;
     }
 
-    /* Validate secret length */
+    /* Validate secret (optional param) */
     if (NULL == context->secret) {
         if (0 != context->secretlen) {
             return ARGON2_SECRET_PTR_MISMATCH;
@@ -360,7 +389,7 @@ int validate_inputs(const argon2_context
         }
     }
 
-    /* Validate associated data */
+    /* Validate associated data (optional param) */
     if (NULL == context->ad) {
         if (0 != context->adlen) {
             return ARGON2_AD_PTR_MISMATCH;
@@ -419,13 +448,14 @@ int validate_inputs(const argon2_context
     return ARGON2_OK;
 }
 
-void fill_first_blocks(uint8_t *blockhash, const argon2_instance_t *instance) {
+void
+fill_first_blocks(uint8_t *blockhash, const argon2_instance_t *instance)
+{
     uint32_t l;
     /* Make the first and second block in each lane as G(H0||i||0) or
        G(H0||i||1) */
     uint8_t blockhash_bytes[ARGON2_BLOCK_SIZE];
     for (l = 0; l < instance->lanes; ++l) {
-
         STORE32_LE(blockhash + ARGON2_PREHASH_DIGEST_LENGTH, 0);
         STORE32_LE(blockhash + ARGON2_PREHASH_DIGEST_LENGTH + 4, l);
         blake2b_long(blockhash_bytes, ARGON2_BLOCK_SIZE, blockhash,
@@ -442,10 +472,11 @@ void fill_first_blocks(uint8_t *blockhas
     sodium_memzero(blockhash_bytes, ARGON2_BLOCK_SIZE);
 }
 
-void initial_hash(uint8_t *blockhash, argon2_context *context,
-                  argon2_type type) {
+void
+initial_hash(uint8_t *blockhash, argon2_context *context, argon2_type type)
+{
     crypto_generichash_blake2b_state BlakeHash;
-    uint8_t value[4U /* sizeof(uint32_t) */];
+    uint8_t                          value[4U /* sizeof(uint32_t) */];
 
     if (NULL == context || NULL == blockhash) {
         return; /* LCOV_EXCL_LINE */
@@ -469,19 +500,19 @@ void initial_hash(uint8_t *blockhash, ar
     STORE32_LE(value, ARGON2_VERSION_NUMBER);
     crypto_generichash_blake2b_update(&BlakeHash, value, sizeof(value));
 
-    STORE32_LE(value, (uint32_t)type);
+    STORE32_LE(value, (uint32_t) type);
     crypto_generichash_blake2b_update(&BlakeHash, value, sizeof(value));
 
     STORE32_LE(value, context->pwdlen);
     crypto_generichash_blake2b_update(&BlakeHash, value, sizeof(value));
 
     if (context->pwd != NULL) {
-        crypto_generichash_blake2b_update(&BlakeHash, (const uint8_t *)context->pwd,
-                                          context->pwdlen);
+        crypto_generichash_blake2b_update(
+            &BlakeHash, (const uint8_t *) context->pwd, context->pwdlen);
 
         if (context->flags & ARGON2_FLAG_CLEAR_PASSWORD) {
             sodium_memzero(context->pwd, context->pwdlen); /* LCOV_EXCL_LINE */
-            context->pwdlen = 0; /* LCOV_EXCL_LINE */
+            context->pwdlen = 0;                           /* LCOV_EXCL_LINE */
         }
     }
 
@@ -489,41 +520,44 @@ void initial_hash(uint8_t *blockhash, ar
     crypto_generichash_blake2b_update(&BlakeHash, value, sizeof(value));
 
     if (context->salt != NULL) {
-        crypto_generichash_blake2b_update(&BlakeHash, (const uint8_t *)context->salt,
-                       context->saltlen);
+        crypto_generichash_blake2b_update(
+            &BlakeHash, (const uint8_t *) context->salt, context->saltlen);
     }
 
     STORE32_LE(value, context->secretlen);
     crypto_generichash_blake2b_update(&BlakeHash, value, sizeof(value));
 
     if (context->secret != NULL) {
-/* LCOV_EXCL_START */
-        crypto_generichash_blake2b_update(&BlakeHash, (const uint8_t *)context->secret,
-                       context->secretlen);
+        /* LCOV_EXCL_START */
+        crypto_generichash_blake2b_update(
+            &BlakeHash, (const uint8_t *) context->secret, context->secretlen);
 
         if (context->flags & ARGON2_FLAG_CLEAR_SECRET) {
             sodium_memzero(context->secret, context->secretlen);
             context->secretlen = 0;
         }
-/* LCOV_EXCL_STOP */
+        /* LCOV_EXCL_STOP */
     }
 
     STORE32_LE(value, context->adlen);
     crypto_generichash_blake2b_update(&BlakeHash, value, sizeof(value));
 
     if (context->ad != NULL) {
-/* LCOV_EXCL_START */
-        crypto_generichash_blake2b_update(&BlakeHash, (const uint8_t *)context->ad,
-                                          context->adlen);
-/* LCOV_EXCL_STOP */
+        /* LCOV_EXCL_START */
+        crypto_generichash_blake2b_update(
+            &BlakeHash, (const uint8_t *) context->ad, context->adlen);
+        /* LCOV_EXCL_STOP */
     }
 
-    crypto_generichash_blake2b_final(&BlakeHash, blockhash, ARGON2_PREHASH_DIGEST_LENGTH);
+    crypto_generichash_blake2b_final(&BlakeHash, blockhash,
+                                     ARGON2_PREHASH_DIGEST_LENGTH);
 }
 
-int initialize(argon2_instance_t *instance, argon2_context *context) {
+int
+initialize(argon2_instance_t *instance, argon2_context *context)
+{
     uint8_t blockhash[ARGON2_PREHASH_SEED_LENGTH];
-    int result = ARGON2_OK;
+    int     result = ARGON2_OK;
 
     if (instance == NULL || context == NULL)
         return ARGON2_INCORRECT_PARAMETER;
@@ -553,11 +587,11 @@ int initialize(argon2_instance_t *instan
     return ARGON2_OK;
 }
 
-int argon2_pick_best_implementation(void)
+int
+argon2_pick_best_implementation(void)
 {
 /* LCOV_EXCL_START */
-#if (defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
+#if defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)
     if (sodium_runtime_has_ssse3()) {
         fill_segment = fill_segment_ssse3;
         return 0;
@@ -566,5 +600,5 @@ int argon2_pick_best_implementation(void
     fill_segment = fill_segment_ref;
 
     return 0;
-/* LCOV_EXCL_STOP */
+    /* LCOV_EXCL_STOP */
 }
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-core.h libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-core.h
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-core.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-core.h	2017-03-06 11:13:57.000000000 +0100
@@ -24,7 +24,7 @@ enum argon2_ctx_constants {
     ARGON2_VERSION_NUMBER = 0x13,
 
     /* Memory block size in bytes */
-    ARGON2_BLOCK_SIZE = 1024,
+    ARGON2_BLOCK_SIZE      = 1024,
     ARGON2_QWORDS_IN_BLOCK = ARGON2_BLOCK_SIZE / 8,
     ARGON2_OWORDS_IN_BLOCK = ARGON2_BLOCK_SIZE / 16,
 
@@ -35,7 +35,7 @@ enum argon2_ctx_constants {
 
     /* Pre-hashing digest length and its extension*/
     ARGON2_PREHASH_DIGEST_LENGTH = 64,
-    ARGON2_PREHASH_SEED_LENGTH = 72
+    ARGON2_PREHASH_SEED_LENGTH   = 72
 };
 
 /*************************Argon2 internal data
@@ -46,10 +46,12 @@ enum argon2_ctx_constants {
  * Memory blocks can be copied, XORed. Internal words can be accessed by [] (no
  * bounds checking).
  */
-typedef struct block_ { uint64_t v[ARGON2_QWORDS_IN_BLOCK]; } block;
+typedef struct block_ {
+    uint64_t v[ARGON2_QWORDS_IN_BLOCK];
+} block;
 
 typedef struct block_region_ {
-    void  *base;
+    void * base;
     block *memory;
     size_t size;
 } block_region;
@@ -72,15 +74,15 @@ void xor_block(block *dst, const block *
  * thread
  */
 typedef struct Argon2_instance_t {
-    block_region *region;   /* Memory region pointer */
-    uint32_t passes;        /* Number of passes */
-    uint32_t memory_blocks; /* Number of blocks in memory */
-    uint32_t segment_length;
-    uint32_t lane_length;
-    uint32_t lanes;
-    uint32_t threads;
-    argon2_type type;
-    int print_internals; /* whether to print the memory blocks */
+    block_region *region;        /* Memory region pointer */
+    uint32_t      passes;        /* Number of passes */
+    uint32_t      memory_blocks; /* Number of blocks in memory */
+    uint32_t      segment_length;
+    uint32_t      lane_length;
+    uint32_t      lanes;
+    uint32_t      threads;
+    argon2_type   type;
+    int           print_internals; /* whether to print the memory blocks */
 } argon2_instance_t;
 
 /*
@@ -90,14 +92,14 @@ typedef struct Argon2_instance_t {
 typedef struct Argon2_position_t {
     uint32_t pass;
     uint32_t lane;
-    uint8_t slice;
+    uint8_t  slice;
     uint32_t index;
 } argon2_position_t;
 
 /*Struct that holds the inputs for thread handling FillSegment*/
 typedef struct Argon2_thread_data {
     argon2_instance_t *instance_ptr;
-    argon2_position_t pos;
+    argon2_position_t  pos;
 } argon2_thread_data;
 
 /*************************Argon2 core
@@ -180,12 +182,12 @@ void finalize(const argon2_context *cont
  * @pre all block pointers must be valid
  */
 typedef int (*fill_segment_fn)(const argon2_instance_t *instance,
-                               argon2_position_t position);
+                               argon2_position_t        position);
 int argon2_pick_best_implementation(void);
 int fill_segment_ssse3(const argon2_instance_t *instance,
-                       argon2_position_t position);
+                       argon2_position_t        position);
 int fill_segment_ref(const argon2_instance_t *instance,
-                     argon2_position_t position);
+                     argon2_position_t        position);
 
 /*
  * Function that fills the entire memory t_cost times based on the first two
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-encoding.c libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-encoding.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-encoding.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-encoding.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,9 +1,9 @@
+#include "argon2-encoding.h"
+#include "argon2-core.h"
+#include <limits.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <limits.h>
-#include "argon2-core.h"
-#include "argon2-encoding.h"
 
 /*
  * Example code for a decoder and encoder of "hash strings", with Argon2
@@ -22,11 +22,6 @@
  *   the parameters, salts and outputs. It does not compute the hash
  *   itself.
  *
- *   -- The third section is test code, with a main() function. With
- *   this section, the whole file compiles as a stand-alone program
- *   that exercises the encoding and decoding functions with some
- *   test vectors.
- *
  * The code was originally written by Thomas Pornin <pornin@bolet.org>,
  * to whom comments and remarks may be sent. It is released under what
  * should amount to Public Domain or its closest equivalent; the
@@ -59,8 +54,9 @@
  * Some macros for constant-time comparisons. These work over values in
  * the 0..255 range. Returned value is 0x00 on "false", 0xFF on "true".
  */
-#define EQ(x, y) ((((0U - ((unsigned)(x) ^ (unsigned)(y))) >> 8) & 0xFF) ^ 0xFF)
-#define GT(x, y) ((((unsigned)(y) - (unsigned)(x)) >> 8) & 0xFF)
+#define EQ(x, y) \
+    ((((0U - ((unsigned) (x) ^ (unsigned) (y))) >> 8) & 0xFF) ^ 0xFF)
+#define GT(x, y) ((((unsigned) (y) - (unsigned) (x)) >> 8) & 0xFF)
 #define GE(x, y) (GT(y, x) ^ 0xFF)
 #define LT(x, y) GT(y, x)
 #define LE(x, y) GE(y, x)
@@ -68,7 +64,9 @@
 /*
  * Convert value x (0..63) to corresponding Base64 character.
  */
-static int b64_byte_to_char(unsigned x) {
+static int
+b64_byte_to_char(unsigned x)
+{
     return (LT(x, 26) & (x + 'A')) |
            (GE(x, 26) & LT(x, 52) & (x + ('a' - 26))) |
            (GE(x, 52) & LT(x, 62) & (x + ('0' - 52))) | (EQ(x, 62) & '+') |
@@ -79,7 +77,9 @@ static int b64_byte_to_char(unsigned x)
  * Convert character c to the corresponding 6-bit value. If character c
  * is not a Base64 character, then 0xFF (255) is returned.
  */
-static unsigned b64_char_to_byte(int c) {
+static unsigned
+b64_char_to_byte(int c)
+{
     unsigned x;
 
     x = (GE(c, 'A') & LE(c, 'Z') & (c - 'A')) |
@@ -97,11 +97,12 @@ static unsigned b64_char_to_byte(int c)
  * in the buffer, and the output length (counted WITHOUT the terminating
  * zero) is returned.
  */
-static size_t to_base64(char *dst, size_t dst_len, const void *src,
-                        size_t src_len) {
-    size_t olen;
+static size_t
+to_base64(char *dst, size_t dst_len, const void *src, size_t src_len)
+{
+    size_t               olen;
     const unsigned char *buf;
-    unsigned acc, acc_len;
+    unsigned             acc, acc_len;
 
     olen = (src_len / 3) << 2;
     switch (src_len % 3) {
@@ -113,21 +114,21 @@ static size_t to_base64(char *dst, size_
         break;
     }
     if (dst_len <= olen) {
-        return (size_t)-1;
+        return (size_t) -1;
     }
-    acc = 0;
+    acc     = 0;
     acc_len = 0;
-    buf = (const unsigned char *)src;
+    buf     = (const unsigned char *) src;
     while (src_len-- > 0) {
         acc = (acc << 8) + (*buf++);
         acc_len += 8;
         while (acc_len >= 6) {
             acc_len -= 6;
-            *dst++ = (char)b64_byte_to_char((acc >> acc_len) & 0x3F);
+            *dst++ = (char) b64_byte_to_char((acc >> acc_len) & 0x3F);
         }
     }
     if (acc_len > 0) {
-        *dst++ = (char)b64_byte_to_char((acc << (6 - acc_len)) & 0x3F);
+        *dst++ = (char) b64_byte_to_char((acc << (6 - acc_len)) & 0x3F);
     }
     *dst++ = 0;
     return olen;
@@ -146,14 +147,16 @@ static size_t to_base64(char *dst, size_
  * points to the first non-Base64 character in the source stream, which
  * may be the terminating zero.
  */
-static const char *from_base64(void *dst, size_t *dst_len, const char *src) {
-    size_t len;
+static const char *
+from_base64(void *dst, size_t *dst_len, const char *src)
+{
+    size_t         len;
     unsigned char *buf;
-    unsigned acc, acc_len;
+    unsigned       acc, acc_len;
 
-    buf = (unsigned char *)dst;
-    len = 0;
-    acc = 0;
+    buf     = (unsigned char *) dst;
+    len     = 0;
+    acc     = 0;
     acc_len = 0;
     for (;;) {
         unsigned d;
@@ -194,8 +197,10 @@ static const char *from_base64(void *dst
  * minimal (extra leading zeros), or the value does not fit in an
  * 'unsigned long', then NULL is returned.
  */
-static const char *decode_decimal(const char *str, unsigned long *v) {
-    const char *orig;
+static const char *
+decode_decimal(const char *str, unsigned long *v)
+{
+    const char *  orig;
     unsigned long acc;
 
     acc = 0;
@@ -211,10 +216,10 @@ static const char *decode_decimal(const
             return NULL;
         }
         acc *= 10;
-        if ((unsigned long)c > (ULONG_MAX - acc)) {
+        if ((unsigned long) c > (ULONG_MAX - acc)) {
             return NULL;
         }
-        acc += (unsigned long)c;
+        acc += (unsigned long) c;
     }
     if (str == orig || (*orig == '0' && str != (orig + 1))) {
         return NULL;
@@ -229,76 +234,80 @@ static const char *decode_decimal(const
  *
  * The code below applies the following format:
  *
- *  $argon2<T>$v=<num>$m=<num>,t=<num>,p=<num>[,keyid=<bin>][,data=<bin>][$<bin>[$<bin>]]
+ *  $argon2<T>[$v=<num>]$m=<num>,t=<num>,p=<num>$<bin>$<bin>
  *
- * where <T> is either 'd' or 'i', <num> is a decimal integer (positive, fits in an 'unsigned long')
- * and <bin> is Base64-encoded data (no '=' padding characters, no newline
- * or whitespace). The "keyid" is a binary identifier for a key (up to 8
- * bytes); "data" is associated data (up to 32 bytes). When the 'keyid'
- * (resp. the 'data') is empty, then it is ommitted from the output.
+ * where <T> is either 'i', <num> is a decimal integer (positive, fits in an
+ * 'unsigned long') and <bin> is Base64-encoded data (no '=' padding characters,
+ * no newline or whitespace).
  *
  * The last two binary chunks (encoded in Base64) are, in that order,
- * the salt and the output. Both are optional, but you cannot have an
- * output without a salt. The binary salt length is between 8 and 48 bytes.
- * The output length is always exactly 32 bytes.
+ * the salt and the output. Both are required. The binary salt length and the
+ * output length must be in the allowed ranges defined in argon2.h.
+ *
+ * The ctx struct must contain buffers large enough to hold the salt and pwd
+ * when it is fed into decode_string.
  */
 
 /*
  * Decode an Argon2i hash string into the provided structure 'ctx'.
  * Returned value is ARGON2_OK on success.
  */
-int decode_string(argon2_context *ctx, const char *str, argon2_type type) {
-    /* Prefix checking */
-#define CC(prefix)                                                             \
-    do {                                                                       \
-        size_t cc_len = strlen(prefix);                                        \
-        if (strncmp(str, prefix, cc_len) != 0) {                               \
-            return ARGON2_DECODING_FAIL;                                       \
-        }                                                                      \
-        str += cc_len;                                                         \
-    } while ((void)0, 0)
-
-    /* Prefix checking with supplied code */
-#define CC_opt(prefix, code)                                                   \
-    do {                                                                       \
-        size_t cc_len = strlen(prefix);                                        \
-        if (strncmp(str, prefix, cc_len) == 0) {                               \
-            str += cc_len;                                                     \
-            { code; }                                                          \
-        }                                                                      \
-    } while ((void)0, 0)
-
-    /* Decoding prefix into decimal */
-#define DECIMAL(x)                                                             \
-    do {                                                                       \
-        unsigned long dec_x;                                                   \
-        str = decode_decimal(str, &dec_x);                                     \
-        if (str == NULL) {                                                     \
-            return ARGON2_DECODING_FAIL;                                       \
-        }                                                                      \
-        (x) = dec_x;                                                           \
-    } while ((void)0, 0)
-
-    /* Decoding prefix into binary */
-#define BIN(buf, max_len, len)                                                 \
-    do {                                                                       \
-        size_t bin_len = (max_len);                                            \
-        str = from_base64(buf, &bin_len, str);                                 \
-        if (str == NULL || bin_len > UINT32_MAX) {                             \
-            return ARGON2_DECODING_FAIL;                                       \
-        }                                                                      \
-        (len) = (uint32_t)bin_len;                                             \
-    } while ((void)0, 0)
-
-    size_t maxadlen = ctx->adlen;
-    size_t maxsaltlen = ctx->saltlen;
-    size_t maxoutlen = ctx->outlen;
+int
+decode_string(argon2_context *ctx, const char *str, argon2_type type)
+{
+/* Prefix checking */
+#define CC(prefix)                               \
+    do {                                         \
+        size_t cc_len = strlen(prefix);          \
+        if (strncmp(str, prefix, cc_len) != 0) { \
+            return ARGON2_DECODING_FAIL;         \
+        }                                        \
+        str += cc_len;                           \
+    } while ((void) 0, 0)
+
+/* Optional prefix checking with supplied code */
+#define CC_opt(prefix, code)                     \
+    do {                                         \
+        size_t cc_len = strlen(prefix);          \
+        if (strncmp(str, prefix, cc_len) == 0) { \
+            str += cc_len;                       \
+            {                                    \
+                code;                            \
+            }                                    \
+        }                                        \
+    } while ((void) 0, 0)
+
+/* Decoding prefix into decimal */
+#define DECIMAL(x)                         \
+    do {                                   \
+        unsigned long dec_x;               \
+        str = decode_decimal(str, &dec_x); \
+        if (str == NULL) {                 \
+            return ARGON2_DECODING_FAIL;   \
+        }                                  \
+        (x) = dec_x;                       \
+    } while ((void) 0, 0)
+
+/* Decoding base64 into a binary buffer */
+#define BIN(buf, max_len, len)                            \
+    do {                                                  \
+        size_t bin_len = (max_len);                       \
+        str            = from_base64(buf, &bin_len, str); \
+        if (str == NULL || bin_len > UINT32_MAX) {        \
+            return ARGON2_DECODING_FAIL;                  \
+        }                                                 \
+        (len) = (uint32_t) bin_len;                       \
+    } while ((void) 0, 0)
+
+    size_t        maxsaltlen = ctx->saltlen;
+    size_t        maxoutlen  = ctx->outlen;
+    unsigned long val;
     unsigned long version = 0;
-    int validation_result;
+    int           validation_result;
 
-    ctx->adlen = 0;
     ctx->saltlen = 0;
-    ctx->outlen = 0;
+    ctx->outlen  = 0;
+
     if (type == Argon2_i) {
         CC("$argon2i");
     } else {
@@ -310,22 +319,27 @@ int decode_string(argon2_context *ctx, c
         return ARGON2_INCORRECT_TYPE;
     }
     CC("$m=");
-    DECIMAL(ctx->m_cost);
+    DECIMAL(val);
+    if (val > UINT32_MAX) {
+        return ARGON2_INCORRECT_TYPE;
+    }
+    ctx->m_cost = (uint32_t) val;
     CC(",t=");
-    DECIMAL(ctx->t_cost);
+    DECIMAL(val);
+    if (val > UINT32_MAX) {
+        return ARGON2_INCORRECT_TYPE;
+    }
+    ctx->t_cost = (uint32_t) val;
     CC(",p=");
-    DECIMAL(ctx->lanes);
+    DECIMAL(val);
+    if (val > UINT32_MAX) {
+        return ARGON2_INCORRECT_TYPE;
+    }
+    ctx->lanes   = (uint32_t) val;
     ctx->threads = ctx->lanes;
 
-    CC_opt(",data=", BIN(ctx->ad, maxadlen, ctx->adlen));
-    if (*str == 0) {
-        return ARGON2_OK;
-    }
     CC("$");
     BIN(ctx->salt, maxsaltlen, ctx->saltlen);
-    if (*str == 0) {
-        return ARGON2_OK;
-    }
     CC("$");
     BIN(ctx->out, maxoutlen, ctx->outlen);
     validation_result = validate_inputs(ctx);
@@ -345,7 +359,9 @@ int decode_string(argon2_context *ctx, c
 
 #define U32_STR_MAXSIZE 11U
 
-static void u32_to_string(char *str, uint32_t x) {
+static void
+u32_to_string(char *str, uint32_t x)
+{
     char   tmp[U32_STR_MAXSIZE - 1U];
     size_t i;
 
@@ -370,35 +386,36 @@ static void u32_to_string(char *str, uin
  *
  * On success, ARGON2_OK is returned.
  */
-int encode_string(char *dst, size_t dst_len, argon2_context *ctx,
-                  argon2_type type) {
-#define SS(str)                                                                \
-    do {                                                                       \
-        size_t pp_len = strlen(str);                                           \
-        if (pp_len >= dst_len) {                                               \
-            return ARGON2_ENCODING_FAIL;                                       \
-        }                                                                      \
-        memcpy(dst, str, pp_len + 1);                                          \
-        dst += pp_len;                                                         \
-        dst_len -= pp_len;                                                     \
-    } while ((void)0, 0)
-
-#define SX(x)                                                                  \
-    do {                                                                       \
-        char tmp[U32_STR_MAXSIZE];                                             \
-        u32_to_string(tmp, x);                                                 \
-        SS(tmp);                                                               \
-    } while ((void)0, 0)
-
-#define SB(buf, len)                                                           \
-    do {                                                                       \
-        size_t sb_len = to_base64(dst, dst_len, buf, len);                     \
-        if (sb_len == (size_t)-1) {                                            \
-            return ARGON2_ENCODING_FAIL;                                       \
-        }                                                                      \
-        dst += sb_len;                                                         \
-        dst_len -= sb_len;                                                     \
-    } while ((void)0, 0)
+int
+encode_string(char *dst, size_t dst_len, argon2_context *ctx, argon2_type type)
+{
+#define SS(str)                          \
+    do {                                 \
+        size_t pp_len = strlen(str);     \
+        if (pp_len >= dst_len) {         \
+            return ARGON2_ENCODING_FAIL; \
+        }                                \
+        memcpy(dst, str, pp_len + 1);    \
+        dst += pp_len;                   \
+        dst_len -= pp_len;               \
+    } while ((void) 0, 0)
+
+#define SX(x)                      \
+    do {                           \
+        char tmp[U32_STR_MAXSIZE]; \
+        u32_to_string(tmp, x);     \
+        SS(tmp);                   \
+    } while ((void) 0, 0)
+
+#define SB(buf, len)                                       \
+    do {                                                   \
+        size_t sb_len = to_base64(dst, dst_len, buf, len); \
+        if (sb_len == (size_t) -1) {                       \
+            return ARGON2_ENCODING_FAIL;                   \
+        }                                                  \
+        dst += sb_len;                                     \
+        dst_len -= sb_len;                                 \
+    } while ((void) 0, 0)
 
     int validation_result;
 
@@ -419,20 +436,9 @@ int encode_string(char *dst, size_t dst_
     SS(",p=");
     SX(ctx->lanes);
 
-    if (ctx->adlen > 0) {
-        SS(",data=");
-        SB(ctx->ad, ctx->adlen);
-    }
-
-    if (ctx->saltlen == 0) {
-        return ARGON2_OK;
-    }
     SS("$");
     SB(ctx->salt, ctx->saltlen);
 
-    if (ctx->outlen == 0) {
-        return ARGON2_OK;
-    }
     SS("$");
     SB(ctx->out, ctx->outlen);
     return ARGON2_OK;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-encoding.h libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-encoding.h
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-encoding.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-encoding.h	2017-03-06 11:13:57.000000000 +0100
@@ -22,7 +22,8 @@ int encode_string(char *dst, size_t dst_
 
 /*
  * Decodes an Argon2 hash string into the provided structure 'ctx'.
- * The fields ctx.saltlen, ctx.adlen, ctx.outlen set the maximal salt, ad, out length values
+ * The fields ctx.saltlen, ctx.adlen, ctx.outlen set the maximal salt, ad, out
+ * length values
  * that are allowed; invalid input string causes an error
  *
  * Returned value is ARGON2_OK on success.
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-fill-block-ref.c libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-fill-block-ref.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-fill-block-ref.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-fill-block-ref.c	2017-03-06 11:13:57.000000000 +0100
@@ -15,14 +15,15 @@
 #include <stdlib.h>
 #include <string.h>
 
-#include "argon2.h"
 #include "argon2-core.h"
-#include "argon2-impl.h"
+#include "argon2.h"
 #include "blamka-round-ref.h"
+#include "private/common.h"
 
-static void fill_block(const block *prev_block, const block *ref_block,
-                       block *next_block) {
-    block blockR, block_tmp;
+static void
+fill_block(const block *prev_block, const block *ref_block, block *next_block)
+{
+    block    blockR, block_tmp;
     unsigned i;
 
     copy_block(&blockR, ref_block);
@@ -57,16 +58,20 @@ static void fill_block(const block *prev
     xor_block(next_block, &blockR);
 }
 
-static void fill_block_with_xor(const block *prev_block, const block *ref_block,
-                                block *next_block) {
-    block blockR, block_tmp;
+static void
+fill_block_with_xor(const block *prev_block, const block *ref_block,
+                    block *next_block)
+{
+    block    blockR, block_tmp;
     unsigned i;
 
     copy_block(&blockR, ref_block);
     xor_block(&blockR, prev_block);
     copy_block(&block_tmp, &blockR);
-    xor_block(&block_tmp, next_block); /* Saving the next block contents for XOR over */
-    /* Now blockR = ref_block + prev_block and bloc_tmp = ref_block + prev_block + next_block */
+    xor_block(&block_tmp,
+              next_block); /* Saving the next block contents for XOR over */
+    /* Now blockR = ref_block + prev_block and bloc_tmp = ref_block + prev_block
+     * + next_block */
     /* Apply Blake2 on columns of 64-bit words: (0,1,...,15) , then
        (16,17,..31)... finally (112,113,...127) */
     for (i = 0; i < 8; ++i) {
@@ -103,10 +108,11 @@ static void fill_block_with_xor(const bl
  * @param pseudo_rands Pointer to the array of 64-bit values
  * @pre pseudo_rands must point to @a instance->segment_length allocated values
  */
-static void generate_addresses(const argon2_instance_t *instance,
-                               const argon2_position_t *position,
-                               uint64_t *pseudo_rands) {
-    block zero_block, input_block, address_block, tmp_block;
+static void
+generate_addresses(const argon2_instance_t *instance,
+                   const argon2_position_t *position, uint64_t *pseudo_rands)
+{
+    block    zero_block, input_block, address_block, tmp_block;
     uint32_t i;
 
     init_block_value(&zero_block, 0);
@@ -134,13 +140,14 @@ static void generate_addresses(const arg
     }
 }
 
-int fill_segment_ref(const argon2_instance_t *instance,
-                     argon2_position_t position) {
-    block *ref_block = NULL, *curr_block = NULL;
-    uint64_t pseudo_rand, ref_index, ref_lane;
-    uint32_t prev_offset, curr_offset;
-    uint32_t starting_index;
-    uint32_t i;
+int
+fill_segment_ref(const argon2_instance_t *instance, argon2_position_t position)
+{
+    block *   ref_block = NULL, *curr_block = NULL;
+    uint64_t  pseudo_rand, ref_index, ref_lane;
+    uint32_t  prev_offset, curr_offset;
+    uint32_t  starting_index;
+    uint32_t  i;
     const int data_independent_addressing = 1; /* instance->type == Argon2_i */
     /* Pseudo-random values that determine the reference block position */
     uint64_t *pseudo_rands = NULL;
@@ -150,7 +157,7 @@ int fill_segment_ref(const argon2_instan
     }
 
     pseudo_rands =
-        (uint64_t *)malloc(sizeof(uint64_t) * (instance->segment_length));
+        (uint64_t *) malloc(sizeof(uint64_t) * (instance->segment_length));
 
     if (pseudo_rands == NULL) {
         return ARGON2_MEMORY_ALLOCATION_ERROR;
@@ -189,7 +196,7 @@ int fill_segment_ref(const argon2_instan
         /* 1.2.1 Taking pseudo-random value from the previous block */
         if (data_independent_addressing) {
 #pragma warning(push)
-#pragma warning(disable: 6385)
+#pragma warning(disable : 6385)
             pseudo_rand = pseudo_rands[i];
 #pragma warning(pop)
         } else {
@@ -212,13 +219,15 @@ int fill_segment_ref(const argon2_instan
                                 ref_lane == position.lane);
 
         /* 2 Creating a new block */
-        ref_block =
-            instance->region->memory + instance->lane_length * ref_lane + ref_index;
+        ref_block = instance->region->memory +
+                    instance->lane_length * ref_lane + ref_index;
         curr_block = instance->region->memory + curr_offset;
         if (position.pass != 0) {
-            fill_block_with_xor(instance->region->memory + prev_offset, ref_block, curr_block);
+            fill_block_with_xor(instance->region->memory + prev_offset,
+                                ref_block, curr_block);
         } else {
-            fill_block(instance->region->memory + prev_offset, ref_block, curr_block);
+            fill_block(instance->region->memory + prev_offset, ref_block,
+                       curr_block);
         }
     }
 
@@ -226,4 +235,3 @@ int fill_segment_ref(const argon2_instan
 
     return ARGON2_OK;
 }
-
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-fill-block-ssse3.c libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-fill-block-ssse3.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-fill-block-ssse3.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-fill-block-ssse3.c	2017-03-06 23:32:40.000000000 +0100
@@ -15,57 +15,67 @@
 #include <stdlib.h>
 #include <string.h>
 
-#if (defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
-
-#pragma GCC target("sse2")
-#pragma GCC target("ssse3")
-
-#ifdef _MSC_VER
-# include <intrin.h> /* for _mm_set_epi64x */
-#endif
-#include <emmintrin.h>
-#include <tmmintrin.h>
-
-#include "argon2.h"
 #include "argon2-core.h"
-#include "argon2-impl.h"
-#include "blamka-round-ssse3.h"
+#include "argon2.h"
+#include "private/common.h"
+#include "private/sse2_64_32.h"
 
-static void fill_block(__m128i *state, const uint8_t *ref_block, uint8_t *next_block) {
-    __m128i block_XY[ARGON2_OWORDS_IN_BLOCK];
+#if defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)
+
+# ifdef __GNUC__
+#  pragma GCC target("sse2")
+#  pragma GCC target("ssse3")
+# endif
+
+# ifdef _MSC_VER
+#  include <intrin.h> /* for _mm_set_epi64x */
+# endif
+# include <emmintrin.h>
+# include <tmmintrin.h>
+
+# include "blamka-round-ssse3.h"
+
+static void
+fill_block(__m128i *state, const uint8_t *ref_block, uint8_t *next_block)
+{
+    __m128i  block_XY[ARGON2_OWORDS_IN_BLOCK];
     uint32_t i;
 
     for (i = 0; i < ARGON2_OWORDS_IN_BLOCK; i++) {
         block_XY[i] = state[i] = _mm_xor_si128(
-            state[i], _mm_loadu_si128((__m128i const *)(&ref_block[16 * i])));
+            state[i], _mm_loadu_si128((__m128i const *) (&ref_block[16 * i])));
     }
 
     for (i = 0; i < 8; ++i) {
         BLAKE2_ROUND(state[8 * i + 0], state[8 * i + 1], state[8 * i + 2],
-            state[8 * i + 3], state[8 * i + 4], state[8 * i + 5],
-            state[8 * i + 6], state[8 * i + 7]);
+                     state[8 * i + 3], state[8 * i + 4], state[8 * i + 5],
+                     state[8 * i + 6], state[8 * i + 7]);
     }
 
     for (i = 0; i < 8; ++i) {
         BLAKE2_ROUND(state[8 * 0 + i], state[8 * 1 + i], state[8 * 2 + i],
-            state[8 * 3 + i], state[8 * 4 + i], state[8 * 5 + i],
-            state[8 * 6 + i], state[8 * 7 + i]);
+                     state[8 * 3 + i], state[8 * 4 + i], state[8 * 5 + i],
+                     state[8 * 6 + i], state[8 * 7 + i]);
     }
 
     for (i = 0; i < ARGON2_OWORDS_IN_BLOCK; i++) {
         state[i] = _mm_xor_si128(state[i], block_XY[i]);
-        _mm_storeu_si128((__m128i *)(&next_block[16 * i]), state[i]);
+        _mm_storeu_si128((__m128i *) (&next_block[16 * i]), state[i]);
     }
 }
 
-static void fill_block_with_xor(__m128i *state, const uint8_t *ref_block, uint8_t *next_block) {
-    __m128i block_XY[ARGON2_OWORDS_IN_BLOCK];
+static void
+fill_block_with_xor(__m128i *state, const uint8_t *ref_block,
+                    uint8_t *next_block)
+{
+    __m128i  block_XY[ARGON2_OWORDS_IN_BLOCK];
     uint32_t i;
 
     for (i = 0; i < ARGON2_OWORDS_IN_BLOCK; i++) {
-        state[i] = _mm_xor_si128(state[i], _mm_loadu_si128((__m128i const *)(&ref_block[16 * i])));
-        block_XY[i] = _mm_xor_si128(state[i], _mm_loadu_si128((__m128i const *)(&next_block[16 * i])));
+        state[i] = _mm_xor_si128(
+            state[i], _mm_loadu_si128((__m128i const *) (&ref_block[16 * i])));
+        block_XY[i] = _mm_xor_si128(
+            state[i], _mm_loadu_si128((__m128i const *) (&next_block[16 * i])));
     }
 
     for (i = 0; i < 8; ++i) {
@@ -82,14 +92,15 @@ static void fill_block_with_xor(__m128i
 
     for (i = 0; i < ARGON2_OWORDS_IN_BLOCK; i++) {
         state[i] = _mm_xor_si128(state[i], block_XY[i]);
-        _mm_storeu_si128((__m128i *)(&next_block[16 * i]), state[i]);
+        _mm_storeu_si128((__m128i *) (&next_block[16 * i]), state[i]);
     }
 }
 
-static void generate_addresses(const argon2_instance_t *instance,
-                               const argon2_position_t *position,
-                               uint64_t *pseudo_rands) {
-    block address_block, input_block, tmp_block;
+static void
+generate_addresses(const argon2_instance_t *instance,
+                   const argon2_position_t *position, uint64_t *pseudo_rands)
+{
+    block    address_block, input_block, tmp_block;
     uint32_t i;
 
     init_block_value(&address_block, 0);
@@ -115,9 +126,11 @@ static void generate_addresses(const arg
                 /* Increasing index counter */
                 input_block.v[6]++;
                 /* First iteration of G */
-                fill_block_with_xor(zero_block, (uint8_t *)&input_block.v, (uint8_t *)&tmp_block.v);
+                fill_block_with_xor(zero_block, (uint8_t *) &input_block.v,
+                                    (uint8_t *) &tmp_block.v);
                 /* Second iteration of G */
-                fill_block_with_xor(zero2_block, (uint8_t *)&tmp_block.v, (uint8_t *)&address_block.v);
+                fill_block_with_xor(zero2_block, (uint8_t *) &tmp_block.v,
+                                    (uint8_t *) &address_block.v);
             }
 
             pseudo_rands[i] = address_block.v[i % ARGON2_ADDRESSES_IN_BLOCK];
@@ -125,13 +138,15 @@ static void generate_addresses(const arg
     }
 }
 
-int fill_segment_ssse3(const argon2_instance_t *instance,
-                       argon2_position_t position) {
-    block *ref_block = NULL, *curr_block = NULL;
-    uint64_t pseudo_rand, ref_index, ref_lane;
-    uint32_t prev_offset, curr_offset;
-    uint32_t starting_index, i;
-    __m128i state[64];
+int
+fill_segment_ssse3(const argon2_instance_t *instance,
+                   argon2_position_t        position)
+{
+    block *   ref_block = NULL, *curr_block = NULL;
+    uint64_t  pseudo_rand, ref_index, ref_lane;
+    uint32_t  prev_offset, curr_offset;
+    uint32_t  starting_index, i;
+    __m128i   state[64];
     const int data_independent_addressing = 1; /* instance->type == Argon2_i */
 
     /* Pseudo-random values that determine the reference block position */
@@ -142,7 +157,7 @@ int fill_segment_ssse3(const argon2_inst
     }
 
     pseudo_rands =
-        (uint64_t *)malloc(sizeof(uint64_t) * instance->segment_length);
+        (uint64_t *) malloc(sizeof(uint64_t) * instance->segment_length);
     if (pseudo_rands == NULL) {
         return ARGON2_MEMORY_ALLOCATION_ERROR;
     }
@@ -169,7 +184,8 @@ int fill_segment_ssse3(const argon2_inst
         prev_offset = curr_offset - 1;
     }
 
-    memcpy(state, ((instance->region->memory + prev_offset)->v), ARGON2_BLOCK_SIZE);
+    memcpy(state, ((instance->region->memory + prev_offset)->v),
+           ARGON2_BLOCK_SIZE);
 
     for (i = starting_index; i < instance->segment_length;
          ++i, ++curr_offset, ++prev_offset) {
@@ -182,7 +198,7 @@ int fill_segment_ssse3(const argon2_inst
         /* 1.2.1 Taking pseudo-random value from the previous block */
         if (data_independent_addressing) {
 #pragma warning(push)
-#pragma warning(disable: 6385)
+#pragma warning(disable : 6385)
             pseudo_rand = pseudo_rands[i];
 #pragma warning(pop)
         } else {
@@ -205,13 +221,15 @@ int fill_segment_ssse3(const argon2_inst
                                 ref_lane == position.lane);
 
         /* 2 Creating a new block */
-        ref_block =
-            instance->region->memory + instance->lane_length * ref_lane + ref_index;
+        ref_block = instance->region->memory +
+                    instance->lane_length * ref_lane + ref_index;
         curr_block = instance->region->memory + curr_offset;
         if (position.pass != 0) {
-            fill_block_with_xor(state, (uint8_t *)ref_block->v, (uint8_t *)curr_block->v);
+            fill_block_with_xor(state, (uint8_t *) ref_block->v,
+                                (uint8_t *) curr_block->v);
         } else {
-            fill_block(state, (uint8_t *)ref_block->v, (uint8_t *)curr_block->v);
+            fill_block(state, (uint8_t *) ref_block->v,
+                       (uint8_t *) curr_block->v);
         }
     }
 
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2.h libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2.h
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2.h	2017-03-06 11:13:57.000000000 +0100
@@ -6,14 +6,15 @@
  * This work is licensed under a Creative Commons CC0 1.0 License/Waiver.
  *
  * You should have received a copy of the CC0 Public Domain Dedication along
- * with this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
+ * with this software. If not, see
+ * <http://creativecommons.org/publicdomain/zero/1.0/>.
  */
 #ifndef argon2_H
 #define argon2_H
 
-#include <stdint.h>
-#include <stddef.h>
 #include <limits.h>
+#include <stddef.h>
+#include <stdint.h>
 
 /*
  * Argon2 input parameter restrictions
@@ -38,10 +39,11 @@
 #define ARGON2_MIN_MEMORY (2 * ARGON2_SYNC_POINTS) /* 2 blocks per slice */
 
 #define ARGON2_MIN(a, b) ((a) < (b) ? (a) : (b))
-/* Max memory size is half the addressing space, topping at 2^32 blocks (4 TB) */
-#define ARGON2_MAX_MEMORY_BITS                                                 \
+/* Max memory size is half the addressing space, topping at 2^32 blocks (4 TB)
+ */
+#define ARGON2_MAX_MEMORY_BITS \
     ARGON2_MIN(UINT32_C(32), (sizeof(void *) * CHAR_BIT - 10 - 1))
-#define ARGON2_MAX_MEMORY                                                      \
+#define ARGON2_MAX_MEMORY \
     ARGON2_MIN(UINT32_C(0xFFFFFFFF), UINT64_C(1) << ARGON2_MAX_MEMORY_BITS)
 
 /* Minimum and maximum number of passes */
@@ -76,45 +78,45 @@ typedef enum Argon2_ErrorCodes {
     ARGON2_OUTPUT_PTR_NULL = -1,
 
     ARGON2_OUTPUT_TOO_SHORT = -2,
-    ARGON2_OUTPUT_TOO_LONG = -3,
+    ARGON2_OUTPUT_TOO_LONG  = -3,
 
     ARGON2_PWD_TOO_SHORT = -4,
-    ARGON2_PWD_TOO_LONG = -5,
+    ARGON2_PWD_TOO_LONG  = -5,
 
     ARGON2_SALT_TOO_SHORT = -6,
-    ARGON2_SALT_TOO_LONG = -7,
+    ARGON2_SALT_TOO_LONG  = -7,
 
     ARGON2_AD_TOO_SHORT = -8,
-    ARGON2_AD_TOO_LONG = -9,
+    ARGON2_AD_TOO_LONG  = -9,
 
     ARGON2_SECRET_TOO_SHORT = -10,
-    ARGON2_SECRET_TOO_LONG = -11,
+    ARGON2_SECRET_TOO_LONG  = -11,
 
     ARGON2_TIME_TOO_SMALL = -12,
     ARGON2_TIME_TOO_LARGE = -13,
 
     ARGON2_MEMORY_TOO_LITTLE = -14,
-    ARGON2_MEMORY_TOO_MUCH = -15,
+    ARGON2_MEMORY_TOO_MUCH   = -15,
 
-    ARGON2_LANES_TOO_FEW = -16,
+    ARGON2_LANES_TOO_FEW  = -16,
     ARGON2_LANES_TOO_MANY = -17,
 
-    ARGON2_PWD_PTR_MISMATCH = -18,    /* NULL ptr with non-zero length */
-    ARGON2_SALT_PTR_MISMATCH = -19,   /* NULL ptr with non-zero length */
+    ARGON2_PWD_PTR_MISMATCH    = -18, /* NULL ptr with non-zero length */
+    ARGON2_SALT_PTR_MISMATCH   = -19, /* NULL ptr with non-zero length */
     ARGON2_SECRET_PTR_MISMATCH = -20, /* NULL ptr with non-zero length */
-    ARGON2_AD_PTR_MISMATCH = -21,     /* NULL ptr with non-zero length */
+    ARGON2_AD_PTR_MISMATCH     = -21, /* NULL ptr with non-zero length */
 
     ARGON2_MEMORY_ALLOCATION_ERROR = -22,
 
-    ARGON2_FREE_MEMORY_CBK_NULL = -23,
+    ARGON2_FREE_MEMORY_CBK_NULL     = -23,
     ARGON2_ALLOCATE_MEMORY_CBK_NULL = -24,
 
     ARGON2_INCORRECT_PARAMETER = -25,
-    ARGON2_INCORRECT_TYPE = -26,
+    ARGON2_INCORRECT_TYPE      = -26,
 
     ARGON2_OUT_PTR_MISMATCH = -27,
 
-    ARGON2_THREADS_TOO_FEW = -28,
+    ARGON2_THREADS_TOO_FEW  = -28,
     ARGON2_THREADS_TOO_MANY = -29,
 
     ARGON2_MISSING_ARGS = -30,
@@ -148,9 +150,12 @@ typedef enum Argon2_ErrorCodes {
  * are pre-hashed (and thus not needed anymore), and the entire memory
  *****
  * Simplest situation: you have output array out[8], password is stored in
- * pwd[32], salt is stored in salt[16], you do not have keys nor associated data.
- * You need to spend 1 GB of RAM and you run 5 passes of Argon2 with 4 parallel lanes.
- * You want to erase the password, but you're OK with last pass not being erased.
+ * pwd[32], salt is stored in salt[16], you do not have keys nor associated
+ *data.
+ * You need to spend 1 GB of RAM and you run 5 passes of Argon2 with 4 parallel
+ *lanes.
+ * You want to erase the password, but you're OK with last pass not being
+ *erased.
  * You want to use the default memory allocator.
  * Then you initialize:
  * Argon2_Context(out,8,pwd,32,salt,16,NULL,0,NULL,0,5,1<<20,4,4,NULL,NULL,true,false,false,false).
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-impl.h libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-impl.h
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/argon2-impl.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/argon2-impl.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,40 +0,0 @@
-/*
-   BLAKE2 reference source code package - reference C implementations
-
-   Written in 2012 by Samuel Neves <sneves@dei.uc.pt>
-
-   To the extent possible under law, the author(s) have dedicated all copyright
-   and related and neighboring rights to this software to the public domain
-   worldwide. This software is distributed without any warranty.
-
-   You should have received a copy of the CC0 Public Domain Dedication along with
-   this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
-*/
-
-#ifndef argon2_impl_H
-#define argon2_impl_H
-
-#include <stdint.h>
-#include <string.h>
-
-static inline uint32_t rotl32( const uint32_t w, const unsigned c )
-{
-  return ( w << c ) | ( w >> ( 32 - c ) );
-}
-
-static inline uint64_t rotl64( const uint64_t w, const unsigned c )
-{
-  return ( w << c ) | ( w >> ( 64 - c ) );
-}
-
-static inline uint32_t rotr32( const uint32_t w, const unsigned c )
-{
-  return ( w >> c ) | ( w << ( 32 - c ) );
-}
-
-static inline uint64_t rotr64( const uint64_t w, const unsigned c )
-{
-  return ( w >> c ) | ( w << ( 64 - c ) );
-}
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/blake2b-long.c libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/blake2b-long.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/blake2b-long.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/blake2b-long.c	2017-03-06 11:13:57.000000000 +0100
@@ -4,64 +4,63 @@
 #include <string.h>
 
 #include "crypto_generichash_blake2b.h"
-#include "utils.h"
 #include "private/common.h"
+#include "utils.h"
 
-#include "argon2-impl.h"
 #include "blake2b-long.h"
 
-int blake2b_long(void *pout, size_t outlen, const void *in, size_t inlen) {
-    uint8_t *out = (uint8_t *)pout;
+int
+blake2b_long(void *pout, size_t outlen, const void *in, size_t inlen)
+{
+    uint8_t *                        out = (uint8_t *) pout;
     crypto_generichash_blake2b_state blake_state;
-    uint8_t outlen_bytes[4 /* sizeof(uint32_t) */] = {0};
-    int ret = -1;
+    uint8_t outlen_bytes[4 /* sizeof(uint32_t) */] = { 0 };
+    int     ret                                    = -1;
 
     if (outlen > UINT32_MAX) {
         goto fail; /* LCOV_EXCL_LINE */
     }
 
     /* Ensure little-endian byte order! */
-    STORE32_LE(outlen_bytes, (uint32_t)outlen);
+    STORE32_LE(outlen_bytes, (uint32_t) outlen);
 
-#define TRY(statement)                                                         \
-    do {                                                                       \
-        ret = statement;                                                       \
-        if (ret < 0) {                                                         \
-            goto fail;                                                         \
-        }                                                                      \
-    } while ((void)0, 0)
+#define TRY(statement)   \
+    do {                 \
+        ret = statement; \
+        if (ret < 0) {   \
+            goto fail;   \
+        }                \
+    } while ((void) 0, 0)
 
     if (outlen <= crypto_generichash_blake2b_BYTES_MAX) {
         TRY(crypto_generichash_blake2b_init(&blake_state, NULL, 0U, outlen));
         TRY(crypto_generichash_blake2b_update(&blake_state, outlen_bytes,
                                               sizeof(outlen_bytes)));
-        TRY(crypto_generichash_blake2b_update(&blake_state,
-                                              (const unsigned char *) in,
-                                              inlen));
+        TRY(crypto_generichash_blake2b_update(
+            &blake_state, (const unsigned char *) in, inlen));
         TRY(crypto_generichash_blake2b_final(&blake_state, out, outlen));
     } else {
         uint32_t toproduce;
-        uint8_t out_buffer[crypto_generichash_blake2b_BYTES_MAX];
-        uint8_t in_buffer[crypto_generichash_blake2b_BYTES_MAX];
-        TRY(crypto_generichash_blake2b_init(&blake_state, NULL, 0U,
-                                            crypto_generichash_blake2b_BYTES_MAX));
+        uint8_t  out_buffer[crypto_generichash_blake2b_BYTES_MAX];
+        uint8_t  in_buffer[crypto_generichash_blake2b_BYTES_MAX];
+        TRY(crypto_generichash_blake2b_init(
+            &blake_state, NULL, 0U, crypto_generichash_blake2b_BYTES_MAX));
         TRY(crypto_generichash_blake2b_update(&blake_state, outlen_bytes,
                                               sizeof(outlen_bytes)));
-        TRY(crypto_generichash_blake2b_update(&blake_state,
-                                              (const unsigned char *) in,
-                                              inlen));
-        TRY(crypto_generichash_blake2b_final(&blake_state, out_buffer,
-                                             crypto_generichash_blake2b_BYTES_MAX));
+        TRY(crypto_generichash_blake2b_update(
+            &blake_state, (const unsigned char *) in, inlen));
+        TRY(crypto_generichash_blake2b_final(
+            &blake_state, out_buffer, crypto_generichash_blake2b_BYTES_MAX));
         memcpy(out, out_buffer, crypto_generichash_blake2b_BYTES_MAX / 2);
         out += crypto_generichash_blake2b_BYTES_MAX / 2;
-        toproduce = (uint32_t)outlen - crypto_generichash_blake2b_BYTES_MAX / 2;
+        toproduce =
+            (uint32_t) outlen - crypto_generichash_blake2b_BYTES_MAX / 2;
 
         while (toproduce > crypto_generichash_blake2b_BYTES_MAX) {
             memcpy(in_buffer, out_buffer, crypto_generichash_blake2b_BYTES_MAX);
-            TRY(crypto_generichash_blake2b(out_buffer, crypto_generichash_blake2b_BYTES_MAX,
-                                           in_buffer,
-                                           crypto_generichash_blake2b_BYTES_MAX,
-                                           NULL, 0U));
+            TRY(crypto_generichash_blake2b(
+                out_buffer, crypto_generichash_blake2b_BYTES_MAX, in_buffer,
+                crypto_generichash_blake2b_BYTES_MAX, NULL, 0U));
             memcpy(out, out_buffer, crypto_generichash_blake2b_BYTES_MAX / 2);
             out += crypto_generichash_blake2b_BYTES_MAX / 2;
             toproduce -= crypto_generichash_blake2b_BYTES_MAX / 2;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/blamka-round-ref.h libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/blamka-round-ref.h
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/blamka-round-ref.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/blamka-round-ref.h	2017-03-06 11:13:57.000000000 +0100
@@ -1,38 +1,40 @@
 #ifndef blamka_round_ref_H
 #define blamka_round_ref_H
 
-#include "argon2-impl.h"
+#include "private/common.h"
 
 /*designed by the Lyra PHC team */
-static inline uint64_t fBlaMka(uint64_t x, uint64_t y) {
-    const uint64_t m = UINT64_C(0xFFFFFFFF);
+static inline uint64_t
+fBlaMka(uint64_t x, uint64_t y)
+{
+    const uint64_t m  = UINT64_C(0xFFFFFFFF);
     const uint64_t xy = (x & m) * (y & m);
     return x + y + 2 * xy;
 }
 
-#define G(a, b, c, d)                                                          \
-    do {                                                                       \
-        a = fBlaMka(a, b);                                                     \
-        d = rotr64(d ^ a, 32);                                                 \
-        c = fBlaMka(c, d);                                                     \
-        b = rotr64(b ^ c, 24);                                                 \
-        a = fBlaMka(a, b);                                                     \
-        d = rotr64(d ^ a, 16);                                                 \
-        c = fBlaMka(c, d);                                                     \
-        b = rotr64(b ^ c, 63);                                                 \
-    } while ((void)0, 0)
+#define G(a, b, c, d)          \
+    do {                       \
+        a = fBlaMka(a, b);     \
+        d = ROTR64(d ^ a, 32); \
+        c = fBlaMka(c, d);     \
+        b = ROTR64(b ^ c, 24); \
+        a = fBlaMka(a, b);     \
+        d = ROTR64(d ^ a, 16); \
+        c = fBlaMka(c, d);     \
+        b = ROTR64(b ^ c, 63); \
+    } while ((void) 0, 0)
 
-#define BLAKE2_ROUND_NOMSG(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11,   \
-                           v12, v13, v14, v15)                                 \
-    do {                                                                       \
-        G(v0, v4, v8, v12);                                                    \
-        G(v1, v5, v9, v13);                                                    \
-        G(v2, v6, v10, v14);                                                   \
-        G(v3, v7, v11, v15);                                                   \
-        G(v0, v5, v10, v15);                                                   \
-        G(v1, v6, v11, v12);                                                   \
-        G(v2, v7, v8, v13);                                                    \
-        G(v3, v4, v9, v14);                                                    \
-    } while ((void)0, 0)
+#define BLAKE2_ROUND_NOMSG(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, \
+                           v12, v13, v14, v15)                               \
+    do {                                                                     \
+        G(v0, v4, v8, v12);                                                  \
+        G(v1, v5, v9, v13);                                                  \
+        G(v2, v6, v10, v14);                                                 \
+        G(v3, v7, v11, v15);                                                 \
+        G(v0, v5, v10, v15);                                                 \
+        G(v1, v6, v11, v12);                                                 \
+        G(v2, v7, v8, v13);                                                  \
+        G(v3, v4, v9, v14);                                                  \
+    } while ((void) 0, 0)
 
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/blamka-round-ssse3.h libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/blamka-round-ssse3.h
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/blamka-round-ssse3.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/blamka-round-ssse3.h	2017-03-06 23:32:40.000000000 +0100
@@ -1,117 +1,120 @@
 #ifndef blamka_round_ssse3_H
 #define blamka_round_ssse3_H
 
-#include "argon2-impl.h"
+#include "private/common.h"
+#include "private/sse2_64_32.h"
 
-#define r16                                                                    \
+#define r16 \
     (_mm_setr_epi8(2, 3, 4, 5, 6, 7, 0, 1, 10, 11, 12, 13, 14, 15, 8, 9))
-#define r24                                                                    \
+#define r24 \
     (_mm_setr_epi8(3, 4, 5, 6, 7, 0, 1, 2, 11, 12, 13, 14, 15, 8, 9, 10))
-#define _mm_roti_epi64(x, c)                                                   \
-    (-(c) == 32)                                                               \
-        ? _mm_shuffle_epi32((x), _MM_SHUFFLE(2, 3, 0, 1))                      \
-        : (-(c) == 24)                                                         \
-              ? _mm_shuffle_epi8((x), r24)                                     \
-              : (-(c) == 16)                                                   \
-                    ? _mm_shuffle_epi8((x), r16)                               \
-                    : (-(c) == 63)                                             \
-                          ? _mm_xor_si128(_mm_srli_epi64((x), -(c)),           \
-                                          _mm_add_epi64((x), (x)))             \
-                          : _mm_xor_si128(_mm_srli_epi64((x), -(c)),           \
+#define _mm_roti_epi64(x, c)                                         \
+    (-(c) == 32)                                                     \
+        ? _mm_shuffle_epi32((x), _MM_SHUFFLE(2, 3, 0, 1))            \
+        : (-(c) == 24)                                               \
+              ? _mm_shuffle_epi8((x), r24)                           \
+              : (-(c) == 16)                                         \
+                    ? _mm_shuffle_epi8((x), r16)                     \
+                    : (-(c) == 63)                                   \
+                          ? _mm_xor_si128(_mm_srli_epi64((x), -(c)), \
+                                          _mm_add_epi64((x), (x)))   \
+                          : _mm_xor_si128(_mm_srli_epi64((x), -(c)), \
                                           _mm_slli_epi64((x), 64 - (-(c))))
 
-static inline __m128i fBlaMka(__m128i x, __m128i y) {
+static inline __m128i
+fBlaMka(__m128i x, __m128i y)
+{
     const __m128i z = _mm_mul_epu32(x, y);
     return _mm_add_epi64(_mm_add_epi64(x, y), _mm_add_epi64(z, z));
 }
 
-#define G1(A0, B0, C0, D0, A1, B1, C1, D1)                                     \
-    do {                                                                       \
-        A0 = fBlaMka(A0, B0);                                                  \
-        A1 = fBlaMka(A1, B1);                                                  \
-                                                                               \
-        D0 = _mm_xor_si128(D0, A0);                                            \
-        D1 = _mm_xor_si128(D1, A1);                                            \
-                                                                               \
-        D0 = _mm_roti_epi64(D0, -32);                                          \
-        D1 = _mm_roti_epi64(D1, -32);                                          \
-                                                                               \
-        C0 = fBlaMka(C0, D0);                                                  \
-        C1 = fBlaMka(C1, D1);                                                  \
-                                                                               \
-        B0 = _mm_xor_si128(B0, C0);                                            \
-        B1 = _mm_xor_si128(B1, C1);                                            \
-                                                                               \
-        B0 = _mm_roti_epi64(B0, -24);                                          \
-        B1 = _mm_roti_epi64(B1, -24);                                          \
-    } while ((void)0, 0)
-
-#define G2(A0, B0, C0, D0, A1, B1, C1, D1)                                     \
-    do {                                                                       \
-        A0 = fBlaMka(A0, B0);                                                  \
-        A1 = fBlaMka(A1, B1);                                                  \
-                                                                               \
-        D0 = _mm_xor_si128(D0, A0);                                            \
-        D1 = _mm_xor_si128(D1, A1);                                            \
-                                                                               \
-        D0 = _mm_roti_epi64(D0, -16);                                          \
-        D1 = _mm_roti_epi64(D1, -16);                                          \
-                                                                               \
-        C0 = fBlaMka(C0, D0);                                                  \
-        C1 = fBlaMka(C1, D1);                                                  \
-                                                                               \
-        B0 = _mm_xor_si128(B0, C0);                                            \
-        B1 = _mm_xor_si128(B1, C1);                                            \
-                                                                               \
-        B0 = _mm_roti_epi64(B0, -63);                                          \
-        B1 = _mm_roti_epi64(B1, -63);                                          \
-    } while ((void)0, 0)
-
-#define DIAGONALIZE(A0, B0, C0, D0, A1, B1, C1, D1)                            \
-    do {                                                                       \
-        __m128i t0 = _mm_alignr_epi8(B1, B0, 8);                               \
-        __m128i t1 = _mm_alignr_epi8(B0, B1, 8);                               \
-        B0 = t0;                                                               \
-        B1 = t1;                                                               \
-                                                                               \
-        t0 = C0;                                                               \
-        C0 = C1;                                                               \
-        C1 = t0;                                                               \
-                                                                               \
-        t0 = _mm_alignr_epi8(D1, D0, 8);                                       \
-        t1 = _mm_alignr_epi8(D0, D1, 8);                                       \
-        D0 = t1;                                                               \
-        D1 = t0;                                                               \
-    } while ((void)0, 0)
-
-#define UNDIAGONALIZE(A0, B0, C0, D0, A1, B1, C1, D1)                          \
-    do {                                                                       \
-        __m128i t0 = _mm_alignr_epi8(B0, B1, 8);                               \
-        __m128i t1 = _mm_alignr_epi8(B1, B0, 8);                               \
-        B0 = t0;                                                               \
-        B1 = t1;                                                               \
-                                                                               \
-        t0 = C0;                                                               \
-        C0 = C1;                                                               \
-        C1 = t0;                                                               \
-                                                                               \
-        t0 = _mm_alignr_epi8(D0, D1, 8);                                       \
-        t1 = _mm_alignr_epi8(D1, D0, 8);                                       \
-        D0 = t1;                                                               \
-        D1 = t0;                                                               \
-    } while ((void)0, 0)
-
-#define BLAKE2_ROUND(A0, A1, B0, B1, C0, C1, D0, D1)                           \
-    do {                                                                       \
-        G1(A0, B0, C0, D0, A1, B1, C1, D1);                                    \
-        G2(A0, B0, C0, D0, A1, B1, C1, D1);                                    \
-                                                                               \
-        DIAGONALIZE(A0, B0, C0, D0, A1, B1, C1, D1);                           \
-                                                                               \
-        G1(A0, B0, C0, D0, A1, B1, C1, D1);                                    \
-        G2(A0, B0, C0, D0, A1, B1, C1, D1);                                    \
-                                                                               \
-        UNDIAGONALIZE(A0, B0, C0, D0, A1, B1, C1, D1);                         \
-    } while ((void)0, 0)
+#define G1(A0, B0, C0, D0, A1, B1, C1, D1) \
+    do {                                   \
+        A0 = fBlaMka(A0, B0);              \
+        A1 = fBlaMka(A1, B1);              \
+                                           \
+        D0 = _mm_xor_si128(D0, A0);        \
+        D1 = _mm_xor_si128(D1, A1);        \
+                                           \
+        D0 = _mm_roti_epi64(D0, -32);      \
+        D1 = _mm_roti_epi64(D1, -32);      \
+                                           \
+        C0 = fBlaMka(C0, D0);              \
+        C1 = fBlaMka(C1, D1);              \
+                                           \
+        B0 = _mm_xor_si128(B0, C0);        \
+        B1 = _mm_xor_si128(B1, C1);        \
+                                           \
+        B0 = _mm_roti_epi64(B0, -24);      \
+        B1 = _mm_roti_epi64(B1, -24);      \
+    } while ((void) 0, 0)
+
+#define G2(A0, B0, C0, D0, A1, B1, C1, D1) \
+    do {                                   \
+        A0 = fBlaMka(A0, B0);              \
+        A1 = fBlaMka(A1, B1);              \
+                                           \
+        D0 = _mm_xor_si128(D0, A0);        \
+        D1 = _mm_xor_si128(D1, A1);        \
+                                           \
+        D0 = _mm_roti_epi64(D0, -16);      \
+        D1 = _mm_roti_epi64(D1, -16);      \
+                                           \
+        C0 = fBlaMka(C0, D0);              \
+        C1 = fBlaMka(C1, D1);              \
+                                           \
+        B0 = _mm_xor_si128(B0, C0);        \
+        B1 = _mm_xor_si128(B1, C1);        \
+                                           \
+        B0 = _mm_roti_epi64(B0, -63);      \
+        B1 = _mm_roti_epi64(B1, -63);      \
+    } while ((void) 0, 0)
+
+#define DIAGONALIZE(A0, B0, C0, D0, A1, B1, C1, D1) \
+    do {                                            \
+        __m128i t0 = _mm_alignr_epi8(B1, B0, 8);    \
+        __m128i t1 = _mm_alignr_epi8(B0, B1, 8);    \
+        B0         = t0;                            \
+        B1         = t1;                            \
+                                                    \
+        t0 = C0;                                    \
+        C0 = C1;                                    \
+        C1 = t0;                                    \
+                                                    \
+        t0 = _mm_alignr_epi8(D1, D0, 8);            \
+        t1 = _mm_alignr_epi8(D0, D1, 8);            \
+        D0 = t1;                                    \
+        D1 = t0;                                    \
+    } while ((void) 0, 0)
+
+#define UNDIAGONALIZE(A0, B0, C0, D0, A1, B1, C1, D1) \
+    do {                                              \
+        __m128i t0 = _mm_alignr_epi8(B0, B1, 8);      \
+        __m128i t1 = _mm_alignr_epi8(B1, B0, 8);      \
+        B0         = t0;                              \
+        B1         = t1;                              \
+                                                      \
+        t0 = C0;                                      \
+        C0 = C1;                                      \
+        C1 = t0;                                      \
+                                                      \
+        t0 = _mm_alignr_epi8(D0, D1, 8);              \
+        t1 = _mm_alignr_epi8(D1, D0, 8);              \
+        D0 = t1;                                      \
+        D1 = t0;                                      \
+    } while ((void) 0, 0)
+
+#define BLAKE2_ROUND(A0, A1, B0, B1, C0, C1, D0, D1)   \
+    do {                                               \
+        G1(A0, B0, C0, D0, A1, B1, C1, D1);            \
+        G2(A0, B0, C0, D0, A1, B1, C1, D1);            \
+                                                       \
+        DIAGONALIZE(A0, B0, C0, D0, A1, B1, C1, D1);   \
+                                                       \
+        G1(A0, B0, C0, D0, A1, B1, C1, D1);            \
+        G2(A0, B0, C0, D0, A1, B1, C1, D1);            \
+                                                       \
+        UNDIAGONALIZE(A0, B0, C0, D0, A1, B1, C1, D1); \
+    } while ((void) 0, 0)
 
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/pwhash_argon2i.c libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/pwhash_argon2i.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/argon2/pwhash_argon2i.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/argon2/pwhash_argon2i.c	2017-03-06 11:13:57.000000000 +0100
@@ -5,8 +5,8 @@
 #include <stdint.h>
 #include <string.h>
 
-#include "argon2.h"
 #include "argon2-core.h"
+#include "argon2.h"
 #include "crypto_pwhash_argon2i.h"
 #include "randombytes.h"
 #include "utils.h"
@@ -20,6 +20,30 @@ crypto_pwhash_argon2i_alg_argon2i13(void
 }
 
 size_t
+crypto_pwhash_argon2i_bytes_min(void)
+{
+    return crypto_pwhash_argon2i_BYTES_MIN;
+}
+
+size_t
+crypto_pwhash_argon2i_bytes_max(void)
+{
+    return crypto_pwhash_argon2i_BYTES_MAX;
+}
+
+size_t
+crypto_pwhash_argon2i_passwd_min(void)
+{
+    return crypto_pwhash_argon2i_PASSWD_MIN;
+}
+
+size_t
+crypto_pwhash_argon2i_passwd_max(void)
+{
+    return crypto_pwhash_argon2i_PASSWD_MAX;
+}
+
+size_t
 crypto_pwhash_argon2i_saltbytes(void)
 {
     return crypto_pwhash_argon2i_SALTBYTES;
@@ -31,13 +55,37 @@ crypto_pwhash_argon2i_strbytes(void)
     return crypto_pwhash_argon2i_STRBYTES;
 }
 
-const char *
+const char*
 crypto_pwhash_argon2i_strprefix(void)
 {
     return crypto_pwhash_argon2i_STRPREFIX;
 }
 
 size_t
+crypto_pwhash_argon2i_opslimit_min(void)
+{
+    return crypto_pwhash_argon2i_OPSLIMIT_MIN;
+}
+
+size_t
+crypto_pwhash_argon2i_opslimit_max(void)
+{
+    return crypto_pwhash_argon2i_OPSLIMIT_MAX;
+}
+
+size_t
+crypto_pwhash_argon2i_memlimit_min(void)
+{
+    return crypto_pwhash_argon2i_MEMLIMIT_MIN;
+}
+
+size_t
+crypto_pwhash_argon2i_memlimit_max(void)
+{
+    return crypto_pwhash_argon2i_MEMLIMIT_MAX;
+}
+
+size_t
 crypto_pwhash_argon2i_opslimit_interactive(void)
 {
     return crypto_pwhash_argon2i_OPSLIMIT_INTERACTIVE;
@@ -74,14 +122,12 @@ crypto_pwhash_argon2i_memlimit_sensitive
 }
 
 int
-crypto_pwhash_argon2i(unsigned char * const out,
-                      unsigned long long outlen,
-                      const char * const passwd,
-                      unsigned long long passwdlen,
-                      const unsigned char * const salt,
-                      unsigned long long opslimit,
-                      size_t memlimit, int alg)
+crypto_pwhash_argon2i(unsigned char* const out, unsigned long long outlen,
+                      const char* const passwd, unsigned long long passwdlen,
+                      const unsigned char* const salt,
+                      unsigned long long opslimit, size_t memlimit, int alg)
 {
+    memset(out, 0, outlen);
     if (alg != crypto_pwhash_argon2i_ALG_ARGON2I13) {
         return -1;
     }
@@ -97,40 +143,39 @@ crypto_pwhash_argon2i(unsigned char * co
         return -1;
     }
     if (argon2i_hash_raw((uint32_t) opslimit, (uint32_t) memlimit,
-                         (uint32_t) 1U, passwd, (size_t) passwdlen,
-                         salt, (size_t) crypto_pwhash_argon2i_SALTBYTES,
-                         out, (size_t) outlen) != ARGON2_OK) {
+                         (uint32_t) 1U, passwd, (size_t) passwdlen, salt,
+                         (size_t) crypto_pwhash_argon2i_SALTBYTES, out,
+                         (size_t) outlen) != ARGON2_OK) {
         return -1; /* LCOV_EXCL_LINE */
     }
     return 0;
 }
 
 int
-crypto_pwhash_argon2i_str(char out[crypto_pwhash_argon2i_STRBYTES],
-                          const char * const passwd,
+crypto_pwhash_argon2i_str(char              out[crypto_pwhash_argon2i_STRBYTES],
+                          const char* const passwd,
                           unsigned long long passwdlen,
-                          unsigned long long opslimit,
-                          size_t memlimit)
+                          unsigned long long opslimit, size_t memlimit)
 {
     unsigned char salt[crypto_pwhash_argon2i_SALTBYTES];
 
     memset(out, 0, crypto_pwhash_argon2i_STRBYTES);
     memlimit /= 1024U;
-    if (passwdlen > ARGON2_MAX_PWD_LENGTH ||
-        opslimit > ARGON2_MAX_TIME || memlimit > ARGON2_MAX_MEMORY) {
+    if (passwdlen > ARGON2_MAX_PWD_LENGTH || opslimit > ARGON2_MAX_TIME ||
+        memlimit > ARGON2_MAX_MEMORY) {
         errno = EFBIG;
         return -1;
     }
-    if (passwdlen < ARGON2_MIN_PWD_LENGTH ||
-        opslimit < ARGON2_MIN_TIME || memlimit < ARGON2_MIN_MEMORY) {
+    if (passwdlen < ARGON2_MIN_PWD_LENGTH || opslimit < ARGON2_MIN_TIME ||
+        memlimit < ARGON2_MIN_MEMORY) {
         errno = EINVAL;
         return -1;
     }
     randombytes_buf(salt, sizeof salt);
     if (argon2i_hash_encoded((uint32_t) opslimit, (uint32_t) memlimit,
-                             (uint32_t) 1U, passwd, (size_t) passwdlen,
-                             salt, sizeof salt, STR_HASHBYTES,
-                             out, crypto_pwhash_argon2i_STRBYTES) != ARGON2_OK) {
+                             (uint32_t) 1U, passwd, (size_t) passwdlen, salt,
+                             sizeof salt, STR_HASHBYTES, out,
+                             crypto_pwhash_argon2i_STRBYTES) != ARGON2_OK) {
         return -1; /* LCOV_EXCL_LINE */
     }
     return 0;
@@ -138,19 +183,19 @@ crypto_pwhash_argon2i_str(char out[crypt
 
 int
 crypto_pwhash_argon2i_str_verify(const char str[crypto_pwhash_argon2i_STRBYTES],
-                                 const char * const passwd,
+                                 const char* const  passwd,
                                  unsigned long long passwdlen)
 {
     if (passwdlen > ARGON2_MAX_PWD_LENGTH) {
         errno = EFBIG;
         return -1;
     }
-/* LCOV_EXCL_START */
+    /* LCOV_EXCL_START */
     if (passwdlen < ARGON2_MIN_PWD_LENGTH) {
         errno = EINVAL;
         return -1;
     }
-/* LCOV_EXCL_STOP */
+    /* LCOV_EXCL_STOP */
     if (argon2i_verify(str, passwd, (size_t) passwdlen) != ARGON2_OK) {
         return -1;
     }
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/crypto_pwhash.c libsodium-1.0.12/src/libsodium/crypto_pwhash/crypto_pwhash.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/crypto_pwhash.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/crypto_pwhash.c	2017-03-06 11:13:57.000000000 +0100
@@ -16,6 +16,30 @@ crypto_pwhash_alg_default(void)
 }
 
 size_t
+crypto_pwhash_bytes_min(void)
+{
+    return crypto_pwhash_BYTES_MIN;
+}
+
+size_t
+crypto_pwhash_bytes_max(void)
+{
+    return crypto_pwhash_BYTES_MAX;
+}
+
+size_t
+crypto_pwhash_passwd_min(void)
+{
+    return crypto_pwhash_PASSWD_MIN;
+}
+
+size_t
+crypto_pwhash_passwd_max(void)
+{
+    return crypto_pwhash_PASSWD_MAX;
+}
+
+size_t
 crypto_pwhash_saltbytes(void)
 {
     return crypto_pwhash_SALTBYTES;
@@ -34,6 +58,30 @@ crypto_pwhash_strprefix(void)
 }
 
 size_t
+crypto_pwhash_opslimit_min(void)
+{
+    return crypto_pwhash_OPSLIMIT_MIN;
+}
+
+size_t
+crypto_pwhash_opslimit_max(void)
+{
+    return crypto_pwhash_OPSLIMIT_MAX;
+}
+
+size_t
+crypto_pwhash_memlimit_min(void)
+{
+    return crypto_pwhash_MEMLIMIT_MIN;
+}
+
+size_t
+crypto_pwhash_memlimit_max(void)
+{
+    return crypto_pwhash_MEMLIMIT_MAX;
+}
+
+size_t
 crypto_pwhash_opslimit_interactive(void)
 {
     return crypto_pwhash_OPSLIMIT_INTERACTIVE;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/crypto_scrypt-common.c libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/crypto_scrypt-common.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/crypto_scrypt-common.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/crypto_scrypt-common.c	2017-03-06 11:13:57.000000000 +0100
@@ -23,14 +23,15 @@
 
 #include "crypto_pwhash_scryptsalsa208sha256.h"
 #include "crypto_scrypt.h"
+#include "private/common.h"
 #include "runtime.h"
 #include "utils.h"
 
-static const char * const itoa64 =
+static const char *const itoa64 =
     "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
 
 static uint8_t *
-encode64_uint32(uint8_t * dst, size_t dstlen, uint32_t src, uint32_t srcbits)
+encode64_uint32(uint8_t *dst, size_t dstlen, uint32_t src, uint32_t srcbits)
 {
     uint32_t bit;
 
@@ -42,22 +43,23 @@ encode64_uint32(uint8_t * dst, size_t ds
         dstlen--;
         src >>= 6;
     }
-
     return dst;
 }
 
 static uint8_t *
-encode64(uint8_t * dst, size_t dstlen, const uint8_t * src, size_t srclen)
+encode64(uint8_t *dst, size_t dstlen, const uint8_t *src, size_t srclen)
 {
     size_t i;
 
-    for (i = 0; i < srclen; ) {
-        uint8_t * dnext;
+    for (i = 0; i < srclen;) {
+        uint8_t *dnext;
         uint32_t value = 0, bits = 0;
+
         do {
-            value |= (uint32_t)src[i++] << bits;
+            value |= (uint32_t) src[i++] << bits;
             bits += 8;
         } while (bits < 24 && i < srclen);
+
         dnext = encode64_uint32(dst, dstlen, value, bits);
         if (!dnext) {
             return NULL; /* LCOV_EXCL_LINE */
@@ -65,25 +67,25 @@ encode64(uint8_t * dst, size_t dstlen, c
         dstlen -= dnext - dst;
         dst = dnext;
     }
-
     return dst;
 }
 
 static int
-decode64_one(uint32_t * dst, uint8_t src)
+decode64_one(uint32_t *dst, uint8_t src)
 {
     const char *ptr = strchr(itoa64, src);
 
     if (ptr) {
-        *dst = (uint32_t) (ptr - itoa64);
+        *dst = (uint32_t)(ptr - itoa64);
         return 0;
     }
     *dst = 0;
+
     return -1;
 }
 
 static const uint8_t *
-decode64_uint32(uint32_t * dst, uint32_t dstbits, const uint8_t * src)
+decode64_uint32(uint32_t *dst, uint32_t dstbits, const uint8_t *src)
 {
     uint32_t bit;
     uint32_t value;
@@ -98,20 +100,20 @@ decode64_uint32(uint32_t * dst, uint32_t
         src++;
         value |= one << bit;
     }
-
     *dst = value;
+
     return src;
 }
 
 uint8_t *
-escrypt_r(escrypt_local_t * local, const uint8_t * passwd, size_t passwdlen,
-          const uint8_t * setting, uint8_t * buf, size_t buflen)
+escrypt_r(escrypt_local_t *local, const uint8_t *passwd, size_t passwdlen,
+          const uint8_t *setting, uint8_t *buf, size_t buflen)
 {
     uint8_t        hash[crypto_pwhash_scryptsalsa208sha256_STRHASHBYTES];
     escrypt_kdf_t  escrypt_kdf;
     const uint8_t *src;
     const uint8_t *salt;
-    uint8_t       *dst;
+    uint8_t *      dst;
     size_t         prefixlen;
     size_t         saltlen;
     size_t         need;
@@ -142,29 +144,27 @@ escrypt_r(escrypt_local_t * local, const
     prefixlen = src - setting;
 
     salt = src;
-    src = (uint8_t *) strrchr((char *)salt, '$');
+    src  = (uint8_t *) strrchr((char *) salt, '$');
     if (src) {
         saltlen = src - salt;
     } else {
-        saltlen = strlen((char *)salt);
+        saltlen = strlen((char *) salt);
     }
     need = prefixlen + saltlen + 1 +
-        crypto_pwhash_scryptsalsa208sha256_STRHASHBYTES_ENCODED + 1;
+           crypto_pwhash_scryptsalsa208sha256_STRHASHBYTES_ENCODED + 1;
     if (need > buflen || need < saltlen) {
         return NULL;
     }
-#if defined(HAVE_EMMINTRIN_H) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
+#ifdef HAVE_EMMINTRIN_H
     escrypt_kdf =
         sodium_runtime_has_sse2() ? escrypt_kdf_sse : escrypt_kdf_nosse;
 #else
     escrypt_kdf = escrypt_kdf_nosse;
 #endif
-    if (escrypt_kdf(local, passwd, passwdlen, salt, saltlen,
-                    N, r, p, hash, sizeof(hash))) {
+    if (escrypt_kdf(local, passwd, passwdlen, salt, saltlen, N, r, p, hash,
+                    sizeof(hash))) {
         return NULL;
     }
-
     dst = buf;
     memcpy(dst, setting, prefixlen + saltlen);
     dst += prefixlen + saltlen;
@@ -181,24 +181,23 @@ escrypt_r(escrypt_local_t * local, const
 }
 
 uint8_t *
-escrypt_gensalt_r(uint32_t N_log2, uint32_t r, uint32_t p,
-                  const uint8_t * src, size_t srclen,
-                  uint8_t * buf, size_t buflen)
+escrypt_gensalt_r(uint32_t N_log2, uint32_t r, uint32_t p, const uint8_t *src,
+                  size_t srclen, uint8_t *buf, size_t buflen)
 {
     uint8_t *dst;
     size_t   prefixlen =
         (sizeof "$7$" - 1U) + (1U /* N_log2 */) + (5U /* r */) + (5U /* p */);
-    size_t   saltlen = BYTES2CHARS(srclen);
-    size_t   need;
+    size_t saltlen = BYTES2CHARS(srclen);
+    size_t need;
 
     need = prefixlen + saltlen + 1;
     if (need > buflen || need < saltlen || saltlen < srclen) {
         return NULL; /* LCOV_EXCL_LINE */
     }
-    if (N_log2 > 63 || ((uint64_t)r * (uint64_t)p >= (1U << 30))) {
+    if (N_log2 > 63 || ((uint64_t) r * (uint64_t) p >= (1U << 30))) {
         return NULL;
     }
-    dst = buf;
+    dst    = buf;
     *dst++ = '$';
     *dst++ = '7';
     *dst++ = '$';
@@ -223,10 +222,10 @@ escrypt_gensalt_r(uint32_t N_log2, uint3
 }
 
 int
-crypto_pwhash_scryptsalsa208sha256_ll(const uint8_t * passwd, size_t passwdlen,
-                                      const uint8_t * salt, size_t saltlen,
+crypto_pwhash_scryptsalsa208sha256_ll(const uint8_t *passwd, size_t passwdlen,
+                                      const uint8_t *salt, size_t saltlen,
                                       uint64_t N, uint32_t r, uint32_t p,
-                                      uint8_t * buf, size_t buflen)
+                                      uint8_t *buf, size_t buflen)
 {
     escrypt_kdf_t   escrypt_kdf;
     escrypt_local_t local;
@@ -235,16 +234,14 @@ crypto_pwhash_scryptsalsa208sha256_ll(co
     if (escrypt_init_local(&local)) {
         return -1; /* LCOV_EXCL_LINE */
     }
-#if defined(HAVE_EMMINTRIN_H) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
+#if defined(HAVE_EMMINTRIN_H)
     escrypt_kdf =
         sodium_runtime_has_sse2() ? escrypt_kdf_sse : escrypt_kdf_nosse;
 #else
     escrypt_kdf = escrypt_kdf_nosse;
 #endif
-    retval = escrypt_kdf(&local,
-                         passwd, passwdlen, salt, saltlen,
-                         N, r, p, buf, buflen);
+    retval = escrypt_kdf(&local, passwd, passwdlen, salt, saltlen, N, r, p, buf,
+                         buflen);
     if (escrypt_free_local(&local)) {
         return -1; /* LCOV_EXCL_LINE */
     }
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/crypto_scrypt.h libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/crypto_scrypt.h
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/crypto_scrypt.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/crypto_scrypt.h	2017-03-06 11:13:57.000000000 +0100
@@ -31,13 +31,13 @@
 #define crypto_scrypt_H
 
 #include <limits.h>
-#include <stdint.h>
 #include <stddef.h>
+#include <stdint.h>
 
 #if SIZE_MAX > 0xffffffffULL
-# define ARCH_BITS 64
+#define ARCH_BITS 64
 #else
-# define ARCH_BITS 32
+#define ARCH_BITS 32
 #endif
 
 #define crypto_pwhash_scryptsalsa208sha256_STRPREFIXBYTES 14
@@ -47,10 +47,10 @@
 #define crypto_pwhash_scryptsalsa208sha256_STRHASHBYTES 32
 #define crypto_pwhash_scryptsalsa208sha256_STRHASHBYTES_ENCODED 43
 
-#define BYTES2CHARS(bytes) ((((bytes) * 8) + 5) / 6)
+#define BYTES2CHARS(bytes) ((((bytes) *8) + 5) / 6)
 
 typedef struct {
-    void * base, * aligned;
+    void * base, *aligned;
     size_t size;
 } escrypt_region_t;
 
@@ -61,39 +61,34 @@ typedef union {
 
 typedef escrypt_region_t escrypt_local_t;
 
-extern int escrypt_init_local(escrypt_local_t * __local);
+extern int escrypt_init_local(escrypt_local_t *__local);
 
-extern int escrypt_free_local(escrypt_local_t * __local);
+extern int escrypt_free_local(escrypt_local_t *__local);
 
-extern void *alloc_region(escrypt_region_t * region, size_t size);
-extern int free_region(escrypt_region_t * region);
+extern void *alloc_region(escrypt_region_t *region, size_t size);
+extern int free_region(escrypt_region_t *region);
 
-typedef int (*escrypt_kdf_t)(escrypt_local_t * __local,
-                             const uint8_t * __passwd, size_t __passwdlen,
-                             const uint8_t * __salt, size_t __saltlen,
-                             uint64_t __N, uint32_t __r, uint32_t __p,
-                             uint8_t * __buf, size_t __buflen);
-
-extern int escrypt_kdf_nosse(escrypt_local_t * __local,
-    const uint8_t * __passwd, size_t __passwdlen,
-    const uint8_t * __salt, size_t __saltlen,
-    uint64_t __N, uint32_t __r, uint32_t __p,
-    uint8_t * __buf, size_t __buflen);
-
-extern int escrypt_kdf_sse(escrypt_local_t * __local,
-    const uint8_t * __passwd, size_t __passwdlen,
-    const uint8_t * __salt, size_t __saltlen,
-    uint64_t __N, uint32_t __r, uint32_t __p,
-    uint8_t * __buf, size_t __buflen);
-
-extern uint8_t * escrypt_r(escrypt_local_t * __local,
-    const uint8_t * __passwd, size_t __passwdlen,
-    const uint8_t * __setting,
-    uint8_t * __buf, size_t __buflen);
-
-extern uint8_t * escrypt_gensalt_r(
-    uint32_t __N_log2, uint32_t __r, uint32_t __p,
-    const uint8_t * __src, size_t __srclen,
-    uint8_t * __buf, size_t __buflen);
+typedef int (*escrypt_kdf_t)(escrypt_local_t *__local, const uint8_t *__passwd,
+                             size_t __passwdlen, const uint8_t *__salt,
+                             size_t __saltlen, uint64_t __N, uint32_t __r,
+                             uint32_t __p, uint8_t *__buf, size_t __buflen);
+
+extern int escrypt_kdf_nosse(escrypt_local_t *__local, const uint8_t *__passwd,
+                             size_t __passwdlen, const uint8_t *__salt,
+                             size_t __saltlen, uint64_t __N, uint32_t __r,
+                             uint32_t __p, uint8_t *__buf, size_t __buflen);
+
+extern int escrypt_kdf_sse(escrypt_local_t *__local, const uint8_t *__passwd,
+                           size_t __passwdlen, const uint8_t *__salt,
+                           size_t __saltlen, uint64_t __N, uint32_t __r,
+                           uint32_t __p, uint8_t *__buf, size_t __buflen);
+
+extern uint8_t *escrypt_r(escrypt_local_t *__local, const uint8_t *__passwd,
+                          size_t __passwdlen, const uint8_t *__setting,
+                          uint8_t *__buf, size_t __buflen);
+
+extern uint8_t *escrypt_gensalt_r(uint32_t __N_log2, uint32_t __r, uint32_t __p,
+                                  const uint8_t *__src, size_t __srclen,
+                                  uint8_t *__buf, size_t __buflen);
 
 #endif /* !_CRYPTO_SCRYPT_H_ */
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/nosse/pwhash_scryptsalsa208sha256_nosse.c libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/nosse/pwhash_scryptsalsa208sha256_nosse.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/nosse/pwhash_scryptsalsa208sha256_nosse.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/nosse/pwhash_scryptsalsa208sha256_nosse.c	2017-03-06 11:13:57.000000000 +0100
@@ -34,8 +34,8 @@
 #include <stdlib.h>
 #include <string.h>
 
-#include "../pbkdf2-sha256.h"
 #include "../crypto_scrypt.h"
+#include "../pbkdf2-sha256.h"
 #include "private/common.h"
 
 static inline void
@@ -43,12 +43,14 @@ blkcpy_64(escrypt_block_t *dest, const e
 {
     int i;
 
-#if (ARCH_BITS==32)
-    for (i = 0; i < 16; ++i)
+#if (ARCH_BITS == 32)
+    for (i = 0; i < 16; ++i) {
         dest->w[i] = src->w[i];
+    }
 #else
-    for (i = 0; i < 8; ++i)
+    for (i = 0; i < 8; ++i) {
         dest->d[i] = src->d[i];
+    }
 #endif
 }
 
@@ -57,12 +59,14 @@ blkxor_64(escrypt_block_t *dest, const e
 {
     int i;
 
-#if (ARCH_BITS==32)
-    for (i = 0; i < 16; ++i)
+#if (ARCH_BITS == 32)
+    for (i = 0; i < 16; ++i) {
         dest->w[i] ^= src->w[i];
+    }
 #else
-    for (i = 0; i < 8; ++i)
+    for (i = 0; i < 8; ++i) {
         dest->d[i] ^= src->d[i];
+    }
 #endif
 }
 
@@ -70,14 +74,17 @@ static inline void
 blkcpy(escrypt_block_t *dest, const escrypt_block_t *src, size_t len)
 {
     size_t i, L;
-#if (ARCH_BITS==32)
-    L = (len>>2);
-    for (i = 0; i < L; ++i)
+
+#if (ARCH_BITS == 32)
+    L = (len >> 2);
+    for (i = 0; i < L; ++i) {
         dest->w[i] = src->w[i];
+    }
 #else
-    L = (len>>3);
-    for (i = 0; i < L; ++i)
+    L = (len >> 3);
+    for (i = 0; i < L; ++i) {
         dest->d[i] = src->d[i];
+    }
 #endif
 }
 
@@ -85,14 +92,17 @@ static inline void
 blkxor(escrypt_block_t *dest, const escrypt_block_t *src, size_t len)
 {
     size_t i, L;
-#if (ARCH_BITS==32)
-    L = (len>>2);
-    for (i = 0; i < L; ++i)
+
+#if (ARCH_BITS == 32)
+    L = (len >> 2);
+    for (i = 0; i < L; ++i) {
         dest->w[i] ^= src->w[i];
+    }
 #else
-    L = (len>>3);
-    for (i = 0; i < L; ++i)
+    L = (len >> 3);
+    for (i = 0; i < L; ++i) {
         dest->d[i] ^= src->d[i];
+    }
 #endif
 }
 
@@ -104,37 +114,53 @@ static void
 salsa20_8(uint32_t B[16])
 {
     escrypt_block_t X;
-    uint32_t *x = X.w;
-    size_t i;
+    uint32_t *      x = X.w;
+    size_t          i;
 
-    blkcpy_64(&X, (escrypt_block_t*)B);
+    blkcpy_64(&X, (escrypt_block_t *) B);
     for (i = 0; i < 8; i += 2) {
-#define R(a,b) (((a) << (b)) | ((a) >> (32 - (b))))
+#define R(a, b) (((a) << (b)) | ((a) >> (32 - (b))))
         /* Operate on columns. */
-        x[ 4] ^= R(x[ 0]+x[12], 7);  x[ 8] ^= R(x[ 4]+x[ 0], 9);
-        x[12] ^= R(x[ 8]+x[ 4],13);  x[ 0] ^= R(x[12]+x[ 8],18);
-
-        x[ 9] ^= R(x[ 5]+x[ 1], 7);  x[13] ^= R(x[ 9]+x[ 5], 9);
-        x[ 1] ^= R(x[13]+x[ 9],13);  x[ 5] ^= R(x[ 1]+x[13],18);
-
-        x[14] ^= R(x[10]+x[ 6], 7);  x[ 2] ^= R(x[14]+x[10], 9);
-        x[ 6] ^= R(x[ 2]+x[14],13);  x[10] ^= R(x[ 6]+x[ 2],18);
-
-        x[ 3] ^= R(x[15]+x[11], 7);  x[ 7] ^= R(x[ 3]+x[15], 9);
-        x[11] ^= R(x[ 7]+x[ 3],13);  x[15] ^= R(x[11]+x[ 7],18);
+        x[4] ^= R(x[0] + x[12], 7);
+        x[8] ^= R(x[4] + x[0], 9);
+        x[12] ^= R(x[8] + x[4], 13);
+        x[0] ^= R(x[12] + x[8], 18);
+
+        x[9] ^= R(x[5] + x[1], 7);
+        x[13] ^= R(x[9] + x[5], 9);
+        x[1] ^= R(x[13] + x[9], 13);
+        x[5] ^= R(x[1] + x[13], 18);
+
+        x[14] ^= R(x[10] + x[6], 7);
+        x[2] ^= R(x[14] + x[10], 9);
+        x[6] ^= R(x[2] + x[14], 13);
+        x[10] ^= R(x[6] + x[2], 18);
+
+        x[3] ^= R(x[15] + x[11], 7);
+        x[7] ^= R(x[3] + x[15], 9);
+        x[11] ^= R(x[7] + x[3], 13);
+        x[15] ^= R(x[11] + x[7], 18);
 
         /* Operate on rows. */
-        x[ 1] ^= R(x[ 0]+x[ 3], 7);  x[ 2] ^= R(x[ 1]+x[ 0], 9);
-        x[ 3] ^= R(x[ 2]+x[ 1],13);  x[ 0] ^= R(x[ 3]+x[ 2],18);
-
-        x[ 6] ^= R(x[ 5]+x[ 4], 7);  x[ 7] ^= R(x[ 6]+x[ 5], 9);
-        x[ 4] ^= R(x[ 7]+x[ 6],13);  x[ 5] ^= R(x[ 4]+x[ 7],18);
-
-        x[11] ^= R(x[10]+x[ 9], 7);  x[ 8] ^= R(x[11]+x[10], 9);
-        x[ 9] ^= R(x[ 8]+x[11],13);  x[10] ^= R(x[ 9]+x[ 8],18);
-
-        x[12] ^= R(x[15]+x[14], 7);  x[13] ^= R(x[12]+x[15], 9);
-        x[14] ^= R(x[13]+x[12],13);  x[15] ^= R(x[14]+x[13],18);
+        x[1] ^= R(x[0] + x[3], 7);
+        x[2] ^= R(x[1] + x[0], 9);
+        x[3] ^= R(x[2] + x[1], 13);
+        x[0] ^= R(x[3] + x[2], 18);
+
+        x[6] ^= R(x[5] + x[4], 7);
+        x[7] ^= R(x[6] + x[5], 9);
+        x[4] ^= R(x[7] + x[6], 13);
+        x[5] ^= R(x[4] + x[7], 18);
+
+        x[11] ^= R(x[10] + x[9], 7);
+        x[8] ^= R(x[11] + x[10], 9);
+        x[9] ^= R(x[8] + x[11], 13);
+        x[10] ^= R(x[9] + x[8], 18);
+
+        x[12] ^= R(x[15] + x[14], 7);
+        x[13] ^= R(x[12] + x[15], 9);
+        x[14] ^= R(x[13] + x[12], 13);
+        x[15] ^= R(x[14] + x[13], 18);
 #undef R
     }
     for (i = 0; i < 16; i++)
@@ -148,30 +174,32 @@ salsa20_8(uint32_t B[16])
  * temporary space X must be 64 bytes.
  */
 static void
-blockmix_salsa8(const uint32_t * Bin, uint32_t * Bout, uint32_t * X, size_t r)
+blockmix_salsa8(const uint32_t *Bin, uint32_t *Bout, uint32_t *X, size_t r)
 {
     size_t i;
 
     /* 1: X <-- B_{2r - 1} */
-    blkcpy_64((escrypt_block_t*)X, (escrypt_block_t*)&Bin[(2 * r - 1) * 16]);
+    blkcpy_64((escrypt_block_t *) X,
+              (escrypt_block_t *) &Bin[(2 * r - 1) * 16]);
 
     /* 2: for i = 0 to 2r - 1 do */
     for (i = 0; i < 2 * r; i += 2) {
         /* 3: X <-- H(X \xor B_i) */
-        blkxor_64((escrypt_block_t*)X, (escrypt_block_t*)&Bin[i * 16]);
+        blkxor_64((escrypt_block_t *) X, (escrypt_block_t *) &Bin[i * 16]);
         salsa20_8(X);
 
         /* 4: Y_i <-- X */
         /* 6: B' <-- (Y_0, Y_2 ... Y_{2r-2}, Y_1, Y_3 ... Y_{2r-1}) */
-        blkcpy_64((escrypt_block_t*)&Bout[i * 8], (escrypt_block_t*)X);
+        blkcpy_64((escrypt_block_t *) &Bout[i * 8], (escrypt_block_t *) X);
 
         /* 3: X <-- H(X \xor B_i) */
-        blkxor_64((escrypt_block_t*)X, (escrypt_block_t*)&Bin[i * 16 + 16]);
+        blkxor_64((escrypt_block_t *) X, (escrypt_block_t *) &Bin[i * 16 + 16]);
         salsa20_8(X);
 
         /* 4: Y_i <-- X */
         /* 6: B' <-- (Y_0, Y_2 ... Y_{2r-2}, Y_1, Y_3 ... Y_{2r-1}) */
-        blkcpy_64((escrypt_block_t*)&Bout[i * 8 + r * 16], (escrypt_block_t*)X);
+        blkcpy_64((escrypt_block_t *) &Bout[i * 8 + r * 16],
+                  (escrypt_block_t *) X);
     }
 }
 
@@ -180,9 +208,9 @@ blockmix_salsa8(const uint32_t * Bin, ui
  * Return the result of parsing B_{2r-1} as a little-endian integer.
  */
 static inline uint64_t
-integerify(const void * B, size_t r)
+integerify(const void *B, size_t r)
 {
-    const uint32_t * X = (const uint32_t *)((uintptr_t)(B) + (2 * r - 1) * 64);
+    const uint32_t *X = (const uint32_t *) ((uintptr_t)(B) + (2 * r - 1) * 64);
 
     return (((uint64_t)(X[1]) << 32) + X[0]);
 }
@@ -196,29 +224,31 @@ integerify(const void * B, size_t r)
  * multiple of 64 bytes.
  */
 static void
-smix(uint8_t * B, size_t r, uint64_t N, uint32_t * V, uint32_t * XY)
+smix(uint8_t *B, size_t r, uint64_t N, uint32_t *V, uint32_t *XY)
 {
-    uint32_t * X = XY;
-    uint32_t * Y = &XY[32 * r];
-    uint32_t * Z = &XY[64 * r];
-    uint64_t i;
-    uint64_t j;
-    size_t k;
+    uint32_t *X = XY;
+    uint32_t *Y = &XY[32 * r];
+    uint32_t *Z = &XY[64 * r];
+    uint64_t  i;
+    uint64_t  j;
+    size_t    k;
 
     /* 1: X <-- B */
-    for (k = 0; k < 32 * r; k++)
+    for (k = 0; k < 32 * r; k++) {
         X[k] = LOAD32_LE(&B[4 * k]);
-
+    }
     /* 2: for i = 0 to N - 1 do */
     for (i = 0; i < N; i += 2) {
         /* 3: V_i <-- X */
-        blkcpy((escrypt_block_t*)&V[i * (32 * r)], (escrypt_block_t*)X, 128 * r);
+        blkcpy((escrypt_block_t *) &V[i * (32 * r)], (escrypt_block_t *) X,
+               128 * r);
 
         /* 4: X <-- H(X) */
         blockmix_salsa8(X, Y, Z, r);
 
         /* 3: V_i <-- X */
-        blkcpy((escrypt_block_t*)&V[(i + 1) * (32 * r)], (escrypt_block_t*)Y, 128 * r);
+        blkcpy((escrypt_block_t *) &V[(i + 1) * (32 * r)],
+               (escrypt_block_t *) Y, 128 * r);
 
         /* 4: X <-- H(X) */
         blockmix_salsa8(Y, X, Z, r);
@@ -230,19 +260,22 @@ smix(uint8_t * B, size_t r, uint64_t N,
         j = integerify(X, r) & (N - 1);
 
         /* 8: X <-- H(X \xor V_j) */
-        blkxor((escrypt_block_t*)X, (escrypt_block_t*)&V[j * (32 * r)], 128 * r);
+        blkxor((escrypt_block_t *) X, (escrypt_block_t *) &V[j * (32 * r)],
+               128 * r);
         blockmix_salsa8(X, Y, Z, r);
 
         /* 7: j <-- Integerify(X) mod N */
         j = integerify(Y, r) & (N - 1);
 
         /* 8: X <-- H(X \xor V_j) */
-        blkxor((escrypt_block_t*)Y, (escrypt_block_t*)&V[j * (32 * r)], 128 * r);
+        blkxor((escrypt_block_t *) Y, (escrypt_block_t *) &V[j * (32 * r)],
+               128 * r);
         blockmix_salsa8(Y, X, Z, r);
     }
     /* 10: B' <-- X */
-    for (k = 0; k < 32 * r; k++)
+    for (k = 0; k < 32 * r; k++) {
         STORE32_LE(&B[4 * k], X[k]);
+    }
 }
 
 /**
@@ -256,19 +289,18 @@ smix(uint8_t * B, size_t r, uint64_t N,
  * Return 0 on success; or -1 on error.
  */
 int
-escrypt_kdf_nosse(escrypt_local_t * local,
-    const uint8_t * passwd, size_t passwdlen,
-    const uint8_t * salt, size_t saltlen,
-    uint64_t N, uint32_t _r, uint32_t _p,
-    uint8_t * buf, size_t buflen)
+escrypt_kdf_nosse(escrypt_local_t *local, const uint8_t *passwd,
+                  size_t passwdlen, const uint8_t *salt, size_t saltlen,
+                  uint64_t N, uint32_t _r, uint32_t _p, uint8_t *buf,
+                  size_t buflen)
 {
-    size_t B_size, V_size, XY_size, need;
+    size_t    B_size, V_size, XY_size, need;
     uint8_t * B;
-    uint32_t * V, * XY;
-    size_t r = _r, p = _p;
-    uint32_t i;
+    uint32_t *V, *XY;
+    size_t    r = _r, p = _p;
+    uint32_t  i;
 
-    /* Sanity-check parameters. */
+/* Sanity-check parameters. */
 #if SIZE_MAX > UINT32_MAX
     if (buflen > (((uint64_t)(1) << 32) - 1) * 32) {
         errno = EFBIG;
@@ -301,28 +333,30 @@ escrypt_kdf_nosse(escrypt_local_t * loca
     }
 
     /* Allocate memory. */
-    B_size = (size_t)128 * r * p;
-    V_size = (size_t)128 * r * N;
-    need = B_size + V_size;
+    B_size = (size_t) 128 * r * p;
+    V_size = (size_t) 128 * r * N;
+    need   = B_size + V_size;
     if (need < V_size) {
         errno = ENOMEM;
         return -1;
     }
-    XY_size = (size_t)256 * r + 64;
+    XY_size = (size_t) 256 * r + 64;
     need += XY_size;
     if (need < XY_size) {
         errno = ENOMEM;
         return -1;
     }
     if (local->size < need) {
-        if (free_region(local))
+        if (free_region(local)) {
             return -1;
-        if (!alloc_region(local, need))
+        }
+        if (!alloc_region(local, need)) {
             return -1;
+        }
     }
-    B = (uint8_t *)local->aligned;
-    V = (uint32_t *)((uint8_t *)B + B_size);
-    XY = (uint32_t *)((uint8_t *)V + V_size);
+    B  = (uint8_t *) local->aligned;
+    V  = (uint32_t *) ((uint8_t *) B + B_size);
+    XY = (uint32_t *) ((uint8_t *) V + V_size);
 
     /* 1: (B_0 ... B_{p-1}) <-- PBKDF2(P, S, 1, p * MFLen) */
     PBKDF2_SHA256(passwd, passwdlen, salt, saltlen, 1, B, B_size);
@@ -330,7 +364,7 @@ escrypt_kdf_nosse(escrypt_local_t * loca
     /* 2: for i = 0 to p - 1 do */
     for (i = 0; i < p; i++) {
         /* 3: B_i <-- MF(B_i, N) */
-        smix(&B[(size_t)128 * i * r], r, N, V, XY);
+        smix(&B[(size_t) 128 * i * r], r, N, V, XY);
     }
 
     /* 5: DK <-- PBKDF2(P, B, 1, dkLen) */
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pbkdf2-sha256.c libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pbkdf2-sha256.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pbkdf2-sha256.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pbkdf2-sha256.c	2017-03-06 23:32:40.000000000 +0100
@@ -24,16 +24,17 @@
  * SUCH DAMAGE.
  */
 
-#include <stdlib.h>
-#include <sys/types.h>
-
+#include <limits.h>
 #include <stdint.h>
+#include <stdlib.h>
 #include <string.h>
 
+#include <sys/types.h>
+
 #include "crypto_auth_hmacsha256.h"
 #include "pbkdf2-sha256.h"
-#include "utils.h"
 #include "private/common.h"
+#include "utils.h"
 
 /**
  * PBKDF2_SHA256(passwd, passwdlen, salt, saltlen, c, buf, dkLen):
@@ -41,21 +42,23 @@
  * write the output to buf.  The value dkLen must be at most 32 * (2^32 - 1).
  */
 void
-PBKDF2_SHA256(const uint8_t * passwd, size_t passwdlen, const uint8_t * salt,
-              size_t saltlen, uint64_t c, uint8_t * buf, size_t dkLen)
+PBKDF2_SHA256(const uint8_t *passwd, size_t passwdlen, const uint8_t *salt,
+              size_t saltlen, uint64_t c, uint8_t *buf, size_t dkLen)
 {
     crypto_auth_hmacsha256_state PShctx, hctx;
-    size_t          i;
-    uint8_t         ivec[4];
-    uint8_t         U[32];
-    uint8_t         T[32];
-    uint64_t        j;
-    int             k;
-    size_t          clen;
+    size_t                       i;
+    uint8_t                      ivec[4];
+    uint8_t                      U[32];
+    uint8_t                      T[32];
+    uint64_t                     j;
+    int                          k;
+    size_t                       clen;
 
+#if SIZE_MAX > 0x1fffffffe0ULL
     if (dkLen > 0x1fffffffe0ULL) {
         abort();
     }
+#endif
     crypto_auth_hmacsha256_init(&PShctx, passwd, passwdlen);
     crypto_auth_hmacsha256_update(&PShctx, salt, saltlen);
 
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pbkdf2-sha256.h libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pbkdf2-sha256.h
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pbkdf2-sha256.h	2016-05-29 08:39:55.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pbkdf2-sha256.h	2017-03-06 23:32:40.000000000 +0100
@@ -28,10 +28,10 @@
 #ifndef pbkdf2_sha256_H
 #define pbkdf2_sha256_H
 
-#include <sys/types.h>
-
 #include <stdint.h>
 
+#include <sys/types.h>
+
 #include "crypto_auth_hmacsha256.h"
 
 /**
@@ -39,7 +39,7 @@
  * Compute PBKDF2(passwd, salt, c, dkLen) using HMAC-SHA256 as the PRF, and
  * write the output to buf.  The value dkLen must be at most 32 * (2^32 - 1).
  */
-void PBKDF2_SHA256(const uint8_t *, size_t, const uint8_t *, size_t,
-                   uint64_t, uint8_t *, size_t);
+void PBKDF2_SHA256(const uint8_t *, size_t, const uint8_t *, size_t, uint64_t,
+                   uint8_t *, size_t);
 
 #endif /* !_SHA256_H_ */
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pwhash_scryptsalsa208sha256.c libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pwhash_scryptsalsa208sha256.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pwhash_scryptsalsa208sha256.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/pwhash_scryptsalsa208sha256.c	2017-03-06 11:13:57.000000000 +0100
@@ -7,16 +7,17 @@
 
 #include "crypto_pwhash_scryptsalsa208sha256.h"
 #include "crypto_scrypt.h"
+#include "private/common.h"
 #include "randombytes.h"
 #include "utils.h"
 
-#define SETTING_SIZE(saltbytes) \
-    ((sizeof "$7$" - 1U) + \
-     (1U /* N_log2 */) + (5U /* r */) + (5U /* p */) + BYTES2CHARS(saltbytes))
+#define SETTING_SIZE(saltbytes)                                              \
+    ((sizeof "$7$" - 1U) + (1U /* N_log2 */) + (5U /* r */) + (5U /* p */) + \
+     BYTES2CHARS(saltbytes))
 
 static int
 pickparams(unsigned long long opslimit, const size_t memlimit,
-           uint32_t * const N_log2, uint32_t * const p, uint32_t * const r)
+           uint32_t *const N_log2, uint32_t *const p, uint32_t *const r)
 {
     unsigned long long maxN;
     unsigned long long maxrp;
@@ -26,7 +27,7 @@ pickparams(unsigned long long opslimit,
     }
     *r = 8;
     if (opslimit < memlimit / 32) {
-        *p = 1;
+        *p   = 1;
         maxN = opslimit / (*r * 4);
         for (*N_log2 = 1; *N_log2 < 63; *N_log2 += 1) {
             if ((uint64_t)(1) << *N_log2 > maxN / 2) {
@@ -36,22 +37,46 @@ pickparams(unsigned long long opslimit,
     } else {
         maxN = memlimit / ((size_t) *r * 128);
         for (*N_log2 = 1; *N_log2 < 63; *N_log2 += 1) {
-            if ((uint64_t) (1) << *N_log2 > maxN / 2) {
+            if ((uint64_t)(1) << *N_log2 > maxN / 2) {
                 break;
             }
         }
-        maxrp = (opslimit / 4) / ((uint64_t) (1) << *N_log2);
+        maxrp = (opslimit / 4) / ((uint64_t)(1) << *N_log2);
         /* LCOV_EXCL_START */
         if (maxrp > 0x3fffffff) {
             maxrp = 0x3fffffff;
         }
         /* LCOV_EXCL_STOP */
-        *p = (uint32_t) (maxrp) / *r;
+        *p = (uint32_t)(maxrp) / *r;
     }
     return 0;
 }
 
 size_t
+crypto_pwhash_scryptsalsa208sha256_bytes_min(void)
+{
+    return crypto_pwhash_scryptsalsa208sha256_BYTES_MIN;
+}
+
+size_t
+crypto_pwhash_scryptsalsa208sha256_bytes_max(void)
+{
+    return crypto_pwhash_scryptsalsa208sha256_BYTES_MAX;
+}
+
+size_t
+crypto_pwhash_scryptsalsa208sha256_passwd_min(void)
+{
+    return crypto_pwhash_scryptsalsa208sha256_PASSWD_MIN;
+}
+
+size_t
+crypto_pwhash_scryptsalsa208sha256_passwd_max(void)
+{
+    return crypto_pwhash_scryptsalsa208sha256_PASSWD_MAX;
+}
+
+size_t
 crypto_pwhash_scryptsalsa208sha256_saltbytes(void)
 {
     return crypto_pwhash_scryptsalsa208sha256_SALTBYTES;
@@ -70,6 +95,30 @@ crypto_pwhash_scryptsalsa208sha256_strpr
 }
 
 size_t
+crypto_pwhash_scryptsalsa208sha256_opslimit_min(void)
+{
+    return crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN;
+}
+
+size_t
+crypto_pwhash_scryptsalsa208sha256_opslimit_max(void)
+{
+    return crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX;
+}
+
+size_t
+crypto_pwhash_scryptsalsa208sha256_memlimit_min(void)
+{
+    return crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN;
+}
+
+size_t
+crypto_pwhash_scryptsalsa208sha256_memlimit_max(void)
+{
+    return crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX;
+}
+
+size_t
 crypto_pwhash_scryptsalsa208sha256_opslimit_interactive(void)
 {
     return crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE;
@@ -94,63 +143,62 @@ crypto_pwhash_scryptsalsa208sha256_memli
 }
 
 int
-crypto_pwhash_scryptsalsa208sha256(unsigned char * const out,
-                                   unsigned long long outlen,
-                                   const char * const passwd,
-                                   unsigned long long passwdlen,
-                                   const unsigned char * const salt,
-                                   unsigned long long opslimit,
-                                   size_t memlimit)
+crypto_pwhash_scryptsalsa208sha256(unsigned char *const       out,
+                                   unsigned long long         outlen,
+                                   const char *const          passwd,
+                                   unsigned long long         passwdlen,
+                                   const unsigned char *const salt,
+                                   unsigned long long opslimit, size_t memlimit)
 {
     uint32_t N_log2;
     uint32_t p;
     uint32_t r;
 
     memset(out, 0, outlen);
-    if (passwdlen > SIZE_MAX || outlen > SIZE_MAX) {
+    if (passwdlen > crypto_pwhash_scryptsalsa208sha256_PASSWD_MAX ||
+        outlen > crypto_pwhash_scryptsalsa208sha256_BYTES_MAX) {
         errno = EFBIG; /* LCOV_EXCL_LINE */
-        return -1; /* LCOV_EXCL_LINE */
+        return -1;     /* LCOV_EXCL_LINE */
     }
-    if (pickparams(opslimit, memlimit, &N_log2, &p, &r) != 0) {
+    if (outlen < crypto_pwhash_scryptsalsa208sha256_BYTES_MIN ||
+        pickparams(opslimit, memlimit, &N_log2, &p, &r) != 0) {
         errno = EINVAL; /* LCOV_EXCL_LINE */
-        return -1; /* LCOV_EXCL_LINE */
+        return -1;      /* LCOV_EXCL_LINE */
     }
-    return crypto_pwhash_scryptsalsa208sha256_ll((const uint8_t *) passwd,
-                                                 (size_t) passwdlen,
-                                                 (const uint8_t *) salt,
-                                                 crypto_pwhash_scryptsalsa208sha256_SALTBYTES,
-                                                 (uint64_t) (1) << N_log2, r, p,
-                                                 out, (size_t) outlen);
+    return crypto_pwhash_scryptsalsa208sha256_ll(
+        (const uint8_t *) passwd, (size_t) passwdlen, (const uint8_t *) salt,
+        crypto_pwhash_scryptsalsa208sha256_SALTBYTES, (uint64_t)(1) << N_log2,
+        r, p, out, (size_t) outlen);
 }
 
 int
-crypto_pwhash_scryptsalsa208sha256_str(char out[crypto_pwhash_scryptsalsa208sha256_STRBYTES],
-                                       const char * const passwd,
-                                       unsigned long long passwdlen,
-                                       unsigned long long opslimit,
-                                       size_t memlimit)
+crypto_pwhash_scryptsalsa208sha256_str(
+    char              out[crypto_pwhash_scryptsalsa208sha256_STRBYTES],
+    const char *const passwd, unsigned long long passwdlen,
+    unsigned long long opslimit, size_t memlimit)
 {
-    uint8_t         salt[crypto_pwhash_scryptsalsa208sha256_STRSALTBYTES];
-    char            setting[crypto_pwhash_scryptsalsa208sha256_STRSETTINGBYTES + 1U];
+    uint8_t salt[crypto_pwhash_scryptsalsa208sha256_STRSALTBYTES];
+    char    setting[crypto_pwhash_scryptsalsa208sha256_STRSETTINGBYTES + 1U];
     escrypt_local_t escrypt_local;
     uint32_t        N_log2;
     uint32_t        p;
     uint32_t        r;
 
     memset(out, 0, crypto_pwhash_scryptsalsa208sha256_STRBYTES);
-    if (passwdlen > SIZE_MAX) {
+    if (passwdlen > crypto_pwhash_scryptsalsa208sha256_PASSWD_MAX) {
         errno = EFBIG; /* LCOV_EXCL_LINE */
-        return -1; /* LCOV_EXCL_LINE */
+        return -1;     /* LCOV_EXCL_LINE */
     }
-    if (pickparams(opslimit, memlimit, &N_log2, &p, &r) != 0) {
+    if (passwdlen < crypto_pwhash_scryptsalsa208sha256_PASSWD_MIN ||
+        pickparams(opslimit, memlimit, &N_log2, &p, &r) != 0) {
         errno = EINVAL; /* LCOV_EXCL_LINE */
-        return -1; /* LCOV_EXCL_LINE */
+        return -1;      /* LCOV_EXCL_LINE */
     }
     randombytes_buf(salt, sizeof salt);
-    if (escrypt_gensalt_r(N_log2, r, p, salt, sizeof salt,
-                          (uint8_t *) setting, sizeof setting) == NULL) {
+    if (escrypt_gensalt_r(N_log2, r, p, salt, sizeof salt, (uint8_t *) setting,
+                          sizeof setting) == NULL) {
         errno = EINVAL; /* LCOV_EXCL_LINE */
-        return -1; /* LCOV_EXCL_LINE */
+        return -1;      /* LCOV_EXCL_LINE */
     }
     if (escrypt_init_local(&escrypt_local) != 0) {
         return -1; /* LCOV_EXCL_LINE */
@@ -166,21 +214,21 @@ crypto_pwhash_scryptsalsa208sha256_str(c
     }
     escrypt_free_local(&escrypt_local);
 
-    (void) sizeof
-        (int[SETTING_SIZE(crypto_pwhash_scryptsalsa208sha256_STRSALTBYTES)
-            == crypto_pwhash_scryptsalsa208sha256_STRSETTINGBYTES ? 1 : -1]);
-    (void) sizeof
-        (int[crypto_pwhash_scryptsalsa208sha256_STRSETTINGBYTES + 1U +
-             crypto_pwhash_scryptsalsa208sha256_STRHASHBYTES_ENCODED + 1U
-             == crypto_pwhash_scryptsalsa208sha256_STRBYTES ? 1 : -1]);
+    COMPILER_ASSERT(
+        SETTING_SIZE(crypto_pwhash_scryptsalsa208sha256_STRSALTBYTES) ==
+        crypto_pwhash_scryptsalsa208sha256_STRSETTINGBYTES);
+    COMPILER_ASSERT(
+        crypto_pwhash_scryptsalsa208sha256_STRSETTINGBYTES + 1U +
+            crypto_pwhash_scryptsalsa208sha256_STRHASHBYTES_ENCODED + 1U ==
+        crypto_pwhash_scryptsalsa208sha256_STRBYTES);
 
     return 0;
 }
 
 int
-crypto_pwhash_scryptsalsa208sha256_str_verify(const char str[crypto_pwhash_scryptsalsa208sha256_STRBYTES],
-                                              const char * const passwd,
-                                              unsigned long long passwdlen)
+crypto_pwhash_scryptsalsa208sha256_str_verify(
+    const char        str[crypto_pwhash_scryptsalsa208sha256_STRBYTES],
+    const char *const passwd, unsigned long long passwdlen)
 {
     char            wanted[crypto_pwhash_scryptsalsa208sha256_STRBYTES];
     escrypt_local_t escrypt_local;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/scrypt_platform.c libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/scrypt_platform.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/scrypt_platform.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/scrypt_platform.c	2017-03-06 11:13:57.000000000 +0100
@@ -19,7 +19,7 @@
  */
 
 #ifdef HAVE_SYS_MMAN_H
-# include <sys/mman.h>
+#include <sys/mman.h>
 #endif
 #include <errno.h>
 #include <stdlib.h>
@@ -28,26 +28,27 @@
 #include "runtime.h"
 
 #if !defined(MAP_ANON) && defined(MAP_ANONYMOUS)
-# define MAP_ANON MAP_ANONYMOUS
+#define MAP_ANON MAP_ANONYMOUS
 #endif
 
 void *
-alloc_region(escrypt_region_t * region, size_t size)
+alloc_region(escrypt_region_t *region, size_t size)
 {
-    uint8_t * base, * aligned;
+    uint8_t *base, *aligned;
 #if defined(MAP_ANON) && defined(HAVE_MMAP)
     if ((base = (uint8_t *) mmap(NULL, size, PROT_READ | PROT_WRITE,
 #ifdef MAP_NOCORE
-        MAP_ANON | MAP_PRIVATE | MAP_NOCORE,
+                                 MAP_ANON | MAP_PRIVATE | MAP_NOCORE,
 #else
-        MAP_ANON | MAP_PRIVATE,
+                                 MAP_ANON | MAP_PRIVATE,
 #endif
-        -1, 0)) == MAP_FAILED)
+                                 -1, 0)) == MAP_FAILED)
         base = NULL; /* LCOV_EXCL_LINE */
-    aligned = base;
+    aligned  = base;
 #elif defined(HAVE_POSIX_MEMALIGN)
-    if ((errno = posix_memalign((void **) &base, 64, size)) != 0)
+    if ((errno = posix_memalign((void **) &base, 64, size)) != 0) {
         base = NULL;
+    }
     aligned = base;
 #else
     base = aligned = NULL;
@@ -55,46 +56,50 @@ alloc_region(escrypt_region_t * region,
         errno = ENOMEM;
     else if ((base = (uint8_t *) malloc(size + 63)) != NULL) {
         aligned = base + 63;
-        aligned -= (uintptr_t)aligned & 63;
+        aligned -= (uintptr_t) aligned & 63;
     }
 #endif
-    region->base = base;
+    region->base    = base;
     region->aligned = aligned;
-    region->size = base ? size : 0;
+    region->size    = base ? size : 0;
+
     return aligned;
 }
 
 static inline void
-init_region(escrypt_region_t * region)
+init_region(escrypt_region_t *region)
 {
     region->base = region->aligned = NULL;
-    region->size = 0;
+    region->size                   = 0;
 }
 
 int
-free_region(escrypt_region_t * region)
+free_region(escrypt_region_t *region)
 {
     if (region->base) {
 #if defined(MAP_ANON) && defined(HAVE_MMAP)
-        if (munmap(region->base, region->size))
+        if (munmap(region->base, region->size)) {
             return -1; /* LCOV_EXCL_LINE */
+        }
 #else
         free(region->base);
 #endif
     }
     init_region(region);
+
     return 0;
 }
 
 int
-escrypt_init_local(escrypt_local_t * local)
+escrypt_init_local(escrypt_local_t *local)
 {
     init_region(local);
+
     return 0;
 }
 
 int
-escrypt_free_local(escrypt_local_t * local)
+escrypt_free_local(escrypt_local_t *local)
 {
     return free_region(local);
 }
diff -urpN libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/sse/pwhash_scryptsalsa208sha256_sse.c libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/sse/pwhash_scryptsalsa208sha256_sse.c
--- libsodium-1.0.11/src/libsodium/crypto_pwhash/scryptsalsa208sha256/sse/pwhash_scryptsalsa208sha256_sse.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_pwhash/scryptsalsa208sha256/sse/pwhash_scryptsalsa208sha256_sse.c	2017-03-06 23:32:40.000000000 +0100
@@ -28,57 +28,59 @@
  * online backup system.
  */
 
-#if defined(HAVE_EMMINTRIN_H) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
-#ifdef __GNUC__
-# pragma GCC target("sse2")
-#endif
-#include <emmintrin.h>
-#if defined(__XOP__) && defined(DISABLED)
-# include <x86intrin.h>
-#endif
-
 #include <errno.h>
 #include <limits.h>
 #include <stdint.h>
 #include <stdlib.h>
 #include <string.h>
 
-#include "../pbkdf2-sha256.h"
-#include "../crypto_scrypt.h"
 #include "private/common.h"
+#include "private/sse2_64_32.h"
+
+#ifdef HAVE_EMMINTRIN_H
+
+# ifdef __GNUC__
+#  pragma GCC target("sse2")
+# endif
+# include <emmintrin.h>
+# if defined(__XOP__) && defined(DISABLED)
+#  include <x86intrin.h>
+# endif
 
-#if defined(__XOP__) && defined(DISABLED)
-#define ARX(out, in1, in2, s) \
+# include "../crypto_scrypt.h"
+# include "../pbkdf2-sha256.h"
+
+# if defined(__XOP__) && defined(DISABLED)
+#  define ARX(out, in1, in2, s) \
     out = _mm_xor_si128(out, _mm_roti_epi32(_mm_add_epi32(in1, in2), s));
-#else
-#define ARX(out, in1, in2, s) \
-    { \
-        __m128i T = _mm_add_epi32(in1, in2); \
-        out = _mm_xor_si128(out, _mm_slli_epi32(T, s)); \
-        out = _mm_xor_si128(out, _mm_srli_epi32(T, 32-s)); \
-    }
-#endif
-
-#define SALSA20_2ROUNDS \
-    /* Operate on "columns". */ \
-    ARX(X1, X0, X3, 7) \
-    ARX(X2, X1, X0, 9) \
-    ARX(X3, X2, X1, 13) \
-    ARX(X0, X3, X2, 18) \
-\
-    /* Rearrange data. */ \
+# else
+#  define ARX(out, in1, in2, s)                                    \
+    {                                                              \
+        __m128i T = _mm_add_epi32(in1, in2);                       \
+        out       = _mm_xor_si128(out, _mm_slli_epi32(T, s));      \
+        out       = _mm_xor_si128(out, _mm_srli_epi32(T, 32 - s)); \
+    }
+# endif
+
+# define SALSA20_2ROUNDS              \
+    /* Operate on "columns". */       \
+    ARX(X1, X0, X3, 7)                \
+    ARX(X2, X1, X0, 9)                \
+    ARX(X3, X2, X1, 13)               \
+    ARX(X0, X3, X2, 18)               \
+                                      \
+    /* Rearrange data. */             \
     X1 = _mm_shuffle_epi32(X1, 0x93); \
     X2 = _mm_shuffle_epi32(X2, 0x4E); \
     X3 = _mm_shuffle_epi32(X3, 0x39); \
-\
-    /* Operate on "rows". */ \
-    ARX(X3, X0, X1, 7) \
-    ARX(X2, X3, X0, 9) \
-    ARX(X1, X2, X3, 13) \
-    ARX(X0, X1, X2, 18) \
-\
-    /* Rearrange data. */ \
+                                      \
+    /* Operate on "rows". */          \
+    ARX(X3, X0, X1, 7)                \
+    ARX(X2, X3, X0, 9)                \
+    ARX(X1, X2, X3, 13)               \
+    ARX(X0, X1, X2, 18)               \
+                                      \
+    /* Rearrange data. */             \
     X1 = _mm_shuffle_epi32(X1, 0x39); \
     X2 = _mm_shuffle_epi32(X2, 0x4E); \
     X3 = _mm_shuffle_epi32(X3, 0x93);
@@ -86,20 +88,19 @@
 /**
  * Apply the salsa20/8 core to the block provided in (X0 ... X3) ^ (Z0 ... Z3).
  */
-#define SALSA20_8_XOR(in, out) \
-    { \
-        __m128i Y0 = X0 = _mm_xor_si128(X0, (in)[0]); \
-        __m128i Y1 = X1 = _mm_xor_si128(X1, (in)[1]); \
-        __m128i Y2 = X2 = _mm_xor_si128(X2, (in)[2]); \
-        __m128i Y3 = X3 = _mm_xor_si128(X3, (in)[3]); \
-        SALSA20_2ROUNDS \
-        SALSA20_2ROUNDS \
-        SALSA20_2ROUNDS \
-        SALSA20_2ROUNDS \
-        (out)[0] = X0 = _mm_add_epi32(X0, Y0); \
-        (out)[1] = X1 = _mm_add_epi32(X1, Y1); \
-        (out)[2] = X2 = _mm_add_epi32(X2, Y2); \
-        (out)[3] = X3 = _mm_add_epi32(X3, Y3); \
+# define SALSA20_8_XOR(in, out)                               \
+    {                                                         \
+        __m128i Y0 = X0 = _mm_xor_si128(X0, (in)[0]);         \
+        __m128i Y1 = X1 = _mm_xor_si128(X1, (in)[1]);         \
+        __m128i Y2 = X2 = _mm_xor_si128(X2, (in)[2]);         \
+        __m128i Y3 = X3 = _mm_xor_si128(X3, (in)[3]);         \
+        SALSA20_2ROUNDS                                       \
+        SALSA20_2ROUNDS                                       \
+        SALSA20_2ROUNDS                                       \
+        SALSA20_2ROUNDS(out)[0] = X0 = _mm_add_epi32(X0, Y0); \
+        (out)[1] = X1 = _mm_add_epi32(X1, Y1);                \
+        (out)[2] = X2 = _mm_add_epi32(X2, Y2);                \
+        (out)[3] = X3 = _mm_add_epi32(X3, Y3);                \
     }
 
 /**
@@ -108,10 +109,10 @@
  * bytes in length; the output Bout must also be the same size.
  */
 static inline void
-blockmix_salsa8(const __m128i * Bin, __m128i * Bout, size_t r)
+blockmix_salsa8(const __m128i *Bin, __m128i *Bout, size_t r)
 {
     __m128i X0, X1, X2, X3;
-    size_t i;
+    size_t  i;
 
     /* 1: X <-- B_{2r - 1} */
     X0 = Bin[8 * r - 4];
@@ -146,24 +147,24 @@ blockmix_salsa8(const __m128i * Bin, __m
     SALSA20_8_XOR(&Bin[i * 8 + 4], &Bout[(r + i) * 4 + 4])
 }
 
-#define XOR4(in) \
+# define XOR4(in)                    \
     X0 = _mm_xor_si128(X0, (in)[0]); \
     X1 = _mm_xor_si128(X1, (in)[1]); \
     X2 = _mm_xor_si128(X2, (in)[2]); \
     X3 = _mm_xor_si128(X3, (in)[3]);
 
-#define XOR4_2(in1, in2) \
+# define XOR4_2(in1, in2)                   \
     X0 = _mm_xor_si128((in1)[0], (in2)[0]); \
     X1 = _mm_xor_si128((in1)[1], (in2)[1]); \
     X2 = _mm_xor_si128((in1)[2], (in2)[2]); \
     X3 = _mm_xor_si128((in1)[3], (in2)[3]);
 
 static inline uint32_t
-blockmix_salsa8_xor(const __m128i * Bin1, const __m128i * Bin2, __m128i * Bout,
-    size_t r)
+blockmix_salsa8_xor(const __m128i *Bin1, const __m128i *Bin2, __m128i *Bout,
+                    size_t r)
 {
     __m128i X0, X1, X2, X3;
-    size_t i;
+    size_t  i;
 
     /* 1: X <-- B_{2r - 1} */
     XOR4_2(&Bin1[8 * r - 4], &Bin2[8 * r - 4])
@@ -201,11 +202,11 @@ blockmix_salsa8_xor(const __m128i * Bin1
     return _mm_cvtsi128_si32(X0);
 }
 
-#undef ARX
-#undef SALSA20_2ROUNDS
-#undef SALSA20_8_XOR
-#undef XOR4
-#undef XOR4_2
+# undef ARX
+# undef SALSA20_2ROUNDS
+# undef SALSA20_8_XOR
+# undef XOR4
+# undef XOR4_2
 
 /**
  * integerify(B, r):
@@ -213,9 +214,9 @@ blockmix_salsa8_xor(const __m128i * Bin1
  * Note that B's layout is permuted compared to the generic implementation.
  */
 static inline uint32_t
-integerify(const void * B, size_t r)
+integerify(const void *B, size_t r)
 {
-    return *(const uint32_t *)((uintptr_t)(B) + (2 * r - 1) * 64);
+    return *(const uint32_t *) ((uintptr_t)(B) + (2 * r - 1) * 64);
 }
 
 /**
@@ -227,20 +228,19 @@ integerify(const void * B, size_t r)
  * multiple of 64 bytes.
  */
 static void
-smix(uint8_t * B, size_t r, uint32_t N, void * V, void * XY)
+smix(uint8_t *B, size_t r, uint32_t N, void *V, void *XY)
 {
-    size_t s = 128 * r;
-    __m128i * X = (__m128i *) V, * Y;
-    uint32_t * X32 = (uint32_t *) V;
-    uint32_t i, j;
-    size_t k;
+    size_t    s   = 128 * r;
+    __m128i * X   = (__m128i *) V, *Y;
+    uint32_t *X32 = (uint32_t *) V;
+    uint32_t  i, j;
+    size_t    k;
 
     /* 1: X <-- B */
     /* 3: V_i <-- X */
     for (k = 0; k < 2 * r; k++) {
         for (i = 0; i < 16; i++) {
-            X32[k * 16 + i] =
-                LOAD32_LE(&B[(k * 16 + (i * 5 % 16)) * 4]);
+            X32[k * 16 + i] = LOAD32_LE(&B[(k * 16 + (i * 5 % 16)) * 4]);
         }
     }
 
@@ -248,18 +248,18 @@ smix(uint8_t * B, size_t r, uint32_t N,
     for (i = 1; i < N - 1; i += 2) {
         /* 4: X <-- H(X) */
         /* 3: V_i <-- X */
-        Y = (__m128i *)((uintptr_t)(V) + i * s);
+        Y = (__m128i *) ((uintptr_t)(V) + i * s);
         blockmix_salsa8(X, Y, r);
 
         /* 4: X <-- H(X) */
         /* 3: V_i <-- X */
-        X = (__m128i *)((uintptr_t)(V) + (i + 1) * s);
+        X = (__m128i *) ((uintptr_t)(V) + (i + 1) * s);
         blockmix_salsa8(Y, X, r);
     }
 
     /* 4: X <-- H(X) */
     /* 3: V_i <-- X */
-    Y = (__m128i *)((uintptr_t)(V) + i * s);
+    Y = (__m128i *) ((uintptr_t)(V) + i * s);
     blockmix_salsa8(X, Y, r);
 
     /* 4: X <-- H(X) */
@@ -268,19 +268,19 @@ smix(uint8_t * B, size_t r, uint32_t N,
     blockmix_salsa8(Y, X, r);
 
     X32 = (uint32_t *) XY;
-    Y = (__m128i *)((uintptr_t)(XY) + s);
+    Y   = (__m128i *) ((uintptr_t)(XY) + s);
 
     /* 7: j <-- Integerify(X) mod N */
     j = integerify(X, r) & (N - 1);
 
     /* 6: for i = 0 to N - 1 do */
     for (i = 0; i < N; i += 2) {
-        __m128i * V_j = (__m128i *)((uintptr_t)(V) + j * s);
+        __m128i *V_j = (__m128i *) ((uintptr_t)(V) + j * s);
 
         /* 8: X <-- H(X \xor V_j) */
         /* 7: j <-- Integerify(X) mod N */
-        j = blockmix_salsa8_xor(X, V_j, Y, r) & (N - 1);
-        V_j = (__m128i *)((uintptr_t)(V) + j * s);
+        j   = blockmix_salsa8_xor(X, V_j, Y, r) & (N - 1);
+        V_j = (__m128i *) ((uintptr_t)(V) + j * s);
 
         /* 8: X <-- H(X \xor V_j) */
         /* 7: j <-- Integerify(X) mod N */
@@ -306,25 +306,23 @@ smix(uint8_t * B, size_t r, uint32_t N,
  * Return 0 on success; or -1 on error.
  */
 int
-escrypt_kdf_sse(escrypt_local_t * local,
-    const uint8_t * passwd, size_t passwdlen,
-    const uint8_t * salt, size_t saltlen,
-    uint64_t N, uint32_t _r, uint32_t _p,
-    uint8_t * buf, size_t buflen)
+escrypt_kdf_sse(escrypt_local_t *local, const uint8_t *passwd, size_t passwdlen,
+                const uint8_t *salt, size_t saltlen, uint64_t N, uint32_t _r,
+                uint32_t _p, uint8_t *buf, size_t buflen)
 {
-    size_t B_size, V_size, XY_size, need;
+    size_t    B_size, V_size, XY_size, need;
     uint8_t * B;
-    uint32_t * V, * XY;
-    size_t r = _r, p = _p;
-    uint32_t i;
+    uint32_t *V, *XY;
+    size_t    r = _r, p = _p;
+    uint32_t  i;
 
-    /* Sanity-check parameters. */
-#if SIZE_MAX > UINT32_MAX
+/* Sanity-check parameters. */
+# if SIZE_MAX > UINT32_MAX
     if (buflen > (((uint64_t)(1) << 32) - 1) * 32) {
         errno = EFBIG;
         return -1;
     }
-#endif
+# endif
     if ((uint64_t)(r) * (uint64_t)(p) >= ((uint64_t) 1 << 30)) {
         errno = EFBIG;
         return -1;
@@ -342,37 +340,39 @@ escrypt_kdf_sse(escrypt_local_t * local,
         return -1;
     }
     if ((r > SIZE_MAX / 128 / p) ||
-#if SIZE_MAX / 256 <= UINT32_MAX
+# if SIZE_MAX / 256 <= UINT32_MAX
         (r > SIZE_MAX / 256) ||
-#endif
+# endif
         (N > SIZE_MAX / 128 / r)) {
         errno = ENOMEM;
         return -1;
     }
 
     /* Allocate memory. */
-    B_size = (size_t)128 * r * p;
-    V_size = (size_t)128 * r * N;
-    need = B_size + V_size;
+    B_size = (size_t) 128 * r * p;
+    V_size = (size_t) 128 * r * N;
+    need   = B_size + V_size;
     if (need < V_size) {
         errno = ENOMEM;
         return -1;
     }
-    XY_size = (size_t)256 * r + 64;
+    XY_size = (size_t) 256 * r + 64;
     need += XY_size;
     if (need < XY_size) {
         errno = ENOMEM;
         return -1;
     }
     if (local->size < need) {
-        if (free_region(local))
+        if (free_region(local)) {
             return -1; /* LCOV_EXCL_LINE */
-        if (!alloc_region(local, need))
+        }
+        if (!alloc_region(local, need)) {
             return -1; /* LCOV_EXCL_LINE */
+        }
     }
-    B = (uint8_t *)local->aligned;
-    V = (uint32_t *)((uint8_t *)B + B_size);
-    XY = (uint32_t *)((uint8_t *)V + V_size);
+    B  = (uint8_t *) local->aligned;
+    V  = (uint32_t *) ((uint8_t *) B + B_size);
+    XY = (uint32_t *) ((uint8_t *) V + V_size);
 
     /* 1: (B_0 ... B_{p-1}) <-- PBKDF2(P, S, 1, p * MFLen) */
     PBKDF2_SHA256(passwd, passwdlen, salt, saltlen, 1, B, B_size);
@@ -380,7 +380,7 @@ escrypt_kdf_sse(escrypt_local_t * local,
     /* 2: for i = 0 to p - 1 do */
     for (i = 0; i < p; i++) {
         /* 3: B_i <-- MF(B_i, N) */
-        smix(&B[(size_t)128 * i * r], r, (uint32_t) N, V, XY);
+        smix(&B[(size_t) 128 * i * r], r, (uint32_t) N, V, XY);
     }
 
     /* 5: DK <-- PBKDF2(P, B, 1, dkLen) */
diff -urpN libsodium-1.0.11/src/libsodium/crypto_scalarmult/curve25519/donna_c64/curve25519_donna_c64.c libsodium-1.0.12/src/libsodium/crypto_scalarmult/curve25519/donna_c64/curve25519_donna_c64.c
--- libsodium-1.0.11/src/libsodium/crypto_scalarmult/curve25519/donna_c64/curve25519_donna_c64.c	2016-07-09 14:17:46.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_scalarmult/curve25519/donna_c64/curve25519_donna_c64.c	2017-03-06 11:13:57.000000000 +0100
@@ -22,29 +22,30 @@
  * from the sample implementation.
  */
 
-#include <string.h>
 #include <stdint.h>
+#include <string.h>
 
 #ifdef HAVE_TI_MODE
 
-#include "utils.h"
-#include "curve25519_donna_c64.h"
 #include "../scalarmult_curve25519.h"
+#include "curve25519_donna_c64.h"
+#include "utils.h"
 
 typedef uint8_t u8;
 typedef uint64_t limb;
 typedef limb felem[5];
 /* Special gcc mode for 128-bit integers */
-typedef unsigned uint128_t __attribute__ ((mode(TI)));
+typedef unsigned uint128_t __attribute__((mode(TI)));
 
 /* Sum two numbers: output += in */
 static inline void
-fsum(limb *output, const limb *in) {
-  output[0] += in[0];
-  output[1] += in[1];
-  output[2] += in[2];
-  output[3] += in[3];
-  output[4] += in[4];
+fsum(limb *output, const limb *in)
+{
+    output[0] += in[0];
+    output[1] += in[1];
+    output[2] += in[2];
+    output[3] += in[3];
+    output[4] += in[4];
 }
 
 /* Find the difference of two numbers: output = in - output
@@ -54,39 +55,41 @@ fsum(limb *output, const limb *in) {
  * On return, out[i] < 2**55
  */
 static inline void
-fdifference_backwards(felem out, const felem in) {
-  /* 152 is 19 << 3 */
-  static const limb two54m152 = (((limb)1) << 54) - 152;
-  static const limb two54m8 = (((limb)1) << 54) - 8;
-
-  out[0] = in[0] + two54m152 - out[0];
-  out[1] = in[1] + two54m8 - out[1];
-  out[2] = in[2] + two54m8 - out[2];
-  out[3] = in[3] + two54m8 - out[3];
-  out[4] = in[4] + two54m8 - out[4];
+fdifference_backwards(felem out, const felem in)
+{
+    /* 152 is 19 << 3 */
+    static const limb two54m152 = (((limb)1) << 54) - 152;
+    static const limb two54m8 = (((limb)1) << 54) - 8;
+
+    out[0] = in[0] + two54m152 - out[0];
+    out[1] = in[1] + two54m8 - out[1];
+    out[2] = in[2] + two54m8 - out[2];
+    out[3] = in[3] + two54m8 - out[3];
+    out[4] = in[4] + two54m8 - out[4];
 }
 
 /* Multiply a number by a scalar: output = in * scalar */
 static inline void
-fscalar_product(felem output, const felem in, const limb scalar) {
-  uint128_t a;
+fscalar_product(felem output, const felem in, const limb scalar)
+{
+    uint128_t a;
 
-  a = ((uint128_t) in[0]) * scalar;
-  output[0] = ((limb)a) & 0x7ffffffffffff;
+    a = in[0] * (uint128_t)scalar;
+    output[0] = ((limb)a) & 0x7ffffffffffff;
 
-  a = ((uint128_t) in[1]) * scalar + ((limb) (a >> 51));
-  output[1] = ((limb)a) & 0x7ffffffffffff;
+    a = in[1] * (uint128_t)scalar + ((limb)(a >> 51));
+    output[1] = ((limb)a) & 0x7ffffffffffff;
 
-  a = ((uint128_t) in[2]) * scalar + ((limb) (a >> 51));
-  output[2] = ((limb)a) & 0x7ffffffffffff;
+    a = in[2] * (uint128_t)scalar + ((limb)(a >> 51));
+    output[2] = ((limb)a) & 0x7ffffffffffff;
 
-  a = ((uint128_t) in[3]) * scalar + ((limb) (a >> 51));
-  output[3] = ((limb)a) & 0x7ffffffffffff;
+    a = in[3] * (uint128_t)scalar + ((limb)(a >> 51));
+    output[3] = ((limb)a) & 0x7ffffffffffff;
 
-  a = ((uint128_t) in[4]) * scalar + ((limb) (a >> 51));
-  output[4] = ((limb)a) & 0x7ffffffffffff;
+    a = in[4] * (uint128_t)scalar + ((limb)(a >> 51));
+    output[4] = ((limb)a) & 0x7ffffffffffff;
 
-  output[0] += (a >> 51) * 19;
+    output[0] += (a >> 51) * 19;
 }
 
 /* Multiply two numbers: output = in2 * in
@@ -98,200 +101,257 @@ fscalar_product(felem output, const fele
  * On return, output[i] < 2**52
  */
 static inline void
-fmul(felem output, const felem in2, const felem in) {
-  uint128_t t[5];
-  limb r0,r1,r2,r3,r4,s0,s1,s2,s3,s4,c;
-
-  r0 = in[0];
-  r1 = in[1];
-  r2 = in[2];
-  r3 = in[3];
-  r4 = in[4];
-
-  s0 = in2[0];
-  s1 = in2[1];
-  s2 = in2[2];
-  s3 = in2[3];
-  s4 = in2[4];
-
-  t[0]  =  ((uint128_t) r0) * s0;
-  t[1]  =  ((uint128_t) r0) * s1 + ((uint128_t) r1) * s0;
-  t[2]  =  ((uint128_t) r0) * s2 + ((uint128_t) r2) * s0 + ((uint128_t) r1) * s1;
-  t[3]  =  ((uint128_t) r0) * s3 + ((uint128_t) r3) * s0 + ((uint128_t) r1) * s2 + ((uint128_t) r2) * s1;
-  t[4]  =  ((uint128_t) r0) * s4 + ((uint128_t) r4) * s0 + ((uint128_t) r3) * s1 + ((uint128_t) r1) * s3 + ((uint128_t) r2) * s2;
-
-  r4 *= 19;
-  r1 *= 19;
-  r2 *= 19;
-  r3 *= 19;
-
-  t[0] += ((uint128_t) r4) * s1 + ((uint128_t) r1) * s4 + ((uint128_t) r2) * s3 + ((uint128_t) r3) * s2;
-  t[1] += ((uint128_t) r4) * s2 + ((uint128_t) r2) * s4 + ((uint128_t) r3) * s3;
-  t[2] += ((uint128_t) r4) * s3 + ((uint128_t) r3) * s4;
-  t[3] += ((uint128_t) r4) * s4;
-
-                  r0 = (limb)t[0] & 0x7ffffffffffff; c = (limb)(t[0] >> 51);
-  t[1] += c;      r1 = (limb)t[1] & 0x7ffffffffffff; c = (limb)(t[1] >> 51);
-  t[2] += c;      r2 = (limb)t[2] & 0x7ffffffffffff; c = (limb)(t[2] >> 51);
-  t[3] += c;      r3 = (limb)t[3] & 0x7ffffffffffff; c = (limb)(t[3] >> 51);
-  t[4] += c;      r4 = (limb)t[4] & 0x7ffffffffffff; c = (limb)(t[4] >> 51);
-  r0 +=   c * 19; c = r0 >> 51; r0 = r0 & 0x7ffffffffffff;
-  r1 +=   c;      c = r1 >> 51; r1 = r1 & 0x7ffffffffffff;
-  r2 +=   c;
-
-  output[0] = r0;
-  output[1] = r1;
-  output[2] = r2;
-  output[3] = r3;
-  output[4] = r4;
+fmul(felem output, const felem in2, const felem in)
+{
+    uint128_t t[5];
+    limb      r0, r1, r2, r3, r4, s0, s1, s2, s3, s4, c;
+
+    r0 = in[0];
+    r1 = in[1];
+    r2 = in[2];
+    r3 = in[3];
+    r4 = in[4];
+
+    s0 = in2[0];
+    s1 = in2[1];
+    s2 = in2[2];
+    s3 = in2[3];
+    s4 = in2[4];
+
+    t[0] = ((uint128_t)r0) * s0;
+    t[1] = ((uint128_t)r0) * s1 + ((uint128_t)r1) * s0;
+    t[2] = ((uint128_t)r0) * s2 + ((uint128_t)r2) * s0 + ((uint128_t)r1) * s1;
+    t[3] = ((uint128_t)r0) * s3 + ((uint128_t)r3) * s0 + ((uint128_t)r1) * s2
+           + ((uint128_t)r2) * s1;
+    t[4] = ((uint128_t)r0) * s4 + ((uint128_t)r4) * s0 + ((uint128_t)r3) * s1
+           + ((uint128_t)r1) * s3 + ((uint128_t)r2) * s2;
+
+    r4 *= 19;
+    r1 *= 19;
+    r2 *= 19;
+    r3 *= 19;
+
+    t[0] += ((uint128_t)r4) * s1 + ((uint128_t)r1) * s4 + ((uint128_t)r2) * s3
+            + ((uint128_t)r3) * s2;
+    t[1] += ((uint128_t)r4) * s2 + ((uint128_t)r2) * s4 + ((uint128_t)r3) * s3;
+    t[2] += ((uint128_t)r4) * s3 + ((uint128_t)r3) * s4;
+    t[3] += ((uint128_t)r4) * s4;
+
+    r0 = (limb)t[0] & 0x7ffffffffffff;
+    c = (limb)(t[0] >> 51);
+    t[1] += c;
+    r1 = (limb)t[1] & 0x7ffffffffffff;
+    c = (limb)(t[1] >> 51);
+    t[2] += c;
+    r2 = (limb)t[2] & 0x7ffffffffffff;
+    c = (limb)(t[2] >> 51);
+    t[3] += c;
+    r3 = (limb)t[3] & 0x7ffffffffffff;
+    c = (limb)(t[3] >> 51);
+    t[4] += c;
+    r4 = (limb)t[4] & 0x7ffffffffffff;
+    c = (limb)(t[4] >> 51);
+    r0 += c * 19;
+    c = r0 >> 51;
+    r0 = r0 & 0x7ffffffffffff;
+    r1 += c;
+    c = r1 >> 51;
+    r1 = r1 & 0x7ffffffffffff;
+    r2 += c;
+
+    output[0] = r0;
+    output[1] = r1;
+    output[2] = r2;
+    output[3] = r3;
+    output[4] = r4;
 }
 
 static inline void
-fsquare_times(felem output, const felem in, limb count) {
-  uint128_t t[5];
-  limb r0,r1,r2,r3,r4,c;
-  limb d0,d1,d2,d4,d419;
-
-  r0 = in[0];
-  r1 = in[1];
-  r2 = in[2];
-  r3 = in[3];
-  r4 = in[4];
-
-  do {
-    d0 = r0 * 2;
-    d1 = r1 * 2;
-    d2 = r2 * 2 * 19;
-    d419 = r4 * 19;
-    d4 = d419 * 2;
-
-    t[0] = ((uint128_t) r0) * r0 + ((uint128_t) d4) * r1 + (((uint128_t) d2) * (r3     ));
-    t[1] = ((uint128_t) d0) * r1 + ((uint128_t) d4) * r2 + (((uint128_t) r3) * (r3 * 19));
-    t[2] = ((uint128_t) d0) * r2 + ((uint128_t) r1) * r1 + (((uint128_t) d4) * (r3     ));
-    t[3] = ((uint128_t) d0) * r3 + ((uint128_t) d1) * r2 + (((uint128_t) r4) * (d419   ));
-    t[4] = ((uint128_t) d0) * r4 + ((uint128_t) d1) * r3 + (((uint128_t) r2) * (r2     ));
-
-                    r0 = (limb)t[0] & 0x7ffffffffffff; c = (limb)(t[0] >> 51);
-    t[1] += c;      r1 = (limb)t[1] & 0x7ffffffffffff; c = (limb)(t[1] >> 51);
-    t[2] += c;      r2 = (limb)t[2] & 0x7ffffffffffff; c = (limb)(t[2] >> 51);
-    t[3] += c;      r3 = (limb)t[3] & 0x7ffffffffffff; c = (limb)(t[3] >> 51);
-    t[4] += c;      r4 = (limb)t[4] & 0x7ffffffffffff; c = (limb)(t[4] >> 51);
-    r0 +=   c * 19; c = r0 >> 51; r0 = r0 & 0x7ffffffffffff;
-    r1 +=   c;      c = r1 >> 51; r1 = r1 & 0x7ffffffffffff;
-    r2 +=   c;
-  } while(--count);
-
-  output[0] = r0;
-  output[1] = r1;
-  output[2] = r2;
-  output[3] = r3;
-  output[4] = r4;
+fsquare_times(felem output, const felem in, limb count)
+{
+    uint128_t t[5];
+    limb      r0, r1, r2, r3, r4, c;
+    limb      d0, d1, d2, d4, d419;
+
+    r0 = in[0];
+    r1 = in[1];
+    r2 = in[2];
+    r3 = in[3];
+    r4 = in[4];
+
+    do {
+        d0 = r0 * 2;
+        d1 = r1 * 2;
+        d2 = r2 * 2 * 19;
+        d419 = r4 * 19;
+        d4 = d419 * 2;
+
+        t[0] = ((uint128_t)r0) * r0 + ((uint128_t)d4) * r1
+               + (((uint128_t)d2) * (r3));
+        t[1] = ((uint128_t)d0) * r1 + ((uint128_t)d4) * r2
+               + (((uint128_t)r3) * (r3 * 19));
+        t[2] = ((uint128_t)d0) * r2 + ((uint128_t)r1) * r1
+               + (((uint128_t)d4) * (r3));
+        t[3] = ((uint128_t)d0) * r3 + ((uint128_t)d1) * r2
+               + (((uint128_t)r4) * (d419));
+        t[4] = ((uint128_t)d0) * r4 + ((uint128_t)d1) * r3
+               + (((uint128_t)r2) * (r2));
+
+        r0 = (limb)t[0] & 0x7ffffffffffff;
+        c = (limb)(t[0] >> 51);
+        t[1] += c;
+        r1 = (limb)t[1] & 0x7ffffffffffff;
+        c = (limb)(t[1] >> 51);
+        t[2] += c;
+        r2 = (limb)t[2] & 0x7ffffffffffff;
+        c = (limb)(t[2] >> 51);
+        t[3] += c;
+        r3 = (limb)t[3] & 0x7ffffffffffff;
+        c = (limb)(t[3] >> 51);
+        t[4] += c;
+        r4 = (limb)t[4] & 0x7ffffffffffff;
+        c = (limb)(t[4] >> 51);
+        r0 += c * 19;
+        c = r0 >> 51;
+        r0 = r0 & 0x7ffffffffffff;
+        r1 += c;
+        c = r1 >> 51;
+        r1 = r1 & 0x7ffffffffffff;
+        r2 += c;
+    } while (--count);
+
+    output[0] = r0;
+    output[1] = r1;
+    output[2] = r2;
+    output[3] = r3;
+    output[4] = r4;
 }
 
 #ifdef NATIVE_LITTLE_ENDIAN
 static inline limb
-load_limb(const u8 *in) {
+load_limb(const u8 *in)
+{
     limb out;
-    memcpy(&out, in, sizeof (limb));
+
+    memcpy(&out, in, sizeof(limb));
     return out;
 }
 static inline void
-store_limb(u8 *out, limb in) {
-    memcpy(out, &in, sizeof (limb));
+store_limb(u8 *out, limb in)
+{
+    memcpy(out, &in, sizeof(limb));
 }
 #else
 static inline limb
-load_limb(const u8 *in) {
-  return
-    ((limb)in[0]) |
-    (((limb)in[1]) << 8) |
-    (((limb)in[2]) << 16) |
-    (((limb)in[3]) << 24) |
-    (((limb)in[4]) << 32) |
-    (((limb)in[5]) << 40) |
-    (((limb)in[6]) << 48) |
-    (((limb)in[7]) << 56);
+load_limb(const u8 *in)
+{
+    return ((limb)in[0]) | (((limb)in[1]) << 8) | (((limb)in[2]) << 16)
+           | (((limb)in[3]) << 24) | (((limb)in[4]) << 32)
+           | (((limb)in[5]) << 40) | (((limb)in[6]) << 48)
+           | (((limb)in[7]) << 56);
 }
 
 static inline void
-store_limb(u8 *out, limb in) {
-  out[0] = in & 0xff;
-  out[1] = (in >> 8) & 0xff;
-  out[2] = (in >> 16) & 0xff;
-  out[3] = (in >> 24) & 0xff;
-  out[4] = (in >> 32) & 0xff;
-  out[5] = (in >> 40) & 0xff;
-  out[6] = (in >> 48) & 0xff;
-  out[7] = (in >> 56) & 0xff;
+store_limb(u8 *out, limb in)
+{
+    out[0] = in & 0xff;
+    out[1] = (in >> 8) & 0xff;
+    out[2] = (in >> 16) & 0xff;
+    out[3] = (in >> 24) & 0xff;
+    out[4] = (in >> 32) & 0xff;
+    out[5] = (in >> 40) & 0xff;
+    out[6] = (in >> 48) & 0xff;
+    out[7] = (in >> 56) & 0xff;
 }
 #endif
 
 /* Take a little-endian, 32-byte number and expand it into polynomial form */
 static void
-fexpand(limb *output, const u8 *in) {
-  output[0] = load_limb(in) & 0x7ffffffffffff;
-  output[1] = (load_limb(in+6) >> 3) & 0x7ffffffffffff;
-  output[2] = (load_limb(in+12) >> 6) & 0x7ffffffffffff;
-  output[3] = (load_limb(in+19) >> 1) & 0x7ffffffffffff;
-  output[4] = (load_limb(in+24) >> 12) & 0x7ffffffffffff;
+fexpand(limb *output, const u8 *in)
+{
+    output[0] = load_limb(in) & 0x7ffffffffffff;
+    output[1] = (load_limb(in + 6) >> 3) & 0x7ffffffffffff;
+    output[2] = (load_limb(in + 12) >> 6) & 0x7ffffffffffff;
+    output[3] = (load_limb(in + 19) >> 1) & 0x7ffffffffffff;
+    output[4] = (load_limb(in + 24) >> 12) & 0x7ffffffffffff;
 }
 
 /* Take a fully reduced polynomial form number and contract it into a
  * little-endian, 32-byte array
  */
 static void
-fcontract(u8 *output, const felem input) {
-  uint128_t t[5];
+fcontract(u8 *output, const felem input)
+{
+    uint128_t t[5];
 
-  t[0] = input[0];
-  t[1] = input[1];
-  t[2] = input[2];
-  t[3] = input[3];
-  t[4] = input[4];
-
-  t[1] += t[0] >> 51; t[0] &= 0x7ffffffffffff;
-  t[2] += t[1] >> 51; t[1] &= 0x7ffffffffffff;
-  t[3] += t[2] >> 51; t[2] &= 0x7ffffffffffff;
-  t[4] += t[3] >> 51; t[3] &= 0x7ffffffffffff;
-  t[0] += 19 * (t[4] >> 51); t[4] &= 0x7ffffffffffff;
-
-  t[1] += t[0] >> 51; t[0] &= 0x7ffffffffffff;
-  t[2] += t[1] >> 51; t[1] &= 0x7ffffffffffff;
-  t[3] += t[2] >> 51; t[2] &= 0x7ffffffffffff;
-  t[4] += t[3] >> 51; t[3] &= 0x7ffffffffffff;
-  t[0] += 19 * (t[4] >> 51); t[4] &= 0x7ffffffffffff;
-
-  /* now t is between 0 and 2^255-1, properly carried. */
-  /* case 1: between 0 and 2^255-20. case 2: between 2^255-19 and 2^255-1. */
-
-  t[0] += 19;
-
-  t[1] += t[0] >> 51; t[0] &= 0x7ffffffffffff;
-  t[2] += t[1] >> 51; t[1] &= 0x7ffffffffffff;
-  t[3] += t[2] >> 51; t[2] &= 0x7ffffffffffff;
-  t[4] += t[3] >> 51; t[3] &= 0x7ffffffffffff;
-  t[0] += 19 * (t[4] >> 51); t[4] &= 0x7ffffffffffff;
-
-  /* now between 19 and 2^255-1 in both cases, and offset by 19. */
-
-  t[0] += 0x8000000000000 - 19;
-  t[1] += 0x8000000000000 - 1;
-  t[2] += 0x8000000000000 - 1;
-  t[3] += 0x8000000000000 - 1;
-  t[4] += 0x8000000000000 - 1;
-
-  /* now between 2^255 and 2^256-20, and offset by 2^255. */
-
-  t[1] += t[0] >> 51; t[0] &= 0x7ffffffffffff;
-  t[2] += t[1] >> 51; t[1] &= 0x7ffffffffffff;
-  t[3] += t[2] >> 51; t[2] &= 0x7ffffffffffff;
-  t[4] += t[3] >> 51; t[3] &= 0x7ffffffffffff;
-  t[4] &= 0x7ffffffffffff;
-
-  store_limb(output, t[0] | (t[1] << 51));
-  store_limb(output + 8, (t[1] >> 13) | (t[2] << 38));
-  store_limb(output + 16, (t[2] >> 26) | (t[3] << 25));
-  store_limb(output + 24, (t[3] >> 39) | (t[4] << 12));
+    t[0] = input[0];
+    t[1] = input[1];
+    t[2] = input[2];
+    t[3] = input[3];
+    t[4] = input[4];
+
+    t[1] += t[0] >> 51;
+    t[0] &= 0x7ffffffffffff;
+    t[2] += t[1] >> 51;
+    t[1] &= 0x7ffffffffffff;
+    t[3] += t[2] >> 51;
+    t[2] &= 0x7ffffffffffff;
+    t[4] += t[3] >> 51;
+    t[3] &= 0x7ffffffffffff;
+    t[0] += 19 * (t[4] >> 51);
+    t[4] &= 0x7ffffffffffff;
+
+    t[1] += t[0] >> 51;
+    t[0] &= 0x7ffffffffffff;
+    t[2] += t[1] >> 51;
+    t[1] &= 0x7ffffffffffff;
+    t[3] += t[2] >> 51;
+    t[2] &= 0x7ffffffffffff;
+    t[4] += t[3] >> 51;
+    t[3] &= 0x7ffffffffffff;
+    t[0] += 19 * (t[4] >> 51);
+    t[4] &= 0x7ffffffffffff;
+
+    /* now t is between 0 and 2^255-1, properly carried. */
+    /* case 1: between 0 and 2^255-20. case 2: between 2^255-19 and 2^255-1. */
+
+    t[0] += 19;
+
+    t[1] += t[0] >> 51;
+    t[0] &= 0x7ffffffffffff;
+    t[2] += t[1] >> 51;
+    t[1] &= 0x7ffffffffffff;
+    t[3] += t[2] >> 51;
+    t[2] &= 0x7ffffffffffff;
+    t[4] += t[3] >> 51;
+    t[3] &= 0x7ffffffffffff;
+    t[0] += 19 * (t[4] >> 51);
+    t[4] &= 0x7ffffffffffff;
+
+    /* now between 19 and 2^255-1 in both cases, and offset by 19. */
+
+    t[0] += 0x8000000000000 - 19;
+    t[1] += 0x8000000000000 - 1;
+    t[2] += 0x8000000000000 - 1;
+    t[3] += 0x8000000000000 - 1;
+    t[4] += 0x8000000000000 - 1;
+
+    /* now between 2^255 and 2^256-20, and offset by 2^255. */
+
+    t[1] += t[0] >> 51;
+    t[0] &= 0x7ffffffffffff;
+    t[2] += t[1] >> 51;
+    t[1] &= 0x7ffffffffffff;
+    t[3] += t[2] >> 51;
+    t[2] &= 0x7ffffffffffff;
+    t[4] += t[3] >> 51;
+    t[3] &= 0x7ffffffffffff;
+    t[4] &= 0x7ffffffffffff;
+
+    store_limb(output, t[0] | (t[1] << 51));
+    store_limb(output + 8, (t[1] >> 13) | (t[2] << 38));
+    store_limb(output + 16, (t[2] >> 26) | (t[3] << 25));
+    store_limb(output + 24, (t[3] >> 39) | (t[4] << 12));
 }
 
 /* Input: Q, Q', Q-Q'
@@ -304,37 +364,38 @@ fcontract(u8 *output, const felem input)
  *   qmqp: short form, preserved
  */
 static void
-fmonty(limb *x2, limb *z2, /* output 2Q */
-       limb *x3, limb *z3, /* output Q + Q' */
-       limb *x, limb *z,   /* input Q */
+fmonty(limb *x2, limb *z2,         /* output 2Q */
+       limb *x3, limb *z3,         /* output Q + Q' */
+       limb *x, limb *z,           /* input Q */
        limb *xprime, limb *zprime, /* input Q' */
-       const limb *qmqp /* input Q - Q' */) {
-  limb origx[5], origxprime[5], zzz[5], xx[5], zz[5], xxprime[5],
-        zzprime[5], zzzprime[5];
-
-  memcpy(origx, x, 5 * sizeof(limb));
-  fsum(x, z);
-  fdifference_backwards(z, origx); /* does x - z */
-
-  memcpy(origxprime, xprime, sizeof(limb) * 5);
-  fsum(xprime, zprime);
-  fdifference_backwards(zprime, origxprime);
-  fmul(xxprime, xprime, z);
-  fmul(zzprime, x, zprime);
-  memcpy(origxprime, xxprime, sizeof(limb) * 5);
-  fsum(xxprime, zzprime);
-  fdifference_backwards(zzprime, origxprime);
-  fsquare_times(x3, xxprime, 1);
-  fsquare_times(zzzprime, zzprime, 1);
-  fmul(z3, zzzprime, qmqp);
-
-  fsquare_times(xx, x, 1);
-  fsquare_times(zz, z, 1);
-  fmul(x2, xx, zz);
-  fdifference_backwards(zz, xx); /* does zz = xx - zz */
-  fscalar_product(zzz, zz, 121665);
-  fsum(zzz, xx);
-  fmul(z2, zz, zzz);
+       const limb *qmqp /* input Q - Q' */)
+{
+    limb origx[5], origxprime[5], zzz[5], xx[5], zz[5], xxprime[5], zzprime[5],
+        zzzprime[5];
+
+    memcpy(origx, x, 5 * sizeof(limb));
+    fsum(x, z);
+    fdifference_backwards(z, origx); /* does x - z */
+
+    memcpy(origxprime, xprime, sizeof(limb) * 5);
+    fsum(xprime, zprime);
+    fdifference_backwards(zprime, origxprime);
+    fmul(xxprime, xprime, z);
+    fmul(zzprime, x, zprime);
+    memcpy(origxprime, xxprime, sizeof(limb) * 5);
+    fsum(xxprime, zzprime);
+    fdifference_backwards(zzprime, origxprime);
+    fsquare_times(x3, xxprime, 1);
+    fsquare_times(zzzprime, zzprime, 1);
+    fmul(z3, zzzprime, qmqp);
+
+    fsquare_times(xx, x, 1);
+    fsquare_times(zz, z, 1);
+    fmul(x2, xx, zz);
+    fdifference_backwards(zz, xx); /* does zz = xx - zz */
+    fscalar_product(zzz, zz, 121665);
+    fsum(zzz, xx);
+    fmul(z2, zz, zzz);
 }
 
 /* -----------------------------------------------------------------------------
@@ -343,17 +404,19 @@ fmonty(limb *x2, limb *z2, /* output 2Q
 
    This function performs the swap without leaking any side-channel
    information.
-   ----------------------------------------------------------------------------- */
+   -----------------------------------------------------------------------------
+   */
 static void
-swap_conditional(limb a[5], limb b[5], limb iswap) {
-  unsigned i;
-  const limb swap = -iswap;
-
-  for (i = 0; i < 5; ++i) {
-    const limb x = swap & (a[i] ^ b[i]);
-    a[i] ^= x;
-    b[i] ^= x;
-  }
+swap_conditional(limb a[5], limb b[5], limb iswap)
+{
+    const limb swap = -iswap;
+    unsigned   i;
+
+    for (i = 0; i < 5; ++i) {
+        const limb x = swap & (a[i] ^ b[i]);
+        a[i] ^= x;
+        b[i] ^= x;
+    }
 }
 
 /* Calculates nQ where Q is the x-coordinate of a point on the curve
@@ -363,118 +426,120 @@ swap_conditional(limb a[5], limb b[5], l
  *   q: a point of the curve (short form)
  */
 static void
-cmult(limb *resultx, limb *resultz, const u8 *n, const limb *q) {
-  limb a[5] = {0}, b[5] = {1}, c[5] = {1}, d[5] = {0};
-  limb *nqpqx = a, *nqpqz = b, *nqx = c, *nqz = d, *t;
-  limb e[5] = {0}, f[5] = {1}, g[5] = {0}, h[5] = {1};
-  limb *nqpqx2 = e, *nqpqz2 = f, *nqx2 = g, *nqz2 = h;
-
-  unsigned i, j;
-
-  memcpy(nqpqx, q, sizeof(limb) * 5);
-
-  for (i = 0; i < 32; ++i) {
-    u8 byte = n[31 - i];
-    for (j = 0; j < 8; ++j) {
-      const limb bit = byte >> 7;
-
-      swap_conditional(nqx, nqpqx, bit);
-      swap_conditional(nqz, nqpqz, bit);
-      fmonty(nqx2, nqz2,
-             nqpqx2, nqpqz2,
-             nqx, nqz,
-             nqpqx, nqpqz,
-             q);
-      swap_conditional(nqx2, nqpqx2, bit);
-      swap_conditional(nqz2, nqpqz2, bit);
-
-      t = nqx;
-      nqx = nqx2;
-      nqx2 = t;
-      t = nqz;
-      nqz = nqz2;
-      nqz2 = t;
-      t = nqpqx;
-      nqpqx = nqpqx2;
-      nqpqx2 = t;
-      t = nqpqz;
-      nqpqz = nqpqz2;
-      nqpqz2 = t;
+cmult(limb *resultx, limb *resultz, const u8 *n, const limb *q)
+{
+    limb a[5] = { 0 }, b[5] = { 1 }, c[5] = { 1 }, d[5] = { 0 };
+    limb *nqpqx = a, *nqpqz = b, *nqx = c, *nqz = d, *t;
+    limb e[5] = { 0 }, f[5] = { 1 }, g[5] = { 0 }, h[5] = { 1 };
+    limb *nqpqx2 = e, *nqpqz2 = f, *nqx2 = g, *nqz2 = h;
+
+    unsigned i, j;
+
+    memcpy(nqpqx, q, sizeof(limb) * 5);
+
+    for (i = 0; i < 32; ++i) {
+        u8 byte = n[31 - i];
+        for (j = 0; j < 8; ++j) {
+            const limb bit = byte >> 7;
+
+            swap_conditional(nqx, nqpqx, bit);
+            swap_conditional(nqz, nqpqz, bit);
+            fmonty(nqx2, nqz2, nqpqx2, nqpqz2, nqx, nqz, nqpqx, nqpqz, q);
+            swap_conditional(nqx2, nqpqx2, bit);
+            swap_conditional(nqz2, nqpqz2, bit);
+
+            t = nqx;
+            nqx = nqx2;
+            nqx2 = t;
+            t = nqz;
+            nqz = nqz2;
+            nqz2 = t;
+            t = nqpqx;
+            nqpqx = nqpqx2;
+            nqpqx2 = t;
+            t = nqpqz;
+            nqpqz = nqpqz2;
+            nqpqz2 = t;
 
-      byte <<= 1;
+            byte <<= 1;
+        }
     }
-  }
 
-  memcpy(resultx, nqx, sizeof(limb) * 5);
-  memcpy(resultz, nqz, sizeof(limb) * 5);
+    memcpy(resultx, nqx, sizeof(limb) * 5);
+    memcpy(resultz, nqz, sizeof(limb) * 5);
 }
 
-
 /* -----------------------------------------------------------------------------
    Shamelessly copied from djb's code, tightened a little
-   ----------------------------------------------------------------------------- */
+   -----------------------------------------------------------------------------
+   */
 static void
-crecip(felem out, const felem z) {
-  felem a,t0,b,c;
+crecip(felem out, const felem z)
+{
+    felem a, t0, b, c;
 
-  /* 2 */ fsquare_times(a, z, 1); /* a = 2 */
-  /* 8 */ fsquare_times(t0, a, 2);
-  /* 9 */ fmul(b, t0, z); /* b = 9 */
-  /* 11 */ fmul(a, b, a); /* a = 11 */
-  /* 22 */ fsquare_times(t0, a, 1);
-  /* 2^5 - 2^0 = 31 */ fmul(b, t0, b);
-  /* 2^10 - 2^5 */ fsquare_times(t0, b, 5);
-  /* 2^10 - 2^0 */ fmul(b, t0, b);
-  /* 2^20 - 2^10 */ fsquare_times(t0, b, 10);
-  /* 2^20 - 2^0 */ fmul(c, t0, b);
-  /* 2^40 - 2^20 */ fsquare_times(t0, c, 20);
-  /* 2^40 - 2^0 */ fmul(t0, t0, c);
-  /* 2^50 - 2^10 */ fsquare_times(t0, t0, 10);
-  /* 2^50 - 2^0 */ fmul(b, t0, b);
-  /* 2^100 - 2^50 */ fsquare_times(t0, b, 50);
-  /* 2^100 - 2^0 */ fmul(c, t0, b);
-  /* 2^200 - 2^100 */ fsquare_times(t0, c, 100);
-  /* 2^200 - 2^0 */ fmul(t0, t0, c);
-  /* 2^250 - 2^50 */ fsquare_times(t0, t0, 50);
-  /* 2^250 - 2^0 */ fmul(t0, t0, b);
-  /* 2^255 - 2^5 */ fsquare_times(t0, t0, 5);
-  /* 2^255 - 21 */ fmul(out, t0, a);
+    /* 2 */ fsquare_times(a, z, 1); /* a = 2 */
+    /* 8 */ fsquare_times(t0, a, 2);
+    /* 9 */ fmul(b, t0, z); /* b = 9 */
+    /* 11 */ fmul(a, b, a); /* a = 11 */
+    /* 22 */ fsquare_times(t0, a, 1);
+    /* 2^5 - 2^0 = 31 */ fmul(b, t0, b);
+    /* 2^10 - 2^5 */ fsquare_times(t0, b, 5);
+    /* 2^10 - 2^0 */ fmul(b, t0, b);
+    /* 2^20 - 2^10 */ fsquare_times(t0, b, 10);
+    /* 2^20 - 2^0 */ fmul(c, t0, b);
+    /* 2^40 - 2^20 */ fsquare_times(t0, c, 20);
+    /* 2^40 - 2^0 */ fmul(t0, t0, c);
+    /* 2^50 - 2^10 */ fsquare_times(t0, t0, 10);
+    /* 2^50 - 2^0 */ fmul(b, t0, b);
+    /* 2^100 - 2^50 */ fsquare_times(t0, b, 50);
+    /* 2^100 - 2^0 */ fmul(c, t0, b);
+    /* 2^200 - 2^100 */ fsquare_times(t0, c, 100);
+    /* 2^200 - 2^0 */ fmul(t0, t0, c);
+    /* 2^250 - 2^50 */ fsquare_times(t0, t0, 50);
+    /* 2^250 - 2^0 */ fmul(t0, t0, b);
+    /* 2^255 - 2^5 */ fsquare_times(t0, t0, 5);
+    /* 2^255 - 21 */ fmul(out, t0, a);
 }
 
-static const unsigned char basepoint[32] = {9};
+static const unsigned char basepoint[32] = { 9 };
 
 static int
 crypto_scalarmult_curve25519_donna_c64(unsigned char *mypublic,
                                        const unsigned char *secret,
-                                       const unsigned char *basepoint) {
-  limb bp[5], x[5], z[5], zmone[5];
-  uint8_t e[32];
-  int i;
-
-  for (i = 0;i < 32;++i) e[i] = secret[i];
-  e[0] &= 248;
-  e[31] &= 127;
-  e[31] |= 64;
-
-  fexpand(bp, basepoint);
-  cmult(x, z, e, bp);
-  crecip(zmone, z);
-  fmul(z, x, zmone);
-  fcontract(mypublic, z);
-  return 0;
+                                       const unsigned char *basepoint)
+{
+    limb    bp[5], x[5], z[5], zmone[5];
+    uint8_t e[32];
+    int     i;
+
+    for (i = 0; i < 32; ++i) {
+        e[i] = secret[i];
+    }
+    e[0] &= 248;
+    e[31] &= 127;
+    e[31] |= 64;
+
+    fexpand(bp, basepoint);
+    cmult(x, z, e, bp);
+    crecip(zmone, z);
+    fmul(z, x, zmone);
+    fcontract(mypublic, z);
+
+    return 0;
 }
 
 static int
 crypto_scalarmult_curve25519_donna_c64_base(unsigned char *q,
                                             const unsigned char *n)
 {
-  return crypto_scalarmult_curve25519_donna_c64(q, n, basepoint);
+    return crypto_scalarmult_curve25519_donna_c64(q, n, basepoint);
 }
 
 struct crypto_scalarmult_curve25519_implementation
-crypto_scalarmult_curve25519_donna_c64_implementation = {
-    SODIUM_C99(.mult = ) crypto_scalarmult_curve25519_donna_c64,
-    SODIUM_C99(.mult_base = ) crypto_scalarmult_curve25519_donna_c64_base
-};
+    crypto_scalarmult_curve25519_donna_c64_implementation = {
+        SODIUM_C99(.mult =) crypto_scalarmult_curve25519_donna_c64,
+        SODIUM_C99(.mult_base =) crypto_scalarmult_curve25519_donna_c64_base
+    };
 
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_scalarmult/curve25519/ref10/x25519_ref10.c libsodium-1.0.12/src/libsodium/crypto_scalarmult/curve25519/ref10/x25519_ref10.c
--- libsodium-1.0.11/src/libsodium/crypto_scalarmult/curve25519/ref10/x25519_ref10.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_scalarmult/curve25519/ref10/x25519_ref10.c	2017-03-06 11:13:57.000000000 +0100
@@ -4,10 +4,10 @@
 
 #ifndef HAVE_TI_MODE
 
-#include "utils.h"
-#include "x25519_ref10.h"
 #include "../scalarmult_curve25519.h"
 #include "private/curve25519_ref10.h"
+#include "utils.h"
+#include "x25519_ref10.h"
 
 /*
 Replace (f,g) with (g,f) if b == 1;
@@ -17,69 +17,70 @@ Preconditions: b in {0,1}.
 */
 
 static void
-fe_cswap(fe f,fe g,unsigned int b)
+fe_cswap(fe f, fe g, unsigned int b)
 {
-  int32_t f0 = f[0];
-  int32_t f1 = f[1];
-  int32_t f2 = f[2];
-  int32_t f3 = f[3];
-  int32_t f4 = f[4];
-  int32_t f5 = f[5];
-  int32_t f6 = f[6];
-  int32_t f7 = f[7];
-  int32_t f8 = f[8];
-  int32_t f9 = f[9];
-  int32_t g0 = g[0];
-  int32_t g1 = g[1];
-  int32_t g2 = g[2];
-  int32_t g3 = g[3];
-  int32_t g4 = g[4];
-  int32_t g5 = g[5];
-  int32_t g6 = g[6];
-  int32_t g7 = g[7];
-  int32_t g8 = g[8];
-  int32_t g9 = g[9];
-  int32_t x0 = f0 ^ g0;
-  int32_t x1 = f1 ^ g1;
-  int32_t x2 = f2 ^ g2;
-  int32_t x3 = f3 ^ g3;
-  int32_t x4 = f4 ^ g4;
-  int32_t x5 = f5 ^ g5;
-  int32_t x6 = f6 ^ g6;
-  int32_t x7 = f7 ^ g7;
-  int32_t x8 = f8 ^ g8;
-  int32_t x9 = f9 ^ g9;
-  b = (unsigned int) (- (int) b);
-  x0 &= b;
-  x1 &= b;
-  x2 &= b;
-  x3 &= b;
-  x4 &= b;
-  x5 &= b;
-  x6 &= b;
-  x7 &= b;
-  x8 &= b;
-  x9 &= b;
-  f[0] = f0 ^ x0;
-  f[1] = f1 ^ x1;
-  f[2] = f2 ^ x2;
-  f[3] = f3 ^ x3;
-  f[4] = f4 ^ x4;
-  f[5] = f5 ^ x5;
-  f[6] = f6 ^ x6;
-  f[7] = f7 ^ x7;
-  f[8] = f8 ^ x8;
-  f[9] = f9 ^ x9;
-  g[0] = g0 ^ x0;
-  g[1] = g1 ^ x1;
-  g[2] = g2 ^ x2;
-  g[3] = g3 ^ x3;
-  g[4] = g4 ^ x4;
-  g[5] = g5 ^ x5;
-  g[6] = g6 ^ x6;
-  g[7] = g7 ^ x7;
-  g[8] = g8 ^ x8;
-  g[9] = g9 ^ x9;
+    int32_t f0 = f[0];
+    int32_t f1 = f[1];
+    int32_t f2 = f[2];
+    int32_t f3 = f[3];
+    int32_t f4 = f[4];
+    int32_t f5 = f[5];
+    int32_t f6 = f[6];
+    int32_t f7 = f[7];
+    int32_t f8 = f[8];
+    int32_t f9 = f[9];
+    int32_t g0 = g[0];
+    int32_t g1 = g[1];
+    int32_t g2 = g[2];
+    int32_t g3 = g[3];
+    int32_t g4 = g[4];
+    int32_t g5 = g[5];
+    int32_t g6 = g[6];
+    int32_t g7 = g[7];
+    int32_t g8 = g[8];
+    int32_t g9 = g[9];
+    int32_t x0 = f0 ^ g0;
+    int32_t x1 = f1 ^ g1;
+    int32_t x2 = f2 ^ g2;
+    int32_t x3 = f3 ^ g3;
+    int32_t x4 = f4 ^ g4;
+    int32_t x5 = f5 ^ g5;
+    int32_t x6 = f6 ^ g6;
+    int32_t x7 = f7 ^ g7;
+    int32_t x8 = f8 ^ g8;
+    int32_t x9 = f9 ^ g9;
+
+    b = (unsigned int)(-(int)b);
+    x0 &= b;
+    x1 &= b;
+    x2 &= b;
+    x3 &= b;
+    x4 &= b;
+    x5 &= b;
+    x6 &= b;
+    x7 &= b;
+    x8 &= b;
+    x9 &= b;
+    f[0] = f0 ^ x0;
+    f[1] = f1 ^ x1;
+    f[2] = f2 ^ x2;
+    f[3] = f3 ^ x3;
+    f[4] = f4 ^ x4;
+    f[5] = f5 ^ x5;
+    f[6] = f6 ^ x6;
+    f[7] = f7 ^ x7;
+    f[8] = f8 ^ x8;
+    f[9] = f9 ^ x9;
+    g[0] = g0 ^ x0;
+    g[1] = g1 ^ x1;
+    g[2] = g2 ^ x2;
+    g[3] = g3 ^ x3;
+    g[4] = g4 ^ x4;
+    g[5] = g5 ^ x5;
+    g[6] = g6 ^ x6;
+    g[7] = g7 ^ x7;
+    g[8] = g8 ^ x8;
+    g[9] = g9 ^ x9;
 }
 
 /*
@@ -94,61 +95,81 @@ Postconditions:
 */
 
 static void
-fe_mul121666(fe h,const fe f)
+fe_mul121666(fe h, const fe f)
 {
-  int32_t f0 = f[0];
-  int32_t f1 = f[1];
-  int32_t f2 = f[2];
-  int32_t f3 = f[3];
-  int32_t f4 = f[4];
-  int32_t f5 = f[5];
-  int32_t f6 = f[6];
-  int32_t f7 = f[7];
-  int32_t f8 = f[8];
-  int32_t f9 = f[9];
-  int64_t h0 = f0 * (int64_t) 121666;
-  int64_t h1 = f1 * (int64_t) 121666;
-  int64_t h2 = f2 * (int64_t) 121666;
-  int64_t h3 = f3 * (int64_t) 121666;
-  int64_t h4 = f4 * (int64_t) 121666;
-  int64_t h5 = f5 * (int64_t) 121666;
-  int64_t h6 = f6 * (int64_t) 121666;
-  int64_t h7 = f7 * (int64_t) 121666;
-  int64_t h8 = f8 * (int64_t) 121666;
-  int64_t h9 = f9 * (int64_t) 121666;
-  int64_t carry0;
-  int64_t carry1;
-  int64_t carry2;
-  int64_t carry3;
-  int64_t carry4;
-  int64_t carry5;
-  int64_t carry6;
-  int64_t carry7;
-  int64_t carry8;
-  int64_t carry9;
-
-  carry9 = (h9 + ((int64_t) 1 << 24)) >> 25; h0 += carry9 * 19; h9 -= carry9 * ((int64_t) 1 << 25);
-  carry1 = (h1 + ((int64_t) 1 << 24)) >> 25; h2 += carry1; h1 -= carry1 * ((int64_t) 1 << 25);
-  carry3 = (h3 + ((int64_t) 1 << 24)) >> 25; h4 += carry3; h3 -= carry3 * ((int64_t) 1 << 25);
-  carry5 = (h5 + ((int64_t) 1 << 24)) >> 25; h6 += carry5; h5 -= carry5 * ((int64_t) 1 << 25);
-  carry7 = (h7 + ((int64_t) 1 << 24)) >> 25; h8 += carry7; h7 -= carry7 * ((int64_t) 1 << 25);
-
-  carry0 = (h0 + ((int64_t) 1 << 25)) >> 26; h1 += carry0; h0 -= carry0 * ((int64_t) 1 << 26);
-  carry2 = (h2 + ((int64_t) 1 << 25)) >> 26; h3 += carry2; h2 -= carry2 * ((int64_t) 1 << 26);
-  carry4 = (h4 + ((int64_t) 1 << 25)) >> 26; h5 += carry4; h4 -= carry4 * ((int64_t) 1 << 26);
-  carry6 = (h6 + ((int64_t) 1 << 25)) >> 26; h7 += carry6; h6 -= carry6 * ((int64_t) 1 << 26);
-  carry8 = (h8 + ((int64_t) 1 << 25)) >> 26; h9 += carry8; h8 -= carry8 * ((int64_t) 1 << 26);
-
-  h[0] = h0;
-  h[1] = h1;
-  h[2] = h2;
-  h[3] = h3;
-  h[4] = h4;
-  h[5] = h5;
-  h[6] = h6;
-  h[7] = h7;
-  h[8] = h8;
-  h[9] = h9;
+    int32_t f0 = f[0];
+    int32_t f1 = f[1];
+    int32_t f2 = f[2];
+    int32_t f3 = f[3];
+    int32_t f4 = f[4];
+    int32_t f5 = f[5];
+    int32_t f6 = f[6];
+    int32_t f7 = f[7];
+    int32_t f8 = f[8];
+    int32_t f9 = f[9];
+    int64_t h0 = f0 * (int64_t)121666;
+    int64_t h1 = f1 * (int64_t)121666;
+    int64_t h2 = f2 * (int64_t)121666;
+    int64_t h3 = f3 * (int64_t)121666;
+    int64_t h4 = f4 * (int64_t)121666;
+    int64_t h5 = f5 * (int64_t)121666;
+    int64_t h6 = f6 * (int64_t)121666;
+    int64_t h7 = f7 * (int64_t)121666;
+    int64_t h8 = f8 * (int64_t)121666;
+    int64_t h9 = f9 * (int64_t)121666;
+    int64_t carry0;
+    int64_t carry1;
+    int64_t carry2;
+    int64_t carry3;
+    int64_t carry4;
+    int64_t carry5;
+    int64_t carry6;
+    int64_t carry7;
+    int64_t carry8;
+    int64_t carry9;
+
+    carry9 = (h9 + ((int64_t)1 << 24)) >> 25;
+    h0 += carry9 * 19;
+    h9 -= carry9 * ((int64_t)1 << 25);
+    carry1 = (h1 + ((int64_t)1 << 24)) >> 25;
+    h2 += carry1;
+    h1 -= carry1 * ((int64_t)1 << 25);
+    carry3 = (h3 + ((int64_t)1 << 24)) >> 25;
+    h4 += carry3;
+    h3 -= carry3 * ((int64_t)1 << 25);
+    carry5 = (h5 + ((int64_t)1 << 24)) >> 25;
+    h6 += carry5;
+    h5 -= carry5 * ((int64_t)1 << 25);
+    carry7 = (h7 + ((int64_t)1 << 24)) >> 25;
+    h8 += carry7;
+    h7 -= carry7 * ((int64_t)1 << 25);
+
+    carry0 = (h0 + ((int64_t)1 << 25)) >> 26;
+    h1 += carry0;
+    h0 -= carry0 * ((int64_t)1 << 26);
+    carry2 = (h2 + ((int64_t)1 << 25)) >> 26;
+    h3 += carry2;
+    h2 -= carry2 * ((int64_t)1 << 26);
+    carry4 = (h4 + ((int64_t)1 << 25)) >> 26;
+    h5 += carry4;
+    h4 -= carry4 * ((int64_t)1 << 26);
+    carry6 = (h6 + ((int64_t)1 << 25)) >> 26;
+    h7 += carry6;
+    h6 -= carry6 * ((int64_t)1 << 26);
+    carry8 = (h8 + ((int64_t)1 << 25)) >> 26;
+    h9 += carry8;
+    h8 -= carry8 * ((int64_t)1 << 26);
+
+    h[0] = h0;
+    h[1] = h1;
+    h[2] = h2;
+    h[3] = h3;
+    h[4] = h4;
+    h[5] = h5;
+    h[6] = h6;
+    h[7] = h7;
+    h[8] = h8;
+    h[9] = h9;
 }
 
 static int
@@ -156,100 +177,106 @@ crypto_scalarmult_curve25519_ref10(unsig
                                    const unsigned char *n,
                                    const unsigned char *p)
 {
-  unsigned char e[32];
-  unsigned int i;
-  fe x1;
-  fe x2;
-  fe z2;
-  fe x3;
-  fe z3;
-  fe tmp0;
-  fe tmp1;
-  int pos;
-  unsigned int swap;
-  unsigned int b;
-
-  for (i = 0;i < 32;++i) e[i] = n[i];
-  e[0] &= 248;
-  e[31] &= 127;
-  e[31] |= 64;
-  fe_frombytes(x1,p);
-  fe_1(x2);
-  fe_0(z2);
-  fe_copy(x3,x1);
-  fe_1(z3);
-
-  swap = 0;
-  for (pos = 254;pos >= 0;--pos) {
-    b = e[pos / 8] >> (pos & 7);
-    b &= 1;
-    swap ^= b;
-    fe_cswap(x2,x3,swap);
-    fe_cswap(z2,z3,swap);
-    swap = b;
-    fe_sub(tmp0,x3,z3);
-    fe_sub(tmp1,x2,z2);
-    fe_add(x2,x2,z2);
-    fe_add(z2,x3,z3);
-    fe_mul(z3,tmp0,x2);
-    fe_mul(z2,z2,tmp1);
-    fe_sq(tmp0,tmp1);
-    fe_sq(tmp1,x2);
-    fe_add(x3,z3,z2);
-    fe_sub(z2,z3,z2);
-    fe_mul(x2,tmp1,tmp0);
-    fe_sub(tmp1,tmp1,tmp0);
-    fe_sq(z2,z2);
-    fe_mul121666(z3,tmp1);
-    fe_sq(x3,x3);
-    fe_add(tmp0,tmp0,z3);
-    fe_mul(z3,x1,z2);
-    fe_mul(z2,tmp1,tmp0);
-  }
-  fe_cswap(x2,x3,swap);
-  fe_cswap(z2,z3,swap);
-
-  fe_invert(z2,z2);
-  fe_mul(x2,x2,z2);
-  fe_tobytes(q,x2);
-  return 0;
+    unsigned char e[32];
+    unsigned int  i;
+    fe            x1;
+    fe            x2;
+    fe            z2;
+    fe            x3;
+    fe            z3;
+    fe            tmp0;
+    fe            tmp1;
+    int           pos;
+    unsigned int  swap;
+    unsigned int  b;
+
+    for (i = 0; i < 32; ++i) {
+        e[i] = n[i];
+    }
+    e[0] &= 248;
+    e[31] &= 127;
+    e[31] |= 64;
+    fe_frombytes(x1, p);
+    fe_1(x2);
+    fe_0(z2);
+    fe_copy(x3, x1);
+    fe_1(z3);
+
+    swap = 0;
+    for (pos = 254; pos >= 0; --pos) {
+        b = e[pos / 8] >> (pos & 7);
+        b &= 1;
+        swap ^= b;
+        fe_cswap(x2, x3, swap);
+        fe_cswap(z2, z3, swap);
+        swap = b;
+        fe_sub(tmp0, x3, z3);
+        fe_sub(tmp1, x2, z2);
+        fe_add(x2, x2, z2);
+        fe_add(z2, x3, z3);
+        fe_mul(z3, tmp0, x2);
+        fe_mul(z2, z2, tmp1);
+        fe_sq(tmp0, tmp1);
+        fe_sq(tmp1, x2);
+        fe_add(x3, z3, z2);
+        fe_sub(z2, z3, z2);
+        fe_mul(x2, tmp1, tmp0);
+        fe_sub(tmp1, tmp1, tmp0);
+        fe_sq(z2, z2);
+        fe_mul121666(z3, tmp1);
+        fe_sq(x3, x3);
+        fe_add(tmp0, tmp0, z3);
+        fe_mul(z3, x1, z2);
+        fe_mul(z2, tmp1, tmp0);
+    }
+    fe_cswap(x2, x3, swap);
+    fe_cswap(z2, z3, swap);
+
+    fe_invert(z2, z2);
+    fe_mul(x2, x2, z2);
+    fe_tobytes(q, x2);
+
+    return 0;
 }
 
 static void
 edwards_to_montgomery(fe montgomeryX, const fe edwardsY, const fe edwardsZ)
 {
-  fe tempX;
-  fe tempZ;
+    fe tempX;
+    fe tempZ;
 
-  fe_add(tempX, edwardsZ, edwardsY);
-  fe_sub(tempZ, edwardsZ, edwardsY);
-  fe_invert(tempZ, tempZ);
-  fe_mul(montgomeryX, tempX, tempZ);
+    fe_add(tempX, edwardsZ, edwardsY);
+    fe_sub(tempZ, edwardsZ, edwardsY);
+    fe_invert(tempZ, tempZ);
+    fe_mul(montgomeryX, tempX, tempZ);
 }
 
 static int
 crypto_scalarmult_curve25519_ref10_base(unsigned char *q,
                                         const unsigned char *n)
 {
-  unsigned char e[32];
-  ge_p3 A;
-  fe pk;
-  unsigned int i;
-
-  for (i = 0;i < 32;++i) e[i] = n[i];
-  e[0] &= 248;
-  e[31] &= 127;
-  e[31] |= 64;
-  ge_scalarmult_base(&A, e);
-  edwards_to_montgomery(pk, A.Y, A.Z);
-  fe_tobytes(q, pk);
-  return 0;
+    unsigned char e[32];
+    ge_p3         A;
+    fe            pk;
+    unsigned int  i;
+
+    for (i = 0; i < 32; ++i) {
+        e[i] = n[i];
+    }
+    e[0] &= 248;
+    e[31] &= 127;
+    e[31] |= 64;
+    ge_scalarmult_base(&A, e);
+    edwards_to_montgomery(pk, A.Y, A.Z);
+    fe_tobytes(q, pk);
+
+    return 0;
 }
 
 struct crypto_scalarmult_curve25519_implementation
-crypto_scalarmult_curve25519_ref10_implementation = {
-        SODIUM_C99(.mult = ) crypto_scalarmult_curve25519_ref10,
-        SODIUM_C99(.mult_base = ) crypto_scalarmult_curve25519_ref10_base
-};
+    crypto_scalarmult_curve25519_ref10_implementation = {
+        SODIUM_C99(.mult =) crypto_scalarmult_curve25519_ref10,
+        SODIUM_C99(.mult_base =) crypto_scalarmult_curve25519_ref10_base
+    };
 
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_secretbox/crypto_secretbox.c libsodium-1.0.12/src/libsodium/crypto_secretbox/crypto_secretbox.c
--- libsodium-1.0.11/src/libsodium/crypto_secretbox/crypto_secretbox.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_secretbox/crypto_secretbox.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,5 +1,6 @@
 
 #include "crypto_secretbox.h"
+#include "randombytes.h"
 
 size_t
 crypto_secretbox_keybytes(void)
@@ -52,3 +53,9 @@ crypto_secretbox_open(unsigned char *m,
 {
     return crypto_secretbox_xsalsa20poly1305_open(m, c, clen, n, k);
 }
+
+void
+crypto_secretbox_keygen(unsigned char k[crypto_secretbox_KEYBYTES])
+{
+    randombytes_buf(k, crypto_secretbox_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_secretbox/crypto_secretbox_easy.c libsodium-1.0.12/src/libsodium/crypto_secretbox/crypto_secretbox_easy.c
--- libsodium-1.0.11/src/libsodium/crypto_secretbox/crypto_secretbox_easy.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_secretbox/crypto_secretbox_easy.c	2017-03-06 11:13:57.000000000 +0100
@@ -9,6 +9,7 @@
 #include "crypto_onetimeauth_poly1305.h"
 #include "crypto_secretbox.h"
 #include "crypto_stream_salsa20.h"
+#include "private/common.h"
 #include "utils.h"
 
 int
@@ -33,7 +34,7 @@ crypto_secretbox_detached(unsigned char
         m = c;
     }
     memset(block0, 0U, crypto_secretbox_ZEROBYTES);
-    (void) sizeof(int[64U >= crypto_secretbox_ZEROBYTES ? 1 : -1]);
+    COMPILER_ASSERT(64U >= crypto_secretbox_ZEROBYTES);
     mlen0 = mlen;
     if (mlen0 > 64U - crypto_secretbox_ZEROBYTES) {
         mlen0 = 64U - crypto_secretbox_ZEROBYTES;
@@ -44,8 +45,8 @@ crypto_secretbox_detached(unsigned char
     crypto_stream_salsa20_xor(block0, block0,
                               mlen0 + crypto_secretbox_ZEROBYTES,
                               n + 16, subkey);
-    (void) sizeof(int[crypto_secretbox_ZEROBYTES >=
-                      crypto_onetimeauth_poly1305_KEYBYTES ? 1 : -1]);
+    COMPILER_ASSERT(crypto_secretbox_ZEROBYTES >=
+                    crypto_onetimeauth_poly1305_KEYBYTES);
     crypto_onetimeauth_poly1305_init(&state, block0);
 
     for (i = 0U; i < mlen0; i++) {
diff -urpN libsodium-1.0.11/src/libsodium/crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c libsodium-1.0.12/src/libsodium/crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,170 @@
+
+#include <assert.h>
+#include <limits.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "crypto_core_hchacha20.h"
+#include "crypto_onetimeauth_poly1305.h"
+#include "crypto_secretbox_xchacha20poly1305.h"
+#include "crypto_stream_chacha20.h"
+#include "private/common.h"
+#include "utils.h"
+
+#define crypto_secretbox_xchacha20poly1305_ZEROBYTES 32U
+
+int
+crypto_secretbox_xchacha20poly1305_detached(unsigned char *c,
+                                            unsigned char *mac,
+                                            const unsigned char *m,
+                                            unsigned long long mlen,
+                                            const unsigned char *n,
+                                            const unsigned char *k)
+{
+    crypto_onetimeauth_poly1305_state state;
+    unsigned char                     block0[64U];
+    unsigned char                     subkey[crypto_stream_chacha20_KEYBYTES];
+    unsigned long long                i;
+    unsigned long long                mlen0;
+
+    crypto_core_hchacha20(subkey, n, k, NULL);
+
+    if (((uintptr_t) c >= (uintptr_t) m &&
+         (uintptr_t) c - (uintptr_t) m < mlen) ||
+        ((uintptr_t) m >= (uintptr_t) c &&
+         (uintptr_t) m - (uintptr_t) c < mlen)) {
+        memmove(c, m, mlen);
+        m = c;
+    }
+    memset(block0, 0U, crypto_secretbox_xchacha20poly1305_ZEROBYTES);
+    COMPILER_ASSERT(64U >= crypto_secretbox_xchacha20poly1305_ZEROBYTES);
+    mlen0 = mlen;
+    if (mlen0 > 64U - crypto_secretbox_xchacha20poly1305_ZEROBYTES) {
+        mlen0 = 64U - crypto_secretbox_xchacha20poly1305_ZEROBYTES;
+    }
+    for (i = 0U; i < mlen0; i++) {
+        block0[i + crypto_secretbox_xchacha20poly1305_ZEROBYTES] = m[i];
+    }
+    crypto_stream_chacha20_xor(block0, block0,
+                               mlen0 + crypto_secretbox_xchacha20poly1305_ZEROBYTES,
+                               n + 16, subkey);
+    COMPILER_ASSERT(crypto_secretbox_xchacha20poly1305_ZEROBYTES >=
+                    crypto_onetimeauth_poly1305_KEYBYTES);
+    crypto_onetimeauth_poly1305_init(&state, block0);
+
+    for (i = 0U; i < mlen0; i++) {
+        c[i] = block0[crypto_secretbox_xchacha20poly1305_ZEROBYTES + i];
+    }
+    sodium_memzero(block0, sizeof block0);
+    if (mlen > mlen0) {
+        crypto_stream_chacha20_xor_ic(c + mlen0, m + mlen0, mlen - mlen0,
+                                      n + 16, 1U, subkey);
+    }
+    sodium_memzero(subkey, sizeof subkey);
+
+    crypto_onetimeauth_poly1305_update(&state, c, mlen);
+    crypto_onetimeauth_poly1305_final(&state, mac);
+    sodium_memzero(&state, sizeof state);
+
+    return 0;
+}
+
+int
+crypto_secretbox_xchacha20poly1305_easy(unsigned char *c,
+                                        const unsigned char *m,
+                                        unsigned long long mlen,
+                                        const unsigned char *n,
+                                        const unsigned char *k)
+{
+    if (mlen > SIZE_MAX - crypto_secretbox_xchacha20poly1305_MACBYTES) {
+        return -1;
+    }
+    return crypto_secretbox_xchacha20poly1305_detached
+        (c + crypto_secretbox_xchacha20poly1305_MACBYTES, c, m, mlen, n, k);
+}
+
+int
+crypto_secretbox_xchacha20poly1305_open_detached(unsigned char *m,
+                                                 const unsigned char *c,
+                                                 const unsigned char *mac,
+                                                 unsigned long long clen,
+                                                 const unsigned char *n,
+                                                 const unsigned char *k)
+{
+    unsigned char      block0[64U];
+    unsigned char      subkey[crypto_stream_chacha20_KEYBYTES];
+    unsigned long long i;
+    unsigned long long mlen0;
+
+    crypto_core_hchacha20(subkey, n, k, NULL);
+    crypto_stream_chacha20(block0, crypto_stream_chacha20_KEYBYTES,
+                           n + 16, subkey);
+    if (crypto_onetimeauth_poly1305_verify(mac, c, clen, block0) != 0) {
+        sodium_memzero(subkey, sizeof subkey);
+        return -1;
+    }
+    if (m == NULL) {
+        return 0;
+    }
+    if (((uintptr_t) c >= (uintptr_t) m &&
+         (uintptr_t) c - (uintptr_t) m < clen) ||
+        ((uintptr_t) m >= (uintptr_t) c &&
+         (uintptr_t) m - (uintptr_t) c < clen)) {
+        memmove(m, c, clen);
+        c = m;
+    }
+    mlen0 = clen;
+    if (mlen0 > 64U - crypto_secretbox_xchacha20poly1305_ZEROBYTES) {
+        mlen0 = 64U - crypto_secretbox_xchacha20poly1305_ZEROBYTES;
+    }
+    for (i = 0U; i < mlen0; i++) {
+        block0[crypto_secretbox_xchacha20poly1305_ZEROBYTES + i] = c[i];
+    }
+    crypto_stream_chacha20_xor(block0, block0,
+                              crypto_secretbox_xchacha20poly1305_ZEROBYTES + mlen0,
+                              n + 16, subkey);
+    for (i = 0U; i < mlen0; i++) {
+        m[i] = block0[i + crypto_secretbox_xchacha20poly1305_ZEROBYTES];
+    }
+    if (clen > mlen0) {
+        crypto_stream_chacha20_xor_ic(m + mlen0, c + mlen0, clen - mlen0,
+                                      n + 16, 1U, subkey);
+    }
+    sodium_memzero(subkey, sizeof subkey);
+
+    return 0;
+}
+
+int
+crypto_secretbox_xchacha20poly1305_open_easy(unsigned char *m,
+                                             const unsigned char *c,
+                                             unsigned long long clen,
+                                             const unsigned char *n,
+                                             const unsigned char *k)
+{
+    if (clen < crypto_secretbox_xchacha20poly1305_MACBYTES) {
+        return -1;
+    }
+    return crypto_secretbox_xchacha20poly1305_open_detached
+        (m, c + crypto_secretbox_xchacha20poly1305_MACBYTES, c,
+         clen - crypto_secretbox_xchacha20poly1305_MACBYTES, n, k);
+}
+
+size_t
+crypto_secretbox_xchacha20poly1305_keybytes(void)
+{
+    return crypto_secretbox_xchacha20poly1305_KEYBYTES;
+}
+
+size_t
+crypto_secretbox_xchacha20poly1305_noncebytes(void)
+{
+    return crypto_secretbox_xchacha20poly1305_NONCEBYTES;
+}
+
+size_t
+crypto_secretbox_xchacha20poly1305_macbytes(void)
+{
+    return crypto_secretbox_xchacha20poly1305_MACBYTES;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c libsodium-1.0.12/src/libsodium/crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,35 +0,0 @@
-#include "crypto_onetimeauth_poly1305.h"
-#include "crypto_secretbox_xsalsa20poly1305.h"
-#include "crypto_stream_xsalsa20.h"
-
-int crypto_secretbox_xsalsa20poly1305(
-  unsigned char *c,
-  const unsigned char *m,unsigned long long mlen,
-  const unsigned char *n,
-  const unsigned char *k
-)
-{
-  int i;
-  if (mlen < 32) return -1;
-  crypto_stream_xsalsa20_xor(c,m,mlen,n,k);
-  crypto_onetimeauth_poly1305(c + 16,c + 32,mlen - 32,c);
-  for (i = 0;i < 16;++i) c[i] = 0;
-  return 0;
-}
-
-int crypto_secretbox_xsalsa20poly1305_open(
-  unsigned char *m,
-  const unsigned char *c,unsigned long long clen,
-  const unsigned char *n,
-  const unsigned char *k
-)
-{
-  int i;
-  unsigned char subkey[32];
-  if (clen < 32) return -1;
-  crypto_stream_xsalsa20(subkey,32,n,k);
-  if (crypto_onetimeauth_poly1305_verify(c + 16,c + 32,clen - 32,subkey) != 0) return -1;
-  crypto_stream_xsalsa20_xor(m,c,clen,n,k);
-  for (i = 0;i < 32;++i) m[i] = 0;
-  return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c libsodium-1.0.12/src/libsodium/crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c
--- libsodium-1.0.11/src/libsodium/crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,26 +0,0 @@
-#include "crypto_secretbox_xsalsa20poly1305.h"
-
-size_t
-crypto_secretbox_xsalsa20poly1305_keybytes(void) {
-    return crypto_secretbox_xsalsa20poly1305_KEYBYTES;
-}
-
-size_t
-crypto_secretbox_xsalsa20poly1305_noncebytes(void) {
-    return crypto_secretbox_xsalsa20poly1305_NONCEBYTES;
-}
-
-size_t
-crypto_secretbox_xsalsa20poly1305_zerobytes(void) {
-    return crypto_secretbox_xsalsa20poly1305_ZEROBYTES;
-}
-
-size_t
-crypto_secretbox_xsalsa20poly1305_boxzerobytes(void) {
-    return crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES;
-}
-
-size_t
-crypto_secretbox_xsalsa20poly1305_macbytes(void) {
-    return crypto_secretbox_xsalsa20poly1305_MACBYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c libsodium-1.0.12/src/libsodium/crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c
--- libsodium-1.0.11/src/libsodium/crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,83 @@
+#include "crypto_onetimeauth_poly1305.h"
+#include "crypto_secretbox_xsalsa20poly1305.h"
+#include "crypto_stream_xsalsa20.h"
+#include "randombytes.h"
+
+int
+crypto_secretbox_xsalsa20poly1305(unsigned char *c, const unsigned char *m,
+                                  unsigned long long mlen,
+                                  const unsigned char *n,
+                                  const unsigned char *k)
+{
+    int i;
+
+    if (mlen < 32) {
+        return -1;
+    }
+    crypto_stream_xsalsa20_xor(c, m, mlen, n, k);
+    crypto_onetimeauth_poly1305(c + 16, c + 32, mlen - 32, c);
+    for (i = 0; i < 16; ++i) {
+        c[i] = 0;
+    }
+    return 0;
+}
+
+int
+crypto_secretbox_xsalsa20poly1305_open(unsigned char *m, const unsigned char *c,
+                                       unsigned long long clen,
+                                       const unsigned char *n,
+                                       const unsigned char *k)
+{
+    unsigned char subkey[32];
+    int           i;
+
+    if (clen < 32) {
+        return -1;
+    }
+    crypto_stream_xsalsa20(subkey, 32, n, k);
+    if (crypto_onetimeauth_poly1305_verify(c + 16, c + 32,
+                                           clen - 32, subkey) != 0) {
+        return -1;
+    }
+    crypto_stream_xsalsa20_xor(m, c, clen, n, k);
+    for (i = 0; i < 32; ++i) {
+        m[i] = 0;
+    }
+    return 0;
+}
+
+size_t
+crypto_secretbox_xsalsa20poly1305_keybytes(void)
+{
+    return crypto_secretbox_xsalsa20poly1305_KEYBYTES;
+}
+
+size_t
+crypto_secretbox_xsalsa20poly1305_noncebytes(void)
+{
+    return crypto_secretbox_xsalsa20poly1305_NONCEBYTES;
+}
+
+size_t
+crypto_secretbox_xsalsa20poly1305_zerobytes(void)
+{
+    return crypto_secretbox_xsalsa20poly1305_ZEROBYTES;
+}
+
+size_t
+crypto_secretbox_xsalsa20poly1305_boxzerobytes(void)
+{
+    return crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES;
+}
+
+size_t
+crypto_secretbox_xsalsa20poly1305_macbytes(void)
+{
+    return crypto_secretbox_xsalsa20poly1305_MACBYTES;
+}
+
+void
+crypto_secretbox_xsalsa20poly1305_keygen(unsigned char k[crypto_secretbox_xsalsa20poly1305_KEYBYTES])
+{
+    randombytes_buf(k, crypto_secretbox_xsalsa20poly1305_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_shorthash/crypto_shorthash.c libsodium-1.0.12/src/libsodium/crypto_shorthash/crypto_shorthash.c
--- libsodium-1.0.11/src/libsodium/crypto_shorthash/crypto_shorthash.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_shorthash/crypto_shorthash.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,5 +1,6 @@
 
 #include "crypto_shorthash.h"
+#include "randombytes.h"
 
 size_t
 crypto_shorthash_bytes(void)
@@ -25,3 +26,9 @@ crypto_shorthash(unsigned char *out, con
 {
     return crypto_shorthash_siphash24(out, in, inlen, k);
 }
+
+void
+crypto_shorthash_keygen(unsigned char k[crypto_shorthash_KEYBYTES])
+{
+    randombytes_buf(k, crypto_shorthash_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash24.c libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash24.c
--- libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash24.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash24.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,72 +0,0 @@
-#include "crypto_shorthash_siphash24.h"
-#include "private/common.h"
-
-typedef uint64_t u64;
-typedef uint32_t u32;
-typedef uint8_t   u8;
-
-#define ROTL(x,b) (u64)( ((x) << (b)) | ( (x) >> (64 - (b))) )
-
-#define SIPROUND            \
-  do {              \
-    v0 += v1; v1=ROTL(v1,13); v1 ^= v0; v0=ROTL(v0,32); \
-    v2 += v3; v3=ROTL(v3,16); v3 ^= v2;     \
-    v0 += v3; v3=ROTL(v3,21); v3 ^= v0;     \
-    v2 += v1; v1=ROTL(v1,17); v1 ^= v2; v2=ROTL(v2,32); \
-  } while(0)
-
-int crypto_shorthash_siphash24(unsigned char *out, const unsigned char *in,
-                               unsigned long long inlen, const unsigned char *k)
-{
-  /* "somepseudorandomlygeneratedbytes" */
-  u64 v0 = 0x736f6d6570736575ULL;
-  u64 v1 = 0x646f72616e646f6dULL;
-  u64 v2 = 0x6c7967656e657261ULL;
-  u64 v3 = 0x7465646279746573ULL;
-  u64 b;
-  u64 k0 = LOAD64_LE( k );
-  u64 k1 = LOAD64_LE( k + 8 );
-  u64 m;
-  const u8 *end = in + inlen - ( inlen % sizeof( u64 ) );
-  const int left = inlen & 7;
-  b = ( ( u64 )inlen ) << 56;
-  v3 ^= k1;
-  v2 ^= k0;
-  v1 ^= k1;
-  v0 ^= k0;
-
-  for ( ; in != end; in += 8 )
-  {
-    m = LOAD64_LE( in );
-    v3 ^= m;
-    SIPROUND;
-    SIPROUND;
-    v0 ^= m;
-  }
-
-  switch( left )
-  {
-  case 7: b |= ( ( u64 )in[ 6] )  << 48;
-  case 6: b |= ( ( u64 )in[ 5] )  << 40;
-  case 5: b |= ( ( u64 )in[ 4] )  << 32;
-  case 4: b |= ( ( u64 )in[ 3] )  << 24;
-  case 3: b |= ( ( u64 )in[ 2] )  << 16;
-  case 2: b |= ( ( u64 )in[ 1] )  <<  8;
-  case 1: b |= ( ( u64 )in[ 0] ); break;
-  case 0: break;
-  }
-
-  v3 ^= b;
-  SIPROUND;
-  SIPROUND;
-  v0 ^= b;
-  v2 ^= 0xff;
-  SIPROUND;
-  SIPROUND;
-  SIPROUND;
-  SIPROUND;
-  b = v0 ^ v1 ^ v2  ^ v3;
-  STORE64_LE( out, b );
-  return 0;
-}
-
diff -urpN libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c
--- libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,65 @@
+#include "crypto_shorthash_siphash24.h"
+#include "private/common.h"
+#include "shorthash_siphash_ref.h"
+
+int
+crypto_shorthash_siphash24(unsigned char *out, const unsigned char *in,
+                           unsigned long long inlen, const unsigned char *k)
+{
+    /* "somepseudorandomlygeneratedbytes" */
+    uint64_t       v0 = 0x736f6d6570736575ULL;
+    uint64_t       v1 = 0x646f72616e646f6dULL;
+    uint64_t       v2 = 0x6c7967656e657261ULL;
+    uint64_t       v3 = 0x7465646279746573ULL;
+    uint64_t       b;
+    uint64_t       k0 = LOAD64_LE(k);
+    uint64_t       k1 = LOAD64_LE(k + 8);
+    uint64_t       m;
+    const uint8_t *end  = in + inlen - (inlen % sizeof(uint64_t));
+    const int      left = inlen & 7;
+
+    b = ((uint64_t) inlen) << 56;
+    v3 ^= k1;
+    v2 ^= k0;
+    v1 ^= k1;
+    v0 ^= k0;
+    for (; in != end; in += 8) {
+        m = LOAD64_LE(in);
+        v3 ^= m;
+        SIPROUND;
+        SIPROUND;
+        v0 ^= m;
+    }
+    switch (left) {
+    case 7:
+        b |= ((uint64_t) in[6]) << 48;
+    case 6:
+        b |= ((uint64_t) in[5]) << 40;
+    case 5:
+        b |= ((uint64_t) in[4]) << 32;
+    case 4:
+        b |= ((uint64_t) in[3]) << 24;
+    case 3:
+        b |= ((uint64_t) in[2]) << 16;
+    case 2:
+        b |= ((uint64_t) in[1]) << 8;
+    case 1:
+        b |= ((uint64_t) in[0]);
+        break;
+    case 0:
+        break;
+    }
+    v3 ^= b;
+    SIPROUND;
+    SIPROUND;
+    v0 ^= b;
+    v2 ^= 0xff;
+    SIPROUND;
+    SIPROUND;
+    SIPROUND;
+    SIPROUND;
+    b = v0 ^ v1 ^ v2 ^ v3;
+    STORE64_LE(out, b);
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash_ref.h libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash_ref.h
--- libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash_ref.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphash_ref.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,24 @@
+#ifndef shorthash_siphash_H
+#define shorthash_siphash_H
+
+#include "private/common.h"
+
+#define SIPROUND             \
+    do {                     \
+        v0 += v1;            \
+        v1 = ROTL64(v1, 13); \
+        v1 ^= v0;            \
+        v0 = ROTL64(v0, 32); \
+        v2 += v3;            \
+        v3 = ROTL64(v3, 16); \
+        v3 ^= v2;            \
+        v0 += v3;            \
+        v3 = ROTL64(v3, 21); \
+        v3 ^= v0;            \
+        v2 += v1;            \
+        v1 = ROTL64(v1, 17); \
+        v1 ^= v2;            \
+        v2 = ROTL64(v2, 32); \
+    } while (0)
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c
--- libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,71 @@
+#include "crypto_shorthash_siphash24.h"
+#include "private/common.h"
+#include "shorthash_siphash_ref.h"
+
+int
+crypto_shorthash_siphashx24(unsigned char *out, const unsigned char *in,
+                            unsigned long long inlen, const unsigned char *k)
+{
+    uint64_t       v0 = 0x736f6d6570736575ULL;
+    uint64_t       v1 = 0x646f72616e646f83ULL;
+    uint64_t       v2 = 0x6c7967656e657261ULL;
+    uint64_t       v3 = 0x7465646279746573ULL;
+    uint64_t       b;
+    uint64_t       k0 = LOAD64_LE(k);
+    uint64_t       k1 = LOAD64_LE(k + 8);
+    uint64_t       m;
+    const uint8_t *end  = in + inlen - (inlen % sizeof(uint64_t));
+    const int      left = inlen & 7;
+
+    b = ((uint64_t) inlen) << 56;
+    v3 ^= k1;
+    v2 ^= k0;
+    v1 ^= k1;
+    v0 ^= k0;
+    for (; in != end; in += 8) {
+        m = LOAD64_LE(in);
+        v3 ^= m;
+        SIPROUND;
+        SIPROUND;
+        v0 ^= m;
+    }
+    switch (left) {
+    case 7:
+        b |= ((uint64_t) in[6]) << 48;
+    case 6:
+        b |= ((uint64_t) in[5]) << 40;
+    case 5:
+        b |= ((uint64_t) in[4]) << 32;
+    case 4:
+        b |= ((uint64_t) in[3]) << 24;
+    case 3:
+        b |= ((uint64_t) in[2]) << 16;
+    case 2:
+        b |= ((uint64_t) in[1]) << 8;
+    case 1:
+        b |= ((uint64_t) in[0]);
+        break;
+    case 0:
+        break;
+    }
+    v3 ^= b;
+    SIPROUND;
+    SIPROUND;
+    v0 ^= b;
+    v2 ^= 0xee;
+    SIPROUND;
+    SIPROUND;
+    SIPROUND;
+    SIPROUND;
+    b = v0 ^ v1 ^ v2 ^ v3;
+    STORE64_LE(out, b);
+    v1 ^= 0xdd;
+    SIPROUND;
+    SIPROUND;
+    SIPROUND;
+    SIPROUND;
+    b = v0 ^ v1 ^ v2 ^ v3;
+    STORE64_LE(out + 8, b);
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/shorthash_siphash24_api.c libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/shorthash_siphash24_api.c
--- libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/shorthash_siphash24_api.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/shorthash_siphash24_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,11 +0,0 @@
-#include "crypto_shorthash_siphash24.h"
-
-size_t
-crypto_shorthash_siphash24_bytes(void) {
-    return crypto_shorthash_siphash24_BYTES;
-}
-
-size_t
-crypto_shorthash_siphash24_keybytes(void) {
-    return crypto_shorthash_siphash24_KEYBYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/shorthash_siphash24.c libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/shorthash_siphash24.c
--- libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/shorthash_siphash24.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/shorthash_siphash24.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,11 @@
+#include "crypto_shorthash_siphash24.h"
+
+size_t
+crypto_shorthash_siphash24_bytes(void) {
+    return crypto_shorthash_siphash24_BYTES;
+}
+
+size_t
+crypto_shorthash_siphash24_keybytes(void) {
+    return crypto_shorthash_siphash24_KEYBYTES;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/shorthash_siphashx24.c libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/shorthash_siphashx24.c
--- libsodium-1.0.11/src/libsodium/crypto_shorthash/siphash24/shorthash_siphashx24.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_shorthash/siphash24/shorthash_siphashx24.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,11 @@
+#include "crypto_shorthash_siphash24.h"
+
+size_t
+crypto_shorthash_siphashx24_bytes(void) {
+    return crypto_shorthash_siphashx24_BYTES;
+}
+
+size_t
+crypto_shorthash_siphashx24_keybytes(void) {
+    return crypto_shorthash_siphashx24_KEYBYTES;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_sign/crypto_sign.c libsodium-1.0.12/src/libsodium/crypto_sign/crypto_sign.c
--- libsodium-1.0.11/src/libsodium/crypto_sign/crypto_sign.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_sign/crypto_sign.c	2017-03-06 23:32:40.000000000 +0100
@@ -2,6 +2,12 @@
 #include "crypto_sign.h"
 
 size_t
+crypto_sign_statebytes(void)
+{
+    return sizeof(crypto_sign_state);
+}
+
+size_t
 crypto_sign_bytes(void)
 {
     return crypto_sign_BYTES;
@@ -74,3 +80,30 @@ crypto_sign_verify_detached(const unsign
 {
     return crypto_sign_ed25519_verify_detached(sig, m, mlen, pk);
 }
+
+int
+crypto_sign_init(crypto_sign_state *state)
+{
+    return crypto_sign_ed25519ph_init(state);
+}
+
+int
+crypto_sign_update(crypto_sign_state *state, const unsigned char *m,
+                   unsigned long long mlen)
+{
+    return crypto_sign_ed25519ph_update(state, m, mlen);
+}
+
+int
+crypto_sign_final_create(crypto_sign_state *state, unsigned char *sig,
+                         unsigned long long *siglen_p, const unsigned char *sk)
+{
+    return crypto_sign_ed25519ph_final_create(state, sig, siglen_p, sk);
+}
+
+int
+crypto_sign_final_verify(crypto_sign_state *state, unsigned char *sig,
+                         const unsigned char *pk)
+{
+    return crypto_sign_ed25519ph_final_verify(state, sig, pk);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/ref10/ed25519_ref10.h libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/ref10/ed25519_ref10.h
--- libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/ref10/ed25519_ref10.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/ref10/ed25519_ref10.h	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,18 @@
+#ifndef ed25519_ref10_H
+#define ed25519_ref10_H
+
+void _crypto_sign_ed25519_ref10_hinit(crypto_hash_sha512_state *hs,
+                                      int prehashed);
+
+int _crypto_sign_ed25519_detached(unsigned char *sig,
+                                  unsigned long long *siglen_p,
+                                  const unsigned char *m,
+                                  unsigned long long mlen,
+                                  const unsigned char *sk, int prehashed);
+
+int _crypto_sign_ed25519_verify_detached(const unsigned char *sig,
+                                         const unsigned char *m,
+                                         unsigned long long   mlen,
+                                         const unsigned char *pk,
+                                         int prehashed);
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/ref10/keypair.c libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/ref10/keypair.c
--- libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/ref10/keypair.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/ref10/keypair.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,32 +1,35 @@
 
 #include <string.h>
 
-#include "crypto_sign_ed25519.h"
 #include "crypto_hash_sha512.h"
 #include "crypto_scalarmult_curve25519.h"
+#include "crypto_sign_ed25519.h"
+#include "private/curve25519_ref10.h"
 #include "randombytes.h"
 #include "utils.h"
-#include "private/curve25519_ref10.h"
 
-int crypto_sign_ed25519_seed_keypair(unsigned char *pk, unsigned char *sk,
-                                     const unsigned char *seed)
+int
+crypto_sign_ed25519_seed_keypair(unsigned char *pk, unsigned char *sk,
+                                 const unsigned char *seed)
 {
     ge_p3 A;
 
-    crypto_hash_sha512(sk,seed,32);
+    crypto_hash_sha512(sk, seed, 32);
     sk[0] &= 248;
     sk[31] &= 63;
     sk[31] |= 64;
 
-    ge_scalarmult_base(&A,sk);
-    ge_p3_tobytes(pk,&A);
+    ge_scalarmult_base(&A, sk);
+    ge_p3_tobytes(pk, &A);
 
     memmove(sk, seed, 32);
     memmove(sk + 32, pk, 32);
+
     return 0;
 }
 
-int crypto_sign_ed25519_keypair(unsigned char *pk, unsigned char *sk)
+int
+crypto_sign_ed25519_keypair(unsigned char *pk, unsigned char *sk)
 {
     unsigned char seed[32];
     int           ret;
@@ -38,8 +41,9 @@ int crypto_sign_ed25519_keypair(unsigned
     return ret;
 }
 
-int crypto_sign_ed25519_pk_to_curve25519(unsigned char *curve25519_pk,
-                                         const unsigned char *ed25519_pk)
+int
+crypto_sign_ed25519_pk_to_curve25519(unsigned char *      curve25519_pk,
+                                     const unsigned char *ed25519_pk)
 {
     ge_p3 A;
     fe    x;
@@ -59,14 +63,15 @@ int crypto_sign_ed25519_pk_to_curve25519
     return 0;
 }
 
-int crypto_sign_ed25519_sk_to_curve25519(unsigned char *curve25519_sk,
-                                         const unsigned char *ed25519_sk)
+int
+crypto_sign_ed25519_sk_to_curve25519(unsigned char *      curve25519_sk,
+                                     const unsigned char *ed25519_sk)
 {
     unsigned char h[crypto_hash_sha512_BYTES];
 
     crypto_hash_sha512(h, ed25519_sk,
                        crypto_sign_ed25519_SECRETKEYBYTES -
-                       crypto_sign_ed25519_PUBLICKEYBYTES);
+                           crypto_sign_ed25519_PUBLICKEYBYTES);
     h[0] &= 248;
     h[31] &= 127;
     h[31] |= 64;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/ref10/obsolete.c libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/ref10/obsolete.c
--- libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/ref10/obsolete.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/ref10/obsolete.c	2017-03-06 11:13:57.000000000 +0100
@@ -6,12 +6,13 @@
 #include "crypto_hash_sha512.h"
 #include "crypto_sign_edwards25519sha512batch.h"
 #include "crypto_verify_32.h"
+#include "private/curve25519_ref10.h"
 #include "randombytes.h"
 #include "utils.h"
-#include "private/curve25519_ref10.h"
 
-int crypto_sign_edwards25519sha512batch_keypair(unsigned char *pk,
-                                                unsigned char *sk)
+int
+crypto_sign_edwards25519sha512batch_keypair(unsigned char *pk,
+                                            unsigned char *sk)
 {
     ge_p3 A;
 
@@ -26,18 +27,19 @@ int crypto_sign_edwards25519sha512batch_
     return 0;
 }
 
-int crypto_sign_edwards25519sha512batch(unsigned char *sm,
-                                        unsigned long long *smlen_p,
-                                        const unsigned char *m,
-                                        unsigned long long mlen,
-                                        const unsigned char *sk)
+int
+crypto_sign_edwards25519sha512batch(unsigned char *      sm,
+                                    unsigned long long * smlen_p,
+                                    const unsigned char *m,
+                                    unsigned long long   mlen,
+                                    const unsigned char *sk)
 {
     crypto_hash_sha512_state hs;
-    unsigned char nonce[64];
-    unsigned char hram[64];
-    unsigned char sig[64];
-    ge_p3 A;
-    ge_p3 R;
+    unsigned char            nonce[64];
+    unsigned char            hram[64];
+    unsigned char            sig[64];
+    ge_p3                    A;
+    ge_p3                    R;
 
     crypto_hash_sha512_init(&hs);
     crypto_hash_sha512_update(&hs, sk + 32, 32);
@@ -63,21 +65,22 @@ int crypto_sign_edwards25519sha512batch(
     return 0;
 }
 
-int crypto_sign_edwards25519sha512batch_open(unsigned char *m,
-                                             unsigned long long *mlen_p,
-                                             const unsigned char *sm,
-                                             unsigned long long smlen,
-                                             const unsigned char *pk)
+int
+crypto_sign_edwards25519sha512batch_open(unsigned char *      m,
+                                         unsigned long long * mlen_p,
+                                         const unsigned char *sm,
+                                         unsigned long long   smlen,
+                                         const unsigned char *pk)
 {
-    unsigned char h[64];
-    unsigned char t1[32], t2[32];
+    unsigned char      h[64];
+    unsigned char      t1[32], t2[32];
     unsigned long long mlen;
-    ge_cached Ai;
-    ge_p1p1 csa;
-    ge_p2 cs;
-    ge_p3 A;
-    ge_p3 R;
-    ge_p3 cs3;
+    ge_cached          Ai;
+    ge_p1p1            csa;
+    ge_p2              cs;
+    ge_p3              A;
+    ge_p3              R;
+    ge_p3              cs3;
 
     *mlen_p = 0;
     if (smlen < 64 || smlen > SIZE_MAX) {
diff -urpN libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/ref10/open.c libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/ref10/open.c
--- libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/ref10/open.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/ref10/open.c	2017-03-06 23:32:40.000000000 +0100
@@ -6,19 +6,20 @@
 #include "crypto_hash_sha512.h"
 #include "crypto_sign_ed25519.h"
 #include "crypto_verify_32.h"
-#include "utils.h"
+#include "ed25519_ref10.h"
 #include "private/curve25519_ref10.h"
+#include "utils.h"
 
 #ifndef ED25519_COMPAT
 static int
 crypto_sign_check_S_lt_L(const unsigned char *S)
 {
     /* 2^252+27742317777372353535851937790883648493 */
-    static const unsigned char L[32] =
-      { 0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
-        0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10 };
+    static const unsigned char L[32] = {
+        0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7,
+        0xa2, 0xde, 0xf9, 0xde, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
+    };
     unsigned char c = 0;
     unsigned char n = 1;
     unsigned int  i = 32;
@@ -35,31 +36,60 @@ crypto_sign_check_S_lt_L(const unsigned
 static int
 small_order(const unsigned char R[32])
 {
-    CRYPTO_ALIGN(16) static const unsigned char blacklist[][32] = {
+    CRYPTO_ALIGN(16)
+    static const unsigned char blacklist[][32] = {
         /* 0 (order 4) */
-        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
+        { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
         /* 1 (order 1) */
-        { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
-        /* 2707385501144840649318225287225658788936804267575313519463743609750303402022 (order 8) */
-        { 0x26, 0xe8, 0x95, 0x8f, 0xc2, 0xb2, 0x27, 0xb0, 0x45, 0xc3, 0xf4, 0x89, 0xf2, 0xef, 0x98, 0xf0, 0xd5, 0xdf, 0xac, 0x05, 0xd3, 0xc6, 0x33, 0x39, 0xb1, 0x38, 0x02, 0x88, 0x6d, 0x53, 0xfc, 0x05 },
-        /* 55188659117513257062467267217118295137698188065244968500265048394206261417927 (order 8) */
-        { 0xc7, 0x17, 0x6a, 0x70, 0x3d, 0x4d, 0xd8, 0x4f, 0xba, 0x3c, 0x0b, 0x76, 0x0d, 0x10, 0x67, 0x0f, 0x2a, 0x20, 0x53, 0xfa, 0x2c, 0x39, 0xcc, 0xc6, 0x4e, 0xc7, 0xfd, 0x77, 0x92, 0xac, 0x03, 0x7a },
+        { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
+        /* 2707385501144840649318225287225658788936804267575313519463743609750303402022
+           (order 8) */
+        { 0x26, 0xe8, 0x95, 0x8f, 0xc2, 0xb2, 0x27, 0xb0, 0x45, 0xc3, 0xf4,
+          0x89, 0xf2, 0xef, 0x98, 0xf0, 0xd5, 0xdf, 0xac, 0x05, 0xd3, 0xc6,
+          0x33, 0x39, 0xb1, 0x38, 0x02, 0x88, 0x6d, 0x53, 0xfc, 0x05 },
+        /* 55188659117513257062467267217118295137698188065244968500265048394206261417927
+           (order 8) */
+        { 0xc7, 0x17, 0x6a, 0x70, 0x3d, 0x4d, 0xd8, 0x4f, 0xba, 0x3c, 0x0b,
+          0x76, 0x0d, 0x10, 0x67, 0x0f, 0x2a, 0x20, 0x53, 0xfa, 0x2c, 0x39,
+          0xcc, 0xc6, 0x4e, 0xc7, 0xfd, 0x77, 0x92, 0xac, 0x03, 0x7a },
         /* p-1 (order 2) */
-        { 0x13, 0xe8, 0x95, 0x8f, 0xc2, 0xb2, 0x27, 0xb0, 0x45, 0xc3, 0xf4, 0x89, 0xf2, 0xef, 0x98, 0xf0, 0xd5, 0xdf, 0xac, 0x05, 0xd3, 0xc6, 0x33, 0x39, 0xb1, 0x38, 0x02, 0x88, 0x6d, 0x53, 0xfc, 0x85 },
+        { 0x13, 0xe8, 0x95, 0x8f, 0xc2, 0xb2, 0x27, 0xb0, 0x45, 0xc3, 0xf4,
+          0x89, 0xf2, 0xef, 0x98, 0xf0, 0xd5, 0xdf, 0xac, 0x05, 0xd3, 0xc6,
+          0x33, 0x39, 0xb1, 0x38, 0x02, 0x88, 0x6d, 0x53, 0xfc, 0x85 },
         /* p (order 4) */
-        { 0xb4, 0x17, 0x6a, 0x70, 0x3d, 0x4d, 0xd8, 0x4f, 0xba, 0x3c, 0x0b, 0x76, 0x0d, 0x10, 0x67, 0x0f, 0x2a, 0x20, 0x53, 0xfa, 0x2c, 0x39, 0xcc, 0xc6, 0x4e, 0xc7, 0xfd, 0x77, 0x92, 0xac, 0x03, 0xfa },
+        { 0xb4, 0x17, 0x6a, 0x70, 0x3d, 0x4d, 0xd8, 0x4f, 0xba, 0x3c, 0x0b,
+          0x76, 0x0d, 0x10, 0x67, 0x0f, 0x2a, 0x20, 0x53, 0xfa, 0x2c, 0x39,
+          0xcc, 0xc6, 0x4e, 0xc7, 0xfd, 0x77, 0x92, 0xac, 0x03, 0xfa },
         /* p+1 (order 1) */
-        { 0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f },
-        /* p+2707385501144840649318225287225658788936804267575313519463743609750303402022 (order 8) */
-        { 0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f },
-        /* p+55188659117513257062467267217118295137698188065244968500265048394206261417927 (order 8) */
-        { 0xee, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f },
+        { 0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f },
+        /* p+2707385501144840649318225287225658788936804267575313519463743609750303402022
+           (order 8) */
+        { 0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f },
+        /* p+55188659117513257062467267217118295137698188065244968500265048394206261417927
+           (order 8) */
+        { 0xee, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f },
         /* 2p-1 (order 2) */
-        { 0xd9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
+        { 0xd9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
         /* 2p (order 4) */
-        { 0xda, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
+        { 0xda, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
         /* 2p+1 (order 1) */
-        { 0xdb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }
+        { 0xdb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }
     };
     size_t        i, j;
     unsigned char c;
@@ -78,22 +108,22 @@ small_order(const unsigned char R[32])
 #endif
 
 int
-crypto_sign_ed25519_verify_detached(const unsigned char *sig,
-                                    const unsigned char *m,
-                                    unsigned long long mlen,
-                                    const unsigned char *pk)
+_crypto_sign_ed25519_verify_detached(const unsigned char *sig,
+                                     const unsigned char *m,
+                                     unsigned long long   mlen,
+                                     const unsigned char *pk,
+                                     int prehashed)
 {
     crypto_hash_sha512_state hs;
-    unsigned char h[64];
-    unsigned char rcheck[32];
-    unsigned int  i;
-    unsigned char d = 0;
-    ge_p3 A;
-    ge_p2 R;
+    unsigned char            h[64];
+    unsigned char            rcheck[32];
+    unsigned int             i;
+    unsigned char            d = 0;
+    ge_p3                    A;
+    ge_p2                    R;
 
 #ifndef ED25519_COMPAT
-    if (crypto_sign_check_S_lt_L(sig + 32) != 0 ||
-        small_order(sig) != 0) {
+    if (crypto_sign_check_S_lt_L(sig + 32) != 0 || small_order(sig) != 0) {
         return -1;
     }
 #else
@@ -110,7 +140,7 @@ crypto_sign_ed25519_verify_detached(cons
     if (d == 0) {
         return -1;
     }
-    crypto_hash_sha512_init(&hs);
+    _crypto_sign_ed25519_ref10_hinit(&hs, prehashed);
     crypto_hash_sha512_update(&hs, sig, 32);
     crypto_hash_sha512_update(&hs, pk, 32);
     crypto_hash_sha512_update(&hs, m, mlen);
@@ -125,6 +155,15 @@ crypto_sign_ed25519_verify_detached(cons
 }
 
 int
+crypto_sign_ed25519_verify_detached(const unsigned char *sig,
+                                    const unsigned char *m,
+                                    unsigned long long   mlen,
+                                    const unsigned char *pk)
+{
+    return _crypto_sign_ed25519_verify_detached(sig, m, mlen, pk, 0);
+}
+
+int
 crypto_sign_ed25519_open(unsigned char *m, unsigned long long *mlen_p,
                          const unsigned char *sm, unsigned long long smlen,
                          const unsigned char *pk)
diff -urpN libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/ref10/sign.c libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/ref10/sign.c
--- libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/ref10/sign.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/ref10/sign.c	2017-03-06 23:32:40.000000000 +0100
@@ -3,26 +3,43 @@
 
 #include "crypto_hash_sha512.h"
 #include "crypto_sign_ed25519.h"
-#include "utils.h"
+#include "ed25519_ref10.h"
 #include "private/curve25519_ref10.h"
+#include "utils.h"
+
+void
+_crypto_sign_ed25519_ref10_hinit(crypto_hash_sha512_state *hs, int prehashed)
+{
+    static const unsigned char DOM2PREFIX[32 + 2] = {
+        'S', 'i', 'g', 'E', 'd', '2', '5', '5', '1', '9', ' ',
+        'n', 'o', ' ',
+        'E', 'd', '2', '5', '5', '1', '9', ' ',
+        'c', 'o', 'l', 'l', 'i', 's', 'i', 'o', 'n', 's', 1, 0
+    };
+
+    crypto_hash_sha512_init(hs);
+    if (prehashed) {
+        crypto_hash_sha512_update(hs, DOM2PREFIX, sizeof DOM2PREFIX);
+    }
+}
 
 int
-crypto_sign_ed25519_detached(unsigned char *sig, unsigned long long *siglen_p,
-                             const unsigned char *m, unsigned long long mlen,
-                             const unsigned char *sk)
+_crypto_sign_ed25519_detached(unsigned char *sig, unsigned long long *siglen_p,
+                              const unsigned char *m, unsigned long long mlen,
+                              const unsigned char *sk, int prehashed)
 {
     crypto_hash_sha512_state hs;
-    unsigned char az[64];
-    unsigned char nonce[64];
-    unsigned char hram[64];
-    ge_p3 R;
+    unsigned char            az[64];
+    unsigned char            nonce[64];
+    unsigned char            hram[64];
+    ge_p3                    R;
 
     crypto_hash_sha512(az, sk, 32);
     az[0] &= 248;
     az[31] &= 63;
     az[31] |= 64;
 
-    crypto_hash_sha512_init(&hs);
+    _crypto_sign_ed25519_ref10_hinit(&hs, prehashed);
     crypto_hash_sha512_update(&hs, az + 32, 32);
     crypto_hash_sha512_update(&hs, m, mlen);
     crypto_hash_sha512_final(&hs, nonce);
@@ -33,7 +50,7 @@ crypto_sign_ed25519_detached(unsigned ch
     ge_scalarmult_base(&R, nonce);
     ge_p3_tobytes(sig, &R);
 
-    crypto_hash_sha512_init(&hs);
+    _crypto_sign_ed25519_ref10_hinit(&hs, prehashed);
     crypto_hash_sha512_update(&hs, sig, 64);
     crypto_hash_sha512_update(&hs, m, mlen);
     crypto_hash_sha512_final(&hs, hram);
@@ -50,6 +67,14 @@ crypto_sign_ed25519_detached(unsigned ch
 }
 
 int
+crypto_sign_ed25519_detached(unsigned char *sig, unsigned long long *siglen_p,
+                             const unsigned char *m, unsigned long long mlen,
+                             const unsigned char *sk)
+{
+    return _crypto_sign_ed25519_detached(sig, siglen_p, m, mlen, sk, 0);
+}
+
+int
 crypto_sign_ed25519(unsigned char *sm, unsigned long long *smlen_p,
                     const unsigned char *m, unsigned long long mlen,
                     const unsigned char *sk)
@@ -57,10 +82,9 @@ crypto_sign_ed25519(unsigned char *sm, u
     unsigned long long siglen;
 
     memmove(sm + crypto_sign_ed25519_BYTES, m, mlen);
-/* LCOV_EXCL_START */
-    if (crypto_sign_ed25519_detached(sm, &siglen,
-                                     sm + crypto_sign_ed25519_BYTES,
-                                     mlen, sk) != 0 ||
+    /* LCOV_EXCL_START */
+    if (crypto_sign_ed25519_detached(
+            sm, &siglen, sm + crypto_sign_ed25519_BYTES, mlen, sk) != 0 ||
         siglen != crypto_sign_ed25519_BYTES) {
         if (smlen_p != NULL) {
             *smlen_p = 0;
@@ -68,7 +92,7 @@ crypto_sign_ed25519(unsigned char *sm, u
         memset(sm, 0, mlen + crypto_sign_ed25519_BYTES);
         return -1;
     }
-/* LCOV_EXCL_STOP */
+    /* LCOV_EXCL_STOP */
 
     if (smlen_p != NULL) {
         *smlen_p = mlen + siglen;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/sign_ed25519_api.c libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/sign_ed25519_api.c
--- libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/sign_ed25519_api.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/sign_ed25519_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,39 +0,0 @@
-
-#include <string.h>
-
-#include "crypto_sign_ed25519.h"
-
-size_t
-crypto_sign_ed25519_bytes(void) {
-    return crypto_sign_ed25519_BYTES;
-}
-
-size_t
-crypto_sign_ed25519_seedbytes(void) {
-    return crypto_sign_ed25519_SEEDBYTES;
-}
-
-size_t
-crypto_sign_ed25519_publickeybytes(void) {
-    return crypto_sign_ed25519_PUBLICKEYBYTES;
-}
-
-size_t
-crypto_sign_ed25519_secretkeybytes(void) {
-    return crypto_sign_ed25519_SECRETKEYBYTES;
-}
-
-int
-crypto_sign_ed25519_sk_to_seed(unsigned char *seed, const unsigned char *sk)
-{
-    memmove(seed, sk, crypto_sign_ed25519_SEEDBYTES);
-    return 0;
-}
-
-int
-crypto_sign_ed25519_sk_to_pk(unsigned char *pk, const unsigned char *sk)
-{
-    memmove(pk, sk + crypto_sign_ed25519_SEEDBYTES,
-            crypto_sign_ed25519_PUBLICKEYBYTES);
-    return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/sign_ed25519.c libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/sign_ed25519.c
--- libsodium-1.0.11/src/libsodium/crypto_sign/ed25519/sign_ed25519.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_sign/ed25519/sign_ed25519.c	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,91 @@
+
+#include <string.h>
+
+#include "crypto_hash_sha512.h"
+#include "crypto_sign_ed25519.h"
+#include "ref10/ed25519_ref10.h"
+
+size_t
+crypto_sign_ed25519ph_statebytes(void)
+{
+    return sizeof(crypto_sign_ed25519ph_state);
+}
+
+size_t
+crypto_sign_ed25519_bytes(void)
+{
+    return crypto_sign_ed25519_BYTES;
+}
+
+size_t
+crypto_sign_ed25519_seedbytes(void)
+{
+    return crypto_sign_ed25519_SEEDBYTES;
+}
+
+size_t
+crypto_sign_ed25519_publickeybytes(void)
+{
+    return crypto_sign_ed25519_PUBLICKEYBYTES;
+}
+
+size_t
+crypto_sign_ed25519_secretkeybytes(void)
+{
+    return crypto_sign_ed25519_SECRETKEYBYTES;
+}
+
+int
+crypto_sign_ed25519_sk_to_seed(unsigned char *seed, const unsigned char *sk)
+{
+    memmove(seed, sk, crypto_sign_ed25519_SEEDBYTES);
+
+    return 0;
+}
+
+int
+crypto_sign_ed25519_sk_to_pk(unsigned char *pk, const unsigned char *sk)
+{
+    memmove(pk, sk + crypto_sign_ed25519_SEEDBYTES,
+            crypto_sign_ed25519_PUBLICKEYBYTES);
+    return 0;
+}
+
+int
+crypto_sign_ed25519ph_init(crypto_sign_ed25519ph_state *state)
+{
+    crypto_hash_sha512_init(&state->hs);
+    return 0;
+}
+
+int
+crypto_sign_ed25519ph_update(crypto_sign_ed25519ph_state *state,
+                             const unsigned char *m, unsigned long long mlen)
+{
+    return crypto_hash_sha512_update(&state->hs, m, mlen);
+}
+
+int
+crypto_sign_ed25519ph_final_create(crypto_sign_ed25519ph_state *state,
+                                   unsigned char               *sig,
+                                   unsigned long long          *siglen_p,
+                                   const unsigned char         *sk)
+{
+    unsigned char ph[crypto_hash_sha512_BYTES];
+
+    crypto_hash_sha512_final(&state->hs, ph);
+
+    return _crypto_sign_ed25519_detached(sig, siglen_p, ph, sizeof ph, sk, 1);
+}
+
+int
+crypto_sign_ed25519ph_final_verify(crypto_sign_ed25519ph_state *state,
+                                   unsigned char               *sig,
+                                   const unsigned char         *pk)
+{
+    unsigned char ph[crypto_hash_sha512_BYTES];
+
+    crypto_hash_sha512_final(&state->hs, ph);
+
+    return _crypto_sign_ed25519_verify_detached(sig, ph, sizeof ph, pk, 1);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,174 @@
+/* Author: Peter Schwabe, ported from an assembly implementation by Emilia
+ * Käsper
+ * Date: 2009-03-19
+ * Public domain */
+
+#include "common.h"
+#include "consts.h"
+#include "crypto_stream_aes128ctr.h"
+#include "int128.h"
+
+int
+crypto_stream_aes128ctr_afternm(unsigned char *out, unsigned long long len,
+                                const unsigned char *nonce,
+                                const unsigned char *c)
+{
+    aes_uint128_t      xmm0;
+    aes_uint128_t      xmm1;
+    aes_uint128_t      xmm2;
+    aes_uint128_t      xmm3;
+    aes_uint128_t      xmm4;
+    aes_uint128_t      xmm5;
+    aes_uint128_t      xmm6;
+    aes_uint128_t      xmm7;
+    aes_uint128_t      xmm8;
+    aes_uint128_t      xmm9;
+    aes_uint128_t      xmm10;
+    aes_uint128_t      xmm11;
+    aes_uint128_t      xmm12;
+    aes_uint128_t      xmm13;
+    aes_uint128_t      xmm14;
+    aes_uint128_t      xmm15;
+    aes_uint128_t      nonce_stack;
+    unsigned long long lensav;
+    unsigned char      bl[128];
+    unsigned char *    blp;
+    unsigned char *    np;
+    unsigned char      b;
+    uint32_t           tmp;
+
+    /* Copy nonce on the stack */
+    copy2(&nonce_stack, (const aes_uint128_t *) (nonce + 0));
+    np = (unsigned char *) &nonce_stack;
+
+enc_block:
+
+    xmm0 = *(aes_uint128_t *) (np + 0);
+    copy2(&xmm1, &xmm0);
+    shufb(&xmm1, SWAP32);
+    copy2(&xmm2, &xmm1);
+    copy2(&xmm3, &xmm1);
+    copy2(&xmm4, &xmm1);
+    copy2(&xmm5, &xmm1);
+    copy2(&xmm6, &xmm1);
+    copy2(&xmm7, &xmm1);
+
+    add_uint32_big(&xmm1, 1);
+    add_uint32_big(&xmm2, 2);
+    add_uint32_big(&xmm3, 3);
+    add_uint32_big(&xmm4, 4);
+    add_uint32_big(&xmm5, 5);
+    add_uint32_big(&xmm6, 6);
+    add_uint32_big(&xmm7, 7);
+
+    shufb(&xmm0, M0);
+    shufb(&xmm1, M0SWAP);
+    shufb(&xmm2, M0SWAP);
+    shufb(&xmm3, M0SWAP);
+    shufb(&xmm4, M0SWAP);
+    shufb(&xmm5, M0SWAP);
+    shufb(&xmm6, M0SWAP);
+    shufb(&xmm7, M0SWAP);
+
+    bitslice(xmm7, xmm6, xmm5, xmm4, xmm3, xmm2, xmm1, xmm0, xmm8);
+
+    aesround(1, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9,
+             xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, c);
+    aesround(2, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0,
+             xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, c);
+    aesround(3, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9,
+             xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, c);
+    aesround(4, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0,
+             xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, c);
+    aesround(5, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9,
+             xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, c);
+    aesround(6, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0,
+             xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, c);
+    aesround(7, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9,
+             xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, c);
+    aesround(8, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0,
+             xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, c);
+    aesround(9, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9,
+             xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, c);
+    lastround(xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1,
+              xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, c);
+
+    bitslice(xmm13, xmm10, xmm15, xmm11, xmm14, xmm12, xmm9, xmm8, xmm0);
+
+    if (len < 128) {
+        goto partial;
+    }
+    if (len == 128) {
+        goto full;
+    }
+    tmp = LOAD32_BE(np + 12);
+    tmp += 8;
+    STORE32_BE(np + 12, tmp);
+
+    *(aes_uint128_t *) (out + 0)   = xmm8;
+    *(aes_uint128_t *) (out + 16)  = xmm9;
+    *(aes_uint128_t *) (out + 32)  = xmm12;
+    *(aes_uint128_t *) (out + 48)  = xmm14;
+    *(aes_uint128_t *) (out + 64)  = xmm11;
+    *(aes_uint128_t *) (out + 80)  = xmm15;
+    *(aes_uint128_t *) (out + 96)  = xmm10;
+    *(aes_uint128_t *) (out + 112) = xmm13;
+
+    len -= 128;
+    out += 128;
+
+    goto enc_block;
+
+partial:
+
+    lensav = len;
+    len >>= 4;
+
+    tmp = LOAD32_BE(np + 12);
+    tmp += len;
+    STORE32_BE(np + 12, tmp);
+
+    blp = bl;
+
+    *(aes_uint128_t *) (blp + 0)   = xmm8;
+    *(aes_uint128_t *) (blp + 16)  = xmm9;
+    *(aes_uint128_t *) (blp + 32)  = xmm12;
+    *(aes_uint128_t *) (blp + 48)  = xmm14;
+    *(aes_uint128_t *) (blp + 64)  = xmm11;
+    *(aes_uint128_t *) (blp + 80)  = xmm15;
+    *(aes_uint128_t *) (blp + 96)  = xmm10;
+    *(aes_uint128_t *) (blp + 112) = xmm13;
+
+bytes:
+
+    if (lensav == 0) {
+        goto end;
+    }
+    b = blp[0]; /* clang false positive */
+
+    *(unsigned char *) (out + 0) = b;
+
+    blp += 1;
+    out += 1;
+    lensav -= 1;
+
+    goto bytes;
+
+full:
+
+    tmp = LOAD32_BE(np + 12);
+    tmp += 8;
+    STORE32_BE(np + 12, tmp);
+
+    *(aes_uint128_t *) (out + 0)   = xmm8;
+    *(aes_uint128_t *) (out + 16)  = xmm9;
+    *(aes_uint128_t *) (out + 32)  = xmm12;
+    *(aes_uint128_t *) (out + 48)  = xmm14;
+    *(aes_uint128_t *) (out + 64)  = xmm11;
+    *(aes_uint128_t *) (out + 80)  = xmm15;
+    *(aes_uint128_t *) (out + 96)  = xmm10;
+    *(aes_uint128_t *) (out + 112) = xmm13;
+
+end:
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,66 @@
+/* Author: Peter Schwabe, ported from an assembly implementation by Emilia
+ * Käsper
+ * Date: 2009-03-19
+ * Public domain */
+
+#include "common.h"
+#include "consts.h"
+#include "crypto_stream_aes128ctr.h"
+#include "int128.h"
+
+int
+crypto_stream_aes128ctr_beforenm(unsigned char *c, const unsigned char *k)
+{
+    aes_uint128_t xmm0;
+    aes_uint128_t xmm1;
+    aes_uint128_t xmm2;
+    aes_uint128_t xmm3;
+    aes_uint128_t xmm4;
+    aes_uint128_t xmm5;
+    aes_uint128_t xmm6;
+    aes_uint128_t xmm7;
+    aes_uint128_t xmm8;
+    aes_uint128_t xmm9;
+    aes_uint128_t xmm10;
+    aes_uint128_t xmm11;
+    aes_uint128_t xmm12;
+    aes_uint128_t xmm13;
+    aes_uint128_t xmm14;
+    aes_uint128_t xmm15;
+    aes_uint128_t t;
+
+    bitslicekey0(k, c);
+
+    keyexpbs1(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10,
+              xmm11, xmm12, xmm13, xmm14, xmm15, c);
+    keyexpbs(xmm0, xmm1, xmm4, xmm6, xmm3, xmm7, xmm2, xmm5, xmm8, xmm9, xmm10,
+             xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm1);
+             , 2, c);
+    keyexpbs(xmm0, xmm1, xmm3, xmm2, xmm6, xmm5, xmm4, xmm7, xmm8, xmm9, xmm10,
+             xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm6);
+             , 3, c);
+    keyexpbs(xmm0, xmm1, xmm6, xmm4, xmm2, xmm7, xmm3, xmm5, xmm8, xmm9, xmm10,
+             xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm3);
+             , 4, c);
+
+    keyexpbs(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10,
+             xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm3);
+             , 5, c);
+    keyexpbs(xmm0, xmm1, xmm4, xmm6, xmm3, xmm7, xmm2, xmm5, xmm8, xmm9, xmm10,
+             xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm5);
+             , 6, c);
+    keyexpbs(xmm0, xmm1, xmm3, xmm2, xmm6, xmm5, xmm4, xmm7, xmm8, xmm9, xmm10,
+             xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm3);
+             , 7, c);
+    keyexpbs(xmm0, xmm1, xmm6, xmm4, xmm2, xmm7, xmm3, xmm5, xmm8, xmm9, xmm10,
+             xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm7);
+             , 8, c);
+
+    keyexpbs(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10,
+             xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm0);
+             xor_rcon(&xmm1); xor_rcon(&xmm6); xor_rcon(&xmm3);, 9, c);
+    keyexpbs10(xmm0, xmm1, xmm4, xmm6, xmm3, xmm7, xmm2, xmm5, xmm8, xmm9,
+               xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, c);
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/common.h libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/common.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/common.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/common.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,766 @@
+/* Author: Peter Schwabe, ported from an assembly implementation by Emilia
+ Käsper
+ Date: 2009-03-19
+ Public domain */
+#ifndef aes128ctr_nacl_common_H
+#define aes128ctr_nacl_common_H
+
+#include "private/common.h"
+
+/* Macros required only for key expansion */
+
+#define keyexpbs1(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, \
+                  t7, bskey)                                                  \
+    rotbyte(&b0);                                                             \
+    rotbyte(&b1);                                                             \
+    rotbyte(&b2);                                                             \
+    rotbyte(&b3);                                                             \
+    rotbyte(&b4);                                                             \
+    rotbyte(&b5);                                                             \
+    rotbyte(&b6);                                                             \
+    rotbyte(&b7);                                                             \
+                                                                              \
+    sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7);     \
+                                                                              \
+    xor_rcon(&b0);                                                            \
+    shufb(&b0, EXPB0);                                                        \
+    shufb(&b1, EXPB0);                                                        \
+    shufb(&b4, EXPB0);                                                        \
+    shufb(&b6, EXPB0);                                                        \
+    shufb(&b3, EXPB0);                                                        \
+    shufb(&b7, EXPB0);                                                        \
+    shufb(&b2, EXPB0);                                                        \
+    shufb(&b5, EXPB0);                                                        \
+    shufb(&b0, EXPB0);                                                        \
+                                                                              \
+    t0 = *(aes_uint128_t *) (bskey + 0);                                      \
+    t1 = *(aes_uint128_t *) (bskey + 16);                                     \
+    t2 = *(aes_uint128_t *) (bskey + 32);                                     \
+    t3 = *(aes_uint128_t *) (bskey + 48);                                     \
+    t4 = *(aes_uint128_t *) (bskey + 64);                                     \
+    t5 = *(aes_uint128_t *) (bskey + 80);                                     \
+    t6 = *(aes_uint128_t *) (bskey + 96);                                     \
+    t7 = *(aes_uint128_t *) (bskey + 112);                                    \
+                                                                              \
+    xor2(&b0, &t0);                                                           \
+    xor2(&b1, &t1);                                                           \
+    xor2(&b4, &t2);                                                           \
+    xor2(&b6, &t3);                                                           \
+    xor2(&b3, &t4);                                                           \
+    xor2(&b7, &t5);                                                           \
+    xor2(&b2, &t6);                                                           \
+    xor2(&b5, &t7);                                                           \
+                                                                              \
+    rshift32_littleendian(&t0, 8);                                            \
+    rshift32_littleendian(&t1, 8);                                            \
+    rshift32_littleendian(&t2, 8);                                            \
+    rshift32_littleendian(&t3, 8);                                            \
+    rshift32_littleendian(&t4, 8);                                            \
+    rshift32_littleendian(&t5, 8);                                            \
+    rshift32_littleendian(&t6, 8);                                            \
+    rshift32_littleendian(&t7, 8);                                            \
+                                                                              \
+    xor2(&b0, &t0);                                                           \
+    xor2(&b1, &t1);                                                           \
+    xor2(&b4, &t2);                                                           \
+    xor2(&b6, &t3);                                                           \
+    xor2(&b3, &t4);                                                           \
+    xor2(&b7, &t5);                                                           \
+    xor2(&b2, &t6);                                                           \
+    xor2(&b5, &t7);                                                           \
+                                                                              \
+    rshift32_littleendian(&t0, 8);                                            \
+    rshift32_littleendian(&t1, 8);                                            \
+    rshift32_littleendian(&t2, 8);                                            \
+    rshift32_littleendian(&t3, 8);                                            \
+    rshift32_littleendian(&t4, 8);                                            \
+    rshift32_littleendian(&t5, 8);                                            \
+    rshift32_littleendian(&t6, 8);                                            \
+    rshift32_littleendian(&t7, 8);                                            \
+                                                                              \
+    xor2(&b0, &t0);                                                           \
+    xor2(&b1, &t1);                                                           \
+    xor2(&b4, &t2);                                                           \
+    xor2(&b6, &t3);                                                           \
+    xor2(&b3, &t4);                                                           \
+    xor2(&b7, &t5);                                                           \
+    xor2(&b2, &t6);                                                           \
+    xor2(&b5, &t7);                                                           \
+                                                                              \
+    rshift32_littleendian(&t0, 8);                                            \
+    rshift32_littleendian(&t1, 8);                                            \
+    rshift32_littleendian(&t2, 8);                                            \
+    rshift32_littleendian(&t3, 8);                                            \
+    rshift32_littleendian(&t4, 8);                                            \
+    rshift32_littleendian(&t5, 8);                                            \
+    rshift32_littleendian(&t6, 8);                                            \
+    rshift32_littleendian(&t7, 8);                                            \
+                                                                              \
+    xor2(&b0, &t0);                                                           \
+    xor2(&b1, &t1);                                                           \
+    xor2(&b4, &t2);                                                           \
+    xor2(&b6, &t3);                                                           \
+    xor2(&b3, &t4);                                                           \
+    xor2(&b7, &t5);                                                           \
+    xor2(&b2, &t6);                                                           \
+    xor2(&b5, &t7);                                                           \
+                                                                              \
+    *(aes_uint128_t *) (bskey + 128) = b0;                                    \
+    *(aes_uint128_t *) (bskey + 144) = b1;                                    \
+    *(aes_uint128_t *) (bskey + 160) = b4;                                    \
+    *(aes_uint128_t *) (bskey + 176) = b6;                                    \
+    *(aes_uint128_t *) (bskey + 192) = b3;                                    \
+    *(aes_uint128_t *) (bskey + 208) = b7;                                    \
+    *(aes_uint128_t *) (bskey + 224) = b2;                                    \
+    *(aes_uint128_t *) (bskey + 240) = b5
+
+#define keyexpbs10(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, \
+                   t7, bskey)                                                  \
+    toggle(&b0);                                                               \
+    toggle(&b1);                                                               \
+    toggle(&b5);                                                               \
+    toggle(&b6);                                                               \
+    rotbyte(&b0);                                                              \
+    rotbyte(&b1);                                                              \
+    rotbyte(&b2);                                                              \
+    rotbyte(&b3);                                                              \
+    rotbyte(&b4);                                                              \
+    rotbyte(&b5);                                                              \
+    rotbyte(&b6);                                                              \
+    rotbyte(&b7);                                                              \
+                                                                               \
+    sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7);      \
+                                                                               \
+    xor_rcon(&b1);                                                             \
+    xor_rcon(&b4);                                                             \
+    xor_rcon(&b3);                                                             \
+    xor_rcon(&b7);                                                             \
+    shufb(&b0, EXPB0);                                                         \
+    shufb(&b1, EXPB0);                                                         \
+    shufb(&b4, EXPB0);                                                         \
+    shufb(&b6, EXPB0);                                                         \
+    shufb(&b3, EXPB0);                                                         \
+    shufb(&b7, EXPB0);                                                         \
+    shufb(&b2, EXPB0);                                                         \
+    shufb(&b5, EXPB0);                                                         \
+                                                                               \
+    t0 = *(aes_uint128_t *) (bskey + 9 * 128 + 0);                             \
+    t1 = *(aes_uint128_t *) (bskey + 9 * 128 + 16);                            \
+    t2 = *(aes_uint128_t *) (bskey + 9 * 128 + 32);                            \
+    t3 = *(aes_uint128_t *) (bskey + 9 * 128 + 48);                            \
+    t4 = *(aes_uint128_t *) (bskey + 9 * 128 + 64);                            \
+    t5 = *(aes_uint128_t *) (bskey + 9 * 128 + 80);                            \
+    t6 = *(aes_uint128_t *) (bskey + 9 * 128 + 96);                            \
+    t7 = *(aes_uint128_t *) (bskey + 9 * 128 + 112);                           \
+                                                                               \
+    toggle(&t0);                                                               \
+    toggle(&t1);                                                               \
+    toggle(&t5);                                                               \
+    toggle(&t6);                                                               \
+                                                                               \
+    xor2(&b0, &t0);                                                            \
+    xor2(&b1, &t1);                                                            \
+    xor2(&b4, &t2);                                                            \
+    xor2(&b6, &t3);                                                            \
+    xor2(&b3, &t4);                                                            \
+    xor2(&b7, &t5);                                                            \
+    xor2(&b2, &t6);                                                            \
+    xor2(&b5, &t7);                                                            \
+                                                                               \
+    rshift32_littleendian(&t0, 8);                                             \
+    rshift32_littleendian(&t1, 8);                                             \
+    rshift32_littleendian(&t2, 8);                                             \
+    rshift32_littleendian(&t3, 8);                                             \
+    rshift32_littleendian(&t4, 8);                                             \
+    rshift32_littleendian(&t5, 8);                                             \
+    rshift32_littleendian(&t6, 8);                                             \
+    rshift32_littleendian(&t7, 8);                                             \
+                                                                               \
+    xor2(&b0, &t0);                                                            \
+    xor2(&b1, &t1);                                                            \
+    xor2(&b4, &t2);                                                            \
+    xor2(&b6, &t3);                                                            \
+    xor2(&b3, &t4);                                                            \
+    xor2(&b7, &t5);                                                            \
+    xor2(&b2, &t6);                                                            \
+    xor2(&b5, &t7);                                                            \
+                                                                               \
+    rshift32_littleendian(&t0, 8);                                             \
+    rshift32_littleendian(&t1, 8);                                             \
+    rshift32_littleendian(&t2, 8);                                             \
+    rshift32_littleendian(&t3, 8);                                             \
+    rshift32_littleendian(&t4, 8);                                             \
+    rshift32_littleendian(&t5, 8);                                             \
+    rshift32_littleendian(&t6, 8);                                             \
+    rshift32_littleendian(&t7, 8);                                             \
+                                                                               \
+    xor2(&b0, &t0);                                                            \
+    xor2(&b1, &t1);                                                            \
+    xor2(&b4, &t2);                                                            \
+    xor2(&b6, &t3);                                                            \
+    xor2(&b3, &t4);                                                            \
+    xor2(&b7, &t5);                                                            \
+    xor2(&b2, &t6);                                                            \
+    xor2(&b5, &t7);                                                            \
+                                                                               \
+    rshift32_littleendian(&t0, 8);                                             \
+    rshift32_littleendian(&t1, 8);                                             \
+    rshift32_littleendian(&t2, 8);                                             \
+    rshift32_littleendian(&t3, 8);                                             \
+    rshift32_littleendian(&t4, 8);                                             \
+    rshift32_littleendian(&t5, 8);                                             \
+    rshift32_littleendian(&t6, 8);                                             \
+    rshift32_littleendian(&t7, 8);                                             \
+                                                                               \
+    xor2(&b0, &t0);                                                            \
+    xor2(&b1, &t1);                                                            \
+    xor2(&b4, &t2);                                                            \
+    xor2(&b6, &t3);                                                            \
+    xor2(&b3, &t4);                                                            \
+    xor2(&b7, &t5);                                                            \
+    xor2(&b2, &t6);                                                            \
+    xor2(&b5, &t7);                                                            \
+                                                                               \
+    shufb(&b0, M0);                                                            \
+    shufb(&b1, M0);                                                            \
+    shufb(&b2, M0);                                                            \
+    shufb(&b3, M0);                                                            \
+    shufb(&b4, M0);                                                            \
+    shufb(&b5, M0);                                                            \
+    shufb(&b6, M0);                                                            \
+    shufb(&b7, M0);                                                            \
+                                                                               \
+    *(aes_uint128_t *) (bskey + 1280) = b0;                                    \
+    *(aes_uint128_t *) (bskey + 1296) = b1;                                    \
+    *(aes_uint128_t *) (bskey + 1312) = b4;                                    \
+    *(aes_uint128_t *) (bskey + 1328) = b6;                                    \
+    *(aes_uint128_t *) (bskey + 1344) = b3;                                    \
+    *(aes_uint128_t *) (bskey + 1360) = b7;                                    \
+    *(aes_uint128_t *) (bskey + 1376) = b2;                                    \
+    *(aes_uint128_t *) (bskey + 1392) = b5
+
+#define keyexpbs(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, \
+                 t7, rcon, i, bskey)                                         \
+    toggle(&b0);                                                             \
+    toggle(&b1);                                                             \
+    toggle(&b5);                                                             \
+    toggle(&b6);                                                             \
+    rotbyte(&b0);                                                            \
+    rotbyte(&b1);                                                            \
+    rotbyte(&b2);                                                            \
+    rotbyte(&b3);                                                            \
+    rotbyte(&b4);                                                            \
+    rotbyte(&b5);                                                            \
+    rotbyte(&b6);                                                            \
+    rotbyte(&b7);                                                            \
+                                                                             \
+    sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7);    \
+                                                                             \
+    rcon;                                                                    \
+    shufb(&b0, EXPB0);                                                       \
+    shufb(&b1, EXPB0);                                                       \
+    shufb(&b4, EXPB0);                                                       \
+    shufb(&b6, EXPB0);                                                       \
+    shufb(&b3, EXPB0);                                                       \
+    shufb(&b7, EXPB0);                                                       \
+    shufb(&b2, EXPB0);                                                       \
+    shufb(&b5, EXPB0);                                                       \
+                                                                             \
+    t0 = *(aes_uint128_t *) (bskey + (i - 1) * 128 + 0);                     \
+    t1 = *(aes_uint128_t *) (bskey + (i - 1) * 128 + 16);                    \
+    t2 = *(aes_uint128_t *) (bskey + (i - 1) * 128 + 32);                    \
+    t3 = *(aes_uint128_t *) (bskey + (i - 1) * 128 + 48);                    \
+    t4 = *(aes_uint128_t *) (bskey + (i - 1) * 128 + 64);                    \
+    t5 = *(aes_uint128_t *) (bskey + (i - 1) * 128 + 80);                    \
+    t6 = *(aes_uint128_t *) (bskey + (i - 1) * 128 + 96);                    \
+    t7 = *(aes_uint128_t *) (bskey + (i - 1) * 128 + 112);                   \
+                                                                             \
+    toggle(&t0);                                                             \
+    toggle(&t1);                                                             \
+    toggle(&t5);                                                             \
+    toggle(&t6);                                                             \
+                                                                             \
+    xor2(&b0, &t0);                                                          \
+    xor2(&b1, &t1);                                                          \
+    xor2(&b4, &t2);                                                          \
+    xor2(&b6, &t3);                                                          \
+    xor2(&b3, &t4);                                                          \
+    xor2(&b7, &t5);                                                          \
+    xor2(&b2, &t6);                                                          \
+    xor2(&b5, &t7);                                                          \
+                                                                             \
+    rshift32_littleendian(&t0, 8);                                           \
+    rshift32_littleendian(&t1, 8);                                           \
+    rshift32_littleendian(&t2, 8);                                           \
+    rshift32_littleendian(&t3, 8);                                           \
+    rshift32_littleendian(&t4, 8);                                           \
+    rshift32_littleendian(&t5, 8);                                           \
+    rshift32_littleendian(&t6, 8);                                           \
+    rshift32_littleendian(&t7, 8);                                           \
+                                                                             \
+    xor2(&b0, &t0);                                                          \
+    xor2(&b1, &t1);                                                          \
+    xor2(&b4, &t2);                                                          \
+    xor2(&b6, &t3);                                                          \
+    xor2(&b3, &t4);                                                          \
+    xor2(&b7, &t5);                                                          \
+    xor2(&b2, &t6);                                                          \
+    xor2(&b5, &t7);                                                          \
+                                                                             \
+    rshift32_littleendian(&t0, 8);                                           \
+    rshift32_littleendian(&t1, 8);                                           \
+    rshift32_littleendian(&t2, 8);                                           \
+    rshift32_littleendian(&t3, 8);                                           \
+    rshift32_littleendian(&t4, 8);                                           \
+    rshift32_littleendian(&t5, 8);                                           \
+    rshift32_littleendian(&t6, 8);                                           \
+    rshift32_littleendian(&t7, 8);                                           \
+                                                                             \
+    xor2(&b0, &t0);                                                          \
+    xor2(&b1, &t1);                                                          \
+    xor2(&b4, &t2);                                                          \
+    xor2(&b6, &t3);                                                          \
+    xor2(&b3, &t4);                                                          \
+    xor2(&b7, &t5);                                                          \
+    xor2(&b2, &t6);                                                          \
+    xor2(&b5, &t7);                                                          \
+                                                                             \
+    rshift32_littleendian(&t0, 8);                                           \
+    rshift32_littleendian(&t1, 8);                                           \
+    rshift32_littleendian(&t2, 8);                                           \
+    rshift32_littleendian(&t3, 8);                                           \
+    rshift32_littleendian(&t4, 8);                                           \
+    rshift32_littleendian(&t5, 8);                                           \
+    rshift32_littleendian(&t6, 8);                                           \
+    rshift32_littleendian(&t7, 8);                                           \
+                                                                             \
+    xor2(&b0, &t0);                                                          \
+    xor2(&b1, &t1);                                                          \
+    xor2(&b4, &t2);                                                          \
+    xor2(&b6, &t3);                                                          \
+    xor2(&b3, &t4);                                                          \
+    xor2(&b7, &t5);                                                          \
+    xor2(&b2, &t6);                                                          \
+    xor2(&b5, &t7);                                                          \
+                                                                             \
+    *(aes_uint128_t *) (bskey + i * 128 + 0)   = b0;                         \
+    *(aes_uint128_t *) (bskey + i * 128 + 16)  = b1;                         \
+    *(aes_uint128_t *) (bskey + i * 128 + 32)  = b4;                         \
+    *(aes_uint128_t *) (bskey + i * 128 + 48)  = b6;                         \
+    *(aes_uint128_t *) (bskey + i * 128 + 64)  = b3;                         \
+    *(aes_uint128_t *) (bskey + i * 128 + 80)  = b7;                         \
+    *(aes_uint128_t *) (bskey + i * 128 + 96)  = b2;                         \
+    *(aes_uint128_t *) (bskey + i * 128 + 112) = b5
+
+/* Macros used in multiple contexts */
+
+#define bitslicekey0(key, bskey)                                 \
+    xmm0 = *(const aes_uint128_t *) (key + 0);                   \
+    shufb(&xmm0, M0);                                            \
+    copy2(&xmm1, &xmm0);                                         \
+    copy2(&xmm2, &xmm0);                                         \
+    copy2(&xmm3, &xmm0);                                         \
+    copy2(&xmm4, &xmm0);                                         \
+    copy2(&xmm5, &xmm0);                                         \
+    copy2(&xmm6, &xmm0);                                         \
+    copy2(&xmm7, &xmm0);                                         \
+                                                                 \
+    bitslice(xmm7, xmm6, xmm5, xmm4, xmm3, xmm2, xmm1, xmm0, t); \
+                                                                 \
+    *(aes_uint128_t *) (bskey + 0)   = xmm0;                     \
+    *(aes_uint128_t *) (bskey + 16)  = xmm1;                     \
+    *(aes_uint128_t *) (bskey + 32)  = xmm2;                     \
+    *(aes_uint128_t *) (bskey + 48)  = xmm3;                     \
+    *(aes_uint128_t *) (bskey + 64)  = xmm4;                     \
+    *(aes_uint128_t *) (bskey + 80)  = xmm5;                     \
+    *(aes_uint128_t *) (bskey + 96)  = xmm6;                     \
+    *(aes_uint128_t *) (bskey + 112) = xmm7
+
+#define bitslicekey10(key, bskey)                                \
+    xmm0 = *(aes_uint128_t *) (key + 0);                         \
+    copy2(xmm1, xmm0);                                           \
+    copy2(xmm2, xmm0);                                           \
+    copy2(xmm3, xmm0);                                           \
+    copy2(xmm4, xmm0);                                           \
+    copy2(xmm5, xmm0);                                           \
+    copy2(xmm6, xmm0);                                           \
+    copy2(xmm7, xmm0);                                           \
+                                                                 \
+    bitslice(xmm7, xmm6, xmm5, xmm4, xmm3, xmm2, xmm1, xmm0, t); \
+                                                                 \
+    toggle(&xmm6);                                               \
+    toggle(&xmm5);                                               \
+    toggle(&xmm1);                                               \
+    toggle(&xmm0);                                               \
+                                                                 \
+    *(aes_uint128_t *) (bskey + 0 + 1280)   = xmm0;              \
+    *(aes_uint128_t *) (bskey + 16 + 1280)  = xmm1;              \
+    *(aes_uint128_t *) (bskey + 32 + 1280)  = xmm2;              \
+    *(aes_uint128_t *) (bskey + 48 + 1280)  = xmm3;              \
+    *(aes_uint128_t *) (bskey + 64 + 1280)  = xmm4;              \
+    *(aes_uint128_t *) (bskey + 80 + 1280)  = xmm5;              \
+    *(aes_uint128_t *) (bskey + 96 + 1280)  = xmm6;              \
+    *(aes_uint128_t *) (bskey + 112 + 1280) = xmm7
+
+#define bitslicekey(i, key, bskey)                               \
+    xmm0 = *(aes_uint128_t *) (key + 0);                         \
+    shufb(&xmm0, M0);                                            \
+    copy2(&xmm1, &xmm0);                                         \
+    copy2(&xmm2, &xmm0);                                         \
+    copy2(&xmm3, &xmm0);                                         \
+    copy2(&xmm4, &xmm0);                                         \
+    copy2(&xmm5, &xmm0);                                         \
+    copy2(&xmm6, &xmm0);                                         \
+    copy2(&xmm7, &xmm0);                                         \
+                                                                 \
+    bitslice(xmm7, xmm6, xmm5, xmm4, xmm3, xmm2, xmm1, xmm0, t); \
+                                                                 \
+    toggle(&xmm6);                                               \
+    toggle(&xmm5);                                               \
+    toggle(&xmm1);                                               \
+    toggle(&xmm0);                                               \
+                                                                 \
+    *(aes_uint128_t *) (bskey + 0 + 128 * i)   = xmm0;           \
+    *(aes_uint128_t *) (bskey + 16 + 128 * i)  = xmm1;           \
+    *(aes_uint128_t *) (bskey + 32 + 128 * i)  = xmm2;           \
+    *(aes_uint128_t *) (bskey + 48 + 128 * i)  = xmm3;           \
+    *(aes_uint128_t *) (bskey + 64 + 128 * i)  = xmm4;           \
+    *(aes_uint128_t *) (bskey + 80 + 128 * i)  = xmm5;           \
+    *(aes_uint128_t *) (bskey + 96 + 128 * i)  = xmm6;           \
+    *(aes_uint128_t *) (bskey + 112 + 128 * i) = xmm7
+
+#define bitslice(x0, x1, x2, x3, x4, x5, x6, x7, t) \
+    swapmove(x0, x1, 1, BS0, t);                    \
+    swapmove(x2, x3, 1, BS0, t);                    \
+    swapmove(x4, x5, 1, BS0, t);                    \
+    swapmove(x6, x7, 1, BS0, t);                    \
+                                                    \
+    swapmove(x0, x2, 2, BS1, t);                    \
+    swapmove(x1, x3, 2, BS1, t);                    \
+    swapmove(x4, x6, 2, BS1, t);                    \
+    swapmove(x5, x7, 2, BS1, t);                    \
+                                                    \
+    swapmove(x0, x4, 4, BS2, t);                    \
+    swapmove(x1, x5, 4, BS2, t);                    \
+    swapmove(x2, x6, 4, BS2, t);                    \
+    swapmove(x3, x7, 4, BS2, t)
+
+#define swapmove(a, b, n, m, t)   \
+    copy2(&t, &b);                \
+    rshift64_littleendian(&t, n); \
+    xor2(&t, &a);                 \
+    and2(&t, &m);                 \
+    xor2(&a, &t);                 \
+    lshift64_littleendian(&t, n); \
+    xor2(&b, &t)
+
+#define rotbyte(x) shufb(x, ROTB) /* TODO: Make faster */
+
+/* Macros used for encryption (and decryption) */
+
+#define shiftrows(x0, x1, x2, x3, x4, x5, x6, x7, i, M, bskey)        \
+    xor2(&x0, (const aes_uint128_t *) (bskey + 128 * (i - 1) + 0));   \
+    shufb(&x0, M);                                                    \
+    xor2(&x1, (const aes_uint128_t *) (bskey + 128 * (i - 1) + 16));  \
+    shufb(&x1, M);                                                    \
+    xor2(&x2, (const aes_uint128_t *) (bskey + 128 * (i - 1) + 32));  \
+    shufb(&x2, M);                                                    \
+    xor2(&x3, (const aes_uint128_t *) (bskey + 128 * (i - 1) + 48));  \
+    shufb(&x3, M);                                                    \
+    xor2(&x4, (const aes_uint128_t *) (bskey + 128 * (i - 1) + 64));  \
+    shufb(&x4, M);                                                    \
+    xor2(&x5, (const aes_uint128_t *) (bskey + 128 * (i - 1) + 80));  \
+    shufb(&x5, M);                                                    \
+    xor2(&x6, (const aes_uint128_t *) (bskey + 128 * (i - 1) + 96));  \
+    shufb(&x6, M);                                                    \
+    xor2(&x7, (const aes_uint128_t *) (bskey + 128 * (i - 1) + 112)); \
+    shufb(&x7, M)
+
+#define mixcolumns(x0, x1, x2, x3, x4, x5, x6, x7, t0, t1, t2, t3, t4, t5, t6, \
+                   t7)                                                         \
+    shufd(&t0, &x0, 0x93);                                                     \
+    shufd(&t1, &x1, 0x93);                                                     \
+    shufd(&t2, &x2, 0x93);                                                     \
+    shufd(&t3, &x3, 0x93);                                                     \
+    shufd(&t4, &x4, 0x93);                                                     \
+    shufd(&t5, &x5, 0x93);                                                     \
+    shufd(&t6, &x6, 0x93);                                                     \
+    shufd(&t7, &x7, 0x93);                                                     \
+                                                                               \
+    xor2(&x0, &t0);                                                            \
+    xor2(&x1, &t1);                                                            \
+    xor2(&x2, &t2);                                                            \
+    xor2(&x3, &t3);                                                            \
+    xor2(&x4, &t4);                                                            \
+    xor2(&x5, &t5);                                                            \
+    xor2(&x6, &t6);                                                            \
+    xor2(&x7, &t7);                                                            \
+                                                                               \
+    xor2(&t0, &x7);                                                            \
+    xor2(&t1, &x0);                                                            \
+    xor2(&t2, &x1);                                                            \
+    xor2(&t1, &x7);                                                            \
+    xor2(&t3, &x2);                                                            \
+    xor2(&t4, &x3);                                                            \
+    xor2(&t5, &x4);                                                            \
+    xor2(&t3, &x7);                                                            \
+    xor2(&t6, &x5);                                                            \
+    xor2(&t7, &x6);                                                            \
+    xor2(&t4, &x7);                                                            \
+                                                                               \
+    shufd(&x0, &x0, 0x4e);                                                     \
+    shufd(&x1, &x1, 0x4e);                                                     \
+    shufd(&x2, &x2, 0x4e);                                                     \
+    shufd(&x3, &x3, 0x4e);                                                     \
+    shufd(&x4, &x4, 0x4e);                                                     \
+    shufd(&x5, &x5, 0x4e);                                                     \
+    shufd(&x6, &x6, 0x4e);                                                     \
+    shufd(&x7, &x7, 0x4e);                                                     \
+                                                                               \
+    xor2(&t0, &x0);                                                            \
+    xor2(&t1, &x1);                                                            \
+    xor2(&t2, &x2);                                                            \
+    xor2(&t3, &x3);                                                            \
+    xor2(&t4, &x4);                                                            \
+    xor2(&t5, &x5);                                                            \
+    xor2(&t6, &x6);                                                            \
+    xor2(&t7, &x7)
+
+#define aesround(i, b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, \
+                 t6, t7, bskey)                                             \
+    shiftrows(b0, b1, b2, b3, b4, b5, b6, b7, i, SR, bskey);                \
+    sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7);   \
+    mixcolumns(b0, b1, b4, b6, b3, b7, b2, b5, t0, t1, t2, t3, t4, t5, t6, t7)
+
+#define lastround(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, \
+                  t7, bskey)                                                  \
+    shiftrows(b0, b1, b2, b3, b4, b5, b6, b7, 10, SRM0, bskey);               \
+    sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7);     \
+    xor2(&b0, (const aes_uint128_t *) (bskey + 128 * 10));                    \
+    xor2(&b1, (const aes_uint128_t *) (bskey + 128 * 10 + 16));               \
+    xor2(&b4, (const aes_uint128_t *) (bskey + 128 * 10 + 32));               \
+    xor2(&b6, (const aes_uint128_t *) (bskey + 128 * 10 + 48));               \
+    xor2(&b3, (const aes_uint128_t *) (bskey + 128 * 10 + 64));               \
+    xor2(&b7, (const aes_uint128_t *) (bskey + 128 * 10 + 80));               \
+    xor2(&b2, (const aes_uint128_t *) (bskey + 128 * 10 + 96));               \
+    xor2(&b5, (const aes_uint128_t *) (bskey + 128 * 10 + 112))
+
+#define sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, s0, s1, s2, s3)   \
+    InBasisChange(b0, b1, b2, b3, b4, b5, b6, b7);                             \
+    Inv_GF256(b6, b5, b0, b3, b7, b1, b4, b2, t0, t1, t2, t3, s0, s1, s2, s3); \
+    OutBasisChange(b7, b1, b4, b2, b6, b5, b0, b3)
+
+#define InBasisChange(b0, b1, b2, b3, b4, b5, b6, b7) \
+    xor2(&b5, &b6);                                   \
+    xor2(&b2, &b1);                                   \
+    xor2(&b5, &b0);                                   \
+    xor2(&b6, &b2);                                   \
+    xor2(&b3, &b0);                                   \
+                                                      \
+    xor2(&b6, &b3);                                   \
+    xor2(&b3, &b7);                                   \
+    xor2(&b3, &b4);                                   \
+    xor2(&b7, &b5);                                   \
+    xor2(&b3, &b1);                                   \
+                                                      \
+    xor2(&b4, &b5);                                   \
+    xor2(&b2, &b7);                                   \
+    xor2(&b1, &b5)
+
+#define OutBasisChange(b0, b1, b2, b3, b4, b5, b6, b7) \
+    xor2(&b0, &b6);                                    \
+    xor2(&b1, &b4);                                    \
+    xor2(&b2, &b0);                                    \
+    xor2(&b4, &b6);                                    \
+    xor2(&b6, &b1);                                    \
+                                                       \
+    xor2(&b1, &b5);                                    \
+    xor2(&b5, &b3);                                    \
+    xor2(&b2, &b5);                                    \
+    xor2(&b3, &b7);                                    \
+    xor2(&b7, &b5);                                    \
+                                                       \
+    xor2(&b4, &b7)
+
+#define Mul_GF4(x0, x1, y0, y1, t0) \
+    copy2(&t0, &y0);                \
+    xor2(&t0, &y1);                 \
+    and2(&t0, &x0);                 \
+    xor2(&x0, &x1);                 \
+    and2(&x0, &y1);                 \
+    and2(&x1, &y0);                 \
+    xor2(&x0, &x1);                 \
+    xor2(&x1, &t0)
+
+#define Mul_GF4_N(x0, x1, y0, y1, t0) \
+    copy2(&t0, &y0);                  \
+    xor2(&t0, &y1);                   \
+    and2(&t0, &x0);                   \
+    xor2(&x0, &x1);                   \
+    and2(&x0, &y1);                   \
+    and2(&x1, &y0);                   \
+    xor2(&x1, &x0);                   \
+    xor2(&x0, &t0)
+
+#define Mul_GF4_2(x0, x1, x2, x3, y0, y1, t0, t1) \
+    copy2(&t0, = y0);                             \
+    xor2(&t0, &y1);                               \
+    copy2(&t1, &t0);                              \
+    and2(&t0, &x0);                               \
+    and2(&t1, &x2);                               \
+    xor2(&x0, &x1);                               \
+    xor2(&x2, &x3);                               \
+    and2(&x0, &y1);                               \
+    and2(&x2, &y1);                               \
+    and2(&x1, &y0);                               \
+    and2(&x3, &y0);                               \
+    xor2(&x0, &x1);                               \
+    xor2(&x2, &x3);                               \
+    xor2(&x1, &t0);                               \
+    xor2(&x3, &t1)
+
+#define Mul_GF16(x0, x1, x2, x3, y0, y1, y2, y3, t0, t1, t2, t3) \
+    copy2(&t0, &x0);                                             \
+    copy2(&t1, &x1);                                             \
+    Mul_GF4(x0, x1, y0, y1, t2);                                 \
+    xor2(&t0, &x2);                                              \
+    xor2(&t1, &x3);                                              \
+    xor2(&y0, &y2);                                              \
+    xor2(&y1, &y3);                                              \
+    Mul_GF4_N(t0, t1, y0, y1, t2);                               \
+    Mul_GF4(x2, x3, y2, y3, t3);                                 \
+                                                                 \
+    xor2(&x0, &t0);                                              \
+    xor2(&x2, &t0);                                              \
+    xor2(&x1, &t1);                                              \
+    xor2(&x3, &t1)
+
+#define Mul_GF16_2(x0, x1, x2, x3, x4, x5, x6, x7, y0, y1, y2, y3, t0, t1, t2, \
+                   t3)                                                         \
+    copy2(&t0, &x0);                                                           \
+    copy2(&t1, &x1);                                                           \
+    Mul_GF4(x0, x1, y0, y1, t2);                                               \
+    xor2(&t0, &x2);                                                            \
+    xor2(&t1, &x3);                                                            \
+    xor2(&y0, &y2);                                                            \
+    xor2(&y1, &y3);                                                            \
+    Mul_GF4_N(t0, t1, y0, y1, t3);                                             \
+    Mul_GF4(x2, x3, y2, y3, t2);                                               \
+                                                                               \
+    xor2(&x0, &t0);                                                            \
+    xor2(&x2, &t0);                                                            \
+    xor2(&x1, &t1);                                                            \
+    xor2(&x3, &t1);                                                            \
+                                                                               \
+    copy2(&t0, &x4);                                                           \
+    copy2(&t1, &x5);                                                           \
+    xor2(&t0, &x6);                                                            \
+    xor2(&t1, &x7);                                                            \
+    Mul_GF4_N(t0, t1, y0, y1, t3);                                             \
+    Mul_GF4(x6, x7, y2, y3, t2);                                               \
+    xor2(&y0, &y2);                                                            \
+    xor2(&y1, &y3);                                                            \
+    Mul_GF4(x4, x5, y0, y1, t3);                                               \
+                                                                               \
+    xor2(&x4, &t0);                                                            \
+    xor2(&x6, &t0);                                                            \
+    xor2(&x5, &t1);                                                            \
+    xor2(&x7, &t1)
+
+#define Inv_GF16(x0, x1, x2, x3, t0, t1, t2, t3) \
+    copy2(&t0, &x1);                             \
+    copy2(&t1, &x0);                             \
+    and2(&t0, &x3);                              \
+    or2(&t1, &x2);                               \
+    copy2(&t2, &x1);                             \
+    copy2(&t3, &x0);                             \
+    or2(&t2, &x2);                               \
+    or2(&t3, &x3);                               \
+    xor2(&t2, &t3);                              \
+                                                 \
+    xor2(&t0, &t2);                              \
+    xor2(&t1, &t2);                              \
+                                                 \
+    Mul_GF4_2(x0, x1, x2, x3, t1, t0, t2, t3)
+
+#define Inv_GF256(x0, x1, x2, x3, x4, x5, x6, x7, t0, t1, t2, t3, s0, s1, s2, \
+                  s3)                                                         \
+    copy2(&t3, &x4);                                                          \
+    copy2(&t2, &x5);                                                          \
+    copy2(&t1, &x1);                                                          \
+    copy2(&s1, &x7);                                                          \
+    copy2(&s0, &x0);                                                          \
+                                                                              \
+    xor2(&t3, &x6);                                                           \
+    xor2(&t2, &x7);                                                           \
+    xor2(&t1, &x3);                                                           \
+    xor2(&s1, &x6);                                                           \
+    xor2(&s0, &x2);                                                           \
+                                                                              \
+    copy2(&s2, &t3);                                                          \
+    copy2(&t0, &t2);                                                          \
+    copy2(&s3, &t3);                                                          \
+                                                                              \
+    or2(&t2, &t1);                                                            \
+    or2(&t3, &s0);                                                            \
+    xor2(&s3, &t0);                                                           \
+    and2(&s2, &s0);                                                           \
+    and2(&t0, &t1);                                                           \
+    xor2(&s0, &t1);                                                           \
+    and2(&s3, &s0);                                                           \
+    copy2(&s0, &x3);                                                          \
+    xor2(&s0, &x2);                                                           \
+    and2(&s1, &s0);                                                           \
+    xor2(&t3, &s1);                                                           \
+    xor2(&t2, &s1);                                                           \
+    copy2(&s1, &x4);                                                          \
+    xor2(&s1, &x5);                                                           \
+    copy2(&s0, &x1);                                                          \
+    copy2(&t1, &s1);                                                          \
+    xor2(&s0, &x0);                                                           \
+    or2(&t1, &s0);                                                            \
+    and2(&s1, &s0);                                                           \
+    xor2(&t0, &s1);                                                           \
+    xor2(&t3, &s3);                                                           \
+    xor2(&t2, &s2);                                                           \
+    xor2(&t1, &s3);                                                           \
+    xor2(&t0, &s2);                                                           \
+    xor2(&t1, &s2);                                                           \
+    copy2(&s0, &x7);                                                          \
+    copy2(&s1, &x6);                                                          \
+    copy2(&s2, &x5);                                                          \
+    copy2(&s3, &x4);                                                          \
+    and2(&s0, &x3);                                                           \
+    and2(&s1, &x2);                                                           \
+    and2(&s2, &x1);                                                           \
+    or2(&s3, &x0);                                                            \
+    xor2(&t3, &s0);                                                           \
+    xor2(&t2, &s1);                                                           \
+    xor2(&t1, &s2);                                                           \
+    xor2(&t0, &s3);                                                           \
+                                                                              \
+    copy2(&s0, &t3);                                                          \
+    xor2(&s0, &t2);                                                           \
+    and2(&t3, &t1);                                                           \
+    copy2(&s2, &t0);                                                          \
+    xor2(&s2, &t3);                                                           \
+    copy2(&s3, &s0);                                                          \
+    and2(&s3, &s2);                                                           \
+    xor2(&s3, &t2);                                                           \
+    copy2(&s1, &t1);                                                          \
+    xor2(&s1, &t0);                                                           \
+    xor2(&t3, &t2);                                                           \
+    and2(&s1, &t3);                                                           \
+    xor2(&s1, &t0);                                                           \
+    xor2(&t1, &s1);                                                           \
+    copy2(&t2, &s2);                                                          \
+    xor2(&t2, &s1);                                                           \
+    and2(&t2, &t0);                                                           \
+    xor2(&t1, &t2);                                                           \
+    xor2(&s2, &t2);                                                           \
+    and2(&s2, &s3);                                                           \
+    xor2(&s2, &s0);                                                           \
+                                                                              \
+    Mul_GF16_2(x0, x1, x2, x3, x4, x5, x6, x7, s3, s2, s1, t1, s0, t0, t2, t3)
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/consts_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/consts_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/consts_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/consts_aes128ctr.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,28 @@
+#include "consts.h"
+
+const unsigned char ROTB[16] = {
+    0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08
+};
+const unsigned char M0[16] = { 0x0f, 0x0b, 0x07, 0x03, 0x0e, 0x0a, 0x06, 0x02,
+                               0x0d, 0x09, 0x05, 0x01, 0x0c, 0x08, 0x04, 0x00 };
+const unsigned char EXPB0[16] = { 0x03, 0x03, 0x03, 0x03, 0x07, 0x07,
+                                  0x07, 0x07, 0x0b, 0x0b, 0x0b, 0x0b,
+                                  0x0f, 0x0f, 0x0f, 0x0f };
+
+const unsigned char SWAP32[16] = { 0x03, 0x02, 0x01, 0x00, 0x07, 0x06,
+                                   0x05, 0x04, 0x0b, 0x0a, 0x09, 0x08,
+                                   0x0f, 0x0e, 0x0d, 0x0c };
+const unsigned char M0SWAP[16] = { 0x0c, 0x08, 0x04, 0x00, 0x0d, 0x09,
+                                   0x05, 0x01, 0x0e, 0x0a, 0x06, 0x02,
+                                   0x0f, 0x0b, 0x07, 0x03 };
+const unsigned char SR[16] = { 0x01, 0x02, 0x03, 0x00, 0x06, 0x07, 0x04, 0x05,
+                               0x0b, 0x08, 0x09, 0x0a, 0x0c, 0x0d, 0x0e, 0x0f };
+const unsigned char SRM0[16] = {
+    0x0f, 0x0a, 0x05, 0x00, 0x0e, 0x09, 0x04, 0x03,
+    0x0d, 0x08, 0x07, 0x02, 0x0c, 0x0b, 0x06, 0x01
+};
+
+const aes_uint128_t BS0 = { { 0x5555555555555555ULL, 0x5555555555555555ULL } };
+const aes_uint128_t BS1 = { { 0x3333333333333333ULL, 0x3333333333333333ULL } };
+const aes_uint128_t BS2 = { { 0x0f0f0f0f0f0f0f0fULL, 0x0f0f0f0f0f0f0f0fULL } };
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/consts.h libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/consts.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/consts.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/consts.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,28 @@
+#ifndef aes128ctr_nacl_consts_H
+#define aes128ctr_nacl_consts_H
+
+#include "int128.h"
+
+#define ROTB crypto_stream_aes128ctr_nacl_ROTB
+#define M0 crypto_stream_aes128ctr_nacl_M0
+#define EXPB0 crypto_stream_aes128ctr_nacl_EXPB0
+#define SWAP32 crypto_stream_aes128ctr_nacl_SWAP32
+#define M0SWAP crypto_stream_aes128ctr_nacl_M0SWAP
+#define SR crypto_stream_aes128ctr_nacl_SR
+#define SRM0 crypto_stream_aes128ctr_nacl_SRM0
+#define BS0 crypto_stream_aes128ctr_nacl_BS0
+#define BS1 crypto_stream_aes128ctr_nacl_BS1
+#define BS2 crypto_stream_aes128ctr_nacl_BS2
+
+extern const unsigned char ROTB[16];
+extern const unsigned char M0[16];
+extern const unsigned char EXPB0[16];
+extern const unsigned char SWAP32[16];
+extern const unsigned char M0SWAP[16];
+extern const unsigned char SR[16];
+extern const unsigned char SRM0[16];
+extern const aes_uint128_t BS0;
+extern const aes_uint128_t BS1;
+extern const aes_uint128_t BS2;
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/int128_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/int128_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/int128_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/int128_aes128ctr.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,149 @@
+#include <stdint.h>
+
+#include "common.h"
+#include "int128.h"
+
+void
+xor2(aes_uint128_t *r, const aes_uint128_t *x)
+{
+    r->u64[0] ^= x->u64[0];
+    r->u64[1] ^= x->u64[1];
+}
+
+void
+and2(aes_uint128_t *r, const aes_uint128_t *x)
+{
+    r->u64[0] &= x->u64[0];
+    r->u64[1] &= x->u64[1];
+}
+
+void
+or2(aes_uint128_t *r, const aes_uint128_t *x)
+{
+    r->u64[0] |= x->u64[0];
+    r->u64[1] |= x->u64[1];
+}
+
+void
+copy2(aes_uint128_t *r, const aes_uint128_t *x)
+{
+    r->u64[0] = x->u64[0];
+    r->u64[1] = x->u64[1];
+}
+
+void
+shufb(aes_uint128_t *r, const unsigned char *l)
+{
+    aes_uint128_t t;
+    uint8_t *     ct;
+    uint8_t *     cr;
+
+    copy2(&t, r);
+    cr     = r->u8;
+    ct     = t.u8;
+    cr[0]  = ct[l[0]];
+    cr[1]  = ct[l[1]];
+    cr[2]  = ct[l[2]];
+    cr[3]  = ct[l[3]];
+    cr[4]  = ct[l[4]];
+    cr[5]  = ct[l[5]];
+    cr[6]  = ct[l[6]];
+    cr[7]  = ct[l[7]];
+    cr[8]  = ct[l[8]];
+    cr[9]  = ct[l[9]];
+    cr[10] = ct[l[10]];
+    cr[11] = ct[l[11]];
+    cr[12] = ct[l[12]];
+    cr[13] = ct[l[13]];
+    cr[14] = ct[l[14]];
+    cr[15] = ct[l[15]];
+}
+
+void
+shufd(aes_uint128_t *r, const aes_uint128_t *x, const unsigned int c)
+{
+    aes_uint128_t t;
+
+    t.u32[0] = x->u32[c >> 0 & 3];
+    t.u32[1] = x->u32[c >> 2 & 3];
+    t.u32[2] = x->u32[c >> 4 & 3];
+    t.u32[3] = x->u32[c >> 6 & 3];
+    copy2(r, &t);
+}
+
+void
+rshift32_littleendian(aes_uint128_t *r, const unsigned int n)
+{
+    unsigned char *rp = (unsigned char *) r;
+    uint32_t       t;
+
+    t = LOAD32_LE(rp);
+    t >>= n;
+    STORE32_LE(rp, t);
+    t = LOAD32_LE(rp + 4);
+    t >>= n;
+    STORE32_LE(rp + 4, t);
+    t = LOAD32_LE(rp + 8);
+    t >>= n;
+    STORE32_LE(rp + 8, t);
+    t = LOAD32_LE(rp + 12);
+    t >>= n;
+    STORE32_LE(rp + 12, t);
+}
+
+void
+rshift64_littleendian(aes_uint128_t *r, const unsigned int n)
+{
+    unsigned char *rp = (unsigned char *) r;
+    uint64_t       t;
+
+    t = LOAD64_LE(rp);
+    t >>= n;
+    STORE64_LE(rp, t);
+    t = LOAD64_LE(rp + 8);
+    t >>= n;
+    STORE64_LE(rp + 8, t);
+}
+
+void
+lshift64_littleendian(aes_uint128_t *r, const unsigned int n)
+{
+    unsigned char *rp = (unsigned char *) r;
+    uint64_t       t;
+
+    t = LOAD64_LE(rp);
+    t <<= n;
+    STORE64_LE(rp, t);
+    t = LOAD64_LE(rp + 8);
+    t <<= n;
+    STORE64_LE(rp + 8, t);
+}
+
+void
+toggle(aes_uint128_t *r)
+{
+    r->u64[0] ^= 0xffffffffffffffffULL;
+    r->u64[1] ^= 0xffffffffffffffffULL;
+}
+
+void
+xor_rcon(aes_uint128_t *r)
+{
+    unsigned char *rp = (unsigned char *) r;
+    uint32_t       t;
+
+    t = LOAD32_LE(rp + 12);
+    t ^= 0xffffffff;
+    STORE32_LE(rp + 12, t);
+}
+
+void
+add_uint32_big(aes_uint128_t *r, uint32_t x)
+{
+    unsigned char *rp = (unsigned char *) r;
+    uint32_t       t;
+
+    t = LOAD32_LE(rp + 12);
+    t += x;
+    STORE32_LE(rp + 12, t);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/int128.h libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/int128.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/int128.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/int128.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,50 @@
+#ifndef aes128ctr_nacl_int128_H
+#define aes128ctr_nacl_int128_H
+
+#include <stdint.h>
+
+#include "common.h"
+
+typedef union {
+    uint64_t u64[2];
+    uint32_t u32[4];
+    uint8_t  u8[16];
+} aes_uint128_t;
+
+#define xor2 crypto_stream_aes128ctr_nacl_xor2
+void xor2(aes_uint128_t *r, const aes_uint128_t *x);
+
+#define and2 crypto_stream_aes128ctr_nacl_and2
+void and2(aes_uint128_t *r, const aes_uint128_t *x);
+
+#define or2 crypto_stream_aes128ctr_nacl_or2
+void or2(aes_uint128_t *r, const aes_uint128_t *x);
+
+#define copy2 crypto_stream_aes128ctr_nacl_copy2
+void copy2(aes_uint128_t *r, const aes_uint128_t *x);
+
+#define shufb crypto_stream_aes128ctr_nacl_shufb
+void shufb(aes_uint128_t *r, const unsigned char *l);
+
+#define shufd crypto_stream_aes128ctr_nacl_shufd
+void shufd(aes_uint128_t *r, const aes_uint128_t *x, const unsigned int c);
+
+#define rshift32_littleendian crypto_stream_aes128ctr_nacl_rshift32_littleendian
+void rshift32_littleendian(aes_uint128_t *r, const unsigned int n);
+
+#define rshift64_littleendian crypto_stream_aes128ctr_nacl_rshift64_littleendian
+void rshift64_littleendian(aes_uint128_t *r, const unsigned int n);
+
+#define lshift64_littleendian crypto_stream_aes128ctr_nacl_lshift64_littleendian
+void lshift64_littleendian(aes_uint128_t *r, const unsigned int n);
+
+#define toggle crypto_stream_aes128ctr_nacl_toggle
+void toggle(aes_uint128_t *r);
+
+#define xor_rcon crypto_stream_aes128ctr_nacl_xor_rcon
+void xor_rcon(aes_uint128_t *r);
+
+#define add_uint32_big crypto_stream_aes128ctr_nacl_add_uint32_big
+void add_uint32_big(aes_uint128_t *r, uint32_t x);
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c	2017-03-12 18:40:35.000000000 +0100
@@ -0,0 +1,31 @@
+
+#include "crypto_stream_aes128ctr.h"
+
+#ifdef __GNUC__
+# pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+#endif
+
+int
+crypto_stream_aes128ctr(unsigned char *out, unsigned long long outlen,
+                        const unsigned char *n, const unsigned char *k)
+{
+    unsigned char d[crypto_stream_aes128ctr_BEFORENMBYTES];
+
+    crypto_stream_aes128ctr_beforenm(d, k);
+    crypto_stream_aes128ctr_afternm(out, outlen, n, d);
+
+    return 0;
+}
+
+int
+crypto_stream_aes128ctr_xor(unsigned char *out, const unsigned char *in,
+                            unsigned long long inlen, const unsigned char *n,
+                            const unsigned char *k)
+{
+    unsigned char d[crypto_stream_aes128ctr_BEFORENMBYTES];
+
+    crypto_stream_aes128ctr_beforenm(d, k);
+    crypto_stream_aes128ctr_xor_afternm(out, in, inlen, n, d);
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,195 @@
+/* Author: Peter Schwabe, ported from an assembly implementation by Emilia
+ * Käsper
+ * Date: 2009-03-19
+ * Public domain */
+
+#include "common.h"
+#include "consts.h"
+#include "crypto_stream_aes128ctr.h"
+#include "int128.h"
+
+int
+crypto_stream_aes128ctr_xor_afternm(unsigned char *out, const unsigned char *in,
+                                    unsigned long long   len,
+                                    const unsigned char *nonce,
+                                    const unsigned char *c)
+{
+    aes_uint128_t      xmm0;
+    aes_uint128_t      xmm1;
+    aes_uint128_t      xmm2;
+    aes_uint128_t      xmm3;
+    aes_uint128_t      xmm4;
+    aes_uint128_t      xmm5;
+    aes_uint128_t      xmm6;
+    aes_uint128_t      xmm7;
+    aes_uint128_t      xmm8;
+    aes_uint128_t      xmm9;
+    aes_uint128_t      xmm10;
+    aes_uint128_t      xmm11;
+    aes_uint128_t      xmm12;
+    aes_uint128_t      xmm13;
+    aes_uint128_t      xmm14;
+    aes_uint128_t      xmm15;
+    aes_uint128_t      nonce_stack;
+    unsigned long long lensav;
+    unsigned char      bl[128];
+    unsigned char *    blp;
+    unsigned char *    np;
+    unsigned char      b;
+    uint32_t           tmp;
+
+    /* Copy nonce on the stack */
+    copy2(&nonce_stack, (const aes_uint128_t *) (nonce + 0));
+    np = (unsigned char *) &nonce_stack;
+
+enc_block:
+
+    xmm0 = *(aes_uint128_t *) (np + 0);
+    copy2(&xmm1, &xmm0);
+    shufb(&xmm1, SWAP32);
+    copy2(&xmm2, &xmm1);
+    copy2(&xmm3, &xmm1);
+    copy2(&xmm4, &xmm1);
+    copy2(&xmm5, &xmm1);
+    copy2(&xmm6, &xmm1);
+    copy2(&xmm7, &xmm1);
+
+    add_uint32_big(&xmm1, 1);
+    add_uint32_big(&xmm2, 2);
+    add_uint32_big(&xmm3, 3);
+    add_uint32_big(&xmm4, 4);
+    add_uint32_big(&xmm5, 5);
+    add_uint32_big(&xmm6, 6);
+    add_uint32_big(&xmm7, 7);
+
+    shufb(&xmm0, M0);
+    shufb(&xmm1, M0SWAP);
+    shufb(&xmm2, M0SWAP);
+    shufb(&xmm3, M0SWAP);
+    shufb(&xmm4, M0SWAP);
+    shufb(&xmm5, M0SWAP);
+    shufb(&xmm6, M0SWAP);
+    shufb(&xmm7, M0SWAP);
+
+    bitslice(xmm7, xmm6, xmm5, xmm4, xmm3, xmm2, xmm1, xmm0, xmm8);
+
+    aesround(1, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9,
+             xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, c);
+    aesround(2, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0,
+             xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, c);
+    aesround(3, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9,
+             xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, c);
+    aesround(4, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0,
+             xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, c);
+    aesround(5, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9,
+             xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, c);
+    aesround(6, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0,
+             xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, c);
+    aesround(7, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9,
+             xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, c);
+    aesround(8, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0,
+             xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, c);
+    aesround(9, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9,
+             xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, c);
+    lastround(xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1,
+              xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, c);
+
+    bitslice(xmm13, xmm10, xmm15, xmm11, xmm14, xmm12, xmm9, xmm8, xmm0);
+
+    if (len < 128) {
+        goto partial;
+    }
+    if (len == 128) {
+        goto full;
+    }
+    tmp = LOAD32_BE(np + 12);
+    tmp += 8;
+    STORE32_BE(np + 12, tmp);
+
+    xor2(&xmm8, (const aes_uint128_t *) (in + 0));
+    xor2(&xmm9, (const aes_uint128_t *) (in + 16));
+    xor2(&xmm12, (const aes_uint128_t *) (in + 32));
+    xor2(&xmm14, (const aes_uint128_t *) (in + 48));
+    xor2(&xmm11, (const aes_uint128_t *) (in + 64));
+    xor2(&xmm15, (const aes_uint128_t *) (in + 80));
+    xor2(&xmm10, (const aes_uint128_t *) (in + 96));
+    xor2(&xmm13, (const aes_uint128_t *) (in + 112));
+
+    *(aes_uint128_t *) (out + 0)   = xmm8;
+    *(aes_uint128_t *) (out + 16)  = xmm9;
+    *(aes_uint128_t *) (out + 32)  = xmm12;
+    *(aes_uint128_t *) (out + 48)  = xmm14;
+    *(aes_uint128_t *) (out + 64)  = xmm11;
+    *(aes_uint128_t *) (out + 80)  = xmm15;
+    *(aes_uint128_t *) (out + 96)  = xmm10;
+    *(aes_uint128_t *) (out + 112) = xmm13;
+
+    len -= 128;
+    in += 128;
+    out += 128;
+
+    goto enc_block;
+
+partial:
+
+    lensav = len;
+    len >>= 4;
+
+    tmp = LOAD32_BE(np + 12);
+    tmp += len;
+    STORE32_BE(np + 12, tmp);
+
+    blp = bl;
+
+    *(aes_uint128_t *) (blp + 0)   = xmm8;
+    *(aes_uint128_t *) (blp + 16)  = xmm9;
+    *(aes_uint128_t *) (blp + 32)  = xmm12;
+    *(aes_uint128_t *) (blp + 48)  = xmm14;
+    *(aes_uint128_t *) (blp + 64)  = xmm11;
+    *(aes_uint128_t *) (blp + 80)  = xmm15;
+    *(aes_uint128_t *) (blp + 96)  = xmm10;
+    *(aes_uint128_t *) (blp + 112) = xmm13;
+
+bytes:
+
+    if (lensav == 0) {
+        goto end;
+    }
+    b = blp[0]; /* clang false positive */
+    b ^= *(const unsigned char *) (in + 0);
+    *(unsigned char *) (out + 0) = b;
+
+    blp += 1;
+    in += 1;
+    out += 1;
+    lensav -= 1;
+
+    goto bytes;
+
+full:
+
+    tmp = LOAD32_BE(np + 12);
+    tmp += 8;
+    STORE32_BE(np + 12, tmp);
+
+    xor2(&xmm8, (const aes_uint128_t *) (in + 0));
+    xor2(&xmm9, (const aes_uint128_t *) (in + 16));
+    xor2(&xmm12, (const aes_uint128_t *) (in + 32));
+    xor2(&xmm14, (const aes_uint128_t *) (in + 48));
+    xor2(&xmm11, (const aes_uint128_t *) (in + 64));
+    xor2(&xmm15, (const aes_uint128_t *) (in + 80));
+    xor2(&xmm10, (const aes_uint128_t *) (in + 96));
+    xor2(&xmm13, (const aes_uint128_t *) (in + 112));
+
+    *(aes_uint128_t *) (out + 0)   = xmm8;
+    *(aes_uint128_t *) (out + 16)  = xmm9;
+    *(aes_uint128_t *) (out + 32)  = xmm12;
+    *(aes_uint128_t *) (out + 48)  = xmm14;
+    *(aes_uint128_t *) (out + 64)  = xmm11;
+    *(aes_uint128_t *) (out + 80)  = xmm15;
+    *(aes_uint128_t *) (out + 96)  = xmm10;
+    *(aes_uint128_t *) (out + 112) = xmm13;
+
+end:
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/afternm_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/afternm_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/afternm_aes128ctr.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/afternm_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,159 +0,0 @@
-/* Author: Peter Schwabe, ported from an assembly implementation by Emilia Käsper
- * Date: 2009-03-19
- * Public domain */
-
-#include "crypto_stream_aes128ctr.h"
-#include "int128.h"
-#include "common.h"
-#include "consts.h"
-
-int crypto_stream_aes128ctr_afternm(unsigned char *out, unsigned long long len, const unsigned char *nonce, const unsigned char *c)
-{
-
-  int128 xmm0;
-  int128 xmm1;
-  int128 xmm2;
-  int128 xmm3;
-  int128 xmm4;
-  int128 xmm5;
-  int128 xmm6;
-  int128 xmm7;
-
-  int128 xmm8;
-  int128 xmm9;
-  int128 xmm10;
-  int128 xmm11;
-  int128 xmm12;
-  int128 xmm13;
-  int128 xmm14;
-  int128 xmm15;
-
-  int128 nonce_stack;
-  unsigned long long lensav;
-  unsigned char bl[128];
-  unsigned char *blp;
-  unsigned char *np;
-  unsigned char b;
-
-  uint32 tmp;
-
-  /* Copy nonce on the stack */
-  copy2(&nonce_stack, (const int128 *) (nonce + 0));
-  np = (unsigned char *)&nonce_stack;
-
-    enc_block:
-
-    xmm0 = *(int128 *) (np + 0);
-    copy2(&xmm1, &xmm0);
-    shufb(&xmm1, SWAP32);
-    copy2(&xmm2, &xmm1);
-    copy2(&xmm3, &xmm1);
-    copy2(&xmm4, &xmm1);
-    copy2(&xmm5, &xmm1);
-    copy2(&xmm6, &xmm1);
-    copy2(&xmm7, &xmm1);
-
-    add_uint32_big(&xmm1, 1);
-    add_uint32_big(&xmm2, 2);
-    add_uint32_big(&xmm3, 3);
-    add_uint32_big(&xmm4, 4);
-    add_uint32_big(&xmm5, 5);
-    add_uint32_big(&xmm6, 6);
-    add_uint32_big(&xmm7, 7);
-
-    shufb(&xmm0, M0);
-    shufb(&xmm1, M0SWAP);
-    shufb(&xmm2, M0SWAP);
-    shufb(&xmm3, M0SWAP);
-    shufb(&xmm4, M0SWAP);
-    shufb(&xmm5, M0SWAP);
-    shufb(&xmm6, M0SWAP);
-    shufb(&xmm7, M0SWAP);
-
-    bitslice(xmm7, xmm6, xmm5, xmm4, xmm3, xmm2, xmm1, xmm0, xmm8)
-
-    aesround( 1, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-    aesround( 2, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,c)
-    aesround( 3, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-    aesround( 4, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,c)
-    aesround( 5, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-    aesround( 6, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,c)
-    aesround( 7, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-    aesround( 8, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,c)
-    aesround( 9, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-    lastround(xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,c)
-
-    bitslice(xmm13, xmm10, xmm15, xmm11, xmm14, xmm12, xmm9, xmm8, xmm0)
-
-    if(len < 128) goto partial;
-    if(len == 128) goto full;
-
-    tmp = LOAD32_BE(np + 12);
-    tmp += 8;
-    STORE32_BE(np + 12, tmp);
-
-    *(int128 *) (out + 0) = xmm8;
-    *(int128 *) (out + 16) = xmm9;
-    *(int128 *) (out + 32) = xmm12;
-    *(int128 *) (out + 48) = xmm14;
-    *(int128 *) (out + 64) = xmm11;
-    *(int128 *) (out + 80) = xmm15;
-    *(int128 *) (out + 96) = xmm10;
-    *(int128 *) (out + 112) = xmm13;
-
-    len -= 128;
-    out += 128;
-
-    goto enc_block;
-
-    partial:
-
-    lensav = len;
-    len >>= 4;
-
-    tmp = LOAD32_BE(np + 12);
-    tmp += len;
-    STORE32_BE(np + 12, tmp);
-
-    blp = bl;
-    *(int128 *)(blp + 0) = xmm8;
-    *(int128 *)(blp + 16) = xmm9;
-    *(int128 *)(blp + 32) = xmm12;
-    *(int128 *)(blp + 48) = xmm14;
-    *(int128 *)(blp + 64) = xmm11;
-    *(int128 *)(blp + 80) = xmm15;
-    *(int128 *)(blp + 96) = xmm10;
-    *(int128 *)(blp + 112) = xmm13;
-
-    bytes:
-
-    if(lensav == 0) goto end;
-
-    b = blp[0]; /* clang false positive */
-    *(unsigned char *)(out + 0) = b;
-
-    blp += 1;
-    out +=1;
-    lensav -= 1;
-
-    goto bytes;
-
-    full:
-
-    tmp = LOAD32_BE(np + 12);
-    tmp += 8;
-    STORE32_BE(np + 12, tmp);
-
-    *(int128 *) (out + 0) = xmm8;
-    *(int128 *) (out + 16) = xmm9;
-    *(int128 *) (out + 32) = xmm12;
-    *(int128 *) (out + 48) = xmm14;
-    *(int128 *) (out + 64) = xmm11;
-    *(int128 *) (out + 80) = xmm15;
-    *(int128 *) (out + 96) = xmm10;
-    *(int128 *) (out + 112) = xmm13;
-
-    end:
-    return 0;
-
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,59 +0,0 @@
-/* Author: Peter Schwabe, ported from an assembly implementation by Emilia Käsper
- * Date: 2009-03-19
- * Public domain */
-
-#include "crypto_stream_aes128ctr.h"
-#include "consts.h"
-#include "int128.h"
-#include "common.h"
-
-int crypto_stream_aes128ctr_beforenm(unsigned char *c, const unsigned char *k)
-{
-
-  /*
-     int64 x0;
-     int64 x1;
-     int64 x2;
-     int64 x3;
-     int64 e;
-     int64 q0;
-     int64 q1;
-     int64 q2;
-     int64 q3;
-     */
-
-  int128 xmm0;
-  int128 xmm1;
-  int128 xmm2;
-  int128 xmm3;
-  int128 xmm4;
-  int128 xmm5;
-  int128 xmm6;
-  int128 xmm7;
-  int128 xmm8;
-  int128 xmm9;
-  int128 xmm10;
-  int128 xmm11;
-  int128 xmm12;
-  int128 xmm13;
-  int128 xmm14;
-  int128 xmm15;
-  int128 t;
-
-  bitslicekey0(k, c)
-
-    keyexpbs1(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-    keyexpbs(xmm0, xmm1, xmm4, xmm6, xmm3, xmm7, xmm2, xmm5, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm1);, 2,c)
-    keyexpbs(xmm0, xmm1, xmm3, xmm2, xmm6, xmm5, xmm4, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm6);, 3,c)
-    keyexpbs(xmm0, xmm1, xmm6, xmm4, xmm2, xmm7, xmm3, xmm5, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm3);, 4,c)
-
-    keyexpbs(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm3);, 5,c)
-    keyexpbs(xmm0, xmm1, xmm4, xmm6, xmm3, xmm7, xmm2, xmm5, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm5);, 6,c)
-    keyexpbs(xmm0, xmm1, xmm3, xmm2, xmm6, xmm5, xmm4, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm3);, 7,c)
-    keyexpbs(xmm0, xmm1, xmm6, xmm4, xmm2, xmm7, xmm3, xmm5, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm7);, 8,c)
-
-    keyexpbs(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xor_rcon(&xmm0); xor_rcon(&xmm1); xor_rcon(&xmm6); xor_rcon(&xmm3);, 9,c)
-    keyexpbs10(xmm0, xmm1, xmm4, xmm6, xmm3, xmm7, xmm2, xmm5, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-
-    return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/common.h libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/common.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/common.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/common.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,771 +0,0 @@
-/* Author: Peter Schwabe, ported from an assembly implementation by Emilia Käsper
- Date: 2009-03-19
- Public domain */
-#ifndef COMMON_H
-#define COMMON_H
-
-#include "types.h"
-#include "private/common.h"
-
-/* Macros required only for key expansion */
-
-#define keyexpbs1(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7, bskey) \
-  rotbyte(&b0);\
-  rotbyte(&b1);\
-  rotbyte(&b2);\
-  rotbyte(&b3);\
-  rotbyte(&b4);\
-  rotbyte(&b5);\
-  rotbyte(&b6);\
-  rotbyte(&b7);\
-  ;\
-  sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7);\
-  ;\
-  xor_rcon(&b0);\
-  shufb(&b0, EXPB0);\
-  shufb(&b1, EXPB0);\
-  shufb(&b4, EXPB0);\
-  shufb(&b6, EXPB0);\
-  shufb(&b3, EXPB0);\
-  shufb(&b7, EXPB0);\
-  shufb(&b2, EXPB0);\
-  shufb(&b5, EXPB0);\
-  shufb(&b0, EXPB0);\
-  ;\
-  t0 = *(int128 *)(bskey + 0);\
-  t1 = *(int128 *)(bskey + 16);\
-  t2 = *(int128 *)(bskey + 32);\
-  t3 = *(int128 *)(bskey + 48);\
-  t4 = *(int128 *)(bskey + 64);\
-  t5 = *(int128 *)(bskey + 80);\
-  t6 = *(int128 *)(bskey + 96);\
-  t7 = *(int128 *)(bskey + 112);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  rshift32_littleendian(&t0, 8);\
-  rshift32_littleendian(&t1, 8);\
-  rshift32_littleendian(&t2, 8);\
-  rshift32_littleendian(&t3, 8);\
-  rshift32_littleendian(&t4, 8);\
-  rshift32_littleendian(&t5, 8);\
-  rshift32_littleendian(&t6, 8);\
-  rshift32_littleendian(&t7, 8);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  rshift32_littleendian(&t0, 8);\
-  rshift32_littleendian(&t1, 8);\
-  rshift32_littleendian(&t2, 8);\
-  rshift32_littleendian(&t3, 8);\
-  rshift32_littleendian(&t4, 8);\
-  rshift32_littleendian(&t5, 8);\
-  rshift32_littleendian(&t6, 8);\
-  rshift32_littleendian(&t7, 8);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  rshift32_littleendian(&t0, 8);\
-  rshift32_littleendian(&t1, 8);\
-  rshift32_littleendian(&t2, 8);\
-  rshift32_littleendian(&t3, 8);\
-  rshift32_littleendian(&t4, 8);\
-  rshift32_littleendian(&t5, 8);\
-  rshift32_littleendian(&t6, 8);\
-  rshift32_littleendian(&t7, 8);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  *(int128 *)(bskey + 128) = b0;\
-  *(int128 *)(bskey + 144) = b1;\
-  *(int128 *)(bskey + 160) = b4;\
-  *(int128 *)(bskey + 176) = b6;\
-  *(int128 *)(bskey + 192) = b3;\
-  *(int128 *)(bskey + 208) = b7;\
-  *(int128 *)(bskey + 224) = b2;\
-  *(int128 *)(bskey + 240) = b5;\
-
-#define keyexpbs10(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7, bskey) ;\
-  toggle(&b0);\
-  toggle(&b1);\
-  toggle(&b5);\
-  toggle(&b6);\
-  rotbyte(&b0);\
-  rotbyte(&b1);\
-  rotbyte(&b2);\
-  rotbyte(&b3);\
-  rotbyte(&b4);\
-  rotbyte(&b5);\
-  rotbyte(&b6);\
-  rotbyte(&b7);\
-  ;\
-  sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7);\
-  ;\
-  xor_rcon(&b1);\
-  xor_rcon(&b4);\
-  xor_rcon(&b3);\
-  xor_rcon(&b7);\
-  shufb(&b0, EXPB0);\
-  shufb(&b1, EXPB0);\
-  shufb(&b4, EXPB0);\
-  shufb(&b6, EXPB0);\
-  shufb(&b3, EXPB0);\
-  shufb(&b7, EXPB0);\
-  shufb(&b2, EXPB0);\
-  shufb(&b5, EXPB0);\
-  ;\
-  t0 = *(int128 *)(bskey + 9 * 128 +   0);\
-  t1 = *(int128 *)(bskey + 9 * 128 +  16);\
-  t2 = *(int128 *)(bskey + 9 * 128 +  32);\
-  t3 = *(int128 *)(bskey + 9 * 128 +  48);\
-  t4 = *(int128 *)(bskey + 9 * 128 +  64);\
-  t5 = *(int128 *)(bskey + 9 * 128 +  80);\
-  t6 = *(int128 *)(bskey + 9 * 128 +  96);\
-  t7 = *(int128 *)(bskey + 9 * 128 + 112);\
-  ;\
-  toggle(&t0);\
-  toggle(&t1);\
-  toggle(&t5);\
-  toggle(&t6);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  rshift32_littleendian(&t0, 8);\
-  rshift32_littleendian(&t1, 8);\
-  rshift32_littleendian(&t2, 8);\
-  rshift32_littleendian(&t3, 8);\
-  rshift32_littleendian(&t4, 8);\
-  rshift32_littleendian(&t5, 8);\
-  rshift32_littleendian(&t6, 8);\
-  rshift32_littleendian(&t7, 8);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  rshift32_littleendian(&t0, 8);\
-  rshift32_littleendian(&t1, 8);\
-  rshift32_littleendian(&t2, 8);\
-  rshift32_littleendian(&t3, 8);\
-  rshift32_littleendian(&t4, 8);\
-  rshift32_littleendian(&t5, 8);\
-  rshift32_littleendian(&t6, 8);\
-  rshift32_littleendian(&t7, 8);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  rshift32_littleendian(&t0, 8);\
-  rshift32_littleendian(&t1, 8);\
-  rshift32_littleendian(&t2, 8);\
-  rshift32_littleendian(&t3, 8);\
-  rshift32_littleendian(&t4, 8);\
-  rshift32_littleendian(&t5, 8);\
-  rshift32_littleendian(&t6, 8);\
-  rshift32_littleendian(&t7, 8);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  shufb(&b0, M0);\
-  shufb(&b1, M0);\
-  shufb(&b2, M0);\
-  shufb(&b3, M0);\
-  shufb(&b4, M0);\
-  shufb(&b5, M0);\
-  shufb(&b6, M0);\
-  shufb(&b7, M0);\
-  ;\
-  *(int128 *)(bskey + 1280) = b0;\
-  *(int128 *)(bskey + 1296) = b1;\
-  *(int128 *)(bskey + 1312) = b4;\
-  *(int128 *)(bskey + 1328) = b6;\
-  *(int128 *)(bskey + 1344) = b3;\
-  *(int128 *)(bskey + 1360) = b7;\
-  *(int128 *)(bskey + 1376) = b2;\
-  *(int128 *)(bskey + 1392) = b5;\
-
-
-#define keyexpbs(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7, rcon, i, bskey) \
-  toggle(&b0);\
-  toggle(&b1);\
-  toggle(&b5);\
-  toggle(&b6);\
-  rotbyte(&b0);\
-  rotbyte(&b1);\
-  rotbyte(&b2);\
-  rotbyte(&b3);\
-  rotbyte(&b4);\
-  rotbyte(&b5);\
-  rotbyte(&b6);\
-  rotbyte(&b7);\
-  ;\
-  sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7);\
-  ;\
-  rcon;\
-  shufb(&b0, EXPB0);\
-  shufb(&b1, EXPB0);\
-  shufb(&b4, EXPB0);\
-  shufb(&b6, EXPB0);\
-  shufb(&b3, EXPB0);\
-  shufb(&b7, EXPB0);\
-  shufb(&b2, EXPB0);\
-  shufb(&b5, EXPB0);\
-  ;\
-  t0 = *(int128 *)(bskey + (i-1) * 128 +   0);\
-  t1 = *(int128 *)(bskey + (i-1) * 128 +  16);\
-  t2 = *(int128 *)(bskey + (i-1) * 128 +  32);\
-  t3 = *(int128 *)(bskey + (i-1) * 128 +  48);\
-  t4 = *(int128 *)(bskey + (i-1) * 128 +  64);\
-  t5 = *(int128 *)(bskey + (i-1) * 128 +  80);\
-  t6 = *(int128 *)(bskey + (i-1) * 128 +  96);\
-  t7 = *(int128 *)(bskey + (i-1) * 128 + 112);\
-  ;\
-  toggle(&t0);\
-  toggle(&t1);\
-  toggle(&t5);\
-  toggle(&t6);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  rshift32_littleendian(&t0, 8);\
-  rshift32_littleendian(&t1, 8);\
-  rshift32_littleendian(&t2, 8);\
-  rshift32_littleendian(&t3, 8);\
-  rshift32_littleendian(&t4, 8);\
-  rshift32_littleendian(&t5, 8);\
-  rshift32_littleendian(&t6, 8);\
-  rshift32_littleendian(&t7, 8);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  rshift32_littleendian(&t0, 8);\
-  rshift32_littleendian(&t1, 8);\
-  rshift32_littleendian(&t2, 8);\
-  rshift32_littleendian(&t3, 8);\
-  rshift32_littleendian(&t4, 8);\
-  rshift32_littleendian(&t5, 8);\
-  rshift32_littleendian(&t6, 8);\
-  rshift32_littleendian(&t7, 8);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  rshift32_littleendian(&t0, 8);\
-  rshift32_littleendian(&t1, 8);\
-  rshift32_littleendian(&t2, 8);\
-  rshift32_littleendian(&t3, 8);\
-  rshift32_littleendian(&t4, 8);\
-  rshift32_littleendian(&t5, 8);\
-  rshift32_littleendian(&t6, 8);\
-  rshift32_littleendian(&t7, 8);\
-  ;\
-  xor2(&b0, &t0);\
-  xor2(&b1, &t1);\
-  xor2(&b4, &t2);\
-  xor2(&b6, &t3);\
-  xor2(&b3, &t4);\
-  xor2(&b7, &t5);\
-  xor2(&b2, &t6);\
-  xor2(&b5, &t7);\
-  ;\
-  *(int128 *)(bskey + i*128 +   0) = b0;\
-  *(int128 *)(bskey + i*128 +  16) = b1;\
-  *(int128 *)(bskey + i*128 +  32) = b4;\
-  *(int128 *)(bskey + i*128 +  48) = b6;\
-  *(int128 *)(bskey + i*128 +  64) = b3;\
-  *(int128 *)(bskey + i*128 +  80) = b7;\
-  *(int128 *)(bskey + i*128 +  96) = b2;\
-  *(int128 *)(bskey + i*128 + 112) = b5;\
-
-/* Macros used in multiple contexts */
-
-#define bitslicekey0(key, bskey) \
-  xmm0 = *(const int128 *) (key + 0);\
-  shufb(&xmm0, M0);\
-  copy2(&xmm1, &xmm0);\
-  copy2(&xmm2, &xmm0);\
-  copy2(&xmm3, &xmm0);\
-  copy2(&xmm4, &xmm0);\
-  copy2(&xmm5, &xmm0);\
-  copy2(&xmm6, &xmm0);\
-  copy2(&xmm7, &xmm0);\
-  ;\
-  bitslice(xmm7, xmm6, xmm5, xmm4, xmm3, xmm2, xmm1, xmm0, t);\
-  ;\
-  *(int128 *) (bskey + 0) = xmm0;\
-  *(int128 *) (bskey + 16) = xmm1;\
-  *(int128 *) (bskey + 32) = xmm2;\
-  *(int128 *) (bskey + 48) = xmm3;\
-  *(int128 *) (bskey + 64) = xmm4;\
-  *(int128 *) (bskey + 80) = xmm5;\
-  *(int128 *) (bskey + 96) = xmm6;\
-  *(int128 *) (bskey + 112) = xmm7;\
-
-
-#define bitslicekey10(key, bskey) \
-  xmm0 = *(int128 *) (key + 0);\
-  copy2(xmm1, xmm0);\
-  copy2(xmm2, xmm0);\
-  copy2(xmm3, xmm0);\
-  copy2(xmm4, xmm0);\
-  copy2(xmm5, xmm0);\
-  copy2(xmm6, xmm0);\
-  copy2(xmm7, xmm0);\
-  ;\
-  bitslice(xmm7, xmm6, xmm5, xmm4, xmm3, xmm2, xmm1, xmm0, t);\
-  ;\
-  toggle(&xmm6);\
-  toggle(&xmm5);\
-  toggle(&xmm1);\
-  toggle(&xmm0);\
-  ;\
-  *(int128 *) (bskey +   0 + 1280) = xmm0;\
-  *(int128 *) (bskey +  16 + 1280) = xmm1;\
-  *(int128 *) (bskey +  32 + 1280) = xmm2;\
-  *(int128 *) (bskey +  48 + 1280) = xmm3;\
-  *(int128 *) (bskey +  64 + 1280) = xmm4;\
-  *(int128 *) (bskey +  80 + 1280) = xmm5;\
-  *(int128 *) (bskey +  96 + 1280) = xmm6;\
-  *(int128 *) (bskey + 112 + 1280) = xmm7;\
-
-
-#define bitslicekey(i,key,bskey) \
-  xmm0 = *(int128 *) (key + 0);\
-  shufb(&xmm0, M0);\
-  copy2(&xmm1, &xmm0);\
-  copy2(&xmm2, &xmm0);\
-  copy2(&xmm3, &xmm0);\
-  copy2(&xmm4, &xmm0);\
-  copy2(&xmm5, &xmm0);\
-  copy2(&xmm6, &xmm0);\
-  copy2(&xmm7, &xmm0);\
-  ;\
-  bitslice(xmm7, xmm6, xmm5, xmm4, xmm3, xmm2, xmm1, xmm0, t);\
-  ;\
-  toggle(&xmm6);\
-  toggle(&xmm5);\
-  toggle(&xmm1);\
-  toggle(&xmm0);\
-  ;\
-  *(int128 *) (bskey +   0 + 128*i) = xmm0;\
-  *(int128 *) (bskey +  16 + 128*i) = xmm1;\
-  *(int128 *) (bskey +  32 + 128*i) = xmm2;\
-  *(int128 *) (bskey +  48 + 128*i) = xmm3;\
-  *(int128 *) (bskey +  64 + 128*i) = xmm4;\
-  *(int128 *) (bskey +  80 + 128*i) = xmm5;\
-  *(int128 *) (bskey +  96 + 128*i) = xmm6;\
-  *(int128 *) (bskey + 112 + 128*i) = xmm7;\
-
-
-#define bitslice(x0, x1, x2, x3, x4, x5, x6, x7, t) \
-        swapmove(x0, x1, 1, BS0, t);\
-        swapmove(x2, x3, 1, BS0, t);\
-        swapmove(x4, x5, 1, BS0, t);\
-        swapmove(x6, x7, 1, BS0, t);\
-        ;\
-        swapmove(x0, x2, 2, BS1, t);\
-        swapmove(x1, x3, 2, BS1, t);\
-        swapmove(x4, x6, 2, BS1, t);\
-        swapmove(x5, x7, 2, BS1, t);\
-        ;\
-        swapmove(x0, x4, 4, BS2, t);\
-        swapmove(x1, x5, 4, BS2, t);\
-        swapmove(x2, x6, 4, BS2, t);\
-        swapmove(x3, x7, 4, BS2, t);\
-
-
-#define swapmove(a, b, n, m, t) \
-        copy2(&t, &b);\
-  rshift64_littleendian(&t, n);\
-        xor2(&t, &a);\
-  and2(&t, &m);\
-  xor2(&a, &t);\
-  lshift64_littleendian(&t, n);\
-  xor2(&b, &t);
-
-#define rotbyte(x) \
-  shufb(x, ROTB) /* TODO: Make faster */
-
-
-/* Macros used for encryption (and decryption) */
-
-#define shiftrows(x0, x1, x2, x3, x4, x5, x6, x7, i, M, bskey) \
-        xor2(&x0, (const int128 *)(bskey + 128*(i-1) + 0));\
-  shufb(&x0, M);\
-        xor2(&x1, (const int128 *)(bskey + 128*(i-1) + 16));\
-  shufb(&x1, M);\
-        xor2(&x2, (const int128 *)(bskey + 128*(i-1) + 32));\
-  shufb(&x2, M);\
-        xor2(&x3, (const int128 *)(bskey + 128*(i-1) + 48));\
-  shufb(&x3, M);\
-        xor2(&x4, (const int128 *)(bskey + 128*(i-1) + 64));\
-  shufb(&x4, M);\
-        xor2(&x5, (const int128 *)(bskey + 128*(i-1) + 80));\
-  shufb(&x5, M);\
-        xor2(&x6, (const int128 *)(bskey + 128*(i-1) + 96));\
-  shufb(&x6, M);\
-        xor2(&x7, (const int128 *)(bskey + 128*(i-1) + 112));\
-  shufb(&x7, M);\
-
-
-#define mixcolumns(x0, x1, x2, x3, x4, x5, x6, x7, t0, t1, t2, t3, t4, t5, t6, t7) \
-  shufd(&t0, &x0, 0x93);\
-  shufd(&t1, &x1, 0x93);\
-  shufd(&t2, &x2, 0x93);\
-  shufd(&t3, &x3, 0x93);\
-  shufd(&t4, &x4, 0x93);\
-  shufd(&t5, &x5, 0x93);\
-  shufd(&t6, &x6, 0x93);\
-  shufd(&t7, &x7, 0x93);\
-        ;\
-        xor2(&x0, &t0);\
-        xor2(&x1, &t1);\
-        xor2(&x2, &t2);\
-        xor2(&x3, &t3);\
-        xor2(&x4, &t4);\
-        xor2(&x5, &t5);\
-        xor2(&x6, &t6);\
-        xor2(&x7, &t7);\
-        ;\
-        xor2(&t0, &x7);\
-        xor2(&t1, &x0);\
-        xor2(&t2, &x1);\
-        xor2(&t1, &x7);\
-        xor2(&t3, &x2);\
-        xor2(&t4, &x3);\
-        xor2(&t5, &x4);\
-        xor2(&t3, &x7);\
-        xor2(&t6, &x5);\
-        xor2(&t7, &x6);\
-        xor2(&t4, &x7);\
-        ;\
-  shufd(&x0, &x0, 0x4e);\
-  shufd(&x1, &x1, 0x4e);\
-  shufd(&x2, &x2, 0x4e);\
-  shufd(&x3, &x3, 0x4e);\
-  shufd(&x4, &x4, 0x4e);\
-  shufd(&x5, &x5, 0x4e);\
-  shufd(&x6, &x6, 0x4e);\
-  shufd(&x7, &x7, 0x4e);\
-        ;\
-        xor2(&t0, &x0);\
-        xor2(&t1, &x1);\
-        xor2(&t2, &x2);\
-        xor2(&t3, &x3);\
-        xor2(&t4, &x4);\
-        xor2(&t5, &x5);\
-        xor2(&t6, &x6);\
-        xor2(&t7, &x7);\
-
-
-#define aesround(i, b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7, bskey) \
-        shiftrows(b0, b1, b2, b3, b4, b5, b6, b7, i, SR, bskey);\
-        sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7);\
-        mixcolumns(b0, b1, b4, b6, b3, b7, b2, b5, t0, t1, t2, t3, t4, t5, t6, t7);\
-
-
-#define lastround(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7, bskey) \
-        shiftrows(b0, b1, b2, b3, b4, b5, b6, b7, 10, SRM0, bskey);\
-        sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, t4, t5, t6, t7);\
-        xor2(&b0,(const int128 *)(bskey + 128*10));\
-        xor2(&b1,(const int128 *)(bskey + 128*10+16));\
-        xor2(&b4,(const int128 *)(bskey + 128*10+32));\
-        xor2(&b6,(const int128 *)(bskey + 128*10+48));\
-        xor2(&b3,(const int128 *)(bskey + 128*10+64));\
-        xor2(&b7,(const int128 *)(bskey + 128*10+80));\
-        xor2(&b2,(const int128 *)(bskey + 128*10+96));\
-        xor2(&b5,(const int128 *)(bskey + 128*10+112));\
-
-
-#define sbox(b0, b1, b2, b3, b4, b5, b6, b7, t0, t1, t2, t3, s0, s1, s2, s3) \
-        InBasisChange(b0, b1, b2, b3, b4, b5, b6, b7); \
-        Inv_GF256(b6, b5, b0, b3, b7, b1, b4, b2, t0, t1, t2, t3, s0, s1, s2, s3); \
-        OutBasisChange(b7, b1, b4, b2, b6, b5, b0, b3); \
-
-
-#define InBasisChange(b0, b1, b2, b3, b4, b5, b6, b7) \
-        xor2(&b5, &b6);\
-        xor2(&b2, &b1);\
-        xor2(&b5, &b0);\
-        xor2(&b6, &b2);\
-        xor2(&b3, &b0);\
-        ;\
-        xor2(&b6, &b3);\
-        xor2(&b3, &b7);\
-        xor2(&b3, &b4);\
-        xor2(&b7, &b5);\
-        xor2(&b3, &b1);\
-        ;\
-        xor2(&b4, &b5);\
-        xor2(&b2, &b7);\
-        xor2(&b1, &b5);\
-
-#define OutBasisChange(b0, b1, b2, b3, b4, b5, b6, b7) \
-        xor2(&b0, &b6);\
-        xor2(&b1, &b4);\
-        xor2(&b2, &b0);\
-        xor2(&b4, &b6);\
-        xor2(&b6, &b1);\
-        ;\
-        xor2(&b1, &b5);\
-        xor2(&b5, &b3);\
-        xor2(&b2, &b5);\
-        xor2(&b3, &b7);\
-        xor2(&b7, &b5);\
-        ;\
-        xor2(&b4, &b7);\
-
-#define Mul_GF4(x0, x1, y0, y1, t0) \
-        copy2(&t0, &y0);\
-        xor2(&t0, &y1);\
-        and2(&t0, &x0);\
-        xor2(&x0, &x1);\
-        and2(&x0, &y1);\
-        and2(&x1, &y0);\
-        xor2(&x0, &x1);\
-        xor2(&x1, &t0);\
-
-#define Mul_GF4_N(x0, x1, y0, y1, t0) \
-        copy2(&t0, &y0);\
-        xor2(&t0, &y1);\
-        and2(&t0, &x0);\
-        xor2(&x0, &x1);\
-        and2(&x0, &y1);\
-        and2(&x1, &y0);\
-        xor2(&x1, &x0);\
-        xor2(&x0, &t0);\
-
-#define Mul_GF4_2(x0, x1, x2, x3, y0, y1, t0, t1) \
-        copy2(&t0, = y0);\
-        xor2(&t0, &y1);\
-        copy2(&t1, &t0);\
-        and2(&t0, &x0);\
-        and2(&t1, &x2);\
-        xor2(&x0, &x1);\
-        xor2(&x2, &x3);\
-        and2(&x0, &y1);\
-        and2(&x2, &y1);\
-        and2(&x1, &y0);\
-        and2(&x3, &y0);\
-        xor2(&x0, &x1);\
-        xor2(&x2, &x3);\
-        xor2(&x1, &t0);\
-        xor2(&x3, &t1);\
-
-#define Mul_GF16(x0, x1, x2, x3, y0, y1, y2, y3, t0, t1, t2, t3) \
-        copy2(&t0, &x0);\
-        copy2(&t1, &x1);\
-        Mul_GF4(x0, x1, y0, y1, t2);\
-        xor2(&t0, &x2);\
-        xor2(&t1, &x3);\
-        xor2(&y0, &y2);\
-        xor2(&y1, &y3);\
-        Mul_GF4_N(t0, t1, y0, y1, t2);\
-        Mul_GF4(x2, x3, y2, y3, t3);\
-        ;\
-        xor2(&x0, &t0);\
-        xor2(&x2, &t0);\
-        xor2(&x1, &t1);\
-        xor2(&x3, &t1);\
-
-#define Mul_GF16_2(x0, x1, x2, x3, x4, x5, x6, x7, y0, y1, y2, y3, t0, t1, t2, t3) \
-        copy2(&t0, &x0);\
-        copy2(&t1, &x1);\
-        Mul_GF4(x0, x1, y0, y1, t2);\
-        xor2(&t0, &x2);\
-        xor2(&t1, &x3);\
-        xor2(&y0, &y2);\
-        xor2(&y1, &y3);\
-        Mul_GF4_N(t0, t1, y0, y1, t3);\
-        Mul_GF4(x2, x3, y2, y3, t2);\
-        ;\
-        xor2(&x0, &t0);\
-        xor2(&x2, &t0);\
-        xor2(&x1, &t1);\
-        xor2(&x3, &t1);\
-        ;\
-        copy2(&t0, &x4);\
-        copy2(&t1, &x5);\
-        xor2(&t0, &x6);\
-        xor2(&t1, &x7);\
-        Mul_GF4_N(t0, t1, y0, y1, t3);\
-        Mul_GF4(x6, x7, y2, y3, t2);\
-        xor2(&y0, &y2);\
-        xor2(&y1, &y3);\
-        Mul_GF4(x4, x5, y0, y1, t3);\
-        ;\
-        xor2(&x4, &t0);\
-        xor2(&x6, &t0);\
-        xor2(&x5, &t1);\
-        xor2(&x7, &t1);\
-
-#define Inv_GF16(x0, x1, x2, x3, t0, t1, t2, t3) \
-        copy2(&t0, &x1);\
-        copy2(&t1, &x0);\
-        and2(&t0, &x3);\
-        or2(&t1, &x2);\
-        copy2(&t2, &x1);\
-        copy2(&t3, &x0);\
-        or2(&t2, &x2);\
-        or2(&t3, &x3);\
-        xor2(&t2, &t3);\
-        ;\
-        xor2(&t0, &t2);\
-        xor2(&t1, &t2);\
-        ;\
-        Mul_GF4_2(x0, x1, x2, x3, t1, t0, t2, t3);\
-
-
-#define Inv_GF256(x0,  x1, x2, x3, x4, x5, x6, x7, t0, t1, t2, t3, s0, s1, s2, s3) \
-        copy2(&t3, &x4);\
-        copy2(&t2, &x5);\
-        copy2(&t1, &x1);\
-        copy2(&s1, &x7);\
-        copy2(&s0, &x0);\
-        ;\
-        xor2(&t3, &x6);\
-        xor2(&t2, &x7);\
-        xor2(&t1, &x3);\
-        xor2(&s1, &x6);\
-        xor2(&s0, &x2);\
-        ;\
-        copy2(&s2, &t3);\
-        copy2(&t0, &t2);\
-        copy2(&s3, &t3);\
-        ;\
-        or2(&t2, &t1);\
-        or2(&t3, &s0);\
-        xor2(&s3, &t0);\
-        and2(&s2, &s0);\
-        and2(&t0, &t1);\
-        xor2(&s0, &t1);\
-        and2(&s3, &s0);\
-        copy2(&s0, &x3);\
-        xor2(&s0, &x2);\
-        and2(&s1, &s0);\
-        xor2(&t3, &s1);\
-        xor2(&t2, &s1);\
-        copy2(&s1, &x4);\
-        xor2(&s1, &x5);\
-        copy2(&s0, &x1);\
-        copy2(&t1, &s1);\
-        xor2(&s0, &x0);\
-        or2(&t1, &s0);\
-        and2(&s1, &s0);\
-        xor2(&t0, &s1);\
-        xor2(&t3, &s3);\
-        xor2(&t2, &s2);\
-        xor2(&t1, &s3);\
-        xor2(&t0, &s2);\
-        xor2(&t1, &s2);\
-        copy2(&s0, &x7);\
-        copy2(&s1, &x6);\
-        copy2(&s2, &x5);\
-        copy2(&s3, &x4);\
-        and2(&s0, &x3);\
-        and2(&s1, &x2);\
-        and2(&s2, &x1);\
-        or2(&s3, &x0);\
-        xor2(&t3, &s0);\
-        xor2(&t2, &s1);\
-        xor2(&t1, &s2);\
-        xor2(&t0, &s3);\
-  ;\
-  copy2(&s0, &t3);\
-  xor2(&s0, &t2);\
-  and2(&t3, &t1);\
-  copy2(&s2, &t0);\
-  xor2(&s2, &t3);\
-  copy2(&s3, &s0);\
-  and2(&s3, &s2);\
-  xor2(&s3, &t2);\
-  copy2(&s1, &t1);\
-  xor2(&s1, &t0);\
-  xor2(&t3, &t2);\
-  and2(&s1, &t3);\
-  xor2(&s1, &t0);\
-  xor2(&t1, &s1);\
-  copy2(&t2, &s2);\
-  xor2(&t2, &s1);\
-  and2(&t2, &t0);\
-  xor2(&t1, &t2);\
-  xor2(&s2, &t2);\
-  and2(&s2, &s3);\
-  xor2(&s2, &s0);\
-  ;\
-  Mul_GF16_2(x0, x1, x2, x3, x4, x5, x6, x7, s3, s2, s1, t1, s0, t0, t2, t3);\
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/consts_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/consts_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/consts_aes128ctr.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/consts_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,14 +0,0 @@
-#include "consts.h"
-
-const unsigned char ROTB[16] = {0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08};
-const unsigned char M0[16]   = {0x0f, 0x0b, 0x07, 0x03, 0x0e, 0x0a, 0x06, 0x02, 0x0d, 0x09, 0x05, 0x01, 0x0c, 0x08, 0x04, 0x00};
-const unsigned char EXPB0[16] = {0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x0b, 0x0b, 0x0b, 0x0b, 0x0f, 0x0f, 0x0f, 0x0f};
-
-const unsigned char SWAP32[16] = {0x03, 0x02, 0x01, 0x00, 0x07, 0x06, 0x05, 0x04, 0x0b, 0x0a, 0x09, 0x08, 0x0f, 0x0e, 0x0d, 0x0c};
-const unsigned char M0SWAP[16] = {0x0c, 0x08, 0x04, 0x00, 0x0d, 0x09, 0x05, 0x01, 0x0e, 0x0a, 0x06, 0x02, 0x0f, 0x0b, 0x07, 0x03};
-const unsigned char SR[16] = {0x01, 0x02, 0x03, 0x00, 0x06, 0x07, 0x04, 0x05, 0x0b, 0x08, 0x09, 0x0a, 0x0c, 0x0d, 0x0e, 0x0f};
-const unsigned char SRM0[16] = {0x0f, 0x0a, 0x05, 0x00, 0x0e, 0x09, 0x04, 0x03, 0x0d, 0x08, 0x07, 0x02, 0x0c, 0x0b, 0x06, 0x01};
-
-const int128 BS0 = {{0x5555555555555555ULL, 0x5555555555555555ULL}};
-const int128 BS1 = {{0x3333333333333333ULL, 0x3333333333333333ULL}};
-const int128 BS2 = {{0x0f0f0f0f0f0f0f0fULL, 0x0f0f0f0f0f0f0f0fULL}};
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/consts.h libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/consts.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/consts.h	2016-02-27 13:22:46.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/consts.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,28 +0,0 @@
-#ifndef CONSTS_H
-#define CONSTS_H
-
-#include "int128.h"
-
-#define ROTB crypto_stream_aes128ctr_portable_ROTB
-#define M0 crypto_stream_aes128ctr_portable_M0
-#define EXPB0 crypto_stream_aes128ctr_portable_EXPB0
-#define SWAP32 crypto_stream_aes128ctr_portable_SWAP32
-#define M0SWAP crypto_stream_aes128ctr_portable_M0SWAP
-#define SR crypto_stream_aes128ctr_portable_SR
-#define SRM0 crypto_stream_aes128ctr_portable_SRM0
-#define BS0 crypto_stream_aes128ctr_portable_BS0
-#define BS1 crypto_stream_aes128ctr_portable_BS1
-#define BS2 crypto_stream_aes128ctr_portable_BS2
-
-extern const unsigned char ROTB[16];
-extern const unsigned char M0[16];
-extern const unsigned char EXPB0[16];
-extern const unsigned char SWAP32[16];
-extern const unsigned char M0SWAP[16];
-extern const unsigned char SR[16];
-extern const unsigned char SRM0[16];
-extern const int128 BS0;
-extern const int128 BS1;
-extern const int128 BS2;
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/int128_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/int128_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/int128_aes128ctr.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/int128_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,131 +0,0 @@
-
-#include "int128.h"
-#include "common.h"
-
-void xor2(int128 *r, const int128 *x)
-{
-  r->u64[0] ^= x->u64[0];
-  r->u64[1] ^= x->u64[1];
-}
-
-void and2(int128 *r, const int128 *x)
-{
-  r->u64[0] &= x->u64[0];
-  r->u64[1] &= x->u64[1];
-}
-
-void or2(int128 *r, const int128 *x)
-{
-  r->u64[0] |= x->u64[0];
-  r->u64[1] |= x->u64[1];
-}
-
-void copy2(int128 *r, const int128 *x)
-{
-  r->u64[0] = x->u64[0];
-  r->u64[1] = x->u64[1];
-}
-
-void shufb(int128 *r, const unsigned char *l)
-{
-  int128   t;
-  uint8_t *ct;
-  uint8_t *cr;
-
-  copy2(&t, r);
-  cr = r->u8;
-  ct = t.u8;
-  cr[0] = ct[l[0]];
-  cr[1] = ct[l[1]];
-  cr[2] = ct[l[2]];
-  cr[3] = ct[l[3]];
-  cr[4] = ct[l[4]];
-  cr[5] = ct[l[5]];
-  cr[6] = ct[l[6]];
-  cr[7] = ct[l[7]];
-  cr[8] = ct[l[8]];
-  cr[9] = ct[l[9]];
-  cr[10] = ct[l[10]];
-  cr[11] = ct[l[11]];
-  cr[12] = ct[l[12]];
-  cr[13] = ct[l[13]];
-  cr[14] = ct[l[14]];
-  cr[15] = ct[l[15]];
-}
-
-void shufd(int128 *r, const int128 *x, const unsigned int c)
-{
-  int128 t;
-
-  t.u32[0] = x->u32[c >> 0 & 3];
-  t.u32[1] = x->u32[c >> 2 & 3];
-  t.u32[2] = x->u32[c >> 4 & 3];
-  t.u32[3] = x->u32[c >> 6 & 3];
-  copy2(r, &t);
-}
-
-void rshift32_littleendian(int128 *r, const unsigned int n)
-{
-  unsigned char *rp = (unsigned char *)r;
-  uint32 t;
-  t = LOAD32_LE(rp);
-  t >>= n;
-  STORE32_LE(rp, t);
-  t = LOAD32_LE(rp+4);
-  t >>= n;
-  STORE32_LE(rp+4, t);
-  t = LOAD32_LE(rp+8);
-  t >>= n;
-  STORE32_LE(rp+8, t);
-  t = LOAD32_LE(rp+12);
-  t >>= n;
-  STORE32_LE(rp+12, t);
-}
-
-void rshift64_littleendian(int128 *r, const unsigned int n)
-{
-  unsigned char *rp = (unsigned char *)r;
-  uint64 t;
-  t = LOAD64_LE(rp);
-  t >>= n;
-  STORE64_LE(rp, t);
-  t = LOAD64_LE(rp+8);
-  t >>= n;
-  STORE64_LE(rp+8, t);
-}
-
-void lshift64_littleendian(int128 *r, const unsigned int n)
-{
-  unsigned char *rp = (unsigned char *)r;
-  uint64 t;
-  t = LOAD64_LE(rp);
-  t <<= n;
-  STORE64_LE(rp, t);
-  t = LOAD64_LE(rp+8);
-  t <<= n;
-  STORE64_LE(rp+8, t);
-}
-
-void toggle(int128 *r)
-{
-  r->u64[0] ^= 0xffffffffffffffffULL;
-  r->u64[1] ^= 0xffffffffffffffffULL;
-}
-
-void xor_rcon(int128 *r)
-{
-  unsigned char *rp = (unsigned char *)r;
-  uint32 t;
-  t = LOAD32_LE(rp+12);
-  t ^= 0xffffffff;
-  STORE32_LE(rp+12, t);
-}
-
-void add_uint32_big(int128 *r, uint32 x)
-{
-  unsigned char *rp = (unsigned char *)r;
-  uint32 t;
-  t = LOAD32_LE(rp+12);
-  t += x;
-  STORE32_LE(rp+12, t);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/int128.h libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/int128.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/int128.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/int128.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,56 +0,0 @@
-#ifndef INT128_H
-#define INT128_H
-
-#include <stdint.h>
-
-#include "common.h"
-
-#ifdef __cplusplus
-# ifdef __GNUC__
-#  pragma GCC diagnostic ignored "-Wlong-long"
-# endif
-#endif
-
-typedef union {
-  uint64_t u64[2];
-  uint32_t u32[4];
-  uint8_t  u8[16];
-} int128;
-
-#define xor2 crypto_stream_aes128ctr_portable_xor2
-void xor2(int128 *r, const int128 *x);
-
-#define and2 crypto_stream_aes128ctr_portable_and2
-void and2(int128 *r, const int128 *x);
-
-#define or2 crypto_stream_aes128ctr_portable_or2
-void or2(int128 *r, const int128 *x);
-
-#define copy2 crypto_stream_aes128ctr_portable_copy2
-void copy2(int128 *r, const int128 *x);
-
-#define shufb crypto_stream_aes128ctr_portable_shufb
-void shufb(int128 *r, const unsigned char *l);
-
-#define shufd crypto_stream_aes128ctr_portable_shufd
-void shufd(int128 *r, const int128 *x, const unsigned int c);
-
-#define rshift32_littleendian crypto_stream_aes128ctr_portable_rshift32_littleendian
-void rshift32_littleendian(int128 *r, const unsigned int n);
-
-#define rshift64_littleendian crypto_stream_aes128ctr_portable_rshift64_littleendian
-void rshift64_littleendian(int128 *r, const unsigned int n);
-
-#define lshift64_littleendian crypto_stream_aes128ctr_portable_lshift64_littleendian
-void lshift64_littleendian(int128 *r, const unsigned int n);
-
-#define toggle crypto_stream_aes128ctr_portable_toggle
-void toggle(int128 *r);
-
-#define xor_rcon crypto_stream_aes128ctr_portable_xor_rcon
-void xor_rcon(int128 *r);
-
-#define add_uint32_big crypto_stream_aes128ctr_portable_add_uint32_big
-void add_uint32_big(int128 *r, uint32 x);
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/stream_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/stream_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/stream_aes128ctr.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/stream_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,29 +0,0 @@
-
-#include "crypto_stream_aes128ctr.h"
-
-int crypto_stream_aes128ctr(
-        unsigned char *out,
-        unsigned long long outlen,
-        const unsigned char *n,
-        const unsigned char *k
-        )
-{
-    unsigned char d[crypto_stream_aes128ctr_BEFORENMBYTES];
-    crypto_stream_aes128ctr_beforenm(d, k);
-    crypto_stream_aes128ctr_afternm(out, outlen, n, d);
-    return 0;
-}
-
-int crypto_stream_aes128ctr_xor(
-        unsigned char *out,
-        const unsigned char *in,
-        unsigned long long inlen,
-        const unsigned char *n,
-        const unsigned char *k
-        )
-{
-    unsigned char d[crypto_stream_aes128ctr_BEFORENMBYTES];
-    crypto_stream_aes128ctr_beforenm(d, k);
-    crypto_stream_aes128ctr_xor_afternm(out, in, inlen, n, d);
-    return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/types.h libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/types.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/types.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/types.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,10 +0,0 @@
-#ifndef TYPES_H
-#define TYPES_H
-
-#include <stdint.h>
-#include <stdlib.h>
-
-typedef uint32_t uint32;
-typedef uint64_t uint64;
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,180 +0,0 @@
-/* Author: Peter Schwabe, ported from an assembly implementation by Emilia Käsper
- * Date: 2009-03-19
- * Public domain */
-
-#include "crypto_stream_aes128ctr.h"
-#include "int128.h"
-#include "common.h"
-#include "consts.h"
-
-int crypto_stream_aes128ctr_xor_afternm(unsigned char *out, const unsigned char *in, unsigned long long len, const unsigned char *nonce, const unsigned char *c)
-{
-
-  int128 xmm0;
-  int128 xmm1;
-  int128 xmm2;
-  int128 xmm3;
-  int128 xmm4;
-  int128 xmm5;
-  int128 xmm6;
-  int128 xmm7;
-
-  int128 xmm8;
-  int128 xmm9;
-  int128 xmm10;
-  int128 xmm11;
-  int128 xmm12;
-  int128 xmm13;
-  int128 xmm14;
-  int128 xmm15;
-
-  int128 nonce_stack;
-  unsigned long long lensav;
-  unsigned char bl[128];
-  unsigned char *blp;
-  unsigned char *np;
-  unsigned char b;
-
-  uint32 tmp;
-
-  /* Copy nonce on the stack */
-  copy2(&nonce_stack, (const int128 *) (nonce + 0));
-  np = (unsigned char *)&nonce_stack;
-
-    enc_block:
-
-    xmm0 = *(int128 *) (np + 0);
-    copy2(&xmm1, &xmm0);
-    shufb(&xmm1, SWAP32);
-    copy2(&xmm2, &xmm1);
-    copy2(&xmm3, &xmm1);
-    copy2(&xmm4, &xmm1);
-    copy2(&xmm5, &xmm1);
-    copy2(&xmm6, &xmm1);
-    copy2(&xmm7, &xmm1);
-
-    add_uint32_big(&xmm1, 1);
-    add_uint32_big(&xmm2, 2);
-    add_uint32_big(&xmm3, 3);
-    add_uint32_big(&xmm4, 4);
-    add_uint32_big(&xmm5, 5);
-    add_uint32_big(&xmm6, 6);
-    add_uint32_big(&xmm7, 7);
-
-    shufb(&xmm0, M0);
-    shufb(&xmm1, M0SWAP);
-    shufb(&xmm2, M0SWAP);
-    shufb(&xmm3, M0SWAP);
-    shufb(&xmm4, M0SWAP);
-    shufb(&xmm5, M0SWAP);
-    shufb(&xmm6, M0SWAP);
-    shufb(&xmm7, M0SWAP);
-
-    bitslice(xmm7, xmm6, xmm5, xmm4, xmm3, xmm2, xmm1, xmm0, xmm8)
-
-    aesround( 1, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-    aesround( 2, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,c)
-    aesround( 3, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-    aesround( 4, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,c)
-    aesround( 5, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-    aesround( 6, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,c)
-    aesround( 7, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-    aesround( 8, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,c)
-    aesround( 9, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15,c)
-    lastround(xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,c)
-
-    bitslice(xmm13, xmm10, xmm15, xmm11, xmm14, xmm12, xmm9, xmm8, xmm0)
-
-    if(len < 128) goto partial;
-    if(len == 128) goto full;
-
-    tmp = LOAD32_BE(np + 12);
-    tmp += 8;
-    STORE32_BE(np + 12, tmp);
-
-    xor2(&xmm8, (const int128 *)(in + 0));
-    xor2(&xmm9, (const int128 *)(in + 16));
-    xor2(&xmm12, (const int128 *)(in + 32));
-    xor2(&xmm14, (const int128 *)(in + 48));
-    xor2(&xmm11, (const int128 *)(in + 64));
-    xor2(&xmm15, (const int128 *)(in + 80));
-    xor2(&xmm10, (const int128 *)(in + 96));
-    xor2(&xmm13, (const int128 *)(in + 112));
-
-    *(int128 *) (out + 0) = xmm8;
-    *(int128 *) (out + 16) = xmm9;
-    *(int128 *) (out + 32) = xmm12;
-    *(int128 *) (out + 48) = xmm14;
-    *(int128 *) (out + 64) = xmm11;
-    *(int128 *) (out + 80) = xmm15;
-    *(int128 *) (out + 96) = xmm10;
-    *(int128 *) (out + 112) = xmm13;
-
-    len -= 128;
-    in += 128;
-    out += 128;
-
-    goto enc_block;
-
-    partial:
-
-    lensav = len;
-    len >>= 4;
-
-    tmp = LOAD32_BE(np + 12);
-    tmp += len;
-    STORE32_BE(np + 12, tmp);
-
-    blp = bl;
-    *(int128 *)(blp + 0) = xmm8;
-    *(int128 *)(blp + 16) = xmm9;
-    *(int128 *)(blp + 32) = xmm12;
-    *(int128 *)(blp + 48) = xmm14;
-    *(int128 *)(blp + 64) = xmm11;
-    *(int128 *)(blp + 80) = xmm15;
-    *(int128 *)(blp + 96) = xmm10;
-    *(int128 *)(blp + 112) = xmm13;
-
-    bytes:
-
-    if(lensav == 0) goto end;
-
-    b = blp[0]; /* clang false positive */
-    b ^= *(const unsigned char *)(in + 0);
-    *(unsigned char *)(out + 0) = b;
-
-    blp += 1;
-    in +=1;
-    out +=1;
-    lensav -= 1;
-
-    goto bytes;
-
-    full:
-
-    tmp = LOAD32_BE(np + 12);
-    tmp += 8;
-    STORE32_BE(np + 12, tmp);
-
-    xor2(&xmm8, (const int128 *)(in + 0));
-    xor2(&xmm9, (const int128 *)(in + 16));
-    xor2(&xmm12, (const int128 *)(in + 32));
-    xor2(&xmm14, (const int128 *)(in + 48));
-    xor2(&xmm11, (const int128 *)(in + 64));
-    xor2(&xmm15, (const int128 *)(in + 80));
-    xor2(&xmm10, (const int128 *)(in + 96));
-    xor2(&xmm13, (const int128 *)(in + 112));
-
-    *(int128 *) (out + 0) = xmm8;
-    *(int128 *) (out + 16) = xmm9;
-    *(int128 *) (out + 32) = xmm12;
-    *(int128 *) (out + 48) = xmm14;
-    *(int128 *) (out + 64) = xmm11;
-    *(int128 *) (out + 80) = xmm15;
-    *(int128 *) (out + 96) = xmm10;
-    *(int128 *) (out + 112) = xmm13;
-
-    end:
-    return 0;
-
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/stream_aes128ctr_api.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/stream_aes128ctr_api.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/stream_aes128ctr_api.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/stream_aes128ctr_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,16 +0,0 @@
-#include "crypto_stream_aes128ctr.h"
-
-size_t
-crypto_stream_aes128ctr_keybytes(void) {
-    return crypto_stream_aes128ctr_KEYBYTES;
-}
-
-size_t
-crypto_stream_aes128ctr_noncebytes(void) {
-    return crypto_stream_aes128ctr_NONCEBYTES;
-}
-
-size_t
-crypto_stream_aes128ctr_beforenmbytes(void) {
-    return crypto_stream_aes128ctr_BEFORENMBYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/stream_aes128ctr.c libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/stream_aes128ctr.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/aes128ctr/stream_aes128ctr.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/aes128ctr/stream_aes128ctr.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,19 @@
+#include "crypto_stream_aes128ctr.h"
+
+size_t
+crypto_stream_aes128ctr_keybytes(void)
+{
+    return crypto_stream_aes128ctr_KEYBYTES;
+}
+
+size_t
+crypto_stream_aes128ctr_noncebytes(void)
+{
+    return crypto_stream_aes128ctr_NONCEBYTES;
+}
+
+size_t
+crypto_stream_aes128ctr_beforenmbytes(void)
+{
+    return crypto_stream_aes128ctr_BEFORENMBYTES;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,179 @@
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "crypto_stream_chacha20.h"
+#include "private/common.h"
+#include "private/sse2_64_32.h"
+#include "utils.h"
+
+#if defined(HAVE_AVX2INTRIN_H) && defined(HAVE_EMMINTRIN_H) && \
+        defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)
+
+# ifdef __GNUC__
+#  pragma GCC target("sse2")
+#  pragma GCC target("ssse3")
+#  pragma GCC target("sse4.1")
+#  pragma GCC target("avx2")
+# endif
+
+# include <emmintrin.h>
+# include <immintrin.h>
+# include <smmintrin.h>
+# include <tmmintrin.h>
+
+# include "../stream_chacha20.h"
+# include "chacha20_dolbeau-avx2.h"
+
+# define ROUNDS 20
+
+typedef struct chacha_ctx {
+    uint32_t input[16];
+} chacha_ctx;
+
+static void
+chacha_keysetup(chacha_ctx *ctx, const uint8_t *k)
+{
+    ctx->input[0]  = 0x61707865;
+    ctx->input[1]  = 0x3320646e;
+    ctx->input[2]  = 0x79622d32;
+    ctx->input[3]  = 0x6b206574;
+    ctx->input[4]  = LOAD32_LE(k + 0);
+    ctx->input[5]  = LOAD32_LE(k + 4);
+    ctx->input[6]  = LOAD32_LE(k + 8);
+    ctx->input[7]  = LOAD32_LE(k + 12);
+    ctx->input[8]  = LOAD32_LE(k + 16);
+    ctx->input[9]  = LOAD32_LE(k + 20);
+    ctx->input[10] = LOAD32_LE(k + 24);
+    ctx->input[11] = LOAD32_LE(k + 28);
+}
+
+static void
+chacha_ivsetup(chacha_ctx *ctx, const uint8_t *iv, const uint8_t *counter)
+{
+    ctx->input[12] = counter == NULL ? 0 : LOAD32_LE(counter + 0);
+    ctx->input[13] = counter == NULL ? 0 : LOAD32_LE(counter + 4);
+    ctx->input[14] = LOAD32_LE(iv + 0);
+    ctx->input[15] = LOAD32_LE(iv + 4);
+}
+
+static void
+chacha_ietf_ivsetup(chacha_ctx *ctx, const uint8_t *iv, const uint8_t *counter)
+{
+    ctx->input[12] = counter == NULL ? 0 : LOAD32_LE(counter);
+    ctx->input[13] = LOAD32_LE(iv + 0);
+    ctx->input[14] = LOAD32_LE(iv + 4);
+    ctx->input[15] = LOAD32_LE(iv + 8);
+}
+
+static void
+chacha20_encrypt_bytes(chacha_ctx *ctx, const uint8_t *m, uint8_t *c,
+                       unsigned long long bytes)
+{
+    uint32_t * const x = &ctx->input[0];
+
+    if (!bytes) {
+        return; /* LCOV_EXCL_LINE */
+    }
+    if (bytes > 64ULL * (1ULL << 32) - 64ULL) {
+        abort();
+    }
+# include "u8.h"
+# include "u4.h"
+# include "u1.h"
+# include "u0.h"
+}
+
+static int
+stream_ref(unsigned char *c, unsigned long long clen, const unsigned char *n,
+           const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+
+    if (!clen) {
+        return 0;
+    }
+    COMPILER_ASSERT(crypto_stream_chacha20_KEYBYTES == 256 / 8);
+    chacha_keysetup(&ctx, k);
+    chacha_ivsetup(&ctx, n, NULL);
+    memset(c, 0, clen);
+    chacha20_encrypt_bytes(&ctx, c, c, clen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+static int
+stream_ietf_ref(unsigned char *c, unsigned long long clen,
+                const unsigned char *n, const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+
+    if (!clen) {
+        return 0;
+    }
+    COMPILER_ASSERT(crypto_stream_chacha20_KEYBYTES == 256 / 8);
+    chacha_keysetup(&ctx, k);
+    chacha_ietf_ivsetup(&ctx, n, NULL);
+    memset(c, 0, clen);
+    chacha20_encrypt_bytes(&ctx, c, c, clen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+static int
+stream_ref_xor_ic(unsigned char *c, const unsigned char *m,
+                  unsigned long long mlen, const unsigned char *n, uint64_t ic,
+                  const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+    uint8_t           ic_bytes[8];
+    uint32_t          ic_high;
+    uint32_t          ic_low;
+
+    if (!mlen) {
+        return 0;
+    }
+    ic_high = (uint32_t) (ic >> 32);
+    ic_low  = (uint32_t) ic;
+    STORE32_LE(&ic_bytes[0], ic_low);
+    STORE32_LE(&ic_bytes[4], ic_high);
+    chacha_keysetup(&ctx, k);
+    chacha_ivsetup(&ctx, n, ic_bytes);
+    chacha20_encrypt_bytes(&ctx, m, c, mlen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+static int
+stream_ietf_ref_xor_ic(unsigned char *c, const unsigned char *m,
+                       unsigned long long mlen, const unsigned char *n,
+                       uint32_t ic, const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+    uint8_t           ic_bytes[4];
+
+    if (!mlen) {
+        return 0;
+    }
+    STORE32_LE(ic_bytes, ic);
+    chacha_keysetup(&ctx, k);
+    chacha_ietf_ivsetup(&ctx, n, ic_bytes);
+    chacha20_encrypt_bytes(&ctx, m, c, mlen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+struct crypto_stream_chacha20_implementation
+    crypto_stream_chacha20_dolbeau_avx2_implementation = {
+        SODIUM_C99(.stream =) stream_ref,
+        SODIUM_C99(.stream_ietf =) stream_ietf_ref,
+        SODIUM_C99(.stream_xor_ic =) stream_ref_xor_ic,
+        SODIUM_C99(.stream_ietf_xor_ic =) stream_ietf_ref_xor_ic
+    };
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.h libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,8 @@
+
+#include <stdint.h>
+
+#include "../stream_chacha20.h"
+#include "crypto_stream_chacha20.h"
+
+extern struct crypto_stream_chacha20_implementation
+    crypto_stream_chacha20_dolbeau_avx2_implementation;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,173 @@
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "crypto_stream_chacha20.h"
+#include "private/common.h"
+#include "private/sse2_64_32.h"
+#include "utils.h"
+
+#if defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)
+
+# ifdef __GNUC__
+#  pragma GCC target("sse2")
+#  pragma GCC target("ssse3")
+# endif
+
+# include <emmintrin.h>
+# include <tmmintrin.h>
+
+# include "../stream_chacha20.h"
+# include "chacha20_dolbeau-ssse3.h"
+
+# define ROUNDS 20
+
+typedef struct chacha_ctx {
+    uint32_t input[16];
+} chacha_ctx;
+
+static void
+chacha_keysetup(chacha_ctx *ctx, const uint8_t *k)
+{
+    ctx->input[0]  = 0x61707865;
+    ctx->input[1]  = 0x3320646e;
+    ctx->input[2]  = 0x79622d32;
+    ctx->input[3]  = 0x6b206574;
+    ctx->input[4]  = LOAD32_LE(k + 0);
+    ctx->input[5]  = LOAD32_LE(k + 4);
+    ctx->input[6]  = LOAD32_LE(k + 8);
+    ctx->input[7]  = LOAD32_LE(k + 12);
+    ctx->input[8]  = LOAD32_LE(k + 16);
+    ctx->input[9]  = LOAD32_LE(k + 20);
+    ctx->input[10] = LOAD32_LE(k + 24);
+    ctx->input[11] = LOAD32_LE(k + 28);
+}
+
+static void
+chacha_ivsetup(chacha_ctx *ctx, const uint8_t *iv, const uint8_t *counter)
+{
+    ctx->input[12] = counter == NULL ? 0 : LOAD32_LE(counter + 0);
+    ctx->input[13] = counter == NULL ? 0 : LOAD32_LE(counter + 4);
+    ctx->input[14] = LOAD32_LE(iv + 0);
+    ctx->input[15] = LOAD32_LE(iv + 4);
+}
+
+static void
+chacha_ietf_ivsetup(chacha_ctx *ctx, const uint8_t *iv, const uint8_t *counter)
+{
+    ctx->input[12] = counter == NULL ? 0 : LOAD32_LE(counter);
+    ctx->input[13] = LOAD32_LE(iv + 0);
+    ctx->input[14] = LOAD32_LE(iv + 4);
+    ctx->input[15] = LOAD32_LE(iv + 8);
+}
+
+static void
+chacha20_encrypt_bytes(chacha_ctx *ctx, const uint8_t *m, uint8_t *c,
+                       unsigned long long bytes)
+{
+    uint32_t * const x = &ctx->input[0];
+
+    if (!bytes) {
+        return; /* LCOV_EXCL_LINE */
+    }
+    if (bytes > 64ULL * (1ULL << 32) - 64ULL) {
+        abort();
+    }
+# include "u4.h"
+# include "u1.h"
+# include "u0.h"
+}
+
+static int
+stream_ref(unsigned char *c, unsigned long long clen, const unsigned char *n,
+           const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+
+    if (!clen) {
+        return 0;
+    }
+    COMPILER_ASSERT(crypto_stream_chacha20_KEYBYTES == 256 / 8);
+    chacha_keysetup(&ctx, k);
+    chacha_ivsetup(&ctx, n, NULL);
+    memset(c, 0, clen);
+    chacha20_encrypt_bytes(&ctx, c, c, clen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+static int
+stream_ietf_ref(unsigned char *c, unsigned long long clen,
+                const unsigned char *n, const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+
+    if (!clen) {
+        return 0;
+    }
+    COMPILER_ASSERT(crypto_stream_chacha20_KEYBYTES == 256 / 8);
+    chacha_keysetup(&ctx, k);
+    chacha_ietf_ivsetup(&ctx, n, NULL);
+    memset(c, 0, clen);
+    chacha20_encrypt_bytes(&ctx, c, c, clen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+static int
+stream_ref_xor_ic(unsigned char *c, const unsigned char *m,
+                  unsigned long long mlen, const unsigned char *n, uint64_t ic,
+                  const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+    uint8_t           ic_bytes[8];
+    uint32_t          ic_high;
+    uint32_t          ic_low;
+
+    if (!mlen) {
+        return 0;
+    }
+    ic_high = (uint32_t) (ic >> 32);
+    ic_low  = (uint32_t) ic;
+    STORE32_LE(&ic_bytes[0], ic_low);
+    STORE32_LE(&ic_bytes[4], ic_high);
+    chacha_keysetup(&ctx, k);
+    chacha_ivsetup(&ctx, n, ic_bytes);
+    chacha20_encrypt_bytes(&ctx, m, c, mlen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+static int
+stream_ietf_ref_xor_ic(unsigned char *c, const unsigned char *m,
+                       unsigned long long mlen, const unsigned char *n,
+                       uint32_t ic, const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+    uint8_t           ic_bytes[4];
+
+    if (!mlen) {
+        return 0;
+    }
+    STORE32_LE(ic_bytes, ic);
+    chacha_keysetup(&ctx, k);
+    chacha_ietf_ivsetup(&ctx, n, ic_bytes);
+    chacha20_encrypt_bytes(&ctx, m, c, mlen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+struct crypto_stream_chacha20_implementation
+    crypto_stream_chacha20_dolbeau_ssse3_implementation = {
+        SODIUM_C99(.stream =) stream_ref,
+        SODIUM_C99(.stream_ietf =) stream_ietf_ref,
+        SODIUM_C99(.stream_xor_ic =) stream_ref_xor_ic,
+        SODIUM_C99(.stream_ietf_xor_ic =) stream_ietf_ref_xor_ic
+    };
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.h libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,8 @@
+
+#include <stdint.h>
+
+#include "../stream_chacha20.h"
+#include "crypto_stream_chacha20.h"
+
+extern struct crypto_stream_chacha20_implementation
+    crypto_stream_chacha20_dolbeau_ssse3_implementation;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/u0.h libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/u0.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/u0.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/u0.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,86 @@
+if (bytes > 0) {
+    __m128i       x_0, x_1, x_2, x_3;
+    __m128i       t_1;
+    const __m128i rot16 =
+        _mm_set_epi8(13, 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 0, 3, 2);
+    const __m128i rot8 =
+        _mm_set_epi8(14, 13, 12, 15, 10, 9, 8, 11, 6, 5, 4, 7, 2, 1, 0, 3);
+    uint8_t partialblock[64];
+
+    int     i;
+
+    x_0 = _mm_loadu_si128((__m128i*) (x + 0));
+    x_1 = _mm_loadu_si128((__m128i*) (x + 4));
+    x_2 = _mm_loadu_si128((__m128i*) (x + 8));
+    x_3 = _mm_loadu_si128((__m128i*) (x + 12));
+
+    for (i = 0; i < ROUNDS; i += 2) {
+        x_0 = _mm_add_epi32(x_0, x_1);
+        x_3 = _mm_xor_si128(x_3, x_0);
+        x_3 = _mm_shuffle_epi8(x_3, rot16);
+
+        x_2 = _mm_add_epi32(x_2, x_3);
+        x_1 = _mm_xor_si128(x_1, x_2);
+
+        t_1 = x_1;
+        x_1 = _mm_slli_epi32(x_1, 12);
+        t_1 = _mm_srli_epi32(t_1, 20);
+        x_1 = _mm_xor_si128(x_1, t_1);
+
+        x_0 = _mm_add_epi32(x_0, x_1);
+        x_3 = _mm_xor_si128(x_3, x_0);
+        x_0 = _mm_shuffle_epi32(x_0, 0x93);
+        x_3 = _mm_shuffle_epi8(x_3, rot8);
+
+        x_2 = _mm_add_epi32(x_2, x_3);
+        x_3 = _mm_shuffle_epi32(x_3, 0x4e);
+        x_1 = _mm_xor_si128(x_1, x_2);
+        x_2 = _mm_shuffle_epi32(x_2, 0x39);
+
+        t_1 = x_1;
+        x_1 = _mm_slli_epi32(x_1, 7);
+        t_1 = _mm_srli_epi32(t_1, 25);
+        x_1 = _mm_xor_si128(x_1, t_1);
+
+        x_0 = _mm_add_epi32(x_0, x_1);
+        x_3 = _mm_xor_si128(x_3, x_0);
+        x_3 = _mm_shuffle_epi8(x_3, rot16);
+
+        x_2 = _mm_add_epi32(x_2, x_3);
+        x_1 = _mm_xor_si128(x_1, x_2);
+
+        t_1 = x_1;
+        x_1 = _mm_slli_epi32(x_1, 12);
+        t_1 = _mm_srli_epi32(t_1, 20);
+        x_1 = _mm_xor_si128(x_1, t_1);
+
+        x_0 = _mm_add_epi32(x_0, x_1);
+        x_3 = _mm_xor_si128(x_3, x_0);
+        x_0 = _mm_shuffle_epi32(x_0, 0x39);
+        x_3 = _mm_shuffle_epi8(x_3, rot8);
+
+        x_2 = _mm_add_epi32(x_2, x_3);
+        x_3 = _mm_shuffle_epi32(x_3, 0x4e);
+        x_1 = _mm_xor_si128(x_1, x_2);
+        x_2 = _mm_shuffle_epi32(x_2, 0x93);
+
+        t_1 = x_1;
+        x_1 = _mm_slli_epi32(x_1, 7);
+        t_1 = _mm_srli_epi32(t_1, 25);
+        x_1 = _mm_xor_si128(x_1, t_1);
+    }
+    x_0 = _mm_add_epi32(x_0, _mm_loadu_si128((__m128i*) (x + 0)));
+    x_1 = _mm_add_epi32(x_1, _mm_loadu_si128((__m128i*) (x + 4)));
+    x_2 = _mm_add_epi32(x_2, _mm_loadu_si128((__m128i*) (x + 8)));
+    x_3 = _mm_add_epi32(x_3, _mm_loadu_si128((__m128i*) (x + 12)));
+    _mm_storeu_si128((__m128i*) (partialblock + 0), x_0);
+    _mm_storeu_si128((__m128i*) (partialblock + 16), x_1);
+    _mm_storeu_si128((__m128i*) (partialblock + 32), x_2);
+    _mm_storeu_si128((__m128i*) (partialblock + 48), x_3);
+
+    for (i = 0; i < bytes; i++) {
+        c[i] = m[i] ^ partialblock[i];
+    }
+
+    sodium_memzero(partialblock, sizeof partialblock);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/u1.h libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/u1.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/u1.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/u1.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,98 @@
+while (bytes >= 64) {
+    __m128i       x_0, x_1, x_2, x_3;
+    __m128i       t_1;
+    const __m128i rot16 =
+        _mm_set_epi8(13, 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 0, 3, 2);
+    const __m128i rot8 =
+        _mm_set_epi8(14, 13, 12, 15, 10, 9, 8, 11, 6, 5, 4, 7, 2, 1, 0, 3);
+
+    uint32_t in12;
+    uint32_t in13;
+    int      i;
+
+    x_0 = _mm_loadu_si128((__m128i*) (x + 0));
+    x_1 = _mm_loadu_si128((__m128i*) (x + 4));
+    x_2 = _mm_loadu_si128((__m128i*) (x + 8));
+    x_3 = _mm_loadu_si128((__m128i*) (x + 12));
+
+    for (i = 0; i < ROUNDS; i += 2) {
+        x_0 = _mm_add_epi32(x_0, x_1);
+        x_3 = _mm_xor_si128(x_3, x_0);
+        x_3 = _mm_shuffle_epi8(x_3, rot16);
+
+        x_2 = _mm_add_epi32(x_2, x_3);
+        x_1 = _mm_xor_si128(x_1, x_2);
+
+        t_1 = x_1;
+        x_1 = _mm_slli_epi32(x_1, 12);
+        t_1 = _mm_srli_epi32(t_1, 20);
+        x_1 = _mm_xor_si128(x_1, t_1);
+
+        x_0 = _mm_add_epi32(x_0, x_1);
+        x_3 = _mm_xor_si128(x_3, x_0);
+        x_0 = _mm_shuffle_epi32(x_0, 0x93);
+        x_3 = _mm_shuffle_epi8(x_3, rot8);
+
+        x_2 = _mm_add_epi32(x_2, x_3);
+        x_3 = _mm_shuffle_epi32(x_3, 0x4e);
+        x_1 = _mm_xor_si128(x_1, x_2);
+        x_2 = _mm_shuffle_epi32(x_2, 0x39);
+
+        t_1 = x_1;
+        x_1 = _mm_slli_epi32(x_1, 7);
+        t_1 = _mm_srli_epi32(t_1, 25);
+        x_1 = _mm_xor_si128(x_1, t_1);
+
+        x_0 = _mm_add_epi32(x_0, x_1);
+        x_3 = _mm_xor_si128(x_3, x_0);
+        x_3 = _mm_shuffle_epi8(x_3, rot16);
+
+        x_2 = _mm_add_epi32(x_2, x_3);
+        x_1 = _mm_xor_si128(x_1, x_2);
+
+        t_1 = x_1;
+        x_1 = _mm_slli_epi32(x_1, 12);
+        t_1 = _mm_srli_epi32(t_1, 20);
+        x_1 = _mm_xor_si128(x_1, t_1);
+
+        x_0 = _mm_add_epi32(x_0, x_1);
+        x_3 = _mm_xor_si128(x_3, x_0);
+        x_0 = _mm_shuffle_epi32(x_0, 0x39);
+        x_3 = _mm_shuffle_epi8(x_3, rot8);
+
+        x_2 = _mm_add_epi32(x_2, x_3);
+        x_3 = _mm_shuffle_epi32(x_3, 0x4e);
+        x_1 = _mm_xor_si128(x_1, x_2);
+        x_2 = _mm_shuffle_epi32(x_2, 0x93);
+
+        t_1 = x_1;
+        x_1 = _mm_slli_epi32(x_1, 7);
+        t_1 = _mm_srli_epi32(t_1, 25);
+        x_1 = _mm_xor_si128(x_1, t_1);
+    }
+    x_0 = _mm_add_epi32(x_0, _mm_loadu_si128((__m128i*) (x + 0)));
+    x_1 = _mm_add_epi32(x_1, _mm_loadu_si128((__m128i*) (x + 4)));
+    x_2 = _mm_add_epi32(x_2, _mm_loadu_si128((__m128i*) (x + 8)));
+    x_3 = _mm_add_epi32(x_3, _mm_loadu_si128((__m128i*) (x + 12)));
+    x_0 = _mm_xor_si128(x_0, _mm_loadu_si128((__m128i*) (m + 0)));
+    x_1 = _mm_xor_si128(x_1, _mm_loadu_si128((__m128i*) (m + 16)));
+    x_2 = _mm_xor_si128(x_2, _mm_loadu_si128((__m128i*) (m + 32)));
+    x_3 = _mm_xor_si128(x_3, _mm_loadu_si128((__m128i*) (m + 48)));
+    _mm_storeu_si128((__m128i*) (c + 0), x_0);
+    _mm_storeu_si128((__m128i*) (c + 16), x_1);
+    _mm_storeu_si128((__m128i*) (c + 32), x_2);
+    _mm_storeu_si128((__m128i*) (c + 48), x_3);
+
+    in12 = x[12];
+    in13 = x[13];
+    in12++;
+    if (in12 == 0) {
+        in13++;
+    }
+    x[12] = in12;
+    x[13] = in13;
+
+    bytes -= 64;
+    c += 64;
+    m += 64;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/u4.h libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/u4.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/u4.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/u4.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,175 @@
+
+#define VEC4_ROT(A, IMM) \
+    _mm_or_si128(_mm_slli_epi32(A, IMM), _mm_srli_epi32(A, (32 - IMM)))
+
+/* same, but replace 2 of the shift/shift/or "rotation" by byte shuffles (8 &
+ * 16) (better) */
+#define VEC4_QUARTERROUND_SHUFFLE(A, B, C, D) \
+    x_##A = _mm_add_epi32(x_##A, x_##B);      \
+    t_##A = _mm_xor_si128(x_##D, x_##A);      \
+    x_##D = _mm_shuffle_epi8(t_##A, rot16);   \
+    x_##C = _mm_add_epi32(x_##C, x_##D);      \
+    t_##C = _mm_xor_si128(x_##B, x_##C);      \
+    x_##B = VEC4_ROT(t_##C, 12);              \
+    x_##A = _mm_add_epi32(x_##A, x_##B);      \
+    t_##A = _mm_xor_si128(x_##D, x_##A);      \
+    x_##D = _mm_shuffle_epi8(t_##A, rot8);    \
+    x_##C = _mm_add_epi32(x_##C, x_##D);      \
+    t_##C = _mm_xor_si128(x_##B, x_##C);      \
+    x_##B = VEC4_ROT(t_##C, 7)
+
+#define VEC4_QUARTERROUND(A, B, C, D) VEC4_QUARTERROUND_SHUFFLE(A, B, C, D)
+
+if (bytes >= 256) {
+    /* constant for shuffling bytes (replacing multiple-of-8 rotates) */
+    __m128i rot16 =
+        _mm_set_epi8(13, 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 0, 3, 2);
+    __m128i rot8 =
+        _mm_set_epi8(14, 13, 12, 15, 10, 9, 8, 11, 6, 5, 4, 7, 2, 1, 0, 3);
+
+    __m128i x_0  = _mm_set1_epi32(x[0]);
+    __m128i x_1  = _mm_set1_epi32(x[1]);
+    __m128i x_2  = _mm_set1_epi32(x[2]);
+    __m128i x_3  = _mm_set1_epi32(x[3]);
+    __m128i x_4  = _mm_set1_epi32(x[4]);
+    __m128i x_5  = _mm_set1_epi32(x[5]);
+    __m128i x_6  = _mm_set1_epi32(x[6]);
+    __m128i x_7  = _mm_set1_epi32(x[7]);
+    __m128i x_8  = _mm_set1_epi32(x[8]);
+    __m128i x_9  = _mm_set1_epi32(x[9]);
+    __m128i x_10 = _mm_set1_epi32(x[10]);
+    __m128i x_11 = _mm_set1_epi32(x[11]);
+    __m128i x_12;
+    __m128i x_13;
+    __m128i x_14   = _mm_set1_epi32(x[14]);
+    __m128i x_15   = _mm_set1_epi32(x[15]);
+    __m128i orig0  = x_0;
+    __m128i orig1  = x_1;
+    __m128i orig2  = x_2;
+    __m128i orig3  = x_3;
+    __m128i orig4  = x_4;
+    __m128i orig5  = x_5;
+    __m128i orig6  = x_6;
+    __m128i orig7  = x_7;
+    __m128i orig8  = x_8;
+    __m128i orig9  = x_9;
+    __m128i orig10 = x_10;
+    __m128i orig11 = x_11;
+    __m128i orig12;
+    __m128i orig13;
+    __m128i orig14 = x_14;
+    __m128i orig15 = x_15;
+    __m128i t_0, t_1, t_2, t_3, t_4, t_5, t_6, t_7, t_8, t_9, t_10, t_11, t_12,
+        t_13, t_14, t_15;
+
+    uint32_t in12, in13;
+    int      i;
+
+    while (bytes >= 256) {
+        const __m128i addv12 = _mm_set_epi64x(1, 0);
+        const __m128i addv13 = _mm_set_epi64x(3, 2);
+        __m128i       t12, t13;
+        uint64_t      in1213;
+
+        x_0  = orig0;
+        x_1  = orig1;
+        x_2  = orig2;
+        x_3  = orig3;
+        x_4  = orig4;
+        x_5  = orig5;
+        x_6  = orig6;
+        x_7  = orig7;
+        x_8  = orig8;
+        x_9  = orig9;
+        x_10 = orig10;
+        x_11 = orig11;
+        x_14 = orig14;
+        x_15 = orig15;
+
+        in12   = x[12];
+        in13   = x[13];
+        in1213 = ((uint64_t) in12) | (((uint64_t) in13) << 32);
+        t12    = _mm_set1_epi64x(in1213);
+        t13    = _mm_set1_epi64x(in1213);
+
+        x_12 = _mm_add_epi64(addv12, t12);
+        x_13 = _mm_add_epi64(addv13, t13);
+
+        t12 = _mm_unpacklo_epi32(x_12, x_13);
+        t13 = _mm_unpackhi_epi32(x_12, x_13);
+
+        x_12 = _mm_unpacklo_epi32(t12, t13);
+        x_13 = _mm_unpackhi_epi32(t12, t13);
+
+        orig12 = x_12;
+        orig13 = x_13;
+
+        in1213 += 4;
+
+        x[12] = in1213 & 0xFFFFFFFF;
+        x[13] = (in1213 >> 32) & 0xFFFFFFFF;
+
+        for (i = 0; i < ROUNDS; i += 2) {
+            VEC4_QUARTERROUND(0, 4, 8, 12);
+            VEC4_QUARTERROUND(1, 5, 9, 13);
+            VEC4_QUARTERROUND(2, 6, 10, 14);
+            VEC4_QUARTERROUND(3, 7, 11, 15);
+            VEC4_QUARTERROUND(0, 5, 10, 15);
+            VEC4_QUARTERROUND(1, 6, 11, 12);
+            VEC4_QUARTERROUND(2, 7, 8, 13);
+            VEC4_QUARTERROUND(3, 4, 9, 14);
+        }
+
+#define ONEQUAD_TRANSPOSE(A, B, C, D)                                     \
+    {                                                                     \
+        __m128i t0, t1, t2, t3;                                           \
+                                                                          \
+        x_##A = _mm_add_epi32(x_##A, orig##A);                            \
+        x_##B = _mm_add_epi32(x_##B, orig##B);                            \
+        x_##C = _mm_add_epi32(x_##C, orig##C);                            \
+        x_##D = _mm_add_epi32(x_##D, orig##D);                            \
+        t_##A = _mm_unpacklo_epi32(x_##A, x_##B);                         \
+        t_##B = _mm_unpacklo_epi32(x_##C, x_##D);                         \
+        t_##C = _mm_unpackhi_epi32(x_##A, x_##B);                         \
+        t_##D = _mm_unpackhi_epi32(x_##C, x_##D);                         \
+        x_##A = _mm_unpacklo_epi64(t_##A, t_##B);                         \
+        x_##B = _mm_unpackhi_epi64(t_##A, t_##B);                         \
+        x_##C = _mm_unpacklo_epi64(t_##C, t_##D);                         \
+        x_##D = _mm_unpackhi_epi64(t_##C, t_##D);                         \
+                                                                          \
+        t0 = _mm_xor_si128(x_##A, _mm_loadu_si128((__m128i*) (m + 0)));   \
+        _mm_storeu_si128((__m128i*) (c + 0), t0);                         \
+        t1 = _mm_xor_si128(x_##B, _mm_loadu_si128((__m128i*) (m + 64)));  \
+        _mm_storeu_si128((__m128i*) (c + 64), t1);                        \
+        t2 = _mm_xor_si128(x_##C, _mm_loadu_si128((__m128i*) (m + 128))); \
+        _mm_storeu_si128((__m128i*) (c + 128), t2);                       \
+        t3 = _mm_xor_si128(x_##D, _mm_loadu_si128((__m128i*) (m + 192))); \
+        _mm_storeu_si128((__m128i*) (c + 192), t3);                       \
+    }
+
+#define ONEQUAD(A, B, C, D) ONEQUAD_TRANSPOSE(A, B, C, D)
+
+        ONEQUAD(0, 1, 2, 3);
+        m += 16;
+        c += 16;
+        ONEQUAD(4, 5, 6, 7);
+        m += 16;
+        c += 16;
+        ONEQUAD(8, 9, 10, 11);
+        m += 16;
+        c += 16;
+        ONEQUAD(12, 13, 14, 15);
+        m -= 48;
+        c -= 48;
+
+#undef ONEQUAD
+#undef ONEQUAD_TRANSPOSE
+
+        bytes -= 256;
+        c += 256;
+        m += 256;
+    }
+}
+#undef VEC4_ROT
+#undef VEC4_QUARTERROUND
+#undef VEC4_QUARTERROUND_SHUFFLE
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/u8.h libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/u8.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/dolbeau/u8.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/dolbeau/u8.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,357 @@
+
+#define VEC8_ROT(A, IMM) \
+    _mm256_or_si256(_mm256_slli_epi32(A, IMM), _mm256_srli_epi32(A, (32 - IMM)))
+
+/* implements a vector quarter round by-the-book (naive!) */
+#define VEC8_QUARTERROUND_NAIVE(A, B, C, D) \
+    x_##A = _mm256_add_epi32(x_##A, x_##B); \
+    t_##A = _mm256_xor_si256(x_##D, x_##A); \
+    x_##D = VEC8_ROT(t_##A, 16);            \
+    x_##C = _mm256_add_epi32(x_##C, x_##D); \
+    t_##C = _mm256_xor_si256(x_##B, x_##C); \
+    x_##B = VEC8_ROT(t_##C, 12);            \
+    x_##A = _mm256_add_epi32(x_##A, x_##B); \
+    t_##A = _mm256_xor_si256(x_##D, x_##A); \
+    x_##D = VEC8_ROT(t_##A, 8);             \
+    x_##C = _mm256_add_epi32(x_##C, x_##D); \
+    t_##C = _mm256_xor_si256(x_##B, x_##C); \
+    x_##B = VEC8_ROT(t_##C, 7)
+
+/* same, but replace 2 of the shift/shift/or "rotation" by byte shuffles (8 &
+ * 16) (better) */
+#define VEC8_QUARTERROUND_SHUFFLE(A, B, C, D)  \
+    x_##A = _mm256_add_epi32(x_##A, x_##B);    \
+    t_##A = _mm256_xor_si256(x_##D, x_##A);    \
+    x_##D = _mm256_shuffle_epi8(t_##A, rot16); \
+    x_##C = _mm256_add_epi32(x_##C, x_##D);    \
+    t_##C = _mm256_xor_si256(x_##B, x_##C);    \
+    x_##B = VEC8_ROT(t_##C, 12);               \
+    x_##A = _mm256_add_epi32(x_##A, x_##B);    \
+    t_##A = _mm256_xor_si256(x_##D, x_##A);    \
+    x_##D = _mm256_shuffle_epi8(t_##A, rot8);  \
+    x_##C = _mm256_add_epi32(x_##C, x_##D);    \
+    t_##C = _mm256_xor_si256(x_##B, x_##C);    \
+    x_##B = VEC8_ROT(t_##C, 7)
+
+/* same, but replace 2 of the shift/shift/or "rotation" by byte & word shuffles
+ * (8 & 16) (not as good as previous) */
+#define VEC8_QUARTERROUND_SHUFFLE2(A, B, C, D)                                 \
+    x_##A = _mm256_add_epi32(x_##A, x_##B);                                    \
+    t_##A = _mm256_xor_si256(x_##D, x_##A);                                    \
+    x_##D = _mm256_shufflehi_epi16(_mm256_shufflelo_epi16(t_##A, 0xb1), 0xb1); \
+    x_##C = _mm256_add_epi32(x_##C, x_##D);                                    \
+    t_##C = _mm256_xor_si256(x_##B, x_##C);                                    \
+    x_##B = VEC8_ROT(t_##C, 12);                                               \
+    x_##A = _mm256_add_epi32(x_##A, x_##B);                                    \
+    t_##A = _mm256_xor_si256(x_##D, x_##A);                                    \
+    x_##D = _mm256_shuffle_epi8(t_##A, rot8);                                  \
+    x_##C = _mm256_add_epi32(x_##C, x_##D);                                    \
+    t_##C = _mm256_xor_si256(x_##B, x_##C);                                    \
+    x_##B = VEC8_ROT(t_##C, 7)
+
+#define VEC8_QUARTERROUND(A, B, C, D) VEC8_QUARTERROUND_SHUFFLE(A, B, C, D)
+
+#define VEC8_LINE1(A, B, C, D)              \
+    x_##A = _mm256_add_epi32(x_##A, x_##B); \
+    x_##D = _mm256_shuffle_epi8(_mm256_xor_si256(x_##D, x_##A), rot16)
+#define VEC8_LINE2(A, B, C, D)              \
+    x_##C = _mm256_add_epi32(x_##C, x_##D); \
+    x_##B = VEC8_ROT(_mm256_xor_si256(x_##B, x_##C), 12)
+#define VEC8_LINE3(A, B, C, D)              \
+    x_##A = _mm256_add_epi32(x_##A, x_##B); \
+    x_##D = _mm256_shuffle_epi8(_mm256_xor_si256(x_##D, x_##A), rot8)
+#define VEC8_LINE4(A, B, C, D)              \
+    x_##C = _mm256_add_epi32(x_##C, x_##D); \
+    x_##B = VEC8_ROT(_mm256_xor_si256(x_##B, x_##C), 7)
+
+#define VEC8_ROUND_SEQ(A1, B1, C1, D1, A2, B2, C2, D2, A3, B3, C3, D3, A4, B4, \
+                       C4, D4)                                                 \
+    VEC8_LINE1(A1, B1, C1, D1);                                                \
+    VEC8_LINE1(A2, B2, C2, D2);                                                \
+    VEC8_LINE1(A3, B3, C3, D3);                                                \
+    VEC8_LINE1(A4, B4, C4, D4);                                                \
+    VEC8_LINE2(A1, B1, C1, D1);                                                \
+    VEC8_LINE2(A2, B2, C2, D2);                                                \
+    VEC8_LINE2(A3, B3, C3, D3);                                                \
+    VEC8_LINE2(A4, B4, C4, D4);                                                \
+    VEC8_LINE3(A1, B1, C1, D1);                                                \
+    VEC8_LINE3(A2, B2, C2, D2);                                                \
+    VEC8_LINE3(A3, B3, C3, D3);                                                \
+    VEC8_LINE3(A4, B4, C4, D4);                                                \
+    VEC8_LINE4(A1, B1, C1, D1);                                                \
+    VEC8_LINE4(A2, B2, C2, D2);                                                \
+    VEC8_LINE4(A3, B3, C3, D3);                                                \
+    VEC8_LINE4(A4, B4, C4, D4)
+
+#define VEC8_ROUND_HALF(A1, B1, C1, D1, A2, B2, C2, D2, A3, B3, C3, D3, A4, \
+                        B4, C4, D4)                                         \
+    VEC8_LINE1(A1, B1, C1, D1);                                             \
+    VEC8_LINE1(A2, B2, C2, D2);                                             \
+    VEC8_LINE2(A1, B1, C1, D1);                                             \
+    VEC8_LINE2(A2, B2, C2, D2);                                             \
+    VEC8_LINE3(A1, B1, C1, D1);                                             \
+    VEC8_LINE3(A2, B2, C2, D2);                                             \
+    VEC8_LINE4(A1, B1, C1, D1);                                             \
+    VEC8_LINE4(A2, B2, C2, D2);                                             \
+    VEC8_LINE1(A3, B3, C3, D3);                                             \
+    VEC8_LINE1(A4, B4, C4, D4);                                             \
+    VEC8_LINE2(A3, B3, C3, D3);                                             \
+    VEC8_LINE2(A4, B4, C4, D4);                                             \
+    VEC8_LINE3(A3, B3, C3, D3);                                             \
+    VEC8_LINE3(A4, B4, C4, D4);                                             \
+    VEC8_LINE4(A3, B3, C3, D3);                                             \
+    VEC8_LINE4(A4, B4, C4, D4)
+
+#define VEC8_ROUND_HALFANDHALF(A1, B1, C1, D1, A2, B2, C2, D2, A3, B3, C3, D3, \
+                               A4, B4, C4, D4)                                 \
+    VEC8_LINE1(A1, B1, C1, D1);                                                \
+    VEC8_LINE1(A2, B2, C2, D2);                                                \
+    VEC8_LINE2(A1, B1, C1, D1);                                                \
+    VEC8_LINE2(A2, B2, C2, D2);                                                \
+    VEC8_LINE1(A3, B3, C3, D3);                                                \
+    VEC8_LINE1(A4, B4, C4, D4);                                                \
+    VEC8_LINE2(A3, B3, C3, D3);                                                \
+    VEC8_LINE2(A4, B4, C4, D4);                                                \
+    VEC8_LINE3(A1, B1, C1, D1);                                                \
+    VEC8_LINE3(A2, B2, C2, D2);                                                \
+    VEC8_LINE4(A1, B1, C1, D1);                                                \
+    VEC8_LINE4(A2, B2, C2, D2);                                                \
+    VEC8_LINE3(A3, B3, C3, D3);                                                \
+    VEC8_LINE3(A4, B4, C4, D4);                                                \
+    VEC8_LINE4(A3, B3, C3, D3);                                                \
+    VEC8_LINE4(A4, B4, C4, D4)
+
+#define VEC8_ROUND(A1, B1, C1, D1, A2, B2, C2, D2, A3, B3, C3, D3, A4, B4, C4, \
+                   D4)                                                         \
+    VEC8_ROUND_SEQ(A1, B1, C1, D1, A2, B2, C2, D2, A3, B3, C3, D3, A4, B4, C4, \
+                   D4)
+
+if (bytes >= 512) {
+    /* constant for shuffling bytes (replacing multiple-of-8 rotates) */
+    __m256i rot16 =
+        _mm256_set_epi8(13, 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 0, 3, 2,
+                        13, 12, 15, 14, 9, 8, 11, 10, 5, 4, 7, 6, 1, 0, 3, 2);
+    __m256i rot8 =
+        _mm256_set_epi8(14, 13, 12, 15, 10, 9, 8, 11, 6, 5, 4, 7, 2, 1, 0, 3,
+                        14, 13, 12, 15, 10, 9, 8, 11, 6, 5, 4, 7, 2, 1, 0, 3);
+    uint32_t in12, in13;
+
+    /* the naive way seems as fast (if not a bit faster) than the vector way */
+    __m256i x_0  = _mm256_set1_epi32(x[0]);
+    __m256i x_1  = _mm256_set1_epi32(x[1]);
+    __m256i x_2  = _mm256_set1_epi32(x[2]);
+    __m256i x_3  = _mm256_set1_epi32(x[3]);
+    __m256i x_4  = _mm256_set1_epi32(x[4]);
+    __m256i x_5  = _mm256_set1_epi32(x[5]);
+    __m256i x_6  = _mm256_set1_epi32(x[6]);
+    __m256i x_7  = _mm256_set1_epi32(x[7]);
+    __m256i x_8  = _mm256_set1_epi32(x[8]);
+    __m256i x_9  = _mm256_set1_epi32(x[9]);
+    __m256i x_10 = _mm256_set1_epi32(x[10]);
+    __m256i x_11 = _mm256_set1_epi32(x[11]);
+    __m256i x_12;
+    __m256i x_13;
+    __m256i x_14 = _mm256_set1_epi32(x[14]);
+    __m256i x_15 = _mm256_set1_epi32(x[15]);
+
+    __m256i orig0  = x_0;
+    __m256i orig1  = x_1;
+    __m256i orig2  = x_2;
+    __m256i orig3  = x_3;
+    __m256i orig4  = x_4;
+    __m256i orig5  = x_5;
+    __m256i orig6  = x_6;
+    __m256i orig7  = x_7;
+    __m256i orig8  = x_8;
+    __m256i orig9  = x_9;
+    __m256i orig10 = x_10;
+    __m256i orig11 = x_11;
+    __m256i orig12;
+    __m256i orig13;
+    __m256i orig14 = x_14;
+    __m256i orig15 = x_15;
+    __m256i t_0, t_1, t_2, t_3, t_4, t_5, t_6, t_7, t_8, t_9, t_10, t_11, t_12,
+        t_13, t_14, t_15;
+
+    while (bytes >= 512) {
+        const __m256i addv12  = _mm256_set_epi64x(3, 2, 1, 0);
+        const __m256i addv13  = _mm256_set_epi64x(7, 6, 5, 4);
+        const __m256i permute = _mm256_set_epi32(7, 6, 3, 2, 5, 4, 1, 0);
+        __m256i       t12, t13;
+
+        uint64_t in1213;
+        int      i;
+
+        x_0  = orig0;
+        x_1  = orig1;
+        x_2  = orig2;
+        x_3  = orig3;
+        x_4  = orig4;
+        x_5  = orig5;
+        x_6  = orig6;
+        x_7  = orig7;
+        x_8  = orig8;
+        x_9  = orig9;
+        x_10 = orig10;
+        x_11 = orig11;
+        x_14 = orig14;
+        x_15 = orig15;
+
+        in12   = x[12];
+        in13   = x[13];
+        in1213 = ((uint64_t) in12) | (((uint64_t) in13) << 32);
+        x_12   = x_13 = _mm256_broadcastq_epi64(_mm_cvtsi64_si128(in1213));
+
+        t12 = _mm256_add_epi64(addv12, x_12);
+        t13 = _mm256_add_epi64(addv13, x_13);
+
+        x_12 = _mm256_unpacklo_epi32(t12, t13);
+        x_13 = _mm256_unpackhi_epi32(t12, t13);
+
+        t12 = _mm256_unpacklo_epi32(x_12, x_13);
+        t13 = _mm256_unpackhi_epi32(x_12, x_13);
+
+        /* required because unpack* are intra-lane */
+        x_12 = _mm256_permutevar8x32_epi32(t12, permute);
+        x_13 = _mm256_permutevar8x32_epi32(t13, permute);
+
+        orig12 = x_12;
+        orig13 = x_13;
+
+        in1213 += 8;
+
+        x[12] = in1213 & 0xFFFFFFFF;
+        x[13] = (in1213 >> 32) & 0xFFFFFFFF;
+
+        for (i = 0; i < ROUNDS; i += 2) {
+            VEC8_ROUND(0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15);
+            VEC8_ROUND(0, 5, 10, 15, 1, 6, 11, 12, 2, 7, 8, 13, 3, 4, 9, 14);
+        }
+
+#define ONEQUAD_TRANSPOSE(A, B, C, D)                              \
+    {                                                              \
+        __m128i t0, t1, t2, t3;                                    \
+        x_##A = _mm256_add_epi32(x_##A, orig##A);                  \
+        x_##B = _mm256_add_epi32(x_##B, orig##B);                  \
+        x_##C = _mm256_add_epi32(x_##C, orig##C);                  \
+        x_##D = _mm256_add_epi32(x_##D, orig##D);                  \
+        t_##A = _mm256_unpacklo_epi32(x_##A, x_##B);               \
+        t_##B = _mm256_unpacklo_epi32(x_##C, x_##D);               \
+        t_##C = _mm256_unpackhi_epi32(x_##A, x_##B);               \
+        t_##D = _mm256_unpackhi_epi32(x_##C, x_##D);               \
+        x_##A = _mm256_unpacklo_epi64(t_##A, t_##B);               \
+        x_##B = _mm256_unpackhi_epi64(t_##A, t_##B);               \
+        x_##C = _mm256_unpacklo_epi64(t_##C, t_##D);               \
+        x_##D = _mm256_unpackhi_epi64(t_##C, t_##D);               \
+        t0    = _mm_xor_si128(_mm256_extracti128_si256(x_##A, 0),  \
+                           _mm_loadu_si128((__m128i*) (m + 0)));   \
+        _mm_storeu_si128((__m128i*) (c + 0), t0);                  \
+        t1 = _mm_xor_si128(_mm256_extracti128_si256(x_##B, 0),     \
+                           _mm_loadu_si128((__m128i*) (m + 64)));  \
+        _mm_storeu_si128((__m128i*) (c + 64), t1);                 \
+        t2 = _mm_xor_si128(_mm256_extracti128_si256(x_##C, 0),     \
+                           _mm_loadu_si128((__m128i*) (m + 128))); \
+        _mm_storeu_si128((__m128i*) (c + 128), t2);                \
+        t3 = _mm_xor_si128(_mm256_extracti128_si256(x_##D, 0),     \
+                           _mm_loadu_si128((__m128i*) (m + 192))); \
+        _mm_storeu_si128((__m128i*) (c + 192), t3);                \
+        t0 = _mm_xor_si128(_mm256_extracti128_si256(x_##A, 1),     \
+                           _mm_loadu_si128((__m128i*) (m + 256))); \
+        _mm_storeu_si128((__m128i*) (c + 256), t0);                \
+        t1 = _mm_xor_si128(_mm256_extracti128_si256(x_##B, 1),     \
+                           _mm_loadu_si128((__m128i*) (m + 320))); \
+        _mm_storeu_si128((__m128i*) (c + 320), t1);                \
+        t2 = _mm_xor_si128(_mm256_extracti128_si256(x_##C, 1),     \
+                           _mm_loadu_si128((__m128i*) (m + 384))); \
+        _mm_storeu_si128((__m128i*) (c + 384), t2);                \
+        t3 = _mm_xor_si128(_mm256_extracti128_si256(x_##D, 1),     \
+                           _mm_loadu_si128((__m128i*) (m + 448))); \
+        _mm_storeu_si128((__m128i*) (c + 448), t3);                \
+    }
+
+#define ONEQUAD(A, B, C, D) ONEQUAD_TRANSPOSE(A, B, C, D)
+
+#define ONEQUAD_UNPCK(A, B, C, D)                    \
+    {                                                \
+        x_##A = _mm256_add_epi32(x_##A, orig##A);    \
+        x_##B = _mm256_add_epi32(x_##B, orig##B);    \
+        x_##C = _mm256_add_epi32(x_##C, orig##C);    \
+        x_##D = _mm256_add_epi32(x_##D, orig##D);    \
+        t_##A = _mm256_unpacklo_epi32(x_##A, x_##B); \
+        t_##B = _mm256_unpacklo_epi32(x_##C, x_##D); \
+        t_##C = _mm256_unpackhi_epi32(x_##A, x_##B); \
+        t_##D = _mm256_unpackhi_epi32(x_##C, x_##D); \
+        x_##A = _mm256_unpacklo_epi64(t_##A, t_##B); \
+        x_##B = _mm256_unpackhi_epi64(t_##A, t_##B); \
+        x_##C = _mm256_unpacklo_epi64(t_##C, t_##D); \
+        x_##D = _mm256_unpackhi_epi64(t_##C, t_##D); \
+    }
+
+#define ONEOCTO(A, B, C, D, A2, B2, C2, D2)                                    \
+    {                                                                          \
+        ONEQUAD_UNPCK(A, B, C, D);                                             \
+        ONEQUAD_UNPCK(A2, B2, C2, D2);                                         \
+        t_##A  = _mm256_permute2x128_si256(x_##A, x_##A2, 0x20);               \
+        t_##A2 = _mm256_permute2x128_si256(x_##A, x_##A2, 0x31);               \
+        t_##B  = _mm256_permute2x128_si256(x_##B, x_##B2, 0x20);               \
+        t_##B2 = _mm256_permute2x128_si256(x_##B, x_##B2, 0x31);               \
+        t_##C  = _mm256_permute2x128_si256(x_##C, x_##C2, 0x20);               \
+        t_##C2 = _mm256_permute2x128_si256(x_##C, x_##C2, 0x31);               \
+        t_##D  = _mm256_permute2x128_si256(x_##D, x_##D2, 0x20);               \
+        t_##D2 = _mm256_permute2x128_si256(x_##D, x_##D2, 0x31);               \
+        t_##A =                                                                \
+            _mm256_xor_si256(t_##A, _mm256_loadu_si256((__m256i*) (m + 0)));   \
+        t_##B =                                                                \
+            _mm256_xor_si256(t_##B, _mm256_loadu_si256((__m256i*) (m + 64)));  \
+        t_##C =                                                                \
+            _mm256_xor_si256(t_##C, _mm256_loadu_si256((__m256i*) (m + 128))); \
+        t_##D =                                                                \
+            _mm256_xor_si256(t_##D, _mm256_loadu_si256((__m256i*) (m + 192))); \
+        t_##A2 = _mm256_xor_si256(t_##A2,                                      \
+                                  _mm256_loadu_si256((__m256i*) (m + 256)));   \
+        t_##B2 = _mm256_xor_si256(t_##B2,                                      \
+                                  _mm256_loadu_si256((__m256i*) (m + 320)));   \
+        t_##C2 = _mm256_xor_si256(t_##C2,                                      \
+                                  _mm256_loadu_si256((__m256i*) (m + 384)));   \
+        t_##D2 = _mm256_xor_si256(t_##D2,                                      \
+                                  _mm256_loadu_si256((__m256i*) (m + 448)));   \
+        _mm256_storeu_si256((__m256i*) (c + 0), t_##A);                        \
+        _mm256_storeu_si256((__m256i*) (c + 64), t_##B);                       \
+        _mm256_storeu_si256((__m256i*) (c + 128), t_##C);                      \
+        _mm256_storeu_si256((__m256i*) (c + 192), t_##D);                      \
+        _mm256_storeu_si256((__m256i*) (c + 256), t_##A2);                     \
+        _mm256_storeu_si256((__m256i*) (c + 320), t_##B2);                     \
+        _mm256_storeu_si256((__m256i*) (c + 384), t_##C2);                     \
+        _mm256_storeu_si256((__m256i*) (c + 448), t_##D2);                     \
+    }
+
+        ONEOCTO(0, 1, 2, 3, 4, 5, 6, 7);
+        m += 32;
+        c += 32;
+        ONEOCTO(8, 9, 10, 11, 12, 13, 14, 15);
+        m -= 32;
+        c -= 32;
+
+#undef ONEQUAD
+#undef ONEQUAD_TRANSPOSE
+#undef ONEQUAD_UNPCK
+#undef ONEOCTO
+
+        bytes -= 512;
+        c += 512;
+        m += 512;
+    }
+}
+#undef VEC8_ROT
+#undef VEC8_QUARTERROUND
+#undef VEC8_QUARTERROUND_NAIVE
+#undef VEC8_QUARTERROUND_SHUFFLE
+#undef VEC8_QUARTERROUND_SHUFFLE2
+#undef VEC8_LINE1
+#undef VEC8_LINE2
+#undef VEC8_LINE3
+#undef VEC8_LINE4
+#undef VEC8_ROUND
+#undef VEC8_ROUND_SEQ
+#undef VEC8_ROUND_HALF
+#undef VEC8_ROUND_HALFANDHALF
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/ref/chacha20_ref.c libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/ref/chacha20_ref.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/ref/chacha20_ref.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/ref/chacha20_ref.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,314 @@
+
+/*
+ chacha-merged.c version 20080118
+ D. J. Bernstein
+ Public domain.
+ */
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "crypto_stream_chacha20.h"
+#include "private/common.h"
+#include "utils.h"
+
+#include "../stream_chacha20.h"
+#include "chacha20_ref.h"
+
+struct chacha_ctx {
+    uint32_t input[16];
+};
+
+typedef struct chacha_ctx chacha_ctx;
+
+#define U32C(v) (v##U)
+
+#define U32V(v) ((uint32_t)(v) &U32C(0xFFFFFFFF))
+
+#define ROTATE(v, c) (ROTL32(v, c))
+#define XOR(v, w) ((v) ^ (w))
+#define PLUS(v, w) (U32V((v) + (w)))
+#define PLUSONE(v) (PLUS((v), 1))
+
+#define QUARTERROUND(a, b, c, d) \
+    a = PLUS(a, b);              \
+    d = ROTATE(XOR(d, a), 16);   \
+    c = PLUS(c, d);              \
+    b = ROTATE(XOR(b, c), 12);   \
+    a = PLUS(a, b);              \
+    d = ROTATE(XOR(d, a), 8);    \
+    c = PLUS(c, d);              \
+    b = ROTATE(XOR(b, c), 7);
+
+static void
+chacha_keysetup(chacha_ctx *ctx, const uint8_t *k)
+{
+    ctx->input[0]  = U32C(0x61707865);
+    ctx->input[1]  = U32C(0x3320646e);
+    ctx->input[2]  = U32C(0x79622d32);
+    ctx->input[3]  = U32C(0x6b206574);
+    ctx->input[4]  = LOAD32_LE(k + 0);
+    ctx->input[5]  = LOAD32_LE(k + 4);
+    ctx->input[6]  = LOAD32_LE(k + 8);
+    ctx->input[7]  = LOAD32_LE(k + 12);
+    ctx->input[8]  = LOAD32_LE(k + 16);
+    ctx->input[9]  = LOAD32_LE(k + 20);
+    ctx->input[10] = LOAD32_LE(k + 24);
+    ctx->input[11] = LOAD32_LE(k + 28);
+}
+
+static void
+chacha_ivsetup(chacha_ctx *ctx, const uint8_t *iv, const uint8_t *counter)
+{
+    ctx->input[12] = counter == NULL ? 0 : LOAD32_LE(counter + 0);
+    ctx->input[13] = counter == NULL ? 0 : LOAD32_LE(counter + 4);
+    ctx->input[14] = LOAD32_LE(iv + 0);
+    ctx->input[15] = LOAD32_LE(iv + 4);
+}
+
+static void
+chacha_ietf_ivsetup(chacha_ctx *ctx, const uint8_t *iv, const uint8_t *counter)
+{
+    ctx->input[12] = counter == NULL ? 0 : LOAD32_LE(counter);
+    ctx->input[13] = LOAD32_LE(iv + 0);
+    ctx->input[14] = LOAD32_LE(iv + 4);
+    ctx->input[15] = LOAD32_LE(iv + 8);
+}
+
+static void
+chacha20_encrypt_bytes(chacha_ctx *ctx, const uint8_t *m, uint8_t *c,
+                       unsigned long long bytes)
+{
+    uint32_t x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14,
+        x15;
+    uint32_t j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14,
+        j15;
+    uint8_t *    ctarget = NULL;
+    uint8_t      tmp[64];
+    unsigned int i;
+
+    if (!bytes) {
+        return; /* LCOV_EXCL_LINE */
+    }
+    if (bytes > 64ULL * (1ULL << 32) - 64ULL) {
+        abort();
+    }
+    j0  = ctx->input[0];
+    j1  = ctx->input[1];
+    j2  = ctx->input[2];
+    j3  = ctx->input[3];
+    j4  = ctx->input[4];
+    j5  = ctx->input[5];
+    j6  = ctx->input[6];
+    j7  = ctx->input[7];
+    j8  = ctx->input[8];
+    j9  = ctx->input[9];
+    j10 = ctx->input[10];
+    j11 = ctx->input[11];
+    j12 = ctx->input[12];
+    j13 = ctx->input[13];
+    j14 = ctx->input[14];
+    j15 = ctx->input[15];
+
+    for (;;) {
+        if (bytes < 64) {
+            memset(tmp, 0, 64);
+            for (i = 0; i < bytes; ++i) {
+                tmp[i] = m[i];
+            }
+            m       = tmp;
+            ctarget = c;
+            c       = tmp;
+        }
+        x0  = j0;
+        x1  = j1;
+        x2  = j2;
+        x3  = j3;
+        x4  = j4;
+        x5  = j5;
+        x6  = j6;
+        x7  = j7;
+        x8  = j8;
+        x9  = j9;
+        x10 = j10;
+        x11 = j11;
+        x12 = j12;
+        x13 = j13;
+        x14 = j14;
+        x15 = j15;
+        for (i = 20; i > 0; i -= 2) {
+            QUARTERROUND(x0, x4, x8, x12)
+            QUARTERROUND(x1, x5, x9, x13)
+            QUARTERROUND(x2, x6, x10, x14)
+            QUARTERROUND(x3, x7, x11, x15)
+            QUARTERROUND(x0, x5, x10, x15)
+            QUARTERROUND(x1, x6, x11, x12)
+            QUARTERROUND(x2, x7, x8, x13)
+            QUARTERROUND(x3, x4, x9, x14)
+        }
+        x0  = PLUS(x0, j0);
+        x1  = PLUS(x1, j1);
+        x2  = PLUS(x2, j2);
+        x3  = PLUS(x3, j3);
+        x4  = PLUS(x4, j4);
+        x5  = PLUS(x5, j5);
+        x6  = PLUS(x6, j6);
+        x7  = PLUS(x7, j7);
+        x8  = PLUS(x8, j8);
+        x9  = PLUS(x9, j9);
+        x10 = PLUS(x10, j10);
+        x11 = PLUS(x11, j11);
+        x12 = PLUS(x12, j12);
+        x13 = PLUS(x13, j13);
+        x14 = PLUS(x14, j14);
+        x15 = PLUS(x15, j15);
+
+        x0  = XOR(x0, LOAD32_LE(m + 0));
+        x1  = XOR(x1, LOAD32_LE(m + 4));
+        x2  = XOR(x2, LOAD32_LE(m + 8));
+        x3  = XOR(x3, LOAD32_LE(m + 12));
+        x4  = XOR(x4, LOAD32_LE(m + 16));
+        x5  = XOR(x5, LOAD32_LE(m + 20));
+        x6  = XOR(x6, LOAD32_LE(m + 24));
+        x7  = XOR(x7, LOAD32_LE(m + 28));
+        x8  = XOR(x8, LOAD32_LE(m + 32));
+        x9  = XOR(x9, LOAD32_LE(m + 36));
+        x10 = XOR(x10, LOAD32_LE(m + 40));
+        x11 = XOR(x11, LOAD32_LE(m + 44));
+        x12 = XOR(x12, LOAD32_LE(m + 48));
+        x13 = XOR(x13, LOAD32_LE(m + 52));
+        x14 = XOR(x14, LOAD32_LE(m + 56));
+        x15 = XOR(x15, LOAD32_LE(m + 60));
+
+        j12 = PLUSONE(j12);
+        /* LCOV_EXCL_START */
+        if (!j12) {
+            j13 = PLUSONE(j13);
+        }
+        /* LCOV_EXCL_STOP */
+
+        STORE32_LE(c + 0, x0);
+        STORE32_LE(c + 4, x1);
+        STORE32_LE(c + 8, x2);
+        STORE32_LE(c + 12, x3);
+        STORE32_LE(c + 16, x4);
+        STORE32_LE(c + 20, x5);
+        STORE32_LE(c + 24, x6);
+        STORE32_LE(c + 28, x7);
+        STORE32_LE(c + 32, x8);
+        STORE32_LE(c + 36, x9);
+        STORE32_LE(c + 40, x10);
+        STORE32_LE(c + 44, x11);
+        STORE32_LE(c + 48, x12);
+        STORE32_LE(c + 52, x13);
+        STORE32_LE(c + 56, x14);
+        STORE32_LE(c + 60, x15);
+
+        if (bytes <= 64) {
+            if (bytes < 64) {
+                for (i = 0; i < (unsigned int) bytes; ++i) {
+                    ctarget[i] = c[i]; /* ctarget cannot be NULL */
+                }
+            }
+            ctx->input[12] = j12;
+            ctx->input[13] = j13;
+
+            return;
+        }
+        bytes -= 64;
+        c += 64;
+        m += 64;
+    }
+}
+
+static int
+stream_ref(unsigned char *c, unsigned long long clen, const unsigned char *n,
+           const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+
+    if (!clen) {
+        return 0;
+    }
+    COMPILER_ASSERT(crypto_stream_chacha20_KEYBYTES == 256 / 8);
+    chacha_keysetup(&ctx, k);
+    chacha_ivsetup(&ctx, n, NULL);
+    memset(c, 0, clen);
+    chacha20_encrypt_bytes(&ctx, c, c, clen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+static int
+stream_ietf_ref(unsigned char *c, unsigned long long clen,
+                const unsigned char *n, const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+
+    if (!clen) {
+        return 0;
+    }
+    COMPILER_ASSERT(crypto_stream_chacha20_KEYBYTES == 256 / 8);
+    chacha_keysetup(&ctx, k);
+    chacha_ietf_ivsetup(&ctx, n, NULL);
+    memset(c, 0, clen);
+    chacha20_encrypt_bytes(&ctx, c, c, clen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+static int
+stream_ref_xor_ic(unsigned char *c, const unsigned char *m,
+                  unsigned long long mlen, const unsigned char *n, uint64_t ic,
+                  const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+    uint8_t           ic_bytes[8];
+    uint32_t          ic_high;
+    uint32_t          ic_low;
+
+    if (!mlen) {
+        return 0;
+    }
+    ic_high = U32V(ic >> 32);
+    ic_low  = U32V(ic);
+    STORE32_LE(&ic_bytes[0], ic_low);
+    STORE32_LE(&ic_bytes[4], ic_high);
+    chacha_keysetup(&ctx, k);
+    chacha_ivsetup(&ctx, n, ic_bytes);
+    chacha20_encrypt_bytes(&ctx, m, c, mlen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+static int
+stream_ietf_ref_xor_ic(unsigned char *c, const unsigned char *m,
+                       unsigned long long mlen, const unsigned char *n,
+                       uint32_t ic, const unsigned char *k)
+{
+    struct chacha_ctx ctx;
+    uint8_t           ic_bytes[4];
+
+    if (!mlen) {
+        return 0;
+    }
+    STORE32_LE(ic_bytes, ic);
+    chacha_keysetup(&ctx, k);
+    chacha_ietf_ivsetup(&ctx, n, ic_bytes);
+    chacha20_encrypt_bytes(&ctx, m, c, mlen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+struct crypto_stream_chacha20_implementation
+    crypto_stream_chacha20_ref_implementation = {
+        SODIUM_C99(.stream =) stream_ref,
+        SODIUM_C99(.stream_ietf =) stream_ietf_ref,
+        SODIUM_C99(.stream_xor_ic =) stream_ref_xor_ic,
+        SODIUM_C99(.stream_ietf_xor_ic =) stream_ietf_ref_xor_ic
+    };
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/ref/chacha20_ref.h libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/ref/chacha20_ref.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/ref/chacha20_ref.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/ref/chacha20_ref.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,8 @@
+
+#include <stdint.h>
+
+#include "../stream_chacha20.h"
+#include "crypto_stream_chacha20.h"
+
+extern struct crypto_stream_chacha20_implementation
+    crypto_stream_chacha20_ref_implementation;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/ref/stream_chacha20_ref.c libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/ref/stream_chacha20_ref.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/ref/stream_chacha20_ref.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/ref/stream_chacha20_ref.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,315 +0,0 @@
-
-/*
- chacha-merged.c version 20080118
- D. J. Bernstein
- Public domain.
- */
-
-#include <stdint.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include "utils.h"
-#include "crypto_stream_chacha20.h"
-#include "stream_chacha20_ref.h"
-#include "../stream_chacha20.h"
-#include "private/common.h"
-
-struct chacha_ctx {
-    uint32_t input[16];
-};
-
-typedef uint8_t  u8;
-typedef uint32_t u32;
-
-typedef struct chacha_ctx chacha_ctx;
-
-#define U8C(v) (v##U)
-#define U32C(v) (v##U)
-
-#define U8V(v) ((u8)(v) & U8C(0xFF))
-#define U32V(v) ((u32)(v) & U32C(0xFFFFFFFF))
-
-#define ROTL32(v, n) \
-  (U32V((v) << (n)) | ((v) >> (32 - (n))))
-
-#define ROTATE(v,c) (ROTL32(v,c))
-#define XOR(v,w) ((v) ^ (w))
-#define PLUS(v,w) (U32V((v) + (w)))
-#define PLUSONE(v) (PLUS((v),1))
-
-#define QUARTERROUND(a,b,c,d) \
-  a = PLUS(a,b); d = ROTATE(XOR(d,a),16); \
-  c = PLUS(c,d); b = ROTATE(XOR(b,c),12); \
-  a = PLUS(a,b); d = ROTATE(XOR(d,a), 8); \
-  c = PLUS(c,d); b = ROTATE(XOR(b,c), 7);
-
-static void
-chacha_keysetup(chacha_ctx *ctx, const u8 *k)
-{
-    ctx->input[0]  = U32C(0x61707865);
-    ctx->input[1]  = U32C(0x3320646e);
-    ctx->input[2]  = U32C(0x79622d32);
-    ctx->input[3]  = U32C(0x6b206574);
-    ctx->input[4]  = LOAD32_LE(k +  0);
-    ctx->input[5]  = LOAD32_LE(k +  4);
-    ctx->input[6]  = LOAD32_LE(k +  8);
-    ctx->input[7]  = LOAD32_LE(k + 12);
-    ctx->input[8]  = LOAD32_LE(k + 16);
-    ctx->input[9]  = LOAD32_LE(k + 20);
-    ctx->input[10] = LOAD32_LE(k + 24);
-    ctx->input[11] = LOAD32_LE(k + 28);
-}
-
-static void
-chacha_ivsetup(chacha_ctx *ctx, const u8 *iv, const u8 *counter)
-{
-    ctx->input[12] = counter == NULL ? 0 : LOAD32_LE(counter + 0);
-    ctx->input[13] = counter == NULL ? 0 : LOAD32_LE(counter + 4);
-    ctx->input[14] = LOAD32_LE(iv + 0);
-    ctx->input[15] = LOAD32_LE(iv + 4);
-}
-
-static void
-chacha_ietf_ivsetup(chacha_ctx *ctx, const u8 *iv, const u8 *counter)
-{
-    ctx->input[12] = counter == NULL ? 0 : LOAD32_LE(counter);
-    ctx->input[13] = LOAD32_LE(iv + 0);
-    ctx->input[14] = LOAD32_LE(iv + 4);
-    ctx->input[15] = LOAD32_LE(iv + 8);
-}
-
-static void
-chacha_encrypt_bytes(chacha_ctx *ctx, const u8 *m, u8 *c, unsigned long long bytes)
-{
-    u32 x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15;
-    u32 j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15;
-    u8 *ctarget = NULL;
-    u8 tmp[64];
-    unsigned int i;
-
-    if (!bytes) {
-        return; /* LCOV_EXCL_LINE */
-    }
-    if (bytes > 64ULL * (1ULL << 32) - 64ULL) {
-        abort();
-    }
-    j0 = ctx->input[0];
-    j1 = ctx->input[1];
-    j2 = ctx->input[2];
-    j3 = ctx->input[3];
-    j4 = ctx->input[4];
-    j5 = ctx->input[5];
-    j6 = ctx->input[6];
-    j7 = ctx->input[7];
-    j8 = ctx->input[8];
-    j9 = ctx->input[9];
-    j10 = ctx->input[10];
-    j11 = ctx->input[11];
-    j12 = ctx->input[12];
-    j13 = ctx->input[13];
-    j14 = ctx->input[14];
-    j15 = ctx->input[15];
-
-    for (;;) {
-        if (bytes < 64) {
-            memset(tmp, 0, 64);
-            for (i = 0; i < bytes; ++i) {
-                tmp[i] = m[i];
-            }
-            m = tmp;
-            ctarget = c;
-            c = tmp;
-        }
-        x0 = j0;
-        x1 = j1;
-        x2 = j2;
-        x3 = j3;
-        x4 = j4;
-        x5 = j5;
-        x6 = j6;
-        x7 = j7;
-        x8 = j8;
-        x9 = j9;
-        x10 = j10;
-        x11 = j11;
-        x12 = j12;
-        x13 = j13;
-        x14 = j14;
-        x15 = j15;
-        for (i = 20; i > 0; i -= 2) {
-            QUARTERROUND(x0, x4, x8, x12)
-            QUARTERROUND(x1, x5, x9, x13)
-            QUARTERROUND(x2, x6, x10, x14)
-            QUARTERROUND(x3, x7, x11, x15)
-            QUARTERROUND(x0, x5, x10, x15)
-            QUARTERROUND(x1, x6, x11, x12)
-            QUARTERROUND(x2, x7, x8, x13)
-            QUARTERROUND(x3, x4, x9, x14)
-        }
-        x0 = PLUS(x0, j0);
-        x1 = PLUS(x1, j1);
-        x2 = PLUS(x2, j2);
-        x3 = PLUS(x3, j3);
-        x4 = PLUS(x4, j4);
-        x5 = PLUS(x5, j5);
-        x6 = PLUS(x6, j6);
-        x7 = PLUS(x7, j7);
-        x8 = PLUS(x8, j8);
-        x9 = PLUS(x9, j9);
-        x10 = PLUS(x10, j10);
-        x11 = PLUS(x11, j11);
-        x12 = PLUS(x12, j12);
-        x13 = PLUS(x13, j13);
-        x14 = PLUS(x14, j14);
-        x15 = PLUS(x15, j15);
-
-        x0 = XOR(x0, LOAD32_LE(m + 0));
-        x1 = XOR(x1, LOAD32_LE(m + 4));
-        x2 = XOR(x2, LOAD32_LE(m + 8));
-        x3 = XOR(x3, LOAD32_LE(m + 12));
-        x4 = XOR(x4, LOAD32_LE(m + 16));
-        x5 = XOR(x5, LOAD32_LE(m + 20));
-        x6 = XOR(x6, LOAD32_LE(m + 24));
-        x7 = XOR(x7, LOAD32_LE(m + 28));
-        x8 = XOR(x8, LOAD32_LE(m + 32));
-        x9 = XOR(x9, LOAD32_LE(m + 36));
-        x10 = XOR(x10, LOAD32_LE(m + 40));
-        x11 = XOR(x11, LOAD32_LE(m + 44));
-        x12 = XOR(x12, LOAD32_LE(m + 48));
-        x13 = XOR(x13, LOAD32_LE(m + 52));
-        x14 = XOR(x14, LOAD32_LE(m + 56));
-        x15 = XOR(x15, LOAD32_LE(m + 60));
-
-        j12 = PLUSONE(j12);
-        /* LCOV_EXCL_START */
-        if (!j12) {
-            j13 = PLUSONE(j13);
-        }
-        /* LCOV_EXCL_STOP */
-
-        STORE32_LE(c + 0, x0);
-        STORE32_LE(c + 4, x1);
-        STORE32_LE(c + 8, x2);
-        STORE32_LE(c + 12, x3);
-        STORE32_LE(c + 16, x4);
-        STORE32_LE(c + 20, x5);
-        STORE32_LE(c + 24, x6);
-        STORE32_LE(c + 28, x7);
-        STORE32_LE(c + 32, x8);
-        STORE32_LE(c + 36, x9);
-        STORE32_LE(c + 40, x10);
-        STORE32_LE(c + 44, x11);
-        STORE32_LE(c + 48, x12);
-        STORE32_LE(c + 52, x13);
-        STORE32_LE(c + 56, x14);
-        STORE32_LE(c + 60, x15);
-
-        if (bytes <= 64) {
-            if (bytes < 64) {
-                for (i = 0; i < (unsigned int) bytes; ++i) {
-                    ctarget[i] = c[i]; /* ctarget cannot be NULL */
-                }
-            }
-            ctx->input[12] = j12;
-            ctx->input[13] = j13;
-            return;
-        }
-        bytes -= 64;
-        c += 64;
-        m += 64;
-    }
-}
-
-static int
-stream_ref(unsigned char *c, unsigned long long clen,
-           const unsigned char *n, const unsigned char *k)
-{
-    struct chacha_ctx ctx;
-
-    if (!clen) {
-        return 0;
-    }
-    (void) sizeof(int[crypto_stream_chacha20_KEYBYTES == 256 / 8 ? 1 : -1]);
-    chacha_keysetup(&ctx, k);
-    chacha_ivsetup(&ctx, n, NULL);
-    memset(c, 0, clen);
-    chacha_encrypt_bytes(&ctx, c, c, clen);
-    sodium_memzero(&ctx, sizeof ctx);
-
-    return 0;
-}
-
-static int
-stream_ietf_ref(unsigned char *c, unsigned long long clen,
-                const unsigned char *n, const unsigned char *k)
-{
-    struct chacha_ctx ctx;
-
-    if (!clen) {
-        return 0;
-    }
-    (void) sizeof(int[crypto_stream_chacha20_KEYBYTES == 256 / 8 ? 1 : -1]);
-    chacha_keysetup(&ctx, k);
-    chacha_ietf_ivsetup(&ctx, n, NULL);
-    memset(c, 0, clen);
-    chacha_encrypt_bytes(&ctx, c, c, clen);
-    sodium_memzero(&ctx, sizeof ctx);
-
-    return 0;
-}
-
-static int
-stream_ref_xor_ic(unsigned char *c, const unsigned char *m,
-                  unsigned long long mlen,
-                  const unsigned char *n, uint64_t ic,
-                  const unsigned char *k)
-{
-    struct chacha_ctx ctx;
-    uint8_t           ic_bytes[8];
-    uint32_t          ic_high;
-    uint32_t          ic_low;
-
-    if (!mlen) {
-        return 0;
-    }
-    ic_high = U32V(ic >> 32);
-    ic_low = U32V(ic);
-    STORE32_LE(&ic_bytes[0], ic_low);
-    STORE32_LE(&ic_bytes[4], ic_high);
-    chacha_keysetup(&ctx, k);
-    chacha_ivsetup(&ctx, n, ic_bytes);
-    chacha_encrypt_bytes(&ctx, m, c, mlen);
-    sodium_memzero(&ctx, sizeof ctx);
-
-    return 0;
-}
-
-static int
-stream_ietf_ref_xor_ic(unsigned char *c, const unsigned char *m,
-                       unsigned long long mlen,
-                       const unsigned char *n, uint32_t ic,
-                       const unsigned char *k)
-{
-    struct chacha_ctx ctx;
-    uint8_t           ic_bytes[4];
-
-    if (!mlen) {
-        return 0;
-    }
-    STORE32_LE(ic_bytes, ic);
-    chacha_keysetup(&ctx, k);
-    chacha_ietf_ivsetup(&ctx, n, ic_bytes);
-    chacha_encrypt_bytes(&ctx, m, c, mlen);
-    sodium_memzero(&ctx, sizeof ctx);
-
-    return 0;
-}
-
-struct crypto_stream_chacha20_implementation
-crypto_stream_chacha20_ref_implementation = {
-    SODIUM_C99(.stream =) stream_ref,
-    SODIUM_C99(.stream_ietf =) stream_ietf_ref,
-    SODIUM_C99(.stream_xor_ic =) stream_ref_xor_ic,
-    SODIUM_C99(.stream_ietf_xor_ic =) stream_ietf_ref_xor_ic
-};
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/ref/stream_chacha20_ref.h libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/ref/stream_chacha20_ref.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/ref/stream_chacha20_ref.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/ref/stream_chacha20_ref.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,28 +0,0 @@
-
-#include <stdint.h>
-
-#include "crypto_stream_chacha20.h"
-#include "../stream_chacha20.h"
-
-extern struct crypto_stream_chacha20_implementation
-    crypto_stream_chacha20_ref_implementation;
-
-int
-crypto_stream_chacha20_ref(unsigned char *c, unsigned long long clen,
-                           const unsigned char *n, const unsigned char *k);
-
-int
-crypto_stream_chacha20_ref_xor_ic(unsigned char *c, const unsigned char *m,
-                                  unsigned long long mlen,
-                                  const unsigned char *n, uint64_t ic,
-                                  const unsigned char *k);
-
-int
-crypto_stream_chacha20_ietf_ref(unsigned char *c, unsigned long long clen,
-                                const unsigned char *n, const unsigned char *k);
-
-int
-crypto_stream_chacha20_ietf_ref_xor_ic(unsigned char *c, const unsigned char *m,
-                                       unsigned long long mlen,
-                                       const unsigned char *n, uint32_t ic,
-                                       const unsigned char *k);
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/stream_chacha20.c libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/stream_chacha20.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/stream_chacha20.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/stream_chacha20.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,9 +1,16 @@
 #include "crypto_stream_chacha20.h"
-#include "stream_chacha20.h"
+#include "private/common.h"
+#include "randombytes.h"
 #include "runtime.h"
-#include "ref/stream_chacha20_ref.h"
-#if (defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H) && defined(__GNUC__))
-# include "vec/stream_chacha20_vec.h"
+#include "stream_chacha20.h"
+
+#include "ref/chacha20_ref.h"
+#if defined(HAVE_AVX2INTRIN_H) && defined(HAVE_EMMINTRIN_H) && \
+    defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)
+# include "dolbeau/chacha20_dolbeau-avx2.h"
+#endif
+#if defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)
+# include "dolbeau/chacha20_dolbeau-ssse3.h"
 #endif
 
 static const crypto_stream_chacha20_implementation *implementation =
@@ -20,8 +27,13 @@ crypto_stream_chacha20_noncebytes(void)
 }
 
 size_t
+crypto_stream_chacha20_ietf_keybytes(void) {
+    return crypto_stream_chacha20_ietf_KEYBYTES;
+}
+
+size_t
 crypto_stream_chacha20_ietf_noncebytes(void) {
-    return crypto_stream_chacha20_IETF_NONCEBYTES;
+    return crypto_stream_chacha20_ietf_NONCEBYTES;
 }
 
 int
@@ -72,13 +84,33 @@ crypto_stream_chacha20_ietf_xor(unsigned
     return implementation->stream_ietf_xor_ic(c, m, mlen, n, 0U, k);
 }
 
+void
+crypto_stream_chacha20_ietf_keygen(unsigned char k[crypto_stream_chacha20_ietf_KEYBYTES])
+{
+    randombytes_buf(k, crypto_stream_chacha20_ietf_KEYBYTES);
+}
+
+void
+crypto_stream_chacha20_keygen(unsigned char k[crypto_stream_chacha20_KEYBYTES])
+{
+    randombytes_buf(k, crypto_stream_chacha20_KEYBYTES);
+}
+
 int
 _crypto_stream_chacha20_pick_best_implementation(void)
 {
     implementation = &crypto_stream_chacha20_ref_implementation;
-#if (defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H) && defined(__GNUC__))
+#if defined(HAVE_AVX2INTRIN_H) && defined(HAVE_EMMINTRIN_H) && \
+    defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)
+    if (sodium_runtime_has_avx2()) {
+        implementation = &crypto_stream_chacha20_dolbeau_avx2_implementation;
+        return 0;
+    }
+#endif
+#if defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H)
     if (sodium_runtime_has_ssse3()) {
-        implementation = &crypto_stream_chacha20_vec_implementation;
+        implementation = &crypto_stream_chacha20_dolbeau_ssse3_implementation;
+        return 0;
     }
 #endif
     return 0;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/vec/stream_chacha20_vec.c libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/vec/stream_chacha20_vec.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/vec/stream_chacha20_vec.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/vec/stream_chacha20_vec.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,336 +0,0 @@
-
-#include <stdint.h>
-#include <stdlib.h>
-#include <string.h>
-
-#include "export.h"
-#include "utils.h"
-#include "crypto_stream_chacha20.h"
-#include "stream_chacha20_vec.h"
-#include "../stream_chacha20.h"
-
-#if (defined(HAVE_EMMINTRIN_H) && defined(HAVE_TMMINTRIN_H) && defined(__GNUC__))
-
-#pragma GCC target("sse2")
-#pragma GCC target("ssse3")
-
-#define CHACHA_RNDS 20
-
-typedef unsigned int vec __attribute__ ((vector_size(16)));
-
-#include <emmintrin.h>
-#include <tmmintrin.h>
-
-# if __clang__
-#  define VBPI 4
-# else
-#  define VBPI 3
-# endif
-# define ONE (vec) _mm_set_epi32(0, 0, 0, 1)
-# define LOAD(m) (vec) _mm_loadu_si128((const __m128i *) (const void *) (m))
-# define LOAD_ALIGNED(m) (vec) _mm_load_si128((const __m128i *) (const void *) (m))
-# define STORE(m, r) _mm_storeu_si128((__m128i *) (void *) (m), (__m128i) (r))
-# define ROTV1(x) (vec) _mm_shuffle_epi32((__m128i)x, _MM_SHUFFLE(0, 3, 2, 1))
-# define ROTV2(x) (vec) _mm_shuffle_epi32((__m128i)x, _MM_SHUFFLE(1, 0, 3, 2))
-# define ROTV3(x) (vec) _mm_shuffle_epi32((__m128i)x, _MM_SHUFFLE(2, 1, 0, 3))
-# define ROTW7(x) \
-    (vec)(_mm_slli_epi32((__m128i)x, 7) ^ _mm_srli_epi32((__m128i)x, 25))
-# define ROTW12(x) \
-    (vec)(_mm_slli_epi32((__m128i)x, 12) ^ _mm_srli_epi32((__m128i)x, 20))
-# define ROTW8(x) \
-    (vec)(_mm_slli_epi32((__m128i)x, 8) ^ _mm_srli_epi32((__m128i)x, 24))
-#define ROTW16(x) \
-    (vec)(_mm_slli_epi32((__m128i)x, 16) ^ _mm_srli_epi32((__m128i)x, 16))
-
-#ifndef REVV_BE
-# define REVV_BE(x) (x)
-#endif
-
-#define BPI (VBPI + 0) /* Blocks computed per loop iteration   */
-
-#define DQROUND_VECTORS(a, b, c, d) \
-    a += b;                         \
-    d ^= a;                         \
-    d = ROTW16(d);                  \
-    c += d;                         \
-    b ^= c;                         \
-    b = ROTW12(b);                  \
-    a += b;                         \
-    d ^= a;                         \
-    d = ROTW8(d);                   \
-    c += d;                         \
-    b ^= c;                         \
-    b = ROTW7(b);                   \
-    b = ROTV1(b);                   \
-    c = ROTV2(c);                   \
-    d = ROTV3(d);                   \
-    a += b;                         \
-    d ^= a;                         \
-    d = ROTW16(d);                  \
-    c += d;                         \
-    b ^= c;                         \
-    b = ROTW12(b);                  \
-    a += b;                         \
-    d ^= a;                         \
-    d = ROTW8(d);                   \
-    c += d;                         \
-    b ^= c;                         \
-    b = ROTW7(b);                   \
-    b = ROTV3(b);                   \
-    c = ROTV2(c);                   \
-    d = ROTV1(d);
-
-#define WRITE_XOR(in, op, d, v0, v1, v2, v3)           \
-    STORE(op + d + 0, LOAD(in + d + 0) ^ REVV_BE(v0)); \
-    STORE(op + d + 4, LOAD(in + d + 4) ^ REVV_BE(v1)); \
-    STORE(op + d + 8, LOAD(in + d + 8) ^ REVV_BE(v2)); \
-    STORE(op + d + 12, LOAD(in + d + 12) ^ REVV_BE(v3));
-
-struct chacha_ctx {
-    vec s1;
-    vec s2;
-    vec s3;
-};
-
-typedef struct chacha_ctx chacha_ctx;
-
-static void
-chacha_ivsetup(chacha_ctx *ctx, const uint8_t *iv, uint64_t ic)
-{
-    uint32_t iv_low;
-    uint32_t iv_high;
-
-    memcpy(&iv_low, iv, 4);
-    memcpy(&iv_high, iv + 4, 4);
-    {
-        const vec s3 = {
-            (uint32_t) ic,
-            (uint32_t) (ic >> 32),
-            iv_low,
-            iv_high
-        };
-        ctx->s3 = s3;
-    }
-}
-
-static void
-chacha_ietf_ivsetup(chacha_ctx *ctx, const uint8_t *iv, uint32_t ic)
-{
-    const vec s3 = {
-        ic,
-        ((const uint32_t *) (const void *) iv)[0],
-        ((const uint32_t *) (const void *) iv)[1],
-        ((const uint32_t *) (const void *) iv)[2]
-    };
-    ctx->s3 = s3;
-}
-
-static void
-chacha_keysetup(chacha_ctx *ctx, const uint8_t *k)
-{
-    ctx->s1 = LOAD(k);
-    ctx->s2 = LOAD(k + 16);
-}
-
-static void
-chacha_encrypt_bytes(chacha_ctx *ctx, const uint8_t *in, uint8_t *out,
-                     unsigned long long inlen)
-{
-    CRYPTO_ALIGN(16) unsigned chacha_const[]
-        = { 0x61707865, 0x3320646E, 0x79622D32, 0x6B206574 };
-    uint32_t           *op = (uint32_t *) (void *) out;
-    const uint32_t     *ip = (const uint32_t *) (const void *) in;
-    vec                 s0, s1, s2, s3;
-    unsigned long long  iters;
-    unsigned long long  i;
-
-    if (inlen > 64ULL * (1ULL << 32) - 64ULL) {
-        abort(); /* LCOV_EXCL_LINE */
-    }
-    s0 = LOAD_ALIGNED(chacha_const);
-    s1 = ctx->s1;
-    s2 = ctx->s2;
-    s3 = ctx->s3;
-
-    for (iters = 0; iters < inlen / (BPI * 64); iters++) {
-#if VBPI > 2
-        vec v8, v9, v10, v11;
-#endif
-#if VBPI > 3
-        vec v12, v13, v14, v15;
-#endif
-        vec v0, v1, v2, v3, v4, v5, v6, v7;
-        v4 = v0 = s0;
-        v5 = v1 = s1;
-        v6 = v2 = s2;
-        v3 = s3;
-        v7 = v3 + ONE;
-#if VBPI > 2
-        v8 = v4;
-        v9 = v5;
-        v10 = v6;
-        v11 = v7 + ONE;
-#endif
-#if VBPI > 3
-        v12 = v8;
-        v13 = v9;
-        v14 = v10;
-        v15 = v11 + ONE;
-#endif
-        for (i = CHACHA_RNDS / 2; i; i--) {
-            DQROUND_VECTORS(v0, v1, v2, v3)
-            DQROUND_VECTORS(v4, v5, v6, v7)
-#if VBPI > 2
-            DQROUND_VECTORS(v8, v9, v10, v11)
-#endif
-#if VBPI > 3
-            DQROUND_VECTORS(v12, v13, v14, v15)
-#endif
-        }
-
-        WRITE_XOR(ip, op, 0, v0 + s0, v1 + s1, v2 + s2, v3 + s3)
-        s3 += ONE;
-        WRITE_XOR(ip, op, 16, v4 + s0, v5 + s1, v6 + s2, v7 + s3)
-        s3 += ONE;
-#if VBPI > 2
-        WRITE_XOR(ip, op, 32, v8 + s0, v9 + s1, v10 + s2, v11 + s3)
-        s3 += ONE;
-#endif
-#if VBPI > 3
-        WRITE_XOR(ip, op, 48, v12 + s0, v13 + s1, v14 + s2, v15 + s3)
-        s3 += ONE;
-#endif
-        ip += VBPI * 16;
-        op += VBPI * 16;
-    }
-
-    for (iters = inlen % (BPI * 64) / 64; iters != 0; iters--) {
-        vec v0 = s0, v1 = s1, v2 = s2, v3 = s3;
-        for (i = CHACHA_RNDS / 2; i; i--) {
-            DQROUND_VECTORS(v0, v1, v2, v3);
-        }
-        WRITE_XOR(ip, op, 0, v0 + s0, v1 + s1, v2 + s2, v3 + s3)
-        s3 += ONE;
-        ip += 16;
-        op += 16;
-    }
-
-    inlen = inlen % 64;
-    if (inlen) {
-        CRYPTO_ALIGN(16) vec buf[4];
-        vec v0, v1, v2, v3;
-        v0 = s0;
-        v1 = s1;
-        v2 = s2;
-        v3 = s3;
-        for (i = CHACHA_RNDS / 2; i; i--) {
-            DQROUND_VECTORS(v0, v1, v2, v3);
-        }
-
-        if (inlen >= 16) {
-            STORE(op + 0, LOAD(ip + 0) ^ REVV_BE(v0 + s0));
-            if (inlen >= 32) {
-                STORE(op + 4, LOAD(ip + 4) ^ REVV_BE(v1 + s1));
-                if (inlen >= 48) {
-                    STORE(op + 8, LOAD(ip + 8) ^ REVV_BE(v2 + s2));
-                    buf[3] = REVV_BE(v3 + s3);
-                } else {
-                    buf[2] = REVV_BE(v2 + s2);
-                }
-            } else {
-                buf[1] = REVV_BE(v1 + s1);
-            }
-        } else {
-            buf[0] = REVV_BE(v0 + s0);
-        }
-        for (i = inlen & ~15ULL; i < inlen; i++) {
-            ((char *) op)[i] = ((const char *) ip)[i] ^ ((char *) buf)[i];
-        }
-    }
-}
-
-static int
-stream_vec(unsigned char *c, unsigned long long clen,
-           const unsigned char *n, const unsigned char *k)
-{
-    struct chacha_ctx ctx;
-
-    if (!clen) {
-        return 0;
-    }
-    (void) sizeof(int[crypto_stream_chacha20_KEYBYTES == 256 / 8 ? 1 : -1]);
-    chacha_keysetup(&ctx, k);
-    chacha_ivsetup(&ctx, n, 0ULL);
-    memset(c, 0, clen);
-    chacha_encrypt_bytes(&ctx, c, c, clen);
-    sodium_memzero(&ctx, sizeof ctx);
-
-    return 0;
-}
-
-static int
-stream_ietf_vec(unsigned char *c, unsigned long long clen,
-                const unsigned char *n, const unsigned char *k)
-{
-    struct chacha_ctx ctx;
-
-    if (!clen) {
-        return 0;
-    }
-    (void) sizeof(int[crypto_stream_chacha20_KEYBYTES == 256 / 8 ? 1 : -1]);
-    chacha_keysetup(&ctx, k);
-    chacha_ietf_ivsetup(&ctx, n, 0ULL);
-    memset(c, 0, clen);
-    chacha_encrypt_bytes(&ctx, c, c, clen);
-    sodium_memzero(&ctx, sizeof ctx);
-
-    return 0;
-}
-
-static int
-stream_vec_xor_ic(unsigned char *c, const unsigned char *m,
-                  unsigned long long mlen,
-                  const unsigned char *n, uint64_t ic,
-                  const unsigned char *k)
-{
-    struct chacha_ctx ctx;
-
-    if (!mlen) {
-        return 0;
-    }
-    chacha_keysetup(&ctx, k);
-    chacha_ivsetup(&ctx, n, ic);
-    chacha_encrypt_bytes(&ctx, m, c, mlen);
-    sodium_memzero(&ctx, sizeof ctx);
-
-    return 0;
-}
-
-static int
-stream_ietf_vec_xor_ic(unsigned char *c, const unsigned char *m,
-                       unsigned long long mlen,
-                       const unsigned char *n, uint32_t ic,
-                       const unsigned char *k)
-{
-    struct chacha_ctx ctx;
-
-    if (!mlen) {
-        return 0;
-    }
-    chacha_keysetup(&ctx, k);
-    chacha_ietf_ivsetup(&ctx, n, ic);
-    chacha_encrypt_bytes(&ctx, m, c, mlen);
-    sodium_memzero(&ctx, sizeof ctx);
-
-    return 0;
-}
-
-struct crypto_stream_chacha20_implementation
-crypto_stream_chacha20_vec_implementation = {
-    SODIUM_C99(.stream =) stream_vec,
-    SODIUM_C99(.stream_ietf =) stream_ietf_vec,
-    SODIUM_C99(.stream_xor_ic =) stream_vec_xor_ic,
-    SODIUM_C99(.stream_ietf_xor_ic =) stream_ietf_vec_xor_ic
-};
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/vec/stream_chacha20_vec.h libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/vec/stream_chacha20_vec.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/chacha20/vec/stream_chacha20_vec.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/chacha20/vec/stream_chacha20_vec.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,28 +0,0 @@
-
-#include <stdint.h>
-
-#include "crypto_stream_chacha20.h"
-#include "../stream_chacha20.h"
-
-extern struct crypto_stream_chacha20_implementation
-    crypto_stream_chacha20_vec_implementation;
-
-int
-crypto_stream_chacha20_vec(unsigned char *c, unsigned long long clen,
-                           const unsigned char *n, const unsigned char *k);
-
-int
-crypto_stream_chacha20_vec_xor_ic(unsigned char *c, const unsigned char *m,
-                                  unsigned long long mlen,
-                                  const unsigned char *n, uint64_t ic,
-                                  const unsigned char *k);
-
-int
-crypto_stream_chacha20_ietf_vec(unsigned char *c, unsigned long long clen,
-                                const unsigned char *n, const unsigned char *k);
-
-int
-crypto_stream_chacha20_ietf_vec_xor_ic(unsigned char *c, const unsigned char *m,
-                                       unsigned long long mlen,
-                                       const unsigned char *n, uint32_t ic,
-                                       const unsigned char *k);
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/crypto_stream.c libsodium-1.0.12/src/libsodium/crypto_stream/crypto_stream.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/crypto_stream.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/crypto_stream.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,5 +1,6 @@
 
 #include "crypto_stream.h"
+#include "randombytes.h"
 
 size_t
 crypto_stream_keybytes(void)
@@ -34,3 +35,9 @@ crypto_stream_xor(unsigned char *c, cons
 {
     return crypto_stream_xsalsa20_xor(c, m, mlen, n, k);
 }
+
+void
+crypto_stream_keygen(unsigned char k[crypto_stream_KEYBYTES])
+{
+    randombytes_buf(k, crypto_stream_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S	2016-07-09 14:17:46.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S	1970-01-01 01:00:00.000000000 +0100
@@ -1,952 +0,0 @@
-#ifdef HAVE_AMD64_ASM
-
-.text
-.p2align 5
-
-.globl  crypto_stream_salsa20
-.globl _crypto_stream_salsa20
-#ifdef __ELF__
-.type  crypto_stream_salsa20, @function
-.type _crypto_stream_salsa20, @function
-#endif
-crypto_stream_salsa20:
-_crypto_stream_salsa20:
-mov %rsp,%r11
-and $31,%r11
-add $512,%r11
-sub %r11,%rsp
-movq %r11,416(%rsp)
-movq %r12,424(%rsp)
-movq %r13,432(%rsp)
-movq %r14,440(%rsp)
-movq %r15,448(%rsp)
-movq %rbx,456(%rsp)
-movq %rbp,464(%rsp)
-mov  %rsi,%r9
-mov  %rdi,%rdi
-mov  %rdi,%rsi
-mov  %rdx,%rdx
-mov  %rcx,%r10
-cmp  $0,%r9
-jbe ._done
-mov  $0,%rax
-mov  %r9,%rcx
-rep stosb
-sub  %r9,%rdi
-movq $0,472(%rsp)
-jmp ._start
-
-.text
-.p2align 5
-
-.globl  crypto_stream_salsa20_xor_ic
-.globl _crypto_stream_salsa20_xor_ic
-#ifdef __ELF__
-.type  crypto_stream_salsa20_xor_ic, @function
-.type _crypto_stream_salsa20_xor_ic, @function
-#endif
-crypto_stream_salsa20_xor_ic:
-_crypto_stream_salsa20_xor_ic:
-
-mov %rsp,%r11
-and $31,%r11
-add $512,%r11
-sub %r11,%rsp
-movq %r11,416(%rsp)
-movq %r12,424(%rsp)
-movq %r13,432(%rsp)
-movq %r14,440(%rsp)
-movq %r15,448(%rsp)
-movq %rbx,456(%rsp)
-movq %rbp,464(%rsp)
-mov  %rdi,%rdi
-mov  %rsi,%rsi
-mov  %r9,%r10
-movq %r8,472(%rsp)
-mov  %rdx,%r9
-mov  %rcx,%rdx
-cmp  $0,%r9
-jbe ._done
-
-._start:
-movl   20(%r10),%ecx
-movl   0(%r10),%r8d
-movl   0(%rdx),%eax
-movl   16(%r10),%r11d
-movl %ecx,64(%rsp)
-movl %r8d,4+64(%rsp)
-movl %eax,8+64(%rsp)
-movl %r11d,12+64(%rsp)
-movl   24(%r10),%r8d
-movl   4(%r10),%eax
-movl   4(%rdx),%edx
-movq 472(%rsp),%rcx
-movl %ecx,80(%rsp)
-movl %r8d,4+80(%rsp)
-movl %eax,8+80(%rsp)
-movl %edx,12+80(%rsp)
-movl   12(%r10),%edx
-shr  $32,%rcx
-movl   28(%r10),%r8d
-movl   8(%r10),%eax
-movl %edx,96(%rsp)
-movl %ecx,4+96(%rsp)
-movl %r8d,8+96(%rsp)
-movl %eax,12+96(%rsp)
-mov  $1634760805,%rdx
-mov  $857760878,%rcx
-mov  $2036477234,%r8
-mov  $1797285236,%rax
-movl %edx,112(%rsp)
-movl %ecx,4+112(%rsp)
-movl %r8d,8+112(%rsp)
-movl %eax,12+112(%rsp)
-cmp  $256,%r9
-jb ._bytesbetween1and255
-movdqa 112(%rsp),%xmm0
-pshufd $0x55,%xmm0,%xmm1
-pshufd $0xaa,%xmm0,%xmm2
-pshufd $0xff,%xmm0,%xmm3
-pshufd $0x00,%xmm0,%xmm0
-movdqa %xmm1,128(%rsp)
-movdqa %xmm2,144(%rsp)
-movdqa %xmm3,160(%rsp)
-movdqa %xmm0,176(%rsp)
-movdqa 64(%rsp),%xmm0
-pshufd $0xaa,%xmm0,%xmm1
-pshufd $0xff,%xmm0,%xmm2
-pshufd $0x00,%xmm0,%xmm3
-pshufd $0x55,%xmm0,%xmm0
-movdqa %xmm1,192(%rsp)
-movdqa %xmm2,208(%rsp)
-movdqa %xmm3,224(%rsp)
-movdqa %xmm0,240(%rsp)
-movdqa 80(%rsp),%xmm0
-pshufd $0xff,%xmm0,%xmm1
-pshufd $0x55,%xmm0,%xmm2
-pshufd $0xaa,%xmm0,%xmm0
-movdqa %xmm1,256(%rsp)
-movdqa %xmm2,272(%rsp)
-movdqa %xmm0,288(%rsp)
-movdqa 96(%rsp),%xmm0
-pshufd $0x00,%xmm0,%xmm1
-pshufd $0xaa,%xmm0,%xmm2
-pshufd $0xff,%xmm0,%xmm0
-movdqa %xmm1,304(%rsp)
-movdqa %xmm2,320(%rsp)
-movdqa %xmm0,336(%rsp)
-
-.p2align 4
-._bytesatleast256:
-movq 472(%rsp),%rdx
-mov  %rdx,%rcx
-shr  $32,%rcx
-movl %edx,352(%rsp)
-movl %ecx,368(%rsp)
-add  $1,%rdx
-mov  %rdx,%rcx
-shr  $32,%rcx
-movl %edx,4+352(%rsp)
-movl %ecx,4+368(%rsp)
-add  $1,%rdx
-mov  %rdx,%rcx
-shr  $32,%rcx
-movl %edx,8+352(%rsp)
-movl %ecx,8+368(%rsp)
-add  $1,%rdx
-mov  %rdx,%rcx
-shr  $32,%rcx
-movl %edx,12+352(%rsp)
-movl %ecx,12+368(%rsp)
-add  $1,%rdx
-mov  %rdx,%rcx
-shr  $32,%rcx
-movl %edx,80(%rsp)
-movl %ecx,4+96(%rsp)
-movq %rdx,472(%rsp)
-movq %r9,480(%rsp)
-mov  $20,%rdx
-movdqa 128(%rsp),%xmm0
-movdqa 144(%rsp),%xmm1
-movdqa 160(%rsp),%xmm2
-movdqa 320(%rsp),%xmm3
-movdqa 336(%rsp),%xmm4
-movdqa 192(%rsp),%xmm5
-movdqa 208(%rsp),%xmm6
-movdqa 240(%rsp),%xmm7
-movdqa 256(%rsp),%xmm8
-movdqa 272(%rsp),%xmm9
-movdqa 288(%rsp),%xmm10
-movdqa 368(%rsp),%xmm11
-movdqa 176(%rsp),%xmm12
-movdqa 224(%rsp),%xmm13
-movdqa 304(%rsp),%xmm14
-movdqa 352(%rsp),%xmm15
-
-.p2align 4
-._mainloop1:
-movdqa %xmm1,384(%rsp)
-movdqa %xmm2,400(%rsp)
-movdqa %xmm13,%xmm1
-paddd %xmm12,%xmm1
-movdqa %xmm1,%xmm2
-pslld $7,%xmm1
-pxor  %xmm1,%xmm14
-psrld $25,%xmm2
-pxor  %xmm2,%xmm14
-movdqa %xmm7,%xmm1
-paddd %xmm0,%xmm1
-movdqa %xmm1,%xmm2
-pslld $7,%xmm1
-pxor  %xmm1,%xmm11
-psrld $25,%xmm2
-pxor  %xmm2,%xmm11
-movdqa %xmm12,%xmm1
-paddd %xmm14,%xmm1
-movdqa %xmm1,%xmm2
-pslld $9,%xmm1
-pxor  %xmm1,%xmm15
-psrld $23,%xmm2
-pxor  %xmm2,%xmm15
-movdqa %xmm0,%xmm1
-paddd %xmm11,%xmm1
-movdqa %xmm1,%xmm2
-pslld $9,%xmm1
-pxor  %xmm1,%xmm9
-psrld $23,%xmm2
-pxor  %xmm2,%xmm9
-movdqa %xmm14,%xmm1
-paddd %xmm15,%xmm1
-movdqa %xmm1,%xmm2
-pslld $13,%xmm1
-pxor  %xmm1,%xmm13
-psrld $19,%xmm2
-pxor  %xmm2,%xmm13
-movdqa %xmm11,%xmm1
-paddd %xmm9,%xmm1
-movdqa %xmm1,%xmm2
-pslld $13,%xmm1
-pxor  %xmm1,%xmm7
-psrld $19,%xmm2
-pxor  %xmm2,%xmm7
-movdqa %xmm15,%xmm1
-paddd %xmm13,%xmm1
-movdqa %xmm1,%xmm2
-pslld $18,%xmm1
-pxor  %xmm1,%xmm12
-psrld $14,%xmm2
-pxor  %xmm2,%xmm12
-movdqa 384(%rsp),%xmm1
-movdqa %xmm12,384(%rsp)
-movdqa %xmm9,%xmm2
-paddd %xmm7,%xmm2
-movdqa %xmm2,%xmm12
-pslld $18,%xmm2
-pxor  %xmm2,%xmm0
-psrld $14,%xmm12
-pxor  %xmm12,%xmm0
-movdqa %xmm5,%xmm2
-paddd %xmm1,%xmm2
-movdqa %xmm2,%xmm12
-pslld $7,%xmm2
-pxor  %xmm2,%xmm3
-psrld $25,%xmm12
-pxor  %xmm12,%xmm3
-movdqa 400(%rsp),%xmm2
-movdqa %xmm0,400(%rsp)
-movdqa %xmm6,%xmm0
-paddd %xmm2,%xmm0
-movdqa %xmm0,%xmm12
-pslld $7,%xmm0
-pxor  %xmm0,%xmm4
-psrld $25,%xmm12
-pxor  %xmm12,%xmm4
-movdqa %xmm1,%xmm0
-paddd %xmm3,%xmm0
-movdqa %xmm0,%xmm12
-pslld $9,%xmm0
-pxor  %xmm0,%xmm10
-psrld $23,%xmm12
-pxor  %xmm12,%xmm10
-movdqa %xmm2,%xmm0
-paddd %xmm4,%xmm0
-movdqa %xmm0,%xmm12
-pslld $9,%xmm0
-pxor  %xmm0,%xmm8
-psrld $23,%xmm12
-pxor  %xmm12,%xmm8
-movdqa %xmm3,%xmm0
-paddd %xmm10,%xmm0
-movdqa %xmm0,%xmm12
-pslld $13,%xmm0
-pxor  %xmm0,%xmm5
-psrld $19,%xmm12
-pxor  %xmm12,%xmm5
-movdqa %xmm4,%xmm0
-paddd %xmm8,%xmm0
-movdqa %xmm0,%xmm12
-pslld $13,%xmm0
-pxor  %xmm0,%xmm6
-psrld $19,%xmm12
-pxor  %xmm12,%xmm6
-movdqa %xmm10,%xmm0
-paddd %xmm5,%xmm0
-movdqa %xmm0,%xmm12
-pslld $18,%xmm0
-pxor  %xmm0,%xmm1
-psrld $14,%xmm12
-pxor  %xmm12,%xmm1
-movdqa 384(%rsp),%xmm0
-movdqa %xmm1,384(%rsp)
-movdqa %xmm4,%xmm1
-paddd %xmm0,%xmm1
-movdqa %xmm1,%xmm12
-pslld $7,%xmm1
-pxor  %xmm1,%xmm7
-psrld $25,%xmm12
-pxor  %xmm12,%xmm7
-movdqa %xmm8,%xmm1
-paddd %xmm6,%xmm1
-movdqa %xmm1,%xmm12
-pslld $18,%xmm1
-pxor  %xmm1,%xmm2
-psrld $14,%xmm12
-pxor  %xmm12,%xmm2
-movdqa 400(%rsp),%xmm12
-movdqa %xmm2,400(%rsp)
-movdqa %xmm14,%xmm1
-paddd %xmm12,%xmm1
-movdqa %xmm1,%xmm2
-pslld $7,%xmm1
-pxor  %xmm1,%xmm5
-psrld $25,%xmm2
-pxor  %xmm2,%xmm5
-movdqa %xmm0,%xmm1
-paddd %xmm7,%xmm1
-movdqa %xmm1,%xmm2
-pslld $9,%xmm1
-pxor  %xmm1,%xmm10
-psrld $23,%xmm2
-pxor  %xmm2,%xmm10
-movdqa %xmm12,%xmm1
-paddd %xmm5,%xmm1
-movdqa %xmm1,%xmm2
-pslld $9,%xmm1
-pxor  %xmm1,%xmm8
-psrld $23,%xmm2
-pxor  %xmm2,%xmm8
-movdqa %xmm7,%xmm1
-paddd %xmm10,%xmm1
-movdqa %xmm1,%xmm2
-pslld $13,%xmm1
-pxor  %xmm1,%xmm4
-psrld $19,%xmm2
-pxor  %xmm2,%xmm4
-movdqa %xmm5,%xmm1
-paddd %xmm8,%xmm1
-movdqa %xmm1,%xmm2
-pslld $13,%xmm1
-pxor  %xmm1,%xmm14
-psrld $19,%xmm2
-pxor  %xmm2,%xmm14
-movdqa %xmm10,%xmm1
-paddd %xmm4,%xmm1
-movdqa %xmm1,%xmm2
-pslld $18,%xmm1
-pxor  %xmm1,%xmm0
-psrld $14,%xmm2
-pxor  %xmm2,%xmm0
-movdqa 384(%rsp),%xmm1
-movdqa %xmm0,384(%rsp)
-movdqa %xmm8,%xmm0
-paddd %xmm14,%xmm0
-movdqa %xmm0,%xmm2
-pslld $18,%xmm0
-pxor  %xmm0,%xmm12
-psrld $14,%xmm2
-pxor  %xmm2,%xmm12
-movdqa %xmm11,%xmm0
-paddd %xmm1,%xmm0
-movdqa %xmm0,%xmm2
-pslld $7,%xmm0
-pxor  %xmm0,%xmm6
-psrld $25,%xmm2
-pxor  %xmm2,%xmm6
-movdqa 400(%rsp),%xmm2
-movdqa %xmm12,400(%rsp)
-movdqa %xmm3,%xmm0
-paddd %xmm2,%xmm0
-movdqa %xmm0,%xmm12
-pslld $7,%xmm0
-pxor  %xmm0,%xmm13
-psrld $25,%xmm12
-pxor  %xmm12,%xmm13
-movdqa %xmm1,%xmm0
-paddd %xmm6,%xmm0
-movdqa %xmm0,%xmm12
-pslld $9,%xmm0
-pxor  %xmm0,%xmm15
-psrld $23,%xmm12
-pxor  %xmm12,%xmm15
-movdqa %xmm2,%xmm0
-paddd %xmm13,%xmm0
-movdqa %xmm0,%xmm12
-pslld $9,%xmm0
-pxor  %xmm0,%xmm9
-psrld $23,%xmm12
-pxor  %xmm12,%xmm9
-movdqa %xmm6,%xmm0
-paddd %xmm15,%xmm0
-movdqa %xmm0,%xmm12
-pslld $13,%xmm0
-pxor  %xmm0,%xmm11
-psrld $19,%xmm12
-pxor  %xmm12,%xmm11
-movdqa %xmm13,%xmm0
-paddd %xmm9,%xmm0
-movdqa %xmm0,%xmm12
-pslld $13,%xmm0
-pxor  %xmm0,%xmm3
-psrld $19,%xmm12
-pxor  %xmm12,%xmm3
-movdqa %xmm15,%xmm0
-paddd %xmm11,%xmm0
-movdqa %xmm0,%xmm12
-pslld $18,%xmm0
-pxor  %xmm0,%xmm1
-psrld $14,%xmm12
-pxor  %xmm12,%xmm1
-movdqa %xmm9,%xmm0
-paddd %xmm3,%xmm0
-movdqa %xmm0,%xmm12
-pslld $18,%xmm0
-pxor  %xmm0,%xmm2
-psrld $14,%xmm12
-pxor  %xmm12,%xmm2
-movdqa 384(%rsp),%xmm12
-movdqa 400(%rsp),%xmm0
-sub  $2,%rdx
-ja ._mainloop1
-
-paddd 176(%rsp),%xmm12
-paddd 240(%rsp),%xmm7
-paddd 288(%rsp),%xmm10
-paddd 336(%rsp),%xmm4
-movd   %xmm12,%rdx
-movd   %xmm7,%rcx
-movd   %xmm10,%r8
-movd   %xmm4,%r9
-pshufd $0x39,%xmm12,%xmm12
-pshufd $0x39,%xmm7,%xmm7
-pshufd $0x39,%xmm10,%xmm10
-pshufd $0x39,%xmm4,%xmm4
-xorl 0(%rsi),%edx
-xorl 4(%rsi),%ecx
-xorl 8(%rsi),%r8d
-xorl 12(%rsi),%r9d
-movl   %edx,0(%rdi)
-movl   %ecx,4(%rdi)
-movl   %r8d,8(%rdi)
-movl   %r9d,12(%rdi)
-movd   %xmm12,%rdx
-movd   %xmm7,%rcx
-movd   %xmm10,%r8
-movd   %xmm4,%r9
-pshufd $0x39,%xmm12,%xmm12
-pshufd $0x39,%xmm7,%xmm7
-pshufd $0x39,%xmm10,%xmm10
-pshufd $0x39,%xmm4,%xmm4
-xorl 64(%rsi),%edx
-xorl 68(%rsi),%ecx
-xorl 72(%rsi),%r8d
-xorl 76(%rsi),%r9d
-movl   %edx,64(%rdi)
-movl   %ecx,68(%rdi)
-movl   %r8d,72(%rdi)
-movl   %r9d,76(%rdi)
-movd   %xmm12,%rdx
-movd   %xmm7,%rcx
-movd   %xmm10,%r8
-movd   %xmm4,%r9
-pshufd $0x39,%xmm12,%xmm12
-pshufd $0x39,%xmm7,%xmm7
-pshufd $0x39,%xmm10,%xmm10
-pshufd $0x39,%xmm4,%xmm4
-xorl 128(%rsi),%edx
-xorl 132(%rsi),%ecx
-xorl 136(%rsi),%r8d
-xorl 140(%rsi),%r9d
-movl   %edx,128(%rdi)
-movl   %ecx,132(%rdi)
-movl   %r8d,136(%rdi)
-movl   %r9d,140(%rdi)
-movd   %xmm12,%rdx
-movd   %xmm7,%rcx
-movd   %xmm10,%r8
-movd   %xmm4,%r9
-xorl 192(%rsi),%edx
-xorl 196(%rsi),%ecx
-xorl 200(%rsi),%r8d
-xorl 204(%rsi),%r9d
-movl   %edx,192(%rdi)
-movl   %ecx,196(%rdi)
-movl   %r8d,200(%rdi)
-movl   %r9d,204(%rdi)
-paddd 304(%rsp),%xmm14
-paddd 128(%rsp),%xmm0
-paddd 192(%rsp),%xmm5
-paddd 256(%rsp),%xmm8
-movd   %xmm14,%rdx
-movd   %xmm0,%rcx
-movd   %xmm5,%r8
-movd   %xmm8,%r9
-pshufd $0x39,%xmm14,%xmm14
-pshufd $0x39,%xmm0,%xmm0
-pshufd $0x39,%xmm5,%xmm5
-pshufd $0x39,%xmm8,%xmm8
-xorl 16(%rsi),%edx
-xorl 20(%rsi),%ecx
-xorl 24(%rsi),%r8d
-xorl 28(%rsi),%r9d
-movl   %edx,16(%rdi)
-movl   %ecx,20(%rdi)
-movl   %r8d,24(%rdi)
-movl   %r9d,28(%rdi)
-movd   %xmm14,%rdx
-movd   %xmm0,%rcx
-movd   %xmm5,%r8
-movd   %xmm8,%r9
-pshufd $0x39,%xmm14,%xmm14
-pshufd $0x39,%xmm0,%xmm0
-pshufd $0x39,%xmm5,%xmm5
-pshufd $0x39,%xmm8,%xmm8
-xorl 80(%rsi),%edx
-xorl 84(%rsi),%ecx
-xorl 88(%rsi),%r8d
-xorl 92(%rsi),%r9d
-movl   %edx,80(%rdi)
-movl   %ecx,84(%rdi)
-movl   %r8d,88(%rdi)
-movl   %r9d,92(%rdi)
-movd   %xmm14,%rdx
-movd   %xmm0,%rcx
-movd   %xmm5,%r8
-movd   %xmm8,%r9
-pshufd $0x39,%xmm14,%xmm14
-pshufd $0x39,%xmm0,%xmm0
-pshufd $0x39,%xmm5,%xmm5
-pshufd $0x39,%xmm8,%xmm8
-xorl 144(%rsi),%edx
-xorl 148(%rsi),%ecx
-xorl 152(%rsi),%r8d
-xorl 156(%rsi),%r9d
-movl   %edx,144(%rdi)
-movl   %ecx,148(%rdi)
-movl   %r8d,152(%rdi)
-movl   %r9d,156(%rdi)
-movd   %xmm14,%rdx
-movd   %xmm0,%rcx
-movd   %xmm5,%r8
-movd   %xmm8,%r9
-xorl 208(%rsi),%edx
-xorl 212(%rsi),%ecx
-xorl 216(%rsi),%r8d
-xorl 220(%rsi),%r9d
-movl   %edx,208(%rdi)
-movl   %ecx,212(%rdi)
-movl   %r8d,216(%rdi)
-movl   %r9d,220(%rdi)
-paddd 352(%rsp),%xmm15
-paddd 368(%rsp),%xmm11
-paddd 144(%rsp),%xmm1
-paddd 208(%rsp),%xmm6
-movd   %xmm15,%rdx
-movd   %xmm11,%rcx
-movd   %xmm1,%r8
-movd   %xmm6,%r9
-pshufd $0x39,%xmm15,%xmm15
-pshufd $0x39,%xmm11,%xmm11
-pshufd $0x39,%xmm1,%xmm1
-pshufd $0x39,%xmm6,%xmm6
-xorl 32(%rsi),%edx
-xorl 36(%rsi),%ecx
-xorl 40(%rsi),%r8d
-xorl 44(%rsi),%r9d
-movl   %edx,32(%rdi)
-movl   %ecx,36(%rdi)
-movl   %r8d,40(%rdi)
-movl   %r9d,44(%rdi)
-movd   %xmm15,%rdx
-movd   %xmm11,%rcx
-movd   %xmm1,%r8
-movd   %xmm6,%r9
-pshufd $0x39,%xmm15,%xmm15
-pshufd $0x39,%xmm11,%xmm11
-pshufd $0x39,%xmm1,%xmm1
-pshufd $0x39,%xmm6,%xmm6
-xorl 96(%rsi),%edx
-xorl 100(%rsi),%ecx
-xorl 104(%rsi),%r8d
-xorl 108(%rsi),%r9d
-movl   %edx,96(%rdi)
-movl   %ecx,100(%rdi)
-movl   %r8d,104(%rdi)
-movl   %r9d,108(%rdi)
-movd   %xmm15,%rdx
-movd   %xmm11,%rcx
-movd   %xmm1,%r8
-movd   %xmm6,%r9
-pshufd $0x39,%xmm15,%xmm15
-pshufd $0x39,%xmm11,%xmm11
-pshufd $0x39,%xmm1,%xmm1
-pshufd $0x39,%xmm6,%xmm6
-xorl 160(%rsi),%edx
-xorl 164(%rsi),%ecx
-xorl 168(%rsi),%r8d
-xorl 172(%rsi),%r9d
-movl   %edx,160(%rdi)
-movl   %ecx,164(%rdi)
-movl   %r8d,168(%rdi)
-movl   %r9d,172(%rdi)
-movd   %xmm15,%rdx
-movd   %xmm11,%rcx
-movd   %xmm1,%r8
-movd   %xmm6,%r9
-xorl 224(%rsi),%edx
-xorl 228(%rsi),%ecx
-xorl 232(%rsi),%r8d
-xorl 236(%rsi),%r9d
-movl   %edx,224(%rdi)
-movl   %ecx,228(%rdi)
-movl   %r8d,232(%rdi)
-movl   %r9d,236(%rdi)
-paddd 224(%rsp),%xmm13
-paddd 272(%rsp),%xmm9
-paddd 320(%rsp),%xmm3
-paddd 160(%rsp),%xmm2
-movd   %xmm13,%rdx
-movd   %xmm9,%rcx
-movd   %xmm3,%r8
-movd   %xmm2,%r9
-pshufd $0x39,%xmm13,%xmm13
-pshufd $0x39,%xmm9,%xmm9
-pshufd $0x39,%xmm3,%xmm3
-pshufd $0x39,%xmm2,%xmm2
-xorl 48(%rsi),%edx
-xorl 52(%rsi),%ecx
-xorl 56(%rsi),%r8d
-xorl 60(%rsi),%r9d
-movl   %edx,48(%rdi)
-movl   %ecx,52(%rdi)
-movl   %r8d,56(%rdi)
-movl   %r9d,60(%rdi)
-movd   %xmm13,%rdx
-movd   %xmm9,%rcx
-movd   %xmm3,%r8
-movd   %xmm2,%r9
-pshufd $0x39,%xmm13,%xmm13
-pshufd $0x39,%xmm9,%xmm9
-pshufd $0x39,%xmm3,%xmm3
-pshufd $0x39,%xmm2,%xmm2
-xorl 112(%rsi),%edx
-xorl 116(%rsi),%ecx
-xorl 120(%rsi),%r8d
-xorl 124(%rsi),%r9d
-movl   %edx,112(%rdi)
-movl   %ecx,116(%rdi)
-movl   %r8d,120(%rdi)
-movl   %r9d,124(%rdi)
-movd   %xmm13,%rdx
-movd   %xmm9,%rcx
-movd   %xmm3,%r8
-movd   %xmm2,%r9
-pshufd $0x39,%xmm13,%xmm13
-pshufd $0x39,%xmm9,%xmm9
-pshufd $0x39,%xmm3,%xmm3
-pshufd $0x39,%xmm2,%xmm2
-xorl 176(%rsi),%edx
-xorl 180(%rsi),%ecx
-xorl 184(%rsi),%r8d
-xorl 188(%rsi),%r9d
-movl   %edx,176(%rdi)
-movl   %ecx,180(%rdi)
-movl   %r8d,184(%rdi)
-movl   %r9d,188(%rdi)
-movd   %xmm13,%rdx
-movd   %xmm9,%rcx
-movd   %xmm3,%r8
-movd   %xmm2,%r9
-xorl 240(%rsi),%edx
-xorl 244(%rsi),%ecx
-xorl 248(%rsi),%r8d
-xorl 252(%rsi),%r9d
-movl   %edx,240(%rdi)
-movl   %ecx,244(%rdi)
-movl   %r8d,248(%rdi)
-movl   %r9d,252(%rdi)
-movq 480(%rsp),%r9
-sub  $256,%r9
-add  $256,%rsi
-add  $256,%rdi
-cmp  $256,%r9
-jae ._bytesatleast256
-
-cmp  $0,%r9
-jbe ._done
-
-._bytesbetween1and255:
-cmp  $64,%r9
-jae ._nocopy
-
-mov  %rdi,%rdx
-leaq 0(%rsp),%rdi
-mov  %r9,%rcx
-rep movsb
-leaq 0(%rsp),%rdi
-leaq 0(%rsp),%rsi
-
-._nocopy:
-movq %r9,480(%rsp)
-movdqa 112(%rsp),%xmm0
-movdqa 64(%rsp),%xmm1
-movdqa 80(%rsp),%xmm2
-movdqa 96(%rsp),%xmm3
-movdqa %xmm1,%xmm4
-mov  $20,%rcx
-
-.p2align 4
-._mainloop2:
-paddd %xmm0,%xmm4
-movdqa %xmm0,%xmm5
-movdqa %xmm4,%xmm6
-pslld $7,%xmm4
-psrld $25,%xmm6
-pxor  %xmm4,%xmm3
-pxor  %xmm6,%xmm3
-paddd %xmm3,%xmm5
-movdqa %xmm3,%xmm4
-movdqa %xmm5,%xmm6
-pslld $9,%xmm5
-psrld $23,%xmm6
-pxor  %xmm5,%xmm2
-pshufd $0x93,%xmm3,%xmm3
-pxor  %xmm6,%xmm2
-paddd %xmm2,%xmm4
-movdqa %xmm2,%xmm5
-movdqa %xmm4,%xmm6
-pslld $13,%xmm4
-psrld $19,%xmm6
-pxor  %xmm4,%xmm1
-pshufd $0x4e,%xmm2,%xmm2
-pxor  %xmm6,%xmm1
-paddd %xmm1,%xmm5
-movdqa %xmm3,%xmm4
-movdqa %xmm5,%xmm6
-pslld $18,%xmm5
-psrld $14,%xmm6
-pxor  %xmm5,%xmm0
-pshufd $0x39,%xmm1,%xmm1
-pxor  %xmm6,%xmm0
-paddd %xmm0,%xmm4
-movdqa %xmm0,%xmm5
-movdqa %xmm4,%xmm6
-pslld $7,%xmm4
-psrld $25,%xmm6
-pxor  %xmm4,%xmm1
-pxor  %xmm6,%xmm1
-paddd %xmm1,%xmm5
-movdqa %xmm1,%xmm4
-movdqa %xmm5,%xmm6
-pslld $9,%xmm5
-psrld $23,%xmm6
-pxor  %xmm5,%xmm2
-pshufd $0x93,%xmm1,%xmm1
-pxor  %xmm6,%xmm2
-paddd %xmm2,%xmm4
-movdqa %xmm2,%xmm5
-movdqa %xmm4,%xmm6
-pslld $13,%xmm4
-psrld $19,%xmm6
-pxor  %xmm4,%xmm3
-pshufd $0x4e,%xmm2,%xmm2
-pxor  %xmm6,%xmm3
-paddd %xmm3,%xmm5
-movdqa %xmm1,%xmm4
-movdqa %xmm5,%xmm6
-pslld $18,%xmm5
-psrld $14,%xmm6
-pxor  %xmm5,%xmm0
-pshufd $0x39,%xmm3,%xmm3
-pxor  %xmm6,%xmm0
-paddd %xmm0,%xmm4
-movdqa %xmm0,%xmm5
-movdqa %xmm4,%xmm6
-pslld $7,%xmm4
-psrld $25,%xmm6
-pxor  %xmm4,%xmm3
-pxor  %xmm6,%xmm3
-paddd %xmm3,%xmm5
-movdqa %xmm3,%xmm4
-movdqa %xmm5,%xmm6
-pslld $9,%xmm5
-psrld $23,%xmm6
-pxor  %xmm5,%xmm2
-pshufd $0x93,%xmm3,%xmm3
-pxor  %xmm6,%xmm2
-paddd %xmm2,%xmm4
-movdqa %xmm2,%xmm5
-movdqa %xmm4,%xmm6
-pslld $13,%xmm4
-psrld $19,%xmm6
-pxor  %xmm4,%xmm1
-pshufd $0x4e,%xmm2,%xmm2
-pxor  %xmm6,%xmm1
-paddd %xmm1,%xmm5
-movdqa %xmm3,%xmm4
-movdqa %xmm5,%xmm6
-pslld $18,%xmm5
-psrld $14,%xmm6
-pxor  %xmm5,%xmm0
-pshufd $0x39,%xmm1,%xmm1
-pxor  %xmm6,%xmm0
-paddd %xmm0,%xmm4
-movdqa %xmm0,%xmm5
-movdqa %xmm4,%xmm6
-pslld $7,%xmm4
-psrld $25,%xmm6
-pxor  %xmm4,%xmm1
-pxor  %xmm6,%xmm1
-paddd %xmm1,%xmm5
-movdqa %xmm1,%xmm4
-movdqa %xmm5,%xmm6
-pslld $9,%xmm5
-psrld $23,%xmm6
-pxor  %xmm5,%xmm2
-pshufd $0x93,%xmm1,%xmm1
-pxor  %xmm6,%xmm2
-paddd %xmm2,%xmm4
-movdqa %xmm2,%xmm5
-movdqa %xmm4,%xmm6
-pslld $13,%xmm4
-psrld $19,%xmm6
-pxor  %xmm4,%xmm3
-pshufd $0x4e,%xmm2,%xmm2
-pxor  %xmm6,%xmm3
-sub  $4,%rcx
-paddd %xmm3,%xmm5
-movdqa %xmm1,%xmm4
-movdqa %xmm5,%xmm6
-pslld $18,%xmm5
-pxor   %xmm7,%xmm7
-psrld $14,%xmm6
-pxor  %xmm5,%xmm0
-pshufd $0x39,%xmm3,%xmm3
-pxor  %xmm6,%xmm0
-ja ._mainloop2
-
-paddd 112(%rsp),%xmm0
-paddd 64(%rsp),%xmm1
-paddd 80(%rsp),%xmm2
-paddd 96(%rsp),%xmm3
-movd   %xmm0,%rcx
-movd   %xmm1,%r8
-movd   %xmm2,%r9
-movd   %xmm3,%rax
-pshufd $0x39,%xmm0,%xmm0
-pshufd $0x39,%xmm1,%xmm1
-pshufd $0x39,%xmm2,%xmm2
-pshufd $0x39,%xmm3,%xmm3
-xorl 0(%rsi),%ecx
-xorl 48(%rsi),%r8d
-xorl 32(%rsi),%r9d
-xorl 16(%rsi),%eax
-movl   %ecx,0(%rdi)
-movl   %r8d,48(%rdi)
-movl   %r9d,32(%rdi)
-movl   %eax,16(%rdi)
-movd   %xmm0,%rcx
-movd   %xmm1,%r8
-movd   %xmm2,%r9
-movd   %xmm3,%rax
-pshufd $0x39,%xmm0,%xmm0
-pshufd $0x39,%xmm1,%xmm1
-pshufd $0x39,%xmm2,%xmm2
-pshufd $0x39,%xmm3,%xmm3
-xorl 20(%rsi),%ecx
-xorl 4(%rsi),%r8d
-xorl 52(%rsi),%r9d
-xorl 36(%rsi),%eax
-movl   %ecx,20(%rdi)
-movl   %r8d,4(%rdi)
-movl   %r9d,52(%rdi)
-movl   %eax,36(%rdi)
-movd   %xmm0,%rcx
-movd   %xmm1,%r8
-movd   %xmm2,%r9
-movd   %xmm3,%rax
-pshufd $0x39,%xmm0,%xmm0
-pshufd $0x39,%xmm1,%xmm1
-pshufd $0x39,%xmm2,%xmm2
-pshufd $0x39,%xmm3,%xmm3
-xorl 40(%rsi),%ecx
-xorl 24(%rsi),%r8d
-xorl 8(%rsi),%r9d
-xorl 56(%rsi),%eax
-movl   %ecx,40(%rdi)
-movl   %r8d,24(%rdi)
-movl   %r9d,8(%rdi)
-movl   %eax,56(%rdi)
-movd   %xmm0,%rcx
-movd   %xmm1,%r8
-movd   %xmm2,%r9
-movd   %xmm3,%rax
-xorl 60(%rsi),%ecx
-xorl 44(%rsi),%r8d
-xorl 28(%rsi),%r9d
-xorl 12(%rsi),%eax
-movl   %ecx,60(%rdi)
-movl   %r8d,44(%rdi)
-movl   %r9d,28(%rdi)
-movl   %eax,12(%rdi)
-movq 480(%rsp),%r9
-movq 472(%rsp),%rcx
-add  $1,%rcx
-mov  %rcx,%r8
-shr  $32,%r8
-movl %ecx,80(%rsp)
-movl %r8d,4+96(%rsp)
-movq %rcx,472(%rsp)
-cmp  $64,%r9
-ja ._bytesatleast65
-jae ._bytesatleast64
-
-mov  %rdi,%rsi
-mov  %rdx,%rdi
-mov  %r9,%rcx
-rep movsb
-
-._bytesatleast64:
-._done:
-movq 416(%rsp),%r11
-movq 424(%rsp),%r12
-movq 432(%rsp),%r13
-movq 440(%rsp),%r14
-movq 448(%rsp),%r15
-movq 456(%rsp),%rbx
-movq 464(%rsp),%rbp
-add %r11,%rsp
-xor %rax,%rax
-mov %rsi,%rdx
-ret
-
-._bytesatleast65:
-sub  $64,%r9
-add  $64,%rdi
-add  $64,%rsi
-jmp ._bytesbetween1and255
-
-#endif
-
-#if defined(__linux__) && defined(__ELF__)
-.section .note.GNU-stack,"",%progbits
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/ref/salsa20_ref.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/ref/salsa20_ref.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/ref/salsa20_ref.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/ref/salsa20_ref.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,120 @@
+/*
+version 20140420
+D. J. Bernstein
+Public domain.
+*/
+
+#include <stdint.h>
+
+#include "crypto_core_salsa20.h"
+#include "crypto_stream_salsa20.h"
+#include "utils.h"
+
+#include "../stream_salsa20.h"
+#include "salsa20_ref.h"
+
+#ifndef HAVE_AMD64_ASM
+
+static int
+stream_ref(unsigned char *c, unsigned long long clen, const unsigned char *n,
+           const unsigned char *k)
+{
+    unsigned char in[16];
+    unsigned char block[64];
+    unsigned char kcopy[32];
+    unsigned int  i;
+    unsigned int  u;
+
+    if (!clen) {
+        return 0;
+    }
+    for (i = 0; i < 32; i++) {
+        kcopy[i] = k[i];
+    }
+    for (i = 0; i < 8; i++) {
+        in[i] = n[i];
+    }
+    for (i = 8; i < 16; i++) {
+        in[i] = 0;
+    }
+    while (clen >= 64) {
+        crypto_core_salsa20(c, in, kcopy, NULL);
+        u = 1;
+        for (i = 8; i < 16; i++) {
+            u += (unsigned int) in[i];
+            in[i] = u;
+            u >>= 8;
+        }
+        clen -= 64;
+        c += 64;
+    }
+    if (clen) {
+        crypto_core_salsa20(block, in, kcopy, NULL);
+        for (i = 0; i < (unsigned int) clen; i++) {
+            c[i] = block[i];
+        }
+    }
+    sodium_memzero(block, sizeof block);
+    sodium_memzero(kcopy, sizeof kcopy);
+
+    return 0;
+}
+
+static int
+stream_ref_xor_ic(unsigned char *c, const unsigned char *m,
+                  unsigned long long mlen, const unsigned char *n, uint64_t ic,
+                  const unsigned char *k)
+{
+    unsigned char in[16];
+    unsigned char block[64];
+    unsigned char kcopy[32];
+    unsigned int  i;
+    unsigned int  u;
+
+    if (!mlen) {
+        return 0;
+    }
+    for (i = 0; i < 32; i++) {
+        kcopy[i] = k[i];
+    }
+    for (i = 0; i < 8; i++) {
+        in[i] = n[i];
+    }
+    for (i = 8; i < 16; i++) {
+        in[i] = (unsigned char) (ic & 0xff);
+        ic >>= 8;
+    }
+    while (mlen >= 64) {
+        crypto_core_salsa20(block, in, kcopy, NULL);
+        for (i = 0; i < 64; i++) {
+            c[i] = m[i] ^ block[i];
+        }
+        u = 1;
+        for (i = 8; i < 16; i++) {
+            u += (unsigned int) in[i];
+            in[i] = u;
+            u >>= 8;
+        }
+        mlen -= 64;
+        c += 64;
+        m += 64;
+    }
+    if (mlen) {
+        crypto_core_salsa20(block, in, kcopy, NULL);
+        for (i = 0; i < (unsigned int) mlen; i++) {
+            c[i] = m[i] ^ block[i];
+        }
+    }
+    sodium_memzero(block, sizeof block);
+    sodium_memzero(kcopy, sizeof kcopy);
+
+    return 0;
+}
+
+struct crypto_stream_salsa20_implementation
+    crypto_stream_salsa20_ref_implementation = {
+        SODIUM_C99(.stream =) stream_ref,
+        SODIUM_C99(.stream_xor_ic =) stream_ref_xor_ic,
+    };
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/ref/salsa20_ref.h libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/ref/salsa20_ref.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/ref/salsa20_ref.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/ref/salsa20_ref.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,8 @@
+
+#include <stdint.h>
+
+#include "../stream_salsa20.h"
+#include "crypto_stream_salsa20.h"
+
+extern struct crypto_stream_salsa20_implementation
+    crypto_stream_salsa20_ref_implementation;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/ref/stream_salsa20_ref.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/ref/stream_salsa20_ref.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/ref/stream_salsa20_ref.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/ref/stream_salsa20_ref.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,55 +0,0 @@
-/*
-version 20140420
-D. J. Bernstein
-Public domain.
-*/
-
-#include "crypto_core_salsa20.h"
-#include "crypto_stream_salsa20.h"
-#include "utils.h"
-
-#ifndef HAVE_AMD64_ASM
-
-int crypto_stream_salsa20(
-        unsigned char *c,unsigned long long clen,
-  const unsigned char *n,
-  const unsigned char *k
-)
-{
-  unsigned char in[16];
-  unsigned char block[64];
-  unsigned char kcopy[32];
-  unsigned int i;
-  unsigned int u;
-
-  if (!clen) return 0;
-
-  for (i = 0;i < 32;++i) kcopy[i] = k[i];
-  for (i = 0;i < 8;++i) in[i] = n[i];
-  for (i = 8;i < 16;++i) in[i] = 0;
-
-  while (clen >= 64) {
-    crypto_core_salsa20(c,in,kcopy,NULL);
-
-    u = 1;
-    for (i = 8;i < 16;++i) {
-      u += (unsigned int) in[i];
-      in[i] = u;
-      u >>= 8;
-    }
-
-    clen -= 64;
-    c += 64;
-  }
-
-  if (clen) {
-    crypto_core_salsa20(block,in,kcopy,NULL);
-    for (i = 0;i < (unsigned int) clen;++i) c[i] = block[i];
-  }
-  sodium_memzero(block, sizeof block);
-  sodium_memzero(kcopy, sizeof kcopy);
-
-  return 0;
-}
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/ref/xor_salsa20_ref.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/ref/xor_salsa20_ref.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/ref/xor_salsa20_ref.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/ref/xor_salsa20_ref.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,63 +0,0 @@
-/*
-version 20140420
-D. J. Bernstein
-Public domain.
-*/
-
-#include <stdint.h>
-
-#include "crypto_core_salsa20.h"
-#include "crypto_stream_salsa20.h"
-#include "utils.h"
-
-#ifndef HAVE_AMD64_ASM
-
-int crypto_stream_salsa20_xor_ic(
-        unsigned char *c,
-  const unsigned char *m,unsigned long long mlen,
-  const unsigned char *n, uint64_t ic,
-  const unsigned char *k
-)
-{
-  unsigned char in[16];
-  unsigned char block[64];
-  unsigned char kcopy[32];
-  unsigned int i;
-  unsigned int u;
-
-  if (!mlen) return 0;
-
-  for (i = 0;i < 32;++i) kcopy[i] = k[i];
-  for (i = 0;i < 8;++i) in[i] = n[i];
-  for (i = 8;i < 16;++i) {
-      in[i] = (unsigned char) (ic & 0xff);
-      ic >>= 8;
-  }
-
-  while (mlen >= 64) {
-    crypto_core_salsa20(block,in,kcopy,NULL);
-    for (i = 0;i < 64;++i) c[i] = m[i] ^ block[i];
-
-    u = 1;
-    for (i = 8;i < 16;++i) {
-      u += (unsigned int) in[i];
-      in[i] = u;
-      u >>= 8;
-    }
-
-    mlen -= 64;
-    c += 64;
-    m += 64;
-  }
-
-  if (mlen) {
-    crypto_core_salsa20(block,in,kcopy,NULL);
-    for (i = 0;i < (unsigned int) mlen;++i) c[i] = m[i] ^ block[i];
-  }
-  sodium_memzero(block, sizeof block);
-  sodium_memzero(kcopy, sizeof kcopy);
-
-  return 0;
-}
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/stream_salsa20_api.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/stream_salsa20_api.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/stream_salsa20_api.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/stream_salsa20_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,19 +0,0 @@
-#include "crypto_stream_salsa20.h"
-
-size_t
-crypto_stream_salsa20_keybytes(void) {
-    return crypto_stream_salsa20_KEYBYTES;
-}
-
-size_t
-crypto_stream_salsa20_noncebytes(void) {
-    return crypto_stream_salsa20_NONCEBYTES;
-}
-
-int
-crypto_stream_salsa20_xor(unsigned char *c, const unsigned char *m,
-                          unsigned long long mlen, const unsigned char *n,
-                          const unsigned char *k)
-{
-    return crypto_stream_salsa20_xor_ic(c, m, mlen, n, 0U, k);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/stream_salsa20.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/stream_salsa20.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/stream_salsa20.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/stream_salsa20.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,93 @@
+#include "crypto_stream_salsa20.h"
+#include "private/common.h"
+#include "randombytes.h"
+#include "runtime.h"
+#include "stream_salsa20.h"
+
+#ifdef HAVE_AMD64_ASM
+# include "xmm6/salsa20_xmm6.h"
+#else
+# include "ref/salsa20_ref.h"
+#endif
+#if !defined(HAVE_AMD64_ASM) && defined(HAVE_EMMINTRIN_H)
+# include "xmm6int/salsa20_xmm6int-sse2.h"
+#endif
+#if defined(HAVE_AVX2INTRIN_H) && defined(HAVE_EMMINTRIN_H) && \
+    defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)
+# include "xmm6int/salsa20_xmm6int-avx2.h"
+#endif
+
+#if HAVE_AMD64_ASM
+static const crypto_stream_salsa20_implementation *implementation =
+    &crypto_stream_salsa20_xmm6_implementation;
+#else
+static const crypto_stream_salsa20_implementation *implementation =
+    &crypto_stream_salsa20_ref_implementation;
+#endif
+
+size_t
+crypto_stream_salsa20_keybytes(void)
+{
+    return crypto_stream_salsa20_KEYBYTES;
+}
+
+size_t
+crypto_stream_salsa20_noncebytes(void)
+{
+    return crypto_stream_salsa20_NONCEBYTES;
+}
+
+int
+crypto_stream_salsa20(unsigned char *c, unsigned long long clen,
+                      const unsigned char *n, const unsigned char *k)
+{
+    return implementation->stream(c, clen, n, k);
+}
+
+int
+crypto_stream_salsa20_xor_ic(unsigned char *c, const unsigned char *m,
+                             unsigned long long mlen,
+                             const unsigned char *n, uint64_t ic,
+                             const unsigned char *k)
+{
+    return implementation->stream_xor_ic(c, m, mlen, n, ic, k);
+}
+
+int
+crypto_stream_salsa20_xor(unsigned char *c, const unsigned char *m,
+                          unsigned long long mlen, const unsigned char *n,
+                          const unsigned char *k)
+{
+    return implementation->stream_xor_ic(c, m, mlen, n, 0U, k);
+}
+
+void
+crypto_stream_salsa20_keygen(unsigned char k[crypto_stream_salsa20_KEYBYTES])
+{
+    randombytes_buf(k, crypto_stream_salsa20_KEYBYTES);
+}
+
+int
+_crypto_stream_salsa20_pick_best_implementation(void)
+{
+#ifdef HAVE_AMD64_ASM
+    implementation = &crypto_stream_salsa20_xmm6_implementation;
+#else
+    implementation = &crypto_stream_salsa20_ref_implementation;
+#endif
+
+#if defined(HAVE_AVX2INTRIN_H) && defined(HAVE_EMMINTRIN_H) && \
+    defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)
+    if (sodium_runtime_has_avx2()) {
+        implementation = &crypto_stream_salsa20_xmm6int_avx2_implementation;
+        return 0;
+    }
+#endif
+#if !defined(HAVE_AMD64_ASM) && defined(HAVE_EMMINTRIN_H)
+    if (sodium_runtime_has_sse2()) {
+        implementation = &crypto_stream_salsa20_xmm6int_sse2_implementation;
+        return 0;
+    }
+#endif
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/stream_salsa20.h libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/stream_salsa20.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/stream_salsa20.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/stream_salsa20.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,16 @@
+
+#ifndef stream_salsa20_H
+#define stream_salsa20_H
+
+#include <stdint.h>
+
+typedef struct crypto_stream_salsa20_implementation {
+    int (*stream)(unsigned char *c, unsigned long long clen,
+                  const unsigned char *n, const unsigned char *k);
+    int (*stream_xor_ic)(unsigned char *c, const unsigned char *m,
+                         unsigned long long mlen,
+                         const unsigned char *n, uint64_t ic,
+                         const unsigned char *k);
+} crypto_stream_salsa20_implementation;
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,960 @@
+#ifdef HAVE_AMD64_ASM
+
+.text
+.p2align 5
+
+#ifdef ASM_HIDE_SYMBOL
+ASM_HIDE_SYMBOL stream_salsa20_xmm6
+ASM_HIDE_SYMBOL _stream_salsa20_xmm6
+#endif
+.globl  stream_salsa20_xmm6
+.globl _stream_salsa20_xmm6
+#ifdef __ELF__
+.type  stream_salsa20_xmm6, @function
+.type _stream_salsa20_xmm6, @function
+#endif
+stream_salsa20_xmm6:
+_stream_salsa20_xmm6:
+mov %rsp,%r11
+and $31,%r11
+add $512,%r11
+sub %r11,%rsp
+movq %r11,416(%rsp)
+movq %r12,424(%rsp)
+movq %r13,432(%rsp)
+movq %r14,440(%rsp)
+movq %r15,448(%rsp)
+movq %rbx,456(%rsp)
+movq %rbp,464(%rsp)
+mov  %rsi,%r9
+mov  %rdi,%rdi
+mov  %rdi,%rsi
+mov  %rdx,%rdx
+mov  %rcx,%r10
+cmp  $0,%r9
+jbe ._done
+mov  $0,%rax
+mov  %r9,%rcx
+rep stosb
+sub  %r9,%rdi
+movq $0,472(%rsp)
+jmp ._start
+
+.text
+.p2align 5
+
+#ifdef ASM_HIDE_SYMBOL
+ASM_HIDE_SYMBOL stream_salsa20_xmm6_xor_ic
+ASM_HIDE_SYMBOL _stream_salsa20_xmm6_xor_ic
+#endif
+.globl  stream_salsa20_xmm6_xor_ic
+.globl _stream_salsa20_xmm6_xor_ic
+#ifdef __ELF__
+.type  stream_salsa20_xmm6_xor_ic, @function
+.type _stream_salsa20_xmm6_xor_ic, @function
+#endif
+stream_salsa20_xmm6_xor_ic:
+_stream_salsa20_xmm6_xor_ic:
+
+mov %rsp,%r11
+and $31,%r11
+add $512,%r11
+sub %r11,%rsp
+movq %r11,416(%rsp)
+movq %r12,424(%rsp)
+movq %r13,432(%rsp)
+movq %r14,440(%rsp)
+movq %r15,448(%rsp)
+movq %rbx,456(%rsp)
+movq %rbp,464(%rsp)
+mov  %rdi,%rdi
+mov  %rsi,%rsi
+mov  %r9,%r10
+movq %r8,472(%rsp)
+mov  %rdx,%r9
+mov  %rcx,%rdx
+cmp  $0,%r9
+jbe ._done
+
+._start:
+movl   20(%r10),%ecx
+movl   0(%r10),%r8d
+movl   0(%rdx),%eax
+movl   16(%r10),%r11d
+movl %ecx,64(%rsp)
+movl %r8d,4+64(%rsp)
+movl %eax,8+64(%rsp)
+movl %r11d,12+64(%rsp)
+movl   24(%r10),%r8d
+movl   4(%r10),%eax
+movl   4(%rdx),%edx
+movq 472(%rsp),%rcx
+movl %ecx,80(%rsp)
+movl %r8d,4+80(%rsp)
+movl %eax,8+80(%rsp)
+movl %edx,12+80(%rsp)
+movl   12(%r10),%edx
+shr  $32,%rcx
+movl   28(%r10),%r8d
+movl   8(%r10),%eax
+movl %edx,96(%rsp)
+movl %ecx,4+96(%rsp)
+movl %r8d,8+96(%rsp)
+movl %eax,12+96(%rsp)
+mov  $1634760805,%rdx
+mov  $857760878,%rcx
+mov  $2036477234,%r8
+mov  $1797285236,%rax
+movl %edx,112(%rsp)
+movl %ecx,4+112(%rsp)
+movl %r8d,8+112(%rsp)
+movl %eax,12+112(%rsp)
+cmp  $256,%r9
+jb ._bytesbetween1and255
+movdqa 112(%rsp),%xmm0
+pshufd $0x55,%xmm0,%xmm1
+pshufd $0xaa,%xmm0,%xmm2
+pshufd $0xff,%xmm0,%xmm3
+pshufd $0x00,%xmm0,%xmm0
+movdqa %xmm1,128(%rsp)
+movdqa %xmm2,144(%rsp)
+movdqa %xmm3,160(%rsp)
+movdqa %xmm0,176(%rsp)
+movdqa 64(%rsp),%xmm0
+pshufd $0xaa,%xmm0,%xmm1
+pshufd $0xff,%xmm0,%xmm2
+pshufd $0x00,%xmm0,%xmm3
+pshufd $0x55,%xmm0,%xmm0
+movdqa %xmm1,192(%rsp)
+movdqa %xmm2,208(%rsp)
+movdqa %xmm3,224(%rsp)
+movdqa %xmm0,240(%rsp)
+movdqa 80(%rsp),%xmm0
+pshufd $0xff,%xmm0,%xmm1
+pshufd $0x55,%xmm0,%xmm2
+pshufd $0xaa,%xmm0,%xmm0
+movdqa %xmm1,256(%rsp)
+movdqa %xmm2,272(%rsp)
+movdqa %xmm0,288(%rsp)
+movdqa 96(%rsp),%xmm0
+pshufd $0x00,%xmm0,%xmm1
+pshufd $0xaa,%xmm0,%xmm2
+pshufd $0xff,%xmm0,%xmm0
+movdqa %xmm1,304(%rsp)
+movdqa %xmm2,320(%rsp)
+movdqa %xmm0,336(%rsp)
+
+.p2align 4
+._bytesatleast256:
+movq 472(%rsp),%rdx
+mov  %rdx,%rcx
+shr  $32,%rcx
+movl %edx,352(%rsp)
+movl %ecx,368(%rsp)
+add  $1,%rdx
+mov  %rdx,%rcx
+shr  $32,%rcx
+movl %edx,4+352(%rsp)
+movl %ecx,4+368(%rsp)
+add  $1,%rdx
+mov  %rdx,%rcx
+shr  $32,%rcx
+movl %edx,8+352(%rsp)
+movl %ecx,8+368(%rsp)
+add  $1,%rdx
+mov  %rdx,%rcx
+shr  $32,%rcx
+movl %edx,12+352(%rsp)
+movl %ecx,12+368(%rsp)
+add  $1,%rdx
+mov  %rdx,%rcx
+shr  $32,%rcx
+movl %edx,80(%rsp)
+movl %ecx,4+96(%rsp)
+movq %rdx,472(%rsp)
+movq %r9,480(%rsp)
+mov  $20,%rdx
+movdqa 128(%rsp),%xmm0
+movdqa 144(%rsp),%xmm1
+movdqa 160(%rsp),%xmm2
+movdqa 320(%rsp),%xmm3
+movdqa 336(%rsp),%xmm4
+movdqa 192(%rsp),%xmm5
+movdqa 208(%rsp),%xmm6
+movdqa 240(%rsp),%xmm7
+movdqa 256(%rsp),%xmm8
+movdqa 272(%rsp),%xmm9
+movdqa 288(%rsp),%xmm10
+movdqa 368(%rsp),%xmm11
+movdqa 176(%rsp),%xmm12
+movdqa 224(%rsp),%xmm13
+movdqa 304(%rsp),%xmm14
+movdqa 352(%rsp),%xmm15
+
+.p2align 4
+._mainloop1:
+movdqa %xmm1,384(%rsp)
+movdqa %xmm2,400(%rsp)
+movdqa %xmm13,%xmm1
+paddd %xmm12,%xmm1
+movdqa %xmm1,%xmm2
+pslld $7,%xmm1
+pxor  %xmm1,%xmm14
+psrld $25,%xmm2
+pxor  %xmm2,%xmm14
+movdqa %xmm7,%xmm1
+paddd %xmm0,%xmm1
+movdqa %xmm1,%xmm2
+pslld $7,%xmm1
+pxor  %xmm1,%xmm11
+psrld $25,%xmm2
+pxor  %xmm2,%xmm11
+movdqa %xmm12,%xmm1
+paddd %xmm14,%xmm1
+movdqa %xmm1,%xmm2
+pslld $9,%xmm1
+pxor  %xmm1,%xmm15
+psrld $23,%xmm2
+pxor  %xmm2,%xmm15
+movdqa %xmm0,%xmm1
+paddd %xmm11,%xmm1
+movdqa %xmm1,%xmm2
+pslld $9,%xmm1
+pxor  %xmm1,%xmm9
+psrld $23,%xmm2
+pxor  %xmm2,%xmm9
+movdqa %xmm14,%xmm1
+paddd %xmm15,%xmm1
+movdqa %xmm1,%xmm2
+pslld $13,%xmm1
+pxor  %xmm1,%xmm13
+psrld $19,%xmm2
+pxor  %xmm2,%xmm13
+movdqa %xmm11,%xmm1
+paddd %xmm9,%xmm1
+movdqa %xmm1,%xmm2
+pslld $13,%xmm1
+pxor  %xmm1,%xmm7
+psrld $19,%xmm2
+pxor  %xmm2,%xmm7
+movdqa %xmm15,%xmm1
+paddd %xmm13,%xmm1
+movdqa %xmm1,%xmm2
+pslld $18,%xmm1
+pxor  %xmm1,%xmm12
+psrld $14,%xmm2
+pxor  %xmm2,%xmm12
+movdqa 384(%rsp),%xmm1
+movdqa %xmm12,384(%rsp)
+movdqa %xmm9,%xmm2
+paddd %xmm7,%xmm2
+movdqa %xmm2,%xmm12
+pslld $18,%xmm2
+pxor  %xmm2,%xmm0
+psrld $14,%xmm12
+pxor  %xmm12,%xmm0
+movdqa %xmm5,%xmm2
+paddd %xmm1,%xmm2
+movdqa %xmm2,%xmm12
+pslld $7,%xmm2
+pxor  %xmm2,%xmm3
+psrld $25,%xmm12
+pxor  %xmm12,%xmm3
+movdqa 400(%rsp),%xmm2
+movdqa %xmm0,400(%rsp)
+movdqa %xmm6,%xmm0
+paddd %xmm2,%xmm0
+movdqa %xmm0,%xmm12
+pslld $7,%xmm0
+pxor  %xmm0,%xmm4
+psrld $25,%xmm12
+pxor  %xmm12,%xmm4
+movdqa %xmm1,%xmm0
+paddd %xmm3,%xmm0
+movdqa %xmm0,%xmm12
+pslld $9,%xmm0
+pxor  %xmm0,%xmm10
+psrld $23,%xmm12
+pxor  %xmm12,%xmm10
+movdqa %xmm2,%xmm0
+paddd %xmm4,%xmm0
+movdqa %xmm0,%xmm12
+pslld $9,%xmm0
+pxor  %xmm0,%xmm8
+psrld $23,%xmm12
+pxor  %xmm12,%xmm8
+movdqa %xmm3,%xmm0
+paddd %xmm10,%xmm0
+movdqa %xmm0,%xmm12
+pslld $13,%xmm0
+pxor  %xmm0,%xmm5
+psrld $19,%xmm12
+pxor  %xmm12,%xmm5
+movdqa %xmm4,%xmm0
+paddd %xmm8,%xmm0
+movdqa %xmm0,%xmm12
+pslld $13,%xmm0
+pxor  %xmm0,%xmm6
+psrld $19,%xmm12
+pxor  %xmm12,%xmm6
+movdqa %xmm10,%xmm0
+paddd %xmm5,%xmm0
+movdqa %xmm0,%xmm12
+pslld $18,%xmm0
+pxor  %xmm0,%xmm1
+psrld $14,%xmm12
+pxor  %xmm12,%xmm1
+movdqa 384(%rsp),%xmm0
+movdqa %xmm1,384(%rsp)
+movdqa %xmm4,%xmm1
+paddd %xmm0,%xmm1
+movdqa %xmm1,%xmm12
+pslld $7,%xmm1
+pxor  %xmm1,%xmm7
+psrld $25,%xmm12
+pxor  %xmm12,%xmm7
+movdqa %xmm8,%xmm1
+paddd %xmm6,%xmm1
+movdqa %xmm1,%xmm12
+pslld $18,%xmm1
+pxor  %xmm1,%xmm2
+psrld $14,%xmm12
+pxor  %xmm12,%xmm2
+movdqa 400(%rsp),%xmm12
+movdqa %xmm2,400(%rsp)
+movdqa %xmm14,%xmm1
+paddd %xmm12,%xmm1
+movdqa %xmm1,%xmm2
+pslld $7,%xmm1
+pxor  %xmm1,%xmm5
+psrld $25,%xmm2
+pxor  %xmm2,%xmm5
+movdqa %xmm0,%xmm1
+paddd %xmm7,%xmm1
+movdqa %xmm1,%xmm2
+pslld $9,%xmm1
+pxor  %xmm1,%xmm10
+psrld $23,%xmm2
+pxor  %xmm2,%xmm10
+movdqa %xmm12,%xmm1
+paddd %xmm5,%xmm1
+movdqa %xmm1,%xmm2
+pslld $9,%xmm1
+pxor  %xmm1,%xmm8
+psrld $23,%xmm2
+pxor  %xmm2,%xmm8
+movdqa %xmm7,%xmm1
+paddd %xmm10,%xmm1
+movdqa %xmm1,%xmm2
+pslld $13,%xmm1
+pxor  %xmm1,%xmm4
+psrld $19,%xmm2
+pxor  %xmm2,%xmm4
+movdqa %xmm5,%xmm1
+paddd %xmm8,%xmm1
+movdqa %xmm1,%xmm2
+pslld $13,%xmm1
+pxor  %xmm1,%xmm14
+psrld $19,%xmm2
+pxor  %xmm2,%xmm14
+movdqa %xmm10,%xmm1
+paddd %xmm4,%xmm1
+movdqa %xmm1,%xmm2
+pslld $18,%xmm1
+pxor  %xmm1,%xmm0
+psrld $14,%xmm2
+pxor  %xmm2,%xmm0
+movdqa 384(%rsp),%xmm1
+movdqa %xmm0,384(%rsp)
+movdqa %xmm8,%xmm0
+paddd %xmm14,%xmm0
+movdqa %xmm0,%xmm2
+pslld $18,%xmm0
+pxor  %xmm0,%xmm12
+psrld $14,%xmm2
+pxor  %xmm2,%xmm12
+movdqa %xmm11,%xmm0
+paddd %xmm1,%xmm0
+movdqa %xmm0,%xmm2
+pslld $7,%xmm0
+pxor  %xmm0,%xmm6
+psrld $25,%xmm2
+pxor  %xmm2,%xmm6
+movdqa 400(%rsp),%xmm2
+movdqa %xmm12,400(%rsp)
+movdqa %xmm3,%xmm0
+paddd %xmm2,%xmm0
+movdqa %xmm0,%xmm12
+pslld $7,%xmm0
+pxor  %xmm0,%xmm13
+psrld $25,%xmm12
+pxor  %xmm12,%xmm13
+movdqa %xmm1,%xmm0
+paddd %xmm6,%xmm0
+movdqa %xmm0,%xmm12
+pslld $9,%xmm0
+pxor  %xmm0,%xmm15
+psrld $23,%xmm12
+pxor  %xmm12,%xmm15
+movdqa %xmm2,%xmm0
+paddd %xmm13,%xmm0
+movdqa %xmm0,%xmm12
+pslld $9,%xmm0
+pxor  %xmm0,%xmm9
+psrld $23,%xmm12
+pxor  %xmm12,%xmm9
+movdqa %xmm6,%xmm0
+paddd %xmm15,%xmm0
+movdqa %xmm0,%xmm12
+pslld $13,%xmm0
+pxor  %xmm0,%xmm11
+psrld $19,%xmm12
+pxor  %xmm12,%xmm11
+movdqa %xmm13,%xmm0
+paddd %xmm9,%xmm0
+movdqa %xmm0,%xmm12
+pslld $13,%xmm0
+pxor  %xmm0,%xmm3
+psrld $19,%xmm12
+pxor  %xmm12,%xmm3
+movdqa %xmm15,%xmm0
+paddd %xmm11,%xmm0
+movdqa %xmm0,%xmm12
+pslld $18,%xmm0
+pxor  %xmm0,%xmm1
+psrld $14,%xmm12
+pxor  %xmm12,%xmm1
+movdqa %xmm9,%xmm0
+paddd %xmm3,%xmm0
+movdqa %xmm0,%xmm12
+pslld $18,%xmm0
+pxor  %xmm0,%xmm2
+psrld $14,%xmm12
+pxor  %xmm12,%xmm2
+movdqa 384(%rsp),%xmm12
+movdqa 400(%rsp),%xmm0
+sub  $2,%rdx
+ja ._mainloop1
+
+paddd 176(%rsp),%xmm12
+paddd 240(%rsp),%xmm7
+paddd 288(%rsp),%xmm10
+paddd 336(%rsp),%xmm4
+movd   %xmm12,%rdx
+movd   %xmm7,%rcx
+movd   %xmm10,%r8
+movd   %xmm4,%r9
+pshufd $0x39,%xmm12,%xmm12
+pshufd $0x39,%xmm7,%xmm7
+pshufd $0x39,%xmm10,%xmm10
+pshufd $0x39,%xmm4,%xmm4
+xorl 0(%rsi),%edx
+xorl 4(%rsi),%ecx
+xorl 8(%rsi),%r8d
+xorl 12(%rsi),%r9d
+movl   %edx,0(%rdi)
+movl   %ecx,4(%rdi)
+movl   %r8d,8(%rdi)
+movl   %r9d,12(%rdi)
+movd   %xmm12,%rdx
+movd   %xmm7,%rcx
+movd   %xmm10,%r8
+movd   %xmm4,%r9
+pshufd $0x39,%xmm12,%xmm12
+pshufd $0x39,%xmm7,%xmm7
+pshufd $0x39,%xmm10,%xmm10
+pshufd $0x39,%xmm4,%xmm4
+xorl 64(%rsi),%edx
+xorl 68(%rsi),%ecx
+xorl 72(%rsi),%r8d
+xorl 76(%rsi),%r9d
+movl   %edx,64(%rdi)
+movl   %ecx,68(%rdi)
+movl   %r8d,72(%rdi)
+movl   %r9d,76(%rdi)
+movd   %xmm12,%rdx
+movd   %xmm7,%rcx
+movd   %xmm10,%r8
+movd   %xmm4,%r9
+pshufd $0x39,%xmm12,%xmm12
+pshufd $0x39,%xmm7,%xmm7
+pshufd $0x39,%xmm10,%xmm10
+pshufd $0x39,%xmm4,%xmm4
+xorl 128(%rsi),%edx
+xorl 132(%rsi),%ecx
+xorl 136(%rsi),%r8d
+xorl 140(%rsi),%r9d
+movl   %edx,128(%rdi)
+movl   %ecx,132(%rdi)
+movl   %r8d,136(%rdi)
+movl   %r9d,140(%rdi)
+movd   %xmm12,%rdx
+movd   %xmm7,%rcx
+movd   %xmm10,%r8
+movd   %xmm4,%r9
+xorl 192(%rsi),%edx
+xorl 196(%rsi),%ecx
+xorl 200(%rsi),%r8d
+xorl 204(%rsi),%r9d
+movl   %edx,192(%rdi)
+movl   %ecx,196(%rdi)
+movl   %r8d,200(%rdi)
+movl   %r9d,204(%rdi)
+paddd 304(%rsp),%xmm14
+paddd 128(%rsp),%xmm0
+paddd 192(%rsp),%xmm5
+paddd 256(%rsp),%xmm8
+movd   %xmm14,%rdx
+movd   %xmm0,%rcx
+movd   %xmm5,%r8
+movd   %xmm8,%r9
+pshufd $0x39,%xmm14,%xmm14
+pshufd $0x39,%xmm0,%xmm0
+pshufd $0x39,%xmm5,%xmm5
+pshufd $0x39,%xmm8,%xmm8
+xorl 16(%rsi),%edx
+xorl 20(%rsi),%ecx
+xorl 24(%rsi),%r8d
+xorl 28(%rsi),%r9d
+movl   %edx,16(%rdi)
+movl   %ecx,20(%rdi)
+movl   %r8d,24(%rdi)
+movl   %r9d,28(%rdi)
+movd   %xmm14,%rdx
+movd   %xmm0,%rcx
+movd   %xmm5,%r8
+movd   %xmm8,%r9
+pshufd $0x39,%xmm14,%xmm14
+pshufd $0x39,%xmm0,%xmm0
+pshufd $0x39,%xmm5,%xmm5
+pshufd $0x39,%xmm8,%xmm8
+xorl 80(%rsi),%edx
+xorl 84(%rsi),%ecx
+xorl 88(%rsi),%r8d
+xorl 92(%rsi),%r9d
+movl   %edx,80(%rdi)
+movl   %ecx,84(%rdi)
+movl   %r8d,88(%rdi)
+movl   %r9d,92(%rdi)
+movd   %xmm14,%rdx
+movd   %xmm0,%rcx
+movd   %xmm5,%r8
+movd   %xmm8,%r9
+pshufd $0x39,%xmm14,%xmm14
+pshufd $0x39,%xmm0,%xmm0
+pshufd $0x39,%xmm5,%xmm5
+pshufd $0x39,%xmm8,%xmm8
+xorl 144(%rsi),%edx
+xorl 148(%rsi),%ecx
+xorl 152(%rsi),%r8d
+xorl 156(%rsi),%r9d
+movl   %edx,144(%rdi)
+movl   %ecx,148(%rdi)
+movl   %r8d,152(%rdi)
+movl   %r9d,156(%rdi)
+movd   %xmm14,%rdx
+movd   %xmm0,%rcx
+movd   %xmm5,%r8
+movd   %xmm8,%r9
+xorl 208(%rsi),%edx
+xorl 212(%rsi),%ecx
+xorl 216(%rsi),%r8d
+xorl 220(%rsi),%r9d
+movl   %edx,208(%rdi)
+movl   %ecx,212(%rdi)
+movl   %r8d,216(%rdi)
+movl   %r9d,220(%rdi)
+paddd 352(%rsp),%xmm15
+paddd 368(%rsp),%xmm11
+paddd 144(%rsp),%xmm1
+paddd 208(%rsp),%xmm6
+movd   %xmm15,%rdx
+movd   %xmm11,%rcx
+movd   %xmm1,%r8
+movd   %xmm6,%r9
+pshufd $0x39,%xmm15,%xmm15
+pshufd $0x39,%xmm11,%xmm11
+pshufd $0x39,%xmm1,%xmm1
+pshufd $0x39,%xmm6,%xmm6
+xorl 32(%rsi),%edx
+xorl 36(%rsi),%ecx
+xorl 40(%rsi),%r8d
+xorl 44(%rsi),%r9d
+movl   %edx,32(%rdi)
+movl   %ecx,36(%rdi)
+movl   %r8d,40(%rdi)
+movl   %r9d,44(%rdi)
+movd   %xmm15,%rdx
+movd   %xmm11,%rcx
+movd   %xmm1,%r8
+movd   %xmm6,%r9
+pshufd $0x39,%xmm15,%xmm15
+pshufd $0x39,%xmm11,%xmm11
+pshufd $0x39,%xmm1,%xmm1
+pshufd $0x39,%xmm6,%xmm6
+xorl 96(%rsi),%edx
+xorl 100(%rsi),%ecx
+xorl 104(%rsi),%r8d
+xorl 108(%rsi),%r9d
+movl   %edx,96(%rdi)
+movl   %ecx,100(%rdi)
+movl   %r8d,104(%rdi)
+movl   %r9d,108(%rdi)
+movd   %xmm15,%rdx
+movd   %xmm11,%rcx
+movd   %xmm1,%r8
+movd   %xmm6,%r9
+pshufd $0x39,%xmm15,%xmm15
+pshufd $0x39,%xmm11,%xmm11
+pshufd $0x39,%xmm1,%xmm1
+pshufd $0x39,%xmm6,%xmm6
+xorl 160(%rsi),%edx
+xorl 164(%rsi),%ecx
+xorl 168(%rsi),%r8d
+xorl 172(%rsi),%r9d
+movl   %edx,160(%rdi)
+movl   %ecx,164(%rdi)
+movl   %r8d,168(%rdi)
+movl   %r9d,172(%rdi)
+movd   %xmm15,%rdx
+movd   %xmm11,%rcx
+movd   %xmm1,%r8
+movd   %xmm6,%r9
+xorl 224(%rsi),%edx
+xorl 228(%rsi),%ecx
+xorl 232(%rsi),%r8d
+xorl 236(%rsi),%r9d
+movl   %edx,224(%rdi)
+movl   %ecx,228(%rdi)
+movl   %r8d,232(%rdi)
+movl   %r9d,236(%rdi)
+paddd 224(%rsp),%xmm13
+paddd 272(%rsp),%xmm9
+paddd 320(%rsp),%xmm3
+paddd 160(%rsp),%xmm2
+movd   %xmm13,%rdx
+movd   %xmm9,%rcx
+movd   %xmm3,%r8
+movd   %xmm2,%r9
+pshufd $0x39,%xmm13,%xmm13
+pshufd $0x39,%xmm9,%xmm9
+pshufd $0x39,%xmm3,%xmm3
+pshufd $0x39,%xmm2,%xmm2
+xorl 48(%rsi),%edx
+xorl 52(%rsi),%ecx
+xorl 56(%rsi),%r8d
+xorl 60(%rsi),%r9d
+movl   %edx,48(%rdi)
+movl   %ecx,52(%rdi)
+movl   %r8d,56(%rdi)
+movl   %r9d,60(%rdi)
+movd   %xmm13,%rdx
+movd   %xmm9,%rcx
+movd   %xmm3,%r8
+movd   %xmm2,%r9
+pshufd $0x39,%xmm13,%xmm13
+pshufd $0x39,%xmm9,%xmm9
+pshufd $0x39,%xmm3,%xmm3
+pshufd $0x39,%xmm2,%xmm2
+xorl 112(%rsi),%edx
+xorl 116(%rsi),%ecx
+xorl 120(%rsi),%r8d
+xorl 124(%rsi),%r9d
+movl   %edx,112(%rdi)
+movl   %ecx,116(%rdi)
+movl   %r8d,120(%rdi)
+movl   %r9d,124(%rdi)
+movd   %xmm13,%rdx
+movd   %xmm9,%rcx
+movd   %xmm3,%r8
+movd   %xmm2,%r9
+pshufd $0x39,%xmm13,%xmm13
+pshufd $0x39,%xmm9,%xmm9
+pshufd $0x39,%xmm3,%xmm3
+pshufd $0x39,%xmm2,%xmm2
+xorl 176(%rsi),%edx
+xorl 180(%rsi),%ecx
+xorl 184(%rsi),%r8d
+xorl 188(%rsi),%r9d
+movl   %edx,176(%rdi)
+movl   %ecx,180(%rdi)
+movl   %r8d,184(%rdi)
+movl   %r9d,188(%rdi)
+movd   %xmm13,%rdx
+movd   %xmm9,%rcx
+movd   %xmm3,%r8
+movd   %xmm2,%r9
+xorl 240(%rsi),%edx
+xorl 244(%rsi),%ecx
+xorl 248(%rsi),%r8d
+xorl 252(%rsi),%r9d
+movl   %edx,240(%rdi)
+movl   %ecx,244(%rdi)
+movl   %r8d,248(%rdi)
+movl   %r9d,252(%rdi)
+movq 480(%rsp),%r9
+sub  $256,%r9
+add  $256,%rsi
+add  $256,%rdi
+cmp  $256,%r9
+jae ._bytesatleast256
+
+cmp  $0,%r9
+jbe ._done
+
+._bytesbetween1and255:
+cmp  $64,%r9
+jae ._nocopy
+
+mov  %rdi,%rdx
+leaq 0(%rsp),%rdi
+mov  %r9,%rcx
+rep movsb
+leaq 0(%rsp),%rdi
+leaq 0(%rsp),%rsi
+
+._nocopy:
+movq %r9,480(%rsp)
+movdqa 112(%rsp),%xmm0
+movdqa 64(%rsp),%xmm1
+movdqa 80(%rsp),%xmm2
+movdqa 96(%rsp),%xmm3
+movdqa %xmm1,%xmm4
+mov  $20,%rcx
+
+.p2align 4
+._mainloop2:
+paddd %xmm0,%xmm4
+movdqa %xmm0,%xmm5
+movdqa %xmm4,%xmm6
+pslld $7,%xmm4
+psrld $25,%xmm6
+pxor  %xmm4,%xmm3
+pxor  %xmm6,%xmm3
+paddd %xmm3,%xmm5
+movdqa %xmm3,%xmm4
+movdqa %xmm5,%xmm6
+pslld $9,%xmm5
+psrld $23,%xmm6
+pxor  %xmm5,%xmm2
+pshufd $0x93,%xmm3,%xmm3
+pxor  %xmm6,%xmm2
+paddd %xmm2,%xmm4
+movdqa %xmm2,%xmm5
+movdqa %xmm4,%xmm6
+pslld $13,%xmm4
+psrld $19,%xmm6
+pxor  %xmm4,%xmm1
+pshufd $0x4e,%xmm2,%xmm2
+pxor  %xmm6,%xmm1
+paddd %xmm1,%xmm5
+movdqa %xmm3,%xmm4
+movdqa %xmm5,%xmm6
+pslld $18,%xmm5
+psrld $14,%xmm6
+pxor  %xmm5,%xmm0
+pshufd $0x39,%xmm1,%xmm1
+pxor  %xmm6,%xmm0
+paddd %xmm0,%xmm4
+movdqa %xmm0,%xmm5
+movdqa %xmm4,%xmm6
+pslld $7,%xmm4
+psrld $25,%xmm6
+pxor  %xmm4,%xmm1
+pxor  %xmm6,%xmm1
+paddd %xmm1,%xmm5
+movdqa %xmm1,%xmm4
+movdqa %xmm5,%xmm6
+pslld $9,%xmm5
+psrld $23,%xmm6
+pxor  %xmm5,%xmm2
+pshufd $0x93,%xmm1,%xmm1
+pxor  %xmm6,%xmm2
+paddd %xmm2,%xmm4
+movdqa %xmm2,%xmm5
+movdqa %xmm4,%xmm6
+pslld $13,%xmm4
+psrld $19,%xmm6
+pxor  %xmm4,%xmm3
+pshufd $0x4e,%xmm2,%xmm2
+pxor  %xmm6,%xmm3
+paddd %xmm3,%xmm5
+movdqa %xmm1,%xmm4
+movdqa %xmm5,%xmm6
+pslld $18,%xmm5
+psrld $14,%xmm6
+pxor  %xmm5,%xmm0
+pshufd $0x39,%xmm3,%xmm3
+pxor  %xmm6,%xmm0
+paddd %xmm0,%xmm4
+movdqa %xmm0,%xmm5
+movdqa %xmm4,%xmm6
+pslld $7,%xmm4
+psrld $25,%xmm6
+pxor  %xmm4,%xmm3
+pxor  %xmm6,%xmm3
+paddd %xmm3,%xmm5
+movdqa %xmm3,%xmm4
+movdqa %xmm5,%xmm6
+pslld $9,%xmm5
+psrld $23,%xmm6
+pxor  %xmm5,%xmm2
+pshufd $0x93,%xmm3,%xmm3
+pxor  %xmm6,%xmm2
+paddd %xmm2,%xmm4
+movdqa %xmm2,%xmm5
+movdqa %xmm4,%xmm6
+pslld $13,%xmm4
+psrld $19,%xmm6
+pxor  %xmm4,%xmm1
+pshufd $0x4e,%xmm2,%xmm2
+pxor  %xmm6,%xmm1
+paddd %xmm1,%xmm5
+movdqa %xmm3,%xmm4
+movdqa %xmm5,%xmm6
+pslld $18,%xmm5
+psrld $14,%xmm6
+pxor  %xmm5,%xmm0
+pshufd $0x39,%xmm1,%xmm1
+pxor  %xmm6,%xmm0
+paddd %xmm0,%xmm4
+movdqa %xmm0,%xmm5
+movdqa %xmm4,%xmm6
+pslld $7,%xmm4
+psrld $25,%xmm6
+pxor  %xmm4,%xmm1
+pxor  %xmm6,%xmm1
+paddd %xmm1,%xmm5
+movdqa %xmm1,%xmm4
+movdqa %xmm5,%xmm6
+pslld $9,%xmm5
+psrld $23,%xmm6
+pxor  %xmm5,%xmm2
+pshufd $0x93,%xmm1,%xmm1
+pxor  %xmm6,%xmm2
+paddd %xmm2,%xmm4
+movdqa %xmm2,%xmm5
+movdqa %xmm4,%xmm6
+pslld $13,%xmm4
+psrld $19,%xmm6
+pxor  %xmm4,%xmm3
+pshufd $0x4e,%xmm2,%xmm2
+pxor  %xmm6,%xmm3
+sub  $4,%rcx
+paddd %xmm3,%xmm5
+movdqa %xmm1,%xmm4
+movdqa %xmm5,%xmm6
+pslld $18,%xmm5
+pxor   %xmm7,%xmm7
+psrld $14,%xmm6
+pxor  %xmm5,%xmm0
+pshufd $0x39,%xmm3,%xmm3
+pxor  %xmm6,%xmm0
+ja ._mainloop2
+
+paddd 112(%rsp),%xmm0
+paddd 64(%rsp),%xmm1
+paddd 80(%rsp),%xmm2
+paddd 96(%rsp),%xmm3
+movd   %xmm0,%rcx
+movd   %xmm1,%r8
+movd   %xmm2,%r9
+movd   %xmm3,%rax
+pshufd $0x39,%xmm0,%xmm0
+pshufd $0x39,%xmm1,%xmm1
+pshufd $0x39,%xmm2,%xmm2
+pshufd $0x39,%xmm3,%xmm3
+xorl 0(%rsi),%ecx
+xorl 48(%rsi),%r8d
+xorl 32(%rsi),%r9d
+xorl 16(%rsi),%eax
+movl   %ecx,0(%rdi)
+movl   %r8d,48(%rdi)
+movl   %r9d,32(%rdi)
+movl   %eax,16(%rdi)
+movd   %xmm0,%rcx
+movd   %xmm1,%r8
+movd   %xmm2,%r9
+movd   %xmm3,%rax
+pshufd $0x39,%xmm0,%xmm0
+pshufd $0x39,%xmm1,%xmm1
+pshufd $0x39,%xmm2,%xmm2
+pshufd $0x39,%xmm3,%xmm3
+xorl 20(%rsi),%ecx
+xorl 4(%rsi),%r8d
+xorl 52(%rsi),%r9d
+xorl 36(%rsi),%eax
+movl   %ecx,20(%rdi)
+movl   %r8d,4(%rdi)
+movl   %r9d,52(%rdi)
+movl   %eax,36(%rdi)
+movd   %xmm0,%rcx
+movd   %xmm1,%r8
+movd   %xmm2,%r9
+movd   %xmm3,%rax
+pshufd $0x39,%xmm0,%xmm0
+pshufd $0x39,%xmm1,%xmm1
+pshufd $0x39,%xmm2,%xmm2
+pshufd $0x39,%xmm3,%xmm3
+xorl 40(%rsi),%ecx
+xorl 24(%rsi),%r8d
+xorl 8(%rsi),%r9d
+xorl 56(%rsi),%eax
+movl   %ecx,40(%rdi)
+movl   %r8d,24(%rdi)
+movl   %r9d,8(%rdi)
+movl   %eax,56(%rdi)
+movd   %xmm0,%rcx
+movd   %xmm1,%r8
+movd   %xmm2,%r9
+movd   %xmm3,%rax
+xorl 60(%rsi),%ecx
+xorl 44(%rsi),%r8d
+xorl 28(%rsi),%r9d
+xorl 12(%rsi),%eax
+movl   %ecx,60(%rdi)
+movl   %r8d,44(%rdi)
+movl   %r9d,28(%rdi)
+movl   %eax,12(%rdi)
+movq 480(%rsp),%r9
+movq 472(%rsp),%rcx
+add  $1,%rcx
+mov  %rcx,%r8
+shr  $32,%r8
+movl %ecx,80(%rsp)
+movl %r8d,4+96(%rsp)
+movq %rcx,472(%rsp)
+cmp  $64,%r9
+ja ._bytesatleast65
+jae ._bytesatleast64
+
+mov  %rdi,%rsi
+mov  %rdx,%rdi
+mov  %r9,%rcx
+rep movsb
+
+._bytesatleast64:
+._done:
+movq 416(%rsp),%r11
+movq 424(%rsp),%r12
+movq 432(%rsp),%r13
+movq 440(%rsp),%r14
+movq 448(%rsp),%r15
+movq 456(%rsp),%rbx
+movq 464(%rsp),%rbp
+add %r11,%rsp
+xor %rax,%rax
+mov %rsi,%rdx
+ret
+
+._bytesatleast65:
+sub  $64,%r9
+add  $64,%rdi
+add  $64,%rsi
+jmp ._bytesbetween1and255
+
+#endif
+
+#if defined(__linux__) && defined(__ELF__)
+.section .note.GNU-stack,"",%progbits
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,31 @@
+
+#include <stdint.h>
+
+#include "utils.h"
+
+#include "../stream_salsa20.h"
+#include "salsa20_xmm6.h"
+
+#ifdef HAVE_AMD64_ASM
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+extern int stream_salsa20_xmm6(unsigned char *c, unsigned long long clen,
+                               const unsigned char *n, const unsigned char *k);
+
+extern int stream_salsa20_xmm6_xor_ic(unsigned char *c, const unsigned char *m,
+                                      unsigned long long mlen,
+                                      const unsigned char *n,
+                                      uint64_t ic, const unsigned char *k);
+#ifdef __cplusplus
+}
+#endif
+
+struct crypto_stream_salsa20_implementation
+    crypto_stream_salsa20_xmm6_implementation = {
+        SODIUM_C99(.stream =) stream_salsa20_xmm6,
+        SODIUM_C99(.stream_xor_ic =) stream_salsa20_xmm6_xor_ic,
+    };
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6.h libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6/salsa20_xmm6.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,8 @@
+
+#include <stdint.h>
+
+#include "../stream_salsa20.h"
+#include "crypto_stream_salsa20.h"
+
+extern struct crypto_stream_salsa20_implementation
+    crypto_stream_salsa20_xmm6_implementation;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,131 @@
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "crypto_stream_salsa20.h"
+#include "private/common.h"
+#include "private/sse2_64_32.h"
+#include "utils.h"
+
+#if defined(HAVE_AVX2INTRIN_H) && defined(HAVE_EMMINTRIN_H) && \
+    defined(HAVE_TMMINTRIN_H) && defined(HAVE_SMMINTRIN_H)
+
+# ifdef __GNUC__
+#  pragma GCC target("sse2")
+#  pragma GCC target("ssse3")
+#  pragma GCC target("sse4.1")
+#  pragma GCC target("avx2")
+# endif
+
+#include <emmintrin.h>
+#include <immintrin.h>
+#include <smmintrin.h>
+#include <tmmintrin.h>
+
+# include "../stream_salsa20.h"
+# include "salsa20_xmm6int-avx2.h"
+
+# define ROUNDS 20
+
+typedef struct salsa_ctx {
+    uint32_t input[16];
+} salsa_ctx;
+
+static const int TR[16] = {
+    0, 5, 10, 15, 12, 1, 6, 11, 8, 13, 2, 7, 4, 9, 14, 3
+};
+
+static void
+salsa_keysetup(salsa_ctx *ctx, const uint8_t *k)
+{
+    ctx->input[TR[1]]  = LOAD32_LE(k + 0);
+    ctx->input[TR[2]]  = LOAD32_LE(k + 4);
+    ctx->input[TR[3]]  = LOAD32_LE(k + 8);
+    ctx->input[TR[4]]  = LOAD32_LE(k + 12);
+    ctx->input[TR[11]] = LOAD32_LE(k + 16);
+    ctx->input[TR[12]] = LOAD32_LE(k + 20);
+    ctx->input[TR[13]] = LOAD32_LE(k + 24);
+    ctx->input[TR[14]] = LOAD32_LE(k + 28);
+    ctx->input[TR[0]]  = 0x61707865;
+    ctx->input[TR[5]]  = 0x3320646e;
+    ctx->input[TR[10]] = 0x79622d32;
+    ctx->input[TR[15]] = 0x6b206574;
+}
+
+static void
+salsa_ivsetup(salsa_ctx *ctx, const uint8_t *iv, const uint8_t *counter)
+{
+    ctx->input[TR[6]] = LOAD32_LE(iv + 0);
+    ctx->input[TR[7]] = LOAD32_LE(iv + 4);
+    ctx->input[TR[8]] = counter == NULL ? 0 : LOAD32_LE(counter + 0);
+    ctx->input[TR[9]] = counter == NULL ? 0 : LOAD32_LE(counter + 4);
+}
+
+static void
+salsa20_encrypt_bytes(salsa_ctx *ctx, const uint8_t *m, uint8_t *c,
+                      unsigned long long bytes)
+{
+    uint32_t * const x = &ctx->input[0];
+
+    if (!bytes) {
+        return; /* LCOV_EXCL_LINE */
+    }
+
+#include "u8.h"
+#include "u4.h"
+#include "u1.h"
+#include "u0.h"
+}
+
+static int
+stream_avx2(unsigned char *c, unsigned long long clen, const unsigned char *n,
+            const unsigned char *k)
+{
+    struct salsa_ctx ctx;
+
+    if (!clen) {
+        return 0;
+    }
+    COMPILER_ASSERT(crypto_stream_salsa20_KEYBYTES == 256 / 8);
+    salsa_keysetup(&ctx, k);
+    salsa_ivsetup(&ctx, n, NULL);
+    memset(c, 0, clen);
+    salsa20_encrypt_bytes(&ctx, c, c, clen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+static int
+stream_avx2_xor_ic(unsigned char *c, const unsigned char *m,
+                   unsigned long long mlen, const unsigned char *n, uint64_t ic,
+                   const unsigned char *k)
+{
+    struct salsa_ctx ctx;
+    uint8_t          ic_bytes[8];
+    uint32_t         ic_high;
+    uint32_t         ic_low;
+
+    if (!mlen) {
+        return 0;
+    }
+    ic_high = (uint32_t) (ic >> 32);
+    ic_low  = (uint32_t) ic;
+    STORE32_LE(&ic_bytes[0], ic_low);
+    STORE32_LE(&ic_bytes[4], ic_high);
+    salsa_keysetup(&ctx, k);
+    salsa_ivsetup(&ctx, n, ic_bytes);
+    salsa20_encrypt_bytes(&ctx, m, c, mlen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+struct crypto_stream_salsa20_implementation
+    crypto_stream_salsa20_xmm6int_avx2_implementation = {
+        SODIUM_C99(.stream =) stream_avx2,
+        SODIUM_C99(.stream_xor_ic =) stream_avx2_xor_ic
+    };
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.h libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,8 @@
+
+#include <stdint.h>
+
+#include "../stream_salsa20.h"
+#include "crypto_stream_salsa20.h"
+
+extern struct crypto_stream_salsa20_implementation
+    crypto_stream_salsa20_xmm6int_avx2_implementation;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,122 @@
+
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "crypto_stream_salsa20.h"
+#include "private/common.h"
+#include "private/sse2_64_32.h"
+#include "utils.h"
+
+#ifdef HAVE_EMMINTRIN_H
+
+# ifdef __GNUC__
+#  pragma GCC target("sse2")
+# endif
+# include <emmintrin.h>
+
+# include "../stream_salsa20.h"
+# include "salsa20_xmm6int-sse2.h"
+
+# define ROUNDS 20
+
+typedef struct salsa_ctx {
+    uint32_t input[16];
+} salsa_ctx;
+
+static const int TR[16] = {
+    0, 5, 10, 15, 12, 1, 6, 11, 8, 13, 2, 7, 4, 9, 14, 3
+};
+
+static void
+salsa_keysetup(salsa_ctx *ctx, const uint8_t *k)
+{
+    ctx->input[TR[1]]  = LOAD32_LE(k + 0);
+    ctx->input[TR[2]]  = LOAD32_LE(k + 4);
+    ctx->input[TR[3]]  = LOAD32_LE(k + 8);
+    ctx->input[TR[4]]  = LOAD32_LE(k + 12);
+    ctx->input[TR[11]] = LOAD32_LE(k + 16);
+    ctx->input[TR[12]] = LOAD32_LE(k + 20);
+    ctx->input[TR[13]] = LOAD32_LE(k + 24);
+    ctx->input[TR[14]] = LOAD32_LE(k + 28);
+    ctx->input[TR[0]]  = 0x61707865;
+    ctx->input[TR[5]]  = 0x3320646e;
+    ctx->input[TR[10]] = 0x79622d32;
+    ctx->input[TR[15]] = 0x6b206574;
+}
+
+static void
+salsa_ivsetup(salsa_ctx *ctx, const uint8_t *iv, const uint8_t *counter)
+{
+    ctx->input[TR[6]] = LOAD32_LE(iv + 0);
+    ctx->input[TR[7]] = LOAD32_LE(iv + 4);
+    ctx->input[TR[8]] = counter == NULL ? 0 : LOAD32_LE(counter + 0);
+    ctx->input[TR[9]] = counter == NULL ? 0 : LOAD32_LE(counter + 4);
+}
+
+static void
+salsa20_encrypt_bytes(salsa_ctx *ctx, const uint8_t *m, uint8_t *c,
+                      unsigned long long bytes)
+{
+    uint32_t * const x = &ctx->input[0];
+
+    if (!bytes) {
+        return; /* LCOV_EXCL_LINE */
+    }
+
+#include "u4.h"
+#include "u1.h"
+#include "u0.h"
+}
+
+static int
+stream_sse2(unsigned char *c, unsigned long long clen, const unsigned char *n,
+            const unsigned char *k)
+{
+    struct salsa_ctx ctx;
+
+    if (!clen) {
+        return 0;
+    }
+    COMPILER_ASSERT(crypto_stream_salsa20_KEYBYTES == 256 / 8);
+    salsa_keysetup(&ctx, k);
+    salsa_ivsetup(&ctx, n, NULL);
+    memset(c, 0, clen);
+    salsa20_encrypt_bytes(&ctx, c, c, clen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+static int
+stream_sse2_xor_ic(unsigned char *c, const unsigned char *m,
+                   unsigned long long mlen, const unsigned char *n, uint64_t ic,
+                   const unsigned char *k)
+{
+    struct salsa_ctx ctx;
+    uint8_t          ic_bytes[8];
+    uint32_t         ic_high;
+    uint32_t         ic_low;
+
+    if (!mlen) {
+        return 0;
+    }
+    ic_high = (uint32_t) (ic >> 32);
+    ic_low  = (uint32_t) (ic);
+    STORE32_LE(&ic_bytes[0], ic_low);
+    STORE32_LE(&ic_bytes[4], ic_high);
+    salsa_keysetup(&ctx, k);
+    salsa_ivsetup(&ctx, n, ic_bytes);
+    salsa20_encrypt_bytes(&ctx, m, c, mlen);
+    sodium_memzero(&ctx, sizeof ctx);
+
+    return 0;
+}
+
+struct crypto_stream_salsa20_implementation
+    crypto_stream_salsa20_xmm6int_sse2_implementation = {
+        SODIUM_C99(.stream =) stream_sse2,
+        SODIUM_C99(.stream_xor_ic =) stream_sse2_xor_ic
+    };
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.h libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,8 @@
+
+#include <stdint.h>
+
+#include "../stream_salsa20.h"
+#include "crypto_stream_salsa20.h"
+
+extern struct crypto_stream_salsa20_implementation
+    crypto_stream_salsa20_xmm6int_sse2_implementation;
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/u0.h libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/u0.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/u0.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/u0.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,195 @@
+if (bytes > 0) {
+    __m128i diag0 = _mm_loadu_si128((__m128i *) (x + 0));
+    __m128i diag1 = _mm_loadu_si128((__m128i *) (x + 4));
+    __m128i diag2 = _mm_loadu_si128((__m128i *) (x + 8));
+    __m128i diag3 = _mm_loadu_si128((__m128i *) (x + 12));
+    __m128i a0, a1, a2, a3, a4, a5, a6, a7;
+    __m128i b0, b1, b2, b3, b4, b5, b6, b7;
+    uint8_t partialblock[64];
+
+    int     i;
+
+    a0 = diag1;
+    for (i = 0; i < ROUNDS; i += 4) {
+        a0    = _mm_add_epi32(a0, diag0);
+        a1    = diag0;
+        b0    = a0;
+        a0    = _mm_slli_epi32(a0, 7);
+        b0    = _mm_srli_epi32(b0, 25);
+        diag3 = _mm_xor_si128(diag3, a0);
+
+        diag3 = _mm_xor_si128(diag3, b0);
+
+        a1    = _mm_add_epi32(a1, diag3);
+        a2    = diag3;
+        b1    = a1;
+        a1    = _mm_slli_epi32(a1, 9);
+        b1    = _mm_srli_epi32(b1, 23);
+        diag2 = _mm_xor_si128(diag2, a1);
+        diag3 = _mm_shuffle_epi32(diag3, 0x93);
+        diag2 = _mm_xor_si128(diag2, b1);
+
+        a2    = _mm_add_epi32(a2, diag2);
+        a3    = diag2;
+        b2    = a2;
+        a2    = _mm_slli_epi32(a2, 13);
+        b2    = _mm_srli_epi32(b2, 19);
+        diag1 = _mm_xor_si128(diag1, a2);
+        diag2 = _mm_shuffle_epi32(diag2, 0x4e);
+        diag1 = _mm_xor_si128(diag1, b2);
+
+        a3    = _mm_add_epi32(a3, diag1);
+        a4    = diag3;
+        b3    = a3;
+        a3    = _mm_slli_epi32(a3, 18);
+        b3    = _mm_srli_epi32(b3, 14);
+        diag0 = _mm_xor_si128(diag0, a3);
+        diag1 = _mm_shuffle_epi32(diag1, 0x39);
+        diag0 = _mm_xor_si128(diag0, b3);
+
+        a4    = _mm_add_epi32(a4, diag0);
+        a5    = diag0;
+        b4    = a4;
+        a4    = _mm_slli_epi32(a4, 7);
+        b4    = _mm_srli_epi32(b4, 25);
+        diag1 = _mm_xor_si128(diag1, a4);
+
+        diag1 = _mm_xor_si128(diag1, b4);
+
+        a5    = _mm_add_epi32(a5, diag1);
+        a6    = diag1;
+        b5    = a5;
+        a5    = _mm_slli_epi32(a5, 9);
+        b5    = _mm_srli_epi32(b5, 23);
+        diag2 = _mm_xor_si128(diag2, a5);
+        diag1 = _mm_shuffle_epi32(diag1, 0x93);
+        diag2 = _mm_xor_si128(diag2, b5);
+
+        a6    = _mm_add_epi32(a6, diag2);
+        a7    = diag2;
+        b6    = a6;
+        a6    = _mm_slli_epi32(a6, 13);
+        b6    = _mm_srli_epi32(b6, 19);
+        diag3 = _mm_xor_si128(diag3, a6);
+        diag2 = _mm_shuffle_epi32(diag2, 0x4e);
+        diag3 = _mm_xor_si128(diag3, b6);
+
+        a7    = _mm_add_epi32(a7, diag3);
+        a0    = diag1;
+        b7    = a7;
+        a7    = _mm_slli_epi32(a7, 18);
+        b7    = _mm_srli_epi32(b7, 14);
+        diag0 = _mm_xor_si128(diag0, a7);
+        diag3 = _mm_shuffle_epi32(diag3, 0x39);
+        diag0 = _mm_xor_si128(diag0, b7);
+
+        a0    = _mm_add_epi32(a0, diag0);
+        a1    = diag0;
+        b0    = a0;
+        a0    = _mm_slli_epi32(a0, 7);
+        b0    = _mm_srli_epi32(b0, 25);
+        diag3 = _mm_xor_si128(diag3, a0);
+
+        diag3 = _mm_xor_si128(diag3, b0);
+
+        a1    = _mm_add_epi32(a1, diag3);
+        a2    = diag3;
+        b1    = a1;
+        a1    = _mm_slli_epi32(a1, 9);
+        b1    = _mm_srli_epi32(b1, 23);
+        diag2 = _mm_xor_si128(diag2, a1);
+        diag3 = _mm_shuffle_epi32(diag3, 0x93);
+        diag2 = _mm_xor_si128(diag2, b1);
+
+        a2    = _mm_add_epi32(a2, diag2);
+        a3    = diag2;
+        b2    = a2;
+        a2    = _mm_slli_epi32(a2, 13);
+        b2    = _mm_srli_epi32(b2, 19);
+        diag1 = _mm_xor_si128(diag1, a2);
+        diag2 = _mm_shuffle_epi32(diag2, 0x4e);
+        diag1 = _mm_xor_si128(diag1, b2);
+
+        a3    = _mm_add_epi32(a3, diag1);
+        a4    = diag3;
+        b3    = a3;
+        a3    = _mm_slli_epi32(a3, 18);
+        b3    = _mm_srli_epi32(b3, 14);
+        diag0 = _mm_xor_si128(diag0, a3);
+        diag1 = _mm_shuffle_epi32(diag1, 0x39);
+        diag0 = _mm_xor_si128(diag0, b3);
+
+        a4    = _mm_add_epi32(a4, diag0);
+        a5    = diag0;
+        b4    = a4;
+        a4    = _mm_slli_epi32(a4, 7);
+        b4    = _mm_srli_epi32(b4, 25);
+        diag1 = _mm_xor_si128(diag1, a4);
+
+        diag1 = _mm_xor_si128(diag1, b4);
+
+        a5    = _mm_add_epi32(a5, diag1);
+        a6    = diag1;
+        b5    = a5;
+        a5    = _mm_slli_epi32(a5, 9);
+        b5    = _mm_srli_epi32(b5, 23);
+        diag2 = _mm_xor_si128(diag2, a5);
+        diag1 = _mm_shuffle_epi32(diag1, 0x93);
+        diag2 = _mm_xor_si128(diag2, b5);
+
+        a6    = _mm_add_epi32(a6, diag2);
+        a7    = diag2;
+        b6    = a6;
+        a6    = _mm_slli_epi32(a6, 13);
+        b6    = _mm_srli_epi32(b6, 19);
+        diag3 = _mm_xor_si128(diag3, a6);
+        diag2 = _mm_shuffle_epi32(diag2, 0x4e);
+        diag3 = _mm_xor_si128(diag3, b6);
+
+        a7    = _mm_add_epi32(a7, diag3);
+        a0    = diag1;
+        b7    = a7;
+        a7    = _mm_slli_epi32(a7, 18);
+        b7    = _mm_srli_epi32(b7, 14);
+        diag0 = _mm_xor_si128(diag0, a7);
+        diag3 = _mm_shuffle_epi32(diag3, 0x39);
+        diag0 = _mm_xor_si128(diag0, b7);
+    }
+
+    diag0 = _mm_add_epi32(diag0, _mm_loadu_si128((__m128i *) (x + 0)));
+    diag1 = _mm_add_epi32(diag1, _mm_loadu_si128((__m128i *) (x + 4)));
+    diag2 = _mm_add_epi32(diag2, _mm_loadu_si128((__m128i *) (x + 8)));
+    diag3 = _mm_add_epi32(diag3, _mm_loadu_si128((__m128i *) (x + 12)));
+
+#define ONEQUAD_SHUFFLE(A, B, C, D)                      \
+    do {                                                 \
+        uint32_t in##A = _mm_cvtsi128_si32(diag0);       \
+        uint32_t in##B = _mm_cvtsi128_si32(diag1);       \
+        uint32_t in##C = _mm_cvtsi128_si32(diag2);       \
+        uint32_t in##D = _mm_cvtsi128_si32(diag3);       \
+        diag0          = _mm_shuffle_epi32(diag0, 0x39); \
+        diag1          = _mm_shuffle_epi32(diag1, 0x39); \
+        diag2          = _mm_shuffle_epi32(diag2, 0x39); \
+        diag3          = _mm_shuffle_epi32(diag3, 0x39); \
+        *(uint32_t *) (partialblock + (A * 4)) = in##A;  \
+        *(uint32_t *) (partialblock + (B * 4)) = in##B;  \
+        *(uint32_t *) (partialblock + (C * 4)) = in##C;  \
+        *(uint32_t *) (partialblock + (D * 4)) = in##D;  \
+    } while (0)
+
+#define ONEQUAD(A, B, C, D) ONEQUAD_SHUFFLE(A, B, C, D)
+
+    ONEQUAD(0, 12, 8, 4);
+    ONEQUAD(5, 1, 13, 9);
+    ONEQUAD(10, 6, 2, 14);
+    ONEQUAD(15, 11, 7, 3);
+
+#undef ONEQUAD
+#undef ONEQUAD_SHUFFLE
+
+    for (i = 0; i < bytes; i++) {
+        c[i] = m[i] ^ partialblock[i];
+    }
+
+    sodium_memzero(partialblock, sizeof partialblock);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/u1.h libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/u1.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/u1.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/u1.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,207 @@
+while (bytes >= 64) {
+    __m128i diag0 = _mm_loadu_si128((__m128i *) (x + 0));
+    __m128i diag1 = _mm_loadu_si128((__m128i *) (x + 4));
+    __m128i diag2 = _mm_loadu_si128((__m128i *) (x + 8));
+    __m128i diag3 = _mm_loadu_si128((__m128i *) (x + 12));
+    __m128i a0, a1, a2, a3, a4, a5, a6, a7;
+    __m128i b0, b1, b2, b3, b4, b5, b6, b7;
+
+    uint32_t in8;
+    uint32_t in9;
+    int      i;
+
+    a0 = diag1;
+    for (i = 0; i < ROUNDS; i += 4) {
+        a0    = _mm_add_epi32(a0, diag0);
+        a1    = diag0;
+        b0    = a0;
+        a0    = _mm_slli_epi32(a0, 7);
+        b0    = _mm_srli_epi32(b0, 25);
+        diag3 = _mm_xor_si128(diag3, a0);
+
+        diag3 = _mm_xor_si128(diag3, b0);
+
+        a1    = _mm_add_epi32(a1, diag3);
+        a2    = diag3;
+        b1    = a1;
+        a1    = _mm_slli_epi32(a1, 9);
+        b1    = _mm_srli_epi32(b1, 23);
+        diag2 = _mm_xor_si128(diag2, a1);
+        diag3 = _mm_shuffle_epi32(diag3, 0x93);
+        diag2 = _mm_xor_si128(diag2, b1);
+
+        a2    = _mm_add_epi32(a2, diag2);
+        a3    = diag2;
+        b2    = a2;
+        a2    = _mm_slli_epi32(a2, 13);
+        b2    = _mm_srli_epi32(b2, 19);
+        diag1 = _mm_xor_si128(diag1, a2);
+        diag2 = _mm_shuffle_epi32(diag2, 0x4e);
+        diag1 = _mm_xor_si128(diag1, b2);
+
+        a3    = _mm_add_epi32(a3, diag1);
+        a4    = diag3;
+        b3    = a3;
+        a3    = _mm_slli_epi32(a3, 18);
+        b3    = _mm_srli_epi32(b3, 14);
+        diag0 = _mm_xor_si128(diag0, a3);
+        diag1 = _mm_shuffle_epi32(diag1, 0x39);
+        diag0 = _mm_xor_si128(diag0, b3);
+
+        a4    = _mm_add_epi32(a4, diag0);
+        a5    = diag0;
+        b4    = a4;
+        a4    = _mm_slli_epi32(a4, 7);
+        b4    = _mm_srli_epi32(b4, 25);
+        diag1 = _mm_xor_si128(diag1, a4);
+
+        diag1 = _mm_xor_si128(diag1, b4);
+
+        a5    = _mm_add_epi32(a5, diag1);
+        a6    = diag1;
+        b5    = a5;
+        a5    = _mm_slli_epi32(a5, 9);
+        b5    = _mm_srli_epi32(b5, 23);
+        diag2 = _mm_xor_si128(diag2, a5);
+        diag1 = _mm_shuffle_epi32(diag1, 0x93);
+        diag2 = _mm_xor_si128(diag2, b5);
+
+        a6    = _mm_add_epi32(a6, diag2);
+        a7    = diag2;
+        b6    = a6;
+        a6    = _mm_slli_epi32(a6, 13);
+        b6    = _mm_srli_epi32(b6, 19);
+        diag3 = _mm_xor_si128(diag3, a6);
+        diag2 = _mm_shuffle_epi32(diag2, 0x4e);
+        diag3 = _mm_xor_si128(diag3, b6);
+
+        a7    = _mm_add_epi32(a7, diag3);
+        a0    = diag1;
+        b7    = a7;
+        a7    = _mm_slli_epi32(a7, 18);
+        b7    = _mm_srli_epi32(b7, 14);
+        diag0 = _mm_xor_si128(diag0, a7);
+        diag3 = _mm_shuffle_epi32(diag3, 0x39);
+        diag0 = _mm_xor_si128(diag0, b7);
+
+        a0    = _mm_add_epi32(a0, diag0);
+        a1    = diag0;
+        b0    = a0;
+        a0    = _mm_slli_epi32(a0, 7);
+        b0    = _mm_srli_epi32(b0, 25);
+        diag3 = _mm_xor_si128(diag3, a0);
+
+        diag3 = _mm_xor_si128(diag3, b0);
+
+        a1    = _mm_add_epi32(a1, diag3);
+        a2    = diag3;
+        b1    = a1;
+        a1    = _mm_slli_epi32(a1, 9);
+        b1    = _mm_srli_epi32(b1, 23);
+        diag2 = _mm_xor_si128(diag2, a1);
+        diag3 = _mm_shuffle_epi32(diag3, 0x93);
+        diag2 = _mm_xor_si128(diag2, b1);
+
+        a2    = _mm_add_epi32(a2, diag2);
+        a3    = diag2;
+        b2    = a2;
+        a2    = _mm_slli_epi32(a2, 13);
+        b2    = _mm_srli_epi32(b2, 19);
+        diag1 = _mm_xor_si128(diag1, a2);
+        diag2 = _mm_shuffle_epi32(diag2, 0x4e);
+        diag1 = _mm_xor_si128(diag1, b2);
+
+        a3    = _mm_add_epi32(a3, diag1);
+        a4    = diag3;
+        b3    = a3;
+        a3    = _mm_slli_epi32(a3, 18);
+        b3    = _mm_srli_epi32(b3, 14);
+        diag0 = _mm_xor_si128(diag0, a3);
+        diag1 = _mm_shuffle_epi32(diag1, 0x39);
+        diag0 = _mm_xor_si128(diag0, b3);
+
+        a4    = _mm_add_epi32(a4, diag0);
+        a5    = diag0;
+        b4    = a4;
+        a4    = _mm_slli_epi32(a4, 7);
+        b4    = _mm_srli_epi32(b4, 25);
+        diag1 = _mm_xor_si128(diag1, a4);
+
+        diag1 = _mm_xor_si128(diag1, b4);
+
+        a5    = _mm_add_epi32(a5, diag1);
+        a6    = diag1;
+        b5    = a5;
+        a5    = _mm_slli_epi32(a5, 9);
+        b5    = _mm_srli_epi32(b5, 23);
+        diag2 = _mm_xor_si128(diag2, a5);
+        diag1 = _mm_shuffle_epi32(diag1, 0x93);
+        diag2 = _mm_xor_si128(diag2, b5);
+
+        a6    = _mm_add_epi32(a6, diag2);
+        a7    = diag2;
+        b6    = a6;
+        a6    = _mm_slli_epi32(a6, 13);
+        b6    = _mm_srli_epi32(b6, 19);
+        diag3 = _mm_xor_si128(diag3, a6);
+        diag2 = _mm_shuffle_epi32(diag2, 0x4e);
+        diag3 = _mm_xor_si128(diag3, b6);
+
+        a7    = _mm_add_epi32(a7, diag3);
+        a0    = diag1;
+        b7    = a7;
+        a7    = _mm_slli_epi32(a7, 18);
+        b7    = _mm_srli_epi32(b7, 14);
+        diag0 = _mm_xor_si128(diag0, a7);
+        diag3 = _mm_shuffle_epi32(diag3, 0x39);
+        diag0 = _mm_xor_si128(diag0, b7);
+    }
+
+    diag0 = _mm_add_epi32(diag0, _mm_loadu_si128((__m128i *) (x + 0)));
+    diag1 = _mm_add_epi32(diag1, _mm_loadu_si128((__m128i *) (x + 4)));
+    diag2 = _mm_add_epi32(diag2, _mm_loadu_si128((__m128i *) (x + 8)));
+    diag3 = _mm_add_epi32(diag3, _mm_loadu_si128((__m128i *) (x + 12)));
+
+#define ONEQUAD_SHUFFLE(A, B, C, D)                      \
+    do {                                                 \
+        uint32_t in##A = _mm_cvtsi128_si32(diag0);       \
+        uint32_t in##B = _mm_cvtsi128_si32(diag1);       \
+        uint32_t in##C = _mm_cvtsi128_si32(diag2);       \
+        uint32_t in##D = _mm_cvtsi128_si32(diag3);       \
+        diag0          = _mm_shuffle_epi32(diag0, 0x39); \
+        diag1          = _mm_shuffle_epi32(diag1, 0x39); \
+        diag2          = _mm_shuffle_epi32(diag2, 0x39); \
+        diag3          = _mm_shuffle_epi32(diag3, 0x39); \
+        in##A ^= *(uint32_t *) (m + (A * 4));            \
+        in##B ^= *(uint32_t *) (m + (B * 4));            \
+        in##C ^= *(uint32_t *) (m + (C * 4));            \
+        in##D ^= *(uint32_t *) (m + (D * 4));            \
+        *(uint32_t *) (c + (A * 4)) = in##A;             \
+        *(uint32_t *) (c + (B * 4)) = in##B;             \
+        *(uint32_t *) (c + (C * 4)) = in##C;             \
+        *(uint32_t *) (c + (D * 4)) = in##D;             \
+    } while (0)
+
+#define ONEQUAD(A, B, C, D) ONEQUAD_SHUFFLE(A, B, C, D)
+
+    ONEQUAD(0, 12, 8, 4);
+    ONEQUAD(5, 1, 13, 9);
+    ONEQUAD(10, 6, 2, 14);
+    ONEQUAD(15, 11, 7, 3);
+
+#undef ONEQUAD
+#undef ONEQUAD_SHUFFLE
+
+    in8 = x[8];
+    in9 = x[13];
+    in8++;
+    if (in8 == 0) {
+        in9++;
+    }
+    x[8]  = in8;
+    x[13] = in9;
+
+    c += 64;
+    m += 64;
+    bytes -= 64;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/u4.h libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/u4.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/u4.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/u4.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,547 @@
+if (bytes >= 256) {
+    __m128i y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14,
+        y15;
+    __m128i z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14,
+        z15;
+    __m128i orig0, orig1, orig2, orig3, orig4, orig5, orig6, orig7, orig8,
+        orig9, orig10, orig11, orig12, orig13, orig14, orig15;
+
+    uint32_t in8;
+    uint32_t in9;
+    int      i;
+
+    /* element broadcast immediate for _mm_shuffle_epi32 are in order:
+       0x00, 0x55, 0xaa, 0xff */
+    z0  = _mm_loadu_si128((__m128i *) (x + 0));
+    z5  = _mm_shuffle_epi32(z0, 0x55);
+    z10 = _mm_shuffle_epi32(z0, 0xaa);
+    z15 = _mm_shuffle_epi32(z0, 0xff);
+    z0  = _mm_shuffle_epi32(z0, 0x00);
+    z1  = _mm_loadu_si128((__m128i *) (x + 4));
+    z6  = _mm_shuffle_epi32(z1, 0xaa);
+    z11 = _mm_shuffle_epi32(z1, 0xff);
+    z12 = _mm_shuffle_epi32(z1, 0x00);
+    z1  = _mm_shuffle_epi32(z1, 0x55);
+    z2  = _mm_loadu_si128((__m128i *) (x + 8));
+    z7  = _mm_shuffle_epi32(z2, 0xff);
+    z13 = _mm_shuffle_epi32(z2, 0x55);
+    z2  = _mm_shuffle_epi32(z2, 0xaa);
+    /* no z8 -> first half of the nonce, will fill later */
+    z3  = _mm_loadu_si128((__m128i *) (x + 12));
+    z4  = _mm_shuffle_epi32(z3, 0x00);
+    z14 = _mm_shuffle_epi32(z3, 0xaa);
+    z3  = _mm_shuffle_epi32(z3, 0xff);
+    /* no z9 -> second half of the nonce, will fill later */
+    orig0  = z0;
+    orig1  = z1;
+    orig2  = z2;
+    orig3  = z3;
+    orig4  = z4;
+    orig5  = z5;
+    orig6  = z6;
+    orig7  = z7;
+    orig10 = z10;
+    orig11 = z11;
+    orig12 = z12;
+    orig13 = z13;
+    orig14 = z14;
+    orig15 = z15;
+
+    while (bytes >= 256) {
+        /* vector implementation for z8 and z9 */
+        /* not sure if it helps for only 4 blocks */
+        const __m128i addv8 = _mm_set_epi64x(1, 0);
+        const __m128i addv9 = _mm_set_epi64x(3, 2);
+        __m128i       t8, t9;
+        uint64_t      in89;
+
+        in8  = x[8];
+        in9  = x[13];
+        in89 = ((uint64_t) in8) | (((uint64_t) in9) << 32);
+        t8   = _mm_set1_epi64x(in89);
+        t9   = _mm_set1_epi64x(in89);
+
+        z8 = _mm_add_epi64(addv8, t8);
+        z9 = _mm_add_epi64(addv9, t9);
+
+        t8 = _mm_unpacklo_epi32(z8, z9);
+        t9 = _mm_unpackhi_epi32(z8, z9);
+
+        z8 = _mm_unpacklo_epi32(t8, t9);
+        z9 = _mm_unpackhi_epi32(t8, t9);
+
+        orig8 = z8;
+        orig9 = z9;
+
+        in89 += 4;
+
+        x[8]  = in89 & 0xFFFFFFFF;
+        x[13] = (in89 >> 32) & 0xFFFFFFFF;
+
+        z5  = orig5;
+        z10 = orig10;
+        z15 = orig15;
+        z14 = orig14;
+        z3  = orig3;
+        z6  = orig6;
+        z11 = orig11;
+        z1  = orig1;
+
+        z7  = orig7;
+        z13 = orig13;
+        z2  = orig2;
+        z9  = orig9;
+        z0  = orig0;
+        z12 = orig12;
+        z4  = orig4;
+        z8  = orig8;
+
+        for (i = 0; i < ROUNDS; i += 2) {
+            /* the inner loop is a direct translation (regexp search/replace)
+             * from the amd64-xmm6 ASM */
+            __m128i r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13,
+                r14, r15;
+
+            y4 = z12;
+            y4 = _mm_add_epi32(y4, z0);
+            r4 = y4;
+            y4 = _mm_slli_epi32(y4, 7);
+            z4 = _mm_xor_si128(z4, y4);
+            r4 = _mm_srli_epi32(r4, 25);
+            z4 = _mm_xor_si128(z4, r4);
+
+            y9 = z1;
+            y9 = _mm_add_epi32(y9, z5);
+            r9 = y9;
+            y9 = _mm_slli_epi32(y9, 7);
+            z9 = _mm_xor_si128(z9, y9);
+            r9 = _mm_srli_epi32(r9, 25);
+            z9 = _mm_xor_si128(z9, r9);
+
+            y8 = z0;
+            y8 = _mm_add_epi32(y8, z4);
+            r8 = y8;
+            y8 = _mm_slli_epi32(y8, 9);
+            z8 = _mm_xor_si128(z8, y8);
+            r8 = _mm_srli_epi32(r8, 23);
+            z8 = _mm_xor_si128(z8, r8);
+
+            y13 = z5;
+            y13 = _mm_add_epi32(y13, z9);
+            r13 = y13;
+            y13 = _mm_slli_epi32(y13, 9);
+            z13 = _mm_xor_si128(z13, y13);
+            r13 = _mm_srli_epi32(r13, 23);
+            z13 = _mm_xor_si128(z13, r13);
+
+            y12 = z4;
+            y12 = _mm_add_epi32(y12, z8);
+            r12 = y12;
+            y12 = _mm_slli_epi32(y12, 13);
+            z12 = _mm_xor_si128(z12, y12);
+            r12 = _mm_srli_epi32(r12, 19);
+            z12 = _mm_xor_si128(z12, r12);
+
+            y1 = z9;
+            y1 = _mm_add_epi32(y1, z13);
+            r1 = y1;
+            y1 = _mm_slli_epi32(y1, 13);
+            z1 = _mm_xor_si128(z1, y1);
+            r1 = _mm_srli_epi32(r1, 19);
+            z1 = _mm_xor_si128(z1, r1);
+
+            y0 = z8;
+            y0 = _mm_add_epi32(y0, z12);
+            r0 = y0;
+            y0 = _mm_slli_epi32(y0, 18);
+            z0 = _mm_xor_si128(z0, y0);
+            r0 = _mm_srli_epi32(r0, 14);
+            z0 = _mm_xor_si128(z0, r0);
+
+            y5 = z13;
+            y5 = _mm_add_epi32(y5, z1);
+            r5 = y5;
+            y5 = _mm_slli_epi32(y5, 18);
+            z5 = _mm_xor_si128(z5, y5);
+            r5 = _mm_srli_epi32(r5, 14);
+            z5 = _mm_xor_si128(z5, r5);
+
+            y14 = z6;
+            y14 = _mm_add_epi32(y14, z10);
+            r14 = y14;
+            y14 = _mm_slli_epi32(y14, 7);
+            z14 = _mm_xor_si128(z14, y14);
+            r14 = _mm_srli_epi32(r14, 25);
+            z14 = _mm_xor_si128(z14, r14);
+
+            y3 = z11;
+            y3 = _mm_add_epi32(y3, z15);
+            r3 = y3;
+            y3 = _mm_slli_epi32(y3, 7);
+            z3 = _mm_xor_si128(z3, y3);
+            r3 = _mm_srli_epi32(r3, 25);
+            z3 = _mm_xor_si128(z3, r3);
+
+            y2 = z10;
+            y2 = _mm_add_epi32(y2, z14);
+            r2 = y2;
+            y2 = _mm_slli_epi32(y2, 9);
+            z2 = _mm_xor_si128(z2, y2);
+            r2 = _mm_srli_epi32(r2, 23);
+            z2 = _mm_xor_si128(z2, r2);
+
+            y7 = z15;
+            y7 = _mm_add_epi32(y7, z3);
+            r7 = y7;
+            y7 = _mm_slli_epi32(y7, 9);
+            z7 = _mm_xor_si128(z7, y7);
+            r7 = _mm_srli_epi32(r7, 23);
+            z7 = _mm_xor_si128(z7, r7);
+
+            y6 = z14;
+            y6 = _mm_add_epi32(y6, z2);
+            r6 = y6;
+            y6 = _mm_slli_epi32(y6, 13);
+            z6 = _mm_xor_si128(z6, y6);
+            r6 = _mm_srli_epi32(r6, 19);
+            z6 = _mm_xor_si128(z6, r6);
+
+            y11 = z3;
+            y11 = _mm_add_epi32(y11, z7);
+            r11 = y11;
+            y11 = _mm_slli_epi32(y11, 13);
+            z11 = _mm_xor_si128(z11, y11);
+            r11 = _mm_srli_epi32(r11, 19);
+            z11 = _mm_xor_si128(z11, r11);
+
+            y10 = z2;
+            y10 = _mm_add_epi32(y10, z6);
+            r10 = y10;
+            y10 = _mm_slli_epi32(y10, 18);
+            z10 = _mm_xor_si128(z10, y10);
+            r10 = _mm_srli_epi32(r10, 14);
+            z10 = _mm_xor_si128(z10, r10);
+
+            y1 = z3;
+            y1 = _mm_add_epi32(y1, z0);
+            r1 = y1;
+            y1 = _mm_slli_epi32(y1, 7);
+            z1 = _mm_xor_si128(z1, y1);
+            r1 = _mm_srli_epi32(r1, 25);
+            z1 = _mm_xor_si128(z1, r1);
+
+            y15 = z7;
+            y15 = _mm_add_epi32(y15, z11);
+            r15 = y15;
+            y15 = _mm_slli_epi32(y15, 18);
+            z15 = _mm_xor_si128(z15, y15);
+            r15 = _mm_srli_epi32(r15, 14);
+            z15 = _mm_xor_si128(z15, r15);
+
+            y6 = z4;
+            y6 = _mm_add_epi32(y6, z5);
+            r6 = y6;
+            y6 = _mm_slli_epi32(y6, 7);
+            z6 = _mm_xor_si128(z6, y6);
+            r6 = _mm_srli_epi32(r6, 25);
+            z6 = _mm_xor_si128(z6, r6);
+
+            y2 = z0;
+            y2 = _mm_add_epi32(y2, z1);
+            r2 = y2;
+            y2 = _mm_slli_epi32(y2, 9);
+            z2 = _mm_xor_si128(z2, y2);
+            r2 = _mm_srli_epi32(r2, 23);
+            z2 = _mm_xor_si128(z2, r2);
+
+            y7 = z5;
+            y7 = _mm_add_epi32(y7, z6);
+            r7 = y7;
+            y7 = _mm_slli_epi32(y7, 9);
+            z7 = _mm_xor_si128(z7, y7);
+            r7 = _mm_srli_epi32(r7, 23);
+            z7 = _mm_xor_si128(z7, r7);
+
+            y3 = z1;
+            y3 = _mm_add_epi32(y3, z2);
+            r3 = y3;
+            y3 = _mm_slli_epi32(y3, 13);
+            z3 = _mm_xor_si128(z3, y3);
+            r3 = _mm_srli_epi32(r3, 19);
+            z3 = _mm_xor_si128(z3, r3);
+
+            y4 = z6;
+            y4 = _mm_add_epi32(y4, z7);
+            r4 = y4;
+            y4 = _mm_slli_epi32(y4, 13);
+            z4 = _mm_xor_si128(z4, y4);
+            r4 = _mm_srli_epi32(r4, 19);
+            z4 = _mm_xor_si128(z4, r4);
+
+            y0 = z2;
+            y0 = _mm_add_epi32(y0, z3);
+            r0 = y0;
+            y0 = _mm_slli_epi32(y0, 18);
+            z0 = _mm_xor_si128(z0, y0);
+            r0 = _mm_srli_epi32(r0, 14);
+            z0 = _mm_xor_si128(z0, r0);
+
+            y5 = z7;
+            y5 = _mm_add_epi32(y5, z4);
+            r5 = y5;
+            y5 = _mm_slli_epi32(y5, 18);
+            z5 = _mm_xor_si128(z5, y5);
+            r5 = _mm_srli_epi32(r5, 14);
+            z5 = _mm_xor_si128(z5, r5);
+
+            y11 = z9;
+            y11 = _mm_add_epi32(y11, z10);
+            r11 = y11;
+            y11 = _mm_slli_epi32(y11, 7);
+            z11 = _mm_xor_si128(z11, y11);
+            r11 = _mm_srli_epi32(r11, 25);
+            z11 = _mm_xor_si128(z11, r11);
+
+            y12 = z14;
+            y12 = _mm_add_epi32(y12, z15);
+            r12 = y12;
+            y12 = _mm_slli_epi32(y12, 7);
+            z12 = _mm_xor_si128(z12, y12);
+            r12 = _mm_srli_epi32(r12, 25);
+            z12 = _mm_xor_si128(z12, r12);
+
+            y8 = z10;
+            y8 = _mm_add_epi32(y8, z11);
+            r8 = y8;
+            y8 = _mm_slli_epi32(y8, 9);
+            z8 = _mm_xor_si128(z8, y8);
+            r8 = _mm_srli_epi32(r8, 23);
+            z8 = _mm_xor_si128(z8, r8);
+
+            y13 = z15;
+            y13 = _mm_add_epi32(y13, z12);
+            r13 = y13;
+            y13 = _mm_slli_epi32(y13, 9);
+            z13 = _mm_xor_si128(z13, y13);
+            r13 = _mm_srli_epi32(r13, 23);
+            z13 = _mm_xor_si128(z13, r13);
+
+            y9 = z11;
+            y9 = _mm_add_epi32(y9, z8);
+            r9 = y9;
+            y9 = _mm_slli_epi32(y9, 13);
+            z9 = _mm_xor_si128(z9, y9);
+            r9 = _mm_srli_epi32(r9, 19);
+            z9 = _mm_xor_si128(z9, r9);
+
+            y14 = z12;
+            y14 = _mm_add_epi32(y14, z13);
+            r14 = y14;
+            y14 = _mm_slli_epi32(y14, 13);
+            z14 = _mm_xor_si128(z14, y14);
+            r14 = _mm_srli_epi32(r14, 19);
+            z14 = _mm_xor_si128(z14, r14);
+
+            y10 = z8;
+            y10 = _mm_add_epi32(y10, z9);
+            r10 = y10;
+            y10 = _mm_slli_epi32(y10, 18);
+            z10 = _mm_xor_si128(z10, y10);
+            r10 = _mm_srli_epi32(r10, 14);
+            z10 = _mm_xor_si128(z10, r10);
+
+            y15 = z13;
+            y15 = _mm_add_epi32(y15, z14);
+            r15 = y15;
+            y15 = _mm_slli_epi32(y15, 18);
+            z15 = _mm_xor_si128(z15, y15);
+            r15 = _mm_srli_epi32(r15, 14);
+            z15 = _mm_xor_si128(z15, r15);
+        }
+
+/* store data ; this macro replicates the original amd64-xmm6 code */
+#define ONEQUAD_SHUFFLE(A, B, C, D)        \
+    z##A  = _mm_add_epi32(z##A, orig##A);  \
+    z##B  = _mm_add_epi32(z##B, orig##B);  \
+    z##C  = _mm_add_epi32(z##C, orig##C);  \
+    z##D  = _mm_add_epi32(z##D, orig##D);  \
+    in##A = _mm_cvtsi128_si32(z##A);       \
+    in##B = _mm_cvtsi128_si32(z##B);       \
+    in##C = _mm_cvtsi128_si32(z##C);       \
+    in##D = _mm_cvtsi128_si32(z##D);       \
+    z##A  = _mm_shuffle_epi32(z##A, 0x39); \
+    z##B  = _mm_shuffle_epi32(z##B, 0x39); \
+    z##C  = _mm_shuffle_epi32(z##C, 0x39); \
+    z##D  = _mm_shuffle_epi32(z##D, 0x39); \
+                                           \
+    in##A ^= *(uint32_t *) (m + 0);        \
+    in##B ^= *(uint32_t *) (m + 4);        \
+    in##C ^= *(uint32_t *) (m + 8);        \
+    in##D ^= *(uint32_t *) (m + 12);       \
+                                           \
+    *(uint32_t *) (c + 0)  = in##A;        \
+    *(uint32_t *) (c + 4)  = in##B;        \
+    *(uint32_t *) (c + 8)  = in##C;        \
+    *(uint32_t *) (c + 12) = in##D;        \
+                                           \
+    in##A = _mm_cvtsi128_si32(z##A);       \
+    in##B = _mm_cvtsi128_si32(z##B);       \
+    in##C = _mm_cvtsi128_si32(z##C);       \
+    in##D = _mm_cvtsi128_si32(z##D);       \
+    z##A  = _mm_shuffle_epi32(z##A, 0x39); \
+    z##B  = _mm_shuffle_epi32(z##B, 0x39); \
+    z##C  = _mm_shuffle_epi32(z##C, 0x39); \
+    z##D  = _mm_shuffle_epi32(z##D, 0x39); \
+                                           \
+    in##A ^= *(uint32_t *) (m + 64);       \
+    in##B ^= *(uint32_t *) (m + 68);       \
+    in##C ^= *(uint32_t *) (m + 72);       \
+    in##D ^= *(uint32_t *) (m + 76);       \
+    *(uint32_t *) (c + 64) = in##A;        \
+    *(uint32_t *) (c + 68) = in##B;        \
+    *(uint32_t *) (c + 72) = in##C;        \
+    *(uint32_t *) (c + 76) = in##D;        \
+                                           \
+    in##A = _mm_cvtsi128_si32(z##A);       \
+    in##B = _mm_cvtsi128_si32(z##B);       \
+    in##C = _mm_cvtsi128_si32(z##C);       \
+    in##D = _mm_cvtsi128_si32(z##D);       \
+    z##A  = _mm_shuffle_epi32(z##A, 0x39); \
+    z##B  = _mm_shuffle_epi32(z##B, 0x39); \
+    z##C  = _mm_shuffle_epi32(z##C, 0x39); \
+    z##D  = _mm_shuffle_epi32(z##D, 0x39); \
+                                           \
+    in##A ^= *(uint32_t *) (m + 128);      \
+    in##B ^= *(uint32_t *) (m + 132);      \
+    in##C ^= *(uint32_t *) (m + 136);      \
+    in##D ^= *(uint32_t *) (m + 140);      \
+    *(uint32_t *) (c + 128) = in##A;       \
+    *(uint32_t *) (c + 132) = in##B;       \
+    *(uint32_t *) (c + 136) = in##C;       \
+    *(uint32_t *) (c + 140) = in##D;       \
+                                           \
+    in##A = _mm_cvtsi128_si32(z##A);       \
+    in##B = _mm_cvtsi128_si32(z##B);       \
+    in##C = _mm_cvtsi128_si32(z##C);       \
+    in##D = _mm_cvtsi128_si32(z##D);       \
+                                           \
+    in##A ^= *(uint32_t *) (m + 192);      \
+    in##B ^= *(uint32_t *) (m + 196);      \
+    in##C ^= *(uint32_t *) (m + 200);      \
+    in##D ^= *(uint32_t *) (m + 204);      \
+    *(uint32_t *) (c + 192) = in##A;       \
+    *(uint32_t *) (c + 196) = in##B;       \
+    *(uint32_t *) (c + 200) = in##C;       \
+    *(uint32_t *) (c + 204) = in##D
+
+/* store data ; this macro replaces shuffle+mov by a direct extract; not much
+ * difference */
+#define ONEQUAD_EXTRACT(A, B, C, D)       \
+    z##A  = _mm_add_epi32(z##A, orig##A); \
+    z##B  = _mm_add_epi32(z##B, orig##B); \
+    z##C  = _mm_add_epi32(z##C, orig##C); \
+    z##D  = _mm_add_epi32(z##D, orig##D); \
+    in##A = _mm_cvtsi128_si32(z##A);      \
+    in##B = _mm_cvtsi128_si32(z##B);      \
+    in##C = _mm_cvtsi128_si32(z##C);      \
+    in##D = _mm_cvtsi128_si32(z##D);      \
+    in##A ^= *(uint32_t *) (m + 0);       \
+    in##B ^= *(uint32_t *) (m + 4);       \
+    in##C ^= *(uint32_t *) (m + 8);       \
+    in##D ^= *(uint32_t *) (m + 12);      \
+    *(uint32_t *) (c + 0)  = in##A;       \
+    *(uint32_t *) (c + 4)  = in##B;       \
+    *(uint32_t *) (c + 8)  = in##C;       \
+    *(uint32_t *) (c + 12) = in##D;       \
+                                          \
+    in##A = _mm_extract_epi32(z##A, 1);   \
+    in##B = _mm_extract_epi32(z##B, 1);   \
+    in##C = _mm_extract_epi32(z##C, 1);   \
+    in##D = _mm_extract_epi32(z##D, 1);   \
+                                          \
+    in##A ^= *(uint32_t *) (m + 64);      \
+    in##B ^= *(uint32_t *) (m + 68);      \
+    in##C ^= *(uint32_t *) (m + 72);      \
+    in##D ^= *(uint32_t *) (m + 76);      \
+    *(uint32_t *) (c + 64) = in##A;       \
+    *(uint32_t *) (c + 68) = in##B;       \
+    *(uint32_t *) (c + 72) = in##C;       \
+    *(uint32_t *) (c + 76) = in##D;       \
+                                          \
+    in##A = _mm_extract_epi32(z##A, 2);   \
+    in##B = _mm_extract_epi32(z##B, 2);   \
+    in##C = _mm_extract_epi32(z##C, 2);   \
+    in##D = _mm_extract_epi32(z##D, 2);   \
+                                          \
+    in##A ^= *(uint32_t *) (m + 128);     \
+    in##B ^= *(uint32_t *) (m + 132);     \
+    in##C ^= *(uint32_t *) (m + 136);     \
+    in##D ^= *(uint32_t *) (m + 140);     \
+    *(uint32_t *) (c + 128) = in##A;      \
+    *(uint32_t *) (c + 132) = in##B;      \
+    *(uint32_t *) (c + 136) = in##C;      \
+    *(uint32_t *) (c + 140) = in##D;      \
+                                          \
+    in##A = _mm_extract_epi32(z##A, 3);   \
+    in##B = _mm_extract_epi32(z##B, 3);   \
+    in##C = _mm_extract_epi32(z##C, 3);   \
+    in##D = _mm_extract_epi32(z##D, 3);   \
+                                          \
+    in##A ^= *(uint32_t *) (m + 192);     \
+    in##B ^= *(uint32_t *) (m + 196);     \
+    in##C ^= *(uint32_t *) (m + 200);     \
+    in##D ^= *(uint32_t *) (m + 204);     \
+    *(uint32_t *) (c + 192) = in##A;      \
+    *(uint32_t *) (c + 196) = in##B;      \
+    *(uint32_t *) (c + 200) = in##C;      \
+    *(uint32_t *) (c + 204) = in##D
+
+/* store data ; this macro first transpose data in-registers, and then store
+ * them in memory. much faster with icc. */
+#define ONEQUAD_TRANSPOSE(A, B, C, D)                                   \
+    z##A = _mm_add_epi32(z##A, orig##A);                                \
+    z##B = _mm_add_epi32(z##B, orig##B);                                \
+    z##C = _mm_add_epi32(z##C, orig##C);                                \
+    z##D = _mm_add_epi32(z##D, orig##D);                                \
+    y##A = _mm_unpacklo_epi32(z##A, z##B);                              \
+    y##B = _mm_unpacklo_epi32(z##C, z##D);                              \
+    y##C = _mm_unpackhi_epi32(z##A, z##B);                              \
+    y##D = _mm_unpackhi_epi32(z##C, z##D);                              \
+    z##A = _mm_unpacklo_epi64(y##A, y##B);                              \
+    z##B = _mm_unpackhi_epi64(y##A, y##B);                              \
+    z##C = _mm_unpacklo_epi64(y##C, y##D);                              \
+    z##D = _mm_unpackhi_epi64(y##C, y##D);                              \
+    y##A = _mm_xor_si128(z##A, _mm_loadu_si128((__m128i *) (m + 0)));   \
+    _mm_storeu_si128((__m128i *) (c + 0), y##A);                        \
+    y##B = _mm_xor_si128(z##B, _mm_loadu_si128((__m128i *) (m + 64)));  \
+    _mm_storeu_si128((__m128i *) (c + 64), y##B);                       \
+    y##C = _mm_xor_si128(z##C, _mm_loadu_si128((__m128i *) (m + 128))); \
+    _mm_storeu_si128((__m128i *) (c + 128), y##C);                      \
+    y##D = _mm_xor_si128(z##D, _mm_loadu_si128((__m128i *) (m + 192))); \
+    _mm_storeu_si128((__m128i *) (c + 192), y##D)
+
+#define ONEQUAD(A, B, C, D) ONEQUAD_TRANSPOSE(A, B, C, D)
+
+        ONEQUAD(0, 1, 2, 3);
+        m += 16;
+        c += 16;
+        ONEQUAD(4, 5, 6, 7);
+        m += 16;
+        c += 16;
+        ONEQUAD(8, 9, 10, 11);
+        m += 16;
+        c += 16;
+        ONEQUAD(12, 13, 14, 15);
+        m -= 48;
+        c -= 48;
+
+#undef ONEQUAD
+#undef ONEQUAD_TRANSPOSE
+#undef ONEQUAD_EXTRACT
+#undef ONEQUAD_SHUFFLE
+
+        bytes -= 256;
+        c += 256;
+        m += 256;
+    }
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/u8.h libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/u8.h
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa20/xmm6int/u8.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa20/xmm6int/u8.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,476 @@
+if (bytes >= 512) {
+    __m256i y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, y12, y13, y14,
+        y15;
+
+    /* the naive way seems as fast (if not a bit faster) than the vector way */
+    __m256i z0  = _mm256_set1_epi32(x[0]);
+    __m256i z5  = _mm256_set1_epi32(x[1]);
+    __m256i z10 = _mm256_set1_epi32(x[2]);
+    __m256i z15 = _mm256_set1_epi32(x[3]);
+    __m256i z12 = _mm256_set1_epi32(x[4]);
+    __m256i z1  = _mm256_set1_epi32(x[5]);
+    __m256i z6  = _mm256_set1_epi32(x[6]);
+    __m256i z11 = _mm256_set1_epi32(x[7]);
+    __m256i z8; /* useless */
+    __m256i z13 = _mm256_set1_epi32(x[9]);
+    __m256i z2  = _mm256_set1_epi32(x[10]);
+    __m256i z7  = _mm256_set1_epi32(x[11]);
+    __m256i z4  = _mm256_set1_epi32(x[12]);
+    __m256i z9; /* useless */
+    __m256i z14 = _mm256_set1_epi32(x[14]);
+    __m256i z3  = _mm256_set1_epi32(x[15]);
+
+    __m256i orig0 = z0;
+    __m256i orig1 = z1;
+    __m256i orig2 = z2;
+    __m256i orig3 = z3;
+    __m256i orig4 = z4;
+    __m256i orig5 = z5;
+    __m256i orig6 = z6;
+    __m256i orig7 = z7;
+    __m256i orig8;
+    __m256i orig9;
+    __m256i orig10 = z10;
+    __m256i orig11 = z11;
+    __m256i orig12 = z12;
+    __m256i orig13 = z13;
+    __m256i orig14 = z14;
+    __m256i orig15 = z15;
+
+    uint32_t in8;
+    uint32_t in9;
+    int      i;
+
+    while (bytes >= 512) {
+        /* vector implementation for z8 and z9 */
+        /* faster than the naive version for 8 blocks */
+        const __m256i addv8   = _mm256_set_epi64x(3, 2, 1, 0);
+        const __m256i addv9   = _mm256_set_epi64x(7, 6, 5, 4);
+        const __m256i permute = _mm256_set_epi32(7, 6, 3, 2, 5, 4, 1, 0);
+
+        __m256i  t8, t9;
+        uint64_t in89;
+
+        in8  = x[8];
+        in9  = x[13]; /* see arrays above for the address translation */
+        in89 = ((uint64_t) in8) | (((uint64_t) in9) << 32);
+
+        z8 = z9 = _mm256_broadcastq_epi64(_mm_cvtsi64_si128(in89));
+
+        t8 = _mm256_add_epi64(addv8, z8);
+        t9 = _mm256_add_epi64(addv9, z9);
+
+        z8 = _mm256_unpacklo_epi32(t8, t9);
+        z9 = _mm256_unpackhi_epi32(t8, t9);
+
+        t8 = _mm256_unpacklo_epi32(z8, z9);
+        t9 = _mm256_unpackhi_epi32(z8, z9);
+
+        /* required because unpack* are intra-lane */
+        z8 = _mm256_permutevar8x32_epi32(t8, permute);
+        z9 = _mm256_permutevar8x32_epi32(t9, permute);
+
+        orig8 = z8;
+        orig9 = z9;
+
+        in89 += 8;
+
+        x[8]  = in89 & 0xFFFFFFFF;
+        x[13] = (in89 >> 32) & 0xFFFFFFFF;
+
+        z5  = orig5;
+        z10 = orig10;
+        z15 = orig15;
+        z14 = orig14;
+        z3  = orig3;
+        z6  = orig6;
+        z11 = orig11;
+        z1  = orig1;
+
+        z7  = orig7;
+        z13 = orig13;
+        z2  = orig2;
+        z9  = orig9;
+        z0  = orig0;
+        z12 = orig12;
+        z4  = orig4;
+        z8  = orig8;
+
+        for (i = 0; i < 20; i += 2) {
+            /* the inner loop is a direct translation (regexp search/replace)
+             * from the amd64-xmm6 ASM */
+            __m256i r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13,
+                r14, r15;
+
+            y4 = z12;
+            y4 = _mm256_add_epi32(y4, z0);
+            r4 = y4;
+            y4 = _mm256_slli_epi32(y4, 7);
+            z4 = _mm256_xor_si256(z4, y4);
+            r4 = _mm256_srli_epi32(r4, 25);
+            z4 = _mm256_xor_si256(z4, r4);
+
+            y9 = z1;
+            y9 = _mm256_add_epi32(y9, z5);
+            r9 = y9;
+            y9 = _mm256_slli_epi32(y9, 7);
+            z9 = _mm256_xor_si256(z9, y9);
+            r9 = _mm256_srli_epi32(r9, 25);
+            z9 = _mm256_xor_si256(z9, r9);
+
+            y8 = z0;
+            y8 = _mm256_add_epi32(y8, z4);
+            r8 = y8;
+            y8 = _mm256_slli_epi32(y8, 9);
+            z8 = _mm256_xor_si256(z8, y8);
+            r8 = _mm256_srli_epi32(r8, 23);
+            z8 = _mm256_xor_si256(z8, r8);
+
+            y13 = z5;
+            y13 = _mm256_add_epi32(y13, z9);
+            r13 = y13;
+            y13 = _mm256_slli_epi32(y13, 9);
+            z13 = _mm256_xor_si256(z13, y13);
+            r13 = _mm256_srli_epi32(r13, 23);
+            z13 = _mm256_xor_si256(z13, r13);
+
+            y12 = z4;
+            y12 = _mm256_add_epi32(y12, z8);
+            r12 = y12;
+            y12 = _mm256_slli_epi32(y12, 13);
+            z12 = _mm256_xor_si256(z12, y12);
+            r12 = _mm256_srli_epi32(r12, 19);
+            z12 = _mm256_xor_si256(z12, r12);
+
+            y1 = z9;
+            y1 = _mm256_add_epi32(y1, z13);
+            r1 = y1;
+            y1 = _mm256_slli_epi32(y1, 13);
+            z1 = _mm256_xor_si256(z1, y1);
+            r1 = _mm256_srli_epi32(r1, 19);
+            z1 = _mm256_xor_si256(z1, r1);
+
+            y0 = z8;
+            y0 = _mm256_add_epi32(y0, z12);
+            r0 = y0;
+            y0 = _mm256_slli_epi32(y0, 18);
+            z0 = _mm256_xor_si256(z0, y0);
+            r0 = _mm256_srli_epi32(r0, 14);
+            z0 = _mm256_xor_si256(z0, r0);
+
+            y5 = z13;
+            y5 = _mm256_add_epi32(y5, z1);
+            r5 = y5;
+            y5 = _mm256_slli_epi32(y5, 18);
+            z5 = _mm256_xor_si256(z5, y5);
+            r5 = _mm256_srli_epi32(r5, 14);
+            z5 = _mm256_xor_si256(z5, r5);
+
+            y14 = z6;
+            y14 = _mm256_add_epi32(y14, z10);
+            r14 = y14;
+            y14 = _mm256_slli_epi32(y14, 7);
+            z14 = _mm256_xor_si256(z14, y14);
+            r14 = _mm256_srli_epi32(r14, 25);
+            z14 = _mm256_xor_si256(z14, r14);
+
+            y3 = z11;
+            y3 = _mm256_add_epi32(y3, z15);
+            r3 = y3;
+            y3 = _mm256_slli_epi32(y3, 7);
+            z3 = _mm256_xor_si256(z3, y3);
+            r3 = _mm256_srli_epi32(r3, 25);
+            z3 = _mm256_xor_si256(z3, r3);
+
+            y2 = z10;
+            y2 = _mm256_add_epi32(y2, z14);
+            r2 = y2;
+            y2 = _mm256_slli_epi32(y2, 9);
+            z2 = _mm256_xor_si256(z2, y2);
+            r2 = _mm256_srli_epi32(r2, 23);
+            z2 = _mm256_xor_si256(z2, r2);
+
+            y7 = z15;
+            y7 = _mm256_add_epi32(y7, z3);
+            r7 = y7;
+            y7 = _mm256_slli_epi32(y7, 9);
+            z7 = _mm256_xor_si256(z7, y7);
+            r7 = _mm256_srli_epi32(r7, 23);
+            z7 = _mm256_xor_si256(z7, r7);
+
+            y6 = z14;
+            y6 = _mm256_add_epi32(y6, z2);
+            r6 = y6;
+            y6 = _mm256_slli_epi32(y6, 13);
+            z6 = _mm256_xor_si256(z6, y6);
+            r6 = _mm256_srli_epi32(r6, 19);
+            z6 = _mm256_xor_si256(z6, r6);
+
+            y11 = z3;
+            y11 = _mm256_add_epi32(y11, z7);
+            r11 = y11;
+            y11 = _mm256_slli_epi32(y11, 13);
+            z11 = _mm256_xor_si256(z11, y11);
+            r11 = _mm256_srli_epi32(r11, 19);
+            z11 = _mm256_xor_si256(z11, r11);
+
+            y10 = z2;
+            y10 = _mm256_add_epi32(y10, z6);
+            r10 = y10;
+            y10 = _mm256_slli_epi32(y10, 18);
+            z10 = _mm256_xor_si256(z10, y10);
+            r10 = _mm256_srli_epi32(r10, 14);
+            z10 = _mm256_xor_si256(z10, r10);
+
+            y1 = z3;
+            y1 = _mm256_add_epi32(y1, z0);
+            r1 = y1;
+            y1 = _mm256_slli_epi32(y1, 7);
+            z1 = _mm256_xor_si256(z1, y1);
+            r1 = _mm256_srli_epi32(r1, 25);
+            z1 = _mm256_xor_si256(z1, r1);
+
+            y15 = z7;
+            y15 = _mm256_add_epi32(y15, z11);
+            r15 = y15;
+            y15 = _mm256_slli_epi32(y15, 18);
+            z15 = _mm256_xor_si256(z15, y15);
+            r15 = _mm256_srli_epi32(r15, 14);
+            z15 = _mm256_xor_si256(z15, r15);
+
+            y6 = z4;
+            y6 = _mm256_add_epi32(y6, z5);
+            r6 = y6;
+            y6 = _mm256_slli_epi32(y6, 7);
+            z6 = _mm256_xor_si256(z6, y6);
+            r6 = _mm256_srli_epi32(r6, 25);
+            z6 = _mm256_xor_si256(z6, r6);
+
+            y2 = z0;
+            y2 = _mm256_add_epi32(y2, z1);
+            r2 = y2;
+            y2 = _mm256_slli_epi32(y2, 9);
+            z2 = _mm256_xor_si256(z2, y2);
+            r2 = _mm256_srli_epi32(r2, 23);
+            z2 = _mm256_xor_si256(z2, r2);
+
+            y7 = z5;
+            y7 = _mm256_add_epi32(y7, z6);
+            r7 = y7;
+            y7 = _mm256_slli_epi32(y7, 9);
+            z7 = _mm256_xor_si256(z7, y7);
+            r7 = _mm256_srli_epi32(r7, 23);
+            z7 = _mm256_xor_si256(z7, r7);
+
+            y3 = z1;
+            y3 = _mm256_add_epi32(y3, z2);
+            r3 = y3;
+            y3 = _mm256_slli_epi32(y3, 13);
+            z3 = _mm256_xor_si256(z3, y3);
+            r3 = _mm256_srli_epi32(r3, 19);
+            z3 = _mm256_xor_si256(z3, r3);
+
+            y4 = z6;
+            y4 = _mm256_add_epi32(y4, z7);
+            r4 = y4;
+            y4 = _mm256_slli_epi32(y4, 13);
+            z4 = _mm256_xor_si256(z4, y4);
+            r4 = _mm256_srli_epi32(r4, 19);
+            z4 = _mm256_xor_si256(z4, r4);
+
+            y0 = z2;
+            y0 = _mm256_add_epi32(y0, z3);
+            r0 = y0;
+            y0 = _mm256_slli_epi32(y0, 18);
+            z0 = _mm256_xor_si256(z0, y0);
+            r0 = _mm256_srli_epi32(r0, 14);
+            z0 = _mm256_xor_si256(z0, r0);
+
+            y5 = z7;
+            y5 = _mm256_add_epi32(y5, z4);
+            r5 = y5;
+            y5 = _mm256_slli_epi32(y5, 18);
+            z5 = _mm256_xor_si256(z5, y5);
+            r5 = _mm256_srli_epi32(r5, 14);
+            z5 = _mm256_xor_si256(z5, r5);
+
+            y11 = z9;
+            y11 = _mm256_add_epi32(y11, z10);
+            r11 = y11;
+            y11 = _mm256_slli_epi32(y11, 7);
+            z11 = _mm256_xor_si256(z11, y11);
+            r11 = _mm256_srli_epi32(r11, 25);
+            z11 = _mm256_xor_si256(z11, r11);
+
+            y12 = z14;
+            y12 = _mm256_add_epi32(y12, z15);
+            r12 = y12;
+            y12 = _mm256_slli_epi32(y12, 7);
+            z12 = _mm256_xor_si256(z12, y12);
+            r12 = _mm256_srli_epi32(r12, 25);
+            z12 = _mm256_xor_si256(z12, r12);
+
+            y8 = z10;
+            y8 = _mm256_add_epi32(y8, z11);
+            r8 = y8;
+            y8 = _mm256_slli_epi32(y8, 9);
+            z8 = _mm256_xor_si256(z8, y8);
+            r8 = _mm256_srli_epi32(r8, 23);
+            z8 = _mm256_xor_si256(z8, r8);
+
+            y13 = z15;
+            y13 = _mm256_add_epi32(y13, z12);
+            r13 = y13;
+            y13 = _mm256_slli_epi32(y13, 9);
+            z13 = _mm256_xor_si256(z13, y13);
+            r13 = _mm256_srli_epi32(r13, 23);
+            z13 = _mm256_xor_si256(z13, r13);
+
+            y9 = z11;
+            y9 = _mm256_add_epi32(y9, z8);
+            r9 = y9;
+            y9 = _mm256_slli_epi32(y9, 13);
+            z9 = _mm256_xor_si256(z9, y9);
+            r9 = _mm256_srli_epi32(r9, 19);
+            z9 = _mm256_xor_si256(z9, r9);
+
+            y14 = z12;
+            y14 = _mm256_add_epi32(y14, z13);
+            r14 = y14;
+            y14 = _mm256_slli_epi32(y14, 13);
+            z14 = _mm256_xor_si256(z14, y14);
+            r14 = _mm256_srli_epi32(r14, 19);
+            z14 = _mm256_xor_si256(z14, r14);
+
+            y10 = z8;
+            y10 = _mm256_add_epi32(y10, z9);
+            r10 = y10;
+            y10 = _mm256_slli_epi32(y10, 18);
+            z10 = _mm256_xor_si256(z10, y10);
+            r10 = _mm256_srli_epi32(r10, 14);
+            z10 = _mm256_xor_si256(z10, r10);
+
+            y15 = z13;
+            y15 = _mm256_add_epi32(y15, z14);
+            r15 = y15;
+            y15 = _mm256_slli_epi32(y15, 18);
+            z15 = _mm256_xor_si256(z15, y15);
+            r15 = _mm256_srli_epi32(r15, 14);
+            z15 = _mm256_xor_si256(z15, r15);
+        }
+
+/* store data ; this macro first transpose data in-registers, and then store
+ * them in memory. much faster with icc. */
+#define ONEQUAD_TRANSPOSE(A, B, C, D)                              \
+    {                                                              \
+        __m128i t0, t1, t2, t3;                                    \
+        z##A = _mm256_add_epi32(z##A, orig##A);                    \
+        z##B = _mm256_add_epi32(z##B, orig##B);                    \
+        z##C = _mm256_add_epi32(z##C, orig##C);                    \
+        z##D = _mm256_add_epi32(z##D, orig##D);                    \
+        y##A = _mm256_unpacklo_epi32(z##A, z##B);                  \
+        y##B = _mm256_unpacklo_epi32(z##C, z##D);                  \
+        y##C = _mm256_unpackhi_epi32(z##A, z##B);                  \
+        y##D = _mm256_unpackhi_epi32(z##C, z##D);                  \
+        z##A = _mm256_unpacklo_epi64(y##A, y##B);                  \
+        z##B = _mm256_unpackhi_epi64(y##A, y##B);                  \
+        z##C = _mm256_unpacklo_epi64(y##C, y##D);                  \
+        z##D = _mm256_unpackhi_epi64(y##C, y##D);                  \
+        t0   = _mm_xor_si128(_mm256_extracti128_si256(z##A, 0),    \
+                           _mm_loadu_si128((__m128i*) (m + 0)));   \
+        _mm_storeu_si128((__m128i*) (c + 0), t0);                  \
+        t1 = _mm_xor_si128(_mm256_extracti128_si256(z##B, 0),      \
+                           _mm_loadu_si128((__m128i*) (m + 64)));  \
+        _mm_storeu_si128((__m128i*) (c + 64), t1);                 \
+        t2 = _mm_xor_si128(_mm256_extracti128_si256(z##C, 0),      \
+                           _mm_loadu_si128((__m128i*) (m + 128))); \
+        _mm_storeu_si128((__m128i*) (c + 128), t2);                \
+        t3 = _mm_xor_si128(_mm256_extracti128_si256(z##D, 0),      \
+                           _mm_loadu_si128((__m128i*) (m + 192))); \
+        _mm_storeu_si128((__m128i*) (c + 192), t3);                \
+        t0 = _mm_xor_si128(_mm256_extracti128_si256(z##A, 1),      \
+                           _mm_loadu_si128((__m128i*) (m + 256))); \
+        _mm_storeu_si128((__m128i*) (c + 256), t0);                \
+        t1 = _mm_xor_si128(_mm256_extracti128_si256(z##B, 1),      \
+                           _mm_loadu_si128((__m128i*) (m + 320))); \
+        _mm_storeu_si128((__m128i*) (c + 320), t1);                \
+        t2 = _mm_xor_si128(_mm256_extracti128_si256(z##C, 1),      \
+                           _mm_loadu_si128((__m128i*) (m + 384))); \
+        _mm_storeu_si128((__m128i*) (c + 384), t2);                \
+        t3 = _mm_xor_si128(_mm256_extracti128_si256(z##D, 1),      \
+                           _mm_loadu_si128((__m128i*) (m + 448))); \
+        _mm_storeu_si128((__m128i*) (c + 448), t3);                \
+    }
+
+#define ONEQUAD(A, B, C, D) ONEQUAD_TRANSPOSE(A, B, C, D)
+
+#define ONEQUAD_UNPCK(A, B, C, D)                 \
+    {                                             \
+        z##A = _mm256_add_epi32(z##A, orig##A);   \
+        z##B = _mm256_add_epi32(z##B, orig##B);   \
+        z##C = _mm256_add_epi32(z##C, orig##C);   \
+        z##D = _mm256_add_epi32(z##D, orig##D);   \
+        y##A = _mm256_unpacklo_epi32(z##A, z##B); \
+        y##B = _mm256_unpacklo_epi32(z##C, z##D); \
+        y##C = _mm256_unpackhi_epi32(z##A, z##B); \
+        y##D = _mm256_unpackhi_epi32(z##C, z##D); \
+        z##A = _mm256_unpacklo_epi64(y##A, y##B); \
+        z##B = _mm256_unpackhi_epi64(y##A, y##B); \
+        z##C = _mm256_unpacklo_epi64(y##C, y##D); \
+        z##D = _mm256_unpackhi_epi64(y##C, y##D); \
+    }
+
+#define ONEOCTO(A, B, C, D, A2, B2, C2, D2)                                     \
+    {                                                                           \
+        ONEQUAD_UNPCK(A, B, C, D);                                              \
+        ONEQUAD_UNPCK(A2, B2, C2, D2);                                          \
+        y##A  = _mm256_permute2x128_si256(z##A, z##A2, 0x20);                   \
+        y##A2 = _mm256_permute2x128_si256(z##A, z##A2, 0x31);                   \
+        y##B  = _mm256_permute2x128_si256(z##B, z##B2, 0x20);                   \
+        y##B2 = _mm256_permute2x128_si256(z##B, z##B2, 0x31);                   \
+        y##C  = _mm256_permute2x128_si256(z##C, z##C2, 0x20);                   \
+        y##C2 = _mm256_permute2x128_si256(z##C, z##C2, 0x31);                   \
+        y##D  = _mm256_permute2x128_si256(z##D, z##D2, 0x20);                   \
+        y##D2 = _mm256_permute2x128_si256(z##D, z##D2, 0x31);                   \
+        y##A  = _mm256_xor_si256(y##A, _mm256_loadu_si256((__m256i*) (m + 0))); \
+        y##B =                                                                  \
+            _mm256_xor_si256(y##B, _mm256_loadu_si256((__m256i*) (m + 64)));    \
+        y##C =                                                                  \
+            _mm256_xor_si256(y##C, _mm256_loadu_si256((__m256i*) (m + 128)));   \
+        y##D =                                                                  \
+            _mm256_xor_si256(y##D, _mm256_loadu_si256((__m256i*) (m + 192)));   \
+        y##A2 =                                                                 \
+            _mm256_xor_si256(y##A2, _mm256_loadu_si256((__m256i*) (m + 256)));  \
+        y##B2 =                                                                 \
+            _mm256_xor_si256(y##B2, _mm256_loadu_si256((__m256i*) (m + 320)));  \
+        y##C2 =                                                                 \
+            _mm256_xor_si256(y##C2, _mm256_loadu_si256((__m256i*) (m + 384)));  \
+        y##D2 =                                                                 \
+            _mm256_xor_si256(y##D2, _mm256_loadu_si256((__m256i*) (m + 448)));  \
+        _mm256_storeu_si256((__m256i*) (c + 0), y##A);                          \
+        _mm256_storeu_si256((__m256i*) (c + 64), y##B);                         \
+        _mm256_storeu_si256((__m256i*) (c + 128), y##C);                        \
+        _mm256_storeu_si256((__m256i*) (c + 192), y##D);                        \
+        _mm256_storeu_si256((__m256i*) (c + 256), y##A2);                       \
+        _mm256_storeu_si256((__m256i*) (c + 320), y##B2);                       \
+        _mm256_storeu_si256((__m256i*) (c + 384), y##C2);                       \
+        _mm256_storeu_si256((__m256i*) (c + 448), y##D2);                       \
+    }
+
+        ONEOCTO(0, 1, 2, 3, 4, 5, 6, 7);
+        m += 32;
+        c += 32;
+        ONEOCTO(8, 9, 10, 11, 12, 13, 14, 15);
+        m -= 32;
+        c -= 32;
+
+#undef ONEQUAD
+#undef ONEQUAD_TRANSPOSE
+#undef ONEQUAD_UNPCK
+#undef ONEOCTO
+
+        bytes -= 512;
+        c += 512;
+        m += 512;
+    }
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa2012/ref/stream_salsa2012.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa2012/ref/stream_salsa2012.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa2012/ref/stream_salsa2012.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa2012/ref/stream_salsa2012.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,51 +0,0 @@
-/*
-version 20140420
-D. J. Bernstein
-Public domain.
-*/
-
-#include "crypto_core_salsa2012.h"
-#include "crypto_stream_salsa2012.h"
-#include "utils.h"
-
-int crypto_stream_salsa2012(
-        unsigned char *c,unsigned long long clen,
-  const unsigned char *n,
-  const unsigned char *k
-)
-{
-  unsigned char in[16];
-  unsigned char block[64];
-  unsigned char kcopy[32];
-  unsigned int i;
-  unsigned int u;
-
-  if (!clen) return 0;
-
-  for (i = 0;i < 32;++i) kcopy[i] = k[i];
-  for (i = 0;i < 8;++i) in[i] = n[i];
-  for (i = 8;i < 16;++i) in[i] = 0;
-
-  while (clen >= 64) {
-    crypto_core_salsa2012(c,in,kcopy,NULL);
-
-    u = 1;
-    for (i = 8;i < 16;++i) {
-      u += (unsigned int) in[i];
-      in[i] = u;
-      u >>= 8;
-    }
-
-    clen -= 64;
-    c += 64;
-  }
-
-  if (clen) {
-    crypto_core_salsa2012(block,in,kcopy,NULL);
-    for (i = 0;i < (unsigned int) clen;++i) c[i] = block[i];
-  }
-  sodium_memzero(block, sizeof block);
-  sodium_memzero(kcopy, sizeof kcopy);
-
-  return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa2012/ref/stream_salsa2012_ref.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa2012/ref/stream_salsa2012_ref.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa2012/ref/stream_salsa2012_ref.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa2012/ref/stream_salsa2012_ref.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,106 @@
+/*
+version 20140420
+D. J. Bernstein
+Public domain.
+*/
+
+#include <stdint.h>
+
+#include "crypto_core_salsa2012.h"
+#include "crypto_stream_salsa2012.h"
+#include "utils.h"
+
+int
+crypto_stream_salsa2012(unsigned char *c, unsigned long long clen,
+                        const unsigned char *n, const unsigned char *k)
+{
+    unsigned char in[16];
+    unsigned char block[64];
+    unsigned char kcopy[32];
+    unsigned int  i;
+    unsigned int  u;
+
+    if (!clen) {
+        return 0;
+    }
+    for (i = 0; i < 32; ++i) {
+        kcopy[i] = k[i];
+    }
+    for (i = 0; i < 8; ++i) {
+        in[i] = n[i];
+    }
+    for (i = 8; i < 16; ++i) {
+        in[i] = 0;
+    }
+    while (clen >= 64) {
+        crypto_core_salsa2012(c, in, kcopy, NULL);
+        u = 1;
+        for (i = 8; i < 16; ++i) {
+            u += (unsigned int)in[i];
+            in[i] = u;
+            u >>= 8;
+        }
+        clen -= 64;
+        c += 64;
+    }
+    if (clen) {
+        crypto_core_salsa2012(block, in, kcopy, NULL);
+        for (i = 0; i < (unsigned int)clen; ++i) {
+            c[i] = block[i];
+        }
+    }
+    sodium_memzero(block, sizeof block);
+    sodium_memzero(kcopy, sizeof kcopy);
+
+    return 0;
+}
+
+int
+crypto_stream_salsa2012_xor(unsigned char *c, const unsigned char *m,
+                            unsigned long long mlen, const unsigned char *n,
+                            const unsigned char *k)
+{
+    unsigned char in[16];
+    unsigned char block[64];
+    unsigned char kcopy[32];
+    unsigned int  i;
+    unsigned int  u;
+
+    if (!mlen) {
+        return 0;
+    }
+    for (i = 0; i < 32; ++i) {
+        kcopy[i] = k[i];
+    }
+    for (i = 0; i < 8; ++i) {
+        in[i] = n[i];
+    }
+    for (i = 8; i < 16; ++i) {
+        in[i] = 0;
+    }
+    while (mlen >= 64) {
+        crypto_core_salsa2012(block, in, kcopy, NULL);
+        for (i = 0; i < 64; ++i) {
+            c[i] = m[i] ^ block[i];
+        }
+        u = 1;
+        for (i = 8; i < 16; ++i) {
+            u += (unsigned int)in[i];
+            in[i] = u;
+            u >>= 8;
+        }
+        mlen -= 64;
+        c += 64;
+        m += 64;
+    }
+    if (mlen) {
+        crypto_core_salsa2012(block, in, kcopy, NULL);
+        for (i = 0; i < (unsigned int)mlen; ++i) {
+            c[i] = m[i] ^ block[i];
+        }
+    }
+    sodium_memzero(block, sizeof block);
+    sodium_memzero(kcopy, sizeof kcopy);
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa2012/ref/xor_salsa2012.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa2012/ref/xor_salsa2012.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa2012/ref/xor_salsa2012.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa2012/ref/xor_salsa2012.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,54 +0,0 @@
-/*
-version 20140420
-D. J. Bernstein
-Public domain.
-*/
-
-#include "crypto_core_salsa2012.h"
-#include "crypto_stream_salsa2012.h"
-#include "utils.h"
-
-int crypto_stream_salsa2012_xor(
-        unsigned char *c,
-  const unsigned char *m,unsigned long long mlen,
-  const unsigned char *n,
-  const unsigned char *k
-)
-{
-  unsigned char in[16];
-  unsigned char block[64];
-  unsigned char kcopy[32];
-  unsigned int i;
-  unsigned int u;
-
-  if (!mlen) return 0;
-
-  for (i = 0;i < 32;++i) kcopy[i] = k[i];
-  for (i = 0;i < 8;++i) in[i] = n[i];
-  for (i = 8;i < 16;++i) in[i] = 0;
-
-  while (mlen >= 64) {
-    crypto_core_salsa2012(block,in,kcopy,NULL);
-    for (i = 0;i < 64;++i) c[i] = m[i] ^ block[i];
-
-    u = 1;
-    for (i = 8;i < 16;++i) {
-      u += (unsigned int) in[i];
-      in[i] = u;
-      u >>= 8;
-    }
-
-    mlen -= 64;
-    c += 64;
-    m += 64;
-  }
-
-  if (mlen) {
-    crypto_core_salsa2012(block,in,kcopy,NULL);
-    for (i = 0;i < (unsigned int) mlen;++i) c[i] = m[i] ^ block[i];
-  }
-  sodium_memzero(block, sizeof block);
-  sodium_memzero(kcopy, sizeof kcopy);
-
-  return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa2012/stream_salsa2012_api.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa2012/stream_salsa2012_api.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa2012/stream_salsa2012_api.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa2012/stream_salsa2012_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,11 +0,0 @@
-#include "crypto_stream_salsa2012.h"
-
-size_t
-crypto_stream_salsa2012_keybytes(void) {
-    return crypto_stream_salsa2012_KEYBYTES;
-}
-
-size_t
-crypto_stream_salsa2012_noncebytes(void) {
-    return crypto_stream_salsa2012_NONCEBYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa2012/stream_salsa2012.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa2012/stream_salsa2012.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa2012/stream_salsa2012.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa2012/stream_salsa2012.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,20 @@
+#include "crypto_stream_salsa2012.h"
+#include "randombytes.h"
+
+size_t
+crypto_stream_salsa2012_keybytes(void)
+{
+    return crypto_stream_salsa2012_KEYBYTES;
+}
+
+size_t
+crypto_stream_salsa2012_noncebytes(void)
+{
+    return crypto_stream_salsa2012_NONCEBYTES;
+}
+
+void
+crypto_stream_salsa2012_keygen(unsigned char k[crypto_stream_salsa2012_KEYBYTES])
+{
+    randombytes_buf(k, crypto_stream_salsa2012_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa208/ref/stream_salsa208.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa208/ref/stream_salsa208.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa208/ref/stream_salsa208.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa208/ref/stream_salsa208.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,51 +0,0 @@
-/*
-version 20140420
-D. J. Bernstein
-Public domain.
-*/
-
-#include "crypto_core_salsa208.h"
-#include "crypto_stream_salsa208.h"
-#include "utils.h"
-
-int crypto_stream_salsa208(
-        unsigned char *c,unsigned long long clen,
-  const unsigned char *n,
-  const unsigned char *k
-)
-{
-  unsigned char in[16];
-  unsigned char block[64];
-  unsigned char kcopy[32];
-  unsigned int i;
-  unsigned int u;
-
-  if (!clen) return 0;
-
-  for (i = 0;i < 32;++i) kcopy[i] = k[i];
-  for (i = 0;i < 8;++i) in[i] = n[i];
-  for (i = 8;i < 16;++i) in[i] = 0;
-
-  while (clen >= 64) {
-    crypto_core_salsa208(c,in,kcopy,NULL);
-
-    u = 1;
-    for (i = 8;i < 16;++i) {
-      u += (unsigned int) in[i];
-      in[i] = u;
-      u >>= 8;
-    }
-
-    clen -= 64;
-    c += 64;
-  }
-
-  if (clen) {
-    crypto_core_salsa208(block,in,kcopy,NULL);
-    for (i = 0;i < (unsigned int) clen;++i) c[i] = block[i];
-  }
-  sodium_memzero(block, sizeof block);
-  sodium_memzero(kcopy, sizeof kcopy);
-
-  return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa208/ref/stream_salsa208_ref.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa208/ref/stream_salsa208_ref.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa208/ref/stream_salsa208_ref.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa208/ref/stream_salsa208_ref.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,106 @@
+/*
+version 20140420
+D. J. Bernstein
+Public domain.
+*/
+
+#include <stdint.h>
+
+#include "crypto_core_salsa208.h"
+#include "crypto_stream_salsa208.h"
+#include "utils.h"
+
+int
+crypto_stream_salsa208(unsigned char *c, unsigned long long clen,
+                       const unsigned char *n, const unsigned char *k)
+{
+    unsigned char in[16];
+    unsigned char block[64];
+    unsigned char kcopy[32];
+    unsigned int  i;
+    unsigned int  u;
+
+    if (!clen) {
+        return 0;
+    }
+    for (i = 0; i < 32; ++i) {
+        kcopy[i] = k[i];
+    }
+    for (i = 0; i < 8; ++i) {
+        in[i] = n[i];
+    }
+    for (i = 8; i < 16; ++i) {
+        in[i] = 0;
+    }
+    while (clen >= 64) {
+        crypto_core_salsa208(c, in, kcopy, NULL);
+        u = 1;
+        for (i = 8; i < 16; ++i) {
+            u += (unsigned int)in[i];
+            in[i] = u;
+            u >>= 8;
+        }
+        clen -= 64;
+        c += 64;
+    }
+    if (clen) {
+        crypto_core_salsa208(block, in, kcopy, NULL);
+        for (i = 0; i < (unsigned int)clen; ++i) {
+            c[i] = block[i];
+        }
+    }
+    sodium_memzero(block, sizeof block);
+    sodium_memzero(kcopy, sizeof kcopy);
+
+    return 0;
+}
+
+int
+crypto_stream_salsa208_xor(unsigned char *c, const unsigned char *m,
+                           unsigned long long mlen, const unsigned char *n,
+                           const unsigned char *k)
+{
+    unsigned char in[16];
+    unsigned char block[64];
+    unsigned char kcopy[32];
+    unsigned int  i;
+    unsigned int  u;
+
+    if (!mlen) {
+        return 0;
+    }
+    for (i = 0; i < 32; ++i) {
+        kcopy[i] = k[i];
+    }
+    for (i = 0; i < 8; ++i) {
+        in[i] = n[i];
+    }
+    for (i = 8; i < 16; ++i) {
+        in[i] = 0;
+    }
+    while (mlen >= 64) {
+        crypto_core_salsa208(block, in, kcopy, NULL);
+        for (i = 0; i < 64; ++i) {
+            c[i] = m[i] ^ block[i];
+        }
+        u = 1;
+        for (i = 8; i < 16; ++i) {
+            u += (unsigned int)in[i];
+            in[i] = u;
+            u >>= 8;
+        }
+        mlen -= 64;
+        c += 64;
+        m += 64;
+    }
+    if (mlen) {
+        crypto_core_salsa208(block, in, kcopy, NULL);
+        for (i = 0; i < (unsigned int)mlen; ++i) {
+            c[i] = m[i] ^ block[i];
+        }
+    }
+    sodium_memzero(block, sizeof block);
+    sodium_memzero(kcopy, sizeof kcopy);
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa208/ref/xor_salsa208.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa208/ref/xor_salsa208.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa208/ref/xor_salsa208.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa208/ref/xor_salsa208.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,54 +0,0 @@
-/*
-version 20140420
-D. J. Bernstein
-Public domain.
-*/
-
-#include "crypto_core_salsa208.h"
-#include "crypto_stream_salsa208.h"
-#include "utils.h"
-
-int crypto_stream_salsa208_xor(
-        unsigned char *c,
-  const unsigned char *m,unsigned long long mlen,
-  const unsigned char *n,
-  const unsigned char *k
-)
-{
-  unsigned char in[16];
-  unsigned char block[64];
-  unsigned char kcopy[32];
-  unsigned int i;
-  unsigned int u;
-
-  if (!mlen) return 0;
-
-  for (i = 0;i < 32;++i) kcopy[i] = k[i];
-  for (i = 0;i < 8;++i) in[i] = n[i];
-  for (i = 8;i < 16;++i) in[i] = 0;
-
-  while (mlen >= 64) {
-    crypto_core_salsa208(block,in,kcopy,NULL);
-    for (i = 0;i < 64;++i) c[i] = m[i] ^ block[i];
-
-    u = 1;
-    for (i = 8;i < 16;++i) {
-      u += (unsigned int) in[i];
-      in[i] = u;
-      u >>= 8;
-    }
-
-    mlen -= 64;
-    c += 64;
-    m += 64;
-  }
-
-  if (mlen) {
-    crypto_core_salsa208(block,in,kcopy,NULL);
-    for (i = 0;i < (unsigned int) mlen;++i) c[i] = m[i] ^ block[i];
-  }
-  sodium_memzero(block, sizeof block);
-  sodium_memzero(kcopy, sizeof kcopy);
-
-  return 0;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa208/stream_salsa208_api.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa208/stream_salsa208_api.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa208/stream_salsa208_api.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa208/stream_salsa208_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,11 +0,0 @@
-#include "crypto_stream_salsa208.h"
-
-size_t
-crypto_stream_salsa208_keybytes(void) {
-    return crypto_stream_salsa208_KEYBYTES;
-}
-
-size_t
-crypto_stream_salsa208_noncebytes(void) {
-    return crypto_stream_salsa208_NONCEBYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/salsa208/stream_salsa208.c libsodium-1.0.12/src/libsodium/crypto_stream/salsa208/stream_salsa208.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/salsa208/stream_salsa208.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/salsa208/stream_salsa208.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,20 @@
+#include "crypto_stream_salsa208.h"
+#include "randombytes.h"
+
+size_t
+crypto_stream_salsa208_keybytes(void)
+{
+    return crypto_stream_salsa208_KEYBYTES;
+}
+
+size_t
+crypto_stream_salsa208_noncebytes(void)
+{
+    return crypto_stream_salsa208_NONCEBYTES;
+}
+
+void
+crypto_stream_salsa208_keygen(unsigned char k[crypto_stream_salsa208_KEYBYTES])
+{
+    randombytes_buf(k, crypto_stream_salsa208_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/xchacha20/stream_xchacha20.c libsodium-1.0.12/src/libsodium/crypto_stream/xchacha20/stream_xchacha20.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/xchacha20/stream_xchacha20.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/xchacha20/stream_xchacha20.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,63 @@
+
+#include <stdlib.h>
+
+#include "crypto_core_hchacha20.h"
+#include "crypto_stream_chacha20.h"
+#include "crypto_stream_xchacha20.h"
+#include "private/common.h"
+#include "randombytes.h"
+
+size_t
+crypto_stream_xchacha20_keybytes(void)
+{
+    return crypto_stream_xchacha20_KEYBYTES;
+}
+
+size_t
+crypto_stream_xchacha20_noncebytes(void)
+{
+    return crypto_stream_xchacha20_NONCEBYTES;
+}
+
+int
+crypto_stream_xchacha20(unsigned char *c, unsigned long long clen,
+                        const unsigned char *n, const unsigned char *k)
+{
+    unsigned char k2[crypto_core_hchacha20_OUTPUTBYTES];
+
+    crypto_core_hchacha20(k2, n, k, NULL);
+    COMPILER_ASSERT(crypto_stream_chacha20_KEYBYTES <= sizeof k2);
+    COMPILER_ASSERT(crypto_stream_chacha20_NONCEBYTES ==
+                    crypto_stream_xchacha20_NONCEBYTES -
+                        crypto_core_hchacha20_INPUTBYTES);
+
+    return crypto_stream_chacha20(c, clen, n + crypto_core_hchacha20_INPUTBYTES,
+                                  k2);
+}
+
+int
+crypto_stream_xchacha20_xor_ic(unsigned char *c, const unsigned char *m,
+                               unsigned long long mlen, const unsigned char *n,
+                               uint64_t ic, const unsigned char *k)
+{
+    unsigned char k2[crypto_core_hchacha20_OUTPUTBYTES];
+
+    crypto_core_hchacha20(k2, n, k, NULL);
+    return crypto_stream_chacha20_xor_ic(
+        c, m, mlen, n + crypto_core_hchacha20_INPUTBYTES, ic, k2);
+}
+
+int
+crypto_stream_xchacha20_xor(unsigned char *c, const unsigned char *m,
+                            unsigned long long mlen, const unsigned char *n,
+                            const unsigned char *k)
+{
+    return crypto_stream_xchacha20_xor_ic(c, m, mlen, n, 0U, k);
+}
+
+void
+crypto_stream_xchacha20_keygen(
+    unsigned char k[crypto_stream_xchacha20_KEYBYTES])
+{
+    randombytes_buf(k, crypto_stream_xchacha20_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/xsalsa20/ref/stream_xsalsa20.c libsodium-1.0.12/src/libsodium/crypto_stream/xsalsa20/ref/stream_xsalsa20.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/xsalsa20/ref/stream_xsalsa20.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/xsalsa20/ref/stream_xsalsa20.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,24 +0,0 @@
-/*
-version 20080914
-D. J. Bernstein
-Public domain.
-*/
-
-#include "crypto_core_hsalsa20.h"
-#include "crypto_stream_salsa20.h"
-#include "crypto_stream_xsalsa20.h"
-#include "utils.h"
-
-int crypto_stream_xsalsa20(
-        unsigned char *c,unsigned long long clen,
-  const unsigned char *n,
-  const unsigned char *k
-)
-{
-  unsigned char subkey[32];
-  int ret;
-  crypto_core_hsalsa20(subkey,n,k,NULL);
-  ret = crypto_stream_salsa20(c,clen,n + 16,subkey);
-  sodium_memzero(subkey, sizeof subkey);
-  return ret;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/xsalsa20/ref/xor_xsalsa20.c libsodium-1.0.12/src/libsodium/crypto_stream/xsalsa20/ref/xor_xsalsa20.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/xsalsa20/ref/xor_xsalsa20.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_stream/xsalsa20/ref/xor_xsalsa20.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,35 +0,0 @@
-/*
-version 20080913
-D. J. Bernstein
-Public domain.
-*/
-
-#include "crypto_core_hsalsa20.h"
-#include "crypto_stream_salsa20.h"
-#include "crypto_stream_xsalsa20.h"
-#include "utils.h"
-
-int crypto_stream_xsalsa20_xor_ic(
-        unsigned char *c,
-  const unsigned char *m,unsigned long long mlen,
-  const unsigned char *n,uint64_t ic,
-  const unsigned char *k
-)
-{
-  unsigned char subkey[32];
-  int ret;
-  crypto_core_hsalsa20(subkey,n,k,NULL);
-  ret = crypto_stream_salsa20_xor_ic(c,m,mlen,n + 16,ic,subkey);
-  sodium_memzero(subkey, sizeof subkey);
-  return ret;
-}
-
-int crypto_stream_xsalsa20_xor(
-        unsigned char *c,
-  const unsigned char *m,unsigned long long mlen,
-  const unsigned char *n,
-  const unsigned char *k
-)
-{
-  return crypto_stream_xsalsa20_xor_ic(c, m, mlen, n, 0ULL, k);
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/xsalsa20/stream_xsalsa20_api.c libsodium-1.0.12/src/libsodium/crypto_stream/xsalsa20/stream_xsalsa20_api.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/xsalsa20/stream_xsalsa20_api.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/xsalsa20/stream_xsalsa20_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,11 +0,0 @@
-#include "crypto_stream_xsalsa20.h"
-
-size_t
-crypto_stream_xsalsa20_keybytes(void) {
-    return crypto_stream_xsalsa20_KEYBYTES;
-}
-
-size_t
-crypto_stream_xsalsa20_noncebytes(void) {
-    return crypto_stream_xsalsa20_NONCEBYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_stream/xsalsa20/stream_xsalsa20.c libsodium-1.0.12/src/libsodium/crypto_stream/xsalsa20/stream_xsalsa20.c
--- libsodium-1.0.11/src/libsodium/crypto_stream/xsalsa20/stream_xsalsa20.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_stream/xsalsa20/stream_xsalsa20.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,60 @@
+#include "crypto_core_hsalsa20.h"
+#include "crypto_stream_salsa20.h"
+#include "crypto_stream_xsalsa20.h"
+#include "randombytes.h"
+#include "utils.h"
+
+int
+crypto_stream_xsalsa20(unsigned char *c, unsigned long long clen,
+                       const unsigned char *n, const unsigned char *k)
+{
+    unsigned char subkey[32];
+    int           ret;
+
+    crypto_core_hsalsa20(subkey, n, k, NULL);
+    ret = crypto_stream_salsa20(c, clen, n + 16, subkey);
+    sodium_memzero(subkey, sizeof subkey);
+
+    return ret;
+}
+
+int
+crypto_stream_xsalsa20_xor_ic(unsigned char *c, const unsigned char *m,
+                              unsigned long long mlen, const unsigned char *n,
+                              uint64_t ic, const unsigned char *k)
+{
+    unsigned char subkey[32];
+    int           ret;
+
+    crypto_core_hsalsa20(subkey, n, k, NULL);
+    ret = crypto_stream_salsa20_xor_ic(c, m, mlen, n + 16, ic, subkey);
+    sodium_memzero(subkey, sizeof subkey);
+
+    return ret;
+}
+
+int
+crypto_stream_xsalsa20_xor(unsigned char *c, const unsigned char *m,
+                           unsigned long long mlen, const unsigned char *n,
+                           const unsigned char *k)
+{
+    return crypto_stream_xsalsa20_xor_ic(c, m, mlen, n, 0ULL, k);
+}
+
+size_t
+crypto_stream_xsalsa20_keybytes(void)
+{
+    return crypto_stream_xsalsa20_KEYBYTES;
+}
+
+size_t
+crypto_stream_xsalsa20_noncebytes(void)
+{
+    return crypto_stream_xsalsa20_NONCEBYTES;
+}
+
+void
+crypto_stream_xsalsa20_keygen(unsigned char k[crypto_stream_xsalsa20_KEYBYTES])
+{
+    randombytes_buf(k, crypto_stream_xsalsa20_KEYBYTES);
+}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_verify/16/ref/verify_16.c libsodium-1.0.12/src/libsodium/crypto_verify/16/ref/verify_16.c
--- libsodium-1.0.11/src/libsodium/crypto_verify/16/ref/verify_16.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_verify/16/ref/verify_16.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,17 +0,0 @@
-
-#include <stddef.h>
-#include <stdint.h>
-
-#include "crypto_verify_16.h"
-
-int
-crypto_verify_16(const unsigned char *x, const unsigned char *y)
-{
-    uint_fast16_t d = 0U;
-    int           i;
-
-    for (i = 0; i < 16; i++) {
-        d |= x[i] ^ y[i];
-    }
-    return (1 & ((d - 1) >> 8)) - 1;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_verify/16/verify_16_api.c libsodium-1.0.12/src/libsodium/crypto_verify/16/verify_16_api.c
--- libsodium-1.0.11/src/libsodium/crypto_verify/16/verify_16_api.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_verify/16/verify_16_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,6 +0,0 @@
-#include "crypto_verify_16.h"
-
-size_t
-crypto_verify_16_bytes(void) {
-    return crypto_verify_16_BYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_verify/32/ref/verify_32.c libsodium-1.0.12/src/libsodium/crypto_verify/32/ref/verify_32.c
--- libsodium-1.0.11/src/libsodium/crypto_verify/32/ref/verify_32.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_verify/32/ref/verify_32.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,17 +0,0 @@
-
-#include <stddef.h>
-#include <stdint.h>
-
-#include "crypto_verify_32.h"
-
-int
-crypto_verify_32(const unsigned char *x, const unsigned char *y)
-{
-    uint_fast16_t d = 0U;
-    int           i;
-
-    for (i = 0; i < 32; i++) {
-        d |= x[i] ^ y[i];
-    }
-    return (1 & ((d - 1) >> 8)) - 1;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_verify/32/verify_32_api.c libsodium-1.0.12/src/libsodium/crypto_verify/32/verify_32_api.c
--- libsodium-1.0.11/src/libsodium/crypto_verify/32/verify_32_api.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_verify/32/verify_32_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,6 +0,0 @@
-#include "crypto_verify_32.h"
-
-size_t
-crypto_verify_32_bytes(void) {
-    return crypto_verify_32_BYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_verify/64/ref/verify_64.c libsodium-1.0.12/src/libsodium/crypto_verify/64/ref/verify_64.c
--- libsodium-1.0.11/src/libsodium/crypto_verify/64/ref/verify_64.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/crypto_verify/64/ref/verify_64.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,17 +0,0 @@
-
-#include <stddef.h>
-#include <stdint.h>
-
-#include "crypto_verify_64.h"
-
-int
-crypto_verify_64(const unsigned char *x, const unsigned char *y)
-{
-    uint_fast16_t d = 0U;
-    int           i;
-
-    for (i = 0; i < 64; i++) {
-        d |= x[i] ^ y[i];
-    }
-    return (1 & ((d - 1) >> 8)) - 1;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_verify/64/verify_64_api.c libsodium-1.0.12/src/libsodium/crypto_verify/64/verify_64_api.c
--- libsodium-1.0.11/src/libsodium/crypto_verify/64/verify_64_api.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_verify/64/verify_64_api.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,6 +0,0 @@
-#include "crypto_verify_64.h"
-
-size_t
-crypto_verify_64_bytes(void) {
-    return crypto_verify_64_BYTES;
-}
diff -urpN libsodium-1.0.11/src/libsodium/crypto_verify/sodium/verify.c libsodium-1.0.12/src/libsodium/crypto_verify/sodium/verify.c
--- libsodium-1.0.11/src/libsodium/crypto_verify/sodium/verify.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/crypto_verify/sodium/verify.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,61 @@
+
+#include <stddef.h>
+#include <stdint.h>
+
+#include "crypto_verify_16.h"
+#include "crypto_verify_32.h"
+#include "crypto_verify_64.h"
+
+int
+crypto_verify_16(const unsigned char *x, const unsigned char *y)
+{
+    uint_fast16_t d = 0U;
+    int           i;
+
+    for (i = 0; i < 16; i++) {
+        d |= x[i] ^ y[i];
+    }
+    return (1 & ((d - 1) >> 8)) - 1;
+}
+
+size_t
+crypto_verify_16_bytes(void)
+{
+    return crypto_verify_16_BYTES;
+}
+
+int
+crypto_verify_32(const unsigned char *x, const unsigned char *y)
+{
+    uint_fast16_t d = 0U;
+    int           i;
+
+    for (i = 0; i < 32; i++) {
+        d |= x[i] ^ y[i];
+    }
+    return (1 & ((d - 1) >> 8)) - 1;
+}
+
+size_t
+crypto_verify_32_bytes(void)
+{
+    return crypto_verify_32_BYTES;
+}
+
+int
+crypto_verify_64(const unsigned char *x, const unsigned char *y)
+{
+    uint_fast16_t d = 0U;
+    int           i;
+
+    for (i = 0; i < 64; i++) {
+        d |= x[i] ^ y[i];
+    }
+    return (1 & ((d - 1) >> 8)) - 1;
+}
+
+size_t
+crypto_verify_64_bytes(void)
+{
+    return crypto_verify_64_BYTES;
+}
diff -urpN libsodium-1.0.11/src/libsodium/include/Makefile.am libsodium-1.0.12/src/libsodium/include/Makefile.am
--- libsodium-1.0.11/src/libsodium/include/Makefile.am	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/Makefile.am	2017-03-12 18:11:27.000000000 +0100
@@ -4,11 +4,13 @@ SODIUM_EXPORT = \
 	sodium/core.h \
 	sodium/crypto_aead_aes256gcm.h \
 	sodium/crypto_aead_chacha20poly1305.h \
+	sodium/crypto_aead_xchacha20poly1305.h \
 	sodium/crypto_auth.h \
 	sodium/crypto_auth_hmacsha256.h \
 	sodium/crypto_auth_hmacsha512.h \
 	sodium/crypto_auth_hmacsha512256.h \
 	sodium/crypto_box.h \
+	sodium/crypto_box_curve25519xchacha20poly1305.h \
 	sodium/crypto_box_curve25519xsalsa20poly1305.h \
 	sodium/crypto_core_hchacha20.h \
 	sodium/crypto_core_hsalsa20.h \
@@ -20,6 +22,9 @@ SODIUM_EXPORT = \
 	sodium/crypto_hash.h \
 	sodium/crypto_hash_sha256.h \
 	sodium/crypto_hash_sha512.h \
+	sodium/crypto_kdf.h \
+	sodium/crypto_kdf_blake2b.h \
+	sodium/crypto_kx.h \
 	sodium/crypto_onetimeauth.h \
 	sodium/crypto_onetimeauth_poly1305.h \
 	sodium/crypto_pwhash.h \
@@ -28,6 +33,7 @@ SODIUM_EXPORT = \
 	sodium/crypto_scalarmult.h \
 	sodium/crypto_scalarmult_curve25519.h \
 	sodium/crypto_secretbox.h \
+	sodium/crypto_secretbox_xchacha20poly1305.h \
 	sodium/crypto_secretbox_xsalsa20poly1305.h \
 	sodium/crypto_shorthash.h \
 	sodium/crypto_shorthash_siphash24.h \
@@ -40,13 +46,8 @@ SODIUM_EXPORT = \
 	sodium/crypto_stream_salsa20.h \
 	sodium/crypto_stream_salsa2012.h \
 	sodium/crypto_stream_salsa208.h \
+	sodium/crypto_stream_xchacha20.h \
 	sodium/crypto_stream_xsalsa20.h \
-	sodium/crypto_int32.h \
-	sodium/crypto_int64.h \
-	sodium/crypto_uint16.h \
-	sodium/crypto_uint32.h \
-	sodium/crypto_uint64.h \
-	sodium/crypto_uint8.h \
 	sodium/crypto_verify_16.h \
 	sodium/crypto_verify_32.h \
 	sodium/crypto_verify_64.h \
diff -urpN libsodium-1.0.11/src/libsodium/include/Makefile.in libsodium-1.0.12/src/libsodium/include/Makefile.in
--- libsodium-1.0.11/src/libsodium/include/Makefile.in	2016-07-31 16:34:39.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/Makefile.in	2017-03-12 20:17:08.000000000 +0100
@@ -130,23 +130,27 @@ am__can_run_installinfo = \
   esac
 am__nobase_include_HEADERS_DIST = sodium.h sodium/core.h \
 	sodium/crypto_aead_aes256gcm.h \
-	sodium/crypto_aead_chacha20poly1305.h sodium/crypto_auth.h \
+	sodium/crypto_aead_chacha20poly1305.h \
+	sodium/crypto_aead_xchacha20poly1305.h sodium/crypto_auth.h \
 	sodium/crypto_auth_hmacsha256.h \
 	sodium/crypto_auth_hmacsha512.h \
 	sodium/crypto_auth_hmacsha512256.h sodium/crypto_box.h \
+	sodium/crypto_box_curve25519xchacha20poly1305.h \
 	sodium/crypto_box_curve25519xsalsa20poly1305.h \
 	sodium/crypto_core_hchacha20.h sodium/crypto_core_hsalsa20.h \
 	sodium/crypto_core_salsa20.h sodium/crypto_core_salsa2012.h \
 	sodium/crypto_core_salsa208.h sodium/crypto_generichash.h \
 	sodium/crypto_generichash_blake2b.h sodium/crypto_hash.h \
 	sodium/crypto_hash_sha256.h sodium/crypto_hash_sha512.h \
-	sodium/crypto_onetimeauth.h \
+	sodium/crypto_kdf.h sodium/crypto_kdf_blake2b.h \
+	sodium/crypto_kx.h sodium/crypto_onetimeauth.h \
 	sodium/crypto_onetimeauth_poly1305.h sodium/crypto_pwhash.h \
 	sodium/crypto_pwhash_argon2i.h \
 	sodium/crypto_pwhash_scryptsalsa208sha256.h \
 	sodium/crypto_scalarmult.h \
 	sodium/crypto_scalarmult_curve25519.h \
 	sodium/crypto_secretbox.h \
+	sodium/crypto_secretbox_xchacha20poly1305.h \
 	sodium/crypto_secretbox_xsalsa20poly1305.h \
 	sodium/crypto_shorthash.h sodium/crypto_shorthash_siphash24.h \
 	sodium/crypto_sign.h sodium/crypto_sign_ed25519.h \
@@ -155,10 +159,8 @@ am__nobase_include_HEADERS_DIST = sodium
 	sodium/crypto_stream_chacha20.h sodium/crypto_stream_salsa20.h \
 	sodium/crypto_stream_salsa2012.h \
 	sodium/crypto_stream_salsa208.h \
-	sodium/crypto_stream_xsalsa20.h sodium/crypto_int32.h \
-	sodium/crypto_int64.h sodium/crypto_uint16.h \
-	sodium/crypto_uint32.h sodium/crypto_uint64.h \
-	sodium/crypto_uint8.h sodium/crypto_verify_16.h \
+	sodium/crypto_stream_xchacha20.h \
+	sodium/crypto_stream_xsalsa20.h sodium/crypto_verify_16.h \
 	sodium/crypto_verify_32.h sodium/crypto_verify_64.h \
 	sodium/export.h sodium/randombytes.h \
 	sodium/randombytes_salsa20_random.h \
@@ -302,6 +304,7 @@ SAFECODE_HOME = @SAFECODE_HOME@
 SED = @SED@
 SET_MAKE = @SET_MAKE@
 SHELL = @SHELL@
+SODIUM_LIBRARY_MINIMAL_DEF = @SODIUM_LIBRARY_MINIMAL_DEF@
 SODIUM_LIBRARY_VERSION = @SODIUM_LIBRARY_VERSION@
 SODIUM_LIBRARY_VERSION_MAJOR = @SODIUM_LIBRARY_VERSION_MAJOR@
 SODIUM_LIBRARY_VERSION_MINOR = @SODIUM_LIBRARY_VERSION_MINOR@
@@ -368,23 +371,27 @@ top_build_prefix = @top_build_prefix@
 top_builddir = @top_builddir@
 top_srcdir = @top_srcdir@
 SODIUM_EXPORT = sodium.h sodium/core.h sodium/crypto_aead_aes256gcm.h \
-	sodium/crypto_aead_chacha20poly1305.h sodium/crypto_auth.h \
+	sodium/crypto_aead_chacha20poly1305.h \
+	sodium/crypto_aead_xchacha20poly1305.h sodium/crypto_auth.h \
 	sodium/crypto_auth_hmacsha256.h \
 	sodium/crypto_auth_hmacsha512.h \
 	sodium/crypto_auth_hmacsha512256.h sodium/crypto_box.h \
+	sodium/crypto_box_curve25519xchacha20poly1305.h \
 	sodium/crypto_box_curve25519xsalsa20poly1305.h \
 	sodium/crypto_core_hchacha20.h sodium/crypto_core_hsalsa20.h \
 	sodium/crypto_core_salsa20.h sodium/crypto_core_salsa2012.h \
 	sodium/crypto_core_salsa208.h sodium/crypto_generichash.h \
 	sodium/crypto_generichash_blake2b.h sodium/crypto_hash.h \
 	sodium/crypto_hash_sha256.h sodium/crypto_hash_sha512.h \
-	sodium/crypto_onetimeauth.h \
+	sodium/crypto_kdf.h sodium/crypto_kdf_blake2b.h \
+	sodium/crypto_kx.h sodium/crypto_onetimeauth.h \
 	sodium/crypto_onetimeauth_poly1305.h sodium/crypto_pwhash.h \
 	sodium/crypto_pwhash_argon2i.h \
 	sodium/crypto_pwhash_scryptsalsa208sha256.h \
 	sodium/crypto_scalarmult.h \
 	sodium/crypto_scalarmult_curve25519.h \
 	sodium/crypto_secretbox.h \
+	sodium/crypto_secretbox_xchacha20poly1305.h \
 	sodium/crypto_secretbox_xsalsa20poly1305.h \
 	sodium/crypto_shorthash.h sodium/crypto_shorthash_siphash24.h \
 	sodium/crypto_sign.h sodium/crypto_sign_ed25519.h \
@@ -393,10 +400,8 @@ SODIUM_EXPORT = sodium.h sodium/core.h s
 	sodium/crypto_stream_chacha20.h sodium/crypto_stream_salsa20.h \
 	sodium/crypto_stream_salsa2012.h \
 	sodium/crypto_stream_salsa208.h \
-	sodium/crypto_stream_xsalsa20.h sodium/crypto_int32.h \
-	sodium/crypto_int64.h sodium/crypto_uint16.h \
-	sodium/crypto_uint32.h sodium/crypto_uint64.h \
-	sodium/crypto_uint8.h sodium/crypto_verify_16.h \
+	sodium/crypto_stream_xchacha20.h \
+	sodium/crypto_stream_xsalsa20.h sodium/crypto_verify_16.h \
 	sodium/crypto_verify_32.h sodium/crypto_verify_64.h \
 	sodium/export.h sodium/randombytes.h \
 	sodium/randombytes_salsa20_random.h \
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_aead_aes256gcm.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_aead_aes256gcm.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_aead_aes256gcm.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_aead_aes256gcm.h	2017-03-06 23:32:40.000000000 +0100
@@ -31,6 +31,7 @@ SODIUM_EXPORT
 size_t crypto_aead_aes256gcm_abytes(void);
 
 typedef CRYPTO_ALIGN(16) unsigned char crypto_aead_aes256gcm_state[512];
+
 SODIUM_EXPORT
 size_t crypto_aead_aes256gcm_statebytes(void);
 
@@ -134,6 +135,9 @@ int crypto_aead_aes256gcm_decrypt_detach
                                                    const crypto_aead_aes256gcm_state *ctx_)
         __attribute__ ((warn_unused_result));
 
+SODIUM_EXPORT
+void crypto_aead_aes256gcm_keygen(unsigned char k[crypto_aead_aes256gcm_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_aead_chacha20poly1305.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_aead_chacha20poly1305.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_aead_chacha20poly1305.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_aead_chacha20poly1305.h	2017-03-06 11:13:57.000000000 +0100
@@ -77,6 +77,9 @@ int crypto_aead_chacha20poly1305_ietf_de
                                                        const unsigned char *k)
         __attribute__ ((warn_unused_result));
 
+SODIUM_EXPORT
+void crypto_aead_chacha20poly1305_ietf_keygen(unsigned char k[crypto_aead_chacha20poly1305_ietf_KEYBYTES]);
+
 /* -- Original ChaCha20-Poly1305 construction with a 64-bit nonce and a 64-bit internal counter -- */
 
 #define crypto_aead_chacha20poly1305_KEYBYTES 32U
@@ -142,6 +145,9 @@ int crypto_aead_chacha20poly1305_decrypt
                                                   const unsigned char *k)
         __attribute__ ((warn_unused_result));
 
+SODIUM_EXPORT
+void crypto_aead_chacha20poly1305_keygen(unsigned char k[crypto_aead_chacha20poly1305_KEYBYTES]);
+
 /* Aliases */
 
 #define crypto_aead_chacha20poly1305_IETF_KEYBYTES  crypto_aead_chacha20poly1305_ietf_KEYBYTES
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_aead_xchacha20poly1305.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_aead_xchacha20poly1305.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_aead_xchacha20poly1305.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_aead_xchacha20poly1305.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,91 @@
+#ifndef crypto_aead_xchacha20poly1305_H
+#define crypto_aead_xchacha20poly1305_H
+
+#include <stddef.h>
+#include "export.h"
+
+#ifdef __cplusplus
+# ifdef __GNUC__
+#  pragma GCC diagnostic ignored "-Wlong-long"
+# endif
+extern "C" {
+#endif
+
+#define crypto_aead_xchacha20poly1305_ietf_KEYBYTES 32U
+SODIUM_EXPORT
+size_t crypto_aead_xchacha20poly1305_ietf_keybytes(void);
+
+#define crypto_aead_xchacha20poly1305_ietf_NSECBYTES 0U
+SODIUM_EXPORT
+size_t crypto_aead_xchacha20poly1305_ietf_nsecbytes(void);
+
+#define crypto_aead_xchacha20poly1305_ietf_NPUBBYTES 24U
+SODIUM_EXPORT
+size_t crypto_aead_xchacha20poly1305_ietf_npubbytes(void);
+
+#define crypto_aead_xchacha20poly1305_ietf_ABYTES 16U
+SODIUM_EXPORT
+size_t crypto_aead_xchacha20poly1305_ietf_abytes(void);
+
+SODIUM_EXPORT
+int crypto_aead_xchacha20poly1305_ietf_encrypt(unsigned char *c,
+                                               unsigned long long *clen_p,
+                                               const unsigned char *m,
+                                               unsigned long long mlen,
+                                               const unsigned char *ad,
+                                               unsigned long long adlen,
+                                               const unsigned char *nsec,
+                                               const unsigned char *npub,
+                                               const unsigned char *k);
+
+SODIUM_EXPORT
+int crypto_aead_xchacha20poly1305_ietf_decrypt(unsigned char *m,
+                                               unsigned long long *mlen_p,
+                                               unsigned char *nsec,
+                                               const unsigned char *c,
+                                               unsigned long long clen,
+                                               const unsigned char *ad,
+                                               unsigned long long adlen,
+                                               const unsigned char *npub,
+                                               const unsigned char *k)
+            __attribute__ ((warn_unused_result));
+
+SODIUM_EXPORT
+int crypto_aead_xchacha20poly1305_ietf_encrypt_detached(unsigned char *c,
+                                                        unsigned char *mac,
+                                                        unsigned long long *maclen_p,
+                                                        const unsigned char *m,
+                                                        unsigned long long mlen,
+                                                        const unsigned char *ad,
+                                                        unsigned long long adlen,
+                                                        const unsigned char *nsec,
+                                                        const unsigned char *npub,
+                                                        const unsigned char *k);
+
+SODIUM_EXPORT
+int crypto_aead_xchacha20poly1305_ietf_decrypt_detached(unsigned char *m,
+                                                        unsigned char *nsec,
+                                                        const unsigned char *c,
+                                                        unsigned long long clen,
+                                                        const unsigned char *mac,
+                                                        const unsigned char *ad,
+                                                        unsigned long long adlen,
+                                                        const unsigned char *npub,
+                                                        const unsigned char *k)
+        __attribute__ ((warn_unused_result));
+
+SODIUM_EXPORT
+void crypto_aead_xchacha20poly1305_ietf_keygen(unsigned char k[crypto_aead_xchacha20poly1305_ietf_KEYBYTES]);
+
+/* Aliases */
+
+#define crypto_aead_xchacha20poly1305_IETF_KEYBYTES  crypto_aead_xchacha20poly1305_ietf_KEYBYTES
+#define crypto_aead_xchacha20poly1305_IETF_NSECBYTES crypto_aead_xchacha20poly1305_ietf_NSECBYTES
+#define crypto_aead_xchacha20poly1305_IETF_NPUBBYTES crypto_aead_xchacha20poly1305_ietf_NPUBBYTES
+#define crypto_aead_xchacha20poly1305_IETF_ABYTES    crypto_aead_xchacha20poly1305_ietf_ABYTES
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_auth.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_auth.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_auth.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_auth.h	2017-03-06 11:13:57.000000000 +0100
@@ -34,6 +34,9 @@ int crypto_auth_verify(const unsigned ch
                        unsigned long long inlen, const unsigned char *k)
             __attribute__ ((warn_unused_result));
 
+SODIUM_EXPORT
+void crypto_auth_keygen(unsigned char k[crypto_auth_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_auth_hmacsha256.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_auth_hmacsha256.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_auth_hmacsha256.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_auth_hmacsha256.h	2017-03-06 23:32:40.000000000 +0100
@@ -39,6 +39,7 @@ typedef struct crypto_auth_hmacsha256_st
     crypto_hash_sha256_state ictx;
     crypto_hash_sha256_state octx;
 } crypto_auth_hmacsha256_state;
+
 SODIUM_EXPORT
 size_t crypto_auth_hmacsha256_statebytes(void);
 
@@ -56,6 +57,10 @@ SODIUM_EXPORT
 int crypto_auth_hmacsha256_final(crypto_auth_hmacsha256_state *state,
                                  unsigned char *out);
 
+
+SODIUM_EXPORT
+void crypto_auth_hmacsha256_keygen(unsigned char k[crypto_auth_hmacsha256_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_auth_hmacsha512256.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_auth_hmacsha512256.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_auth_hmacsha512256.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_auth_hmacsha512256.h	2017-03-06 23:32:40.000000000 +0100
@@ -34,6 +34,7 @@ int crypto_auth_hmacsha512256_verify(con
 /* ------------------------------------------------------------------------- */
 
 typedef crypto_auth_hmacsha512_state crypto_auth_hmacsha512256_state;
+
 SODIUM_EXPORT
 size_t crypto_auth_hmacsha512256_statebytes(void);
 
@@ -51,6 +52,9 @@ SODIUM_EXPORT
 int crypto_auth_hmacsha512256_final(crypto_auth_hmacsha512256_state *state,
                                     unsigned char *out);
 
+SODIUM_EXPORT
+void crypto_auth_hmacsha512256_keygen(unsigned char k[crypto_auth_hmacsha512256_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_auth_hmacsha512.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_auth_hmacsha512.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_auth_hmacsha512.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_auth_hmacsha512.h	2017-03-06 23:32:40.000000000 +0100
@@ -39,6 +39,7 @@ typedef struct crypto_auth_hmacsha512_st
     crypto_hash_sha512_state ictx;
     crypto_hash_sha512_state octx;
 } crypto_auth_hmacsha512_state;
+
 SODIUM_EXPORT
 size_t crypto_auth_hmacsha512_statebytes(void);
 
@@ -56,6 +57,9 @@ SODIUM_EXPORT
 int crypto_auth_hmacsha512_final(crypto_auth_hmacsha512_state *state,
                                  unsigned char *out);
 
+SODIUM_EXPORT
+void crypto_auth_hmacsha512_keygen(unsigned char k[crypto_auth_hmacsha512_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_box_curve25519xchacha20poly1305.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_box_curve25519xchacha20poly1305.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_box_curve25519xchacha20poly1305.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_box_curve25519xchacha20poly1305.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,130 @@
+
+#ifndef crypto_box_curve25519xchacha20poly1305_H
+#define crypto_box_curve25519xchacha20poly1305_H
+
+#include <stddef.h>
+#include "export.h"
+
+#ifdef __cplusplus
+# ifdef __GNUC__
+#  pragma GCC diagnostic ignored "-Wlong-long"
+# endif
+extern "C" {
+#endif
+
+#define crypto_box_curve25519xchacha20poly1305_SEEDBYTES 32U
+SODIUM_EXPORT
+size_t crypto_box_curve25519xchacha20poly1305_seedbytes(void);
+
+#define crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES 32U
+SODIUM_EXPORT
+size_t crypto_box_curve25519xchacha20poly1305_publickeybytes(void);
+
+#define crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES 32U
+SODIUM_EXPORT
+size_t crypto_box_curve25519xchacha20poly1305_secretkeybytes(void);
+
+#define crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES 32U
+SODIUM_EXPORT
+size_t crypto_box_curve25519xchacha20poly1305_beforenmbytes(void);
+
+#define crypto_box_curve25519xchacha20poly1305_NONCEBYTES 24U
+SODIUM_EXPORT
+size_t crypto_box_curve25519xchacha20poly1305_noncebytes(void);
+
+#define crypto_box_curve25519xchacha20poly1305_MACBYTES 16U
+SODIUM_EXPORT
+size_t crypto_box_curve25519xchacha20poly1305_macbytes(void);
+
+SODIUM_EXPORT
+int crypto_box_curve25519xchacha20poly1305_seed_keypair(unsigned char *pk,
+                                                        unsigned char *sk,
+                                                        const unsigned char *seed);
+
+SODIUM_EXPORT
+int crypto_box_curve25519xchacha20poly1305_keypair(unsigned char *pk,
+                                                   unsigned char *sk);
+
+SODIUM_EXPORT
+int crypto_box_curve25519xchacha20poly1305_easy(unsigned char *c,
+                                                const unsigned char *m,
+                                                unsigned long long mlen,
+                                                const unsigned char *n,
+                                                const unsigned char *pk,
+                                                const unsigned char *sk)
+            __attribute__ ((warn_unused_result));
+
+SODIUM_EXPORT
+int crypto_box_curve25519xchacha20poly1305_open_easy(unsigned char *m,
+                                                     const unsigned char *c,
+                                                     unsigned long long clen,
+                                                     const unsigned char *n,
+                                                     const unsigned char *pk,
+                                                     const unsigned char *sk)
+            __attribute__ ((warn_unused_result));
+
+SODIUM_EXPORT
+int crypto_box_curve25519xchacha20poly1305_detached(unsigned char *c,
+                                                    unsigned char *mac,
+                                                    const unsigned char *m,
+                                                    unsigned long long mlen,
+                                                    const unsigned char *n,
+                                                    const unsigned char *pk,
+                                                    const unsigned char *sk)
+            __attribute__ ((warn_unused_result));
+
+SODIUM_EXPORT
+int crypto_box_curve25519xchacha20poly1305_open_detached(unsigned char *m,
+                                                         const unsigned char *c,
+                                                         const unsigned char *mac,
+                                                         unsigned long long clen,
+                                                         const unsigned char *n,
+                                                         const unsigned char *pk,
+                                                         const unsigned char *sk)
+            __attribute__ ((warn_unused_result));
+
+/* -- Precomputation interface -- */
+
+SODIUM_EXPORT
+int crypto_box_curve25519xchacha20poly1305_beforenm(unsigned char *k,
+                                                    const unsigned char *pk,
+                                                    const unsigned char *sk)
+            __attribute__ ((warn_unused_result));
+
+SODIUM_EXPORT
+int crypto_box_curve25519xchacha20poly1305_easy_afternm(unsigned char *c,
+                                                        const unsigned char *m,
+                                                        unsigned long long mlen,
+                                                        const unsigned char *n,
+                                                        const unsigned char *k);
+
+SODIUM_EXPORT
+int crypto_box_curve25519xchacha20poly1305_open_easy_afternm(unsigned char *m,
+                                                             const unsigned char *c,
+                                                             unsigned long long clen,
+                                                             const unsigned char *n,
+                                                             const unsigned char *k)
+            __attribute__ ((warn_unused_result));
+
+SODIUM_EXPORT
+int crypto_box_curve25519xchacha20poly1305_detached_afternm(unsigned char *c,
+                                                            unsigned char *mac,
+                                                            const unsigned char *m,
+                                                            unsigned long long mlen,
+                                                            const unsigned char *n,
+                                                            const unsigned char *k);
+
+SODIUM_EXPORT
+int crypto_box_curve25519xchacha20poly1305_open_detached_afternm(unsigned char *m,
+                                                                 const unsigned char *c,
+                                                                 const unsigned char *mac,
+                                                                 unsigned long long clen,
+                                                                 const unsigned char *n,
+                                                                 const unsigned char *k)
+            __attribute__ ((warn_unused_result));
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_generichash_blake2b.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_generichash_blake2b.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_generichash_blake2b.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_generichash_blake2b.h	2017-03-06 11:13:57.000000000 +0100
@@ -107,6 +107,9 @@ int crypto_generichash_blake2b_final(cry
                                      unsigned char *out,
                                      const size_t outlen);
 
+SODIUM_EXPORT
+void crypto_generichash_blake2b_keygen(unsigned char k[crypto_generichash_blake2b_KEYBYTES]);
+
 /* ------------------------------------------------------------------------- */
 
 int _crypto_generichash_blake2b_pick_best_implementation(void);
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_generichash.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_generichash.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_generichash.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_generichash.h	2017-03-06 23:32:40.000000000 +0100
@@ -42,6 +42,7 @@ SODIUM_EXPORT
 const char *crypto_generichash_primitive(void);
 
 typedef crypto_generichash_blake2b_state crypto_generichash_state;
+
 SODIUM_EXPORT
 size_t  crypto_generichash_statebytes(void);
 
@@ -64,6 +65,9 @@ SODIUM_EXPORT
 int crypto_generichash_final(crypto_generichash_state *state,
                              unsigned char *out, const size_t outlen);
 
+SODIUM_EXPORT
+void crypto_generichash_keygen(unsigned char k[crypto_generichash_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_hash_sha256.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_hash_sha256.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_hash_sha256.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_hash_sha256.h	2017-03-06 23:32:40.000000000 +0100
@@ -22,10 +22,11 @@ extern "C" {
 #endif
 
 typedef struct crypto_hash_sha256_state {
-    uint32_t      state[8];
-    uint64_t      count;
-    unsigned char buf[64];
+    uint32_t state[8];
+    uint64_t count;
+    uint8_t  buf[64];
 } crypto_hash_sha256_state;
+
 SODIUM_EXPORT
 size_t crypto_hash_sha256_statebytes(void);
 
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_hash_sha512.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_hash_sha512.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_hash_sha512.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_hash_sha512.h	2017-03-06 23:32:40.000000000 +0100
@@ -22,10 +22,11 @@ extern "C" {
 #endif
 
 typedef struct crypto_hash_sha512_state {
-    uint64_t      state[8];
-    uint64_t      count[2];
-    unsigned char buf[128];
+    uint64_t state[8];
+    uint64_t count[2];
+    uint8_t  buf[128];
 } crypto_hash_sha512_state;
+
 SODIUM_EXPORT
 size_t crypto_hash_sha512_statebytes(void);
 
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_int32.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_int32.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_int32.h	2016-02-27 13:22:46.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_int32.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,8 +0,0 @@
-#ifndef crypto_int32_H
-#define crypto_int32_H
-
-#include <stdint.h>
-
-typedef int32_t crypto_int32;
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_int64.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_int64.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_int64.h	2016-02-27 13:22:46.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_int64.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,8 +0,0 @@
-#ifndef crypto_int64_H
-#define crypto_int64_H
-
-#include <stdint.h>
-
-typedef int64_t crypto_int64;
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_kdf_blake2b.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_kdf_blake2b.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_kdf_blake2b.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_kdf_blake2b.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,42 @@
+#ifndef crypto_kdf_blake2b_H
+#define crypto_kdf_blake2b_H
+
+#include <stddef.h>
+#include <stdint.h>
+
+#include "crypto_kdf_blake2b.h"
+#include "export.h"
+
+#ifdef __cplusplus
+# ifdef __GNUC__
+#  pragma GCC diagnostic ignored "-Wlong-long"
+# endif
+extern "C" {
+#endif
+
+#define crypto_kdf_blake2b_BYTES_MIN 16
+SODIUM_EXPORT
+size_t crypto_kdf_blake2b_bytes_min(void);
+
+#define crypto_kdf_blake2b_BYTES_MAX 64
+SODIUM_EXPORT
+size_t crypto_kdf_blake2b_bytes_max(void);
+
+#define crypto_kdf_blake2b_CONTEXTBYTES 8
+SODIUM_EXPORT
+size_t crypto_kdf_blake2b_contextbytes(void);
+
+#define crypto_kdf_blake2b_KEYBYTES 32
+SODIUM_EXPORT
+size_t crypto_kdf_blake2b_keybytes(void);
+
+SODIUM_EXPORT
+int crypto_kdf_blake2b_derive_from_key(unsigned char *subkey, size_t subkey_len,
+                                       uint64_t subkey_id,
+                                       const char ctx[crypto_kdf_blake2b_CONTEXTBYTES],
+                                       const unsigned char key[crypto_kdf_blake2b_KEYBYTES]);
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_kdf.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_kdf.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_kdf.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_kdf.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,51 @@
+#ifndef crypto_kdf_H
+#define crypto_kdf_H
+
+#include <stddef.h>
+#include <stdint.h>
+
+#include "crypto_kdf_blake2b.h"
+#include "export.h"
+
+#ifdef __cplusplus
+# ifdef __GNUC__
+#  pragma GCC diagnostic ignored "-Wlong-long"
+# endif
+extern "C" {
+#endif
+
+#define crypto_kdf_BYTES_MIN crypto_kdf_blake2b_BYTES_MIN
+SODIUM_EXPORT
+size_t crypto_kdf_bytes_min(void);
+
+#define crypto_kdf_BYTES_MAX crypto_kdf_blake2b_BYTES_MAX
+SODIUM_EXPORT
+size_t crypto_kdf_bytes_max(void);
+
+#define crypto_kdf_CONTEXTBYTES crypto_kdf_blake2b_CONTEXTBYTES
+SODIUM_EXPORT
+size_t crypto_kdf_contextbytes(void);
+
+#define crypto_kdf_KEYBYTES crypto_kdf_blake2b_KEYBYTES
+SODIUM_EXPORT
+size_t crypto_kdf_keybytes(void);
+
+#define crypto_kdf_PRIMITIVE "blake2b"
+SODIUM_EXPORT
+const char *crypto_kdf_primitive(void)
+            __attribute__ ((warn_unused_result));
+
+SODIUM_EXPORT
+int crypto_kdf_derive_from_key(unsigned char *subkey, size_t subkey_len,
+                               uint64_t subkey_id,
+                               const char ctx[crypto_kdf_CONTEXTBYTES],
+                               const unsigned char key[crypto_kdf_KEYBYTES]);
+
+SODIUM_EXPORT
+void crypto_kdf_keygen(unsigned char k[crypto_kdf_KEYBYTES]);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_kx.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_kx.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_kx.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_kx.h	2017-03-12 12:51:43.000000000 +0100
@@ -0,0 +1,64 @@
+#ifndef crypto_kx_H
+#define crypto_kx_H
+
+#include <stddef.h>
+
+#include "export.h"
+
+#ifdef __cplusplus
+# ifdef __GNUC__
+#  pragma GCC diagnostic ignored "-Wlong-long"
+# endif
+extern "C" {
+#endif
+
+#define crypto_kx_PUBLICKEYBYTES 32
+SODIUM_EXPORT
+size_t crypto_kx_publickeybytes(void);
+
+#define crypto_kx_SECRETKEYBYTES 32
+SODIUM_EXPORT
+size_t crypto_kx_secretkeybytes(void);
+
+#define crypto_kx_SEEDBYTES 32
+SODIUM_EXPORT
+size_t crypto_kx_seedbytes(void);
+
+#define crypto_kx_SESSIONKEYBYTES 32
+SODIUM_EXPORT
+size_t crypto_kx_sessionkeybytes(void);
+
+#define crypto_kx_PRIMITIVE "x25519blake2b"
+SODIUM_EXPORT
+const char *crypto_kx_primitive(void);
+
+SODIUM_EXPORT
+int crypto_kx_seed_keypair(unsigned char pk[crypto_kx_PUBLICKEYBYTES],
+                           unsigned char sk[crypto_kx_SECRETKEYBYTES],
+                           const unsigned char seed[crypto_kx_SEEDBYTES]);
+
+SODIUM_EXPORT
+int crypto_kx_keypair(unsigned char pk[crypto_kx_PUBLICKEYBYTES],
+                      unsigned char sk[crypto_kx_SECRETKEYBYTES]);
+
+SODIUM_EXPORT
+int crypto_kx_client_session_keys(unsigned char rx[crypto_kx_SESSIONKEYBYTES],
+                                  unsigned char tx[crypto_kx_SESSIONKEYBYTES],
+                                  const unsigned char client_pk[crypto_kx_PUBLICKEYBYTES],
+                                  const unsigned char client_sk[crypto_kx_SECRETKEYBYTES],
+                                  const unsigned char server_pk[crypto_kx_PUBLICKEYBYTES])
+            __attribute__ ((warn_unused_result));
+
+SODIUM_EXPORT
+int crypto_kx_server_session_keys(unsigned char rx[crypto_kx_SESSIONKEYBYTES],
+                                  unsigned char tx[crypto_kx_SESSIONKEYBYTES],
+                                  const unsigned char server_pk[crypto_kx_PUBLICKEYBYTES],
+                                  const unsigned char server_sk[crypto_kx_SECRETKEYBYTES],
+                                  const unsigned char client_pk[crypto_kx_PUBLICKEYBYTES])
+            __attribute__ ((warn_unused_result));
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_onetimeauth.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_onetimeauth.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_onetimeauth.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_onetimeauth.h	2017-03-06 23:32:40.000000000 +0100
@@ -14,6 +14,7 @@ extern "C" {
 #endif
 
 typedef crypto_onetimeauth_poly1305_state crypto_onetimeauth_state;
+
 SODIUM_EXPORT
 size_t  crypto_onetimeauth_statebytes(void);
 
@@ -51,6 +52,9 @@ SODIUM_EXPORT
 int crypto_onetimeauth_final(crypto_onetimeauth_state *state,
                              unsigned char *out);
 
+SODIUM_EXPORT
+void crypto_onetimeauth_keygen(unsigned char k[crypto_onetimeauth_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_onetimeauth_poly1305.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_onetimeauth_poly1305.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_onetimeauth_poly1305.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_onetimeauth_poly1305.h	2017-03-06 23:32:40.000000000 +0100
@@ -1,9 +1,6 @@
 #ifndef crypto_onetimeauth_poly1305_H
 #define crypto_onetimeauth_poly1305_H
 
-#include <stdlib.h>
-#include "export.h"
-
 #ifdef __cplusplus
 # ifdef __GNUC__
 #  pragma GCC diagnostic ignored "-Wlong-long"
@@ -11,15 +8,21 @@
 extern "C" {
 #endif
 
-#include <sys/types.h>
-
 #include <stdint.h>
 #include <stdio.h>
+#include <stdlib.h>
+
+#include <sys/types.h>
+
+#include "export.h"
 
 typedef CRYPTO_ALIGN(16) struct crypto_onetimeauth_poly1305_state {
     unsigned char opaque[256];
 } crypto_onetimeauth_poly1305_state;
 
+SODIUM_EXPORT
+size_t crypto_onetimeauth_poly1305_statebytes(void);
+
 #define crypto_onetimeauth_poly1305_BYTES 16U
 SODIUM_EXPORT
 size_t crypto_onetimeauth_poly1305_bytes(void);
@@ -54,6 +57,9 @@ SODIUM_EXPORT
 int crypto_onetimeauth_poly1305_final(crypto_onetimeauth_poly1305_state *state,
                                       unsigned char *out);
 
+SODIUM_EXPORT
+void crypto_onetimeauth_poly1305_keygen(unsigned char k[crypto_onetimeauth_poly1305_KEYBYTES]);
+
 /* ------------------------------------------------------------------------- */
 
 int _crypto_onetimeauth_poly1305_pick_best_implementation(void);
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_pwhash_argon2i.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_pwhash_argon2i.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_pwhash_argon2i.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_pwhash_argon2i.h	2017-03-06 23:32:40.000000000 +0100
@@ -1,7 +1,9 @@
 #ifndef crypto_pwhash_argon2i_H
 #define crypto_pwhash_argon2i_H
 
+#include <limits.h>
 #include <stddef.h>
+#include <stdint.h>
 
 #include "export.h"
 
@@ -16,6 +18,22 @@ extern "C" {
 SODIUM_EXPORT
 int crypto_pwhash_argon2i_alg_argon2i13(void);
 
+#define crypto_pwhash_argon2i_BYTES_MIN 16U
+SODIUM_EXPORT
+size_t crypto_pwhash_argon2i_bytes_min(void);
+
+#define crypto_pwhash_argon2i_BYTES_MAX 4294967295U
+SODIUM_EXPORT
+size_t crypto_pwhash_argon2i_bytes_max(void);
+
+#define crypto_pwhash_argon2i_PASSWD_MIN 0U
+SODIUM_EXPORT
+size_t crypto_pwhash_argon2i_passwd_min(void);
+
+#define crypto_pwhash_argon2i_PASSWD_MAX 4294967295U
+SODIUM_EXPORT
+size_t crypto_pwhash_argon2i_passwd_max(void);
+
 #define crypto_pwhash_argon2i_SALTBYTES 16U
 SODIUM_EXPORT
 size_t crypto_pwhash_argon2i_saltbytes(void);
@@ -28,27 +46,43 @@ size_t crypto_pwhash_argon2i_strbytes(vo
 SODIUM_EXPORT
 const char *crypto_pwhash_argon2i_strprefix(void);
 
-#define crypto_pwhash_argon2i_OPSLIMIT_INTERACTIVE 4ULL
+#define crypto_pwhash_argon2i_OPSLIMIT_MIN 3U
+SODIUM_EXPORT
+size_t crypto_pwhash_argon2i_opslimit_min(void);
+
+#define crypto_pwhash_argon2i_OPSLIMIT_MAX 4294967295U
+SODIUM_EXPORT
+size_t crypto_pwhash_argon2i_opslimit_max(void);
+
+#define crypto_pwhash_argon2i_MEMLIMIT_MIN 1U
+SODIUM_EXPORT
+size_t crypto_pwhash_argon2i_memlimit_min(void);
+
+#define crypto_pwhash_argon2i_MEMLIMIT_MAX ((SIZE_MAX >= 1ULL << 48) ? 4398046510080U : (SIZE_MAX >= 1ULL << 32) ? 2147483648U : 32768U)
+SODIUM_EXPORT
+size_t crypto_pwhash_argon2i_memlimit_max(void);
+
+#define crypto_pwhash_argon2i_OPSLIMIT_INTERACTIVE 4U
 SODIUM_EXPORT
 size_t crypto_pwhash_argon2i_opslimit_interactive(void);
 
-#define crypto_pwhash_argon2i_MEMLIMIT_INTERACTIVE 33554432ULL
+#define crypto_pwhash_argon2i_MEMLIMIT_INTERACTIVE 33554432U
 SODIUM_EXPORT
 size_t crypto_pwhash_argon2i_memlimit_interactive(void);
 
-#define crypto_pwhash_argon2i_OPSLIMIT_MODERATE 6ULL
+#define crypto_pwhash_argon2i_OPSLIMIT_MODERATE 6U
 SODIUM_EXPORT
 size_t crypto_pwhash_argon2i_opslimit_moderate(void);
 
-#define crypto_pwhash_argon2i_MEMLIMIT_MODERATE 134217728ULL
+#define crypto_pwhash_argon2i_MEMLIMIT_MODERATE 134217728U
 SODIUM_EXPORT
 size_t crypto_pwhash_argon2i_memlimit_moderate(void);
 
-#define crypto_pwhash_argon2i_OPSLIMIT_SENSITIVE 8ULL
+#define crypto_pwhash_argon2i_OPSLIMIT_SENSITIVE 8U
 SODIUM_EXPORT
 size_t crypto_pwhash_argon2i_opslimit_sensitive(void);
 
-#define crypto_pwhash_argon2i_MEMLIMIT_SENSITIVE 536870912ULL
+#define crypto_pwhash_argon2i_MEMLIMIT_SENSITIVE 536870912U
 SODIUM_EXPORT
 size_t crypto_pwhash_argon2i_memlimit_sensitive(void);
 
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_pwhash.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_pwhash.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_pwhash.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_pwhash.h	2017-03-06 11:13:57.000000000 +0100
@@ -21,6 +21,22 @@ int crypto_pwhash_alg_argon2i13(void);
 SODIUM_EXPORT
 int crypto_pwhash_alg_default(void);
 
+#define crypto_pwhash_BYTES_MIN crypto_pwhash_argon2i_BYTES_MIN
+SODIUM_EXPORT
+size_t crypto_pwhash_bytes_min(void);
+
+#define crypto_pwhash_BYTES_MAX crypto_pwhash_argon2i_BYTES_MAX
+SODIUM_EXPORT
+size_t crypto_pwhash_bytes_max(void);
+
+#define crypto_pwhash_PASSWD_MIN crypto_pwhash_argon2i_PASSWD_MIN
+SODIUM_EXPORT
+size_t crypto_pwhash_passwd_min(void);
+
+#define crypto_pwhash_PASSWD_MAX crypto_pwhash_argon2i_PASSWD_MAX
+SODIUM_EXPORT
+size_t crypto_pwhash_passwd_max(void);
+
 #define crypto_pwhash_SALTBYTES crypto_pwhash_argon2i_SALTBYTES
 SODIUM_EXPORT
 size_t crypto_pwhash_saltbytes(void);
@@ -33,6 +49,22 @@ size_t crypto_pwhash_strbytes(void);
 SODIUM_EXPORT
 const char *crypto_pwhash_strprefix(void);
 
+#define crypto_pwhash_OPSLIMIT_MIN crypto_pwhash_argon2i_OPSLIMIT_MIN
+SODIUM_EXPORT
+size_t crypto_pwhash_opslimit_min(void);
+
+#define crypto_pwhash_OPSLIMIT_MAX crypto_pwhash_argon2i_OPSLIMIT_MAX
+SODIUM_EXPORT
+size_t crypto_pwhash_opslimit_max(void);
+
+#define crypto_pwhash_MEMLIMIT_MIN crypto_pwhash_argon2i_MEMLIMIT_MIN
+SODIUM_EXPORT
+size_t crypto_pwhash_memlimit_min(void);
+
+#define crypto_pwhash_MEMLIMIT_MAX crypto_pwhash_argon2i_MEMLIMIT_MAX
+SODIUM_EXPORT
+size_t crypto_pwhash_memlimit_max(void);
+
 #define crypto_pwhash_OPSLIMIT_INTERACTIVE crypto_pwhash_argon2i_OPSLIMIT_INTERACTIVE
 SODIUM_EXPORT
 size_t crypto_pwhash_opslimit_interactive(void);
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_pwhash_scryptsalsa208sha256.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_pwhash_scryptsalsa208sha256.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_pwhash_scryptsalsa208sha256.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_pwhash_scryptsalsa208sha256.h	2017-03-06 23:32:40.000000000 +0100
@@ -1,6 +1,7 @@
 #ifndef crypto_pwhash_scryptsalsa208sha256_H
 #define crypto_pwhash_scryptsalsa208sha256_H
 
+#include <limits.h>
 #include <stddef.h>
 #include <stdint.h>
 
@@ -13,6 +14,22 @@
 extern "C" {
 #endif
 
+#define crypto_pwhash_scryptsalsa208sha256_BYTES_MIN 16U
+SODIUM_EXPORT
+size_t crypto_pwhash_scryptsalsa208sha256_bytes_min(void);
+
+#define crypto_pwhash_scryptsalsa208sha256_BYTES_MAX SIZE_MAX
+SODIUM_EXPORT
+size_t crypto_pwhash_scryptsalsa208sha256_bytes_max(void);
+
+#define crypto_pwhash_scryptsalsa208sha256_PASSWD_MIN 0U
+SODIUM_EXPORT
+size_t crypto_pwhash_scryptsalsa208sha256_passwd_min(void);
+
+#define crypto_pwhash_scryptsalsa208sha256_PASSWD_MAX SIZE_MAX
+SODIUM_EXPORT
+size_t crypto_pwhash_scryptsalsa208sha256_passwd_max(void);
+
 #define crypto_pwhash_scryptsalsa208sha256_SALTBYTES 32U
 SODIUM_EXPORT
 size_t crypto_pwhash_scryptsalsa208sha256_saltbytes(void);
@@ -25,19 +42,35 @@ size_t crypto_pwhash_scryptsalsa208sha25
 SODIUM_EXPORT
 const char *crypto_pwhash_scryptsalsa208sha256_strprefix(void);
 
-#define crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE 524288ULL
+#define crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MIN 32768U
+SODIUM_EXPORT
+size_t crypto_pwhash_scryptsalsa208sha256_opslimit_min(void);
+
+#define crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_MAX 4294967295U
+SODIUM_EXPORT
+size_t crypto_pwhash_scryptsalsa208sha256_opslimit_max(void);
+
+#define crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MIN 16777216U
+SODIUM_EXPORT
+size_t crypto_pwhash_scryptsalsa208sha256_memlimit_min(void);
+
+#define crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_MAX ((SIZE_MAX >= 68719476736U) ? 68719476736U : SIZE_MAX)
+SODIUM_EXPORT
+size_t crypto_pwhash_scryptsalsa208sha256_memlimit_max(void);
+
+#define crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_INTERACTIVE 524288U
 SODIUM_EXPORT
 size_t crypto_pwhash_scryptsalsa208sha256_opslimit_interactive(void);
 
-#define crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE 16777216ULL
+#define crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_INTERACTIVE 16777216U
 SODIUM_EXPORT
 size_t crypto_pwhash_scryptsalsa208sha256_memlimit_interactive(void);
 
-#define crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE 33554432ULL
+#define crypto_pwhash_scryptsalsa208sha256_OPSLIMIT_SENSITIVE 33554432U
 SODIUM_EXPORT
 size_t crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive(void);
 
-#define crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE 1073741824ULL
+#define crypto_pwhash_scryptsalsa208sha256_MEMLIMIT_SENSITIVE 1073741824U
 SODIUM_EXPORT
 size_t crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive(void);
 
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_secretbox.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_secretbox.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_secretbox.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_secretbox.h	2017-03-06 11:13:57.000000000 +0100
@@ -56,6 +56,9 @@ int crypto_secretbox_open_detached(unsig
                                    const unsigned char *k)
             __attribute__ ((warn_unused_result));
 
+SODIUM_EXPORT
+void crypto_secretbox_keygen(unsigned char k[crypto_secretbox_KEYBYTES]);
+
 /* -- NaCl compatibility interface ; Requires padding -- */
 
 #define crypto_secretbox_ZEROBYTES crypto_secretbox_xsalsa20poly1305_ZEROBYTES
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_secretbox_xchacha20poly1305.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_secretbox_xchacha20poly1305.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_secretbox_xchacha20poly1305.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_secretbox_xchacha20poly1305.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,62 @@
+#ifndef crypto_secretbox_xchacha20poly1305_H
+#define crypto_secretbox_xchacha20poly1305_H
+
+#include <stddef.h>
+#include "export.h"
+
+#ifdef __cplusplus
+# ifdef __GNUC__
+#  pragma GCC diagnostic ignored "-Wlong-long"
+# endif
+extern "C" {
+#endif
+
+#define crypto_secretbox_xchacha20poly1305_KEYBYTES 32U
+SODIUM_EXPORT
+size_t crypto_secretbox_xchacha20poly1305_keybytes(void);
+
+#define crypto_secretbox_xchacha20poly1305_NONCEBYTES 24U
+SODIUM_EXPORT
+size_t crypto_secretbox_xchacha20poly1305_noncebytes(void);
+
+#define crypto_secretbox_xchacha20poly1305_MACBYTES 16U
+SODIUM_EXPORT
+size_t crypto_secretbox_xchacha20poly1305_macbytes(void);
+
+SODIUM_EXPORT
+int crypto_secretbox_xchacha20poly1305_easy(unsigned char *c,
+                                            const unsigned char *m,
+                                            unsigned long long mlen,
+                                            const unsigned char *n,
+                                            const unsigned char *k);
+
+SODIUM_EXPORT
+int crypto_secretbox_xchacha20poly1305_open_easy(unsigned char *m,
+                                                 const unsigned char *c,
+                                                 unsigned long long clen,
+                                                 const unsigned char *n,
+                                                 const unsigned char *k)
+            __attribute__ ((warn_unused_result));
+
+SODIUM_EXPORT
+int crypto_secretbox_xchacha20poly1305_detached(unsigned char *c,
+                                                unsigned char *mac,
+                                                const unsigned char *m,
+                                                unsigned long long mlen,
+                                                const unsigned char *n,
+                                                const unsigned char *k);
+
+SODIUM_EXPORT
+int crypto_secretbox_xchacha20poly1305_open_detached(unsigned char *m,
+                                                     const unsigned char *c,
+                                                     const unsigned char *mac,
+                                                     unsigned long long clen,
+                                                     const unsigned char *n,
+                                                     const unsigned char *k)
+            __attribute__ ((warn_unused_result));
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_secretbox_xsalsa20poly1305.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_secretbox_xsalsa20poly1305.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_secretbox_xsalsa20poly1305.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_secretbox_xsalsa20poly1305.h	2017-03-06 11:13:57.000000000 +0100
@@ -45,7 +45,11 @@ int crypto_secretbox_xsalsa20poly1305_op
                                            const unsigned char *c,
                                            unsigned long long clen,
                                            const unsigned char *n,
-                                           const unsigned char *k);
+                                           const unsigned char *k)
+            __attribute__ ((warn_unused_result));
+
+SODIUM_EXPORT
+void crypto_secretbox_xsalsa20poly1305_keygen(unsigned char k[crypto_secretbox_xsalsa20poly1305_KEYBYTES]);
 
 #ifdef __cplusplus
 }
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_shorthash.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_shorthash.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_shorthash.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_shorthash.h	2017-03-06 11:13:57.000000000 +0100
@@ -29,6 +29,9 @@ SODIUM_EXPORT
 int crypto_shorthash(unsigned char *out, const unsigned char *in,
                      unsigned long long inlen, const unsigned char *k);
 
+SODIUM_EXPORT
+void crypto_shorthash_keygen(unsigned char k[crypto_shorthash_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_shorthash_siphash24.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_shorthash_siphash24.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_shorthash_siphash24.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_shorthash_siphash24.h	2017-03-06 23:32:40.000000000 +0100
@@ -11,6 +11,8 @@
 extern "C" {
 #endif
 
+/* -- 64-bit output -- */
+
 #define crypto_shorthash_siphash24_BYTES 8U
 SODIUM_EXPORT
 size_t crypto_shorthash_siphash24_bytes(void);
@@ -23,6 +25,22 @@ SODIUM_EXPORT
 int crypto_shorthash_siphash24(unsigned char *out, const unsigned char *in,
                                unsigned long long inlen, const unsigned char *k);
 
+#ifndef SODIUM_LIBRARY_MINIMAL
+/* -- 128-bit output -- */
+
+#define crypto_shorthash_siphashx24_BYTES 16U
+SODIUM_EXPORT
+size_t crypto_shorthash_siphashx24_bytes(void);
+
+#define crypto_shorthash_siphashx24_KEYBYTES 16U
+SODIUM_EXPORT
+size_t crypto_shorthash_siphashx24_keybytes(void);
+
+SODIUM_EXPORT
+int crypto_shorthash_siphashx24(unsigned char *out, const unsigned char *in,
+                                unsigned long long inlen, const unsigned char *k);
+#endif
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_sign_ed25519.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_sign_ed25519.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_sign_ed25519.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_sign_ed25519.h	2017-03-06 23:32:40.000000000 +0100
@@ -2,6 +2,7 @@
 #define crypto_sign_ed25519_H
 
 #include <stddef.h>
+#include "crypto_hash_sha512.h"
 #include "export.h"
 
 #ifdef __cplusplus
@@ -11,6 +12,13 @@
 extern "C" {
 #endif
 
+typedef struct crypto_sign_ed25519ph_state {
+    crypto_hash_sha512_state hs;
+} crypto_sign_ed25519ph_state;
+
+SODIUM_EXPORT
+size_t crypto_sign_ed25519ph_statebytes(void);
+
 #define crypto_sign_ed25519_BYTES 64U
 SODIUM_EXPORT
 size_t crypto_sign_ed25519_bytes(void);
@@ -75,6 +83,26 @@ int crypto_sign_ed25519_sk_to_seed(unsig
 SODIUM_EXPORT
 int crypto_sign_ed25519_sk_to_pk(unsigned char *pk, const unsigned char *sk);
 
+SODIUM_EXPORT
+int crypto_sign_ed25519ph_init(crypto_sign_ed25519ph_state *state);
+
+SODIUM_EXPORT
+int crypto_sign_ed25519ph_update(crypto_sign_ed25519ph_state *state,
+                                 const unsigned char *m,
+                                 unsigned long long mlen);
+
+SODIUM_EXPORT
+int crypto_sign_ed25519ph_final_create(crypto_sign_ed25519ph_state *state,
+                                       unsigned char *sig,
+                                       unsigned long long *siglen_p,
+                                       const unsigned char *sk);
+
+SODIUM_EXPORT
+int crypto_sign_ed25519ph_final_verify(crypto_sign_ed25519ph_state *state,
+                                       unsigned char *sig,
+                                       const unsigned char *pk)
+            __attribute__ ((warn_unused_result));
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_sign.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_sign.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_sign.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_sign.h	2017-03-06 23:32:40.000000000 +0100
@@ -20,6 +20,11 @@
 extern "C" {
 #endif
 
+typedef crypto_sign_ed25519ph_state crypto_sign_state;
+
+SODIUM_EXPORT
+size_t  crypto_sign_statebytes(void);
+
 #define crypto_sign_BYTES crypto_sign_ed25519_BYTES
 SODIUM_EXPORT
 size_t  crypto_sign_bytes(void);
@@ -70,6 +75,23 @@ int crypto_sign_verify_detached(const un
                                 const unsigned char *pk)
             __attribute__ ((warn_unused_result));
 
+SODIUM_EXPORT
+int crypto_sign_init(crypto_sign_state *state);
+
+SODIUM_EXPORT
+int crypto_sign_update(crypto_sign_state *state,
+                       const unsigned char *m, unsigned long long mlen);
+
+SODIUM_EXPORT
+int crypto_sign_final_create(crypto_sign_state *state, unsigned char *sig,
+                             unsigned long long *siglen_p,
+                             const unsigned char *sk);
+
+SODIUM_EXPORT
+int crypto_sign_final_verify(crypto_sign_state *state, unsigned char *sig,
+                             const unsigned char *pk)
+            __attribute__ ((warn_unused_result));
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_aes128ctr.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_aes128ctr.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_aes128ctr.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_aes128ctr.h	2017-03-12 18:08:09.000000000 +0100
@@ -33,25 +33,30 @@ size_t crypto_stream_aes128ctr_beforenmb
 
 SODIUM_EXPORT
 int crypto_stream_aes128ctr(unsigned char *out, unsigned long long outlen,
-                            const unsigned char *n, const unsigned char *k);
+                            const unsigned char *n, const unsigned char *k)
+            __attribute__ ((deprecated));
 
 SODIUM_EXPORT
 int crypto_stream_aes128ctr_xor(unsigned char *out, const unsigned char *in,
                                 unsigned long long inlen, const unsigned char *n,
-                                const unsigned char *k);
+                                const unsigned char *k)
+            __attribute__ ((deprecated));
 
 SODIUM_EXPORT
-int crypto_stream_aes128ctr_beforenm(unsigned char *c, const unsigned char *k);
+int crypto_stream_aes128ctr_beforenm(unsigned char *c, const unsigned char *k)
+            __attribute__ ((deprecated));
 
 SODIUM_EXPORT
 int crypto_stream_aes128ctr_afternm(unsigned char *out, unsigned long long len,
-                                    const unsigned char *nonce, const unsigned char *c);
+                                    const unsigned char *nonce, const unsigned char *c)
+            __attribute__ ((deprecated));
 
 SODIUM_EXPORT
 int crypto_stream_aes128ctr_xor_afternm(unsigned char *out, const unsigned char *in,
                                         unsigned long long len,
                                         const unsigned char *nonce,
-                                        const unsigned char *c);
+                                        const unsigned char *c)
+            __attribute__ ((deprecated));
 
 #ifdef __cplusplus
 }
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_chacha20.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_chacha20.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_chacha20.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_chacha20.h	2017-03-06 11:13:57.000000000 +0100
@@ -45,9 +45,16 @@ int crypto_stream_chacha20_xor_ic(unsign
                                   const unsigned char *n, uint64_t ic,
                                   const unsigned char *k);
 
+SODIUM_EXPORT
+void crypto_stream_chacha20_keygen(unsigned char k[crypto_stream_chacha20_KEYBYTES]);
+
 /* ChaCha20 with a 96-bit nonce and a 32-bit counter (IETF) */
 
-#define crypto_stream_chacha20_IETF_NONCEBYTES 12U
+#define crypto_stream_chacha20_ietf_KEYBYTES 32U
+SODIUM_EXPORT
+size_t crypto_stream_chacha20_ietf_keybytes(void);
+
+#define crypto_stream_chacha20_ietf_NONCEBYTES 12U
 SODIUM_EXPORT
 size_t crypto_stream_chacha20_ietf_noncebytes(void);
 
@@ -66,10 +73,18 @@ int crypto_stream_chacha20_ietf_xor_ic(u
                                        const unsigned char *n, uint32_t ic,
                                        const unsigned char *k);
 
+SODIUM_EXPORT
+void crypto_stream_chacha20_ietf_keygen(unsigned char k[crypto_stream_chacha20_ietf_KEYBYTES]);
+
 /* ------------------------------------------------------------------------- */
 
 int _crypto_stream_chacha20_pick_best_implementation(void);
 
+/* Aliases */
+
+#define crypto_stream_chacha20_IETF_KEYBYTES crypto_stream_chacha20_ietf_KEYBYTES
+#define crypto_stream_chacha20_IETF_NONCEBYTES crypto_stream_chacha20_ietf_NONCEBYTES
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream.h	2017-03-06 11:13:57.000000000 +0100
@@ -42,6 +42,9 @@ int crypto_stream_xor(unsigned char *c,
                       unsigned long long mlen, const unsigned char *n,
                       const unsigned char *k);
 
+SODIUM_EXPORT
+void crypto_stream_keygen(unsigned char k[crypto_stream_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_salsa2012.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_salsa2012.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_salsa2012.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_salsa2012.h	2017-03-06 11:13:57.000000000 +0100
@@ -36,6 +36,9 @@ int crypto_stream_salsa2012_xor(unsigned
                                 unsigned long long mlen, const unsigned char *n,
                                 const unsigned char *k);
 
+SODIUM_EXPORT
+void crypto_stream_salsa2012_keygen(unsigned char k[crypto_stream_salsa2012_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_salsa208.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_salsa208.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_salsa208.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_salsa208.h	2017-03-06 11:13:57.000000000 +0100
@@ -36,6 +36,9 @@ int crypto_stream_salsa208_xor(unsigned
                                unsigned long long mlen, const unsigned char *n,
                                const unsigned char *k);
 
+SODIUM_EXPORT
+void crypto_stream_salsa208_keygen(unsigned char k[crypto_stream_salsa208_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_salsa20.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_salsa20.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_salsa20.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_salsa20.h	2017-03-06 11:13:57.000000000 +0100
@@ -42,6 +42,14 @@ int crypto_stream_salsa20_xor_ic(unsigne
                                  unsigned long long mlen,
                                  const unsigned char *n, uint64_t ic,
                                  const unsigned char *k);
+
+SODIUM_EXPORT
+void crypto_stream_salsa20_keygen(unsigned char k[crypto_stream_salsa20_KEYBYTES]);
+
+/* ------------------------------------------------------------------------- */
+
+int _crypto_stream_salsa20_pick_best_implementation(void);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_xchacha20.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_xchacha20.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_xchacha20.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_xchacha20.h	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,53 @@
+#ifndef crypto_stream_xchacha20_H
+#define crypto_stream_xchacha20_H
+
+/*
+ *  WARNING: This is just a stream cipher. It is NOT authenticated encryption.
+ *  While it provides some protection against eavesdropping, it does NOT
+ *  provide any security against active attacks.
+ *  Unless you know what you're doing, what you are looking for is probably
+ *  the crypto_box functions.
+ */
+
+#include <stddef.h>
+#include <stdint.h>
+#include "export.h"
+
+#ifdef __cplusplus
+# ifdef __GNUC__
+#  pragma GCC diagnostic ignored "-Wlong-long"
+# endif
+extern "C" {
+#endif
+
+#define crypto_stream_xchacha20_KEYBYTES 32U
+SODIUM_EXPORT
+size_t crypto_stream_xchacha20_keybytes(void);
+
+#define crypto_stream_xchacha20_NONCEBYTES 24U
+SODIUM_EXPORT
+size_t crypto_stream_xchacha20_noncebytes(void);
+
+SODIUM_EXPORT
+int crypto_stream_xchacha20(unsigned char *c, unsigned long long clen,
+                            const unsigned char *n, const unsigned char *k);
+
+SODIUM_EXPORT
+int crypto_stream_xchacha20_xor(unsigned char *c, const unsigned char *m,
+                                unsigned long long mlen, const unsigned char *n,
+                                const unsigned char *k);
+
+SODIUM_EXPORT
+int crypto_stream_xchacha20_xor_ic(unsigned char *c, const unsigned char *m,
+                                   unsigned long long mlen,
+                                   const unsigned char *n, uint64_t ic,
+                                   const unsigned char *k);
+
+SODIUM_EXPORT
+void crypto_stream_xchacha20_keygen(unsigned char k[crypto_stream_xchacha20_KEYBYTES]);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_xsalsa20.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_xsalsa20.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_stream_xsalsa20.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_stream_xsalsa20.h	2017-03-06 11:13:57.000000000 +0100
@@ -42,6 +42,10 @@ int crypto_stream_xsalsa20_xor_ic(unsign
                                   unsigned long long mlen,
                                   const unsigned char *n, uint64_t ic,
                                   const unsigned char *k);
+
+SODIUM_EXPORT
+void crypto_stream_xsalsa20_keygen(unsigned char k[crypto_stream_xsalsa20_KEYBYTES]);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_uint16.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_uint16.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_uint16.h	2016-02-27 13:22:46.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_uint16.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,8 +0,0 @@
-#ifndef crypto_uint16_H
-#define crypto_uint16_H
-
-#include <stdint.h>
-
-typedef uint16_t crypto_uint16;
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_uint32.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_uint32.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_uint32.h	2016-02-27 13:22:46.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_uint32.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,8 +0,0 @@
-#ifndef crypto_uint32_H
-#define crypto_uint32_H
-
-#include <stdint.h>
-
-typedef uint32_t crypto_uint32;
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_uint64.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_uint64.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_uint64.h	2016-02-27 13:22:46.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_uint64.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,8 +0,0 @@
-#ifndef crypto_uint64_H
-#define crypto_uint64_H
-
-#include <stdint.h>
-
-typedef uint64_t crypto_uint64;
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/crypto_uint8.h libsodium-1.0.12/src/libsodium/include/sodium/crypto_uint8.h
--- libsodium-1.0.11/src/libsodium/include/sodium/crypto_uint8.h	2016-02-27 13:22:46.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/crypto_uint8.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,8 +0,0 @@
-#ifndef crypto_uint8_H
-#define crypto_uint8_H
-
-#include <stdint.h>
-
-typedef uint8_t crypto_uint8;
-
-#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/private/common.h libsodium-1.0.12/src/libsodium/include/sodium/private/common.h
--- libsodium-1.0.11/src/libsodium/include/sodium/private/common.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/private/common.h	2017-03-06 23:32:40.000000000 +0100
@@ -5,6 +5,36 @@
 #include <stdlib.h>
 #include <string.h>
 
+#define COMPILER_ASSERT(X) (void) sizeof(char[(X) ? 1 : -1])
+
+#define ROTL32(X, B) rotl32((X), (B))
+static inline uint32_t
+rotl32(const uint32_t x, const int b)
+{
+    return (x << b) | (x >> (32 - b));
+}
+
+#define ROTL64(X, B) rotl64((X), (B))
+static inline uint64_t
+rotl64(const uint64_t x, const int b)
+{
+    return (x << b) | (x >> (64 - b));
+}
+
+#define ROTR32(X, B) rotr32((X), (B))
+static inline uint32_t
+rotr32(const uint32_t x, const int b)
+{
+    return (x >> b) | (x << (32 - b));
+}
+
+#define ROTR64(X, B) rotr64((X), (B))
+static inline uint64_t
+rotr64(const uint64_t x, const int b)
+{
+    return (x >> b) | (x << (64 - b));
+}
+
 #define LOAD64_LE(SRC) load64_le(SRC)
 static inline uint64_t
 load64_le(const uint8_t src[8])
@@ -98,23 +128,6 @@ load64_be(const uint8_t src[8])
 #endif
 }
 
-#define LOAD32_BE(SRC) load32_be(SRC)
-static inline uint32_t
-load32_be(const uint8_t src[4])
-{
-#ifdef NATIVE_BIG_ENDIAN
-    uint32_t w;
-    memcpy(&w, src, sizeof w);
-    return w;
-#else
-    uint32_t w = (uint32_t) src[3];
-    w |= (uint32_t) src[2] <<  8;
-    w |= (uint32_t) src[1] << 16;
-    w |= (uint32_t) src[0] << 24;
-    return w;
-#endif
-}
-
 #define STORE64_BE(DST, W) store64_be((DST), (W))
 static inline void
 store64_be(uint8_t dst[8], uint64_t w)
@@ -133,6 +146,23 @@ store64_be(uint8_t dst[8], uint64_t w)
 #endif
 }
 
+#define LOAD32_BE(SRC) load32_be(SRC)
+static inline uint32_t
+load32_be(const uint8_t src[4])
+{
+#ifdef NATIVE_BIG_ENDIAN
+    uint32_t w;
+    memcpy(&w, src, sizeof w);
+    return w;
+#else
+    uint32_t w = (uint32_t) src[3];
+    w |= (uint32_t) src[2] <<  8;
+    w |= (uint32_t) src[1] << 16;
+    w |= (uint32_t) src[0] << 24;
+    return w;
+#endif
+}
+
 #define STORE32_BE(DST, W) store32_be((DST), (W))
 static inline void
 store32_be(uint8_t dst[4], uint32_t w)
@@ -147,4 +177,41 @@ store32_be(uint8_t dst[4], uint32_t w)
 #endif
 }
 
+#ifndef __GNUC__
+# ifdef __attribute__
+#  undef __attribute__
+# endif
+# define __attribute__(a)
+#endif
+
+#ifndef CRYPTO_ALIGN
+# if defined(__INTEL_COMPILER) || defined(_MSC_VER)
+#  define CRYPTO_ALIGN(x) __declspec(align(x))
+# else
+#  define CRYPTO_ALIGN(x) __attribute__ ((aligned(x)))
+# endif
+#endif
+
+#if defined(_MSC_VER) && \
+    (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86))
+
+# include <intrin.h>
+
+# define HAVE_INTRIN_H    1
+# define HAVE_MMINTRIN_H  1
+# define HAVE_EMMINTRIN_H 1
+# define HAVE_PMMINTRIN_H 1
+# define HAVE_TMMINTRIN_H 1
+# define HAVE_SMMINTRIN_H 1
+# define HAVE_AVXINTRIN_H 1
+# if _MSC_VER >= 1600
+#  define HAVE_WMMINTRIN_H 1
+# endif
+# if _MSC_VER >= 1700 && defined(_M_X64)
+#  define HAVE_AVX2INTRIN_H 1
+# endif
+#elif defined(HAVE_INTRIN_H)
+# include <intrin.h>
+#endif
+
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/private/sse2_64_32.h libsodium-1.0.12/src/libsodium/include/sodium/private/sse2_64_32.h
--- libsodium-1.0.11/src/libsodium/include/sodium/private/sse2_64_32.h	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/include/sodium/private/sse2_64_32.h	2017-03-06 23:32:40.000000000 +0100
@@ -0,0 +1,50 @@
+#ifndef sse2_64_32_H
+#define sse2_64_32_H 1
+
+#include "common.h"
+
+#ifdef HAVE_INTRIN_H
+# include <intrin.h>
+#endif
+
+#if defined(HAVE_EMMINTRIN_H) && \
+    !(defined(__amd64) || defined(__amd64__) || defined(__x86_64__) || \
+      defined(_M_X64) || defined(_M_AMD64))
+
+# include <emmintrin.h>
+# include <stdint.h>
+
+# ifndef _mm_set_epi64x
+#  define _mm_set_epi64x(Q0, Q1) sodium__mm_set_epi64x((Q0), (Q1))
+static inline __m128i
+sodium__mm_set_epi64x(int64_t q1, int64_t q0)
+{
+    union { int64_t as64; int32_t as32[2]; } x0, x1;
+    x0.as64 = q0; x1.as64 = q1;
+    return _mm_set_epi32(x1.as32[1], x1.as32[0], x0.as32[1], x0.as32[0]);
+}
+# endif
+
+# ifndef _mm_set1_epi64x
+#  define _mm_set1_epi64x(Q) sodium__mm_set1_epi64x(Q)
+static inline __m128i
+sodium__mm_set1_epi64x(int64_t q)
+{
+    return _mm_set_epi64x(q, q);
+}
+# endif
+
+# ifndef _mm_cvtsi64_si128
+#  define _mm_cvtsi64_si128(Q) sodium__mm_cvtsi64_si128(Q)
+static inline __m128i
+sodium__mm_cvtsi64_si128(int64_t q)
+{
+    union { int64_t as64; int32_t as32[2]; } x;
+    x.as64 = q;
+    return _mm_setr_epi32(x.as32[0], x.as32[1], 0, 0);
+}
+# endif
+
+#endif
+
+#endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/randombytes.h libsodium-1.0.12/src/libsodium/include/sodium/randombytes.h
--- libsodium-1.0.11/src/libsodium/include/sodium/randombytes.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/randombytes.h	2017-03-06 23:32:40.000000000 +0100
@@ -2,11 +2,11 @@
 #ifndef randombytes_H
 #define randombytes_H
 
-#include <sys/types.h>
-
 #include <stddef.h>
 #include <stdint.h>
 
+#include <sys/types.h>
+
 #include "export.h"
 
 #ifdef __cplusplus
@@ -25,10 +25,18 @@ typedef struct randombytes_implementatio
     int         (*close)(void);               /* optional */
 } randombytes_implementation;
 
+#define randombytes_SEEDBYTES 32U
+SODIUM_EXPORT
+size_t randombytes_seedbytes(void);
+
 SODIUM_EXPORT
 void randombytes_buf(void * const buf, const size_t size);
 
 SODIUM_EXPORT
+void randombytes_buf_deterministic(void * const buf, const size_t size,
+                                   const unsigned char seed[randombytes_SEEDBYTES]);
+
+SODIUM_EXPORT
 uint32_t randombytes_random(void);
 
 SODIUM_EXPORT
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/utils.h libsodium-1.0.12/src/libsodium/include/sodium/utils.h
--- libsodium-1.0.11/src/libsodium/include/sodium/utils.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/utils.h	2017-03-06 23:32:40.000000000 +0100
@@ -90,15 +90,14 @@ int sodium_munlock(void * const addr, co
  *   a multiple of the required alignment. For this reason, these functions
  *   are designed to store data, such as secret keys and messages.
  *
- * sodium_malloc() can be used to allocate any libsodium data structure,
- * with the exception of crypto_generichash_state.
+ * sodium_malloc() can be used to allocate any libsodium data structure.
  *
  * The crypto_generichash_state structure is packed and its length is
  * either 357 or 361 bytes. For this reason, when using sodium_malloc() to
  * allocate a crypto_generichash_state structure, padding must be added in
- * order to ensure proper alignment:
- * state = sodium_malloc((crypto_generichash_statebytes() + (size_t) 63U)
- *                       & ~(size_t) 63U);
+ * order to ensure proper alignment. crypto_generichash_statebytes()
+ * returns the rounded up structure size, and should be prefered to sizeof():
+ * state = sodium_malloc(crypto_generichash_statebytes());
  */
 
 SODIUM_EXPORT
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium/version.h.in libsodium-1.0.12/src/libsodium/include/sodium/version.h.in
--- libsodium-1.0.11/src/libsodium/include/sodium/version.h.in	2016-05-29 08:39:55.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium/version.h.in	2017-03-06 23:32:40.000000000 +0100
@@ -8,6 +8,7 @@
 
 #define SODIUM_LIBRARY_VERSION_MAJOR @SODIUM_LIBRARY_VERSION_MAJOR@
 #define SODIUM_LIBRARY_VERSION_MINOR @SODIUM_LIBRARY_VERSION_MINOR@
+@SODIUM_LIBRARY_MINIMAL_DEF@
 
 #ifdef __cplusplus
 extern "C" {
@@ -22,6 +23,9 @@ int         sodium_library_version_major
 SODIUM_EXPORT
 int         sodium_library_version_minor(void);
 
+SODIUM_EXPORT
+int         sodium_library_minimal(void);
+
 #ifdef __cplusplus
 }
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/include/sodium.h libsodium-1.0.12/src/libsodium/include/sodium.h
--- libsodium-1.0.11/src/libsodium/include/sodium.h	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/include/sodium.h	2017-03-12 12:08:25.000000000 +0100
@@ -2,9 +2,12 @@
 #ifndef sodium_H
 #define sodium_H
 
+#include "sodium/version.h"
+
 #include "sodium/core.h"
 #include "sodium/crypto_aead_aes256gcm.h"
 #include "sodium/crypto_aead_chacha20poly1305.h"
+#include "sodium/crypto_aead_xchacha20poly1305.h"
 #include "sodium/crypto_auth.h"
 #include "sodium/crypto_auth_hmacsha256.h"
 #include "sodium/crypto_auth_hmacsha512.h"
@@ -21,6 +24,9 @@
 #include "sodium/crypto_hash.h"
 #include "sodium/crypto_hash_sha256.h"
 #include "sodium/crypto_hash_sha512.h"
+#include "sodium/crypto_kdf.h"
+#include "sodium/crypto_kdf_blake2b.h"
+#include "sodium/crypto_kx.h"
 #include "sodium/crypto_onetimeauth.h"
 #include "sodium/crypto_onetimeauth_poly1305.h"
 #include "sodium/crypto_pwhash.h"
@@ -35,11 +41,8 @@
 #include "sodium/crypto_sign.h"
 #include "sodium/crypto_sign_ed25519.h"
 #include "sodium/crypto_stream.h"
-#include "sodium/crypto_stream_aes128ctr.h"
 #include "sodium/crypto_stream_chacha20.h"
 #include "sodium/crypto_stream_salsa20.h"
-#include "sodium/crypto_stream_salsa2012.h"
-#include "sodium/crypto_stream_salsa208.h"
 #include "sodium/crypto_stream_xsalsa20.h"
 #include "sodium/crypto_verify_16.h"
 #include "sodium/crypto_verify_32.h"
@@ -52,6 +55,14 @@
 #include "sodium/randombytes_sysrandom.h"
 #include "sodium/runtime.h"
 #include "sodium/utils.h"
-#include "sodium/version.h"
+
+#ifndef SODIUM_LIBRARY_MINIMAL
+# include "sodium/crypto_box_curve25519xchacha20poly1305.h"
+# include "sodium/crypto_secretbox_xchacha20poly1305.h"
+# include "sodium/crypto_stream_aes128ctr.h"
+# include "sodium/crypto_stream_salsa2012.h"
+# include "sodium/crypto_stream_salsa208.h"
+# include "sodium/crypto_stream_xchacha20.h"
+#endif
 
 #endif
diff -urpN libsodium-1.0.11/src/libsodium/Makefile.am libsodium-1.0.12/src/libsodium/Makefile.am
--- libsodium-1.0.11/src/libsodium/Makefile.am	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/Makefile.am	2017-03-12 12:07:56.000000000 +0100
@@ -3,46 +3,39 @@ lib_LTLIBRARIES = \
 
 libsodium_la_SOURCES = \
 	crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c \
+	crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c \
 	crypto_auth/crypto_auth.c \
-	crypto_auth/hmacsha256/auth_hmacsha256_api.c \
-	crypto_auth/hmacsha256/cp/hmac_hmacsha256.c \
-	crypto_auth/hmacsha256/cp/verify_hmacsha256.c \
-	crypto_auth/hmacsha512/auth_hmacsha512_api.c \
-	crypto_auth/hmacsha512/cp/hmac_hmacsha512.c \
-	crypto_auth/hmacsha512/cp/verify_hmacsha512.c \
-	crypto_auth/hmacsha512256/auth_hmacsha512256_api.c \
-	crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c \
-	crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c \
+	crypto_auth/hmacsha256/auth_hmacsha256.c \
+	crypto_auth/hmacsha512/auth_hmacsha512.c \
+	crypto_auth/hmacsha512256/auth_hmacsha512256.c \
 	crypto_box/crypto_box.c \
 	crypto_box/crypto_box_easy.c \
 	crypto_box/crypto_box_seal.c \
-	crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c \
+	crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c \
 	crypto_core/curve25519/ref10/base.h \
 	crypto_core/curve25519/ref10/base2.h \
 	crypto_core/curve25519/ref10/curve25519_ref10.c \
-	crypto_core/hsalsa20/ref2/core_hsalsa20.c \
-	crypto_core/hsalsa20/core_hsalsa20_api.c \
-	crypto_core/salsa20/ref/core_salsa20.c \
-	crypto_core/salsa20/core_salsa20_api.c \
+	crypto_core/hchacha20/core_hchacha20.c \
+	crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c \
+	crypto_core/hsalsa20/core_hsalsa20.c \
+	crypto_core/salsa/ref/core_salsa_ref.c \
 	crypto_generichash/crypto_generichash.c \
-	crypto_generichash/blake2/generichash_blake2_api.c \
-	crypto_generichash/blake2/ref/blake2-impl.h \
-	crypto_generichash/blake2/ref/blake2.h \
-	crypto_generichash/blake2/ref/blake2b-compress-ref.c \
-	crypto_generichash/blake2/ref/blake2b-load-sse2.h \
-	crypto_generichash/blake2/ref/blake2b-load-sse41.h \
-	crypto_generichash/blake2/ref/blake2b-load-avx2.h \
-	crypto_generichash/blake2/ref/blake2b-ref.c \
-	crypto_generichash/blake2/ref/generichash_blake2b.c \
+	crypto_generichash/blake2b/generichash_blake2.c \
+	crypto_generichash/blake2b/ref/blake2.h \
+	crypto_generichash/blake2b/ref/blake2b-compress-ref.c \
+	crypto_generichash/blake2b/ref/blake2b-load-sse2.h \
+	crypto_generichash/blake2b/ref/blake2b-load-sse41.h \
+	crypto_generichash/blake2b/ref/blake2b-load-avx2.h \
+	crypto_generichash/blake2b/ref/blake2b-ref.c \
+	crypto_generichash/blake2b/ref/generichash_blake2b.c \
 	crypto_hash/crypto_hash.c \
-	crypto_hash/sha256/hash_sha256_api.c \
-	crypto_hash/sha256/cp/hash_sha256.c \
-	crypto_hash/sha512/hash_sha512_api.c \
-	crypto_hash/sha512/cp/hash_sha512.c \
+	crypto_hash/sha256/hash_sha256.c \
+	crypto_hash/sha256/cp/hash_sha256_cp.c \
+	crypto_hash/sha512/hash_sha512.c \
+	crypto_hash/sha512/cp/hash_sha512_cp.c \
+	crypto_kdf/blake2b/kdf_blake2b.c \
+	crypto_kdf/crypto_kdf.c \
+	crypto_kx/crypto_kx.c \
 	crypto_onetimeauth/crypto_onetimeauth.c \
 	crypto_onetimeauth/poly1305/onetimeauth_poly1305.c \
 	crypto_onetimeauth/poly1305/onetimeauth_poly1305.h \
@@ -55,7 +48,6 @@ libsodium_la_SOURCES = \
 	crypto_pwhash/argon2/argon2-encoding.c \
 	crypto_pwhash/argon2/argon2-encoding.h \
 	crypto_pwhash/argon2/argon2-fill-block-ref.c \
-	crypto_pwhash/argon2/argon2-impl.h \
 	crypto_pwhash/argon2/argon2.c \
 	crypto_pwhash/argon2/argon2.h \
 	crypto_pwhash/argon2/blake2b-long.c \
@@ -75,34 +67,30 @@ libsodium_la_SOURCES = \
 	crypto_scalarmult/curve25519/scalarmult_curve25519.h \
 	crypto_secretbox/crypto_secretbox.c \
 	crypto_secretbox/crypto_secretbox_easy.c \
-	crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c \
-	crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c \
+	crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c \
 	crypto_shorthash/crypto_shorthash.c \
-	crypto_shorthash/siphash24/shorthash_siphash24_api.c \
-	crypto_shorthash/siphash24/ref/shorthash_siphash24.c \
+	crypto_shorthash/siphash24/shorthash_siphash24.c \
+	crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c \
+	crypto_shorthash/siphash24/ref/shorthash_siphash_ref.h \
 	crypto_sign/crypto_sign.c \
-	crypto_sign/ed25519/sign_ed25519_api.c \
+	crypto_sign/ed25519/sign_ed25519.c \
+	crypto_sign/ed25519/ref10/ed25519_ref10.h \
 	crypto_sign/ed25519/ref10/keypair.c \
 	crypto_sign/ed25519/ref10/open.c \
 	crypto_sign/ed25519/ref10/sign.c \
 	crypto_stream/chacha20/stream_chacha20.c \
 	crypto_stream/chacha20/stream_chacha20.h \
-	crypto_stream/chacha20/ref/stream_chacha20_ref.h \
-	crypto_stream/chacha20/ref/stream_chacha20_ref.c \
+	crypto_stream/chacha20/ref/chacha20_ref.h \
+	crypto_stream/chacha20/ref/chacha20_ref.c \
 	crypto_stream/crypto_stream.c \
-	crypto_stream/salsa20/stream_salsa20_api.c \
-	crypto_stream/xsalsa20/stream_xsalsa20_api.c \
-	crypto_stream/xsalsa20/ref/stream_xsalsa20.c \
-	crypto_stream/xsalsa20/ref/xor_xsalsa20.c \
-	crypto_verify/16/verify_16_api.c \
-	crypto_verify/16/ref/verify_16.c \
-	crypto_verify/32/verify_32_api.c \
-	crypto_verify/32/ref/verify_32.c \
-	crypto_verify/64/verify_64_api.c \
-	crypto_verify/64/ref/verify_64.c \
+	crypto_stream/salsa20/stream_salsa20.c \
+	crypto_stream/salsa20/stream_salsa20.h \
+	crypto_stream/xsalsa20/stream_xsalsa20.c \
+	crypto_verify/sodium/verify.c \
 	include/sodium/private/common.h \
 	include/sodium/private/curve25519_ref10.h \
 	include/sodium/private/mutex.h \
+	include/sodium/private/sse2_64_32.h \
 	randombytes/randombytes.c \
 	sodium/core.c \
 	sodium/runtime.c \
@@ -133,6 +121,17 @@ libsodium_la_SOURCES += \
 	crypto_scalarmult/curve25519/ref10/x25519_ref10.h
 endif
 
+if HAVE_AMD64_ASM
+libsodium_la_SOURCES += \
+	crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S \
+	crypto_stream/salsa20/xmm6/salsa20_xmm6.c \
+	crypto_stream/salsa20/xmm6/salsa20_xmm6.h
+else
+libsodium_la_SOURCES += \
+	crypto_stream/salsa20/ref/salsa20_ref.c \
+	crypto_stream/salsa20/ref/salsa20_ref.h
+endif
+
 noinst_HEADERS = \
 	crypto_scalarmult/curve25519/sandy2x/consts.S \
 	crypto_scalarmult/curve25519/sandy2x/fe51_mul.S \
@@ -158,41 +157,28 @@ libsodium_la_SOURCES += \
 	crypto_scalarmult/curve25519/sandy2x/sandy2x.S
 endif
 
-if HAVE_AMD64_ASM
-libsodium_la_SOURCES += \
-	crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S
-else
-libsodium_la_SOURCES += \
-	crypto_stream/salsa20/ref/stream_salsa20_ref.c \
-	crypto_stream/salsa20/ref/xor_salsa20_ref.c
-endif
-
 if !MINIMAL
 libsodium_la_SOURCES += \
-	crypto_core/hchacha20/core_hchacha20.c \
-	crypto_core/hchacha20/core_hchacha20.h \
-	crypto_core/salsa2012/ref/core_salsa2012.c \
-	crypto_core/salsa2012/core_salsa2012_api.c \
-	crypto_core/salsa208/ref/core_salsa208.c \
-	crypto_core/salsa208/core_salsa208_api.c \
+	crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c \
+	crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c \
+	crypto_shorthash/siphash24/shorthash_siphashx24.c \
+	crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c \
 	crypto_sign/ed25519/ref10/obsolete.c \
-	crypto_stream/aes128ctr/portable/afternm_aes128ctr.c \
-	crypto_stream/aes128ctr/stream_aes128ctr_api.c \
-	crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c \
-	crypto_stream/aes128ctr/portable/common.h \
-	crypto_stream/aes128ctr/portable/consts.h \
-	crypto_stream/aes128ctr/portable/consts_aes128ctr.c \
-	crypto_stream/aes128ctr/portable/int128.h \
-	crypto_stream/aes128ctr/portable/int128_aes128ctr.c \
-	crypto_stream/aes128ctr/portable/stream_aes128ctr.c \
-	crypto_stream/aes128ctr/portable/types.h \
-	crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c \
-	crypto_stream/salsa2012/stream_salsa2012_api.c \
-	crypto_stream/salsa2012/ref/stream_salsa2012.c \
-	crypto_stream/salsa2012/ref/xor_salsa2012.c \
-	crypto_stream/salsa208/stream_salsa208_api.c \
-	crypto_stream/salsa208/ref/stream_salsa208.c \
-	crypto_stream/salsa208/ref/xor_salsa208.c
+	crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c \
+	crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c \
+	crypto_stream/aes128ctr/nacl/common.h \
+	crypto_stream/aes128ctr/nacl/consts.h \
+	crypto_stream/aes128ctr/nacl/consts_aes128ctr.c \
+	crypto_stream/aes128ctr/nacl/int128.h \
+	crypto_stream/aes128ctr/nacl/int128_aes128ctr.c \
+	crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c \
+	crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c \
+	crypto_stream/aes128ctr/stream_aes128ctr.c \
+	crypto_stream/salsa2012/ref/stream_salsa2012_ref.c \
+	crypto_stream/salsa2012/stream_salsa2012.c \
+	crypto_stream/salsa208/ref/stream_salsa208_ref.c \
+	crypto_stream/salsa208/stream_salsa208.c \
+	crypto_stream/xchacha20/stream_xchacha20.c
 endif
 
 libsodium_la_LDFLAGS = \
@@ -234,27 +220,48 @@ libsse2_la_SOURCES = \
 	crypto_onetimeauth/poly1305/sse2/poly1305_sse2.c \
 	crypto_onetimeauth/poly1305/sse2/poly1305_sse2.h
 
+if !HAVE_AMD64_ASM
+libsse2_la_SOURCES += \
+	crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c \
+	crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.h \
+	crypto_stream/salsa20/xmm6int/u0.h \
+	crypto_stream/salsa20/xmm6int/u1.h \
+	crypto_stream/salsa20/xmm6int/u4.h
+endif
+
 libssse3_la_LDFLAGS = $(libsodium_la_LDFLAGS)
 libssse3_la_CPPFLAGS = $(libsodium_la_CPPFLAGS) \
 	@CFLAGS_SSE2@ @CFLAGS_SSSE3@
 libssse3_la_SOURCES = \
-	crypto_generichash/blake2/ref/blake2b-compress-ssse3.c \
-	crypto_generichash/blake2/ref/blake2b-compress-ssse3.h \
+	crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c \
+	crypto_generichash/blake2b/ref/blake2b-compress-ssse3.h \
 	crypto_pwhash/argon2/argon2-fill-block-ssse3.c \
 	crypto_pwhash/argon2/blamka-round-ssse3.h \
-	crypto_stream/chacha20/vec/stream_chacha20_vec.h \
-	crypto_stream/chacha20/vec/stream_chacha20_vec.c
+	crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c \
+	crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.h \
+	crypto_stream/chacha20/dolbeau/u0.h \
+	crypto_stream/chacha20/dolbeau/u1.h \
+	crypto_stream/chacha20/dolbeau/u4.h
 
 libsse41_la_LDFLAGS = $(libsodium_la_LDFLAGS)
 libsse41_la_CPPFLAGS = $(libsodium_la_CPPFLAGS) \
 	@CFLAGS_SSE2@ @CFLAGS_SSSE3@ @CFLAGS_SSE41@
 libsse41_la_SOURCES = \
-	crypto_generichash/blake2/ref/blake2b-compress-sse41.c \
-	crypto_generichash/blake2/ref/blake2b-compress-sse41.h
+	crypto_generichash/blake2b/ref/blake2b-compress-sse41.c \
+	crypto_generichash/blake2b/ref/blake2b-compress-sse41.h
 
 libavx2_la_LDFLAGS = $(libsodium_la_LDFLAGS)
 libavx2_la_CPPFLAGS = $(libsodium_la_CPPFLAGS) \
 	@CFLAGS_SSE2@ @CFLAGS_SSSE3@ @CFLAGS_SSE41@ @CFLAGS_AVX@ @CFLAGS_AVX2@
 libavx2_la_SOURCES = \
-	crypto_generichash/blake2/ref/blake2b-compress-avx2.c \
-	crypto_generichash/blake2/ref/blake2b-compress-avx2.h
+	crypto_generichash/blake2b/ref/blake2b-compress-avx2.c \
+	crypto_generichash/blake2b/ref/blake2b-compress-avx2.h \
+	crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c \
+	crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.h \
+	crypto_stream/chacha20/dolbeau/u8.h \
+	crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c \
+	crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.h \
+	crypto_stream/salsa20/xmm6int/u0.h \
+	crypto_stream/salsa20/xmm6int/u1.h \
+	crypto_stream/salsa20/xmm6int/u4.h \
+	crypto_stream/salsa20/xmm6int/u8.h
diff -urpN libsodium-1.0.11/src/libsodium/Makefile.in libsodium-1.0.12/src/libsodium/Makefile.in
--- libsodium-1.0.11/src/libsodium/Makefile.in	2016-07-31 16:34:39.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/Makefile.in	2017-03-12 20:17:08.000000000 +0100
@@ -107,7 +107,16 @@ host_triplet = @host@
 @HAVE_TI_MODE_FALSE@	crypto_scalarmult/curve25519/ref10/x25519_ref10.c \
 @HAVE_TI_MODE_FALSE@	crypto_scalarmult/curve25519/ref10/x25519_ref10.h
 
-@HAVE_AVX_ASM_TRUE@am__append_6 = \
+@HAVE_AMD64_ASM_TRUE@am__append_6 = \
+@HAVE_AMD64_ASM_TRUE@	crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S \
+@HAVE_AMD64_ASM_TRUE@	crypto_stream/salsa20/xmm6/salsa20_xmm6.c \
+@HAVE_AMD64_ASM_TRUE@	crypto_stream/salsa20/xmm6/salsa20_xmm6.h
+
+@HAVE_AMD64_ASM_FALSE@am__append_7 = \
+@HAVE_AMD64_ASM_FALSE@	crypto_stream/salsa20/ref/salsa20_ref.c \
+@HAVE_AMD64_ASM_FALSE@	crypto_stream/salsa20/ref/salsa20_ref.h
+
+@HAVE_AVX_ASM_TRUE@am__append_8 = \
 @HAVE_AVX_ASM_TRUE@	crypto_scalarmult/curve25519/sandy2x/consts_namespace.h \
 @HAVE_AVX_ASM_TRUE@	crypto_scalarmult/curve25519/sandy2x/curve25519_sandy2x.c \
 @HAVE_AVX_ASM_TRUE@	crypto_scalarmult/curve25519/sandy2x/curve25519_sandy2x.h \
@@ -122,40 +131,36 @@ host_triplet = @host@
 @HAVE_AVX_ASM_TRUE@	crypto_scalarmult/curve25519/sandy2x/ladder_namespace.h \
 @HAVE_AVX_ASM_TRUE@	crypto_scalarmult/curve25519/sandy2x/sandy2x.S
 
-@HAVE_AMD64_ASM_TRUE@am__append_7 = \
-@HAVE_AMD64_ASM_TRUE@	crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S
-
-@HAVE_AMD64_ASM_FALSE@am__append_8 = \
-@HAVE_AMD64_ASM_FALSE@	crypto_stream/salsa20/ref/stream_salsa20_ref.c \
-@HAVE_AMD64_ASM_FALSE@	crypto_stream/salsa20/ref/xor_salsa20_ref.c
-
 @MINIMAL_FALSE@am__append_9 = \
-@MINIMAL_FALSE@	crypto_core/hchacha20/core_hchacha20.c \
-@MINIMAL_FALSE@	crypto_core/hchacha20/core_hchacha20.h \
-@MINIMAL_FALSE@	crypto_core/salsa2012/ref/core_salsa2012.c \
-@MINIMAL_FALSE@	crypto_core/salsa2012/core_salsa2012_api.c \
-@MINIMAL_FALSE@	crypto_core/salsa208/ref/core_salsa208.c \
-@MINIMAL_FALSE@	crypto_core/salsa208/core_salsa208_api.c \
+@MINIMAL_FALSE@	crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c \
+@MINIMAL_FALSE@	crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c \
+@MINIMAL_FALSE@	crypto_shorthash/siphash24/shorthash_siphashx24.c \
+@MINIMAL_FALSE@	crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c \
 @MINIMAL_FALSE@	crypto_sign/ed25519/ref10/obsolete.c \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/afternm_aes128ctr.c \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/stream_aes128ctr_api.c \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/common.h \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/consts.h \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/consts_aes128ctr.c \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/int128.h \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/int128_aes128ctr.c \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/stream_aes128ctr.c \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/types.h \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c \
-@MINIMAL_FALSE@	crypto_stream/salsa2012/stream_salsa2012_api.c \
-@MINIMAL_FALSE@	crypto_stream/salsa2012/ref/stream_salsa2012.c \
-@MINIMAL_FALSE@	crypto_stream/salsa2012/ref/xor_salsa2012.c \
-@MINIMAL_FALSE@	crypto_stream/salsa208/stream_salsa208_api.c \
-@MINIMAL_FALSE@	crypto_stream/salsa208/ref/stream_salsa208.c \
-@MINIMAL_FALSE@	crypto_stream/salsa208/ref/xor_salsa208.c
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/common.h \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/consts.h \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/consts_aes128ctr.c \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/int128.h \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/int128_aes128ctr.c \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/stream_aes128ctr.c \
+@MINIMAL_FALSE@	crypto_stream/salsa2012/ref/stream_salsa2012_ref.c \
+@MINIMAL_FALSE@	crypto_stream/salsa2012/stream_salsa2012.c \
+@MINIMAL_FALSE@	crypto_stream/salsa208/ref/stream_salsa208_ref.c \
+@MINIMAL_FALSE@	crypto_stream/salsa208/stream_salsa208.c \
+@MINIMAL_FALSE@	crypto_stream/xchacha20/stream_xchacha20.c
 
 @HAVE_LD_OUTPUT_DEF_TRUE@am__append_10 = -Wl,--output-def,libsodium-$(DLL_VERSION).def
+@HAVE_AMD64_ASM_FALSE@am__append_11 = \
+@HAVE_AMD64_ASM_FALSE@	crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c \
+@HAVE_AMD64_ASM_FALSE@	crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.h \
+@HAVE_AMD64_ASM_FALSE@	crypto_stream/salsa20/xmm6int/u0.h \
+@HAVE_AMD64_ASM_FALSE@	crypto_stream/salsa20/xmm6int/u1.h \
+@HAVE_AMD64_ASM_FALSE@	crypto_stream/salsa20/xmm6int/u4.h
+
 subdir = src/libsodium
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/m4/ax_check_compile_flag.m4 \
@@ -215,7 +220,9 @@ libaesni_la_LINK = $(LIBTOOL) $(AM_V_lt)
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
 	$(libaesni_la_LDFLAGS) $(LDFLAGS) -o $@
 libavx2_la_LIBADD =
-am_libavx2_la_OBJECTS = crypto_generichash/blake2/ref/libavx2_la-blake2b-compress-avx2.lo
+am_libavx2_la_OBJECTS = crypto_generichash/blake2b/ref/libavx2_la-blake2b-compress-avx2.lo \
+	crypto_stream/chacha20/dolbeau/libavx2_la-chacha20_dolbeau-avx2.lo \
+	crypto_stream/salsa20/xmm6int/libavx2_la-salsa20_xmm6int-avx2.lo
 libavx2_la_OBJECTS = $(am_libavx2_la_OBJECTS)
 libavx2_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
@@ -224,45 +231,36 @@ libsodium_la_DEPENDENCIES = libaesni.la
 	libsse41.la libavx2.la
 am__libsodium_la_SOURCES_DIST =  \
 	crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c \
+	crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c \
 	crypto_auth/crypto_auth.c \
-	crypto_auth/hmacsha256/auth_hmacsha256_api.c \
-	crypto_auth/hmacsha256/cp/hmac_hmacsha256.c \
-	crypto_auth/hmacsha256/cp/verify_hmacsha256.c \
-	crypto_auth/hmacsha512/auth_hmacsha512_api.c \
-	crypto_auth/hmacsha512/cp/hmac_hmacsha512.c \
-	crypto_auth/hmacsha512/cp/verify_hmacsha512.c \
-	crypto_auth/hmacsha512256/auth_hmacsha512256_api.c \
-	crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c \
-	crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c \
+	crypto_auth/hmacsha256/auth_hmacsha256.c \
+	crypto_auth/hmacsha512/auth_hmacsha512.c \
+	crypto_auth/hmacsha512256/auth_hmacsha512256.c \
 	crypto_box/crypto_box.c crypto_box/crypto_box_easy.c \
 	crypto_box/crypto_box_seal.c \
-	crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c \
+	crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c \
 	crypto_core/curve25519/ref10/base.h \
 	crypto_core/curve25519/ref10/base2.h \
 	crypto_core/curve25519/ref10/curve25519_ref10.c \
-	crypto_core/hsalsa20/ref2/core_hsalsa20.c \
-	crypto_core/hsalsa20/core_hsalsa20_api.c \
-	crypto_core/salsa20/ref/core_salsa20.c \
-	crypto_core/salsa20/core_salsa20_api.c \
+	crypto_core/hchacha20/core_hchacha20.c \
+	crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c \
+	crypto_core/hsalsa20/core_hsalsa20.c \
+	crypto_core/salsa/ref/core_salsa_ref.c \
 	crypto_generichash/crypto_generichash.c \
-	crypto_generichash/blake2/generichash_blake2_api.c \
-	crypto_generichash/blake2/ref/blake2-impl.h \
-	crypto_generichash/blake2/ref/blake2.h \
-	crypto_generichash/blake2/ref/blake2b-compress-ref.c \
-	crypto_generichash/blake2/ref/blake2b-load-sse2.h \
-	crypto_generichash/blake2/ref/blake2b-load-sse41.h \
-	crypto_generichash/blake2/ref/blake2b-load-avx2.h \
-	crypto_generichash/blake2/ref/blake2b-ref.c \
-	crypto_generichash/blake2/ref/generichash_blake2b.c \
-	crypto_hash/crypto_hash.c crypto_hash/sha256/hash_sha256_api.c \
-	crypto_hash/sha256/cp/hash_sha256.c \
-	crypto_hash/sha512/hash_sha512_api.c \
-	crypto_hash/sha512/cp/hash_sha512.c \
-	crypto_onetimeauth/crypto_onetimeauth.c \
+	crypto_generichash/blake2b/generichash_blake2.c \
+	crypto_generichash/blake2b/ref/blake2.h \
+	crypto_generichash/blake2b/ref/blake2b-compress-ref.c \
+	crypto_generichash/blake2b/ref/blake2b-load-sse2.h \
+	crypto_generichash/blake2b/ref/blake2b-load-sse41.h \
+	crypto_generichash/blake2b/ref/blake2b-load-avx2.h \
+	crypto_generichash/blake2b/ref/blake2b-ref.c \
+	crypto_generichash/blake2b/ref/generichash_blake2b.c \
+	crypto_hash/crypto_hash.c crypto_hash/sha256/hash_sha256.c \
+	crypto_hash/sha256/cp/hash_sha256_cp.c \
+	crypto_hash/sha512/hash_sha512.c \
+	crypto_hash/sha512/cp/hash_sha512_cp.c \
+	crypto_kdf/blake2b/kdf_blake2b.c crypto_kdf/crypto_kdf.c \
+	crypto_kx/crypto_kx.c crypto_onetimeauth/crypto_onetimeauth.c \
 	crypto_onetimeauth/poly1305/onetimeauth_poly1305.c \
 	crypto_onetimeauth/poly1305/onetimeauth_poly1305.h \
 	crypto_onetimeauth/poly1305/donna/poly1305_donna.h \
@@ -274,7 +272,6 @@ am__libsodium_la_SOURCES_DIST =  \
 	crypto_pwhash/argon2/argon2-encoding.c \
 	crypto_pwhash/argon2/argon2-encoding.h \
 	crypto_pwhash/argon2/argon2-fill-block-ref.c \
-	crypto_pwhash/argon2/argon2-impl.h \
 	crypto_pwhash/argon2/argon2.c crypto_pwhash/argon2/argon2.h \
 	crypto_pwhash/argon2/blake2b-long.c \
 	crypto_pwhash/argon2/blake2b-long.h \
@@ -293,34 +290,28 @@ am__libsodium_la_SOURCES_DIST =  \
 	crypto_scalarmult/curve25519/scalarmult_curve25519.h \
 	crypto_secretbox/crypto_secretbox.c \
 	crypto_secretbox/crypto_secretbox_easy.c \
-	crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c \
-	crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c \
+	crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c \
 	crypto_shorthash/crypto_shorthash.c \
-	crypto_shorthash/siphash24/shorthash_siphash24_api.c \
-	crypto_shorthash/siphash24/ref/shorthash_siphash24.c \
-	crypto_sign/crypto_sign.c \
-	crypto_sign/ed25519/sign_ed25519_api.c \
+	crypto_shorthash/siphash24/shorthash_siphash24.c \
+	crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c \
+	crypto_shorthash/siphash24/ref/shorthash_siphash_ref.h \
+	crypto_sign/crypto_sign.c crypto_sign/ed25519/sign_ed25519.c \
+	crypto_sign/ed25519/ref10/ed25519_ref10.h \
 	crypto_sign/ed25519/ref10/keypair.c \
 	crypto_sign/ed25519/ref10/open.c \
 	crypto_sign/ed25519/ref10/sign.c \
 	crypto_stream/chacha20/stream_chacha20.c \
 	crypto_stream/chacha20/stream_chacha20.h \
-	crypto_stream/chacha20/ref/stream_chacha20_ref.h \
-	crypto_stream/chacha20/ref/stream_chacha20_ref.c \
+	crypto_stream/chacha20/ref/chacha20_ref.h \
+	crypto_stream/chacha20/ref/chacha20_ref.c \
 	crypto_stream/crypto_stream.c \
-	crypto_stream/salsa20/stream_salsa20_api.c \
-	crypto_stream/xsalsa20/stream_xsalsa20_api.c \
-	crypto_stream/xsalsa20/ref/stream_xsalsa20.c \
-	crypto_stream/xsalsa20/ref/xor_xsalsa20.c \
-	crypto_verify/16/verify_16_api.c \
-	crypto_verify/16/ref/verify_16.c \
-	crypto_verify/32/verify_32_api.c \
-	crypto_verify/32/ref/verify_32.c \
-	crypto_verify/64/verify_64_api.c \
-	crypto_verify/64/ref/verify_64.c \
-	include/sodium/private/common.h \
+	crypto_stream/salsa20/stream_salsa20.c \
+	crypto_stream/salsa20/stream_salsa20.h \
+	crypto_stream/xsalsa20/stream_xsalsa20.c \
+	crypto_verify/sodium/verify.c include/sodium/private/common.h \
 	include/sodium/private/curve25519_ref10.h \
-	include/sodium/private/mutex.h randombytes/randombytes.c \
+	include/sodium/private/mutex.h \
+	include/sodium/private/sse2_64_32.h randombytes/randombytes.c \
 	sodium/core.c sodium/runtime.c sodium/utils.c sodium/version.c \
 	randombytes/salsa20/randombytes_salsa20_random.c \
 	randombytes/nativeclient/randombytes_nativeclient.c \
@@ -329,6 +320,11 @@ am__libsodium_la_SOURCES_DIST =  \
 	crypto_scalarmult/curve25519/donna_c64/curve25519_donna_c64.h \
 	crypto_scalarmult/curve25519/ref10/x25519_ref10.c \
 	crypto_scalarmult/curve25519/ref10/x25519_ref10.h \
+	crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S \
+	crypto_stream/salsa20/xmm6/salsa20_xmm6.c \
+	crypto_stream/salsa20/xmm6/salsa20_xmm6.h \
+	crypto_stream/salsa20/ref/salsa20_ref.c \
+	crypto_stream/salsa20/ref/salsa20_ref.h \
 	crypto_scalarmult/curve25519/sandy2x/consts_namespace.h \
 	crypto_scalarmult/curve25519/sandy2x/curve25519_sandy2x.c \
 	crypto_scalarmult/curve25519/sandy2x/curve25519_sandy2x.h \
@@ -342,98 +338,83 @@ am__libsodium_la_SOURCES_DIST =  \
 	crypto_scalarmult/curve25519/sandy2x/ladder_base_namespace.h \
 	crypto_scalarmult/curve25519/sandy2x/ladder_namespace.h \
 	crypto_scalarmult/curve25519/sandy2x/sandy2x.S \
-	crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S \
-	crypto_stream/salsa20/ref/stream_salsa20_ref.c \
-	crypto_stream/salsa20/ref/xor_salsa20_ref.c \
-	crypto_core/hchacha20/core_hchacha20.c \
-	crypto_core/hchacha20/core_hchacha20.h \
-	crypto_core/salsa2012/ref/core_salsa2012.c \
-	crypto_core/salsa2012/core_salsa2012_api.c \
-	crypto_core/salsa208/ref/core_salsa208.c \
-	crypto_core/salsa208/core_salsa208_api.c \
+	crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c \
+	crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c \
+	crypto_shorthash/siphash24/shorthash_siphashx24.c \
+	crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c \
 	crypto_sign/ed25519/ref10/obsolete.c \
-	crypto_stream/aes128ctr/portable/afternm_aes128ctr.c \
-	crypto_stream/aes128ctr/stream_aes128ctr_api.c \
-	crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c \
-	crypto_stream/aes128ctr/portable/common.h \
-	crypto_stream/aes128ctr/portable/consts.h \
-	crypto_stream/aes128ctr/portable/consts_aes128ctr.c \
-	crypto_stream/aes128ctr/portable/int128.h \
-	crypto_stream/aes128ctr/portable/int128_aes128ctr.c \
-	crypto_stream/aes128ctr/portable/stream_aes128ctr.c \
-	crypto_stream/aes128ctr/portable/types.h \
-	crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c \
-	crypto_stream/salsa2012/stream_salsa2012_api.c \
-	crypto_stream/salsa2012/ref/stream_salsa2012.c \
-	crypto_stream/salsa2012/ref/xor_salsa2012.c \
-	crypto_stream/salsa208/stream_salsa208_api.c \
-	crypto_stream/salsa208/ref/stream_salsa208.c \
-	crypto_stream/salsa208/ref/xor_salsa208.c
+	crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c \
+	crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c \
+	crypto_stream/aes128ctr/nacl/common.h \
+	crypto_stream/aes128ctr/nacl/consts.h \
+	crypto_stream/aes128ctr/nacl/consts_aes128ctr.c \
+	crypto_stream/aes128ctr/nacl/int128.h \
+	crypto_stream/aes128ctr/nacl/int128_aes128ctr.c \
+	crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c \
+	crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c \
+	crypto_stream/aes128ctr/stream_aes128ctr.c \
+	crypto_stream/salsa2012/ref/stream_salsa2012_ref.c \
+	crypto_stream/salsa2012/stream_salsa2012.c \
+	crypto_stream/salsa208/ref/stream_salsa208_ref.c \
+	crypto_stream/salsa208/stream_salsa208.c \
+	crypto_stream/xchacha20/stream_xchacha20.c
 @EMSCRIPTEN_FALSE@am__objects_1 = randombytes/salsa20/libsodium_la-randombytes_salsa20_random.lo
 @EMSCRIPTEN_FALSE@@NATIVECLIENT_TRUE@am__objects_2 = randombytes/nativeclient/libsodium_la-randombytes_nativeclient.lo
 @EMSCRIPTEN_FALSE@@NATIVECLIENT_FALSE@am__objects_3 = randombytes/sysrandom/libsodium_la-randombytes_sysrandom.lo
 @HAVE_TI_MODE_TRUE@am__objects_4 = crypto_scalarmult/curve25519/donna_c64/libsodium_la-curve25519_donna_c64.lo
 @HAVE_TI_MODE_FALSE@am__objects_5 = crypto_scalarmult/curve25519/ref10/libsodium_la-x25519_ref10.lo
-@HAVE_AVX_ASM_TRUE@am__objects_6 = crypto_scalarmult/curve25519/sandy2x/libsodium_la-curve25519_sandy2x.lo \
+@HAVE_AMD64_ASM_TRUE@am__objects_6 = crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6-asm.lo \
+@HAVE_AMD64_ASM_TRUE@	crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6.lo
+@HAVE_AMD64_ASM_FALSE@am__objects_7 = crypto_stream/salsa20/ref/libsodium_la-salsa20_ref.lo
+@HAVE_AVX_ASM_TRUE@am__objects_8 = crypto_scalarmult/curve25519/sandy2x/libsodium_la-curve25519_sandy2x.lo \
 @HAVE_AVX_ASM_TRUE@	crypto_scalarmult/curve25519/sandy2x/libsodium_la-fe51_invert.lo \
 @HAVE_AVX_ASM_TRUE@	crypto_scalarmult/curve25519/sandy2x/libsodium_la-fe_frombytes_sandy2x.lo \
 @HAVE_AVX_ASM_TRUE@	crypto_scalarmult/curve25519/sandy2x/libsodium_la-sandy2x.lo
-@HAVE_AMD64_ASM_TRUE@am__objects_7 = crypto_stream/salsa20/amd64_xmm6/libsodium_la-stream_salsa20_amd64_xmm6.lo
-@HAVE_AMD64_ASM_FALSE@am__objects_8 = crypto_stream/salsa20/ref/libsodium_la-stream_salsa20_ref.lo \
-@HAVE_AMD64_ASM_FALSE@	crypto_stream/salsa20/ref/libsodium_la-xor_salsa20_ref.lo
-@MINIMAL_FALSE@am__objects_9 = crypto_core/hchacha20/libsodium_la-core_hchacha20.lo \
-@MINIMAL_FALSE@	crypto_core/salsa2012/ref/libsodium_la-core_salsa2012.lo \
-@MINIMAL_FALSE@	crypto_core/salsa2012/libsodium_la-core_salsa2012_api.lo \
-@MINIMAL_FALSE@	crypto_core/salsa208/ref/libsodium_la-core_salsa208.lo \
-@MINIMAL_FALSE@	crypto_core/salsa208/libsodium_la-core_salsa208_api.lo \
+@MINIMAL_FALSE@am__objects_9 = crypto_box/curve25519xchacha20poly1305/libsodium_la-box_curve25519xchacha20poly1305.lo \
+@MINIMAL_FALSE@	crypto_secretbox/xchacha20poly1305/libsodium_la-secretbox_xchacha20poly1305.lo \
+@MINIMAL_FALSE@	crypto_shorthash/siphash24/libsodium_la-shorthash_siphashx24.lo \
+@MINIMAL_FALSE@	crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphashx24_ref.lo \
 @MINIMAL_FALSE@	crypto_sign/ed25519/ref10/libsodium_la-obsolete.lo \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/libsodium_la-afternm_aes128ctr.lo \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr_api.lo \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/libsodium_la-beforenm_aes128ctr.lo \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/libsodium_la-consts_aes128ctr.lo \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/libsodium_la-int128_aes128ctr.lo \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/libsodium_la-stream_aes128ctr.lo \
-@MINIMAL_FALSE@	crypto_stream/aes128ctr/portable/libsodium_la-xor_afternm_aes128ctr.lo \
-@MINIMAL_FALSE@	crypto_stream/salsa2012/libsodium_la-stream_salsa2012_api.lo \
-@MINIMAL_FALSE@	crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012.lo \
-@MINIMAL_FALSE@	crypto_stream/salsa2012/ref/libsodium_la-xor_salsa2012.lo \
-@MINIMAL_FALSE@	crypto_stream/salsa208/libsodium_la-stream_salsa208_api.lo \
-@MINIMAL_FALSE@	crypto_stream/salsa208/ref/libsodium_la-stream_salsa208.lo \
-@MINIMAL_FALSE@	crypto_stream/salsa208/ref/libsodium_la-xor_salsa208.lo
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/libsodium_la-afternm_aes128ctr.lo \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/libsodium_la-beforenm_aes128ctr.lo \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/libsodium_la-consts_aes128ctr.lo \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/libsodium_la-int128_aes128ctr.lo \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/libsodium_la-stream_aes128ctr_nacl.lo \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/nacl/libsodium_la-xor_afternm_aes128ctr.lo \
+@MINIMAL_FALSE@	crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr.lo \
+@MINIMAL_FALSE@	crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012_ref.lo \
+@MINIMAL_FALSE@	crypto_stream/salsa2012/libsodium_la-stream_salsa2012.lo \
+@MINIMAL_FALSE@	crypto_stream/salsa208/ref/libsodium_la-stream_salsa208_ref.lo \
+@MINIMAL_FALSE@	crypto_stream/salsa208/libsodium_la-stream_salsa208.lo \
+@MINIMAL_FALSE@	crypto_stream/xchacha20/libsodium_la-stream_xchacha20.lo
 am_libsodium_la_OBJECTS = crypto_aead/chacha20poly1305/sodium/libsodium_la-aead_chacha20poly1305.lo \
+	crypto_aead/xchacha20poly1305/sodium/libsodium_la-aead_xchacha20poly1305.lo \
 	crypto_auth/libsodium_la-crypto_auth.lo \
-	crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256_api.lo \
-	crypto_auth/hmacsha256/cp/libsodium_la-hmac_hmacsha256.lo \
-	crypto_auth/hmacsha256/cp/libsodium_la-verify_hmacsha256.lo \
-	crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512_api.lo \
-	crypto_auth/hmacsha512/cp/libsodium_la-hmac_hmacsha512.lo \
-	crypto_auth/hmacsha512/cp/libsodium_la-verify_hmacsha512.lo \
-	crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256_api.lo \
-	crypto_auth/hmacsha512256/cp/libsodium_la-hmac_hmacsha512256.lo \
-	crypto_auth/hmacsha512256/cp/libsodium_la-verify_hmacsha512256.lo \
+	crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256.lo \
+	crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512.lo \
+	crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256.lo \
 	crypto_box/libsodium_la-crypto_box.lo \
 	crypto_box/libsodium_la-crypto_box_easy.lo \
 	crypto_box/libsodium_la-crypto_box_seal.lo \
-	crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305_api.lo \
-	crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-after_curve25519xsalsa20poly1305.lo \
-	crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-before_curve25519xsalsa20poly1305.lo \
-	crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-box_curve25519xsalsa20poly1305.lo \
-	crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-keypair_curve25519xsalsa20poly1305.lo \
+	crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305.lo \
 	crypto_core/curve25519/ref10/libsodium_la-curve25519_ref10.lo \
-	crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20.lo \
-	crypto_core/hsalsa20/libsodium_la-core_hsalsa20_api.lo \
-	crypto_core/salsa20/ref/libsodium_la-core_salsa20.lo \
-	crypto_core/salsa20/libsodium_la-core_salsa20_api.lo \
+	crypto_core/hchacha20/libsodium_la-core_hchacha20.lo \
+	crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20_ref2.lo \
+	crypto_core/hsalsa20/libsodium_la-core_hsalsa20.lo \
+	crypto_core/salsa/ref/libsodium_la-core_salsa_ref.lo \
 	crypto_generichash/libsodium_la-crypto_generichash.lo \
-	crypto_generichash/blake2/libsodium_la-generichash_blake2_api.lo \
-	crypto_generichash/blake2/ref/libsodium_la-blake2b-compress-ref.lo \
-	crypto_generichash/blake2/ref/libsodium_la-blake2b-ref.lo \
-	crypto_generichash/blake2/ref/libsodium_la-generichash_blake2b.lo \
+	crypto_generichash/blake2b/libsodium_la-generichash_blake2.lo \
+	crypto_generichash/blake2b/ref/libsodium_la-blake2b-compress-ref.lo \
+	crypto_generichash/blake2b/ref/libsodium_la-blake2b-ref.lo \
+	crypto_generichash/blake2b/ref/libsodium_la-generichash_blake2b.lo \
 	crypto_hash/libsodium_la-crypto_hash.lo \
-	crypto_hash/sha256/libsodium_la-hash_sha256_api.lo \
-	crypto_hash/sha256/cp/libsodium_la-hash_sha256.lo \
-	crypto_hash/sha512/libsodium_la-hash_sha512_api.lo \
-	crypto_hash/sha512/cp/libsodium_la-hash_sha512.lo \
+	crypto_hash/sha256/libsodium_la-hash_sha256.lo \
+	crypto_hash/sha256/cp/libsodium_la-hash_sha256_cp.lo \
+	crypto_hash/sha512/libsodium_la-hash_sha512.lo \
+	crypto_hash/sha512/cp/libsodium_la-hash_sha512_cp.lo \
+	crypto_kdf/blake2b/libsodium_la-kdf_blake2b.lo \
+	crypto_kdf/libsodium_la-crypto_kdf.lo \
+	crypto_kx/libsodium_la-crypto_kx.lo \
 	crypto_onetimeauth/libsodium_la-crypto_onetimeauth.lo \
 	crypto_onetimeauth/poly1305/libsodium_la-onetimeauth_poly1305.lo \
 	crypto_onetimeauth/poly1305/donna/libsodium_la-poly1305_donna.lo \
@@ -453,29 +434,21 @@ am_libsodium_la_OBJECTS = crypto_aead/ch
 	crypto_scalarmult/curve25519/libsodium_la-scalarmult_curve25519.lo \
 	crypto_secretbox/libsodium_la-crypto_secretbox.lo \
 	crypto_secretbox/libsodium_la-crypto_secretbox_easy.lo \
-	crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305_api.lo \
-	crypto_secretbox/xsalsa20poly1305/ref/libsodium_la-box_xsalsa20poly1305.lo \
+	crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305.lo \
 	crypto_shorthash/libsodium_la-crypto_shorthash.lo \
-	crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24_api.lo \
-	crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24.lo \
+	crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24.lo \
+	crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24_ref.lo \
 	crypto_sign/libsodium_la-crypto_sign.lo \
-	crypto_sign/ed25519/libsodium_la-sign_ed25519_api.lo \
+	crypto_sign/ed25519/libsodium_la-sign_ed25519.lo \
 	crypto_sign/ed25519/ref10/libsodium_la-keypair.lo \
 	crypto_sign/ed25519/ref10/libsodium_la-open.lo \
 	crypto_sign/ed25519/ref10/libsodium_la-sign.lo \
 	crypto_stream/chacha20/libsodium_la-stream_chacha20.lo \
-	crypto_stream/chacha20/ref/libsodium_la-stream_chacha20_ref.lo \
+	crypto_stream/chacha20/ref/libsodium_la-chacha20_ref.lo \
 	crypto_stream/libsodium_la-crypto_stream.lo \
-	crypto_stream/salsa20/libsodium_la-stream_salsa20_api.lo \
-	crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20_api.lo \
-	crypto_stream/xsalsa20/ref/libsodium_la-stream_xsalsa20.lo \
-	crypto_stream/xsalsa20/ref/libsodium_la-xor_xsalsa20.lo \
-	crypto_verify/16/libsodium_la-verify_16_api.lo \
-	crypto_verify/16/ref/libsodium_la-verify_16.lo \
-	crypto_verify/32/libsodium_la-verify_32_api.lo \
-	crypto_verify/32/ref/libsodium_la-verify_32.lo \
-	crypto_verify/64/libsodium_la-verify_64_api.lo \
-	crypto_verify/64/ref/libsodium_la-verify_64.lo \
+	crypto_stream/salsa20/libsodium_la-stream_salsa20.lo \
+	crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20.lo \
+	crypto_verify/sodium/libsodium_la-verify.lo \
 	randombytes/libsodium_la-randombytes.lo \
 	sodium/libsodium_la-core.lo sodium/libsodium_la-runtime.lo \
 	sodium/libsodium_la-utils.lo sodium/libsodium_la-version.lo \
@@ -487,22 +460,32 @@ libsodium_la_LINK = $(LIBTOOL) $(AM_V_lt
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
 	$(libsodium_la_LDFLAGS) $(LDFLAGS) -o $@
 libsse2_la_LIBADD =
+am__libsse2_la_SOURCES_DIST = crypto_pwhash/scryptsalsa208sha256/sse/pwhash_scryptsalsa208sha256_sse.c \
+	crypto_onetimeauth/poly1305/sse2/poly1305_sse2.c \
+	crypto_onetimeauth/poly1305/sse2/poly1305_sse2.h \
+	crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c \
+	crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.h \
+	crypto_stream/salsa20/xmm6int/u0.h \
+	crypto_stream/salsa20/xmm6int/u1.h \
+	crypto_stream/salsa20/xmm6int/u4.h
+@HAVE_AMD64_ASM_FALSE@am__objects_10 = crypto_stream/salsa20/xmm6int/libsse2_la-salsa20_xmm6int-sse2.lo
 am_libsse2_la_OBJECTS = crypto_pwhash/scryptsalsa208sha256/sse/libsse2_la-pwhash_scryptsalsa208sha256_sse.lo \
-	crypto_onetimeauth/poly1305/sse2/libsse2_la-poly1305_sse2.lo
+	crypto_onetimeauth/poly1305/sse2/libsse2_la-poly1305_sse2.lo \
+	$(am__objects_10)
 libsse2_la_OBJECTS = $(am_libsse2_la_OBJECTS)
 libsse2_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
 	$(libsse2_la_LDFLAGS) $(LDFLAGS) -o $@
 libsse41_la_LIBADD =
-am_libsse41_la_OBJECTS = crypto_generichash/blake2/ref/libsse41_la-blake2b-compress-sse41.lo
+am_libsse41_la_OBJECTS = crypto_generichash/blake2b/ref/libsse41_la-blake2b-compress-sse41.lo
 libsse41_la_OBJECTS = $(am_libsse41_la_OBJECTS)
 libsse41_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
 	$(libsse41_la_LDFLAGS) $(LDFLAGS) -o $@
 libssse3_la_LIBADD =
-am_libssse3_la_OBJECTS = crypto_generichash/blake2/ref/libssse3_la-blake2b-compress-ssse3.lo \
+am_libssse3_la_OBJECTS = crypto_generichash/blake2b/ref/libssse3_la-blake2b-compress-ssse3.lo \
 	crypto_pwhash/argon2/libssse3_la-argon2-fill-block-ssse3.lo \
-	crypto_stream/chacha20/vec/libssse3_la-stream_chacha20_vec.lo
+	crypto_stream/chacha20/dolbeau/libssse3_la-chacha20_dolbeau-ssse3.lo
 libssse3_la_OBJECTS = $(am_libssse3_la_OBJECTS)
 libssse3_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
@@ -555,8 +538,9 @@ SOURCES = $(libaesni_la_SOURCES) $(libav
 	$(libsodium_la_SOURCES) $(libsse2_la_SOURCES) \
 	$(libsse41_la_SOURCES) $(libssse3_la_SOURCES)
 DIST_SOURCES = $(libaesni_la_SOURCES) $(libavx2_la_SOURCES) \
-	$(am__libsodium_la_SOURCES_DIST) $(libsse2_la_SOURCES) \
-	$(libsse41_la_SOURCES) $(libssse3_la_SOURCES)
+	$(am__libsodium_la_SOURCES_DIST) \
+	$(am__libsse2_la_SOURCES_DIST) $(libsse41_la_SOURCES) \
+	$(libssse3_la_SOURCES)
 RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
 	ctags-recursive dvi-recursive html-recursive info-recursive \
 	install-data-recursive install-dvi-recursive \
@@ -716,6 +700,7 @@ SAFECODE_HOME = @SAFECODE_HOME@
 SED = @SED@
 SET_MAKE = @SET_MAKE@
 SHELL = @SHELL@
+SODIUM_LIBRARY_MINIMAL_DEF = @SODIUM_LIBRARY_MINIMAL_DEF@
 SODIUM_LIBRARY_VERSION = @SODIUM_LIBRARY_VERSION@
 SODIUM_LIBRARY_VERSION_MAJOR = @SODIUM_LIBRARY_VERSION_MAJOR@
 SODIUM_LIBRARY_VERSION_MINOR = @SODIUM_LIBRARY_VERSION_MINOR@
@@ -786,45 +771,36 @@ lib_LTLIBRARIES = \
 
 libsodium_la_SOURCES =  \
 	crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c \
+	crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c \
 	crypto_auth/crypto_auth.c \
-	crypto_auth/hmacsha256/auth_hmacsha256_api.c \
-	crypto_auth/hmacsha256/cp/hmac_hmacsha256.c \
-	crypto_auth/hmacsha256/cp/verify_hmacsha256.c \
-	crypto_auth/hmacsha512/auth_hmacsha512_api.c \
-	crypto_auth/hmacsha512/cp/hmac_hmacsha512.c \
-	crypto_auth/hmacsha512/cp/verify_hmacsha512.c \
-	crypto_auth/hmacsha512256/auth_hmacsha512256_api.c \
-	crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c \
-	crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c \
+	crypto_auth/hmacsha256/auth_hmacsha256.c \
+	crypto_auth/hmacsha512/auth_hmacsha512.c \
+	crypto_auth/hmacsha512256/auth_hmacsha512256.c \
 	crypto_box/crypto_box.c crypto_box/crypto_box_easy.c \
 	crypto_box/crypto_box_seal.c \
-	crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c \
-	crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c \
+	crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c \
 	crypto_core/curve25519/ref10/base.h \
 	crypto_core/curve25519/ref10/base2.h \
 	crypto_core/curve25519/ref10/curve25519_ref10.c \
-	crypto_core/hsalsa20/ref2/core_hsalsa20.c \
-	crypto_core/hsalsa20/core_hsalsa20_api.c \
-	crypto_core/salsa20/ref/core_salsa20.c \
-	crypto_core/salsa20/core_salsa20_api.c \
+	crypto_core/hchacha20/core_hchacha20.c \
+	crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c \
+	crypto_core/hsalsa20/core_hsalsa20.c \
+	crypto_core/salsa/ref/core_salsa_ref.c \
 	crypto_generichash/crypto_generichash.c \
-	crypto_generichash/blake2/generichash_blake2_api.c \
-	crypto_generichash/blake2/ref/blake2-impl.h \
-	crypto_generichash/blake2/ref/blake2.h \
-	crypto_generichash/blake2/ref/blake2b-compress-ref.c \
-	crypto_generichash/blake2/ref/blake2b-load-sse2.h \
-	crypto_generichash/blake2/ref/blake2b-load-sse41.h \
-	crypto_generichash/blake2/ref/blake2b-load-avx2.h \
-	crypto_generichash/blake2/ref/blake2b-ref.c \
-	crypto_generichash/blake2/ref/generichash_blake2b.c \
-	crypto_hash/crypto_hash.c crypto_hash/sha256/hash_sha256_api.c \
-	crypto_hash/sha256/cp/hash_sha256.c \
-	crypto_hash/sha512/hash_sha512_api.c \
-	crypto_hash/sha512/cp/hash_sha512.c \
-	crypto_onetimeauth/crypto_onetimeauth.c \
+	crypto_generichash/blake2b/generichash_blake2.c \
+	crypto_generichash/blake2b/ref/blake2.h \
+	crypto_generichash/blake2b/ref/blake2b-compress-ref.c \
+	crypto_generichash/blake2b/ref/blake2b-load-sse2.h \
+	crypto_generichash/blake2b/ref/blake2b-load-sse41.h \
+	crypto_generichash/blake2b/ref/blake2b-load-avx2.h \
+	crypto_generichash/blake2b/ref/blake2b-ref.c \
+	crypto_generichash/blake2b/ref/generichash_blake2b.c \
+	crypto_hash/crypto_hash.c crypto_hash/sha256/hash_sha256.c \
+	crypto_hash/sha256/cp/hash_sha256_cp.c \
+	crypto_hash/sha512/hash_sha512.c \
+	crypto_hash/sha512/cp/hash_sha512_cp.c \
+	crypto_kdf/blake2b/kdf_blake2b.c crypto_kdf/crypto_kdf.c \
+	crypto_kx/crypto_kx.c crypto_onetimeauth/crypto_onetimeauth.c \
 	crypto_onetimeauth/poly1305/onetimeauth_poly1305.c \
 	crypto_onetimeauth/poly1305/onetimeauth_poly1305.h \
 	crypto_onetimeauth/poly1305/donna/poly1305_donna.h \
@@ -836,7 +812,6 @@ libsodium_la_SOURCES =  \
 	crypto_pwhash/argon2/argon2-encoding.c \
 	crypto_pwhash/argon2/argon2-encoding.h \
 	crypto_pwhash/argon2/argon2-fill-block-ref.c \
-	crypto_pwhash/argon2/argon2-impl.h \
 	crypto_pwhash/argon2/argon2.c crypto_pwhash/argon2/argon2.h \
 	crypto_pwhash/argon2/blake2b-long.c \
 	crypto_pwhash/argon2/blake2b-long.h \
@@ -855,34 +830,28 @@ libsodium_la_SOURCES =  \
 	crypto_scalarmult/curve25519/scalarmult_curve25519.h \
 	crypto_secretbox/crypto_secretbox.c \
 	crypto_secretbox/crypto_secretbox_easy.c \
-	crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c \
-	crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c \
+	crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c \
 	crypto_shorthash/crypto_shorthash.c \
-	crypto_shorthash/siphash24/shorthash_siphash24_api.c \
-	crypto_shorthash/siphash24/ref/shorthash_siphash24.c \
-	crypto_sign/crypto_sign.c \
-	crypto_sign/ed25519/sign_ed25519_api.c \
+	crypto_shorthash/siphash24/shorthash_siphash24.c \
+	crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c \
+	crypto_shorthash/siphash24/ref/shorthash_siphash_ref.h \
+	crypto_sign/crypto_sign.c crypto_sign/ed25519/sign_ed25519.c \
+	crypto_sign/ed25519/ref10/ed25519_ref10.h \
 	crypto_sign/ed25519/ref10/keypair.c \
 	crypto_sign/ed25519/ref10/open.c \
 	crypto_sign/ed25519/ref10/sign.c \
 	crypto_stream/chacha20/stream_chacha20.c \
 	crypto_stream/chacha20/stream_chacha20.h \
-	crypto_stream/chacha20/ref/stream_chacha20_ref.h \
-	crypto_stream/chacha20/ref/stream_chacha20_ref.c \
+	crypto_stream/chacha20/ref/chacha20_ref.h \
+	crypto_stream/chacha20/ref/chacha20_ref.c \
 	crypto_stream/crypto_stream.c \
-	crypto_stream/salsa20/stream_salsa20_api.c \
-	crypto_stream/xsalsa20/stream_xsalsa20_api.c \
-	crypto_stream/xsalsa20/ref/stream_xsalsa20.c \
-	crypto_stream/xsalsa20/ref/xor_xsalsa20.c \
-	crypto_verify/16/verify_16_api.c \
-	crypto_verify/16/ref/verify_16.c \
-	crypto_verify/32/verify_32_api.c \
-	crypto_verify/32/ref/verify_32.c \
-	crypto_verify/64/verify_64_api.c \
-	crypto_verify/64/ref/verify_64.c \
-	include/sodium/private/common.h \
+	crypto_stream/salsa20/stream_salsa20.c \
+	crypto_stream/salsa20/stream_salsa20.h \
+	crypto_stream/xsalsa20/stream_xsalsa20.c \
+	crypto_verify/sodium/verify.c include/sodium/private/common.h \
 	include/sodium/private/curve25519_ref10.h \
-	include/sodium/private/mutex.h randombytes/randombytes.c \
+	include/sodium/private/mutex.h \
+	include/sodium/private/sse2_64_32.h randombytes/randombytes.c \
 	sodium/core.c sodium/runtime.c sodium/utils.c sodium/version.c \
 	$(am__append_1) $(am__append_2) $(am__append_3) \
 	$(am__append_4) $(am__append_5) $(am__append_6) \
@@ -921,38 +890,49 @@ libsse2_la_LDFLAGS = $(libsodium_la_LDFL
 libsse2_la_CPPFLAGS = $(libsodium_la_CPPFLAGS) \
 	@CFLAGS_SSE2@
 
-libsse2_la_SOURCES = \
-	crypto_pwhash/scryptsalsa208sha256/sse/pwhash_scryptsalsa208sha256_sse.c \
+libsse2_la_SOURCES = crypto_pwhash/scryptsalsa208sha256/sse/pwhash_scryptsalsa208sha256_sse.c \
 	crypto_onetimeauth/poly1305/sse2/poly1305_sse2.c \
-	crypto_onetimeauth/poly1305/sse2/poly1305_sse2.h
-
+	crypto_onetimeauth/poly1305/sse2/poly1305_sse2.h \
+	$(am__append_11)
 libssse3_la_LDFLAGS = $(libsodium_la_LDFLAGS)
 libssse3_la_CPPFLAGS = $(libsodium_la_CPPFLAGS) \
 	@CFLAGS_SSE2@ @CFLAGS_SSSE3@
 
 libssse3_la_SOURCES = \
-	crypto_generichash/blake2/ref/blake2b-compress-ssse3.c \
-	crypto_generichash/blake2/ref/blake2b-compress-ssse3.h \
+	crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c \
+	crypto_generichash/blake2b/ref/blake2b-compress-ssse3.h \
 	crypto_pwhash/argon2/argon2-fill-block-ssse3.c \
 	crypto_pwhash/argon2/blamka-round-ssse3.h \
-	crypto_stream/chacha20/vec/stream_chacha20_vec.h \
-	crypto_stream/chacha20/vec/stream_chacha20_vec.c
+	crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c \
+	crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.h \
+	crypto_stream/chacha20/dolbeau/u0.h \
+	crypto_stream/chacha20/dolbeau/u1.h \
+	crypto_stream/chacha20/dolbeau/u4.h
 
 libsse41_la_LDFLAGS = $(libsodium_la_LDFLAGS)
 libsse41_la_CPPFLAGS = $(libsodium_la_CPPFLAGS) \
 	@CFLAGS_SSE2@ @CFLAGS_SSSE3@ @CFLAGS_SSE41@
 
 libsse41_la_SOURCES = \
-	crypto_generichash/blake2/ref/blake2b-compress-sse41.c \
-	crypto_generichash/blake2/ref/blake2b-compress-sse41.h
+	crypto_generichash/blake2b/ref/blake2b-compress-sse41.c \
+	crypto_generichash/blake2b/ref/blake2b-compress-sse41.h
 
 libavx2_la_LDFLAGS = $(libsodium_la_LDFLAGS)
 libavx2_la_CPPFLAGS = $(libsodium_la_CPPFLAGS) \
 	@CFLAGS_SSE2@ @CFLAGS_SSSE3@ @CFLAGS_SSE41@ @CFLAGS_AVX@ @CFLAGS_AVX2@
 
 libavx2_la_SOURCES = \
-	crypto_generichash/blake2/ref/blake2b-compress-avx2.c \
-	crypto_generichash/blake2/ref/blake2b-compress-avx2.h
+	crypto_generichash/blake2b/ref/blake2b-compress-avx2.c \
+	crypto_generichash/blake2b/ref/blake2b-compress-avx2.h \
+	crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c \
+	crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.h \
+	crypto_stream/chacha20/dolbeau/u8.h \
+	crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c \
+	crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.h \
+	crypto_stream/salsa20/xmm6int/u0.h \
+	crypto_stream/salsa20/xmm6int/u1.h \
+	crypto_stream/salsa20/xmm6int/u4.h \
+	crypto_stream/salsa20/xmm6int/u8.h
 
 all: all-recursive
 
@@ -1045,15 +1025,33 @@ crypto_aead/aes256gcm/aesni/libaesni_la-
 
 libaesni.la: $(libaesni_la_OBJECTS) $(libaesni_la_DEPENDENCIES) $(EXTRA_libaesni_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libaesni_la_LINK)  $(libaesni_la_OBJECTS) $(libaesni_la_LIBADD) $(LIBS)
-crypto_generichash/blake2/ref/$(am__dirstamp):
-	@$(MKDIR_P) crypto_generichash/blake2/ref
-	@: > crypto_generichash/blake2/ref/$(am__dirstamp)
-crypto_generichash/blake2/ref/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_generichash/blake2/ref/$(DEPDIR)
-	@: > crypto_generichash/blake2/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_generichash/blake2/ref/libavx2_la-blake2b-compress-avx2.lo:  \
-	crypto_generichash/blake2/ref/$(am__dirstamp) \
-	crypto_generichash/blake2/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_generichash/blake2b/ref/$(am__dirstamp):
+	@$(MKDIR_P) crypto_generichash/blake2b/ref
+	@: > crypto_generichash/blake2b/ref/$(am__dirstamp)
+crypto_generichash/blake2b/ref/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_generichash/blake2b/ref/$(DEPDIR)
+	@: > crypto_generichash/blake2b/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_generichash/blake2b/ref/libavx2_la-blake2b-compress-avx2.lo:  \
+	crypto_generichash/blake2b/ref/$(am__dirstamp) \
+	crypto_generichash/blake2b/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/chacha20/dolbeau/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/chacha20/dolbeau
+	@: > crypto_stream/chacha20/dolbeau/$(am__dirstamp)
+crypto_stream/chacha20/dolbeau/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/chacha20/dolbeau/$(DEPDIR)
+	@: > crypto_stream/chacha20/dolbeau/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/chacha20/dolbeau/libavx2_la-chacha20_dolbeau-avx2.lo:  \
+	crypto_stream/chacha20/dolbeau/$(am__dirstamp) \
+	crypto_stream/chacha20/dolbeau/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa20/xmm6int/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/salsa20/xmm6int
+	@: > crypto_stream/salsa20/xmm6int/$(am__dirstamp)
+crypto_stream/salsa20/xmm6int/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/salsa20/xmm6int/$(DEPDIR)
+	@: > crypto_stream/salsa20/xmm6int/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa20/xmm6int/libavx2_la-salsa20_xmm6int-avx2.lo:  \
+	crypto_stream/salsa20/xmm6int/$(am__dirstamp) \
+	crypto_stream/salsa20/xmm6int/$(DEPDIR)/$(am__dirstamp)
 
 libavx2.la: $(libavx2_la_OBJECTS) $(libavx2_la_DEPENDENCIES) $(EXTRA_libavx2_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libavx2_la_LINK)  $(libavx2_la_OBJECTS) $(libavx2_la_LIBADD) $(LIBS)
@@ -1066,6 +1064,15 @@ crypto_aead/chacha20poly1305/sodium/$(DE
 crypto_aead/chacha20poly1305/sodium/libsodium_la-aead_chacha20poly1305.lo:  \
 	crypto_aead/chacha20poly1305/sodium/$(am__dirstamp) \
 	crypto_aead/chacha20poly1305/sodium/$(DEPDIR)/$(am__dirstamp)
+crypto_aead/xchacha20poly1305/sodium/$(am__dirstamp):
+	@$(MKDIR_P) crypto_aead/xchacha20poly1305/sodium
+	@: > crypto_aead/xchacha20poly1305/sodium/$(am__dirstamp)
+crypto_aead/xchacha20poly1305/sodium/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_aead/xchacha20poly1305/sodium/$(DEPDIR)
+	@: > crypto_aead/xchacha20poly1305/sodium/$(DEPDIR)/$(am__dirstamp)
+crypto_aead/xchacha20poly1305/sodium/libsodium_la-aead_xchacha20poly1305.lo:  \
+	crypto_aead/xchacha20poly1305/sodium/$(am__dirstamp) \
+	crypto_aead/xchacha20poly1305/sodium/$(DEPDIR)/$(am__dirstamp)
 crypto_auth/$(am__dirstamp):
 	@$(MKDIR_P) crypto_auth
 	@: > crypto_auth/$(am__dirstamp)
@@ -1080,63 +1087,27 @@ crypto_auth/hmacsha256/$(am__dirstamp):
 crypto_auth/hmacsha256/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_auth/hmacsha256/$(DEPDIR)
 	@: > crypto_auth/hmacsha256/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256_api.lo:  \
+crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256.lo:  \
 	crypto_auth/hmacsha256/$(am__dirstamp) \
 	crypto_auth/hmacsha256/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha256/cp/$(am__dirstamp):
-	@$(MKDIR_P) crypto_auth/hmacsha256/cp
-	@: > crypto_auth/hmacsha256/cp/$(am__dirstamp)
-crypto_auth/hmacsha256/cp/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_auth/hmacsha256/cp/$(DEPDIR)
-	@: > crypto_auth/hmacsha256/cp/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha256/cp/libsodium_la-hmac_hmacsha256.lo:  \
-	crypto_auth/hmacsha256/cp/$(am__dirstamp) \
-	crypto_auth/hmacsha256/cp/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha256/cp/libsodium_la-verify_hmacsha256.lo:  \
-	crypto_auth/hmacsha256/cp/$(am__dirstamp) \
-	crypto_auth/hmacsha256/cp/$(DEPDIR)/$(am__dirstamp)
 crypto_auth/hmacsha512/$(am__dirstamp):
 	@$(MKDIR_P) crypto_auth/hmacsha512
 	@: > crypto_auth/hmacsha512/$(am__dirstamp)
 crypto_auth/hmacsha512/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_auth/hmacsha512/$(DEPDIR)
 	@: > crypto_auth/hmacsha512/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512_api.lo:  \
+crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512.lo:  \
 	crypto_auth/hmacsha512/$(am__dirstamp) \
 	crypto_auth/hmacsha512/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha512/cp/$(am__dirstamp):
-	@$(MKDIR_P) crypto_auth/hmacsha512/cp
-	@: > crypto_auth/hmacsha512/cp/$(am__dirstamp)
-crypto_auth/hmacsha512/cp/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_auth/hmacsha512/cp/$(DEPDIR)
-	@: > crypto_auth/hmacsha512/cp/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha512/cp/libsodium_la-hmac_hmacsha512.lo:  \
-	crypto_auth/hmacsha512/cp/$(am__dirstamp) \
-	crypto_auth/hmacsha512/cp/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha512/cp/libsodium_la-verify_hmacsha512.lo:  \
-	crypto_auth/hmacsha512/cp/$(am__dirstamp) \
-	crypto_auth/hmacsha512/cp/$(DEPDIR)/$(am__dirstamp)
 crypto_auth/hmacsha512256/$(am__dirstamp):
 	@$(MKDIR_P) crypto_auth/hmacsha512256
 	@: > crypto_auth/hmacsha512256/$(am__dirstamp)
 crypto_auth/hmacsha512256/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_auth/hmacsha512256/$(DEPDIR)
 	@: > crypto_auth/hmacsha512256/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256_api.lo:  \
+crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256.lo:  \
 	crypto_auth/hmacsha512256/$(am__dirstamp) \
 	crypto_auth/hmacsha512256/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha512256/cp/$(am__dirstamp):
-	@$(MKDIR_P) crypto_auth/hmacsha512256/cp
-	@: > crypto_auth/hmacsha512256/cp/$(am__dirstamp)
-crypto_auth/hmacsha512256/cp/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_auth/hmacsha512256/cp/$(DEPDIR)
-	@: > crypto_auth/hmacsha512256/cp/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha512256/cp/libsodium_la-hmac_hmacsha512256.lo:  \
-	crypto_auth/hmacsha512256/cp/$(am__dirstamp) \
-	crypto_auth/hmacsha512256/cp/$(DEPDIR)/$(am__dirstamp)
-crypto_auth/hmacsha512256/cp/libsodium_la-verify_hmacsha512256.lo:  \
-	crypto_auth/hmacsha512256/cp/$(am__dirstamp) \
-	crypto_auth/hmacsha512256/cp/$(DEPDIR)/$(am__dirstamp)
 crypto_box/$(am__dirstamp):
 	@$(MKDIR_P) crypto_box
 	@: > crypto_box/$(am__dirstamp)
@@ -1157,27 +1128,9 @@ crypto_box/curve25519xsalsa20poly1305/$(
 crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)
 	@: > crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/$(am__dirstamp)
-crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305_api.lo:  \
+crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305.lo:  \
 	crypto_box/curve25519xsalsa20poly1305/$(am__dirstamp) \
 	crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/$(am__dirstamp)
-crypto_box/curve25519xsalsa20poly1305/ref/$(am__dirstamp):
-	@$(MKDIR_P) crypto_box/curve25519xsalsa20poly1305/ref
-	@: > crypto_box/curve25519xsalsa20poly1305/ref/$(am__dirstamp)
-crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)
-	@: > crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-after_curve25519xsalsa20poly1305.lo:  \
-	crypto_box/curve25519xsalsa20poly1305/ref/$(am__dirstamp) \
-	crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-before_curve25519xsalsa20poly1305.lo:  \
-	crypto_box/curve25519xsalsa20poly1305/ref/$(am__dirstamp) \
-	crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-box_curve25519xsalsa20poly1305.lo:  \
-	crypto_box/curve25519xsalsa20poly1305/ref/$(am__dirstamp) \
-	crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-keypair_curve25519xsalsa20poly1305.lo:  \
-	crypto_box/curve25519xsalsa20poly1305/ref/$(am__dirstamp) \
-	crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/$(am__dirstamp)
 crypto_core/curve25519/ref10/$(am__dirstamp):
 	@$(MKDIR_P) crypto_core/curve25519/ref10
 	@: > crypto_core/curve25519/ref10/$(am__dirstamp)
@@ -1187,13 +1140,22 @@ crypto_core/curve25519/ref10/$(DEPDIR)/$
 crypto_core/curve25519/ref10/libsodium_la-curve25519_ref10.lo:  \
 	crypto_core/curve25519/ref10/$(am__dirstamp) \
 	crypto_core/curve25519/ref10/$(DEPDIR)/$(am__dirstamp)
+crypto_core/hchacha20/$(am__dirstamp):
+	@$(MKDIR_P) crypto_core/hchacha20
+	@: > crypto_core/hchacha20/$(am__dirstamp)
+crypto_core/hchacha20/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_core/hchacha20/$(DEPDIR)
+	@: > crypto_core/hchacha20/$(DEPDIR)/$(am__dirstamp)
+crypto_core/hchacha20/libsodium_la-core_hchacha20.lo:  \
+	crypto_core/hchacha20/$(am__dirstamp) \
+	crypto_core/hchacha20/$(DEPDIR)/$(am__dirstamp)
 crypto_core/hsalsa20/ref2/$(am__dirstamp):
 	@$(MKDIR_P) crypto_core/hsalsa20/ref2
 	@: > crypto_core/hsalsa20/ref2/$(am__dirstamp)
 crypto_core/hsalsa20/ref2/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_core/hsalsa20/ref2/$(DEPDIR)
 	@: > crypto_core/hsalsa20/ref2/$(DEPDIR)/$(am__dirstamp)
-crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20.lo:  \
+crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20_ref2.lo:  \
 	crypto_core/hsalsa20/ref2/$(am__dirstamp) \
 	crypto_core/hsalsa20/ref2/$(DEPDIR)/$(am__dirstamp)
 crypto_core/hsalsa20/$(am__dirstamp):
@@ -1202,27 +1164,18 @@ crypto_core/hsalsa20/$(am__dirstamp):
 crypto_core/hsalsa20/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_core/hsalsa20/$(DEPDIR)
 	@: > crypto_core/hsalsa20/$(DEPDIR)/$(am__dirstamp)
-crypto_core/hsalsa20/libsodium_la-core_hsalsa20_api.lo:  \
+crypto_core/hsalsa20/libsodium_la-core_hsalsa20.lo:  \
 	crypto_core/hsalsa20/$(am__dirstamp) \
 	crypto_core/hsalsa20/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa20/ref/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa20/ref
-	@: > crypto_core/salsa20/ref/$(am__dirstamp)
-crypto_core/salsa20/ref/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa20/ref/$(DEPDIR)
-	@: > crypto_core/salsa20/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa20/ref/libsodium_la-core_salsa20.lo:  \
-	crypto_core/salsa20/ref/$(am__dirstamp) \
-	crypto_core/salsa20/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa20/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa20
-	@: > crypto_core/salsa20/$(am__dirstamp)
-crypto_core/salsa20/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa20/$(DEPDIR)
-	@: > crypto_core/salsa20/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa20/libsodium_la-core_salsa20_api.lo:  \
-	crypto_core/salsa20/$(am__dirstamp) \
-	crypto_core/salsa20/$(DEPDIR)/$(am__dirstamp)
+crypto_core/salsa/ref/$(am__dirstamp):
+	@$(MKDIR_P) crypto_core/salsa/ref
+	@: > crypto_core/salsa/ref/$(am__dirstamp)
+crypto_core/salsa/ref/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_core/salsa/ref/$(DEPDIR)
+	@: > crypto_core/salsa/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_core/salsa/ref/libsodium_la-core_salsa_ref.lo:  \
+	crypto_core/salsa/ref/$(am__dirstamp) \
+	crypto_core/salsa/ref/$(DEPDIR)/$(am__dirstamp)
 crypto_generichash/$(am__dirstamp):
 	@$(MKDIR_P) crypto_generichash
 	@: > crypto_generichash/$(am__dirstamp)
@@ -1232,24 +1185,24 @@ crypto_generichash/$(DEPDIR)/$(am__dirst
 crypto_generichash/libsodium_la-crypto_generichash.lo:  \
 	crypto_generichash/$(am__dirstamp) \
 	crypto_generichash/$(DEPDIR)/$(am__dirstamp)
-crypto_generichash/blake2/$(am__dirstamp):
-	@$(MKDIR_P) crypto_generichash/blake2
-	@: > crypto_generichash/blake2/$(am__dirstamp)
-crypto_generichash/blake2/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_generichash/blake2/$(DEPDIR)
-	@: > crypto_generichash/blake2/$(DEPDIR)/$(am__dirstamp)
-crypto_generichash/blake2/libsodium_la-generichash_blake2_api.lo:  \
-	crypto_generichash/blake2/$(am__dirstamp) \
-	crypto_generichash/blake2/$(DEPDIR)/$(am__dirstamp)
-crypto_generichash/blake2/ref/libsodium_la-blake2b-compress-ref.lo:  \
-	crypto_generichash/blake2/ref/$(am__dirstamp) \
-	crypto_generichash/blake2/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_generichash/blake2/ref/libsodium_la-blake2b-ref.lo:  \
-	crypto_generichash/blake2/ref/$(am__dirstamp) \
-	crypto_generichash/blake2/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_generichash/blake2/ref/libsodium_la-generichash_blake2b.lo:  \
-	crypto_generichash/blake2/ref/$(am__dirstamp) \
-	crypto_generichash/blake2/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_generichash/blake2b/$(am__dirstamp):
+	@$(MKDIR_P) crypto_generichash/blake2b
+	@: > crypto_generichash/blake2b/$(am__dirstamp)
+crypto_generichash/blake2b/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_generichash/blake2b/$(DEPDIR)
+	@: > crypto_generichash/blake2b/$(DEPDIR)/$(am__dirstamp)
+crypto_generichash/blake2b/libsodium_la-generichash_blake2.lo:  \
+	crypto_generichash/blake2b/$(am__dirstamp) \
+	crypto_generichash/blake2b/$(DEPDIR)/$(am__dirstamp)
+crypto_generichash/blake2b/ref/libsodium_la-blake2b-compress-ref.lo:  \
+	crypto_generichash/blake2b/ref/$(am__dirstamp) \
+	crypto_generichash/blake2b/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_generichash/blake2b/ref/libsodium_la-blake2b-ref.lo:  \
+	crypto_generichash/blake2b/ref/$(am__dirstamp) \
+	crypto_generichash/blake2b/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_generichash/blake2b/ref/libsodium_la-generichash_blake2b.lo:  \
+	crypto_generichash/blake2b/ref/$(am__dirstamp) \
+	crypto_generichash/blake2b/ref/$(DEPDIR)/$(am__dirstamp)
 crypto_hash/$(am__dirstamp):
 	@$(MKDIR_P) crypto_hash
 	@: > crypto_hash/$(am__dirstamp)
@@ -1264,7 +1217,7 @@ crypto_hash/sha256/$(am__dirstamp):
 crypto_hash/sha256/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_hash/sha256/$(DEPDIR)
 	@: > crypto_hash/sha256/$(DEPDIR)/$(am__dirstamp)
-crypto_hash/sha256/libsodium_la-hash_sha256_api.lo:  \
+crypto_hash/sha256/libsodium_la-hash_sha256.lo:  \
 	crypto_hash/sha256/$(am__dirstamp) \
 	crypto_hash/sha256/$(DEPDIR)/$(am__dirstamp)
 crypto_hash/sha256/cp/$(am__dirstamp):
@@ -1273,7 +1226,7 @@ crypto_hash/sha256/cp/$(am__dirstamp):
 crypto_hash/sha256/cp/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_hash/sha256/cp/$(DEPDIR)
 	@: > crypto_hash/sha256/cp/$(DEPDIR)/$(am__dirstamp)
-crypto_hash/sha256/cp/libsodium_la-hash_sha256.lo:  \
+crypto_hash/sha256/cp/libsodium_la-hash_sha256_cp.lo:  \
 	crypto_hash/sha256/cp/$(am__dirstamp) \
 	crypto_hash/sha256/cp/$(DEPDIR)/$(am__dirstamp)
 crypto_hash/sha512/$(am__dirstamp):
@@ -1282,7 +1235,7 @@ crypto_hash/sha512/$(am__dirstamp):
 crypto_hash/sha512/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_hash/sha512/$(DEPDIR)
 	@: > crypto_hash/sha512/$(DEPDIR)/$(am__dirstamp)
-crypto_hash/sha512/libsodium_la-hash_sha512_api.lo:  \
+crypto_hash/sha512/libsodium_la-hash_sha512.lo:  \
 	crypto_hash/sha512/$(am__dirstamp) \
 	crypto_hash/sha512/$(DEPDIR)/$(am__dirstamp)
 crypto_hash/sha512/cp/$(am__dirstamp):
@@ -1291,9 +1244,34 @@ crypto_hash/sha512/cp/$(am__dirstamp):
 crypto_hash/sha512/cp/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_hash/sha512/cp/$(DEPDIR)
 	@: > crypto_hash/sha512/cp/$(DEPDIR)/$(am__dirstamp)
-crypto_hash/sha512/cp/libsodium_la-hash_sha512.lo:  \
+crypto_hash/sha512/cp/libsodium_la-hash_sha512_cp.lo:  \
 	crypto_hash/sha512/cp/$(am__dirstamp) \
 	crypto_hash/sha512/cp/$(DEPDIR)/$(am__dirstamp)
+crypto_kdf/blake2b/$(am__dirstamp):
+	@$(MKDIR_P) crypto_kdf/blake2b
+	@: > crypto_kdf/blake2b/$(am__dirstamp)
+crypto_kdf/blake2b/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_kdf/blake2b/$(DEPDIR)
+	@: > crypto_kdf/blake2b/$(DEPDIR)/$(am__dirstamp)
+crypto_kdf/blake2b/libsodium_la-kdf_blake2b.lo:  \
+	crypto_kdf/blake2b/$(am__dirstamp) \
+	crypto_kdf/blake2b/$(DEPDIR)/$(am__dirstamp)
+crypto_kdf/$(am__dirstamp):
+	@$(MKDIR_P) crypto_kdf
+	@: > crypto_kdf/$(am__dirstamp)
+crypto_kdf/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_kdf/$(DEPDIR)
+	@: > crypto_kdf/$(DEPDIR)/$(am__dirstamp)
+crypto_kdf/libsodium_la-crypto_kdf.lo: crypto_kdf/$(am__dirstamp) \
+	crypto_kdf/$(DEPDIR)/$(am__dirstamp)
+crypto_kx/$(am__dirstamp):
+	@$(MKDIR_P) crypto_kx
+	@: > crypto_kx/$(am__dirstamp)
+crypto_kx/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_kx/$(DEPDIR)
+	@: > crypto_kx/$(DEPDIR)/$(am__dirstamp)
+crypto_kx/libsodium_la-crypto_kx.lo: crypto_kx/$(am__dirstamp) \
+	crypto_kx/$(DEPDIR)/$(am__dirstamp)
 crypto_onetimeauth/$(am__dirstamp):
 	@$(MKDIR_P) crypto_onetimeauth
 	@: > crypto_onetimeauth/$(am__dirstamp)
@@ -1417,18 +1395,9 @@ crypto_secretbox/xsalsa20poly1305/$(am__
 crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_secretbox/xsalsa20poly1305/$(DEPDIR)
 	@: > crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/$(am__dirstamp)
-crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305_api.lo:  \
+crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305.lo:  \
 	crypto_secretbox/xsalsa20poly1305/$(am__dirstamp) \
 	crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/$(am__dirstamp)
-crypto_secretbox/xsalsa20poly1305/ref/$(am__dirstamp):
-	@$(MKDIR_P) crypto_secretbox/xsalsa20poly1305/ref
-	@: > crypto_secretbox/xsalsa20poly1305/ref/$(am__dirstamp)
-crypto_secretbox/xsalsa20poly1305/ref/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_secretbox/xsalsa20poly1305/ref/$(DEPDIR)
-	@: > crypto_secretbox/xsalsa20poly1305/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_secretbox/xsalsa20poly1305/ref/libsodium_la-box_xsalsa20poly1305.lo:  \
-	crypto_secretbox/xsalsa20poly1305/ref/$(am__dirstamp) \
-	crypto_secretbox/xsalsa20poly1305/ref/$(DEPDIR)/$(am__dirstamp)
 crypto_shorthash/$(am__dirstamp):
 	@$(MKDIR_P) crypto_shorthash
 	@: > crypto_shorthash/$(am__dirstamp)
@@ -1444,7 +1413,7 @@ crypto_shorthash/siphash24/$(am__dirstam
 crypto_shorthash/siphash24/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_shorthash/siphash24/$(DEPDIR)
 	@: > crypto_shorthash/siphash24/$(DEPDIR)/$(am__dirstamp)
-crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24_api.lo:  \
+crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24.lo:  \
 	crypto_shorthash/siphash24/$(am__dirstamp) \
 	crypto_shorthash/siphash24/$(DEPDIR)/$(am__dirstamp)
 crypto_shorthash/siphash24/ref/$(am__dirstamp):
@@ -1453,7 +1422,7 @@ crypto_shorthash/siphash24/ref/$(am__dir
 crypto_shorthash/siphash24/ref/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_shorthash/siphash24/ref/$(DEPDIR)
 	@: > crypto_shorthash/siphash24/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24.lo:  \
+crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24_ref.lo:  \
 	crypto_shorthash/siphash24/ref/$(am__dirstamp) \
 	crypto_shorthash/siphash24/ref/$(DEPDIR)/$(am__dirstamp)
 crypto_sign/$(am__dirstamp):
@@ -1470,7 +1439,7 @@ crypto_sign/ed25519/$(am__dirstamp):
 crypto_sign/ed25519/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_sign/ed25519/$(DEPDIR)
 	@: > crypto_sign/ed25519/$(DEPDIR)/$(am__dirstamp)
-crypto_sign/ed25519/libsodium_la-sign_ed25519_api.lo:  \
+crypto_sign/ed25519/libsodium_la-sign_ed25519.lo:  \
 	crypto_sign/ed25519/$(am__dirstamp) \
 	crypto_sign/ed25519/$(DEPDIR)/$(am__dirstamp)
 crypto_sign/ed25519/ref10/$(am__dirstamp):
@@ -1503,7 +1472,7 @@ crypto_stream/chacha20/ref/$(am__dirstam
 crypto_stream/chacha20/ref/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_stream/chacha20/ref/$(DEPDIR)
 	@: > crypto_stream/chacha20/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/chacha20/ref/libsodium_la-stream_chacha20_ref.lo:  \
+crypto_stream/chacha20/ref/libsodium_la-chacha20_ref.lo:  \
 	crypto_stream/chacha20/ref/$(am__dirstamp) \
 	crypto_stream/chacha20/ref/$(DEPDIR)/$(am__dirstamp)
 crypto_stream/$(am__dirstamp):
@@ -1521,7 +1490,7 @@ crypto_stream/salsa20/$(am__dirstamp):
 crypto_stream/salsa20/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_stream/salsa20/$(DEPDIR)
 	@: > crypto_stream/salsa20/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa20/libsodium_la-stream_salsa20_api.lo:  \
+crypto_stream/salsa20/libsodium_la-stream_salsa20.lo:  \
 	crypto_stream/salsa20/$(am__dirstamp) \
 	crypto_stream/salsa20/$(DEPDIR)/$(am__dirstamp)
 crypto_stream/xsalsa20/$(am__dirstamp):
@@ -1530,75 +1499,18 @@ crypto_stream/xsalsa20/$(am__dirstamp):
 crypto_stream/xsalsa20/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_stream/xsalsa20/$(DEPDIR)
 	@: > crypto_stream/xsalsa20/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20_api.lo:  \
+crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20.lo:  \
 	crypto_stream/xsalsa20/$(am__dirstamp) \
 	crypto_stream/xsalsa20/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/xsalsa20/ref/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/xsalsa20/ref
-	@: > crypto_stream/xsalsa20/ref/$(am__dirstamp)
-crypto_stream/xsalsa20/ref/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/xsalsa20/ref/$(DEPDIR)
-	@: > crypto_stream/xsalsa20/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/xsalsa20/ref/libsodium_la-stream_xsalsa20.lo:  \
-	crypto_stream/xsalsa20/ref/$(am__dirstamp) \
-	crypto_stream/xsalsa20/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/xsalsa20/ref/libsodium_la-xor_xsalsa20.lo:  \
-	crypto_stream/xsalsa20/ref/$(am__dirstamp) \
-	crypto_stream/xsalsa20/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/16/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/16
-	@: > crypto_verify/16/$(am__dirstamp)
-crypto_verify/16/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/16/$(DEPDIR)
-	@: > crypto_verify/16/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/16/libsodium_la-verify_16_api.lo:  \
-	crypto_verify/16/$(am__dirstamp) \
-	crypto_verify/16/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/16/ref/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/16/ref
-	@: > crypto_verify/16/ref/$(am__dirstamp)
-crypto_verify/16/ref/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/16/ref/$(DEPDIR)
-	@: > crypto_verify/16/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/16/ref/libsodium_la-verify_16.lo:  \
-	crypto_verify/16/ref/$(am__dirstamp) \
-	crypto_verify/16/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/32/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/32
-	@: > crypto_verify/32/$(am__dirstamp)
-crypto_verify/32/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/32/$(DEPDIR)
-	@: > crypto_verify/32/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/32/libsodium_la-verify_32_api.lo:  \
-	crypto_verify/32/$(am__dirstamp) \
-	crypto_verify/32/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/32/ref/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/32/ref
-	@: > crypto_verify/32/ref/$(am__dirstamp)
-crypto_verify/32/ref/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/32/ref/$(DEPDIR)
-	@: > crypto_verify/32/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/32/ref/libsodium_la-verify_32.lo:  \
-	crypto_verify/32/ref/$(am__dirstamp) \
-	crypto_verify/32/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/64/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/64
-	@: > crypto_verify/64/$(am__dirstamp)
-crypto_verify/64/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/64/$(DEPDIR)
-	@: > crypto_verify/64/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/64/libsodium_la-verify_64_api.lo:  \
-	crypto_verify/64/$(am__dirstamp) \
-	crypto_verify/64/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/64/ref/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/64/ref
-	@: > crypto_verify/64/ref/$(am__dirstamp)
-crypto_verify/64/ref/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_verify/64/ref/$(DEPDIR)
-	@: > crypto_verify/64/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_verify/64/ref/libsodium_la-verify_64.lo:  \
-	crypto_verify/64/ref/$(am__dirstamp) \
-	crypto_verify/64/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_verify/sodium/$(am__dirstamp):
+	@$(MKDIR_P) crypto_verify/sodium
+	@: > crypto_verify/sodium/$(am__dirstamp)
+crypto_verify/sodium/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_verify/sodium/$(DEPDIR)
+	@: > crypto_verify/sodium/$(DEPDIR)/$(am__dirstamp)
+crypto_verify/sodium/libsodium_la-verify.lo:  \
+	crypto_verify/sodium/$(am__dirstamp) \
+	crypto_verify/sodium/$(DEPDIR)/$(am__dirstamp)
 randombytes/$(am__dirstamp):
 	@$(MKDIR_P) randombytes
 	@: > randombytes/$(am__dirstamp)
@@ -1666,6 +1578,27 @@ crypto_scalarmult/curve25519/ref10/$(DEP
 crypto_scalarmult/curve25519/ref10/libsodium_la-x25519_ref10.lo:  \
 	crypto_scalarmult/curve25519/ref10/$(am__dirstamp) \
 	crypto_scalarmult/curve25519/ref10/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa20/xmm6/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/salsa20/xmm6
+	@: > crypto_stream/salsa20/xmm6/$(am__dirstamp)
+crypto_stream/salsa20/xmm6/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/salsa20/xmm6/$(DEPDIR)
+	@: > crypto_stream/salsa20/xmm6/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6-asm.lo:  \
+	crypto_stream/salsa20/xmm6/$(am__dirstamp) \
+	crypto_stream/salsa20/xmm6/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6.lo:  \
+	crypto_stream/salsa20/xmm6/$(am__dirstamp) \
+	crypto_stream/salsa20/xmm6/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa20/ref/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/salsa20/ref
+	@: > crypto_stream/salsa20/ref/$(am__dirstamp)
+crypto_stream/salsa20/ref/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/salsa20/ref/$(DEPDIR)
+	@: > crypto_stream/salsa20/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa20/ref/libsodium_la-salsa20_ref.lo:  \
+	crypto_stream/salsa20/ref/$(am__dirstamp) \
+	crypto_stream/salsa20/ref/$(DEPDIR)/$(am__dirstamp)
 crypto_scalarmult/curve25519/sandy2x/$(am__dirstamp):
 	@$(MKDIR_P) crypto_scalarmult/curve25519/sandy2x
 	@: > crypto_scalarmult/curve25519/sandy2x/$(am__dirstamp)
@@ -1684,150 +1617,111 @@ crypto_scalarmult/curve25519/sandy2x/lib
 crypto_scalarmult/curve25519/sandy2x/libsodium_la-sandy2x.lo:  \
 	crypto_scalarmult/curve25519/sandy2x/$(am__dirstamp) \
 	crypto_scalarmult/curve25519/sandy2x/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa20/amd64_xmm6/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/salsa20/amd64_xmm6
-	@: > crypto_stream/salsa20/amd64_xmm6/$(am__dirstamp)
-crypto_stream/salsa20/amd64_xmm6/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/salsa20/amd64_xmm6/$(DEPDIR)
-	@: > crypto_stream/salsa20/amd64_xmm6/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa20/amd64_xmm6/libsodium_la-stream_salsa20_amd64_xmm6.lo:  \
-	crypto_stream/salsa20/amd64_xmm6/$(am__dirstamp) \
-	crypto_stream/salsa20/amd64_xmm6/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa20/ref/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/salsa20/ref
-	@: > crypto_stream/salsa20/ref/$(am__dirstamp)
-crypto_stream/salsa20/ref/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/salsa20/ref/$(DEPDIR)
-	@: > crypto_stream/salsa20/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa20/ref/libsodium_la-stream_salsa20_ref.lo:  \
-	crypto_stream/salsa20/ref/$(am__dirstamp) \
-	crypto_stream/salsa20/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa20/ref/libsodium_la-xor_salsa20_ref.lo:  \
-	crypto_stream/salsa20/ref/$(am__dirstamp) \
-	crypto_stream/salsa20/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_core/hchacha20/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/hchacha20
-	@: > crypto_core/hchacha20/$(am__dirstamp)
-crypto_core/hchacha20/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/hchacha20/$(DEPDIR)
-	@: > crypto_core/hchacha20/$(DEPDIR)/$(am__dirstamp)
-crypto_core/hchacha20/libsodium_la-core_hchacha20.lo:  \
-	crypto_core/hchacha20/$(am__dirstamp) \
-	crypto_core/hchacha20/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa2012/ref/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa2012/ref
-	@: > crypto_core/salsa2012/ref/$(am__dirstamp)
-crypto_core/salsa2012/ref/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa2012/ref/$(DEPDIR)
-	@: > crypto_core/salsa2012/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa2012/ref/libsodium_la-core_salsa2012.lo:  \
-	crypto_core/salsa2012/ref/$(am__dirstamp) \
-	crypto_core/salsa2012/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa2012/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa2012
-	@: > crypto_core/salsa2012/$(am__dirstamp)
-crypto_core/salsa2012/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa2012/$(DEPDIR)
-	@: > crypto_core/salsa2012/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa2012/libsodium_la-core_salsa2012_api.lo:  \
-	crypto_core/salsa2012/$(am__dirstamp) \
-	crypto_core/salsa2012/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa208/ref/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa208/ref
-	@: > crypto_core/salsa208/ref/$(am__dirstamp)
-crypto_core/salsa208/ref/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa208/ref/$(DEPDIR)
-	@: > crypto_core/salsa208/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa208/ref/libsodium_la-core_salsa208.lo:  \
-	crypto_core/salsa208/ref/$(am__dirstamp) \
-	crypto_core/salsa208/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa208/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa208
-	@: > crypto_core/salsa208/$(am__dirstamp)
-crypto_core/salsa208/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_core/salsa208/$(DEPDIR)
-	@: > crypto_core/salsa208/$(DEPDIR)/$(am__dirstamp)
-crypto_core/salsa208/libsodium_la-core_salsa208_api.lo:  \
-	crypto_core/salsa208/$(am__dirstamp) \
-	crypto_core/salsa208/$(DEPDIR)/$(am__dirstamp)
+crypto_box/curve25519xchacha20poly1305/$(am__dirstamp):
+	@$(MKDIR_P) crypto_box/curve25519xchacha20poly1305
+	@: > crypto_box/curve25519xchacha20poly1305/$(am__dirstamp)
+crypto_box/curve25519xchacha20poly1305/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_box/curve25519xchacha20poly1305/$(DEPDIR)
+	@: > crypto_box/curve25519xchacha20poly1305/$(DEPDIR)/$(am__dirstamp)
+crypto_box/curve25519xchacha20poly1305/libsodium_la-box_curve25519xchacha20poly1305.lo:  \
+	crypto_box/curve25519xchacha20poly1305/$(am__dirstamp) \
+	crypto_box/curve25519xchacha20poly1305/$(DEPDIR)/$(am__dirstamp)
+crypto_secretbox/xchacha20poly1305/$(am__dirstamp):
+	@$(MKDIR_P) crypto_secretbox/xchacha20poly1305
+	@: > crypto_secretbox/xchacha20poly1305/$(am__dirstamp)
+crypto_secretbox/xchacha20poly1305/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_secretbox/xchacha20poly1305/$(DEPDIR)
+	@: > crypto_secretbox/xchacha20poly1305/$(DEPDIR)/$(am__dirstamp)
+crypto_secretbox/xchacha20poly1305/libsodium_la-secretbox_xchacha20poly1305.lo:  \
+	crypto_secretbox/xchacha20poly1305/$(am__dirstamp) \
+	crypto_secretbox/xchacha20poly1305/$(DEPDIR)/$(am__dirstamp)
+crypto_shorthash/siphash24/libsodium_la-shorthash_siphashx24.lo:  \
+	crypto_shorthash/siphash24/$(am__dirstamp) \
+	crypto_shorthash/siphash24/$(DEPDIR)/$(am__dirstamp)
+crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphashx24_ref.lo:  \
+	crypto_shorthash/siphash24/ref/$(am__dirstamp) \
+	crypto_shorthash/siphash24/ref/$(DEPDIR)/$(am__dirstamp)
 crypto_sign/ed25519/ref10/libsodium_la-obsolete.lo:  \
 	crypto_sign/ed25519/ref10/$(am__dirstamp) \
 	crypto_sign/ed25519/ref10/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/aes128ctr/portable/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/aes128ctr/portable
-	@: > crypto_stream/aes128ctr/portable/$(am__dirstamp)
-crypto_stream/aes128ctr/portable/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/aes128ctr/portable/$(DEPDIR)
-	@: > crypto_stream/aes128ctr/portable/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/aes128ctr/portable/libsodium_la-afternm_aes128ctr.lo:  \
-	crypto_stream/aes128ctr/portable/$(am__dirstamp) \
-	crypto_stream/aes128ctr/portable/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/aes128ctr/nacl/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/aes128ctr/nacl
+	@: > crypto_stream/aes128ctr/nacl/$(am__dirstamp)
+crypto_stream/aes128ctr/nacl/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/aes128ctr/nacl/$(DEPDIR)
+	@: > crypto_stream/aes128ctr/nacl/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/aes128ctr/nacl/libsodium_la-afternm_aes128ctr.lo:  \
+	crypto_stream/aes128ctr/nacl/$(am__dirstamp) \
+	crypto_stream/aes128ctr/nacl/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/aes128ctr/nacl/libsodium_la-beforenm_aes128ctr.lo:  \
+	crypto_stream/aes128ctr/nacl/$(am__dirstamp) \
+	crypto_stream/aes128ctr/nacl/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/aes128ctr/nacl/libsodium_la-consts_aes128ctr.lo:  \
+	crypto_stream/aes128ctr/nacl/$(am__dirstamp) \
+	crypto_stream/aes128ctr/nacl/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/aes128ctr/nacl/libsodium_la-int128_aes128ctr.lo:  \
+	crypto_stream/aes128ctr/nacl/$(am__dirstamp) \
+	crypto_stream/aes128ctr/nacl/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/aes128ctr/nacl/libsodium_la-stream_aes128ctr_nacl.lo:  \
+	crypto_stream/aes128ctr/nacl/$(am__dirstamp) \
+	crypto_stream/aes128ctr/nacl/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/aes128ctr/nacl/libsodium_la-xor_afternm_aes128ctr.lo:  \
+	crypto_stream/aes128ctr/nacl/$(am__dirstamp) \
+	crypto_stream/aes128ctr/nacl/$(DEPDIR)/$(am__dirstamp)
 crypto_stream/aes128ctr/$(am__dirstamp):
 	@$(MKDIR_P) crypto_stream/aes128ctr
 	@: > crypto_stream/aes128ctr/$(am__dirstamp)
 crypto_stream/aes128ctr/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_stream/aes128ctr/$(DEPDIR)
 	@: > crypto_stream/aes128ctr/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr_api.lo:  \
+crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr.lo:  \
 	crypto_stream/aes128ctr/$(am__dirstamp) \
 	crypto_stream/aes128ctr/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/aes128ctr/portable/libsodium_la-beforenm_aes128ctr.lo:  \
-	crypto_stream/aes128ctr/portable/$(am__dirstamp) \
-	crypto_stream/aes128ctr/portable/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/aes128ctr/portable/libsodium_la-consts_aes128ctr.lo:  \
-	crypto_stream/aes128ctr/portable/$(am__dirstamp) \
-	crypto_stream/aes128ctr/portable/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/aes128ctr/portable/libsodium_la-int128_aes128ctr.lo:  \
-	crypto_stream/aes128ctr/portable/$(am__dirstamp) \
-	crypto_stream/aes128ctr/portable/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/aes128ctr/portable/libsodium_la-stream_aes128ctr.lo:  \
-	crypto_stream/aes128ctr/portable/$(am__dirstamp) \
-	crypto_stream/aes128ctr/portable/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/aes128ctr/portable/libsodium_la-xor_afternm_aes128ctr.lo:  \
-	crypto_stream/aes128ctr/portable/$(am__dirstamp) \
-	crypto_stream/aes128ctr/portable/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa2012/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/salsa2012
-	@: > crypto_stream/salsa2012/$(am__dirstamp)
-crypto_stream/salsa2012/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/salsa2012/$(DEPDIR)
-	@: > crypto_stream/salsa2012/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa2012/libsodium_la-stream_salsa2012_api.lo:  \
-	crypto_stream/salsa2012/$(am__dirstamp) \
-	crypto_stream/salsa2012/$(DEPDIR)/$(am__dirstamp)
 crypto_stream/salsa2012/ref/$(am__dirstamp):
 	@$(MKDIR_P) crypto_stream/salsa2012/ref
 	@: > crypto_stream/salsa2012/ref/$(am__dirstamp)
 crypto_stream/salsa2012/ref/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_stream/salsa2012/ref/$(DEPDIR)
 	@: > crypto_stream/salsa2012/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012.lo:  \
+crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012_ref.lo:  \
 	crypto_stream/salsa2012/ref/$(am__dirstamp) \
 	crypto_stream/salsa2012/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa2012/ref/libsodium_la-xor_salsa2012.lo:  \
-	crypto_stream/salsa2012/ref/$(am__dirstamp) \
-	crypto_stream/salsa2012/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa208/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/salsa208
-	@: > crypto_stream/salsa208/$(am__dirstamp)
-crypto_stream/salsa208/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/salsa208/$(DEPDIR)
-	@: > crypto_stream/salsa208/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa208/libsodium_la-stream_salsa208_api.lo:  \
-	crypto_stream/salsa208/$(am__dirstamp) \
-	crypto_stream/salsa208/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa2012/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/salsa2012
+	@: > crypto_stream/salsa2012/$(am__dirstamp)
+crypto_stream/salsa2012/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/salsa2012/$(DEPDIR)
+	@: > crypto_stream/salsa2012/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa2012/libsodium_la-stream_salsa2012.lo:  \
+	crypto_stream/salsa2012/$(am__dirstamp) \
+	crypto_stream/salsa2012/$(DEPDIR)/$(am__dirstamp)
 crypto_stream/salsa208/ref/$(am__dirstamp):
 	@$(MKDIR_P) crypto_stream/salsa208/ref
 	@: > crypto_stream/salsa208/ref/$(am__dirstamp)
 crypto_stream/salsa208/ref/$(DEPDIR)/$(am__dirstamp):
 	@$(MKDIR_P) crypto_stream/salsa208/ref/$(DEPDIR)
 	@: > crypto_stream/salsa208/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa208/ref/libsodium_la-stream_salsa208.lo:  \
-	crypto_stream/salsa208/ref/$(am__dirstamp) \
-	crypto_stream/salsa208/ref/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/salsa208/ref/libsodium_la-xor_salsa208.lo:  \
+crypto_stream/salsa208/ref/libsodium_la-stream_salsa208_ref.lo:  \
 	crypto_stream/salsa208/ref/$(am__dirstamp) \
 	crypto_stream/salsa208/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa208/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/salsa208
+	@: > crypto_stream/salsa208/$(am__dirstamp)
+crypto_stream/salsa208/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/salsa208/$(DEPDIR)
+	@: > crypto_stream/salsa208/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa208/libsodium_la-stream_salsa208.lo:  \
+	crypto_stream/salsa208/$(am__dirstamp) \
+	crypto_stream/salsa208/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/xchacha20/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/xchacha20
+	@: > crypto_stream/xchacha20/$(am__dirstamp)
+crypto_stream/xchacha20/$(DEPDIR)/$(am__dirstamp):
+	@$(MKDIR_P) crypto_stream/xchacha20/$(DEPDIR)
+	@: > crypto_stream/xchacha20/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/xchacha20/libsodium_la-stream_xchacha20.lo:  \
+	crypto_stream/xchacha20/$(am__dirstamp) \
+	crypto_stream/xchacha20/$(DEPDIR)/$(am__dirstamp)
 
 libsodium.la: $(libsodium_la_OBJECTS) $(libsodium_la_DEPENDENCIES) $(EXTRA_libsodium_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libsodium_la_LINK) -rpath $(libdir) $(libsodium_la_OBJECTS) $(libsodium_la_LIBADD) $(LIBS)
@@ -1849,30 +1743,27 @@ crypto_onetimeauth/poly1305/sse2/$(DEPDI
 crypto_onetimeauth/poly1305/sse2/libsse2_la-poly1305_sse2.lo:  \
 	crypto_onetimeauth/poly1305/sse2/$(am__dirstamp) \
 	crypto_onetimeauth/poly1305/sse2/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/salsa20/xmm6int/libsse2_la-salsa20_xmm6int-sse2.lo:  \
+	crypto_stream/salsa20/xmm6int/$(am__dirstamp) \
+	crypto_stream/salsa20/xmm6int/$(DEPDIR)/$(am__dirstamp)
 
 libsse2.la: $(libsse2_la_OBJECTS) $(libsse2_la_DEPENDENCIES) $(EXTRA_libsse2_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libsse2_la_LINK)  $(libsse2_la_OBJECTS) $(libsse2_la_LIBADD) $(LIBS)
-crypto_generichash/blake2/ref/libsse41_la-blake2b-compress-sse41.lo:  \
-	crypto_generichash/blake2/ref/$(am__dirstamp) \
-	crypto_generichash/blake2/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_generichash/blake2b/ref/libsse41_la-blake2b-compress-sse41.lo:  \
+	crypto_generichash/blake2b/ref/$(am__dirstamp) \
+	crypto_generichash/blake2b/ref/$(DEPDIR)/$(am__dirstamp)
 
 libsse41.la: $(libsse41_la_OBJECTS) $(libsse41_la_DEPENDENCIES) $(EXTRA_libsse41_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libsse41_la_LINK)  $(libsse41_la_OBJECTS) $(libsse41_la_LIBADD) $(LIBS)
-crypto_generichash/blake2/ref/libssse3_la-blake2b-compress-ssse3.lo:  \
-	crypto_generichash/blake2/ref/$(am__dirstamp) \
-	crypto_generichash/blake2/ref/$(DEPDIR)/$(am__dirstamp)
+crypto_generichash/blake2b/ref/libssse3_la-blake2b-compress-ssse3.lo:  \
+	crypto_generichash/blake2b/ref/$(am__dirstamp) \
+	crypto_generichash/blake2b/ref/$(DEPDIR)/$(am__dirstamp)
 crypto_pwhash/argon2/libssse3_la-argon2-fill-block-ssse3.lo:  \
 	crypto_pwhash/argon2/$(am__dirstamp) \
 	crypto_pwhash/argon2/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/chacha20/vec/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/chacha20/vec
-	@: > crypto_stream/chacha20/vec/$(am__dirstamp)
-crypto_stream/chacha20/vec/$(DEPDIR)/$(am__dirstamp):
-	@$(MKDIR_P) crypto_stream/chacha20/vec/$(DEPDIR)
-	@: > crypto_stream/chacha20/vec/$(DEPDIR)/$(am__dirstamp)
-crypto_stream/chacha20/vec/libssse3_la-stream_chacha20_vec.lo:  \
-	crypto_stream/chacha20/vec/$(am__dirstamp) \
-	crypto_stream/chacha20/vec/$(DEPDIR)/$(am__dirstamp)
+crypto_stream/chacha20/dolbeau/libssse3_la-chacha20_dolbeau-ssse3.lo:  \
+	crypto_stream/chacha20/dolbeau/$(am__dirstamp) \
+	crypto_stream/chacha20/dolbeau/$(DEPDIR)/$(am__dirstamp)
 
 libssse3.la: $(libssse3_la_OBJECTS) $(libssse3_la_DEPENDENCIES) $(EXTRA_libssse3_la_DEPENDENCIES) 
 	$(AM_V_CCLD)$(libssse3_la_LINK)  $(libssse3_la_OBJECTS) $(libssse3_la_LIBADD) $(LIBS)
@@ -1883,26 +1774,22 @@ mostlyclean-compile:
 	-rm -f crypto_aead/aes256gcm/aesni/*.lo
 	-rm -f crypto_aead/chacha20poly1305/sodium/*.$(OBJEXT)
 	-rm -f crypto_aead/chacha20poly1305/sodium/*.lo
+	-rm -f crypto_aead/xchacha20poly1305/sodium/*.$(OBJEXT)
+	-rm -f crypto_aead/xchacha20poly1305/sodium/*.lo
 	-rm -f crypto_auth/*.$(OBJEXT)
 	-rm -f crypto_auth/*.lo
 	-rm -f crypto_auth/hmacsha256/*.$(OBJEXT)
 	-rm -f crypto_auth/hmacsha256/*.lo
-	-rm -f crypto_auth/hmacsha256/cp/*.$(OBJEXT)
-	-rm -f crypto_auth/hmacsha256/cp/*.lo
 	-rm -f crypto_auth/hmacsha512/*.$(OBJEXT)
 	-rm -f crypto_auth/hmacsha512/*.lo
-	-rm -f crypto_auth/hmacsha512/cp/*.$(OBJEXT)
-	-rm -f crypto_auth/hmacsha512/cp/*.lo
 	-rm -f crypto_auth/hmacsha512256/*.$(OBJEXT)
 	-rm -f crypto_auth/hmacsha512256/*.lo
-	-rm -f crypto_auth/hmacsha512256/cp/*.$(OBJEXT)
-	-rm -f crypto_auth/hmacsha512256/cp/*.lo
 	-rm -f crypto_box/*.$(OBJEXT)
 	-rm -f crypto_box/*.lo
+	-rm -f crypto_box/curve25519xchacha20poly1305/*.$(OBJEXT)
+	-rm -f crypto_box/curve25519xchacha20poly1305/*.lo
 	-rm -f crypto_box/curve25519xsalsa20poly1305/*.$(OBJEXT)
 	-rm -f crypto_box/curve25519xsalsa20poly1305/*.lo
-	-rm -f crypto_box/curve25519xsalsa20poly1305/ref/*.$(OBJEXT)
-	-rm -f crypto_box/curve25519xsalsa20poly1305/ref/*.lo
 	-rm -f crypto_core/curve25519/ref10/*.$(OBJEXT)
 	-rm -f crypto_core/curve25519/ref10/*.lo
 	-rm -f crypto_core/hchacha20/*.$(OBJEXT)
@@ -1911,24 +1798,14 @@ mostlyclean-compile:
 	-rm -f crypto_core/hsalsa20/*.lo
 	-rm -f crypto_core/hsalsa20/ref2/*.$(OBJEXT)
 	-rm -f crypto_core/hsalsa20/ref2/*.lo
-	-rm -f crypto_core/salsa20/*.$(OBJEXT)
-	-rm -f crypto_core/salsa20/*.lo
-	-rm -f crypto_core/salsa20/ref/*.$(OBJEXT)
-	-rm -f crypto_core/salsa20/ref/*.lo
-	-rm -f crypto_core/salsa2012/*.$(OBJEXT)
-	-rm -f crypto_core/salsa2012/*.lo
-	-rm -f crypto_core/salsa2012/ref/*.$(OBJEXT)
-	-rm -f crypto_core/salsa2012/ref/*.lo
-	-rm -f crypto_core/salsa208/*.$(OBJEXT)
-	-rm -f crypto_core/salsa208/*.lo
-	-rm -f crypto_core/salsa208/ref/*.$(OBJEXT)
-	-rm -f crypto_core/salsa208/ref/*.lo
+	-rm -f crypto_core/salsa/ref/*.$(OBJEXT)
+	-rm -f crypto_core/salsa/ref/*.lo
 	-rm -f crypto_generichash/*.$(OBJEXT)
 	-rm -f crypto_generichash/*.lo
-	-rm -f crypto_generichash/blake2/*.$(OBJEXT)
-	-rm -f crypto_generichash/blake2/*.lo
-	-rm -f crypto_generichash/blake2/ref/*.$(OBJEXT)
-	-rm -f crypto_generichash/blake2/ref/*.lo
+	-rm -f crypto_generichash/blake2b/*.$(OBJEXT)
+	-rm -f crypto_generichash/blake2b/*.lo
+	-rm -f crypto_generichash/blake2b/ref/*.$(OBJEXT)
+	-rm -f crypto_generichash/blake2b/ref/*.lo
 	-rm -f crypto_hash/*.$(OBJEXT)
 	-rm -f crypto_hash/*.lo
 	-rm -f crypto_hash/sha256/*.$(OBJEXT)
@@ -1939,6 +1816,12 @@ mostlyclean-compile:
 	-rm -f crypto_hash/sha512/*.lo
 	-rm -f crypto_hash/sha512/cp/*.$(OBJEXT)
 	-rm -f crypto_hash/sha512/cp/*.lo
+	-rm -f crypto_kdf/*.$(OBJEXT)
+	-rm -f crypto_kdf/*.lo
+	-rm -f crypto_kdf/blake2b/*.$(OBJEXT)
+	-rm -f crypto_kdf/blake2b/*.lo
+	-rm -f crypto_kx/*.$(OBJEXT)
+	-rm -f crypto_kx/*.lo
 	-rm -f crypto_onetimeauth/*.$(OBJEXT)
 	-rm -f crypto_onetimeauth/*.lo
 	-rm -f crypto_onetimeauth/poly1305/*.$(OBJEXT)
@@ -1969,10 +1852,10 @@ mostlyclean-compile:
 	-rm -f crypto_scalarmult/curve25519/sandy2x/*.lo
 	-rm -f crypto_secretbox/*.$(OBJEXT)
 	-rm -f crypto_secretbox/*.lo
+	-rm -f crypto_secretbox/xchacha20poly1305/*.$(OBJEXT)
+	-rm -f crypto_secretbox/xchacha20poly1305/*.lo
 	-rm -f crypto_secretbox/xsalsa20poly1305/*.$(OBJEXT)
 	-rm -f crypto_secretbox/xsalsa20poly1305/*.lo
-	-rm -f crypto_secretbox/xsalsa20poly1305/ref/*.$(OBJEXT)
-	-rm -f crypto_secretbox/xsalsa20poly1305/ref/*.lo
 	-rm -f crypto_shorthash/*.$(OBJEXT)
 	-rm -f crypto_shorthash/*.lo
 	-rm -f crypto_shorthash/siphash24/*.$(OBJEXT)
@@ -1989,20 +1872,22 @@ mostlyclean-compile:
 	-rm -f crypto_stream/*.lo
 	-rm -f crypto_stream/aes128ctr/*.$(OBJEXT)
 	-rm -f crypto_stream/aes128ctr/*.lo
-	-rm -f crypto_stream/aes128ctr/portable/*.$(OBJEXT)
-	-rm -f crypto_stream/aes128ctr/portable/*.lo
+	-rm -f crypto_stream/aes128ctr/nacl/*.$(OBJEXT)
+	-rm -f crypto_stream/aes128ctr/nacl/*.lo
 	-rm -f crypto_stream/chacha20/*.$(OBJEXT)
 	-rm -f crypto_stream/chacha20/*.lo
+	-rm -f crypto_stream/chacha20/dolbeau/*.$(OBJEXT)
+	-rm -f crypto_stream/chacha20/dolbeau/*.lo
 	-rm -f crypto_stream/chacha20/ref/*.$(OBJEXT)
 	-rm -f crypto_stream/chacha20/ref/*.lo
-	-rm -f crypto_stream/chacha20/vec/*.$(OBJEXT)
-	-rm -f crypto_stream/chacha20/vec/*.lo
 	-rm -f crypto_stream/salsa20/*.$(OBJEXT)
 	-rm -f crypto_stream/salsa20/*.lo
-	-rm -f crypto_stream/salsa20/amd64_xmm6/*.$(OBJEXT)
-	-rm -f crypto_stream/salsa20/amd64_xmm6/*.lo
 	-rm -f crypto_stream/salsa20/ref/*.$(OBJEXT)
 	-rm -f crypto_stream/salsa20/ref/*.lo
+	-rm -f crypto_stream/salsa20/xmm6/*.$(OBJEXT)
+	-rm -f crypto_stream/salsa20/xmm6/*.lo
+	-rm -f crypto_stream/salsa20/xmm6int/*.$(OBJEXT)
+	-rm -f crypto_stream/salsa20/xmm6int/*.lo
 	-rm -f crypto_stream/salsa2012/*.$(OBJEXT)
 	-rm -f crypto_stream/salsa2012/*.lo
 	-rm -f crypto_stream/salsa2012/ref/*.$(OBJEXT)
@@ -2011,22 +1896,12 @@ mostlyclean-compile:
 	-rm -f crypto_stream/salsa208/*.lo
 	-rm -f crypto_stream/salsa208/ref/*.$(OBJEXT)
 	-rm -f crypto_stream/salsa208/ref/*.lo
+	-rm -f crypto_stream/xchacha20/*.$(OBJEXT)
+	-rm -f crypto_stream/xchacha20/*.lo
 	-rm -f crypto_stream/xsalsa20/*.$(OBJEXT)
 	-rm -f crypto_stream/xsalsa20/*.lo
-	-rm -f crypto_stream/xsalsa20/ref/*.$(OBJEXT)
-	-rm -f crypto_stream/xsalsa20/ref/*.lo
-	-rm -f crypto_verify/16/*.$(OBJEXT)
-	-rm -f crypto_verify/16/*.lo
-	-rm -f crypto_verify/16/ref/*.$(OBJEXT)
-	-rm -f crypto_verify/16/ref/*.lo
-	-rm -f crypto_verify/32/*.$(OBJEXT)
-	-rm -f crypto_verify/32/*.lo
-	-rm -f crypto_verify/32/ref/*.$(OBJEXT)
-	-rm -f crypto_verify/32/ref/*.lo
-	-rm -f crypto_verify/64/*.$(OBJEXT)
-	-rm -f crypto_verify/64/*.lo
-	-rm -f crypto_verify/64/ref/*.$(OBJEXT)
-	-rm -f crypto_verify/64/ref/*.lo
+	-rm -f crypto_verify/sodium/*.$(OBJEXT)
+	-rm -f crypto_verify/sodium/*.lo
 	-rm -f randombytes/*.$(OBJEXT)
 	-rm -f randombytes/*.lo
 	-rm -f randombytes/nativeclient/*.$(OBJEXT)
@@ -2043,47 +1918,37 @@ distclean-compile:
 
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_aead/aes256gcm/aesni/$(DEPDIR)/libaesni_la-aead_aes256gcm_aesni.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_aead/chacha20poly1305/sodium/$(DEPDIR)/libsodium_la-aead_chacha20poly1305.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_aead/xchacha20poly1305/sodium/$(DEPDIR)/libsodium_la-aead_xchacha20poly1305.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/$(DEPDIR)/libsodium_la-crypto_auth.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha256/$(DEPDIR)/libsodium_la-auth_hmacsha256_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha256/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha256.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha256/cp/$(DEPDIR)/libsodium_la-verify_hmacsha256.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha512/$(DEPDIR)/libsodium_la-auth_hmacsha512_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha512/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha512.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha512/cp/$(DEPDIR)/libsodium_la-verify_hmacsha512.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha512256/$(DEPDIR)/libsodium_la-auth_hmacsha512256_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha512256/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha512256.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha512256/cp/$(DEPDIR)/libsodium_la-verify_hmacsha512256.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha256/$(DEPDIR)/libsodium_la-auth_hmacsha256.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha512/$(DEPDIR)/libsodium_la-auth_hmacsha512.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_auth/hmacsha512256/$(DEPDIR)/libsodium_la-auth_hmacsha512256.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_box/$(DEPDIR)/libsodium_la-crypto_box.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_box/$(DEPDIR)/libsodium_la-crypto_box_easy.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_box/$(DEPDIR)/libsodium_la-crypto_box_seal.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-after_curve25519xsalsa20poly1305.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-before_curve25519xsalsa20poly1305.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-keypair_curve25519xsalsa20poly1305.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_box/curve25519xchacha20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xchacha20poly1305.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_core/curve25519/ref10/$(DEPDIR)/libsodium_la-curve25519_ref10.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_core/hchacha20/$(DEPDIR)/libsodium_la-core_hchacha20.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_core/hsalsa20/$(DEPDIR)/libsodium_la-core_hsalsa20_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_core/hsalsa20/ref2/$(DEPDIR)/libsodium_la-core_hsalsa20.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_core/salsa20/$(DEPDIR)/libsodium_la-core_salsa20_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_core/salsa20/ref/$(DEPDIR)/libsodium_la-core_salsa20.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_core/salsa2012/$(DEPDIR)/libsodium_la-core_salsa2012_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_core/salsa2012/ref/$(DEPDIR)/libsodium_la-core_salsa2012.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_core/salsa208/$(DEPDIR)/libsodium_la-core_salsa208_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_core/salsa208/ref/$(DEPDIR)/libsodium_la-core_salsa208.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_core/hsalsa20/$(DEPDIR)/libsodium_la-core_hsalsa20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_core/hsalsa20/ref2/$(DEPDIR)/libsodium_la-core_hsalsa20_ref2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_core/salsa/ref/$(DEPDIR)/libsodium_la-core_salsa_ref.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/$(DEPDIR)/libsodium_la-crypto_generichash.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2/$(DEPDIR)/libsodium_la-generichash_blake2_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2/ref/$(DEPDIR)/libavx2_la-blake2b-compress-avx2.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-blake2b-compress-ref.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-blake2b-ref.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-generichash_blake2b.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2/ref/$(DEPDIR)/libsse41_la-blake2b-compress-sse41.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2/ref/$(DEPDIR)/libssse3_la-blake2b-compress-ssse3.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2b/$(DEPDIR)/libsodium_la-generichash_blake2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2b/ref/$(DEPDIR)/libavx2_la-blake2b-compress-avx2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-blake2b-compress-ref.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-blake2b-ref.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-generichash_blake2b.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2b/ref/$(DEPDIR)/libsse41_la-blake2b-compress-sse41.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_generichash/blake2b/ref/$(DEPDIR)/libssse3_la-blake2b-compress-ssse3.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_hash/$(DEPDIR)/libsodium_la-crypto_hash.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_hash/sha256/$(DEPDIR)/libsodium_la-hash_sha256_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_hash/sha256/cp/$(DEPDIR)/libsodium_la-hash_sha256.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_hash/sha512/$(DEPDIR)/libsodium_la-hash_sha512_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_hash/sha512/cp/$(DEPDIR)/libsodium_la-hash_sha512.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_hash/sha256/$(DEPDIR)/libsodium_la-hash_sha256.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_hash/sha256/cp/$(DEPDIR)/libsodium_la-hash_sha256_cp.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_hash/sha512/$(DEPDIR)/libsodium_la-hash_sha512.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_hash/sha512/cp/$(DEPDIR)/libsodium_la-hash_sha512_cp.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_kdf/$(DEPDIR)/libsodium_la-crypto_kdf.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_kdf/blake2b/$(DEPDIR)/libsodium_la-kdf_blake2b.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_kx/$(DEPDIR)/libsodium_la-crypto_kx.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_onetimeauth/$(DEPDIR)/libsodium_la-crypto_onetimeauth.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_onetimeauth/poly1305/$(DEPDIR)/libsodium_la-onetimeauth_poly1305.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_onetimeauth/poly1305/donna/$(DEPDIR)/libsodium_la-poly1305_donna.Plo@am__quote@
@@ -2112,47 +1977,44 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_scalarmult/curve25519/sandy2x/$(DEPDIR)/libsodium_la-sandy2x.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_secretbox/$(DEPDIR)/libsodium_la-crypto_secretbox.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_secretbox/$(DEPDIR)/libsodium_la-crypto_secretbox_easy.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/libsodium_la-secretbox_xsalsa20poly1305_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_secretbox/xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-box_xsalsa20poly1305.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_secretbox/xchacha20poly1305/$(DEPDIR)/libsodium_la-secretbox_xchacha20poly1305.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/libsodium_la-secretbox_xsalsa20poly1305.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_shorthash/$(DEPDIR)/libsodium_la-crypto_shorthash.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphash24_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphash24.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphash24.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphashx24.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphash24_ref.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphashx24_ref.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_sign/$(DEPDIR)/libsodium_la-crypto_sign.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_sign/ed25519/$(DEPDIR)/libsodium_la-sign_ed25519_api.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_sign/ed25519/$(DEPDIR)/libsodium_la-sign_ed25519.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_sign/ed25519/ref10/$(DEPDIR)/libsodium_la-keypair.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_sign/ed25519/ref10/$(DEPDIR)/libsodium_la-obsolete.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_sign/ed25519/ref10/$(DEPDIR)/libsodium_la-open.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_sign/ed25519/ref10/$(DEPDIR)/libsodium_la-sign.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/$(DEPDIR)/libsodium_la-crypto_stream.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/$(DEPDIR)/libsodium_la-stream_aes128ctr_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-afternm_aes128ctr.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-beforenm_aes128ctr.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-consts_aes128ctr.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-int128_aes128ctr.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-stream_aes128ctr.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-xor_afternm_aes128ctr.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/$(DEPDIR)/libsodium_la-stream_aes128ctr.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-afternm_aes128ctr.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-beforenm_aes128ctr.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-consts_aes128ctr.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-int128_aes128ctr.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-stream_aes128ctr_nacl.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-xor_afternm_aes128ctr.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/chacha20/$(DEPDIR)/libsodium_la-stream_chacha20.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/chacha20/ref/$(DEPDIR)/libsodium_la-stream_chacha20_ref.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/chacha20/vec/$(DEPDIR)/libssse3_la-stream_chacha20_vec.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa20/$(DEPDIR)/libsodium_la-stream_salsa20_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa20/amd64_xmm6/$(DEPDIR)/libsodium_la-stream_salsa20_amd64_xmm6.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-stream_salsa20_ref.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-xor_salsa20_ref.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa2012/$(DEPDIR)/libsodium_la-stream_salsa2012_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-stream_salsa2012.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-xor_salsa2012.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa208/$(DEPDIR)/libsodium_la-stream_salsa208_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-stream_salsa208.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-xor_salsa208.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/xsalsa20/$(DEPDIR)/libsodium_la-stream_xsalsa20_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/xsalsa20/ref/$(DEPDIR)/libsodium_la-stream_xsalsa20.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/xsalsa20/ref/$(DEPDIR)/libsodium_la-xor_xsalsa20.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_verify/16/$(DEPDIR)/libsodium_la-verify_16_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_verify/16/ref/$(DEPDIR)/libsodium_la-verify_16.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_verify/32/$(DEPDIR)/libsodium_la-verify_32_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_verify/32/ref/$(DEPDIR)/libsodium_la-verify_32.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_verify/64/$(DEPDIR)/libsodium_la-verify_64_api.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@crypto_verify/64/ref/$(DEPDIR)/libsodium_la-verify_64.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/chacha20/dolbeau/$(DEPDIR)/libavx2_la-chacha20_dolbeau-avx2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/chacha20/dolbeau/$(DEPDIR)/libssse3_la-chacha20_dolbeau-ssse3.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/chacha20/ref/$(DEPDIR)/libsodium_la-chacha20_ref.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa20/$(DEPDIR)/libsodium_la-stream_salsa20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-salsa20_ref.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa20/xmm6/$(DEPDIR)/libsodium_la-salsa20_xmm6-asm.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa20/xmm6/$(DEPDIR)/libsodium_la-salsa20_xmm6.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa20/xmm6int/$(DEPDIR)/libavx2_la-salsa20_xmm6int-avx2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa20/xmm6int/$(DEPDIR)/libsse2_la-salsa20_xmm6int-sse2.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa2012/$(DEPDIR)/libsodium_la-stream_salsa2012.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-stream_salsa2012_ref.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa208/$(DEPDIR)/libsodium_la-stream_salsa208.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-stream_salsa208_ref.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/xchacha20/$(DEPDIR)/libsodium_la-stream_xchacha20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_stream/xsalsa20/$(DEPDIR)/libsodium_la-stream_xsalsa20.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@crypto_verify/sodium/$(DEPDIR)/libsodium_la-verify.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@randombytes/$(DEPDIR)/libsodium_la-randombytes.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@randombytes/nativeclient/$(DEPDIR)/libsodium_la-randombytes_nativeclient.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@randombytes/salsa20/$(DEPDIR)/libsodium_la-randombytes_salsa20_random.Plo@am__quote@
@@ -2186,6 +2048,13 @@ distclean-compile:
 @AMDEP_TRUE@@am__fastdepCCAS_FALSE@	DEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCCAS_FALSE@	$(AM_V_CPPAS@am__nodep@)$(LTCPPASCOMPILE) -c -o $@ $<
 
+crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6-asm.lo: crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S
+@am__fastdepCCAS_TRUE@	$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -MT crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6-asm.lo -MD -MP -MF crypto_stream/salsa20/xmm6/$(DEPDIR)/libsodium_la-salsa20_xmm6-asm.Tpo -c -o crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6-asm.lo `test -f 'crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S' || echo '$(srcdir)/'`crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S
+@am__fastdepCCAS_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa20/xmm6/$(DEPDIR)/libsodium_la-salsa20_xmm6-asm.Tpo crypto_stream/salsa20/xmm6/$(DEPDIR)/libsodium_la-salsa20_xmm6-asm.Plo
+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@	$(AM_V_CPPAS)source='crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S' object='crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6-asm.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCCAS_FALSE@	DEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCCAS_FALSE@	$(AM_V_CPPAS@am__nodep@)$(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6-asm.lo `test -f 'crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S' || echo '$(srcdir)/'`crypto_stream/salsa20/xmm6/salsa20_xmm6-asm.S
+
 crypto_scalarmult/curve25519/sandy2x/libsodium_la-sandy2x.lo: crypto_scalarmult/curve25519/sandy2x/sandy2x.S
 @am__fastdepCCAS_TRUE@	$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -MT crypto_scalarmult/curve25519/sandy2x/libsodium_la-sandy2x.lo -MD -MP -MF crypto_scalarmult/curve25519/sandy2x/$(DEPDIR)/libsodium_la-sandy2x.Tpo -c -o crypto_scalarmult/curve25519/sandy2x/libsodium_la-sandy2x.lo `test -f 'crypto_scalarmult/curve25519/sandy2x/sandy2x.S' || echo '$(srcdir)/'`crypto_scalarmult/curve25519/sandy2x/sandy2x.S
 @am__fastdepCCAS_TRUE@	$(AM_V_at)$(am__mv) crypto_scalarmult/curve25519/sandy2x/$(DEPDIR)/libsodium_la-sandy2x.Tpo crypto_scalarmult/curve25519/sandy2x/$(DEPDIR)/libsodium_la-sandy2x.Plo
@@ -2193,13 +2062,6 @@ crypto_scalarmult/curve25519/sandy2x/lib
 @AMDEP_TRUE@@am__fastdepCCAS_FALSE@	DEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCCAS_FALSE@	$(AM_V_CPPAS@am__nodep@)$(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o crypto_scalarmult/curve25519/sandy2x/libsodium_la-sandy2x.lo `test -f 'crypto_scalarmult/curve25519/sandy2x/sandy2x.S' || echo '$(srcdir)/'`crypto_scalarmult/curve25519/sandy2x/sandy2x.S
 
-crypto_stream/salsa20/amd64_xmm6/libsodium_la-stream_salsa20_amd64_xmm6.lo: crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S
-@am__fastdepCCAS_TRUE@	$(AM_V_CPPAS)$(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -MT crypto_stream/salsa20/amd64_xmm6/libsodium_la-stream_salsa20_amd64_xmm6.lo -MD -MP -MF crypto_stream/salsa20/amd64_xmm6/$(DEPDIR)/libsodium_la-stream_salsa20_amd64_xmm6.Tpo -c -o crypto_stream/salsa20/amd64_xmm6/libsodium_la-stream_salsa20_amd64_xmm6.lo `test -f 'crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S' || echo '$(srcdir)/'`crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S
-@am__fastdepCCAS_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa20/amd64_xmm6/$(DEPDIR)/libsodium_la-stream_salsa20_amd64_xmm6.Tpo crypto_stream/salsa20/amd64_xmm6/$(DEPDIR)/libsodium_la-stream_salsa20_amd64_xmm6.Plo
-@AMDEP_TRUE@@am__fastdepCCAS_FALSE@	$(AM_V_CPPAS)source='crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S' object='crypto_stream/salsa20/amd64_xmm6/libsodium_la-stream_salsa20_amd64_xmm6.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCCAS_FALSE@	DEPDIR=$(DEPDIR) $(CCASDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCCAS_FALSE@	$(AM_V_CPPAS@am__nodep@)$(LIBTOOL) $(AM_V_lt) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CCAS) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CCASFLAGS) $(CCASFLAGS) -c -o crypto_stream/salsa20/amd64_xmm6/libsodium_la-stream_salsa20_amd64_xmm6.lo `test -f 'crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S' || echo '$(srcdir)/'`crypto_stream/salsa20/amd64_xmm6/stream_salsa20_amd64_xmm6.S
-
 .c.o:
 @am__fastdepCC_TRUE@	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
 @am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@@ -2231,12 +2093,26 @@ crypto_aead/aes256gcm/aesni/libaesni_la-
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libaesni_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_aead/aes256gcm/aesni/libaesni_la-aead_aes256gcm_aesni.lo `test -f 'crypto_aead/aes256gcm/aesni/aead_aes256gcm_aesni.c' || echo '$(srcdir)/'`crypto_aead/aes256gcm/aesni/aead_aes256gcm_aesni.c
 
-crypto_generichash/blake2/ref/libavx2_la-blake2b-compress-avx2.lo: crypto_generichash/blake2/ref/blake2b-compress-avx2.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libavx2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2/ref/libavx2_la-blake2b-compress-avx2.lo -MD -MP -MF crypto_generichash/blake2/ref/$(DEPDIR)/libavx2_la-blake2b-compress-avx2.Tpo -c -o crypto_generichash/blake2/ref/libavx2_la-blake2b-compress-avx2.lo `test -f 'crypto_generichash/blake2/ref/blake2b-compress-avx2.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/blake2b-compress-avx2.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2/ref/$(DEPDIR)/libavx2_la-blake2b-compress-avx2.Tpo crypto_generichash/blake2/ref/$(DEPDIR)/libavx2_la-blake2b-compress-avx2.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2/ref/blake2b-compress-avx2.c' object='crypto_generichash/blake2/ref/libavx2_la-blake2b-compress-avx2.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_generichash/blake2b/ref/libavx2_la-blake2b-compress-avx2.lo: crypto_generichash/blake2b/ref/blake2b-compress-avx2.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libavx2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2b/ref/libavx2_la-blake2b-compress-avx2.lo -MD -MP -MF crypto_generichash/blake2b/ref/$(DEPDIR)/libavx2_la-blake2b-compress-avx2.Tpo -c -o crypto_generichash/blake2b/ref/libavx2_la-blake2b-compress-avx2.lo `test -f 'crypto_generichash/blake2b/ref/blake2b-compress-avx2.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/blake2b-compress-avx2.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2b/ref/$(DEPDIR)/libavx2_la-blake2b-compress-avx2.Tpo crypto_generichash/blake2b/ref/$(DEPDIR)/libavx2_la-blake2b-compress-avx2.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2b/ref/blake2b-compress-avx2.c' object='crypto_generichash/blake2b/ref/libavx2_la-blake2b-compress-avx2.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libavx2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2b/ref/libavx2_la-blake2b-compress-avx2.lo `test -f 'crypto_generichash/blake2b/ref/blake2b-compress-avx2.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/blake2b-compress-avx2.c
+
+crypto_stream/chacha20/dolbeau/libavx2_la-chacha20_dolbeau-avx2.lo: crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libavx2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/chacha20/dolbeau/libavx2_la-chacha20_dolbeau-avx2.lo -MD -MP -MF crypto_stream/chacha20/dolbeau/$(DEPDIR)/libavx2_la-chacha20_dolbeau-avx2.Tpo -c -o crypto_stream/chacha20/dolbeau/libavx2_la-chacha20_dolbeau-avx2.lo `test -f 'crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c' || echo '$(srcdir)/'`crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/chacha20/dolbeau/$(DEPDIR)/libavx2_la-chacha20_dolbeau-avx2.Tpo crypto_stream/chacha20/dolbeau/$(DEPDIR)/libavx2_la-chacha20_dolbeau-avx2.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c' object='crypto_stream/chacha20/dolbeau/libavx2_la-chacha20_dolbeau-avx2.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libavx2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/chacha20/dolbeau/libavx2_la-chacha20_dolbeau-avx2.lo `test -f 'crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c' || echo '$(srcdir)/'`crypto_stream/chacha20/dolbeau/chacha20_dolbeau-avx2.c
+
+crypto_stream/salsa20/xmm6int/libavx2_la-salsa20_xmm6int-avx2.lo: crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libavx2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa20/xmm6int/libavx2_la-salsa20_xmm6int-avx2.lo -MD -MP -MF crypto_stream/salsa20/xmm6int/$(DEPDIR)/libavx2_la-salsa20_xmm6int-avx2.Tpo -c -o crypto_stream/salsa20/xmm6int/libavx2_la-salsa20_xmm6int-avx2.lo `test -f 'crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c' || echo '$(srcdir)/'`crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa20/xmm6int/$(DEPDIR)/libavx2_la-salsa20_xmm6int-avx2.Tpo crypto_stream/salsa20/xmm6int/$(DEPDIR)/libavx2_la-salsa20_xmm6int-avx2.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c' object='crypto_stream/salsa20/xmm6int/libavx2_la-salsa20_xmm6int-avx2.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libavx2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2/ref/libavx2_la-blake2b-compress-avx2.lo `test -f 'crypto_generichash/blake2/ref/blake2b-compress-avx2.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/blake2b-compress-avx2.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libavx2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa20/xmm6int/libavx2_la-salsa20_xmm6int-avx2.lo `test -f 'crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c' || echo '$(srcdir)/'`crypto_stream/salsa20/xmm6int/salsa20_xmm6int-avx2.c
 
 crypto_aead/chacha20poly1305/sodium/libsodium_la-aead_chacha20poly1305.lo: crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_aead/chacha20poly1305/sodium/libsodium_la-aead_chacha20poly1305.lo -MD -MP -MF crypto_aead/chacha20poly1305/sodium/$(DEPDIR)/libsodium_la-aead_chacha20poly1305.Tpo -c -o crypto_aead/chacha20poly1305/sodium/libsodium_la-aead_chacha20poly1305.lo `test -f 'crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c' || echo '$(srcdir)/'`crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c
@@ -2245,6 +2121,13 @@ crypto_aead/chacha20poly1305/sodium/libs
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_aead/chacha20poly1305/sodium/libsodium_la-aead_chacha20poly1305.lo `test -f 'crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c' || echo '$(srcdir)/'`crypto_aead/chacha20poly1305/sodium/aead_chacha20poly1305.c
 
+crypto_aead/xchacha20poly1305/sodium/libsodium_la-aead_xchacha20poly1305.lo: crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_aead/xchacha20poly1305/sodium/libsodium_la-aead_xchacha20poly1305.lo -MD -MP -MF crypto_aead/xchacha20poly1305/sodium/$(DEPDIR)/libsodium_la-aead_xchacha20poly1305.Tpo -c -o crypto_aead/xchacha20poly1305/sodium/libsodium_la-aead_xchacha20poly1305.lo `test -f 'crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c' || echo '$(srcdir)/'`crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_aead/xchacha20poly1305/sodium/$(DEPDIR)/libsodium_la-aead_xchacha20poly1305.Tpo crypto_aead/xchacha20poly1305/sodium/$(DEPDIR)/libsodium_la-aead_xchacha20poly1305.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c' object='crypto_aead/xchacha20poly1305/sodium/libsodium_la-aead_xchacha20poly1305.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_aead/xchacha20poly1305/sodium/libsodium_la-aead_xchacha20poly1305.lo `test -f 'crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c' || echo '$(srcdir)/'`crypto_aead/xchacha20poly1305/sodium/aead_xchacha20poly1305.c
+
 crypto_auth/libsodium_la-crypto_auth.lo: crypto_auth/crypto_auth.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/libsodium_la-crypto_auth.lo -MD -MP -MF crypto_auth/$(DEPDIR)/libsodium_la-crypto_auth.Tpo -c -o crypto_auth/libsodium_la-crypto_auth.lo `test -f 'crypto_auth/crypto_auth.c' || echo '$(srcdir)/'`crypto_auth/crypto_auth.c
 @am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/$(DEPDIR)/libsodium_la-crypto_auth.Tpo crypto_auth/$(DEPDIR)/libsodium_la-crypto_auth.Plo
@@ -2252,68 +2135,26 @@ crypto_auth/libsodium_la-crypto_auth.lo:
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/libsodium_la-crypto_auth.lo `test -f 'crypto_auth/crypto_auth.c' || echo '$(srcdir)/'`crypto_auth/crypto_auth.c
 
-crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256_api.lo: crypto_auth/hmacsha256/auth_hmacsha256_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256_api.lo -MD -MP -MF crypto_auth/hmacsha256/$(DEPDIR)/libsodium_la-auth_hmacsha256_api.Tpo -c -o crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256_api.lo `test -f 'crypto_auth/hmacsha256/auth_hmacsha256_api.c' || echo '$(srcdir)/'`crypto_auth/hmacsha256/auth_hmacsha256_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha256/$(DEPDIR)/libsodium_la-auth_hmacsha256_api.Tpo crypto_auth/hmacsha256/$(DEPDIR)/libsodium_la-auth_hmacsha256_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha256/auth_hmacsha256_api.c' object='crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256_api.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256_api.lo `test -f 'crypto_auth/hmacsha256/auth_hmacsha256_api.c' || echo '$(srcdir)/'`crypto_auth/hmacsha256/auth_hmacsha256_api.c
-
-crypto_auth/hmacsha256/cp/libsodium_la-hmac_hmacsha256.lo: crypto_auth/hmacsha256/cp/hmac_hmacsha256.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha256/cp/libsodium_la-hmac_hmacsha256.lo -MD -MP -MF crypto_auth/hmacsha256/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha256.Tpo -c -o crypto_auth/hmacsha256/cp/libsodium_la-hmac_hmacsha256.lo `test -f 'crypto_auth/hmacsha256/cp/hmac_hmacsha256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha256/cp/hmac_hmacsha256.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha256/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha256.Tpo crypto_auth/hmacsha256/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha256.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha256/cp/hmac_hmacsha256.c' object='crypto_auth/hmacsha256/cp/libsodium_la-hmac_hmacsha256.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha256/cp/libsodium_la-hmac_hmacsha256.lo `test -f 'crypto_auth/hmacsha256/cp/hmac_hmacsha256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha256/cp/hmac_hmacsha256.c
-
-crypto_auth/hmacsha256/cp/libsodium_la-verify_hmacsha256.lo: crypto_auth/hmacsha256/cp/verify_hmacsha256.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha256/cp/libsodium_la-verify_hmacsha256.lo -MD -MP -MF crypto_auth/hmacsha256/cp/$(DEPDIR)/libsodium_la-verify_hmacsha256.Tpo -c -o crypto_auth/hmacsha256/cp/libsodium_la-verify_hmacsha256.lo `test -f 'crypto_auth/hmacsha256/cp/verify_hmacsha256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha256/cp/verify_hmacsha256.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha256/cp/$(DEPDIR)/libsodium_la-verify_hmacsha256.Tpo crypto_auth/hmacsha256/cp/$(DEPDIR)/libsodium_la-verify_hmacsha256.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha256/cp/verify_hmacsha256.c' object='crypto_auth/hmacsha256/cp/libsodium_la-verify_hmacsha256.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha256/cp/libsodium_la-verify_hmacsha256.lo `test -f 'crypto_auth/hmacsha256/cp/verify_hmacsha256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha256/cp/verify_hmacsha256.c
-
-crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512_api.lo: crypto_auth/hmacsha512/auth_hmacsha512_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512_api.lo -MD -MP -MF crypto_auth/hmacsha512/$(DEPDIR)/libsodium_la-auth_hmacsha512_api.Tpo -c -o crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512_api.lo `test -f 'crypto_auth/hmacsha512/auth_hmacsha512_api.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512/auth_hmacsha512_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha512/$(DEPDIR)/libsodium_la-auth_hmacsha512_api.Tpo crypto_auth/hmacsha512/$(DEPDIR)/libsodium_la-auth_hmacsha512_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha512/auth_hmacsha512_api.c' object='crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512_api.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512_api.lo `test -f 'crypto_auth/hmacsha512/auth_hmacsha512_api.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512/auth_hmacsha512_api.c
-
-crypto_auth/hmacsha512/cp/libsodium_la-hmac_hmacsha512.lo: crypto_auth/hmacsha512/cp/hmac_hmacsha512.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha512/cp/libsodium_la-hmac_hmacsha512.lo -MD -MP -MF crypto_auth/hmacsha512/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha512.Tpo -c -o crypto_auth/hmacsha512/cp/libsodium_la-hmac_hmacsha512.lo `test -f 'crypto_auth/hmacsha512/cp/hmac_hmacsha512.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512/cp/hmac_hmacsha512.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha512/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha512.Tpo crypto_auth/hmacsha512/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha512.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha512/cp/hmac_hmacsha512.c' object='crypto_auth/hmacsha512/cp/libsodium_la-hmac_hmacsha512.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha512/cp/libsodium_la-hmac_hmacsha512.lo `test -f 'crypto_auth/hmacsha512/cp/hmac_hmacsha512.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512/cp/hmac_hmacsha512.c
-
-crypto_auth/hmacsha512/cp/libsodium_la-verify_hmacsha512.lo: crypto_auth/hmacsha512/cp/verify_hmacsha512.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha512/cp/libsodium_la-verify_hmacsha512.lo -MD -MP -MF crypto_auth/hmacsha512/cp/$(DEPDIR)/libsodium_la-verify_hmacsha512.Tpo -c -o crypto_auth/hmacsha512/cp/libsodium_la-verify_hmacsha512.lo `test -f 'crypto_auth/hmacsha512/cp/verify_hmacsha512.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512/cp/verify_hmacsha512.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha512/cp/$(DEPDIR)/libsodium_la-verify_hmacsha512.Tpo crypto_auth/hmacsha512/cp/$(DEPDIR)/libsodium_la-verify_hmacsha512.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha512/cp/verify_hmacsha512.c' object='crypto_auth/hmacsha512/cp/libsodium_la-verify_hmacsha512.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256.lo: crypto_auth/hmacsha256/auth_hmacsha256.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256.lo -MD -MP -MF crypto_auth/hmacsha256/$(DEPDIR)/libsodium_la-auth_hmacsha256.Tpo -c -o crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256.lo `test -f 'crypto_auth/hmacsha256/auth_hmacsha256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha256/auth_hmacsha256.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha256/$(DEPDIR)/libsodium_la-auth_hmacsha256.Tpo crypto_auth/hmacsha256/$(DEPDIR)/libsodium_la-auth_hmacsha256.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha256/auth_hmacsha256.c' object='crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256.lo `test -f 'crypto_auth/hmacsha256/auth_hmacsha256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha256/auth_hmacsha256.c
+
+crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512.lo: crypto_auth/hmacsha512/auth_hmacsha512.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512.lo -MD -MP -MF crypto_auth/hmacsha512/$(DEPDIR)/libsodium_la-auth_hmacsha512.Tpo -c -o crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512.lo `test -f 'crypto_auth/hmacsha512/auth_hmacsha512.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512/auth_hmacsha512.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha512/$(DEPDIR)/libsodium_la-auth_hmacsha512.Tpo crypto_auth/hmacsha512/$(DEPDIR)/libsodium_la-auth_hmacsha512.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha512/auth_hmacsha512.c' object='crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512.lo `test -f 'crypto_auth/hmacsha512/auth_hmacsha512.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512/auth_hmacsha512.c
+
+crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256.lo: crypto_auth/hmacsha512256/auth_hmacsha512256.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256.lo -MD -MP -MF crypto_auth/hmacsha512256/$(DEPDIR)/libsodium_la-auth_hmacsha512256.Tpo -c -o crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256.lo `test -f 'crypto_auth/hmacsha512256/auth_hmacsha512256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512256/auth_hmacsha512256.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha512256/$(DEPDIR)/libsodium_la-auth_hmacsha512256.Tpo crypto_auth/hmacsha512256/$(DEPDIR)/libsodium_la-auth_hmacsha512256.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha512256/auth_hmacsha512256.c' object='crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha512/cp/libsodium_la-verify_hmacsha512.lo `test -f 'crypto_auth/hmacsha512/cp/verify_hmacsha512.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512/cp/verify_hmacsha512.c
-
-crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256_api.lo: crypto_auth/hmacsha512256/auth_hmacsha512256_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256_api.lo -MD -MP -MF crypto_auth/hmacsha512256/$(DEPDIR)/libsodium_la-auth_hmacsha512256_api.Tpo -c -o crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256_api.lo `test -f 'crypto_auth/hmacsha512256/auth_hmacsha512256_api.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512256/auth_hmacsha512256_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha512256/$(DEPDIR)/libsodium_la-auth_hmacsha512256_api.Tpo crypto_auth/hmacsha512256/$(DEPDIR)/libsodium_la-auth_hmacsha512256_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha512256/auth_hmacsha512256_api.c' object='crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256_api.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256_api.lo `test -f 'crypto_auth/hmacsha512256/auth_hmacsha512256_api.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512256/auth_hmacsha512256_api.c
-
-crypto_auth/hmacsha512256/cp/libsodium_la-hmac_hmacsha512256.lo: crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha512256/cp/libsodium_la-hmac_hmacsha512256.lo -MD -MP -MF crypto_auth/hmacsha512256/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha512256.Tpo -c -o crypto_auth/hmacsha512256/cp/libsodium_la-hmac_hmacsha512256.lo `test -f 'crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha512256/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha512256.Tpo crypto_auth/hmacsha512256/cp/$(DEPDIR)/libsodium_la-hmac_hmacsha512256.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c' object='crypto_auth/hmacsha512256/cp/libsodium_la-hmac_hmacsha512256.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha512256/cp/libsodium_la-hmac_hmacsha512256.lo `test -f 'crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512256/cp/hmac_hmacsha512256.c
-
-crypto_auth/hmacsha512256/cp/libsodium_la-verify_hmacsha512256.lo: crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_auth/hmacsha512256/cp/libsodium_la-verify_hmacsha512256.lo -MD -MP -MF crypto_auth/hmacsha512256/cp/$(DEPDIR)/libsodium_la-verify_hmacsha512256.Tpo -c -o crypto_auth/hmacsha512256/cp/libsodium_la-verify_hmacsha512256.lo `test -f 'crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_auth/hmacsha512256/cp/$(DEPDIR)/libsodium_la-verify_hmacsha512256.Tpo crypto_auth/hmacsha512256/cp/$(DEPDIR)/libsodium_la-verify_hmacsha512256.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c' object='crypto_auth/hmacsha512256/cp/libsodium_la-verify_hmacsha512256.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha512256/cp/libsodium_la-verify_hmacsha512256.lo `test -f 'crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512256/cp/verify_hmacsha512256.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256.lo `test -f 'crypto_auth/hmacsha512256/auth_hmacsha512256.c' || echo '$(srcdir)/'`crypto_auth/hmacsha512256/auth_hmacsha512256.c
 
 crypto_box/libsodium_la-crypto_box.lo: crypto_box/crypto_box.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_box/libsodium_la-crypto_box.lo -MD -MP -MF crypto_box/$(DEPDIR)/libsodium_la-crypto_box.Tpo -c -o crypto_box/libsodium_la-crypto_box.lo `test -f 'crypto_box/crypto_box.c' || echo '$(srcdir)/'`crypto_box/crypto_box.c
@@ -2336,40 +2177,12 @@ crypto_box/libsodium_la-crypto_box_seal.
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_box/libsodium_la-crypto_box_seal.lo `test -f 'crypto_box/crypto_box_seal.c' || echo '$(srcdir)/'`crypto_box/crypto_box_seal.c
 
-crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305_api.lo: crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305_api.lo -MD -MP -MF crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305_api.Tpo -c -o crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305_api.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305_api.Tpo crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c' object='crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305_api.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305_api.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305_api.c
-
-crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-after_curve25519xsalsa20poly1305.lo: crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-after_curve25519xsalsa20poly1305.lo -MD -MP -MF crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-after_curve25519xsalsa20poly1305.Tpo -c -o crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-after_curve25519xsalsa20poly1305.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-after_curve25519xsalsa20poly1305.Tpo crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-after_curve25519xsalsa20poly1305.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c' object='crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-after_curve25519xsalsa20poly1305.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-after_curve25519xsalsa20poly1305.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/ref/after_curve25519xsalsa20poly1305.c
-
-crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-before_curve25519xsalsa20poly1305.lo: crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-before_curve25519xsalsa20poly1305.lo -MD -MP -MF crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-before_curve25519xsalsa20poly1305.Tpo -c -o crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-before_curve25519xsalsa20poly1305.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-before_curve25519xsalsa20poly1305.Tpo crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-before_curve25519xsalsa20poly1305.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c' object='crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-before_curve25519xsalsa20poly1305.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305.lo: crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305.lo -MD -MP -MF crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305.Tpo -c -o crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305.Tpo crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c' object='crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-before_curve25519xsalsa20poly1305.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/ref/before_curve25519xsalsa20poly1305.c
-
-crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-box_curve25519xsalsa20poly1305.lo: crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-box_curve25519xsalsa20poly1305.lo -MD -MP -MF crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305.Tpo -c -o crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-box_curve25519xsalsa20poly1305.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305.Tpo crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-box_curve25519xsalsa20poly1305.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c' object='crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-box_curve25519xsalsa20poly1305.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-box_curve25519xsalsa20poly1305.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/ref/box_curve25519xsalsa20poly1305.c
-
-crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-keypair_curve25519xsalsa20poly1305.lo: crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-keypair_curve25519xsalsa20poly1305.lo -MD -MP -MF crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-keypair_curve25519xsalsa20poly1305.Tpo -c -o crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-keypair_curve25519xsalsa20poly1305.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-keypair_curve25519xsalsa20poly1305.Tpo crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-keypair_curve25519xsalsa20poly1305.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c' object='crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-keypair_curve25519xsalsa20poly1305.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_box/curve25519xsalsa20poly1305/ref/libsodium_la-keypair_curve25519xsalsa20poly1305.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/ref/keypair_curve25519xsalsa20poly1305.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305.lo `test -f 'crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xsalsa20poly1305/box_curve25519xsalsa20poly1305.c
 
 crypto_core/curve25519/ref10/libsodium_la-curve25519_ref10.lo: crypto_core/curve25519/ref10/curve25519_ref10.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/curve25519/ref10/libsodium_la-curve25519_ref10.lo -MD -MP -MF crypto_core/curve25519/ref10/$(DEPDIR)/libsodium_la-curve25519_ref10.Tpo -c -o crypto_core/curve25519/ref10/libsodium_la-curve25519_ref10.lo `test -f 'crypto_core/curve25519/ref10/curve25519_ref10.c' || echo '$(srcdir)/'`crypto_core/curve25519/ref10/curve25519_ref10.c
@@ -2378,33 +2191,33 @@ crypto_core/curve25519/ref10/libsodium_l
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/curve25519/ref10/libsodium_la-curve25519_ref10.lo `test -f 'crypto_core/curve25519/ref10/curve25519_ref10.c' || echo '$(srcdir)/'`crypto_core/curve25519/ref10/curve25519_ref10.c
 
-crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20.lo: crypto_core/hsalsa20/ref2/core_hsalsa20.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20.lo -MD -MP -MF crypto_core/hsalsa20/ref2/$(DEPDIR)/libsodium_la-core_hsalsa20.Tpo -c -o crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20.lo `test -f 'crypto_core/hsalsa20/ref2/core_hsalsa20.c' || echo '$(srcdir)/'`crypto_core/hsalsa20/ref2/core_hsalsa20.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/hsalsa20/ref2/$(DEPDIR)/libsodium_la-core_hsalsa20.Tpo crypto_core/hsalsa20/ref2/$(DEPDIR)/libsodium_la-core_hsalsa20.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/hsalsa20/ref2/core_hsalsa20.c' object='crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20.lo `test -f 'crypto_core/hsalsa20/ref2/core_hsalsa20.c' || echo '$(srcdir)/'`crypto_core/hsalsa20/ref2/core_hsalsa20.c
-
-crypto_core/hsalsa20/libsodium_la-core_hsalsa20_api.lo: crypto_core/hsalsa20/core_hsalsa20_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/hsalsa20/libsodium_la-core_hsalsa20_api.lo -MD -MP -MF crypto_core/hsalsa20/$(DEPDIR)/libsodium_la-core_hsalsa20_api.Tpo -c -o crypto_core/hsalsa20/libsodium_la-core_hsalsa20_api.lo `test -f 'crypto_core/hsalsa20/core_hsalsa20_api.c' || echo '$(srcdir)/'`crypto_core/hsalsa20/core_hsalsa20_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/hsalsa20/$(DEPDIR)/libsodium_la-core_hsalsa20_api.Tpo crypto_core/hsalsa20/$(DEPDIR)/libsodium_la-core_hsalsa20_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/hsalsa20/core_hsalsa20_api.c' object='crypto_core/hsalsa20/libsodium_la-core_hsalsa20_api.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/hsalsa20/libsodium_la-core_hsalsa20_api.lo `test -f 'crypto_core/hsalsa20/core_hsalsa20_api.c' || echo '$(srcdir)/'`crypto_core/hsalsa20/core_hsalsa20_api.c
-
-crypto_core/salsa20/ref/libsodium_la-core_salsa20.lo: crypto_core/salsa20/ref/core_salsa20.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/salsa20/ref/libsodium_la-core_salsa20.lo -MD -MP -MF crypto_core/salsa20/ref/$(DEPDIR)/libsodium_la-core_salsa20.Tpo -c -o crypto_core/salsa20/ref/libsodium_la-core_salsa20.lo `test -f 'crypto_core/salsa20/ref/core_salsa20.c' || echo '$(srcdir)/'`crypto_core/salsa20/ref/core_salsa20.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/salsa20/ref/$(DEPDIR)/libsodium_la-core_salsa20.Tpo crypto_core/salsa20/ref/$(DEPDIR)/libsodium_la-core_salsa20.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/salsa20/ref/core_salsa20.c' object='crypto_core/salsa20/ref/libsodium_la-core_salsa20.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_core/hchacha20/libsodium_la-core_hchacha20.lo: crypto_core/hchacha20/core_hchacha20.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/hchacha20/libsodium_la-core_hchacha20.lo -MD -MP -MF crypto_core/hchacha20/$(DEPDIR)/libsodium_la-core_hchacha20.Tpo -c -o crypto_core/hchacha20/libsodium_la-core_hchacha20.lo `test -f 'crypto_core/hchacha20/core_hchacha20.c' || echo '$(srcdir)/'`crypto_core/hchacha20/core_hchacha20.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/hchacha20/$(DEPDIR)/libsodium_la-core_hchacha20.Tpo crypto_core/hchacha20/$(DEPDIR)/libsodium_la-core_hchacha20.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/hchacha20/core_hchacha20.c' object='crypto_core/hchacha20/libsodium_la-core_hchacha20.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/salsa20/ref/libsodium_la-core_salsa20.lo `test -f 'crypto_core/salsa20/ref/core_salsa20.c' || echo '$(srcdir)/'`crypto_core/salsa20/ref/core_salsa20.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/hchacha20/libsodium_la-core_hchacha20.lo `test -f 'crypto_core/hchacha20/core_hchacha20.c' || echo '$(srcdir)/'`crypto_core/hchacha20/core_hchacha20.c
 
-crypto_core/salsa20/libsodium_la-core_salsa20_api.lo: crypto_core/salsa20/core_salsa20_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/salsa20/libsodium_la-core_salsa20_api.lo -MD -MP -MF crypto_core/salsa20/$(DEPDIR)/libsodium_la-core_salsa20_api.Tpo -c -o crypto_core/salsa20/libsodium_la-core_salsa20_api.lo `test -f 'crypto_core/salsa20/core_salsa20_api.c' || echo '$(srcdir)/'`crypto_core/salsa20/core_salsa20_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/salsa20/$(DEPDIR)/libsodium_la-core_salsa20_api.Tpo crypto_core/salsa20/$(DEPDIR)/libsodium_la-core_salsa20_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/salsa20/core_salsa20_api.c' object='crypto_core/salsa20/libsodium_la-core_salsa20_api.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20_ref2.lo: crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20_ref2.lo -MD -MP -MF crypto_core/hsalsa20/ref2/$(DEPDIR)/libsodium_la-core_hsalsa20_ref2.Tpo -c -o crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20_ref2.lo `test -f 'crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c' || echo '$(srcdir)/'`crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/hsalsa20/ref2/$(DEPDIR)/libsodium_la-core_hsalsa20_ref2.Tpo crypto_core/hsalsa20/ref2/$(DEPDIR)/libsodium_la-core_hsalsa20_ref2.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c' object='crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20_ref2.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20_ref2.lo `test -f 'crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c' || echo '$(srcdir)/'`crypto_core/hsalsa20/ref2/core_hsalsa20_ref2.c
+
+crypto_core/hsalsa20/libsodium_la-core_hsalsa20.lo: crypto_core/hsalsa20/core_hsalsa20.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/hsalsa20/libsodium_la-core_hsalsa20.lo -MD -MP -MF crypto_core/hsalsa20/$(DEPDIR)/libsodium_la-core_hsalsa20.Tpo -c -o crypto_core/hsalsa20/libsodium_la-core_hsalsa20.lo `test -f 'crypto_core/hsalsa20/core_hsalsa20.c' || echo '$(srcdir)/'`crypto_core/hsalsa20/core_hsalsa20.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/hsalsa20/$(DEPDIR)/libsodium_la-core_hsalsa20.Tpo crypto_core/hsalsa20/$(DEPDIR)/libsodium_la-core_hsalsa20.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/hsalsa20/core_hsalsa20.c' object='crypto_core/hsalsa20/libsodium_la-core_hsalsa20.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/hsalsa20/libsodium_la-core_hsalsa20.lo `test -f 'crypto_core/hsalsa20/core_hsalsa20.c' || echo '$(srcdir)/'`crypto_core/hsalsa20/core_hsalsa20.c
+
+crypto_core/salsa/ref/libsodium_la-core_salsa_ref.lo: crypto_core/salsa/ref/core_salsa_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/salsa/ref/libsodium_la-core_salsa_ref.lo -MD -MP -MF crypto_core/salsa/ref/$(DEPDIR)/libsodium_la-core_salsa_ref.Tpo -c -o crypto_core/salsa/ref/libsodium_la-core_salsa_ref.lo `test -f 'crypto_core/salsa/ref/core_salsa_ref.c' || echo '$(srcdir)/'`crypto_core/salsa/ref/core_salsa_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/salsa/ref/$(DEPDIR)/libsodium_la-core_salsa_ref.Tpo crypto_core/salsa/ref/$(DEPDIR)/libsodium_la-core_salsa_ref.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/salsa/ref/core_salsa_ref.c' object='crypto_core/salsa/ref/libsodium_la-core_salsa_ref.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/salsa20/libsodium_la-core_salsa20_api.lo `test -f 'crypto_core/salsa20/core_salsa20_api.c' || echo '$(srcdir)/'`crypto_core/salsa20/core_salsa20_api.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/salsa/ref/libsodium_la-core_salsa_ref.lo `test -f 'crypto_core/salsa/ref/core_salsa_ref.c' || echo '$(srcdir)/'`crypto_core/salsa/ref/core_salsa_ref.c
 
 crypto_generichash/libsodium_la-crypto_generichash.lo: crypto_generichash/crypto_generichash.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/libsodium_la-crypto_generichash.lo -MD -MP -MF crypto_generichash/$(DEPDIR)/libsodium_la-crypto_generichash.Tpo -c -o crypto_generichash/libsodium_la-crypto_generichash.lo `test -f 'crypto_generichash/crypto_generichash.c' || echo '$(srcdir)/'`crypto_generichash/crypto_generichash.c
@@ -2413,33 +2226,33 @@ crypto_generichash/libsodium_la-crypto_g
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/libsodium_la-crypto_generichash.lo `test -f 'crypto_generichash/crypto_generichash.c' || echo '$(srcdir)/'`crypto_generichash/crypto_generichash.c
 
-crypto_generichash/blake2/libsodium_la-generichash_blake2_api.lo: crypto_generichash/blake2/generichash_blake2_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2/libsodium_la-generichash_blake2_api.lo -MD -MP -MF crypto_generichash/blake2/$(DEPDIR)/libsodium_la-generichash_blake2_api.Tpo -c -o crypto_generichash/blake2/libsodium_la-generichash_blake2_api.lo `test -f 'crypto_generichash/blake2/generichash_blake2_api.c' || echo '$(srcdir)/'`crypto_generichash/blake2/generichash_blake2_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2/$(DEPDIR)/libsodium_la-generichash_blake2_api.Tpo crypto_generichash/blake2/$(DEPDIR)/libsodium_la-generichash_blake2_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2/generichash_blake2_api.c' object='crypto_generichash/blake2/libsodium_la-generichash_blake2_api.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_generichash/blake2b/libsodium_la-generichash_blake2.lo: crypto_generichash/blake2b/generichash_blake2.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2b/libsodium_la-generichash_blake2.lo -MD -MP -MF crypto_generichash/blake2b/$(DEPDIR)/libsodium_la-generichash_blake2.Tpo -c -o crypto_generichash/blake2b/libsodium_la-generichash_blake2.lo `test -f 'crypto_generichash/blake2b/generichash_blake2.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/generichash_blake2.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2b/$(DEPDIR)/libsodium_la-generichash_blake2.Tpo crypto_generichash/blake2b/$(DEPDIR)/libsodium_la-generichash_blake2.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2b/generichash_blake2.c' object='crypto_generichash/blake2b/libsodium_la-generichash_blake2.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2/libsodium_la-generichash_blake2_api.lo `test -f 'crypto_generichash/blake2/generichash_blake2_api.c' || echo '$(srcdir)/'`crypto_generichash/blake2/generichash_blake2_api.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2b/libsodium_la-generichash_blake2.lo `test -f 'crypto_generichash/blake2b/generichash_blake2.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/generichash_blake2.c
 
-crypto_generichash/blake2/ref/libsodium_la-blake2b-compress-ref.lo: crypto_generichash/blake2/ref/blake2b-compress-ref.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2/ref/libsodium_la-blake2b-compress-ref.lo -MD -MP -MF crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-blake2b-compress-ref.Tpo -c -o crypto_generichash/blake2/ref/libsodium_la-blake2b-compress-ref.lo `test -f 'crypto_generichash/blake2/ref/blake2b-compress-ref.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/blake2b-compress-ref.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-blake2b-compress-ref.Tpo crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-blake2b-compress-ref.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2/ref/blake2b-compress-ref.c' object='crypto_generichash/blake2/ref/libsodium_la-blake2b-compress-ref.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_generichash/blake2b/ref/libsodium_la-blake2b-compress-ref.lo: crypto_generichash/blake2b/ref/blake2b-compress-ref.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2b/ref/libsodium_la-blake2b-compress-ref.lo -MD -MP -MF crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-blake2b-compress-ref.Tpo -c -o crypto_generichash/blake2b/ref/libsodium_la-blake2b-compress-ref.lo `test -f 'crypto_generichash/blake2b/ref/blake2b-compress-ref.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/blake2b-compress-ref.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-blake2b-compress-ref.Tpo crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-blake2b-compress-ref.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2b/ref/blake2b-compress-ref.c' object='crypto_generichash/blake2b/ref/libsodium_la-blake2b-compress-ref.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2/ref/libsodium_la-blake2b-compress-ref.lo `test -f 'crypto_generichash/blake2/ref/blake2b-compress-ref.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/blake2b-compress-ref.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2b/ref/libsodium_la-blake2b-compress-ref.lo `test -f 'crypto_generichash/blake2b/ref/blake2b-compress-ref.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/blake2b-compress-ref.c
 
-crypto_generichash/blake2/ref/libsodium_la-blake2b-ref.lo: crypto_generichash/blake2/ref/blake2b-ref.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2/ref/libsodium_la-blake2b-ref.lo -MD -MP -MF crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-blake2b-ref.Tpo -c -o crypto_generichash/blake2/ref/libsodium_la-blake2b-ref.lo `test -f 'crypto_generichash/blake2/ref/blake2b-ref.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/blake2b-ref.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-blake2b-ref.Tpo crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-blake2b-ref.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2/ref/blake2b-ref.c' object='crypto_generichash/blake2/ref/libsodium_la-blake2b-ref.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_generichash/blake2b/ref/libsodium_la-blake2b-ref.lo: crypto_generichash/blake2b/ref/blake2b-ref.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2b/ref/libsodium_la-blake2b-ref.lo -MD -MP -MF crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-blake2b-ref.Tpo -c -o crypto_generichash/blake2b/ref/libsodium_la-blake2b-ref.lo `test -f 'crypto_generichash/blake2b/ref/blake2b-ref.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/blake2b-ref.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-blake2b-ref.Tpo crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-blake2b-ref.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2b/ref/blake2b-ref.c' object='crypto_generichash/blake2b/ref/libsodium_la-blake2b-ref.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2/ref/libsodium_la-blake2b-ref.lo `test -f 'crypto_generichash/blake2/ref/blake2b-ref.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/blake2b-ref.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2b/ref/libsodium_la-blake2b-ref.lo `test -f 'crypto_generichash/blake2b/ref/blake2b-ref.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/blake2b-ref.c
 
-crypto_generichash/blake2/ref/libsodium_la-generichash_blake2b.lo: crypto_generichash/blake2/ref/generichash_blake2b.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2/ref/libsodium_la-generichash_blake2b.lo -MD -MP -MF crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-generichash_blake2b.Tpo -c -o crypto_generichash/blake2/ref/libsodium_la-generichash_blake2b.lo `test -f 'crypto_generichash/blake2/ref/generichash_blake2b.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/generichash_blake2b.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-generichash_blake2b.Tpo crypto_generichash/blake2/ref/$(DEPDIR)/libsodium_la-generichash_blake2b.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2/ref/generichash_blake2b.c' object='crypto_generichash/blake2/ref/libsodium_la-generichash_blake2b.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_generichash/blake2b/ref/libsodium_la-generichash_blake2b.lo: crypto_generichash/blake2b/ref/generichash_blake2b.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2b/ref/libsodium_la-generichash_blake2b.lo -MD -MP -MF crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-generichash_blake2b.Tpo -c -o crypto_generichash/blake2b/ref/libsodium_la-generichash_blake2b.lo `test -f 'crypto_generichash/blake2b/ref/generichash_blake2b.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/generichash_blake2b.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-generichash_blake2b.Tpo crypto_generichash/blake2b/ref/$(DEPDIR)/libsodium_la-generichash_blake2b.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2b/ref/generichash_blake2b.c' object='crypto_generichash/blake2b/ref/libsodium_la-generichash_blake2b.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2/ref/libsodium_la-generichash_blake2b.lo `test -f 'crypto_generichash/blake2/ref/generichash_blake2b.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/generichash_blake2b.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2b/ref/libsodium_la-generichash_blake2b.lo `test -f 'crypto_generichash/blake2b/ref/generichash_blake2b.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/generichash_blake2b.c
 
 crypto_hash/libsodium_la-crypto_hash.lo: crypto_hash/crypto_hash.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_hash/libsodium_la-crypto_hash.lo -MD -MP -MF crypto_hash/$(DEPDIR)/libsodium_la-crypto_hash.Tpo -c -o crypto_hash/libsodium_la-crypto_hash.lo `test -f 'crypto_hash/crypto_hash.c' || echo '$(srcdir)/'`crypto_hash/crypto_hash.c
@@ -2448,33 +2261,54 @@ crypto_hash/libsodium_la-crypto_hash.lo:
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_hash/libsodium_la-crypto_hash.lo `test -f 'crypto_hash/crypto_hash.c' || echo '$(srcdir)/'`crypto_hash/crypto_hash.c
 
-crypto_hash/sha256/libsodium_la-hash_sha256_api.lo: crypto_hash/sha256/hash_sha256_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_hash/sha256/libsodium_la-hash_sha256_api.lo -MD -MP -MF crypto_hash/sha256/$(DEPDIR)/libsodium_la-hash_sha256_api.Tpo -c -o crypto_hash/sha256/libsodium_la-hash_sha256_api.lo `test -f 'crypto_hash/sha256/hash_sha256_api.c' || echo '$(srcdir)/'`crypto_hash/sha256/hash_sha256_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_hash/sha256/$(DEPDIR)/libsodium_la-hash_sha256_api.Tpo crypto_hash/sha256/$(DEPDIR)/libsodium_la-hash_sha256_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_hash/sha256/hash_sha256_api.c' object='crypto_hash/sha256/libsodium_la-hash_sha256_api.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_hash/sha256/libsodium_la-hash_sha256.lo: crypto_hash/sha256/hash_sha256.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_hash/sha256/libsodium_la-hash_sha256.lo -MD -MP -MF crypto_hash/sha256/$(DEPDIR)/libsodium_la-hash_sha256.Tpo -c -o crypto_hash/sha256/libsodium_la-hash_sha256.lo `test -f 'crypto_hash/sha256/hash_sha256.c' || echo '$(srcdir)/'`crypto_hash/sha256/hash_sha256.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_hash/sha256/$(DEPDIR)/libsodium_la-hash_sha256.Tpo crypto_hash/sha256/$(DEPDIR)/libsodium_la-hash_sha256.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_hash/sha256/hash_sha256.c' object='crypto_hash/sha256/libsodium_la-hash_sha256.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_hash/sha256/libsodium_la-hash_sha256.lo `test -f 'crypto_hash/sha256/hash_sha256.c' || echo '$(srcdir)/'`crypto_hash/sha256/hash_sha256.c
+
+crypto_hash/sha256/cp/libsodium_la-hash_sha256_cp.lo: crypto_hash/sha256/cp/hash_sha256_cp.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_hash/sha256/cp/libsodium_la-hash_sha256_cp.lo -MD -MP -MF crypto_hash/sha256/cp/$(DEPDIR)/libsodium_la-hash_sha256_cp.Tpo -c -o crypto_hash/sha256/cp/libsodium_la-hash_sha256_cp.lo `test -f 'crypto_hash/sha256/cp/hash_sha256_cp.c' || echo '$(srcdir)/'`crypto_hash/sha256/cp/hash_sha256_cp.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_hash/sha256/cp/$(DEPDIR)/libsodium_la-hash_sha256_cp.Tpo crypto_hash/sha256/cp/$(DEPDIR)/libsodium_la-hash_sha256_cp.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_hash/sha256/cp/hash_sha256_cp.c' object='crypto_hash/sha256/cp/libsodium_la-hash_sha256_cp.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_hash/sha256/libsodium_la-hash_sha256_api.lo `test -f 'crypto_hash/sha256/hash_sha256_api.c' || echo '$(srcdir)/'`crypto_hash/sha256/hash_sha256_api.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_hash/sha256/cp/libsodium_la-hash_sha256_cp.lo `test -f 'crypto_hash/sha256/cp/hash_sha256_cp.c' || echo '$(srcdir)/'`crypto_hash/sha256/cp/hash_sha256_cp.c
 
-crypto_hash/sha256/cp/libsodium_la-hash_sha256.lo: crypto_hash/sha256/cp/hash_sha256.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_hash/sha256/cp/libsodium_la-hash_sha256.lo -MD -MP -MF crypto_hash/sha256/cp/$(DEPDIR)/libsodium_la-hash_sha256.Tpo -c -o crypto_hash/sha256/cp/libsodium_la-hash_sha256.lo `test -f 'crypto_hash/sha256/cp/hash_sha256.c' || echo '$(srcdir)/'`crypto_hash/sha256/cp/hash_sha256.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_hash/sha256/cp/$(DEPDIR)/libsodium_la-hash_sha256.Tpo crypto_hash/sha256/cp/$(DEPDIR)/libsodium_la-hash_sha256.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_hash/sha256/cp/hash_sha256.c' object='crypto_hash/sha256/cp/libsodium_la-hash_sha256.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_hash/sha512/libsodium_la-hash_sha512.lo: crypto_hash/sha512/hash_sha512.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_hash/sha512/libsodium_la-hash_sha512.lo -MD -MP -MF crypto_hash/sha512/$(DEPDIR)/libsodium_la-hash_sha512.Tpo -c -o crypto_hash/sha512/libsodium_la-hash_sha512.lo `test -f 'crypto_hash/sha512/hash_sha512.c' || echo '$(srcdir)/'`crypto_hash/sha512/hash_sha512.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_hash/sha512/$(DEPDIR)/libsodium_la-hash_sha512.Tpo crypto_hash/sha512/$(DEPDIR)/libsodium_la-hash_sha512.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_hash/sha512/hash_sha512.c' object='crypto_hash/sha512/libsodium_la-hash_sha512.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_hash/sha256/cp/libsodium_la-hash_sha256.lo `test -f 'crypto_hash/sha256/cp/hash_sha256.c' || echo '$(srcdir)/'`crypto_hash/sha256/cp/hash_sha256.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_hash/sha512/libsodium_la-hash_sha512.lo `test -f 'crypto_hash/sha512/hash_sha512.c' || echo '$(srcdir)/'`crypto_hash/sha512/hash_sha512.c
 
-crypto_hash/sha512/libsodium_la-hash_sha512_api.lo: crypto_hash/sha512/hash_sha512_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_hash/sha512/libsodium_la-hash_sha512_api.lo -MD -MP -MF crypto_hash/sha512/$(DEPDIR)/libsodium_la-hash_sha512_api.Tpo -c -o crypto_hash/sha512/libsodium_la-hash_sha512_api.lo `test -f 'crypto_hash/sha512/hash_sha512_api.c' || echo '$(srcdir)/'`crypto_hash/sha512/hash_sha512_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_hash/sha512/$(DEPDIR)/libsodium_la-hash_sha512_api.Tpo crypto_hash/sha512/$(DEPDIR)/libsodium_la-hash_sha512_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_hash/sha512/hash_sha512_api.c' object='crypto_hash/sha512/libsodium_la-hash_sha512_api.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_hash/sha512/cp/libsodium_la-hash_sha512_cp.lo: crypto_hash/sha512/cp/hash_sha512_cp.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_hash/sha512/cp/libsodium_la-hash_sha512_cp.lo -MD -MP -MF crypto_hash/sha512/cp/$(DEPDIR)/libsodium_la-hash_sha512_cp.Tpo -c -o crypto_hash/sha512/cp/libsodium_la-hash_sha512_cp.lo `test -f 'crypto_hash/sha512/cp/hash_sha512_cp.c' || echo '$(srcdir)/'`crypto_hash/sha512/cp/hash_sha512_cp.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_hash/sha512/cp/$(DEPDIR)/libsodium_la-hash_sha512_cp.Tpo crypto_hash/sha512/cp/$(DEPDIR)/libsodium_la-hash_sha512_cp.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_hash/sha512/cp/hash_sha512_cp.c' object='crypto_hash/sha512/cp/libsodium_la-hash_sha512_cp.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_hash/sha512/libsodium_la-hash_sha512_api.lo `test -f 'crypto_hash/sha512/hash_sha512_api.c' || echo '$(srcdir)/'`crypto_hash/sha512/hash_sha512_api.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_hash/sha512/cp/libsodium_la-hash_sha512_cp.lo `test -f 'crypto_hash/sha512/cp/hash_sha512_cp.c' || echo '$(srcdir)/'`crypto_hash/sha512/cp/hash_sha512_cp.c
 
-crypto_hash/sha512/cp/libsodium_la-hash_sha512.lo: crypto_hash/sha512/cp/hash_sha512.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_hash/sha512/cp/libsodium_la-hash_sha512.lo -MD -MP -MF crypto_hash/sha512/cp/$(DEPDIR)/libsodium_la-hash_sha512.Tpo -c -o crypto_hash/sha512/cp/libsodium_la-hash_sha512.lo `test -f 'crypto_hash/sha512/cp/hash_sha512.c' || echo '$(srcdir)/'`crypto_hash/sha512/cp/hash_sha512.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_hash/sha512/cp/$(DEPDIR)/libsodium_la-hash_sha512.Tpo crypto_hash/sha512/cp/$(DEPDIR)/libsodium_la-hash_sha512.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_hash/sha512/cp/hash_sha512.c' object='crypto_hash/sha512/cp/libsodium_la-hash_sha512.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_kdf/blake2b/libsodium_la-kdf_blake2b.lo: crypto_kdf/blake2b/kdf_blake2b.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_kdf/blake2b/libsodium_la-kdf_blake2b.lo -MD -MP -MF crypto_kdf/blake2b/$(DEPDIR)/libsodium_la-kdf_blake2b.Tpo -c -o crypto_kdf/blake2b/libsodium_la-kdf_blake2b.lo `test -f 'crypto_kdf/blake2b/kdf_blake2b.c' || echo '$(srcdir)/'`crypto_kdf/blake2b/kdf_blake2b.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_kdf/blake2b/$(DEPDIR)/libsodium_la-kdf_blake2b.Tpo crypto_kdf/blake2b/$(DEPDIR)/libsodium_la-kdf_blake2b.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_kdf/blake2b/kdf_blake2b.c' object='crypto_kdf/blake2b/libsodium_la-kdf_blake2b.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_hash/sha512/cp/libsodium_la-hash_sha512.lo `test -f 'crypto_hash/sha512/cp/hash_sha512.c' || echo '$(srcdir)/'`crypto_hash/sha512/cp/hash_sha512.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_kdf/blake2b/libsodium_la-kdf_blake2b.lo `test -f 'crypto_kdf/blake2b/kdf_blake2b.c' || echo '$(srcdir)/'`crypto_kdf/blake2b/kdf_blake2b.c
+
+crypto_kdf/libsodium_la-crypto_kdf.lo: crypto_kdf/crypto_kdf.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_kdf/libsodium_la-crypto_kdf.lo -MD -MP -MF crypto_kdf/$(DEPDIR)/libsodium_la-crypto_kdf.Tpo -c -o crypto_kdf/libsodium_la-crypto_kdf.lo `test -f 'crypto_kdf/crypto_kdf.c' || echo '$(srcdir)/'`crypto_kdf/crypto_kdf.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_kdf/$(DEPDIR)/libsodium_la-crypto_kdf.Tpo crypto_kdf/$(DEPDIR)/libsodium_la-crypto_kdf.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_kdf/crypto_kdf.c' object='crypto_kdf/libsodium_la-crypto_kdf.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_kdf/libsodium_la-crypto_kdf.lo `test -f 'crypto_kdf/crypto_kdf.c' || echo '$(srcdir)/'`crypto_kdf/crypto_kdf.c
+
+crypto_kx/libsodium_la-crypto_kx.lo: crypto_kx/crypto_kx.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_kx/libsodium_la-crypto_kx.lo -MD -MP -MF crypto_kx/$(DEPDIR)/libsodium_la-crypto_kx.Tpo -c -o crypto_kx/libsodium_la-crypto_kx.lo `test -f 'crypto_kx/crypto_kx.c' || echo '$(srcdir)/'`crypto_kx/crypto_kx.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_kx/$(DEPDIR)/libsodium_la-crypto_kx.Tpo crypto_kx/$(DEPDIR)/libsodium_la-crypto_kx.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_kx/crypto_kx.c' object='crypto_kx/libsodium_la-crypto_kx.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_kx/libsodium_la-crypto_kx.lo `test -f 'crypto_kx/crypto_kx.c' || echo '$(srcdir)/'`crypto_kx/crypto_kx.c
 
 crypto_onetimeauth/libsodium_la-crypto_onetimeauth.lo: crypto_onetimeauth/crypto_onetimeauth.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_onetimeauth/libsodium_la-crypto_onetimeauth.lo -MD -MP -MF crypto_onetimeauth/$(DEPDIR)/libsodium_la-crypto_onetimeauth.Tpo -c -o crypto_onetimeauth/libsodium_la-crypto_onetimeauth.lo `test -f 'crypto_onetimeauth/crypto_onetimeauth.c' || echo '$(srcdir)/'`crypto_onetimeauth/crypto_onetimeauth.c
@@ -2609,19 +2443,12 @@ crypto_secretbox/libsodium_la-crypto_sec
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_secretbox/libsodium_la-crypto_secretbox_easy.lo `test -f 'crypto_secretbox/crypto_secretbox_easy.c' || echo '$(srcdir)/'`crypto_secretbox/crypto_secretbox_easy.c
 
-crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305_api.lo: crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305_api.lo -MD -MP -MF crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/libsodium_la-secretbox_xsalsa20poly1305_api.Tpo -c -o crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305_api.lo `test -f 'crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c' || echo '$(srcdir)/'`crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/libsodium_la-secretbox_xsalsa20poly1305_api.Tpo crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/libsodium_la-secretbox_xsalsa20poly1305_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c' object='crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305_api.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305_api.lo `test -f 'crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c' || echo '$(srcdir)/'`crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305_api.c
-
-crypto_secretbox/xsalsa20poly1305/ref/libsodium_la-box_xsalsa20poly1305.lo: crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_secretbox/xsalsa20poly1305/ref/libsodium_la-box_xsalsa20poly1305.lo -MD -MP -MF crypto_secretbox/xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-box_xsalsa20poly1305.Tpo -c -o crypto_secretbox/xsalsa20poly1305/ref/libsodium_la-box_xsalsa20poly1305.lo `test -f 'crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_secretbox/xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-box_xsalsa20poly1305.Tpo crypto_secretbox/xsalsa20poly1305/ref/$(DEPDIR)/libsodium_la-box_xsalsa20poly1305.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c' object='crypto_secretbox/xsalsa20poly1305/ref/libsodium_la-box_xsalsa20poly1305.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305.lo: crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305.lo -MD -MP -MF crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/libsodium_la-secretbox_xsalsa20poly1305.Tpo -c -o crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305.lo `test -f 'crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/libsodium_la-secretbox_xsalsa20poly1305.Tpo crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/libsodium_la-secretbox_xsalsa20poly1305.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c' object='crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_secretbox/xsalsa20poly1305/ref/libsodium_la-box_xsalsa20poly1305.lo `test -f 'crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_secretbox/xsalsa20poly1305/ref/box_xsalsa20poly1305.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305.lo `test -f 'crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c' || echo '$(srcdir)/'`crypto_secretbox/xsalsa20poly1305/secretbox_xsalsa20poly1305.c
 
 crypto_shorthash/libsodium_la-crypto_shorthash.lo: crypto_shorthash/crypto_shorthash.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_shorthash/libsodium_la-crypto_shorthash.lo -MD -MP -MF crypto_shorthash/$(DEPDIR)/libsodium_la-crypto_shorthash.Tpo -c -o crypto_shorthash/libsodium_la-crypto_shorthash.lo `test -f 'crypto_shorthash/crypto_shorthash.c' || echo '$(srcdir)/'`crypto_shorthash/crypto_shorthash.c
@@ -2630,19 +2457,19 @@ crypto_shorthash/libsodium_la-crypto_sho
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_shorthash/libsodium_la-crypto_shorthash.lo `test -f 'crypto_shorthash/crypto_shorthash.c' || echo '$(srcdir)/'`crypto_shorthash/crypto_shorthash.c
 
-crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24_api.lo: crypto_shorthash/siphash24/shorthash_siphash24_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24_api.lo -MD -MP -MF crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphash24_api.Tpo -c -o crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24_api.lo `test -f 'crypto_shorthash/siphash24/shorthash_siphash24_api.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/shorthash_siphash24_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphash24_api.Tpo crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphash24_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_shorthash/siphash24/shorthash_siphash24_api.c' object='crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24_api.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24_api.lo `test -f 'crypto_shorthash/siphash24/shorthash_siphash24_api.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/shorthash_siphash24_api.c
-
-crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24.lo: crypto_shorthash/siphash24/ref/shorthash_siphash24.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24.lo -MD -MP -MF crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphash24.Tpo -c -o crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24.lo `test -f 'crypto_shorthash/siphash24/ref/shorthash_siphash24.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/ref/shorthash_siphash24.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphash24.Tpo crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphash24.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_shorthash/siphash24/ref/shorthash_siphash24.c' object='crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24.lo: crypto_shorthash/siphash24/shorthash_siphash24.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24.lo -MD -MP -MF crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphash24.Tpo -c -o crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24.lo `test -f 'crypto_shorthash/siphash24/shorthash_siphash24.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/shorthash_siphash24.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphash24.Tpo crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphash24.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_shorthash/siphash24/shorthash_siphash24.c' object='crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24.lo `test -f 'crypto_shorthash/siphash24/shorthash_siphash24.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/shorthash_siphash24.c
+
+crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24_ref.lo: crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24_ref.lo -MD -MP -MF crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphash24_ref.Tpo -c -o crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24_ref.lo `test -f 'crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphash24_ref.Tpo crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphash24_ref.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c' object='crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24_ref.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24.lo `test -f 'crypto_shorthash/siphash24/ref/shorthash_siphash24.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/ref/shorthash_siphash24.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24_ref.lo `test -f 'crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/ref/shorthash_siphash24_ref.c
 
 crypto_sign/libsodium_la-crypto_sign.lo: crypto_sign/crypto_sign.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_sign/libsodium_la-crypto_sign.lo -MD -MP -MF crypto_sign/$(DEPDIR)/libsodium_la-crypto_sign.Tpo -c -o crypto_sign/libsodium_la-crypto_sign.lo `test -f 'crypto_sign/crypto_sign.c' || echo '$(srcdir)/'`crypto_sign/crypto_sign.c
@@ -2651,12 +2478,12 @@ crypto_sign/libsodium_la-crypto_sign.lo:
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_sign/libsodium_la-crypto_sign.lo `test -f 'crypto_sign/crypto_sign.c' || echo '$(srcdir)/'`crypto_sign/crypto_sign.c
 
-crypto_sign/ed25519/libsodium_la-sign_ed25519_api.lo: crypto_sign/ed25519/sign_ed25519_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_sign/ed25519/libsodium_la-sign_ed25519_api.lo -MD -MP -MF crypto_sign/ed25519/$(DEPDIR)/libsodium_la-sign_ed25519_api.Tpo -c -o crypto_sign/ed25519/libsodium_la-sign_ed25519_api.lo `test -f 'crypto_sign/ed25519/sign_ed25519_api.c' || echo '$(srcdir)/'`crypto_sign/ed25519/sign_ed25519_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_sign/ed25519/$(DEPDIR)/libsodium_la-sign_ed25519_api.Tpo crypto_sign/ed25519/$(DEPDIR)/libsodium_la-sign_ed25519_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_sign/ed25519/sign_ed25519_api.c' object='crypto_sign/ed25519/libsodium_la-sign_ed25519_api.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_sign/ed25519/libsodium_la-sign_ed25519.lo: crypto_sign/ed25519/sign_ed25519.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_sign/ed25519/libsodium_la-sign_ed25519.lo -MD -MP -MF crypto_sign/ed25519/$(DEPDIR)/libsodium_la-sign_ed25519.Tpo -c -o crypto_sign/ed25519/libsodium_la-sign_ed25519.lo `test -f 'crypto_sign/ed25519/sign_ed25519.c' || echo '$(srcdir)/'`crypto_sign/ed25519/sign_ed25519.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_sign/ed25519/$(DEPDIR)/libsodium_la-sign_ed25519.Tpo crypto_sign/ed25519/$(DEPDIR)/libsodium_la-sign_ed25519.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_sign/ed25519/sign_ed25519.c' object='crypto_sign/ed25519/libsodium_la-sign_ed25519.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_sign/ed25519/libsodium_la-sign_ed25519_api.lo `test -f 'crypto_sign/ed25519/sign_ed25519_api.c' || echo '$(srcdir)/'`crypto_sign/ed25519/sign_ed25519_api.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_sign/ed25519/libsodium_la-sign_ed25519.lo `test -f 'crypto_sign/ed25519/sign_ed25519.c' || echo '$(srcdir)/'`crypto_sign/ed25519/sign_ed25519.c
 
 crypto_sign/ed25519/ref10/libsodium_la-keypair.lo: crypto_sign/ed25519/ref10/keypair.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_sign/ed25519/ref10/libsodium_la-keypair.lo -MD -MP -MF crypto_sign/ed25519/ref10/$(DEPDIR)/libsodium_la-keypair.Tpo -c -o crypto_sign/ed25519/ref10/libsodium_la-keypair.lo `test -f 'crypto_sign/ed25519/ref10/keypair.c' || echo '$(srcdir)/'`crypto_sign/ed25519/ref10/keypair.c
@@ -2686,12 +2513,12 @@ crypto_stream/chacha20/libsodium_la-stre
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/chacha20/libsodium_la-stream_chacha20.lo `test -f 'crypto_stream/chacha20/stream_chacha20.c' || echo '$(srcdir)/'`crypto_stream/chacha20/stream_chacha20.c
 
-crypto_stream/chacha20/ref/libsodium_la-stream_chacha20_ref.lo: crypto_stream/chacha20/ref/stream_chacha20_ref.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/chacha20/ref/libsodium_la-stream_chacha20_ref.lo -MD -MP -MF crypto_stream/chacha20/ref/$(DEPDIR)/libsodium_la-stream_chacha20_ref.Tpo -c -o crypto_stream/chacha20/ref/libsodium_la-stream_chacha20_ref.lo `test -f 'crypto_stream/chacha20/ref/stream_chacha20_ref.c' || echo '$(srcdir)/'`crypto_stream/chacha20/ref/stream_chacha20_ref.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/chacha20/ref/$(DEPDIR)/libsodium_la-stream_chacha20_ref.Tpo crypto_stream/chacha20/ref/$(DEPDIR)/libsodium_la-stream_chacha20_ref.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/chacha20/ref/stream_chacha20_ref.c' object='crypto_stream/chacha20/ref/libsodium_la-stream_chacha20_ref.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/chacha20/ref/libsodium_la-chacha20_ref.lo: crypto_stream/chacha20/ref/chacha20_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/chacha20/ref/libsodium_la-chacha20_ref.lo -MD -MP -MF crypto_stream/chacha20/ref/$(DEPDIR)/libsodium_la-chacha20_ref.Tpo -c -o crypto_stream/chacha20/ref/libsodium_la-chacha20_ref.lo `test -f 'crypto_stream/chacha20/ref/chacha20_ref.c' || echo '$(srcdir)/'`crypto_stream/chacha20/ref/chacha20_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/chacha20/ref/$(DEPDIR)/libsodium_la-chacha20_ref.Tpo crypto_stream/chacha20/ref/$(DEPDIR)/libsodium_la-chacha20_ref.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/chacha20/ref/chacha20_ref.c' object='crypto_stream/chacha20/ref/libsodium_la-chacha20_ref.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/chacha20/ref/libsodium_la-stream_chacha20_ref.lo `test -f 'crypto_stream/chacha20/ref/stream_chacha20_ref.c' || echo '$(srcdir)/'`crypto_stream/chacha20/ref/stream_chacha20_ref.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/chacha20/ref/libsodium_la-chacha20_ref.lo `test -f 'crypto_stream/chacha20/ref/chacha20_ref.c' || echo '$(srcdir)/'`crypto_stream/chacha20/ref/chacha20_ref.c
 
 crypto_stream/libsodium_la-crypto_stream.lo: crypto_stream/crypto_stream.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/libsodium_la-crypto_stream.lo -MD -MP -MF crypto_stream/$(DEPDIR)/libsodium_la-crypto_stream.Tpo -c -o crypto_stream/libsodium_la-crypto_stream.lo `test -f 'crypto_stream/crypto_stream.c' || echo '$(srcdir)/'`crypto_stream/crypto_stream.c
@@ -2700,75 +2527,26 @@ crypto_stream/libsodium_la-crypto_stream
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/libsodium_la-crypto_stream.lo `test -f 'crypto_stream/crypto_stream.c' || echo '$(srcdir)/'`crypto_stream/crypto_stream.c
 
-crypto_stream/salsa20/libsodium_la-stream_salsa20_api.lo: crypto_stream/salsa20/stream_salsa20_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa20/libsodium_la-stream_salsa20_api.lo -MD -MP -MF crypto_stream/salsa20/$(DEPDIR)/libsodium_la-stream_salsa20_api.Tpo -c -o crypto_stream/salsa20/libsodium_la-stream_salsa20_api.lo `test -f 'crypto_stream/salsa20/stream_salsa20_api.c' || echo '$(srcdir)/'`crypto_stream/salsa20/stream_salsa20_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa20/$(DEPDIR)/libsodium_la-stream_salsa20_api.Tpo crypto_stream/salsa20/$(DEPDIR)/libsodium_la-stream_salsa20_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa20/stream_salsa20_api.c' object='crypto_stream/salsa20/libsodium_la-stream_salsa20_api.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa20/libsodium_la-stream_salsa20_api.lo `test -f 'crypto_stream/salsa20/stream_salsa20_api.c' || echo '$(srcdir)/'`crypto_stream/salsa20/stream_salsa20_api.c
-
-crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20_api.lo: crypto_stream/xsalsa20/stream_xsalsa20_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20_api.lo -MD -MP -MF crypto_stream/xsalsa20/$(DEPDIR)/libsodium_la-stream_xsalsa20_api.Tpo -c -o crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20_api.lo `test -f 'crypto_stream/xsalsa20/stream_xsalsa20_api.c' || echo '$(srcdir)/'`crypto_stream/xsalsa20/stream_xsalsa20_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/xsalsa20/$(DEPDIR)/libsodium_la-stream_xsalsa20_api.Tpo crypto_stream/xsalsa20/$(DEPDIR)/libsodium_la-stream_xsalsa20_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/xsalsa20/stream_xsalsa20_api.c' object='crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20_api.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20_api.lo `test -f 'crypto_stream/xsalsa20/stream_xsalsa20_api.c' || echo '$(srcdir)/'`crypto_stream/xsalsa20/stream_xsalsa20_api.c
-
-crypto_stream/xsalsa20/ref/libsodium_la-stream_xsalsa20.lo: crypto_stream/xsalsa20/ref/stream_xsalsa20.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/xsalsa20/ref/libsodium_la-stream_xsalsa20.lo -MD -MP -MF crypto_stream/xsalsa20/ref/$(DEPDIR)/libsodium_la-stream_xsalsa20.Tpo -c -o crypto_stream/xsalsa20/ref/libsodium_la-stream_xsalsa20.lo `test -f 'crypto_stream/xsalsa20/ref/stream_xsalsa20.c' || echo '$(srcdir)/'`crypto_stream/xsalsa20/ref/stream_xsalsa20.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/xsalsa20/ref/$(DEPDIR)/libsodium_la-stream_xsalsa20.Tpo crypto_stream/xsalsa20/ref/$(DEPDIR)/libsodium_la-stream_xsalsa20.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/xsalsa20/ref/stream_xsalsa20.c' object='crypto_stream/xsalsa20/ref/libsodium_la-stream_xsalsa20.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/xsalsa20/ref/libsodium_la-stream_xsalsa20.lo `test -f 'crypto_stream/xsalsa20/ref/stream_xsalsa20.c' || echo '$(srcdir)/'`crypto_stream/xsalsa20/ref/stream_xsalsa20.c
-
-crypto_stream/xsalsa20/ref/libsodium_la-xor_xsalsa20.lo: crypto_stream/xsalsa20/ref/xor_xsalsa20.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/xsalsa20/ref/libsodium_la-xor_xsalsa20.lo -MD -MP -MF crypto_stream/xsalsa20/ref/$(DEPDIR)/libsodium_la-xor_xsalsa20.Tpo -c -o crypto_stream/xsalsa20/ref/libsodium_la-xor_xsalsa20.lo `test -f 'crypto_stream/xsalsa20/ref/xor_xsalsa20.c' || echo '$(srcdir)/'`crypto_stream/xsalsa20/ref/xor_xsalsa20.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/xsalsa20/ref/$(DEPDIR)/libsodium_la-xor_xsalsa20.Tpo crypto_stream/xsalsa20/ref/$(DEPDIR)/libsodium_la-xor_xsalsa20.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/xsalsa20/ref/xor_xsalsa20.c' object='crypto_stream/xsalsa20/ref/libsodium_la-xor_xsalsa20.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/xsalsa20/ref/libsodium_la-xor_xsalsa20.lo `test -f 'crypto_stream/xsalsa20/ref/xor_xsalsa20.c' || echo '$(srcdir)/'`crypto_stream/xsalsa20/ref/xor_xsalsa20.c
-
-crypto_verify/16/libsodium_la-verify_16_api.lo: crypto_verify/16/verify_16_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_verify/16/libsodium_la-verify_16_api.lo -MD -MP -MF crypto_verify/16/$(DEPDIR)/libsodium_la-verify_16_api.Tpo -c -o crypto_verify/16/libsodium_la-verify_16_api.lo `test -f 'crypto_verify/16/verify_16_api.c' || echo '$(srcdir)/'`crypto_verify/16/verify_16_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_verify/16/$(DEPDIR)/libsodium_la-verify_16_api.Tpo crypto_verify/16/$(DEPDIR)/libsodium_la-verify_16_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_verify/16/verify_16_api.c' object='crypto_verify/16/libsodium_la-verify_16_api.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_verify/16/libsodium_la-verify_16_api.lo `test -f 'crypto_verify/16/verify_16_api.c' || echo '$(srcdir)/'`crypto_verify/16/verify_16_api.c
-
-crypto_verify/16/ref/libsodium_la-verify_16.lo: crypto_verify/16/ref/verify_16.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_verify/16/ref/libsodium_la-verify_16.lo -MD -MP -MF crypto_verify/16/ref/$(DEPDIR)/libsodium_la-verify_16.Tpo -c -o crypto_verify/16/ref/libsodium_la-verify_16.lo `test -f 'crypto_verify/16/ref/verify_16.c' || echo '$(srcdir)/'`crypto_verify/16/ref/verify_16.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_verify/16/ref/$(DEPDIR)/libsodium_la-verify_16.Tpo crypto_verify/16/ref/$(DEPDIR)/libsodium_la-verify_16.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_verify/16/ref/verify_16.c' object='crypto_verify/16/ref/libsodium_la-verify_16.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_verify/16/ref/libsodium_la-verify_16.lo `test -f 'crypto_verify/16/ref/verify_16.c' || echo '$(srcdir)/'`crypto_verify/16/ref/verify_16.c
-
-crypto_verify/32/libsodium_la-verify_32_api.lo: crypto_verify/32/verify_32_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_verify/32/libsodium_la-verify_32_api.lo -MD -MP -MF crypto_verify/32/$(DEPDIR)/libsodium_la-verify_32_api.Tpo -c -o crypto_verify/32/libsodium_la-verify_32_api.lo `test -f 'crypto_verify/32/verify_32_api.c' || echo '$(srcdir)/'`crypto_verify/32/verify_32_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_verify/32/$(DEPDIR)/libsodium_la-verify_32_api.Tpo crypto_verify/32/$(DEPDIR)/libsodium_la-verify_32_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_verify/32/verify_32_api.c' object='crypto_verify/32/libsodium_la-verify_32_api.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_verify/32/libsodium_la-verify_32_api.lo `test -f 'crypto_verify/32/verify_32_api.c' || echo '$(srcdir)/'`crypto_verify/32/verify_32_api.c
-
-crypto_verify/32/ref/libsodium_la-verify_32.lo: crypto_verify/32/ref/verify_32.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_verify/32/ref/libsodium_la-verify_32.lo -MD -MP -MF crypto_verify/32/ref/$(DEPDIR)/libsodium_la-verify_32.Tpo -c -o crypto_verify/32/ref/libsodium_la-verify_32.lo `test -f 'crypto_verify/32/ref/verify_32.c' || echo '$(srcdir)/'`crypto_verify/32/ref/verify_32.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_verify/32/ref/$(DEPDIR)/libsodium_la-verify_32.Tpo crypto_verify/32/ref/$(DEPDIR)/libsodium_la-verify_32.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_verify/32/ref/verify_32.c' object='crypto_verify/32/ref/libsodium_la-verify_32.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_verify/32/ref/libsodium_la-verify_32.lo `test -f 'crypto_verify/32/ref/verify_32.c' || echo '$(srcdir)/'`crypto_verify/32/ref/verify_32.c
-
-crypto_verify/64/libsodium_la-verify_64_api.lo: crypto_verify/64/verify_64_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_verify/64/libsodium_la-verify_64_api.lo -MD -MP -MF crypto_verify/64/$(DEPDIR)/libsodium_la-verify_64_api.Tpo -c -o crypto_verify/64/libsodium_la-verify_64_api.lo `test -f 'crypto_verify/64/verify_64_api.c' || echo '$(srcdir)/'`crypto_verify/64/verify_64_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_verify/64/$(DEPDIR)/libsodium_la-verify_64_api.Tpo crypto_verify/64/$(DEPDIR)/libsodium_la-verify_64_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_verify/64/verify_64_api.c' object='crypto_verify/64/libsodium_la-verify_64_api.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/salsa20/libsodium_la-stream_salsa20.lo: crypto_stream/salsa20/stream_salsa20.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa20/libsodium_la-stream_salsa20.lo -MD -MP -MF crypto_stream/salsa20/$(DEPDIR)/libsodium_la-stream_salsa20.Tpo -c -o crypto_stream/salsa20/libsodium_la-stream_salsa20.lo `test -f 'crypto_stream/salsa20/stream_salsa20.c' || echo '$(srcdir)/'`crypto_stream/salsa20/stream_salsa20.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa20/$(DEPDIR)/libsodium_la-stream_salsa20.Tpo crypto_stream/salsa20/$(DEPDIR)/libsodium_la-stream_salsa20.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa20/stream_salsa20.c' object='crypto_stream/salsa20/libsodium_la-stream_salsa20.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa20/libsodium_la-stream_salsa20.lo `test -f 'crypto_stream/salsa20/stream_salsa20.c' || echo '$(srcdir)/'`crypto_stream/salsa20/stream_salsa20.c
+
+crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20.lo: crypto_stream/xsalsa20/stream_xsalsa20.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20.lo -MD -MP -MF crypto_stream/xsalsa20/$(DEPDIR)/libsodium_la-stream_xsalsa20.Tpo -c -o crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20.lo `test -f 'crypto_stream/xsalsa20/stream_xsalsa20.c' || echo '$(srcdir)/'`crypto_stream/xsalsa20/stream_xsalsa20.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/xsalsa20/$(DEPDIR)/libsodium_la-stream_xsalsa20.Tpo crypto_stream/xsalsa20/$(DEPDIR)/libsodium_la-stream_xsalsa20.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/xsalsa20/stream_xsalsa20.c' object='crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20.lo `test -f 'crypto_stream/xsalsa20/stream_xsalsa20.c' || echo '$(srcdir)/'`crypto_stream/xsalsa20/stream_xsalsa20.c
+
+crypto_verify/sodium/libsodium_la-verify.lo: crypto_verify/sodium/verify.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_verify/sodium/libsodium_la-verify.lo -MD -MP -MF crypto_verify/sodium/$(DEPDIR)/libsodium_la-verify.Tpo -c -o crypto_verify/sodium/libsodium_la-verify.lo `test -f 'crypto_verify/sodium/verify.c' || echo '$(srcdir)/'`crypto_verify/sodium/verify.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_verify/sodium/$(DEPDIR)/libsodium_la-verify.Tpo crypto_verify/sodium/$(DEPDIR)/libsodium_la-verify.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_verify/sodium/verify.c' object='crypto_verify/sodium/libsodium_la-verify.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_verify/64/libsodium_la-verify_64_api.lo `test -f 'crypto_verify/64/verify_64_api.c' || echo '$(srcdir)/'`crypto_verify/64/verify_64_api.c
-
-crypto_verify/64/ref/libsodium_la-verify_64.lo: crypto_verify/64/ref/verify_64.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_verify/64/ref/libsodium_la-verify_64.lo -MD -MP -MF crypto_verify/64/ref/$(DEPDIR)/libsodium_la-verify_64.Tpo -c -o crypto_verify/64/ref/libsodium_la-verify_64.lo `test -f 'crypto_verify/64/ref/verify_64.c' || echo '$(srcdir)/'`crypto_verify/64/ref/verify_64.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_verify/64/ref/$(DEPDIR)/libsodium_la-verify_64.Tpo crypto_verify/64/ref/$(DEPDIR)/libsodium_la-verify_64.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_verify/64/ref/verify_64.c' object='crypto_verify/64/ref/libsodium_la-verify_64.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_verify/64/ref/libsodium_la-verify_64.lo `test -f 'crypto_verify/64/ref/verify_64.c' || echo '$(srcdir)/'`crypto_verify/64/ref/verify_64.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_verify/sodium/libsodium_la-verify.lo `test -f 'crypto_verify/sodium/verify.c' || echo '$(srcdir)/'`crypto_verify/sodium/verify.c
 
 randombytes/libsodium_la-randombytes.lo: randombytes/randombytes.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT randombytes/libsodium_la-randombytes.lo -MD -MP -MF randombytes/$(DEPDIR)/libsodium_la-randombytes.Tpo -c -o randombytes/libsodium_la-randombytes.lo `test -f 'randombytes/randombytes.c' || echo '$(srcdir)/'`randombytes/randombytes.c
@@ -2840,6 +2618,20 @@ crypto_scalarmult/curve25519/ref10/libso
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_scalarmult/curve25519/ref10/libsodium_la-x25519_ref10.lo `test -f 'crypto_scalarmult/curve25519/ref10/x25519_ref10.c' || echo '$(srcdir)/'`crypto_scalarmult/curve25519/ref10/x25519_ref10.c
 
+crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6.lo: crypto_stream/salsa20/xmm6/salsa20_xmm6.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6.lo -MD -MP -MF crypto_stream/salsa20/xmm6/$(DEPDIR)/libsodium_la-salsa20_xmm6.Tpo -c -o crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6.lo `test -f 'crypto_stream/salsa20/xmm6/salsa20_xmm6.c' || echo '$(srcdir)/'`crypto_stream/salsa20/xmm6/salsa20_xmm6.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa20/xmm6/$(DEPDIR)/libsodium_la-salsa20_xmm6.Tpo crypto_stream/salsa20/xmm6/$(DEPDIR)/libsodium_la-salsa20_xmm6.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa20/xmm6/salsa20_xmm6.c' object='crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6.lo `test -f 'crypto_stream/salsa20/xmm6/salsa20_xmm6.c' || echo '$(srcdir)/'`crypto_stream/salsa20/xmm6/salsa20_xmm6.c
+
+crypto_stream/salsa20/ref/libsodium_la-salsa20_ref.lo: crypto_stream/salsa20/ref/salsa20_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa20/ref/libsodium_la-salsa20_ref.lo -MD -MP -MF crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-salsa20_ref.Tpo -c -o crypto_stream/salsa20/ref/libsodium_la-salsa20_ref.lo `test -f 'crypto_stream/salsa20/ref/salsa20_ref.c' || echo '$(srcdir)/'`crypto_stream/salsa20/ref/salsa20_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-salsa20_ref.Tpo crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-salsa20_ref.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa20/ref/salsa20_ref.c' object='crypto_stream/salsa20/ref/libsodium_la-salsa20_ref.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa20/ref/libsodium_la-salsa20_ref.lo `test -f 'crypto_stream/salsa20/ref/salsa20_ref.c' || echo '$(srcdir)/'`crypto_stream/salsa20/ref/salsa20_ref.c
+
 crypto_scalarmult/curve25519/sandy2x/libsodium_la-curve25519_sandy2x.lo: crypto_scalarmult/curve25519/sandy2x/curve25519_sandy2x.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_scalarmult/curve25519/sandy2x/libsodium_la-curve25519_sandy2x.lo -MD -MP -MF crypto_scalarmult/curve25519/sandy2x/$(DEPDIR)/libsodium_la-curve25519_sandy2x.Tpo -c -o crypto_scalarmult/curve25519/sandy2x/libsodium_la-curve25519_sandy2x.lo `test -f 'crypto_scalarmult/curve25519/sandy2x/curve25519_sandy2x.c' || echo '$(srcdir)/'`crypto_scalarmult/curve25519/sandy2x/curve25519_sandy2x.c
 @am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_scalarmult/curve25519/sandy2x/$(DEPDIR)/libsodium_la-curve25519_sandy2x.Tpo crypto_scalarmult/curve25519/sandy2x/$(DEPDIR)/libsodium_la-curve25519_sandy2x.Plo
@@ -2861,54 +2653,33 @@ crypto_scalarmult/curve25519/sandy2x/lib
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_scalarmult/curve25519/sandy2x/libsodium_la-fe_frombytes_sandy2x.lo `test -f 'crypto_scalarmult/curve25519/sandy2x/fe_frombytes_sandy2x.c' || echo '$(srcdir)/'`crypto_scalarmult/curve25519/sandy2x/fe_frombytes_sandy2x.c
 
-crypto_stream/salsa20/ref/libsodium_la-stream_salsa20_ref.lo: crypto_stream/salsa20/ref/stream_salsa20_ref.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa20/ref/libsodium_la-stream_salsa20_ref.lo -MD -MP -MF crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-stream_salsa20_ref.Tpo -c -o crypto_stream/salsa20/ref/libsodium_la-stream_salsa20_ref.lo `test -f 'crypto_stream/salsa20/ref/stream_salsa20_ref.c' || echo '$(srcdir)/'`crypto_stream/salsa20/ref/stream_salsa20_ref.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-stream_salsa20_ref.Tpo crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-stream_salsa20_ref.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa20/ref/stream_salsa20_ref.c' object='crypto_stream/salsa20/ref/libsodium_la-stream_salsa20_ref.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa20/ref/libsodium_la-stream_salsa20_ref.lo `test -f 'crypto_stream/salsa20/ref/stream_salsa20_ref.c' || echo '$(srcdir)/'`crypto_stream/salsa20/ref/stream_salsa20_ref.c
-
-crypto_stream/salsa20/ref/libsodium_la-xor_salsa20_ref.lo: crypto_stream/salsa20/ref/xor_salsa20_ref.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa20/ref/libsodium_la-xor_salsa20_ref.lo -MD -MP -MF crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-xor_salsa20_ref.Tpo -c -o crypto_stream/salsa20/ref/libsodium_la-xor_salsa20_ref.lo `test -f 'crypto_stream/salsa20/ref/xor_salsa20_ref.c' || echo '$(srcdir)/'`crypto_stream/salsa20/ref/xor_salsa20_ref.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-xor_salsa20_ref.Tpo crypto_stream/salsa20/ref/$(DEPDIR)/libsodium_la-xor_salsa20_ref.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa20/ref/xor_salsa20_ref.c' object='crypto_stream/salsa20/ref/libsodium_la-xor_salsa20_ref.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa20/ref/libsodium_la-xor_salsa20_ref.lo `test -f 'crypto_stream/salsa20/ref/xor_salsa20_ref.c' || echo '$(srcdir)/'`crypto_stream/salsa20/ref/xor_salsa20_ref.c
-
-crypto_core/hchacha20/libsodium_la-core_hchacha20.lo: crypto_core/hchacha20/core_hchacha20.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/hchacha20/libsodium_la-core_hchacha20.lo -MD -MP -MF crypto_core/hchacha20/$(DEPDIR)/libsodium_la-core_hchacha20.Tpo -c -o crypto_core/hchacha20/libsodium_la-core_hchacha20.lo `test -f 'crypto_core/hchacha20/core_hchacha20.c' || echo '$(srcdir)/'`crypto_core/hchacha20/core_hchacha20.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/hchacha20/$(DEPDIR)/libsodium_la-core_hchacha20.Tpo crypto_core/hchacha20/$(DEPDIR)/libsodium_la-core_hchacha20.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/hchacha20/core_hchacha20.c' object='crypto_core/hchacha20/libsodium_la-core_hchacha20.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/hchacha20/libsodium_la-core_hchacha20.lo `test -f 'crypto_core/hchacha20/core_hchacha20.c' || echo '$(srcdir)/'`crypto_core/hchacha20/core_hchacha20.c
-
-crypto_core/salsa2012/ref/libsodium_la-core_salsa2012.lo: crypto_core/salsa2012/ref/core_salsa2012.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/salsa2012/ref/libsodium_la-core_salsa2012.lo -MD -MP -MF crypto_core/salsa2012/ref/$(DEPDIR)/libsodium_la-core_salsa2012.Tpo -c -o crypto_core/salsa2012/ref/libsodium_la-core_salsa2012.lo `test -f 'crypto_core/salsa2012/ref/core_salsa2012.c' || echo '$(srcdir)/'`crypto_core/salsa2012/ref/core_salsa2012.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/salsa2012/ref/$(DEPDIR)/libsodium_la-core_salsa2012.Tpo crypto_core/salsa2012/ref/$(DEPDIR)/libsodium_la-core_salsa2012.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/salsa2012/ref/core_salsa2012.c' object='crypto_core/salsa2012/ref/libsodium_la-core_salsa2012.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_box/curve25519xchacha20poly1305/libsodium_la-box_curve25519xchacha20poly1305.lo: crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_box/curve25519xchacha20poly1305/libsodium_la-box_curve25519xchacha20poly1305.lo -MD -MP -MF crypto_box/curve25519xchacha20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xchacha20poly1305.Tpo -c -o crypto_box/curve25519xchacha20poly1305/libsodium_la-box_curve25519xchacha20poly1305.lo `test -f 'crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_box/curve25519xchacha20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xchacha20poly1305.Tpo crypto_box/curve25519xchacha20poly1305/$(DEPDIR)/libsodium_la-box_curve25519xchacha20poly1305.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c' object='crypto_box/curve25519xchacha20poly1305/libsodium_la-box_curve25519xchacha20poly1305.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/salsa2012/ref/libsodium_la-core_salsa2012.lo `test -f 'crypto_core/salsa2012/ref/core_salsa2012.c' || echo '$(srcdir)/'`crypto_core/salsa2012/ref/core_salsa2012.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_box/curve25519xchacha20poly1305/libsodium_la-box_curve25519xchacha20poly1305.lo `test -f 'crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c' || echo '$(srcdir)/'`crypto_box/curve25519xchacha20poly1305/box_curve25519xchacha20poly1305.c
 
-crypto_core/salsa2012/libsodium_la-core_salsa2012_api.lo: crypto_core/salsa2012/core_salsa2012_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/salsa2012/libsodium_la-core_salsa2012_api.lo -MD -MP -MF crypto_core/salsa2012/$(DEPDIR)/libsodium_la-core_salsa2012_api.Tpo -c -o crypto_core/salsa2012/libsodium_la-core_salsa2012_api.lo `test -f 'crypto_core/salsa2012/core_salsa2012_api.c' || echo '$(srcdir)/'`crypto_core/salsa2012/core_salsa2012_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/salsa2012/$(DEPDIR)/libsodium_la-core_salsa2012_api.Tpo crypto_core/salsa2012/$(DEPDIR)/libsodium_la-core_salsa2012_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/salsa2012/core_salsa2012_api.c' object='crypto_core/salsa2012/libsodium_la-core_salsa2012_api.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_secretbox/xchacha20poly1305/libsodium_la-secretbox_xchacha20poly1305.lo: crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_secretbox/xchacha20poly1305/libsodium_la-secretbox_xchacha20poly1305.lo -MD -MP -MF crypto_secretbox/xchacha20poly1305/$(DEPDIR)/libsodium_la-secretbox_xchacha20poly1305.Tpo -c -o crypto_secretbox/xchacha20poly1305/libsodium_la-secretbox_xchacha20poly1305.lo `test -f 'crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c' || echo '$(srcdir)/'`crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_secretbox/xchacha20poly1305/$(DEPDIR)/libsodium_la-secretbox_xchacha20poly1305.Tpo crypto_secretbox/xchacha20poly1305/$(DEPDIR)/libsodium_la-secretbox_xchacha20poly1305.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c' object='crypto_secretbox/xchacha20poly1305/libsodium_la-secretbox_xchacha20poly1305.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/salsa2012/libsodium_la-core_salsa2012_api.lo `test -f 'crypto_core/salsa2012/core_salsa2012_api.c' || echo '$(srcdir)/'`crypto_core/salsa2012/core_salsa2012_api.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_secretbox/xchacha20poly1305/libsodium_la-secretbox_xchacha20poly1305.lo `test -f 'crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c' || echo '$(srcdir)/'`crypto_secretbox/xchacha20poly1305/secretbox_xchacha20poly1305.c
 
-crypto_core/salsa208/ref/libsodium_la-core_salsa208.lo: crypto_core/salsa208/ref/core_salsa208.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/salsa208/ref/libsodium_la-core_salsa208.lo -MD -MP -MF crypto_core/salsa208/ref/$(DEPDIR)/libsodium_la-core_salsa208.Tpo -c -o crypto_core/salsa208/ref/libsodium_la-core_salsa208.lo `test -f 'crypto_core/salsa208/ref/core_salsa208.c' || echo '$(srcdir)/'`crypto_core/salsa208/ref/core_salsa208.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/salsa208/ref/$(DEPDIR)/libsodium_la-core_salsa208.Tpo crypto_core/salsa208/ref/$(DEPDIR)/libsodium_la-core_salsa208.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/salsa208/ref/core_salsa208.c' object='crypto_core/salsa208/ref/libsodium_la-core_salsa208.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_shorthash/siphash24/libsodium_la-shorthash_siphashx24.lo: crypto_shorthash/siphash24/shorthash_siphashx24.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_shorthash/siphash24/libsodium_la-shorthash_siphashx24.lo -MD -MP -MF crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphashx24.Tpo -c -o crypto_shorthash/siphash24/libsodium_la-shorthash_siphashx24.lo `test -f 'crypto_shorthash/siphash24/shorthash_siphashx24.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/shorthash_siphashx24.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphashx24.Tpo crypto_shorthash/siphash24/$(DEPDIR)/libsodium_la-shorthash_siphashx24.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_shorthash/siphash24/shorthash_siphashx24.c' object='crypto_shorthash/siphash24/libsodium_la-shorthash_siphashx24.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/salsa208/ref/libsodium_la-core_salsa208.lo `test -f 'crypto_core/salsa208/ref/core_salsa208.c' || echo '$(srcdir)/'`crypto_core/salsa208/ref/core_salsa208.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_shorthash/siphash24/libsodium_la-shorthash_siphashx24.lo `test -f 'crypto_shorthash/siphash24/shorthash_siphashx24.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/shorthash_siphashx24.c
 
-crypto_core/salsa208/libsodium_la-core_salsa208_api.lo: crypto_core/salsa208/core_salsa208_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_core/salsa208/libsodium_la-core_salsa208_api.lo -MD -MP -MF crypto_core/salsa208/$(DEPDIR)/libsodium_la-core_salsa208_api.Tpo -c -o crypto_core/salsa208/libsodium_la-core_salsa208_api.lo `test -f 'crypto_core/salsa208/core_salsa208_api.c' || echo '$(srcdir)/'`crypto_core/salsa208/core_salsa208_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_core/salsa208/$(DEPDIR)/libsodium_la-core_salsa208_api.Tpo crypto_core/salsa208/$(DEPDIR)/libsodium_la-core_salsa208_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_core/salsa208/core_salsa208_api.c' object='crypto_core/salsa208/libsodium_la-core_salsa208_api.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphashx24_ref.lo: crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphashx24_ref.lo -MD -MP -MF crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphashx24_ref.Tpo -c -o crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphashx24_ref.lo `test -f 'crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphashx24_ref.Tpo crypto_shorthash/siphash24/ref/$(DEPDIR)/libsodium_la-shorthash_siphashx24_ref.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c' object='crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphashx24_ref.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_core/salsa208/libsodium_la-core_salsa208_api.lo `test -f 'crypto_core/salsa208/core_salsa208_api.c' || echo '$(srcdir)/'`crypto_core/salsa208/core_salsa208_api.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphashx24_ref.lo `test -f 'crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c' || echo '$(srcdir)/'`crypto_shorthash/siphash24/ref/shorthash_siphashx24_ref.c
 
 crypto_sign/ed25519/ref10/libsodium_la-obsolete.lo: crypto_sign/ed25519/ref10/obsolete.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_sign/ed25519/ref10/libsodium_la-obsolete.lo -MD -MP -MF crypto_sign/ed25519/ref10/$(DEPDIR)/libsodium_la-obsolete.Tpo -c -o crypto_sign/ed25519/ref10/libsodium_la-obsolete.lo `test -f 'crypto_sign/ed25519/ref10/obsolete.c' || echo '$(srcdir)/'`crypto_sign/ed25519/ref10/obsolete.c
@@ -2917,96 +2688,89 @@ crypto_sign/ed25519/ref10/libsodium_la-o
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_sign/ed25519/ref10/libsodium_la-obsolete.lo `test -f 'crypto_sign/ed25519/ref10/obsolete.c' || echo '$(srcdir)/'`crypto_sign/ed25519/ref10/obsolete.c
 
-crypto_stream/aes128ctr/portable/libsodium_la-afternm_aes128ctr.lo: crypto_stream/aes128ctr/portable/afternm_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/portable/libsodium_la-afternm_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-afternm_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/portable/libsodium_la-afternm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/afternm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/afternm_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-afternm_aes128ctr.Tpo crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-afternm_aes128ctr.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/portable/afternm_aes128ctr.c' object='crypto_stream/aes128ctr/portable/libsodium_la-afternm_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/portable/libsodium_la-afternm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/afternm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/afternm_aes128ctr.c
-
-crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr_api.lo: crypto_stream/aes128ctr/stream_aes128ctr_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr_api.lo -MD -MP -MF crypto_stream/aes128ctr/$(DEPDIR)/libsodium_la-stream_aes128ctr_api.Tpo -c -o crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr_api.lo `test -f 'crypto_stream/aes128ctr/stream_aes128ctr_api.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/stream_aes128ctr_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/$(DEPDIR)/libsodium_la-stream_aes128ctr_api.Tpo crypto_stream/aes128ctr/$(DEPDIR)/libsodium_la-stream_aes128ctr_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/stream_aes128ctr_api.c' object='crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr_api.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/aes128ctr/nacl/libsodium_la-afternm_aes128ctr.lo: crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/nacl/libsodium_la-afternm_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-afternm_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/nacl/libsodium_la-afternm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-afternm_aes128ctr.Tpo crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-afternm_aes128ctr.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c' object='crypto_stream/aes128ctr/nacl/libsodium_la-afternm_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr_api.lo `test -f 'crypto_stream/aes128ctr/stream_aes128ctr_api.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/stream_aes128ctr_api.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/nacl/libsodium_la-afternm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/afternm_aes128ctr.c
 
-crypto_stream/aes128ctr/portable/libsodium_la-beforenm_aes128ctr.lo: crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/portable/libsodium_la-beforenm_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-beforenm_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/portable/libsodium_la-beforenm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-beforenm_aes128ctr.Tpo crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-beforenm_aes128ctr.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c' object='crypto_stream/aes128ctr/portable/libsodium_la-beforenm_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/aes128ctr/nacl/libsodium_la-beforenm_aes128ctr.lo: crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/nacl/libsodium_la-beforenm_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-beforenm_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/nacl/libsodium_la-beforenm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-beforenm_aes128ctr.Tpo crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-beforenm_aes128ctr.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c' object='crypto_stream/aes128ctr/nacl/libsodium_la-beforenm_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/portable/libsodium_la-beforenm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/beforenm_aes128ctr.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/nacl/libsodium_la-beforenm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/beforenm_aes128ctr.c
 
-crypto_stream/aes128ctr/portable/libsodium_la-consts_aes128ctr.lo: crypto_stream/aes128ctr/portable/consts_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/portable/libsodium_la-consts_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-consts_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/portable/libsodium_la-consts_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/consts_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/consts_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-consts_aes128ctr.Tpo crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-consts_aes128ctr.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/portable/consts_aes128ctr.c' object='crypto_stream/aes128ctr/portable/libsodium_la-consts_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/aes128ctr/nacl/libsodium_la-consts_aes128ctr.lo: crypto_stream/aes128ctr/nacl/consts_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/nacl/libsodium_la-consts_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-consts_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/nacl/libsodium_la-consts_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/nacl/consts_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/consts_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-consts_aes128ctr.Tpo crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-consts_aes128ctr.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/nacl/consts_aes128ctr.c' object='crypto_stream/aes128ctr/nacl/libsodium_la-consts_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/portable/libsodium_la-consts_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/consts_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/consts_aes128ctr.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/nacl/libsodium_la-consts_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/nacl/consts_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/consts_aes128ctr.c
 
-crypto_stream/aes128ctr/portable/libsodium_la-int128_aes128ctr.lo: crypto_stream/aes128ctr/portable/int128_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/portable/libsodium_la-int128_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-int128_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/portable/libsodium_la-int128_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/int128_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/int128_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-int128_aes128ctr.Tpo crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-int128_aes128ctr.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/portable/int128_aes128ctr.c' object='crypto_stream/aes128ctr/portable/libsodium_la-int128_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/aes128ctr/nacl/libsodium_la-int128_aes128ctr.lo: crypto_stream/aes128ctr/nacl/int128_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/nacl/libsodium_la-int128_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-int128_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/nacl/libsodium_la-int128_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/nacl/int128_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/int128_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-int128_aes128ctr.Tpo crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-int128_aes128ctr.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/nacl/int128_aes128ctr.c' object='crypto_stream/aes128ctr/nacl/libsodium_la-int128_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/portable/libsodium_la-int128_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/int128_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/int128_aes128ctr.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/nacl/libsodium_la-int128_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/nacl/int128_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/int128_aes128ctr.c
 
-crypto_stream/aes128ctr/portable/libsodium_la-stream_aes128ctr.lo: crypto_stream/aes128ctr/portable/stream_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/portable/libsodium_la-stream_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-stream_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/portable/libsodium_la-stream_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/stream_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/stream_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-stream_aes128ctr.Tpo crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-stream_aes128ctr.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/portable/stream_aes128ctr.c' object='crypto_stream/aes128ctr/portable/libsodium_la-stream_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/aes128ctr/nacl/libsodium_la-stream_aes128ctr_nacl.lo: crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/nacl/libsodium_la-stream_aes128ctr_nacl.lo -MD -MP -MF crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-stream_aes128ctr_nacl.Tpo -c -o crypto_stream/aes128ctr/nacl/libsodium_la-stream_aes128ctr_nacl.lo `test -f 'crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-stream_aes128ctr_nacl.Tpo crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-stream_aes128ctr_nacl.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c' object='crypto_stream/aes128ctr/nacl/libsodium_la-stream_aes128ctr_nacl.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/portable/libsodium_la-stream_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/stream_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/stream_aes128ctr.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/nacl/libsodium_la-stream_aes128ctr_nacl.lo `test -f 'crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/stream_aes128ctr_nacl.c
 
-crypto_stream/aes128ctr/portable/libsodium_la-xor_afternm_aes128ctr.lo: crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/portable/libsodium_la-xor_afternm_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-xor_afternm_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/portable/libsodium_la-xor_afternm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-xor_afternm_aes128ctr.Tpo crypto_stream/aes128ctr/portable/$(DEPDIR)/libsodium_la-xor_afternm_aes128ctr.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c' object='crypto_stream/aes128ctr/portable/libsodium_la-xor_afternm_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/aes128ctr/nacl/libsodium_la-xor_afternm_aes128ctr.lo: crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/nacl/libsodium_la-xor_afternm_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-xor_afternm_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/nacl/libsodium_la-xor_afternm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-xor_afternm_aes128ctr.Tpo crypto_stream/aes128ctr/nacl/$(DEPDIR)/libsodium_la-xor_afternm_aes128ctr.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c' object='crypto_stream/aes128ctr/nacl/libsodium_la-xor_afternm_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/portable/libsodium_la-xor_afternm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/portable/xor_afternm_aes128ctr.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/nacl/libsodium_la-xor_afternm_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/nacl/xor_afternm_aes128ctr.c
 
-crypto_stream/salsa2012/libsodium_la-stream_salsa2012_api.lo: crypto_stream/salsa2012/stream_salsa2012_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa2012/libsodium_la-stream_salsa2012_api.lo -MD -MP -MF crypto_stream/salsa2012/$(DEPDIR)/libsodium_la-stream_salsa2012_api.Tpo -c -o crypto_stream/salsa2012/libsodium_la-stream_salsa2012_api.lo `test -f 'crypto_stream/salsa2012/stream_salsa2012_api.c' || echo '$(srcdir)/'`crypto_stream/salsa2012/stream_salsa2012_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa2012/$(DEPDIR)/libsodium_la-stream_salsa2012_api.Tpo crypto_stream/salsa2012/$(DEPDIR)/libsodium_la-stream_salsa2012_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa2012/stream_salsa2012_api.c' object='crypto_stream/salsa2012/libsodium_la-stream_salsa2012_api.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr.lo: crypto_stream/aes128ctr/stream_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr.lo -MD -MP -MF crypto_stream/aes128ctr/$(DEPDIR)/libsodium_la-stream_aes128ctr.Tpo -c -o crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/stream_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/stream_aes128ctr.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/aes128ctr/$(DEPDIR)/libsodium_la-stream_aes128ctr.Tpo crypto_stream/aes128ctr/$(DEPDIR)/libsodium_la-stream_aes128ctr.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/aes128ctr/stream_aes128ctr.c' object='crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa2012/libsodium_la-stream_salsa2012_api.lo `test -f 'crypto_stream/salsa2012/stream_salsa2012_api.c' || echo '$(srcdir)/'`crypto_stream/salsa2012/stream_salsa2012_api.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/aes128ctr/libsodium_la-stream_aes128ctr.lo `test -f 'crypto_stream/aes128ctr/stream_aes128ctr.c' || echo '$(srcdir)/'`crypto_stream/aes128ctr/stream_aes128ctr.c
 
-crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012.lo: crypto_stream/salsa2012/ref/stream_salsa2012.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012.lo -MD -MP -MF crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-stream_salsa2012.Tpo -c -o crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012.lo `test -f 'crypto_stream/salsa2012/ref/stream_salsa2012.c' || echo '$(srcdir)/'`crypto_stream/salsa2012/ref/stream_salsa2012.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-stream_salsa2012.Tpo crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-stream_salsa2012.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa2012/ref/stream_salsa2012.c' object='crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012_ref.lo: crypto_stream/salsa2012/ref/stream_salsa2012_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012_ref.lo -MD -MP -MF crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-stream_salsa2012_ref.Tpo -c -o crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012_ref.lo `test -f 'crypto_stream/salsa2012/ref/stream_salsa2012_ref.c' || echo '$(srcdir)/'`crypto_stream/salsa2012/ref/stream_salsa2012_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-stream_salsa2012_ref.Tpo crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-stream_salsa2012_ref.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa2012/ref/stream_salsa2012_ref.c' object='crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012_ref.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012.lo `test -f 'crypto_stream/salsa2012/ref/stream_salsa2012.c' || echo '$(srcdir)/'`crypto_stream/salsa2012/ref/stream_salsa2012.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012_ref.lo `test -f 'crypto_stream/salsa2012/ref/stream_salsa2012_ref.c' || echo '$(srcdir)/'`crypto_stream/salsa2012/ref/stream_salsa2012_ref.c
 
-crypto_stream/salsa2012/ref/libsodium_la-xor_salsa2012.lo: crypto_stream/salsa2012/ref/xor_salsa2012.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa2012/ref/libsodium_la-xor_salsa2012.lo -MD -MP -MF crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-xor_salsa2012.Tpo -c -o crypto_stream/salsa2012/ref/libsodium_la-xor_salsa2012.lo `test -f 'crypto_stream/salsa2012/ref/xor_salsa2012.c' || echo '$(srcdir)/'`crypto_stream/salsa2012/ref/xor_salsa2012.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-xor_salsa2012.Tpo crypto_stream/salsa2012/ref/$(DEPDIR)/libsodium_la-xor_salsa2012.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa2012/ref/xor_salsa2012.c' object='crypto_stream/salsa2012/ref/libsodium_la-xor_salsa2012.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/salsa2012/libsodium_la-stream_salsa2012.lo: crypto_stream/salsa2012/stream_salsa2012.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa2012/libsodium_la-stream_salsa2012.lo -MD -MP -MF crypto_stream/salsa2012/$(DEPDIR)/libsodium_la-stream_salsa2012.Tpo -c -o crypto_stream/salsa2012/libsodium_la-stream_salsa2012.lo `test -f 'crypto_stream/salsa2012/stream_salsa2012.c' || echo '$(srcdir)/'`crypto_stream/salsa2012/stream_salsa2012.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa2012/$(DEPDIR)/libsodium_la-stream_salsa2012.Tpo crypto_stream/salsa2012/$(DEPDIR)/libsodium_la-stream_salsa2012.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa2012/stream_salsa2012.c' object='crypto_stream/salsa2012/libsodium_la-stream_salsa2012.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa2012/ref/libsodium_la-xor_salsa2012.lo `test -f 'crypto_stream/salsa2012/ref/xor_salsa2012.c' || echo '$(srcdir)/'`crypto_stream/salsa2012/ref/xor_salsa2012.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa2012/libsodium_la-stream_salsa2012.lo `test -f 'crypto_stream/salsa2012/stream_salsa2012.c' || echo '$(srcdir)/'`crypto_stream/salsa2012/stream_salsa2012.c
 
-crypto_stream/salsa208/libsodium_la-stream_salsa208_api.lo: crypto_stream/salsa208/stream_salsa208_api.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa208/libsodium_la-stream_salsa208_api.lo -MD -MP -MF crypto_stream/salsa208/$(DEPDIR)/libsodium_la-stream_salsa208_api.Tpo -c -o crypto_stream/salsa208/libsodium_la-stream_salsa208_api.lo `test -f 'crypto_stream/salsa208/stream_salsa208_api.c' || echo '$(srcdir)/'`crypto_stream/salsa208/stream_salsa208_api.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa208/$(DEPDIR)/libsodium_la-stream_salsa208_api.Tpo crypto_stream/salsa208/$(DEPDIR)/libsodium_la-stream_salsa208_api.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa208/stream_salsa208_api.c' object='crypto_stream/salsa208/libsodium_la-stream_salsa208_api.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/salsa208/ref/libsodium_la-stream_salsa208_ref.lo: crypto_stream/salsa208/ref/stream_salsa208_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa208/ref/libsodium_la-stream_salsa208_ref.lo -MD -MP -MF crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-stream_salsa208_ref.Tpo -c -o crypto_stream/salsa208/ref/libsodium_la-stream_salsa208_ref.lo `test -f 'crypto_stream/salsa208/ref/stream_salsa208_ref.c' || echo '$(srcdir)/'`crypto_stream/salsa208/ref/stream_salsa208_ref.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-stream_salsa208_ref.Tpo crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-stream_salsa208_ref.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa208/ref/stream_salsa208_ref.c' object='crypto_stream/salsa208/ref/libsodium_la-stream_salsa208_ref.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa208/libsodium_la-stream_salsa208_api.lo `test -f 'crypto_stream/salsa208/stream_salsa208_api.c' || echo '$(srcdir)/'`crypto_stream/salsa208/stream_salsa208_api.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa208/ref/libsodium_la-stream_salsa208_ref.lo `test -f 'crypto_stream/salsa208/ref/stream_salsa208_ref.c' || echo '$(srcdir)/'`crypto_stream/salsa208/ref/stream_salsa208_ref.c
 
-crypto_stream/salsa208/ref/libsodium_la-stream_salsa208.lo: crypto_stream/salsa208/ref/stream_salsa208.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa208/ref/libsodium_la-stream_salsa208.lo -MD -MP -MF crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-stream_salsa208.Tpo -c -o crypto_stream/salsa208/ref/libsodium_la-stream_salsa208.lo `test -f 'crypto_stream/salsa208/ref/stream_salsa208.c' || echo '$(srcdir)/'`crypto_stream/salsa208/ref/stream_salsa208.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-stream_salsa208.Tpo crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-stream_salsa208.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa208/ref/stream_salsa208.c' object='crypto_stream/salsa208/ref/libsodium_la-stream_salsa208.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/salsa208/libsodium_la-stream_salsa208.lo: crypto_stream/salsa208/stream_salsa208.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa208/libsodium_la-stream_salsa208.lo -MD -MP -MF crypto_stream/salsa208/$(DEPDIR)/libsodium_la-stream_salsa208.Tpo -c -o crypto_stream/salsa208/libsodium_la-stream_salsa208.lo `test -f 'crypto_stream/salsa208/stream_salsa208.c' || echo '$(srcdir)/'`crypto_stream/salsa208/stream_salsa208.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa208/$(DEPDIR)/libsodium_la-stream_salsa208.Tpo crypto_stream/salsa208/$(DEPDIR)/libsodium_la-stream_salsa208.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa208/stream_salsa208.c' object='crypto_stream/salsa208/libsodium_la-stream_salsa208.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa208/ref/libsodium_la-stream_salsa208.lo `test -f 'crypto_stream/salsa208/ref/stream_salsa208.c' || echo '$(srcdir)/'`crypto_stream/salsa208/ref/stream_salsa208.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa208/libsodium_la-stream_salsa208.lo `test -f 'crypto_stream/salsa208/stream_salsa208.c' || echo '$(srcdir)/'`crypto_stream/salsa208/stream_salsa208.c
 
-crypto_stream/salsa208/ref/libsodium_la-xor_salsa208.lo: crypto_stream/salsa208/ref/xor_salsa208.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa208/ref/libsodium_la-xor_salsa208.lo -MD -MP -MF crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-xor_salsa208.Tpo -c -o crypto_stream/salsa208/ref/libsodium_la-xor_salsa208.lo `test -f 'crypto_stream/salsa208/ref/xor_salsa208.c' || echo '$(srcdir)/'`crypto_stream/salsa208/ref/xor_salsa208.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-xor_salsa208.Tpo crypto_stream/salsa208/ref/$(DEPDIR)/libsodium_la-xor_salsa208.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa208/ref/xor_salsa208.c' object='crypto_stream/salsa208/ref/libsodium_la-xor_salsa208.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/xchacha20/libsodium_la-stream_xchacha20.lo: crypto_stream/xchacha20/stream_xchacha20.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/xchacha20/libsodium_la-stream_xchacha20.lo -MD -MP -MF crypto_stream/xchacha20/$(DEPDIR)/libsodium_la-stream_xchacha20.Tpo -c -o crypto_stream/xchacha20/libsodium_la-stream_xchacha20.lo `test -f 'crypto_stream/xchacha20/stream_xchacha20.c' || echo '$(srcdir)/'`crypto_stream/xchacha20/stream_xchacha20.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/xchacha20/$(DEPDIR)/libsodium_la-stream_xchacha20.Tpo crypto_stream/xchacha20/$(DEPDIR)/libsodium_la-stream_xchacha20.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/xchacha20/stream_xchacha20.c' object='crypto_stream/xchacha20/libsodium_la-stream_xchacha20.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa208/ref/libsodium_la-xor_salsa208.lo `test -f 'crypto_stream/salsa208/ref/xor_salsa208.c' || echo '$(srcdir)/'`crypto_stream/salsa208/ref/xor_salsa208.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsodium_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/xchacha20/libsodium_la-stream_xchacha20.lo `test -f 'crypto_stream/xchacha20/stream_xchacha20.c' || echo '$(srcdir)/'`crypto_stream/xchacha20/stream_xchacha20.c
 
 crypto_pwhash/scryptsalsa208sha256/sse/libsse2_la-pwhash_scryptsalsa208sha256_sse.lo: crypto_pwhash/scryptsalsa208sha256/sse/pwhash_scryptsalsa208sha256_sse.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsse2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_pwhash/scryptsalsa208sha256/sse/libsse2_la-pwhash_scryptsalsa208sha256_sse.lo -MD -MP -MF crypto_pwhash/scryptsalsa208sha256/sse/$(DEPDIR)/libsse2_la-pwhash_scryptsalsa208sha256_sse.Tpo -c -o crypto_pwhash/scryptsalsa208sha256/sse/libsse2_la-pwhash_scryptsalsa208sha256_sse.lo `test -f 'crypto_pwhash/scryptsalsa208sha256/sse/pwhash_scryptsalsa208sha256_sse.c' || echo '$(srcdir)/'`crypto_pwhash/scryptsalsa208sha256/sse/pwhash_scryptsalsa208sha256_sse.c
@@ -3022,19 +2786,26 @@ crypto_onetimeauth/poly1305/sse2/libsse2
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsse2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_onetimeauth/poly1305/sse2/libsse2_la-poly1305_sse2.lo `test -f 'crypto_onetimeauth/poly1305/sse2/poly1305_sse2.c' || echo '$(srcdir)/'`crypto_onetimeauth/poly1305/sse2/poly1305_sse2.c
 
-crypto_generichash/blake2/ref/libsse41_la-blake2b-compress-sse41.lo: crypto_generichash/blake2/ref/blake2b-compress-sse41.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsse41_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2/ref/libsse41_la-blake2b-compress-sse41.lo -MD -MP -MF crypto_generichash/blake2/ref/$(DEPDIR)/libsse41_la-blake2b-compress-sse41.Tpo -c -o crypto_generichash/blake2/ref/libsse41_la-blake2b-compress-sse41.lo `test -f 'crypto_generichash/blake2/ref/blake2b-compress-sse41.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/blake2b-compress-sse41.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2/ref/$(DEPDIR)/libsse41_la-blake2b-compress-sse41.Tpo crypto_generichash/blake2/ref/$(DEPDIR)/libsse41_la-blake2b-compress-sse41.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2/ref/blake2b-compress-sse41.c' object='crypto_generichash/blake2/ref/libsse41_la-blake2b-compress-sse41.lo' libtool=yes @AMDEPBACKSLASH@
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsse41_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2/ref/libsse41_la-blake2b-compress-sse41.lo `test -f 'crypto_generichash/blake2/ref/blake2b-compress-sse41.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/blake2b-compress-sse41.c
-
-crypto_generichash/blake2/ref/libssse3_la-blake2b-compress-ssse3.lo: crypto_generichash/blake2/ref/blake2b-compress-ssse3.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libssse3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2/ref/libssse3_la-blake2b-compress-ssse3.lo -MD -MP -MF crypto_generichash/blake2/ref/$(DEPDIR)/libssse3_la-blake2b-compress-ssse3.Tpo -c -o crypto_generichash/blake2/ref/libssse3_la-blake2b-compress-ssse3.lo `test -f 'crypto_generichash/blake2/ref/blake2b-compress-ssse3.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/blake2b-compress-ssse3.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2/ref/$(DEPDIR)/libssse3_la-blake2b-compress-ssse3.Tpo crypto_generichash/blake2/ref/$(DEPDIR)/libssse3_la-blake2b-compress-ssse3.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2/ref/blake2b-compress-ssse3.c' object='crypto_generichash/blake2/ref/libssse3_la-blake2b-compress-ssse3.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/salsa20/xmm6int/libsse2_la-salsa20_xmm6int-sse2.lo: crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsse2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/salsa20/xmm6int/libsse2_la-salsa20_xmm6int-sse2.lo -MD -MP -MF crypto_stream/salsa20/xmm6int/$(DEPDIR)/libsse2_la-salsa20_xmm6int-sse2.Tpo -c -o crypto_stream/salsa20/xmm6int/libsse2_la-salsa20_xmm6int-sse2.lo `test -f 'crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c' || echo '$(srcdir)/'`crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/salsa20/xmm6int/$(DEPDIR)/libsse2_la-salsa20_xmm6int-sse2.Tpo crypto_stream/salsa20/xmm6int/$(DEPDIR)/libsse2_la-salsa20_xmm6int-sse2.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c' object='crypto_stream/salsa20/xmm6int/libsse2_la-salsa20_xmm6int-sse2.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsse2_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/salsa20/xmm6int/libsse2_la-salsa20_xmm6int-sse2.lo `test -f 'crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c' || echo '$(srcdir)/'`crypto_stream/salsa20/xmm6int/salsa20_xmm6int-sse2.c
+
+crypto_generichash/blake2b/ref/libsse41_la-blake2b-compress-sse41.lo: crypto_generichash/blake2b/ref/blake2b-compress-sse41.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsse41_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2b/ref/libsse41_la-blake2b-compress-sse41.lo -MD -MP -MF crypto_generichash/blake2b/ref/$(DEPDIR)/libsse41_la-blake2b-compress-sse41.Tpo -c -o crypto_generichash/blake2b/ref/libsse41_la-blake2b-compress-sse41.lo `test -f 'crypto_generichash/blake2b/ref/blake2b-compress-sse41.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/blake2b-compress-sse41.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2b/ref/$(DEPDIR)/libsse41_la-blake2b-compress-sse41.Tpo crypto_generichash/blake2b/ref/$(DEPDIR)/libsse41_la-blake2b-compress-sse41.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2b/ref/blake2b-compress-sse41.c' object='crypto_generichash/blake2b/ref/libsse41_la-blake2b-compress-sse41.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libsse41_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2b/ref/libsse41_la-blake2b-compress-sse41.lo `test -f 'crypto_generichash/blake2b/ref/blake2b-compress-sse41.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/blake2b-compress-sse41.c
+
+crypto_generichash/blake2b/ref/libssse3_la-blake2b-compress-ssse3.lo: crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libssse3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_generichash/blake2b/ref/libssse3_la-blake2b-compress-ssse3.lo -MD -MP -MF crypto_generichash/blake2b/ref/$(DEPDIR)/libssse3_la-blake2b-compress-ssse3.Tpo -c -o crypto_generichash/blake2b/ref/libssse3_la-blake2b-compress-ssse3.lo `test -f 'crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_generichash/blake2b/ref/$(DEPDIR)/libssse3_la-blake2b-compress-ssse3.Tpo crypto_generichash/blake2b/ref/$(DEPDIR)/libssse3_la-blake2b-compress-ssse3.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c' object='crypto_generichash/blake2b/ref/libssse3_la-blake2b-compress-ssse3.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libssse3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2/ref/libssse3_la-blake2b-compress-ssse3.lo `test -f 'crypto_generichash/blake2/ref/blake2b-compress-ssse3.c' || echo '$(srcdir)/'`crypto_generichash/blake2/ref/blake2b-compress-ssse3.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libssse3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_generichash/blake2b/ref/libssse3_la-blake2b-compress-ssse3.lo `test -f 'crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c' || echo '$(srcdir)/'`crypto_generichash/blake2b/ref/blake2b-compress-ssse3.c
 
 crypto_pwhash/argon2/libssse3_la-argon2-fill-block-ssse3.lo: crypto_pwhash/argon2/argon2-fill-block-ssse3.c
 @am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libssse3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_pwhash/argon2/libssse3_la-argon2-fill-block-ssse3.lo -MD -MP -MF crypto_pwhash/argon2/$(DEPDIR)/libssse3_la-argon2-fill-block-ssse3.Tpo -c -o crypto_pwhash/argon2/libssse3_la-argon2-fill-block-ssse3.lo `test -f 'crypto_pwhash/argon2/argon2-fill-block-ssse3.c' || echo '$(srcdir)/'`crypto_pwhash/argon2/argon2-fill-block-ssse3.c
@@ -3043,12 +2814,12 @@ crypto_pwhash/argon2/libssse3_la-argon2-
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libssse3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_pwhash/argon2/libssse3_la-argon2-fill-block-ssse3.lo `test -f 'crypto_pwhash/argon2/argon2-fill-block-ssse3.c' || echo '$(srcdir)/'`crypto_pwhash/argon2/argon2-fill-block-ssse3.c
 
-crypto_stream/chacha20/vec/libssse3_la-stream_chacha20_vec.lo: crypto_stream/chacha20/vec/stream_chacha20_vec.c
-@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libssse3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/chacha20/vec/libssse3_la-stream_chacha20_vec.lo -MD -MP -MF crypto_stream/chacha20/vec/$(DEPDIR)/libssse3_la-stream_chacha20_vec.Tpo -c -o crypto_stream/chacha20/vec/libssse3_la-stream_chacha20_vec.lo `test -f 'crypto_stream/chacha20/vec/stream_chacha20_vec.c' || echo '$(srcdir)/'`crypto_stream/chacha20/vec/stream_chacha20_vec.c
-@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/chacha20/vec/$(DEPDIR)/libssse3_la-stream_chacha20_vec.Tpo crypto_stream/chacha20/vec/$(DEPDIR)/libssse3_la-stream_chacha20_vec.Plo
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/chacha20/vec/stream_chacha20_vec.c' object='crypto_stream/chacha20/vec/libssse3_la-stream_chacha20_vec.lo' libtool=yes @AMDEPBACKSLASH@
+crypto_stream/chacha20/dolbeau/libssse3_la-chacha20_dolbeau-ssse3.lo: crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c
+@am__fastdepCC_TRUE@	$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libssse3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crypto_stream/chacha20/dolbeau/libssse3_la-chacha20_dolbeau-ssse3.lo -MD -MP -MF crypto_stream/chacha20/dolbeau/$(DEPDIR)/libssse3_la-chacha20_dolbeau-ssse3.Tpo -c -o crypto_stream/chacha20/dolbeau/libssse3_la-chacha20_dolbeau-ssse3.lo `test -f 'crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c' || echo '$(srcdir)/'`crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c
+@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) crypto_stream/chacha20/dolbeau/$(DEPDIR)/libssse3_la-chacha20_dolbeau-ssse3.Tpo crypto_stream/chacha20/dolbeau/$(DEPDIR)/libssse3_la-chacha20_dolbeau-ssse3.Plo
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c' object='crypto_stream/chacha20/dolbeau/libssse3_la-chacha20_dolbeau-ssse3.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libssse3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/chacha20/vec/libssse3_la-stream_chacha20_vec.lo `test -f 'crypto_stream/chacha20/vec/stream_chacha20_vec.c' || echo '$(srcdir)/'`crypto_stream/chacha20/vec/stream_chacha20_vec.c
+@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libssse3_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crypto_stream/chacha20/dolbeau/libssse3_la-chacha20_dolbeau-ssse3.lo `test -f 'crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c' || echo '$(srcdir)/'`crypto_stream/chacha20/dolbeau/chacha20_dolbeau-ssse3.c
 
 mostlyclean-libtool:
 	-rm -f *.lo
@@ -3057,34 +2828,30 @@ clean-libtool:
 	-rm -rf .libs _libs
 	-rm -rf crypto_aead/aes256gcm/aesni/.libs crypto_aead/aes256gcm/aesni/_libs
 	-rm -rf crypto_aead/chacha20poly1305/sodium/.libs crypto_aead/chacha20poly1305/sodium/_libs
+	-rm -rf crypto_aead/xchacha20poly1305/sodium/.libs crypto_aead/xchacha20poly1305/sodium/_libs
 	-rm -rf crypto_auth/.libs crypto_auth/_libs
 	-rm -rf crypto_auth/hmacsha256/.libs crypto_auth/hmacsha256/_libs
-	-rm -rf crypto_auth/hmacsha256/cp/.libs crypto_auth/hmacsha256/cp/_libs
 	-rm -rf crypto_auth/hmacsha512/.libs crypto_auth/hmacsha512/_libs
-	-rm -rf crypto_auth/hmacsha512/cp/.libs crypto_auth/hmacsha512/cp/_libs
 	-rm -rf crypto_auth/hmacsha512256/.libs crypto_auth/hmacsha512256/_libs
-	-rm -rf crypto_auth/hmacsha512256/cp/.libs crypto_auth/hmacsha512256/cp/_libs
 	-rm -rf crypto_box/.libs crypto_box/_libs
+	-rm -rf crypto_box/curve25519xchacha20poly1305/.libs crypto_box/curve25519xchacha20poly1305/_libs
 	-rm -rf crypto_box/curve25519xsalsa20poly1305/.libs crypto_box/curve25519xsalsa20poly1305/_libs
-	-rm -rf crypto_box/curve25519xsalsa20poly1305/ref/.libs crypto_box/curve25519xsalsa20poly1305/ref/_libs
 	-rm -rf crypto_core/curve25519/ref10/.libs crypto_core/curve25519/ref10/_libs
 	-rm -rf crypto_core/hchacha20/.libs crypto_core/hchacha20/_libs
 	-rm -rf crypto_core/hsalsa20/.libs crypto_core/hsalsa20/_libs
 	-rm -rf crypto_core/hsalsa20/ref2/.libs crypto_core/hsalsa20/ref2/_libs
-	-rm -rf crypto_core/salsa20/.libs crypto_core/salsa20/_libs
-	-rm -rf crypto_core/salsa20/ref/.libs crypto_core/salsa20/ref/_libs
-	-rm -rf crypto_core/salsa2012/.libs crypto_core/salsa2012/_libs
-	-rm -rf crypto_core/salsa2012/ref/.libs crypto_core/salsa2012/ref/_libs
-	-rm -rf crypto_core/salsa208/.libs crypto_core/salsa208/_libs
-	-rm -rf crypto_core/salsa208/ref/.libs crypto_core/salsa208/ref/_libs
+	-rm -rf crypto_core/salsa/ref/.libs crypto_core/salsa/ref/_libs
 	-rm -rf crypto_generichash/.libs crypto_generichash/_libs
-	-rm -rf crypto_generichash/blake2/.libs crypto_generichash/blake2/_libs
-	-rm -rf crypto_generichash/blake2/ref/.libs crypto_generichash/blake2/ref/_libs
+	-rm -rf crypto_generichash/blake2b/.libs crypto_generichash/blake2b/_libs
+	-rm -rf crypto_generichash/blake2b/ref/.libs crypto_generichash/blake2b/ref/_libs
 	-rm -rf crypto_hash/.libs crypto_hash/_libs
 	-rm -rf crypto_hash/sha256/.libs crypto_hash/sha256/_libs
 	-rm -rf crypto_hash/sha256/cp/.libs crypto_hash/sha256/cp/_libs
 	-rm -rf crypto_hash/sha512/.libs crypto_hash/sha512/_libs
 	-rm -rf crypto_hash/sha512/cp/.libs crypto_hash/sha512/cp/_libs
+	-rm -rf crypto_kdf/.libs crypto_kdf/_libs
+	-rm -rf crypto_kdf/blake2b/.libs crypto_kdf/blake2b/_libs
+	-rm -rf crypto_kx/.libs crypto_kx/_libs
 	-rm -rf crypto_onetimeauth/.libs crypto_onetimeauth/_libs
 	-rm -rf crypto_onetimeauth/poly1305/.libs crypto_onetimeauth/poly1305/_libs
 	-rm -rf crypto_onetimeauth/poly1305/donna/.libs crypto_onetimeauth/poly1305/donna/_libs
@@ -3100,8 +2867,8 @@ clean-libtool:
 	-rm -rf crypto_scalarmult/curve25519/ref10/.libs crypto_scalarmult/curve25519/ref10/_libs
 	-rm -rf crypto_scalarmult/curve25519/sandy2x/.libs crypto_scalarmult/curve25519/sandy2x/_libs
 	-rm -rf crypto_secretbox/.libs crypto_secretbox/_libs
+	-rm -rf crypto_secretbox/xchacha20poly1305/.libs crypto_secretbox/xchacha20poly1305/_libs
 	-rm -rf crypto_secretbox/xsalsa20poly1305/.libs crypto_secretbox/xsalsa20poly1305/_libs
-	-rm -rf crypto_secretbox/xsalsa20poly1305/ref/.libs crypto_secretbox/xsalsa20poly1305/ref/_libs
 	-rm -rf crypto_shorthash/.libs crypto_shorthash/_libs
 	-rm -rf crypto_shorthash/siphash24/.libs crypto_shorthash/siphash24/_libs
 	-rm -rf crypto_shorthash/siphash24/ref/.libs crypto_shorthash/siphash24/ref/_libs
@@ -3110,25 +2877,21 @@ clean-libtool:
 	-rm -rf crypto_sign/ed25519/ref10/.libs crypto_sign/ed25519/ref10/_libs
 	-rm -rf crypto_stream/.libs crypto_stream/_libs
 	-rm -rf crypto_stream/aes128ctr/.libs crypto_stream/aes128ctr/_libs
-	-rm -rf crypto_stream/aes128ctr/portable/.libs crypto_stream/aes128ctr/portable/_libs
+	-rm -rf crypto_stream/aes128ctr/nacl/.libs crypto_stream/aes128ctr/nacl/_libs
 	-rm -rf crypto_stream/chacha20/.libs crypto_stream/chacha20/_libs
+	-rm -rf crypto_stream/chacha20/dolbeau/.libs crypto_stream/chacha20/dolbeau/_libs
 	-rm -rf crypto_stream/chacha20/ref/.libs crypto_stream/chacha20/ref/_libs
-	-rm -rf crypto_stream/chacha20/vec/.libs crypto_stream/chacha20/vec/_libs
 	-rm -rf crypto_stream/salsa20/.libs crypto_stream/salsa20/_libs
-	-rm -rf crypto_stream/salsa20/amd64_xmm6/.libs crypto_stream/salsa20/amd64_xmm6/_libs
 	-rm -rf crypto_stream/salsa20/ref/.libs crypto_stream/salsa20/ref/_libs
+	-rm -rf crypto_stream/salsa20/xmm6/.libs crypto_stream/salsa20/xmm6/_libs
+	-rm -rf crypto_stream/salsa20/xmm6int/.libs crypto_stream/salsa20/xmm6int/_libs
 	-rm -rf crypto_stream/salsa2012/.libs crypto_stream/salsa2012/_libs
 	-rm -rf crypto_stream/salsa2012/ref/.libs crypto_stream/salsa2012/ref/_libs
 	-rm -rf crypto_stream/salsa208/.libs crypto_stream/salsa208/_libs
 	-rm -rf crypto_stream/salsa208/ref/.libs crypto_stream/salsa208/ref/_libs
+	-rm -rf crypto_stream/xchacha20/.libs crypto_stream/xchacha20/_libs
 	-rm -rf crypto_stream/xsalsa20/.libs crypto_stream/xsalsa20/_libs
-	-rm -rf crypto_stream/xsalsa20/ref/.libs crypto_stream/xsalsa20/ref/_libs
-	-rm -rf crypto_verify/16/.libs crypto_verify/16/_libs
-	-rm -rf crypto_verify/16/ref/.libs crypto_verify/16/ref/_libs
-	-rm -rf crypto_verify/32/.libs crypto_verify/32/_libs
-	-rm -rf crypto_verify/32/ref/.libs crypto_verify/32/ref/_libs
-	-rm -rf crypto_verify/64/.libs crypto_verify/64/_libs
-	-rm -rf crypto_verify/64/ref/.libs crypto_verify/64/ref/_libs
+	-rm -rf crypto_verify/sodium/.libs crypto_verify/sodium/_libs
 	-rm -rf randombytes/.libs randombytes/_libs
 	-rm -rf randombytes/nativeclient/.libs randombytes/nativeclient/_libs
 	-rm -rf randombytes/salsa20/.libs randombytes/salsa20/_libs
@@ -3349,26 +3112,22 @@ distclean-generic:
 	-rm -f crypto_aead/aes256gcm/aesni/$(am__dirstamp)
 	-rm -f crypto_aead/chacha20poly1305/sodium/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_aead/chacha20poly1305/sodium/$(am__dirstamp)
+	-rm -f crypto_aead/xchacha20poly1305/sodium/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_aead/xchacha20poly1305/sodium/$(am__dirstamp)
 	-rm -f crypto_auth/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_auth/$(am__dirstamp)
 	-rm -f crypto_auth/hmacsha256/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_auth/hmacsha256/$(am__dirstamp)
-	-rm -f crypto_auth/hmacsha256/cp/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_auth/hmacsha256/cp/$(am__dirstamp)
 	-rm -f crypto_auth/hmacsha512/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_auth/hmacsha512/$(am__dirstamp)
-	-rm -f crypto_auth/hmacsha512/cp/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_auth/hmacsha512/cp/$(am__dirstamp)
 	-rm -f crypto_auth/hmacsha512256/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_auth/hmacsha512256/$(am__dirstamp)
-	-rm -f crypto_auth/hmacsha512256/cp/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_auth/hmacsha512256/cp/$(am__dirstamp)
 	-rm -f crypto_box/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_box/$(am__dirstamp)
+	-rm -f crypto_box/curve25519xchacha20poly1305/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_box/curve25519xchacha20poly1305/$(am__dirstamp)
 	-rm -f crypto_box/curve25519xsalsa20poly1305/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_box/curve25519xsalsa20poly1305/$(am__dirstamp)
-	-rm -f crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_box/curve25519xsalsa20poly1305/ref/$(am__dirstamp)
 	-rm -f crypto_core/curve25519/ref10/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_core/curve25519/ref10/$(am__dirstamp)
 	-rm -f crypto_core/hchacha20/$(DEPDIR)/$(am__dirstamp)
@@ -3377,24 +3136,14 @@ distclean-generic:
 	-rm -f crypto_core/hsalsa20/$(am__dirstamp)
 	-rm -f crypto_core/hsalsa20/ref2/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_core/hsalsa20/ref2/$(am__dirstamp)
-	-rm -f crypto_core/salsa20/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_core/salsa20/$(am__dirstamp)
-	-rm -f crypto_core/salsa20/ref/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_core/salsa20/ref/$(am__dirstamp)
-	-rm -f crypto_core/salsa2012/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_core/salsa2012/$(am__dirstamp)
-	-rm -f crypto_core/salsa2012/ref/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_core/salsa2012/ref/$(am__dirstamp)
-	-rm -f crypto_core/salsa208/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_core/salsa208/$(am__dirstamp)
-	-rm -f crypto_core/salsa208/ref/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_core/salsa208/ref/$(am__dirstamp)
+	-rm -f crypto_core/salsa/ref/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_core/salsa/ref/$(am__dirstamp)
 	-rm -f crypto_generichash/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_generichash/$(am__dirstamp)
-	-rm -f crypto_generichash/blake2/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_generichash/blake2/$(am__dirstamp)
-	-rm -f crypto_generichash/blake2/ref/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_generichash/blake2/ref/$(am__dirstamp)
+	-rm -f crypto_generichash/blake2b/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_generichash/blake2b/$(am__dirstamp)
+	-rm -f crypto_generichash/blake2b/ref/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_generichash/blake2b/ref/$(am__dirstamp)
 	-rm -f crypto_hash/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_hash/$(am__dirstamp)
 	-rm -f crypto_hash/sha256/$(DEPDIR)/$(am__dirstamp)
@@ -3405,6 +3154,12 @@ distclean-generic:
 	-rm -f crypto_hash/sha512/$(am__dirstamp)
 	-rm -f crypto_hash/sha512/cp/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_hash/sha512/cp/$(am__dirstamp)
+	-rm -f crypto_kdf/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_kdf/$(am__dirstamp)
+	-rm -f crypto_kdf/blake2b/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_kdf/blake2b/$(am__dirstamp)
+	-rm -f crypto_kx/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_kx/$(am__dirstamp)
 	-rm -f crypto_onetimeauth/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_onetimeauth/$(am__dirstamp)
 	-rm -f crypto_onetimeauth/poly1305/$(DEPDIR)/$(am__dirstamp)
@@ -3435,10 +3190,10 @@ distclean-generic:
 	-rm -f crypto_scalarmult/curve25519/sandy2x/$(am__dirstamp)
 	-rm -f crypto_secretbox/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_secretbox/$(am__dirstamp)
+	-rm -f crypto_secretbox/xchacha20poly1305/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_secretbox/xchacha20poly1305/$(am__dirstamp)
 	-rm -f crypto_secretbox/xsalsa20poly1305/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_secretbox/xsalsa20poly1305/$(am__dirstamp)
-	-rm -f crypto_secretbox/xsalsa20poly1305/ref/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_secretbox/xsalsa20poly1305/ref/$(am__dirstamp)
 	-rm -f crypto_shorthash/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_shorthash/$(am__dirstamp)
 	-rm -f crypto_shorthash/siphash24/$(DEPDIR)/$(am__dirstamp)
@@ -3455,20 +3210,22 @@ distclean-generic:
 	-rm -f crypto_stream/$(am__dirstamp)
 	-rm -f crypto_stream/aes128ctr/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_stream/aes128ctr/$(am__dirstamp)
-	-rm -f crypto_stream/aes128ctr/portable/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_stream/aes128ctr/portable/$(am__dirstamp)
+	-rm -f crypto_stream/aes128ctr/nacl/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_stream/aes128ctr/nacl/$(am__dirstamp)
 	-rm -f crypto_stream/chacha20/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_stream/chacha20/$(am__dirstamp)
+	-rm -f crypto_stream/chacha20/dolbeau/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_stream/chacha20/dolbeau/$(am__dirstamp)
 	-rm -f crypto_stream/chacha20/ref/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_stream/chacha20/ref/$(am__dirstamp)
-	-rm -f crypto_stream/chacha20/vec/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_stream/chacha20/vec/$(am__dirstamp)
 	-rm -f crypto_stream/salsa20/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_stream/salsa20/$(am__dirstamp)
-	-rm -f crypto_stream/salsa20/amd64_xmm6/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_stream/salsa20/amd64_xmm6/$(am__dirstamp)
 	-rm -f crypto_stream/salsa20/ref/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_stream/salsa20/ref/$(am__dirstamp)
+	-rm -f crypto_stream/salsa20/xmm6/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_stream/salsa20/xmm6/$(am__dirstamp)
+	-rm -f crypto_stream/salsa20/xmm6int/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_stream/salsa20/xmm6int/$(am__dirstamp)
 	-rm -f crypto_stream/salsa2012/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_stream/salsa2012/$(am__dirstamp)
 	-rm -f crypto_stream/salsa2012/ref/$(DEPDIR)/$(am__dirstamp)
@@ -3477,22 +3234,12 @@ distclean-generic:
 	-rm -f crypto_stream/salsa208/$(am__dirstamp)
 	-rm -f crypto_stream/salsa208/ref/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_stream/salsa208/ref/$(am__dirstamp)
+	-rm -f crypto_stream/xchacha20/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_stream/xchacha20/$(am__dirstamp)
 	-rm -f crypto_stream/xsalsa20/$(DEPDIR)/$(am__dirstamp)
 	-rm -f crypto_stream/xsalsa20/$(am__dirstamp)
-	-rm -f crypto_stream/xsalsa20/ref/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_stream/xsalsa20/ref/$(am__dirstamp)
-	-rm -f crypto_verify/16/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_verify/16/$(am__dirstamp)
-	-rm -f crypto_verify/16/ref/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_verify/16/ref/$(am__dirstamp)
-	-rm -f crypto_verify/32/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_verify/32/$(am__dirstamp)
-	-rm -f crypto_verify/32/ref/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_verify/32/ref/$(am__dirstamp)
-	-rm -f crypto_verify/64/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_verify/64/$(am__dirstamp)
-	-rm -f crypto_verify/64/ref/$(DEPDIR)/$(am__dirstamp)
-	-rm -f crypto_verify/64/ref/$(am__dirstamp)
+	-rm -f crypto_verify/sodium/$(DEPDIR)/$(am__dirstamp)
+	-rm -f crypto_verify/sodium/$(am__dirstamp)
 	-rm -f randombytes/$(DEPDIR)/$(am__dirstamp)
 	-rm -f randombytes/$(am__dirstamp)
 	-rm -f randombytes/nativeclient/$(DEPDIR)/$(am__dirstamp)
@@ -3513,7 +3260,7 @@ clean-am: clean-generic clean-libLTLIBRA
 	clean-noinstLTLIBRARIES mostlyclean-am
 
 distclean: distclean-recursive
-	-rm -rf crypto_aead/aes256gcm/aesni/$(DEPDIR) crypto_aead/chacha20poly1305/sodium/$(DEPDIR) crypto_auth/$(DEPDIR) crypto_auth/hmacsha256/$(DEPDIR) crypto_auth/hmacsha256/cp/$(DEPDIR) crypto_auth/hmacsha512/$(DEPDIR) crypto_auth/hmacsha512/cp/$(DEPDIR) crypto_auth/hmacsha512256/$(DEPDIR) crypto_auth/hmacsha512256/cp/$(DEPDIR) crypto_box/$(DEPDIR) crypto_box/curve25519xsalsa20poly1305/$(DEPDIR) crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR) crypto_core/curve25519/ref10/$(DEPDIR) crypto_core/hchacha20/$(DEPDIR) crypto_core/hsalsa20/$(DEPDIR) crypto_core/hsalsa20/ref2/$(DEPDIR) crypto_core/salsa20/$(DEPDIR) crypto_core/salsa20/ref/$(DEPDIR) crypto_core/salsa2012/$(DEPDIR) crypto_core/salsa2012/ref/$(DEPDIR) crypto_core/salsa208/$(DEPDIR) crypto_core/salsa208/ref/$(DEPDIR) crypto_generichash/$(DEPDIR) crypto_generichash/blake2/$(DEPDIR) crypto_generichash/blake2/ref/$(DEPDIR) crypto_hash/$(DEPDIR) crypto_hash/sha256/$(DEPDIR) crypto_hash/sha256/cp/$(DEPDIR) crypto_hash/sha512/$(DEPDIR) crypto_hash/sha512/cp/$(DEPDIR) crypto_onetimeauth/$(DEPDIR) crypto_onetimeauth/poly1305/$(DEPDIR) crypto_onetimeauth/poly1305/donna/$(DEPDIR) crypto_onetimeauth/poly1305/sse2/$(DEPDIR) crypto_pwhash/$(DEPDIR) crypto_pwhash/argon2/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/nosse/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/sse/$(DEPDIR) crypto_scalarmult/$(DEPDIR) crypto_scalarmult/curve25519/$(DEPDIR) crypto_scalarmult/curve25519/donna_c64/$(DEPDIR) crypto_scalarmult/curve25519/ref10/$(DEPDIR) crypto_scalarmult/curve25519/sandy2x/$(DEPDIR) crypto_secretbox/$(DEPDIR) crypto_secretbox/xsalsa20poly1305/$(DEPDIR) crypto_secretbox/xsalsa20poly1305/ref/$(DEPDIR) crypto_shorthash/$(DEPDIR) crypto_shorthash/siphash24/$(DEPDIR) crypto_shorthash/siphash24/ref/$(DEPDIR) crypto_sign/$(DEPDIR) crypto_sign/ed25519/$(DEPDIR) crypto_sign/ed25519/ref10/$(DEPDIR) crypto_stream/$(DEPDIR) crypto_stream/aes128ctr/$(DEPDIR) crypto_stream/aes128ctr/portable/$(DEPDIR) crypto_stream/chacha20/$(DEPDIR) crypto_stream/chacha20/ref/$(DEPDIR) crypto_stream/chacha20/vec/$(DEPDIR) crypto_stream/salsa20/$(DEPDIR) crypto_stream/salsa20/amd64_xmm6/$(DEPDIR) crypto_stream/salsa20/ref/$(DEPDIR) crypto_stream/salsa2012/$(DEPDIR) crypto_stream/salsa2012/ref/$(DEPDIR) crypto_stream/salsa208/$(DEPDIR) crypto_stream/salsa208/ref/$(DEPDIR) crypto_stream/xsalsa20/$(DEPDIR) crypto_stream/xsalsa20/ref/$(DEPDIR) crypto_verify/16/$(DEPDIR) crypto_verify/16/ref/$(DEPDIR) crypto_verify/32/$(DEPDIR) crypto_verify/32/ref/$(DEPDIR) crypto_verify/64/$(DEPDIR) crypto_verify/64/ref/$(DEPDIR) randombytes/$(DEPDIR) randombytes/nativeclient/$(DEPDIR) randombytes/salsa20/$(DEPDIR) randombytes/sysrandom/$(DEPDIR) sodium/$(DEPDIR)
+	-rm -rf crypto_aead/aes256gcm/aesni/$(DEPDIR) crypto_aead/chacha20poly1305/sodium/$(DEPDIR) crypto_aead/xchacha20poly1305/sodium/$(DEPDIR) crypto_auth/$(DEPDIR) crypto_auth/hmacsha256/$(DEPDIR) crypto_auth/hmacsha512/$(DEPDIR) crypto_auth/hmacsha512256/$(DEPDIR) crypto_box/$(DEPDIR) crypto_box/curve25519xchacha20poly1305/$(DEPDIR) crypto_box/curve25519xsalsa20poly1305/$(DEPDIR) crypto_core/curve25519/ref10/$(DEPDIR) crypto_core/hchacha20/$(DEPDIR) crypto_core/hsalsa20/$(DEPDIR) crypto_core/hsalsa20/ref2/$(DEPDIR) crypto_core/salsa/ref/$(DEPDIR) crypto_generichash/$(DEPDIR) crypto_generichash/blake2b/$(DEPDIR) crypto_generichash/blake2b/ref/$(DEPDIR) crypto_hash/$(DEPDIR) crypto_hash/sha256/$(DEPDIR) crypto_hash/sha256/cp/$(DEPDIR) crypto_hash/sha512/$(DEPDIR) crypto_hash/sha512/cp/$(DEPDIR) crypto_kdf/$(DEPDIR) crypto_kdf/blake2b/$(DEPDIR) crypto_kx/$(DEPDIR) crypto_onetimeauth/$(DEPDIR) crypto_onetimeauth/poly1305/$(DEPDIR) crypto_onetimeauth/poly1305/donna/$(DEPDIR) crypto_onetimeauth/poly1305/sse2/$(DEPDIR) crypto_pwhash/$(DEPDIR) crypto_pwhash/argon2/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/nosse/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/sse/$(DEPDIR) crypto_scalarmult/$(DEPDIR) crypto_scalarmult/curve25519/$(DEPDIR) crypto_scalarmult/curve25519/donna_c64/$(DEPDIR) crypto_scalarmult/curve25519/ref10/$(DEPDIR) crypto_scalarmult/curve25519/sandy2x/$(DEPDIR) crypto_secretbox/$(DEPDIR) crypto_secretbox/xchacha20poly1305/$(DEPDIR) crypto_secretbox/xsalsa20poly1305/$(DEPDIR) crypto_shorthash/$(DEPDIR) crypto_shorthash/siphash24/$(DEPDIR) crypto_shorthash/siphash24/ref/$(DEPDIR) crypto_sign/$(DEPDIR) crypto_sign/ed25519/$(DEPDIR) crypto_sign/ed25519/ref10/$(DEPDIR) crypto_stream/$(DEPDIR) crypto_stream/aes128ctr/$(DEPDIR) crypto_stream/aes128ctr/nacl/$(DEPDIR) crypto_stream/chacha20/$(DEPDIR) crypto_stream/chacha20/dolbeau/$(DEPDIR) crypto_stream/chacha20/ref/$(DEPDIR) crypto_stream/salsa20/$(DEPDIR) crypto_stream/salsa20/ref/$(DEPDIR) crypto_stream/salsa20/xmm6/$(DEPDIR) crypto_stream/salsa20/xmm6int/$(DEPDIR) crypto_stream/salsa2012/$(DEPDIR) crypto_stream/salsa2012/ref/$(DEPDIR) crypto_stream/salsa208/$(DEPDIR) crypto_stream/salsa208/ref/$(DEPDIR) crypto_stream/xchacha20/$(DEPDIR) crypto_stream/xsalsa20/$(DEPDIR) crypto_verify/sodium/$(DEPDIR) randombytes/$(DEPDIR) randombytes/nativeclient/$(DEPDIR) randombytes/salsa20/$(DEPDIR) randombytes/sysrandom/$(DEPDIR) sodium/$(DEPDIR)
 	-rm -f Makefile
 distclean-am: clean-am distclean-compile distclean-generic \
 	distclean-tags
@@ -3559,7 +3306,7 @@ install-ps-am:
 installcheck-am:
 
 maintainer-clean: maintainer-clean-recursive
-	-rm -rf crypto_aead/aes256gcm/aesni/$(DEPDIR) crypto_aead/chacha20poly1305/sodium/$(DEPDIR) crypto_auth/$(DEPDIR) crypto_auth/hmacsha256/$(DEPDIR) crypto_auth/hmacsha256/cp/$(DEPDIR) crypto_auth/hmacsha512/$(DEPDIR) crypto_auth/hmacsha512/cp/$(DEPDIR) crypto_auth/hmacsha512256/$(DEPDIR) crypto_auth/hmacsha512256/cp/$(DEPDIR) crypto_box/$(DEPDIR) crypto_box/curve25519xsalsa20poly1305/$(DEPDIR) crypto_box/curve25519xsalsa20poly1305/ref/$(DEPDIR) crypto_core/curve25519/ref10/$(DEPDIR) crypto_core/hchacha20/$(DEPDIR) crypto_core/hsalsa20/$(DEPDIR) crypto_core/hsalsa20/ref2/$(DEPDIR) crypto_core/salsa20/$(DEPDIR) crypto_core/salsa20/ref/$(DEPDIR) crypto_core/salsa2012/$(DEPDIR) crypto_core/salsa2012/ref/$(DEPDIR) crypto_core/salsa208/$(DEPDIR) crypto_core/salsa208/ref/$(DEPDIR) crypto_generichash/$(DEPDIR) crypto_generichash/blake2/$(DEPDIR) crypto_generichash/blake2/ref/$(DEPDIR) crypto_hash/$(DEPDIR) crypto_hash/sha256/$(DEPDIR) crypto_hash/sha256/cp/$(DEPDIR) crypto_hash/sha512/$(DEPDIR) crypto_hash/sha512/cp/$(DEPDIR) crypto_onetimeauth/$(DEPDIR) crypto_onetimeauth/poly1305/$(DEPDIR) crypto_onetimeauth/poly1305/donna/$(DEPDIR) crypto_onetimeauth/poly1305/sse2/$(DEPDIR) crypto_pwhash/$(DEPDIR) crypto_pwhash/argon2/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/nosse/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/sse/$(DEPDIR) crypto_scalarmult/$(DEPDIR) crypto_scalarmult/curve25519/$(DEPDIR) crypto_scalarmult/curve25519/donna_c64/$(DEPDIR) crypto_scalarmult/curve25519/ref10/$(DEPDIR) crypto_scalarmult/curve25519/sandy2x/$(DEPDIR) crypto_secretbox/$(DEPDIR) crypto_secretbox/xsalsa20poly1305/$(DEPDIR) crypto_secretbox/xsalsa20poly1305/ref/$(DEPDIR) crypto_shorthash/$(DEPDIR) crypto_shorthash/siphash24/$(DEPDIR) crypto_shorthash/siphash24/ref/$(DEPDIR) crypto_sign/$(DEPDIR) crypto_sign/ed25519/$(DEPDIR) crypto_sign/ed25519/ref10/$(DEPDIR) crypto_stream/$(DEPDIR) crypto_stream/aes128ctr/$(DEPDIR) crypto_stream/aes128ctr/portable/$(DEPDIR) crypto_stream/chacha20/$(DEPDIR) crypto_stream/chacha20/ref/$(DEPDIR) crypto_stream/chacha20/vec/$(DEPDIR) crypto_stream/salsa20/$(DEPDIR) crypto_stream/salsa20/amd64_xmm6/$(DEPDIR) crypto_stream/salsa20/ref/$(DEPDIR) crypto_stream/salsa2012/$(DEPDIR) crypto_stream/salsa2012/ref/$(DEPDIR) crypto_stream/salsa208/$(DEPDIR) crypto_stream/salsa208/ref/$(DEPDIR) crypto_stream/xsalsa20/$(DEPDIR) crypto_stream/xsalsa20/ref/$(DEPDIR) crypto_verify/16/$(DEPDIR) crypto_verify/16/ref/$(DEPDIR) crypto_verify/32/$(DEPDIR) crypto_verify/32/ref/$(DEPDIR) crypto_verify/64/$(DEPDIR) crypto_verify/64/ref/$(DEPDIR) randombytes/$(DEPDIR) randombytes/nativeclient/$(DEPDIR) randombytes/salsa20/$(DEPDIR) randombytes/sysrandom/$(DEPDIR) sodium/$(DEPDIR)
+	-rm -rf crypto_aead/aes256gcm/aesni/$(DEPDIR) crypto_aead/chacha20poly1305/sodium/$(DEPDIR) crypto_aead/xchacha20poly1305/sodium/$(DEPDIR) crypto_auth/$(DEPDIR) crypto_auth/hmacsha256/$(DEPDIR) crypto_auth/hmacsha512/$(DEPDIR) crypto_auth/hmacsha512256/$(DEPDIR) crypto_box/$(DEPDIR) crypto_box/curve25519xchacha20poly1305/$(DEPDIR) crypto_box/curve25519xsalsa20poly1305/$(DEPDIR) crypto_core/curve25519/ref10/$(DEPDIR) crypto_core/hchacha20/$(DEPDIR) crypto_core/hsalsa20/$(DEPDIR) crypto_core/hsalsa20/ref2/$(DEPDIR) crypto_core/salsa/ref/$(DEPDIR) crypto_generichash/$(DEPDIR) crypto_generichash/blake2b/$(DEPDIR) crypto_generichash/blake2b/ref/$(DEPDIR) crypto_hash/$(DEPDIR) crypto_hash/sha256/$(DEPDIR) crypto_hash/sha256/cp/$(DEPDIR) crypto_hash/sha512/$(DEPDIR) crypto_hash/sha512/cp/$(DEPDIR) crypto_kdf/$(DEPDIR) crypto_kdf/blake2b/$(DEPDIR) crypto_kx/$(DEPDIR) crypto_onetimeauth/$(DEPDIR) crypto_onetimeauth/poly1305/$(DEPDIR) crypto_onetimeauth/poly1305/donna/$(DEPDIR) crypto_onetimeauth/poly1305/sse2/$(DEPDIR) crypto_pwhash/$(DEPDIR) crypto_pwhash/argon2/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/nosse/$(DEPDIR) crypto_pwhash/scryptsalsa208sha256/sse/$(DEPDIR) crypto_scalarmult/$(DEPDIR) crypto_scalarmult/curve25519/$(DEPDIR) crypto_scalarmult/curve25519/donna_c64/$(DEPDIR) crypto_scalarmult/curve25519/ref10/$(DEPDIR) crypto_scalarmult/curve25519/sandy2x/$(DEPDIR) crypto_secretbox/$(DEPDIR) crypto_secretbox/xchacha20poly1305/$(DEPDIR) crypto_secretbox/xsalsa20poly1305/$(DEPDIR) crypto_shorthash/$(DEPDIR) crypto_shorthash/siphash24/$(DEPDIR) crypto_shorthash/siphash24/ref/$(DEPDIR) crypto_sign/$(DEPDIR) crypto_sign/ed25519/$(DEPDIR) crypto_sign/ed25519/ref10/$(DEPDIR) crypto_stream/$(DEPDIR) crypto_stream/aes128ctr/$(DEPDIR) crypto_stream/aes128ctr/nacl/$(DEPDIR) crypto_stream/chacha20/$(DEPDIR) crypto_stream/chacha20/dolbeau/$(DEPDIR) crypto_stream/chacha20/ref/$(DEPDIR) crypto_stream/salsa20/$(DEPDIR) crypto_stream/salsa20/ref/$(DEPDIR) crypto_stream/salsa20/xmm6/$(DEPDIR) crypto_stream/salsa20/xmm6int/$(DEPDIR) crypto_stream/salsa2012/$(DEPDIR) crypto_stream/salsa2012/ref/$(DEPDIR) crypto_stream/salsa208/$(DEPDIR) crypto_stream/salsa208/ref/$(DEPDIR) crypto_stream/xchacha20/$(DEPDIR) crypto_stream/xsalsa20/$(DEPDIR) crypto_verify/sodium/$(DEPDIR) randombytes/$(DEPDIR) randombytes/nativeclient/$(DEPDIR) randombytes/salsa20/$(DEPDIR) randombytes/sysrandom/$(DEPDIR) sodium/$(DEPDIR)
 	-rm -f Makefile
 maintainer-clean-am: distclean-am maintainer-clean-generic
 
diff -urpN libsodium-1.0.11/src/libsodium/randombytes/randombytes.c libsodium-1.0.12/src/libsodium/randombytes/randombytes.c
--- libsodium-1.0.11/src/libsodium/randombytes/randombytes.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/randombytes/randombytes.c	2017-03-09 13:55:27.000000000 +0100
@@ -1,34 +1,42 @@
 
-#include <stdlib.h>
-#include <sys/types.h>
-
 #include <assert.h>
 #include <limits.h>
 #include <stdint.h>
+#include <stdlib.h>
+
+#include <sys/types.h>
 
 #ifdef __EMSCRIPTEN__
 # include <emscripten.h>
 #endif
 
+#include "crypto_stream_chacha20.h"
 #include "randombytes.h"
-#include "randombytes_sysrandom.h"
-
-#ifdef __native_client__
-# include "randombytes_nativeclient.h"
+#ifdef RANDOMBYTES_DEFAULT_IMPLEMENTATION
+# include "randombytes_default.h"
+#else
+# ifdef __native_client__
+#  include "randombytes_nativeclient.h"
+# else
+#  include "randombytes_sysrandom.h"
+# endif
 #endif
+#include "private/common.h"
 
 /* C++Builder defines a "random" macro */
 #undef random
 
 static const randombytes_implementation *implementation;
 
-#ifdef __EMSCRIPTEN__
-# define RANDOMBYTES_DEFAULT_IMPLEMENTATION NULL
-#else
-# ifdef __native_client__
-#  define RANDOMBYTES_DEFAULT_IMPLEMENTATION &randombytes_nativeclient_implementation;
+#ifndef RANDOMBYTES_DEFAULT_IMPLEMENTATION
+# ifdef __EMSCRIPTEN__
+#  define RANDOMBYTES_DEFAULT_IMPLEMENTATION NULL
 # else
-#  define RANDOMBYTES_DEFAULT_IMPLEMENTATION &randombytes_sysrandom_implementation;
+#  ifdef __native_client__
+#   define RANDOMBYTES_DEFAULT_IMPLEMENTATION &randombytes_nativeclient_implementation;
+#  else
+#   define RANDOMBYTES_DEFAULT_IMPLEMENTATION &randombytes_sysrandom_implementation;
+#  endif
 # endif
 #endif
 
@@ -112,10 +120,6 @@ randombytes_stir(void)
 #endif
 }
 
-/*
- * randombytes_uniform() derives from OpenBSD's arc4random_uniform()
- * Copyright (c) 2008, Damien Miller <djm@openbsd.org>
- */
 uint32_t
 randombytes_uniform(const uint32_t upper_bound)
 {
@@ -131,7 +135,7 @@ randombytes_uniform(const uint32_t upper
     if (upper_bound < 2) {
         return 0;
     }
-    min = (uint32_t) (-upper_bound % upper_bound);
+    min = (1U + ~upper_bound) % upper_bound;
     do {
         r = randombytes_random();
     } while (r < min);
@@ -148,7 +152,7 @@ randombytes_buf(void * const buf, const
         implementation->buf(buf, size);
     }
 #else
-    unsigned char *p = buf;
+    unsigned char *p = (unsigned char *) buf;
     size_t         i;
 
     for (i = (size_t) 0U; i < size; i++) {
@@ -157,6 +161,30 @@ randombytes_buf(void * const buf, const
 #endif
 }
 
+void
+randombytes_buf_deterministic(void * const buf, const size_t size,
+                              const unsigned char seed[randombytes_SEEDBYTES])
+{
+    static const unsigned char nonce[crypto_stream_chacha20_ietf_NONCEBYTES] = {
+        'L', 'i', 'b', 's', 'o', 'd', 'i', 'u', 'm', 'D', 'R', 'G'
+    };
+
+    COMPILER_ASSERT(randombytes_SEEDBYTES == crypto_stream_chacha20_ietf_KEYBYTES);
+#if SIZE_MAX > 0x4000000000ULL
+    if (size > 0x4000000000ULL) {
+        abort();
+    }
+#endif
+    crypto_stream_chacha20_ietf((unsigned char *) buf, (unsigned long long) size,
+                                nonce, seed);
+}
+
+size_t
+randombytes_seedbytes(void)
+{
+    return randombytes_SEEDBYTES;
+}
+
 int
 randombytes_close(void)
 {
diff -urpN libsodium-1.0.11/src/libsodium/randombytes/salsa20/randombytes_salsa20_random.c libsodium-1.0.12/src/libsodium/randombytes/salsa20/randombytes_salsa20_random.c
--- libsodium-1.0.11/src/libsodium/randombytes/salsa20/randombytes_salsa20_random.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/randombytes/salsa20/randombytes_salsa20_random.c	2017-03-12 18:02:25.000000000 +0100
@@ -1,33 +1,37 @@
 
-#include <stdlib.h>
-#include <sys/types.h>
-#ifndef _WIN32
-# include <sys/stat.h>
-# include <sys/time.h>
-#endif
-#ifdef __linux__
-# include <sys/syscall.h>
-# include <poll.h>
-#endif
-
 #include <assert.h>
 #include <errno.h>
 #include <fcntl.h>
 #include <limits.h>
 #include <stdint.h>
 #include <stdlib.h>
+#include <stdlib.h>
 #include <string.h>
 #if !defined(_MSC_VER) && !defined(__BORLANDC__)
 # include <unistd.h>
 #endif
 
+#include <sys/types.h>
+#ifndef _WIN32
+# include <sys/stat.h>
+# include <sys/time.h>
+#endif
+#ifdef __linux__
+# ifdef __dietlibc__
+#  define _LINUX_SOURCE
+# else
+#  include <sys/syscall.h>
+# endif
+# include <poll.h>
+#endif
+
 #include "crypto_core_salsa20.h"
 #include "crypto_generichash.h"
 #include "crypto_stream_salsa20.h"
 #include "randombytes.h"
 #include "randombytes_salsa20_random.h"
 #include "utils.h"
-#include "private/mutex.h"
+#include "private/common.h"
 
 #ifdef _WIN32
 # include <windows.h>
@@ -46,7 +50,6 @@ BOOLEAN NTAPI RtlGenRandom(PVOID RandomB
 
 #define SALSA20_RANDOM_BLOCK_SIZE crypto_core_salsa20_OUTPUTBYTES
 #define HASH_BLOCK_SIZE 128U
-#define COMPILER_ASSERT(X) (void) sizeof(char[(X) ? 1 : -1])
 
 #if defined(__OpenBSD__) || defined(__CloudABI__)
 # define HAVE_SAFE_ARC4RANDOM 1
@@ -130,7 +133,7 @@ safe_read(const int fd, void * const buf
 #endif
 
 #ifndef _WIN32
-# if defined(__linux__) && !defined(USE_BLOCKING_RANDOM)
+# if defined(__linux__) && !defined(USE_BLOCKING_RANDOM) && !defined(NO_BLOCKING_RANDOM_POLL)
 static int
 randombytes_block_on_dev_random(void)
 {
@@ -172,7 +175,7 @@ randombytes_salsa20_random_random_dev_op
     const char **     device = devices;
     int               fd;
 
-# if defined(__linux__) && !defined(USE_BLOCKING_RANDOM)
+# if defined(__linux__) && !defined(USE_BLOCKING_RANDOM) && !defined(NO_BLOCKING_RANDOM_POLL)
     if (randombytes_block_on_dev_random() != 0) {
         return -1;
     }
@@ -207,7 +210,7 @@ randombytes_salsa20_random_random_dev_op
 }
 # endif
 
-# if defined(SYS_getrandom) && defined(__NR_getrandom)
+# if defined(__dietlibc__) || (defined(SYS_getrandom) && defined(__NR_getrandom))
 static int
 _randombytes_linux_getrandom(void * const buf, const size_t size)
 {
@@ -215,7 +218,11 @@ _randombytes_linux_getrandom(void * cons
 
     assert(size <= 256U);
     do {
+#  ifdef __dietlibc__
+        readnb = getrandom(buf, size, 0);
+#  else
         readnb = syscall(SYS_getrandom, buf, (int) size, 0);
+#  endif
     } while (readnb < 0 && (errno == EINTR || errno == EAGAIN));
 
     return (readnb == (int) size) - 1;
@@ -298,7 +305,7 @@ randombytes_salsa20_random_rekey(const u
 }
 
 static void
-randombytes_salsa20_random_stir_unlocked(void)
+randombytes_salsa20_random_stir(void)
 {
     /* constant to personalize the hash function */
     const unsigned char hsigma[crypto_generichash_KEYBYTES] = {
@@ -357,29 +364,17 @@ randombytes_salsa20_random_stir_unlocked
 }
 
 static void
-randombytes_salsa20_random_stir(void)
-{
-    if (sodium_crit_enter() != 0) {
-        abort();
-    }
-    randombytes_salsa20_random_stir_unlocked();
-    if (sodium_crit_leave() != 0) {
-        abort();
-    }
-}
-
-static void
 randombytes_salsa20_random_stir_if_needed(void)
 {
 #ifdef HAVE_GETPID
     if (stream.initialized == 0) {
-        randombytes_salsa20_random_stir_unlocked();
+        randombytes_salsa20_random_stir();
     } else if (stream.pid != getpid()) {
         abort();
     }
 #else
     if (stream.initialized == 0) {
-        randombytes_salsa20_random_stir_unlocked();
+        randombytes_salsa20_random_stir();
     }
 #endif
 }
@@ -389,9 +384,6 @@ randombytes_salsa20_random_close(void)
 {
     int ret = -1;
 
-    if (sodium_crit_enter() != 0) {
-        abort();
-    }
 #ifndef _WIN32
     if (stream.random_data_source_fd != -1 &&
         close(stream.random_data_source_fd) == 0) {
@@ -419,9 +411,6 @@ randombytes_salsa20_random_close(void)
         ret = 0;
     }
 #endif
-    if (sodium_crit_leave() != 0) {
-        abort();
-    }
     return ret;
 }
 
@@ -431,14 +420,13 @@ randombytes_salsa20_random_buf(void * co
     size_t i;
     int    ret;
 
-    if (sodium_crit_enter() != 0) {
-        abort();
-    }
     randombytes_salsa20_random_stir_if_needed();
     COMPILER_ASSERT(sizeof stream.nonce == crypto_stream_salsa20_NONCEBYTES);
-#ifdef ULONG_LONG_MAX
+#if defined(ULONG_LONG_MAX) && defined(SIZE_MAX)
+# if SIZE_MAX > ULONG_LONG_MAX
     /* coverity[result_independent_of_operands] */
     assert(size <= ULONG_LONG_MAX);
+# endif
 #endif
     ret = crypto_stream_salsa20((unsigned char *) buf, (unsigned long long) size,
                                 (unsigned char *) &stream.nonce, stream.key);
@@ -449,9 +437,6 @@ randombytes_salsa20_random_buf(void * co
     stream.nonce++;
     crypto_stream_salsa20_xor(stream.key, stream.key, sizeof stream.key,
                               (unsigned char *) &stream.nonce, stream.key);
-    if (sodium_crit_leave() != 0) {
-        abort();
-    }
 }
 
 static uint32_t
@@ -460,9 +445,6 @@ randombytes_salsa20_random(void)
     uint32_t val;
     int      ret;
 
-    if (sodium_crit_enter() != 0) {
-        abort();
-    }
     COMPILER_ASSERT(sizeof stream.rnd32 >= (sizeof stream.key) + (sizeof val));
     COMPILER_ASSERT(((sizeof stream.rnd32) - (sizeof stream.key))
                     % sizeof val == (size_t) 0U);
@@ -481,9 +463,7 @@ randombytes_salsa20_random(void)
     stream.rnd32_outleft -= sizeof val;
     memcpy(&val, &stream.rnd32[stream.rnd32_outleft], sizeof val);
     memset(&stream.rnd32[stream.rnd32_outleft], 0, sizeof val);
-    if (sodium_crit_leave() != 0) {
-        abort();
-    }
+
     return val;
 }
 
diff -urpN libsodium-1.0.11/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c libsodium-1.0.12/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c
--- libsodium-1.0.11/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/randombytes/sysrandom/randombytes_sysrandom.c	2017-03-12 18:02:14.000000000 +0100
@@ -1,15 +1,4 @@
 
-#include <stdlib.h>
-#include <sys/types.h>
-#ifndef _WIN32
-# include <sys/stat.h>
-# include <sys/time.h>
-#endif
-#ifdef __linux__
-# include <sys/syscall.h>
-# include <poll.h>
-#endif
-
 #include <assert.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -20,6 +9,21 @@
 # include <unistd.h>
 #endif
 
+#include <stdlib.h>
+#include <sys/types.h>
+#ifndef _WIN32
+# include <sys/stat.h>
+# include <sys/time.h>
+#endif
+#ifdef __linux__
+# ifdef __dietlibc__
+#  define _LINUX_SOURCE
+# else
+#  include <sys/syscall.h>
+# endif
+# include <poll.h>
+#endif
+
 #include "randombytes.h"
 #include "randombytes_sysrandom.h"
 #include "utils.h"
@@ -114,7 +118,7 @@ safe_read(const int fd, void * const buf
 #endif
 
 #ifndef _WIN32
-# if defined(__linux__) && !defined(USE_BLOCKING_RANDOM)
+# if defined(__linux__) && !defined(USE_BLOCKING_RANDOM) && !defined(NO_BLOCKING_RANDOM_POLL)
 static int
 randombytes_block_on_dev_random(void)
 {
@@ -155,7 +159,7 @@ randombytes_sysrandom_random_dev_open(vo
     const char **      device = devices;
     int                fd;
 
-# if defined(__linux__) && !defined(USE_BLOCKING_RANDOM)
+# if defined(__linux__) && !defined(USE_BLOCKING_RANDOM) && !defined(NO_BLOCKING_RANDOM_POLL)
     if (randombytes_block_on_dev_random() != 0) {
         return -1;
     }
@@ -189,7 +193,7 @@ randombytes_sysrandom_random_dev_open(vo
 /* LCOV_EXCL_STOP */
 }
 
-# if defined(SYS_getrandom) && defined(__NR_getrandom)
+# if defined(__dietlibc__) || (defined(SYS_getrandom) && defined(__NR_getrandom))
 static int
 _randombytes_linux_getrandom(void * const buf, const size_t size)
 {
@@ -197,7 +201,11 @@ _randombytes_linux_getrandom(void * cons
 
     assert(size <= 256U);
     do {
+#  ifdef __dietlibc__
+        readnb = getrandom(buf, size, 0);
+#  else
         readnb = syscall(SYS_getrandom, buf, (int) size, 0);
+#  endif
     } while (readnb < 0 && (errno == EINTR || errno == EAGAIN));
 
     return (readnb == (int) size) - 1;
@@ -305,9 +313,11 @@ static void
 randombytes_sysrandom_buf(void * const buf, const size_t size)
 {
     randombytes_sysrandom_stir_if_needed();
-#ifdef ULONG_LONG_MAX
+#if defined(ULONG_LONG_MAX) && defined(SIZE_MAX)
+# if SIZE_MAX > ULONG_LONG_MAX
     /* coverity[result_independent_of_operands] */
     assert(size <= ULONG_LONG_MAX);
+# endif
 #endif
 #ifndef _WIN32
 # if defined(SYS_getrandom) && defined(__NR_getrandom)
diff -urpN libsodium-1.0.11/src/libsodium/sodium/core.c libsodium-1.0.12/src/libsodium/sodium/core.c
--- libsodium-1.0.11/src/libsodium/sodium/core.c	2016-07-31 16:33:48.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/sodium/core.c	2017-03-09 15:55:47.000000000 +0100
@@ -1,10 +1,10 @@
 
 #include <string.h>
 #include <time.h>
-#ifdef HAVE_PTHREAD
-# include <pthread.h>
-#elif defined(_WIN32)
+#ifdef _WIN32
 # include <windows.h>
+#elif defined(HAVE_PTHREAD)
+# include <pthread.h>
 #endif
 
 #include "core.h"
@@ -13,6 +13,7 @@
 #include "crypto_pwhash_argon2i.h"
 #include "crypto_scalarmult.h"
 #include "crypto_stream_chacha20.h"
+#include "crypto_stream_salsa20.h"
 #include "randombytes.h"
 #include "runtime.h"
 #include "utils.h"
@@ -55,6 +56,7 @@ sodium_init(void)
     _crypto_onetimeauth_poly1305_pick_best_implementation();
     _crypto_scalarmult_curve25519_pick_best_implementation();
     _crypto_stream_chacha20_pick_best_implementation();
+    _crypto_stream_salsa20_pick_best_implementation();
     initialized = 1;
     if (sodium_crit_leave() != 0) {
         return -1;
@@ -62,23 +64,7 @@ sodium_init(void)
     return 0;
 }
 
-#if defined(HAVE_PTHREAD) && !defined(__EMSCRIPTEN__)
-
-static pthread_mutex_t _sodium_lock = PTHREAD_MUTEX_INITIALIZER;
-
-int
-sodium_crit_enter(void)
-{
-    return pthread_mutex_lock(&_sodium_lock);
-}
-
-int
-sodium_crit_leave(void)
-{
-    return pthread_mutex_unlock(&_sodium_lock);
-}
-
-#elif defined(_WIN32)
+#ifdef _WIN32
 
 static CRITICAL_SECTION _sodium_lock;
 static volatile LONG    _sodium_lock_initialized;
@@ -123,7 +109,23 @@ sodium_crit_leave(void)
     return 0;
 }
 
-#elif defined(__GNUC__) && !defined(__EMSCRIPTEN__) && !defined(__native_client__)
+#elif defined(HAVE_PTHREAD) && !defined(__EMSCRIPTEN__)
+
+static pthread_mutex_t _sodium_lock = PTHREAD_MUTEX_INITIALIZER;
+
+int
+sodium_crit_enter(void)
+{
+    return pthread_mutex_lock(&_sodium_lock);
+}
+
+int
+sodium_crit_leave(void)
+{
+    return pthread_mutex_unlock(&_sodium_lock);
+}
+
+#elif defined(HAVE_ATOMIC_OPS) && !defined(__EMSCRIPTEN__) && !defined(__native_client__)
 
 static volatile int _sodium_lock;
 
diff -urpN libsodium-1.0.11/src/libsodium/sodium/runtime.c libsodium-1.0.12/src/libsodium/sodium/runtime.c
--- libsodium-1.0.11/src/libsodium/sodium/runtime.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/sodium/runtime.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,10 +1,10 @@
-
 #include <stddef.h>
 #include <stdint.h>
 #ifdef HAVE_ANDROID_GETCPUFEATURES
 # include <cpu-features.h>
 #endif
 
+#include "private/common.h"
 #include "runtime.h"
 
 typedef struct CPUFeatures_ {
@@ -35,8 +35,8 @@ static CPUFeatures _cpu_features;
 
 #define CPUID_EDX_SSE2    0x04000000
 
-#define XCR0_SSE          0x00000002
-#define XCR0_AVX          0x00000004
+#define XCR0_SSE 0x00000002
+#define XCR0_AVX 0x00000004
 
 static int
 _sodium_runtime_arm_cpu_features(CPUFeatures * const cpu_features)
@@ -51,7 +51,8 @@ _sodium_runtime_arm_cpu_features(CPUFeat
 #  else
     cpu_features->has_neon = 0;
 #  endif
-# elif defined(HAVE_ANDROID_GETCPUFEATURES) && defined(ANDROID_CPU_ARM_FEATURE_NEON)
+# elif defined(HAVE_ANDROID_GETCPUFEATURES) && \
+    defined(ANDROID_CPU_ARM_FEATURE_NEON)
     cpu_features->has_neon =
         (android_getCpuFeatures() & ANDROID_CPU_ARM_FEATURE_NEON) != 0x0;
 # else
@@ -70,32 +71,33 @@ _cpuid(unsigned int cpu_info[4U], const
 #elif defined(HAVE_CPUID)
     cpu_info[0] = cpu_info[1] = cpu_info[2] = cpu_info[3] = 0;
 # ifdef __i386__
-    __asm__ __volatile__ ("pushfl; pushfl; "
-                          "popl %0; "
-                          "movl %0, %1; xorl %2, %0; "
-                          "pushl %0; "
-                          "popfl; pushfl; popl %0; popfl" :
-                          "=&r" (cpu_info[0]), "=&r" (cpu_info[1]) :
-                          "i" (0x200000));
+    __asm__ __volatile__(
+        "pushfl; pushfl; "
+        "popl %0; "
+        "movl %0, %1; xorl %2, %0; "
+        "pushl %0; "
+        "popfl; pushfl; popl %0; popfl"
+        : "=&r"(cpu_info[0]), "=&r"(cpu_info[1])
+        : "i"(0x200000));
     if (((cpu_info[0] ^ cpu_info[1]) & 0x200000) == 0x0) {
         return; /* LCOV_EXCL_LINE */
     }
 # endif
 # ifdef __i386__
-    __asm__ __volatile__ ("xchgl %%ebx, %k1; cpuid; xchgl %%ebx, %k1" :
-                          "=a" (cpu_info[0]), "=&r" (cpu_info[1]),
-                          "=c" (cpu_info[2]), "=d" (cpu_info[3]) :
-                          "0" (cpu_info_type), "2" (0U));
+    __asm__ __volatile__("xchgl %%ebx, %k1; cpuid; xchgl %%ebx, %k1"
+                         : "=a"(cpu_info[0]), "=&r"(cpu_info[1]),
+                           "=c"(cpu_info[2]), "=d"(cpu_info[3])
+                         : "0"(cpu_info_type), "2"(0U));
 # elif defined(__x86_64__)
-    __asm__ __volatile__ ("xchgq %%rbx, %q1; cpuid; xchgq %%rbx, %q1" :
-                          "=a" (cpu_info[0]), "=&r" (cpu_info[1]),
-                          "=c" (cpu_info[2]), "=d" (cpu_info[3]) :
-                          "0" (cpu_info_type), "2" (0U));
+    __asm__ __volatile__("xchgq %%rbx, %q1; cpuid; xchgq %%rbx, %q1"
+                         : "=a"(cpu_info[0]), "=&r"(cpu_info[1]),
+                           "=c"(cpu_info[2]), "=d"(cpu_info[3])
+                         : "0"(cpu_info_type), "2"(0U));
 # else
-    __asm__ __volatile__ ("cpuid" :
-                          "=a" (cpu_info[0]), "=b" (cpu_info[1]),
-                          "=c" (cpu_info[2]), "=d" (cpu_info[3]) :
-                          "0" (cpu_info_type), "2" (0U));
+    __asm__ __volatile__("cpuid"
+                         : "=a"(cpu_info[0]), "=b"(cpu_info[1]),
+                           "=c"(cpu_info[2]), "=d"(cpu_info[3])
+                         : "0"(cpu_info_type), "2"(0U));
 # endif
 #else
     (void) cpu_info_type;
@@ -114,49 +116,49 @@ _sodium_runtime_intel_cpu_features(CPUFe
         return -1; /* LCOV_EXCL_LINE */
     }
     _cpuid(cpu_info, 0x00000001);
-#if defined(HAVE_EMMINTRIN_H) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
+#ifdef HAVE_EMMINTRIN_H
     cpu_features->has_sse2 = ((cpu_info[3] & CPUID_EDX_SSE2) != 0x0);
 #else
-    cpu_features->has_sse2 = 0;
+    cpu_features->has_sse2   = 0;
 #endif
 
-#if defined(HAVE_PMMINTRIN_H) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
+#ifdef HAVE_PMMINTRIN_H
     cpu_features->has_sse3 = ((cpu_info[2] & CPUID_ECX_SSE3) != 0x0);
 #else
-    cpu_features->has_sse3 = 0;
+    cpu_features->has_sse3   = 0;
 #endif
 
-#if defined(HAVE_TMMINTRIN_H) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
+#ifdef HAVE_TMMINTRIN_H
     cpu_features->has_ssse3 = ((cpu_info[2] & CPUID_ECX_SSSE3) != 0x0);
 #else
-    cpu_features->has_ssse3 = 0;
+    cpu_features->has_ssse3  = 0;
 #endif
 
-#if defined(HAVE_SMMINTRIN_H) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
+#ifdef HAVE_SMMINTRIN_H
     cpu_features->has_sse41 = ((cpu_info[2] & CPUID_ECX_SSE41) != 0x0);
 #else
-    cpu_features->has_sse41 = 0;
+    cpu_features->has_sse41  = 0;
 #endif
 
     cpu_features->has_avx = 0;
-#if defined(HAVE_AVXINTRIN_H) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
-    if ((cpu_info[2] & (CPUID_ECX_AVX | CPUID_ECX_XSAVE | CPUID_ECX_OSXSAVE))
-        == (CPUID_ECX_AVX | CPUID_ECX_XSAVE | CPUID_ECX_OSXSAVE)) {
+#ifdef HAVE_AVXINTRIN_H
+    if ((cpu_info[2] & (CPUID_ECX_AVX | CPUID_ECX_XSAVE | CPUID_ECX_OSXSAVE)) ==
+        (CPUID_ECX_AVX | CPUID_ECX_XSAVE | CPUID_ECX_OSXSAVE)) {
         uint32_t xcr0 = 0U;
-# ifdef MSC_VER
+# if defined(HAVE__XGETBV) || \
+        (defined(_MSC_VER) && defined(_XCR_XFEATURE_ENABLED_MASK) && _MSC_FULL_VER >= 160040219)
+        xcr0 = (uint32_t) _xgetbv(0);
+# elif defined(_MSC_VER) && defined(_M_IX86)
         __asm {
             xor ecx, ecx
             _asm _emit 0x0f _asm _emit 0x01 _asm _emit 0xd0
             mov xcr0, eax
         }
 # elif defined(HAVE_AVX_ASM)
-        __asm__ __volatile__ (".byte 0x0f, 0x01, 0xd0" /* XGETBV */
-                              : "=a"(xcr0) : "c"((uint32_t) 0U) : "%edx");
+        __asm__ __volatile__(".byte 0x0f, 0x01, 0xd0" /* XGETBV */
+                             : "=a"(xcr0)
+                             : "c"((uint32_t) 0U)
+                             : "%edx");
 # endif
         if ((xcr0 & (XCR0_SSE | XCR0_AVX)) == (XCR0_SSE | XCR0_AVX)) {
             cpu_features->has_avx = 1;
@@ -165,8 +167,7 @@ _sodium_runtime_intel_cpu_features(CPUFe
 #endif
 
     cpu_features->has_avx2 = 0;
-#if defined(HAVE_AVX2INTRIN_H) || \
-    (defined(_MSC_VER) && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
+#ifdef HAVE_AVX2INTRIN_H
     if (cpu_features->has_avx) {
         unsigned int cpu_info7[4];
 
@@ -175,13 +176,12 @@ _sodium_runtime_intel_cpu_features(CPUFe
     }
 #endif
 
-#if defined(HAVE_WMMINTRIN_H) || \
-    (defined(_MSC_VER) && _MSC_VER >= 1600 && (defined(_M_X64) || defined(_M_AMD64) || defined(_M_IX86)))
+#ifdef HAVE_WMMINTRIN_H
     cpu_features->has_pclmul = ((cpu_info[2] & CPUID_ECX_PCLMUL) != 0x0);
-    cpu_features->has_aesni = ((cpu_info[2] & CPUID_ECX_AESNI) != 0x0);
+    cpu_features->has_aesni  = ((cpu_info[2] & CPUID_ECX_AESNI) != 0x0);
 #else
     cpu_features->has_pclmul = 0;
-    cpu_features->has_aesni = 0;
+    cpu_features->has_aesni  = 0;
 #endif
 
     return 0;
@@ -200,46 +200,55 @@ _sodium_runtime_get_cpu_features(void)
 }
 
 int
-sodium_runtime_has_neon(void) {
+sodium_runtime_has_neon(void)
+{
     return _cpu_features.has_neon;
 }
 
 int
-sodium_runtime_has_sse2(void) {
+sodium_runtime_has_sse2(void)
+{
     return _cpu_features.has_sse2;
 }
 
 int
-sodium_runtime_has_sse3(void) {
+sodium_runtime_has_sse3(void)
+{
     return _cpu_features.has_sse3;
 }
 
 int
-sodium_runtime_has_ssse3(void) {
+sodium_runtime_has_ssse3(void)
+{
     return _cpu_features.has_ssse3;
 }
 
 int
-sodium_runtime_has_sse41(void) {
+sodium_runtime_has_sse41(void)
+{
     return _cpu_features.has_sse41;
 }
 
 int
-sodium_runtime_has_avx(void) {
+sodium_runtime_has_avx(void)
+{
     return _cpu_features.has_avx;
 }
 
 int
-sodium_runtime_has_avx2(void) {
+sodium_runtime_has_avx2(void)
+{
     return _cpu_features.has_avx2;
 }
 
 int
-sodium_runtime_has_pclmul(void) {
+sodium_runtime_has_pclmul(void)
+{
     return _cpu_features.has_pclmul;
 }
 
 int
-sodium_runtime_has_aesni(void) {
+sodium_runtime_has_aesni(void)
+{
     return _cpu_features.has_aesni;
 }
diff -urpN libsodium-1.0.11/src/libsodium/sodium/utils.c libsodium-1.0.12/src/libsodium/sodium/utils.c
--- libsodium-1.0.11/src/libsodium/sodium/utils.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/src/libsodium/sodium/utils.c	2017-03-06 11:13:57.000000000 +0100
@@ -21,19 +21,20 @@
 # include <unistd.h>
 #endif
 
-#include "utils.h"
 #include "randombytes.h"
+#include "utils.h"
 
 #ifndef ENOSYS
 # define ENOSYS ENXIO
 #endif
 
-#if defined(_WIN32) && (!defined(WINAPI_FAMILY) || WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP)
+#if defined(_WIN32) && \
+    (!defined(WINAPI_FAMILY) || WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP)
 # define WINAPI_DESKTOP
 #endif
 
 #define CANARY_SIZE 16U
-#define GARBAGE_VALUE 0xd0
+#define GARBAGE_VALUE 0xdb
 
 #ifndef MAP_NOCORE
 # define MAP_NOCORE 0
@@ -41,13 +42,16 @@
 #if !defined(MAP_ANON) && defined(MAP_ANONYMOUS)
 # define MAP_ANON MAP_ANONYMOUS
 #endif
-#if defined(WINAPI_DESKTOP) || (defined(MAP_ANON) && defined(HAVE_MMAP)) || defined(HAVE_POSIX_MEMALIGN)
+#if defined(WINAPI_DESKTOP) || (defined(MAP_ANON) && defined(HAVE_MMAP)) || \
+    defined(HAVE_POSIX_MEMALIGN)
 # define HAVE_ALIGNED_MALLOC
 #endif
-#if defined(HAVE_MPROTECT) && !(defined(PROT_NONE) && defined(PROT_READ) && defined(PROT_WRITE))
+#if defined(HAVE_MPROTECT) && \
+    !(defined(PROT_NONE) && defined(PROT_READ) && defined(PROT_WRITE))
 # undef HAVE_MPROTECT
 #endif
-#if defined(HAVE_ALIGNED_MALLOC) && (defined(WINAPI_DESKTOP) || defined(HAVE_MPROTECT))
+#if defined(HAVE_ALIGNED_MALLOC) && \
+    (defined(WINAPI_DESKTOP) || defined(HAVE_MPROTECT))
 # define HAVE_PAGE_PROTECTION
 #endif
 #if !defined(MADV_DODUMP) && defined(MADV_CORE)
@@ -55,15 +59,16 @@
 # define MADV_DONTDUMP MADV_NOCORE
 #endif
 
-static size_t page_size;
+static size_t        page_size;
 static unsigned char canary[CANARY_SIZE];
 
 #ifdef HAVE_WEAK_SYMBOLS
-__attribute__ ((weak)) void
-_sodium_memzero_as_a_weak_symbol_to_prevent_lto(void * const pnt, const size_t len)
+__attribute__((weak)) void
+_sodium_memzero_as_a_weak_symbol_to_prevent_lto(void *const  pnt,
+                                                const size_t len)
 {
-    unsigned char *pnt_ = (unsigned char *) pnt;;
-    size_t         i = (size_t) 0U;
+    unsigned char *pnt_ = (unsigned char *) pnt;
+    size_t         i    = (size_t) 0U;
 
     while (i < len) {
         pnt_[i++] = 0U;
@@ -72,7 +77,7 @@ _sodium_memzero_as_a_weak_symbol_to_prev
 #endif
 
 void
-sodium_memzero(void * const pnt, const size_t len)
+sodium_memzero(void *const pnt, const size_t len)
 {
 #ifdef _WIN32
     SecureZeroMemory(pnt, len);
@@ -86,7 +91,7 @@ sodium_memzero(void * const pnt, const s
     _sodium_memzero_as_a_weak_symbol_to_prevent_lto(pnt, len);
 #else
     volatile unsigned char *volatile pnt_ =
-        (volatile unsigned char * volatile) pnt;
+        (volatile unsigned char *volatile) pnt;
     size_t i = (size_t) 0U;
 
     while (i < len) {
@@ -96,10 +101,10 @@ sodium_memzero(void * const pnt, const s
 }
 
 #ifdef HAVE_WEAK_SYMBOLS
-__attribute__ ((weak)) void
+__attribute__((weak)) void
 _sodium_dummy_symbol_to_prevent_memcmp_lto(const unsigned char *b1,
                                            const unsigned char *b2,
-                                           const size_t len)
+                                           const size_t         len)
 {
     (void) b1;
     (void) b2;
@@ -108,19 +113,19 @@ _sodium_dummy_symbol_to_prevent_memcmp_l
 #endif
 
 int
-sodium_memcmp(const void * const b1_, const void * const b2_, size_t len)
+sodium_memcmp(const void *const b1_, const void *const b2_, size_t len)
 {
 #ifdef HAVE_WEAK_SYMBOLS
     const unsigned char *b1 = (const unsigned char *) b1_;
     const unsigned char *b2 = (const unsigned char *) b2_;
 #else
     const volatile unsigned char *volatile b1 =
-        (const volatile unsigned char * volatile) b1_;
+        (const volatile unsigned char *volatile) b1_;
     const volatile unsigned char *volatile b2 =
-        (const volatile unsigned char * volatile) b2_;
+        (const volatile unsigned char *volatile) b2_;
 #endif
-    size_t               i;
-    unsigned char        d = (unsigned char) 0U;
+    size_t        i;
+    unsigned char d = (unsigned char) 0U;
 
 #if HAVE_WEAK_SYMBOLS
     _sodium_dummy_symbol_to_prevent_memcmp_lto(b1, b2, len);
@@ -132,10 +137,10 @@ sodium_memcmp(const void * const b1_, co
 }
 
 #ifdef HAVE_WEAK_SYMBOLS
-__attribute__ ((weak)) void
+__attribute__((weak)) void
 _sodium_dummy_symbol_to_prevent_compare_lto(const unsigned char *b1,
                                             const unsigned char *b2,
-                                            const size_t len)
+                                            const size_t         len)
 {
     (void) b1;
     (void) b2;
@@ -150,10 +155,10 @@ sodium_compare(const unsigned char *b1_,
     const unsigned char *b1 = b1_;
     const unsigned char *b2 = b2_;
 #else
-    const volatile unsigned char * volatile b1 =
-        (const volatile unsigned char * volatile) b1_;
-    const volatile unsigned char * volatile b2 =
-        (const volatile unsigned char * volatile) b2_;
+    const volatile unsigned char *volatile b1 =
+        (const volatile unsigned char *volatile) b1_;
+    const volatile unsigned char *volatile b2 =
+        (const volatile unsigned char *volatile) b2_;
 #endif
     unsigned char gt = 0U;
     unsigned char eq = 1U;
@@ -190,28 +195,30 @@ sodium_increment(unsigned char *n, const
     uint_fast16_t c = 1U;
 
 #ifdef HAVE_AMD64_ASM
-    uint64_t      t64, t64_2;
-    uint32_t      t32;
+    uint64_t t64, t64_2;
+    uint32_t t32;
 
     if (nlen == 12U) {
-        __asm__ __volatile__("xorq %[t64], %[t64] \n"
-                             "xorl %[t32], %[t32] \n"
-                             "stc \n"
-                             "adcq %[t64], (%[out]) \n"
-                             "adcl %[t32], 8(%[out]) \n"
-                             : [t64] "=&r"(t64), [t32] "=&r" (t32)
-                             : [out] "D"(n)
-                             : "memory", "flags", "cc");
+        __asm__ __volatile__(
+            "xorq %[t64], %[t64] \n"
+            "xorl %[t32], %[t32] \n"
+            "stc \n"
+            "adcq %[t64], (%[out]) \n"
+            "adcl %[t32], 8(%[out]) \n"
+            : [t64] "=&r"(t64), [t32] "=&r"(t32)
+            : [out] "D"(n)
+            : "memory", "flags", "cc");
         return;
     } else if (nlen == 24U) {
-        __asm__ __volatile__("movq $1, %[t64] \n"
-                             "xorq %[t64_2], %[t64_2] \n"
-                             "addq %[t64], (%[out]) \n"
-                             "adcq %[t64_2], 8(%[out]) \n"
-                             "adcq %[t64_2], 16(%[out]) \n"
-                             : [t64] "=&r"(t64), [t64_2] "=&r" (t64_2)
-                             : [out] "D"(n)
-                             : "memory", "flags", "cc");
+        __asm__ __volatile__(
+            "movq $1, %[t64] \n"
+            "xorq %[t64_2], %[t64_2] \n"
+            "addq %[t64], (%[out]) \n"
+            "adcq %[t64_2], 8(%[out]) \n"
+            "adcq %[t64_2], 16(%[out]) \n"
+            : [t64] "=&r"(t64), [t64_2] "=&r"(t64_2)
+            : [out] "D"(n)
+            : "memory", "flags", "cc");
         return;
     } else if (nlen == 8U) {
         __asm__ __volatile__("incq (%[out]) \n"
@@ -235,35 +242,38 @@ sodium_add(unsigned char *a, const unsig
     uint_fast16_t c = 0U;
 
 #ifdef HAVE_AMD64_ASM
-    uint64_t      t64, t64_2, t64_3;
-    uint32_t      t32;
+    uint64_t t64, t64_2, t64_3;
+    uint32_t t32;
 
     if (len == 12U) {
-        __asm__ __volatile__("movq (%[in]), %[t64] \n"
-                             "movl 8(%[in]), %[t32] \n"
-                             "addq %[t64], (%[out]) \n"
-                             "adcl %[t32], 8(%[out]) \n"
-                             : [t64] "=&r"(t64), [t32] "=&r" (t32)
-                             : [in] "S"(b), [out] "D"(a)
-                             : "memory", "flags", "cc");
+        __asm__ __volatile__(
+            "movq (%[in]), %[t64] \n"
+            "movl 8(%[in]), %[t32] \n"
+            "addq %[t64], (%[out]) \n"
+            "adcl %[t32], 8(%[out]) \n"
+            : [t64] "=&r"(t64), [t32] "=&r"(t32)
+            : [in] "S"(b), [out] "D"(a)
+            : "memory", "flags", "cc");
         return;
     } else if (len == 24U) {
-        __asm__ __volatile__("movq (%[in]), %[t64] \n"
-                             "movq 8(%[in]), %[t64_2] \n"
-                             "movq 16(%[in]), %[t64_3] \n"
-                             "addq %[t64], (%[out]) \n"
-                             "adcq %[t64_2], 8(%[out]) \n"
-                             "adcq %[t64_3], 16(%[out]) \n"
-                             : [t64] "=&r"(t64), [t64_2] "=&r"(t64_2), [t64_3] "=&r"(t64_3)
-                             : [in] "S"(b), [out] "D"(a)
-                             : "memory", "flags", "cc");
+        __asm__ __volatile__(
+            "movq (%[in]), %[t64] \n"
+            "movq 8(%[in]), %[t64_2] \n"
+            "movq 16(%[in]), %[t64_3] \n"
+            "addq %[t64], (%[out]) \n"
+            "adcq %[t64_2], 8(%[out]) \n"
+            "adcq %[t64_3], 16(%[out]) \n"
+            : [t64] "=&r"(t64), [t64_2] "=&r"(t64_2), [t64_3] "=&r"(t64_3)
+            : [in] "S"(b), [out] "D"(a)
+            : "memory", "flags", "cc");
         return;
     } else if (len == 8U) {
-        __asm__ __volatile__("movq (%[in]), %[t64] \n"
-                             "addq %[t64], (%[out]) \n"
-                             : [t64] "=&r"(t64)
-                             : [in] "S"(b), [out] "D"(a)
-                             : "memory", "flags", "cc");
+        __asm__ __volatile__(
+            "movq (%[in]), %[t64] \n"
+            "addq %[t64], (%[out]) \n"
+            : [t64] "=&r"(t64)
+            : [in] "S"(b), [out] "D"(a)
+            : "memory", "flags", "cc");
         return;
     }
 #endif
@@ -276,8 +286,8 @@ sodium_add(unsigned char *a, const unsig
 
 /* Derived from original code by CodesInChaos */
 char *
-sodium_bin2hex(char * const hex, const size_t hex_maxlen,
-               const unsigned char * const bin, const size_t bin_len)
+sodium_bin2hex(char *const hex, const size_t hex_maxlen,
+               const unsigned char *const bin, const size_t bin_len)
 {
     size_t       i = (size_t) 0U;
     unsigned int x;
@@ -303,14 +313,14 @@ sodium_bin2hex(char * const hex, const s
 }
 
 int
-sodium_hex2bin(unsigned char * const bin, const size_t bin_maxlen,
-               const char * const hex, const size_t hex_len,
-               const char * const ignore, size_t * const bin_len,
-               const char ** const hex_end)
+sodium_hex2bin(unsigned char *const bin, const size_t bin_maxlen,
+               const char *const hex, const size_t hex_len,
+               const char *const ignore, size_t *const bin_len,
+               const char **const hex_end)
 {
     size_t        bin_pos = (size_t) 0U;
     size_t        hex_pos = (size_t) 0U;
-    int           ret = 0;
+    int           ret     = 0;
     unsigned char c;
     unsigned char c_acc = 0U;
     unsigned char c_alpha0, c_alpha;
@@ -319,10 +329,10 @@ sodium_hex2bin(unsigned char * const bin
     unsigned char state = 0U;
 
     while (hex_pos < hex_len) {
-        c = (unsigned char) hex[hex_pos];
-        c_num = c ^ 48U;
-        c_num0 = (c_num - 10U) >> 8;
-        c_alpha = (c & ~32U) - 55U;
+        c        = (unsigned char) hex[hex_pos];
+        c_num    = c ^ 48U;
+        c_num0   = (c_num - 10U) >> 8;
+        c_alpha  = (c & ~32U) - 55U;
         c_alpha0 = ((c_alpha - 10U) ^ (c_alpha - 16U)) >> 8;
         if ((c_num0 | c_alpha0) == 0U) {
             if (ignore != NULL && state == 0U && strchr(ignore, c) != NULL) {
@@ -333,7 +343,7 @@ sodium_hex2bin(unsigned char * const bin
         }
         c_val = (c_num0 & c_num) | (c_alpha0 & c_alpha);
         if (bin_pos >= bin_maxlen) {
-            ret = -1;
+            ret   = -1;
             errno = ERANGE;
             break;
         }
@@ -381,7 +391,7 @@ _sodium_alloc_init(void)
 }
 
 int
-sodium_mlock(void * const addr, const size_t len)
+sodium_mlock(void *const addr, const size_t len)
 {
 #if defined(MADV_DONTDUMP) && defined(HAVE_MADVISE)
     (void) madvise(addr, len, MADV_DONTDUMP);
@@ -397,7 +407,7 @@ sodium_mlock(void * const addr, const si
 }
 
 int
-sodium_munlock(void * const addr, const size_t len)
+sodium_munlock(void *const addr, const size_t len)
 {
     sodium_memzero(addr, len);
 #if defined(MADV_DODUMP) && defined(HAVE_MADVISE)
@@ -457,7 +467,7 @@ _mprotect_readwrite(void *ptr, size_t si
 
 #ifdef HAVE_ALIGNED_MALLOC
 
-__attribute__ ((noreturn)) static void
+__attribute__((noreturn)) static void
 _out_of_bounds(void)
 {
 # ifdef SIGSEGV
@@ -476,20 +486,21 @@ _page_round(const size_t size)
     return (size + page_mask) & ~page_mask;
 }
 
-static __attribute__ ((malloc)) unsigned char *
+static __attribute__((malloc)) unsigned char *
 _alloc_aligned(const size_t size)
 {
     void *ptr;
 
 # if defined(MAP_ANON) && defined(HAVE_MMAP)
     if ((ptr = mmap(NULL, size, PROT_READ | PROT_WRITE,
-                    MAP_ANON | MAP_PRIVATE | MAP_NOCORE, -1, 0)) == MAP_FAILED) {
+                    MAP_ANON | MAP_PRIVATE | MAP_NOCORE, -1, 0)) ==
+        MAP_FAILED) {
         ptr = NULL; /* LCOV_EXCL_LINE */
-    } /* LCOV_EXCL_LINE */
+    }               /* LCOV_EXCL_LINE */
 # elif defined(HAVE_POSIX_MEMALIGN)
     if (posix_memalign(&ptr, page_size, size) != 0) {
         ptr = NULL; /* LCOV_EXCL_LINE */
-    } /* LCOV_EXCL_LINE */
+    }               /* LCOV_EXCL_LINE */
 # elif defined(WINAPI_DESKTOP)
     ptr = VirtualAlloc(NULL, size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
 # else
@@ -499,7 +510,7 @@ _alloc_aligned(const size_t size)
 }
 
 static void
-_free_aligned(unsigned char * const ptr, const size_t size)
+_free_aligned(unsigned char *const ptr, const size_t size)
 {
 # if defined(MAP_ANON) && defined(HAVE_MMAP)
     (void) munmap(ptr, size);
@@ -509,11 +520,11 @@ _free_aligned(unsigned char * const ptr,
     VirtualFree(ptr, 0U, MEM_RELEASE);
 # else
 #  error Bug
-# endif
+#endif
 }
 
 static unsigned char *
-_unprotected_ptr_from_user_ptr(void * const ptr)
+_unprotected_ptr_from_user_ptr(void *const ptr)
 {
     uintptr_t      unprotected_ptr_u;
     unsigned char *canary_ptr;
@@ -531,13 +542,13 @@ _unprotected_ptr_from_user_ptr(void * co
 #endif /* HAVE_ALIGNED_MALLOC */
 
 #ifndef HAVE_ALIGNED_MALLOC
-static __attribute__ ((malloc)) void *
+static __attribute__((malloc)) void *
 _sodium_malloc(const size_t size)
 {
     return malloc(size > (size_t) 0U ? size : (size_t) 1U);
 }
 #else
-static __attribute__ ((malloc)) void *
+static __attribute__((malloc)) void *
 _sodium_malloc(const size_t size)
 {
     void          *user_ptr;
@@ -557,7 +568,7 @@ _sodium_malloc(const size_t size)
     }
     size_with_canary = (sizeof canary) + size;
     unprotected_size = _page_round(size_with_canary);
-    total_size = page_size + page_size + unprotected_size + page_size;
+    total_size       = page_size + page_size + unprotected_size + page_size;
     if ((base_ptr = _alloc_aligned(total_size)) == NULL) {
         return NULL; /* LCOV_EXCL_LINE */
     }
@@ -568,8 +579,8 @@ _sodium_malloc(const size_t size)
 # endif
     _mprotect_noaccess(unprotected_ptr + unprotected_size, page_size);
     sodium_mlock(unprotected_ptr, unprotected_size);
-    canary_ptr = unprotected_ptr + _page_round(size_with_canary) -
-        size_with_canary;
+    canary_ptr =
+        unprotected_ptr + _page_round(size_with_canary) - size_with_canary;
     user_ptr = canary_ptr + sizeof canary;
     memcpy(canary_ptr, canary, sizeof canary);
     memcpy(base_ptr, &unprotected_size, sizeof unprotected_size);
@@ -580,7 +591,7 @@ _sodium_malloc(const size_t size)
 }
 #endif /* !HAVE_ALIGNED_MALLOC */
 
-__attribute__ ((malloc)) void *
+__attribute__((malloc)) void *
 sodium_malloc(const size_t size)
 {
     void *ptr;
@@ -593,7 +604,7 @@ sodium_malloc(const size_t size)
     return ptr;
 }
 
-__attribute__ ((malloc)) void *
+__attribute__((malloc)) void *
 sodium_allocarray(size_t count, size_t size)
 {
     size_t total_size;
@@ -626,9 +637,9 @@ sodium_free(void *ptr)
     if (ptr == NULL) {
         return;
     }
-    canary_ptr = ((unsigned char *) ptr) - sizeof canary;
+    canary_ptr      = ((unsigned char *) ptr) - sizeof canary;
     unprotected_ptr = _unprotected_ptr_from_user_ptr(ptr);
-    base_ptr = unprotected_ptr - page_size * 2U;
+    base_ptr        = unprotected_ptr - page_size * 2U;
     memcpy(&unprotected_size, base_ptr, sizeof unprotected_size);
     total_size = page_size + page_size + unprotected_size + page_size;
     _mprotect_readwrite(base_ptr, total_size);
@@ -636,8 +647,8 @@ sodium_free(void *ptr)
         _out_of_bounds();
     }
 # ifndef HAVE_PAGE_PROTECTION
-    if (sodium_memcmp(unprotected_ptr + unprotected_size,
-                      canary, sizeof canary) != 0) {
+    if (sodium_memcmp(unprotected_ptr + unprotected_size, canary,
+                      sizeof canary) != 0) {
         _out_of_bounds();
     }
 # endif
@@ -664,7 +675,7 @@ _sodium_mprotect(void *ptr, int (*cb)(vo
     size_t         unprotected_size;
 
     unprotected_ptr = _unprotected_ptr_from_user_ptr(ptr);
-    base_ptr = unprotected_ptr - page_size * 2U;
+    base_ptr        = unprotected_ptr - page_size * 2U;
     memcpy(&unprotected_size, base_ptr, sizeof unprotected_size);
 
     return cb(unprotected_ptr, unprotected_size);
diff -urpN libsodium-1.0.11/src/libsodium/sodium/version.c libsodium-1.0.12/src/libsodium/sodium/version.c
--- libsodium-1.0.11/src/libsodium/sodium/version.c	2016-02-27 13:22:09.000000000 +0100
+++ libsodium-1.0.12/src/libsodium/sodium/version.c	2017-03-06 23:32:40.000000000 +0100
@@ -18,3 +18,13 @@ sodium_library_version_minor(void)
 {
     return SODIUM_LIBRARY_VERSION_MINOR;
 }
+
+int
+sodium_library_minimal(void)
+{
+#ifdef SODIUM_LIBRARY_MINIMAL
+    return 1;
+#else
+    return 0;
+#endif
+}
diff -urpN libsodium-1.0.11/src/Makefile.in libsodium-1.0.12/src/Makefile.in
--- libsodium-1.0.11/src/Makefile.in	2016-07-31 16:34:39.000000000 +0200
+++ libsodium-1.0.12/src/Makefile.in	2017-03-12 20:17:07.000000000 +0100
@@ -274,6 +274,7 @@ SAFECODE_HOME = @SAFECODE_HOME@
 SED = @SED@
 SET_MAKE = @SET_MAKE@
 SHELL = @SHELL@
+SODIUM_LIBRARY_MINIMAL_DEF = @SODIUM_LIBRARY_MINIMAL_DEF@
 SODIUM_LIBRARY_VERSION = @SODIUM_LIBRARY_VERSION@
 SODIUM_LIBRARY_VERSION_MAJOR = @SODIUM_LIBRARY_VERSION_MAJOR@
 SODIUM_LIBRARY_VERSION_MINOR = @SODIUM_LIBRARY_VERSION_MINOR@
diff -urpN libsodium-1.0.11/test/default/aead_xchacha20poly1305.c libsodium-1.0.12/test/default/aead_xchacha20poly1305.c
--- libsodium-1.0.11/test/default/aead_xchacha20poly1305.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/aead_xchacha20poly1305.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,188 @@
+
+#define TEST_NAME "aead_xchacha20poly1305"
+#include "cmptest.h"
+
+static int
+tv(void)
+{
+#undef  MLEN
+#define MLEN 114U
+#undef  ADLEN
+#define ADLEN 12U
+#undef  CLEN
+#define CLEN (MLEN + crypto_aead_xchacha20poly1305_ietf_ABYTES)
+    static const unsigned char firstkey[crypto_aead_xchacha20poly1305_ietf_KEYBYTES]
+        = {
+            0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
+            0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
+            0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
+            0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f
+        };
+#undef  MESSAGE
+#define MESSAGE "Ladies and Gentlemen of the class of '99: If I could offer you " \
+"only one tip for the future, sunscreen would be it."
+    unsigned char *m = (unsigned char *) sodium_malloc(MLEN);
+    static const unsigned char nonce[crypto_aead_xchacha20poly1305_ietf_NPUBBYTES]
+        = { 0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
+            0x48, 0x49, 0x4a, 0x4b };
+    static const unsigned char ad[ADLEN]
+        = { 0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7 };
+    unsigned char *c = (unsigned char *) sodium_malloc(CLEN);
+    unsigned char *detached_c = (unsigned char *) sodium_malloc(MLEN);
+    unsigned char *mac = (unsigned char *) sodium_malloc(crypto_aead_xchacha20poly1305_ietf_ABYTES);
+    unsigned char *m2 = (unsigned char *) sodium_malloc(MLEN);
+    unsigned long long found_clen;
+    unsigned long long found_maclen;
+    unsigned long long m2len;
+    size_t i;
+
+    assert(sizeof MESSAGE - 1U == MLEN);
+    memcpy(m, MESSAGE, MLEN);
+    crypto_aead_xchacha20poly1305_ietf_encrypt(c, &found_clen, m, MLEN,
+                                              ad, ADLEN,
+                                              NULL, nonce, firstkey);
+    if (found_clen != MLEN + crypto_aead_xchacha20poly1305_ietf_abytes()) {
+        printf("found_clen is not properly set\n");
+    }
+    for (i = 0U; i < CLEN; ++i) {
+        printf(",0x%02x", (unsigned int) c[i]);
+        if (i % 8 == 7) {
+            printf("\n");
+        }
+    }
+    printf("\n");
+    crypto_aead_xchacha20poly1305_ietf_encrypt_detached(detached_c,
+                                                       mac, &found_maclen,
+                                                       m, MLEN,
+                                                       ad, ADLEN,
+                                                       NULL, nonce, firstkey);
+    if (found_maclen != crypto_aead_xchacha20poly1305_ietf_abytes()) {
+        printf("found_maclen is not properly set\n");
+    }
+    if (memcmp(detached_c, c, MLEN) != 0) {
+        printf("detached ciphertext is bogus\n");
+    }
+
+    if (crypto_aead_xchacha20poly1305_ietf_decrypt(m2, &m2len, NULL, c, CLEN, ad,
+                                                  ADLEN, nonce, firstkey) != 0) {
+        printf("crypto_aead_xchacha20poly1305_ietf_decrypt() failed\n");
+    }
+    if (m2len != MLEN) {
+        printf("m2len is not properly set\n");
+    }
+    if (memcmp(m, m2, MLEN) != 0) {
+        printf("m != m2\n");
+    }
+    memset(m2, 0, m2len);
+    if (crypto_aead_xchacha20poly1305_ietf_decrypt_detached(m2, NULL,
+                                                           c, MLEN, mac,
+                                                           ad, ADLEN,
+                                                           nonce, firstkey) != 0) {
+        printf("crypto_aead_xchacha20poly1305_ietf_decrypt_detached() failed\n");
+    }
+    if (memcmp(m, m2, MLEN) != 0) {
+        printf("detached m != m2\n");
+    }
+
+    for (i = 0U; i < CLEN; i++) {
+        c[i] ^= (i + 1U);
+        if (crypto_aead_xchacha20poly1305_ietf_decrypt(m2, NULL, NULL, c, CLEN,
+                                                      ad, ADLEN, nonce, firstkey)
+            == 0 || memcmp(m, m2, MLEN) == 0) {
+            printf("message can be forged\n");
+        }
+        c[i] ^= (i + 1U);
+    }
+    crypto_aead_xchacha20poly1305_ietf_encrypt(c, &found_clen, m, MLEN,
+                                              NULL, 0U, NULL, nonce, firstkey);
+    if (found_clen != CLEN) {
+        printf("clen is not properly set (adlen=0)\n");
+    }
+    for (i = 0U; i < CLEN; ++i) {
+        printf(",0x%02x", (unsigned int) c[i]);
+        if (i % 8 == 7) {
+            printf("\n");
+        }
+    }
+    printf("\n");
+    if (crypto_aead_xchacha20poly1305_ietf_decrypt(m2, &m2len, NULL, c, CLEN,
+                                                  NULL, 0U, nonce, firstkey) != 0) {
+        printf("crypto_aead_xchacha20poly1305_ietf_decrypt() failed (adlen=0)\n");
+    }
+    if (m2len != MLEN) {
+        printf("m2len is not properly set (adlen=0)\n");
+    }
+    if (memcmp(m, m2, MLEN) != 0) {
+        printf("m != m2 (adlen=0)\n");
+    }
+    m2len = 1;
+    if (crypto_aead_xchacha20poly1305_ietf_decrypt(
+            m2, &m2len, NULL, NULL,
+            randombytes_uniform(crypto_aead_xchacha20poly1305_ietf_ABYTES),
+            NULL, 0U, nonce, firstkey) != -1) {
+        printf("crypto_aead_xchacha20poly1305_ietf_decrypt() worked with a short "
+               "ciphertext\n");
+    }
+    if (m2len != 0) {
+        printf("Message length should have been set to zero after a failure\n");
+    }
+    m2len = 1;
+    if (crypto_aead_xchacha20poly1305_ietf_decrypt(m2, &m2len, NULL, c, 0U, NULL, 0U,
+                                                  nonce, firstkey) != -1) {
+        printf("crypto_aead_xchacha20poly1305_ietf_decrypt() worked with an empty "
+               "ciphertext\n");
+    }
+    if (m2len != 0) {
+        printf("Message length should have been set to zero after a failure\n");
+    }
+
+    memcpy(c, m, MLEN);
+    crypto_aead_xchacha20poly1305_ietf_encrypt(c, &found_clen, c, MLEN,
+                                              NULL, 0U, NULL, nonce, firstkey);
+    if (found_clen != CLEN) {
+        printf("clen is not properly set (adlen=0)\n");
+    }
+    for (i = 0U; i < CLEN; ++i) {
+        printf(",0x%02x", (unsigned int) c[i]);
+        if (i % 8 == 7) {
+            printf("\n");
+        }
+    }
+    printf("\n");
+
+    if (crypto_aead_xchacha20poly1305_ietf_decrypt(c, &m2len, NULL, c, CLEN,
+                                                  NULL, 0U, nonce, firstkey) != 0) {
+        printf("crypto_aead_xchacha20poly1305_ietf_decrypt() failed (adlen=0)\n");
+    }
+    if (m2len != MLEN) {
+        printf("m2len is not properly set (adlen=0)\n");
+    }
+    if (memcmp(m, c, MLEN) != 0) {
+        printf("m != c (adlen=0)\n");
+    }
+
+    sodium_free(c);
+    sodium_free(detached_c);
+    sodium_free(mac);
+    sodium_free(m2);
+    sodium_free(m);
+
+    assert(crypto_aead_xchacha20poly1305_ietf_keybytes() == crypto_aead_xchacha20poly1305_ietf_KEYBYTES);
+    assert(crypto_aead_xchacha20poly1305_ietf_npubbytes() == crypto_aead_xchacha20poly1305_ietf_NPUBBYTES);
+    assert(crypto_aead_xchacha20poly1305_ietf_nsecbytes() == 0U);
+    assert(crypto_aead_xchacha20poly1305_ietf_nsecbytes() == crypto_aead_xchacha20poly1305_ietf_NSECBYTES);
+    assert(crypto_aead_xchacha20poly1305_IETF_KEYBYTES  == crypto_aead_xchacha20poly1305_ietf_KEYBYTES);
+    assert(crypto_aead_xchacha20poly1305_IETF_NSECBYTES == crypto_aead_xchacha20poly1305_ietf_NSECBYTES);
+    assert(crypto_aead_xchacha20poly1305_IETF_NPUBBYTES == crypto_aead_xchacha20poly1305_ietf_NPUBBYTES);
+    assert(crypto_aead_xchacha20poly1305_IETF_ABYTES    == crypto_aead_xchacha20poly1305_ietf_ABYTES);
+
+    return 0;
+}
+
+int
+main(void)
+{
+    tv();
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/test/default/aead_xchacha20poly1305.exp libsodium-1.0.12/test/default/aead_xchacha20poly1305.exp
--- libsodium-1.0.11/test/default/aead_xchacha20poly1305.exp	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/aead_xchacha20poly1305.exp	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,51 @@
+,0x45,0x3c,0x06,0x93,0xa7,0x40,0x7f,0x04
+,0xff,0x4c,0x56,0xae,0xdb,0x17,0xa3,0xc0
+,0xa1,0xaf,0xff,0x01,0x17,0x49,0x30,0xfc
+,0x22,0x28,0x7c,0x33,0xdb,0xcf,0x0a,0xc8
+,0xb8,0x9a,0xd9,0x29,0x53,0x0a,0x1b,0xb3
+,0xab,0x5e,0x69,0xf2,0x4c,0x7f,0x60,0x70
+,0xc8,0xf8,0x40,0xc9,0xab,0xb4,0xf6,0x9f
+,0xbf,0xc8,0xa7,0xff,0x51,0x26,0xfa,0xee
+,0xbb,0xb5,0x58,0x05,0xee,0x9c,0x1c,0xf2
+,0xce,0x5a,0x57,0x26,0x32,0x87,0xae,0xc5
+,0x78,0x0f,0x04,0xec,0x32,0x4c,0x35,0x14
+,0x12,0x2c,0xfc,0x32,0x31,0xfc,0x1a,0x8b
+,0x71,0x8a,0x62,0x86,0x37,0x30,0xa2,0x70
+,0x2b,0xb7,0x63,0x66,0x11,0x6b,0xed,0x09
+,0xe0,0xfd,0x5c,0x6d,0x84,0xb6,0xb0,0xc1
+,0xab,0xaf,0x24,0x9d,0x5d,0xd0,0xf7,0xf5
+,0xa7,0xea
+,0x45,0x3c,0x06,0x93,0xa7,0x40,0x7f,0x04
+,0xff,0x4c,0x56,0xae,0xdb,0x17,0xa3,0xc0
+,0xa1,0xaf,0xff,0x01,0x17,0x49,0x30,0xfc
+,0x22,0x28,0x7c,0x33,0xdb,0xcf,0x0a,0xc8
+,0xb8,0x9a,0xd9,0x29,0x53,0x0a,0x1b,0xb3
+,0xab,0x5e,0x69,0xf2,0x4c,0x7f,0x60,0x70
+,0xc8,0xf8,0x40,0xc9,0xab,0xb4,0xf6,0x9f
+,0xbf,0xc8,0xa7,0xff,0x51,0x26,0xfa,0xee
+,0xbb,0xb5,0x58,0x05,0xee,0x9c,0x1c,0xf2
+,0xce,0x5a,0x57,0x26,0x32,0x87,0xae,0xc5
+,0x78,0x0f,0x04,0xec,0x32,0x4c,0x35,0x14
+,0x12,0x2c,0xfc,0x32,0x31,0xfc,0x1a,0x8b
+,0x71,0x8a,0x62,0x86,0x37,0x30,0xa2,0x70
+,0x2b,0xb7,0x63,0x66,0x11,0x6b,0xed,0x09
+,0xe0,0xfd,0xd4,0xc8,0x60,0xb7,0x07,0x4b
+,0xe8,0x94,0xfa,0xc9,0x69,0x73,0x99,0xbe
+,0x5c,0xc1
+,0x45,0x3c,0x06,0x93,0xa7,0x40,0x7f,0x04
+,0xff,0x4c,0x56,0xae,0xdb,0x17,0xa3,0xc0
+,0xa1,0xaf,0xff,0x01,0x17,0x49,0x30,0xfc
+,0x22,0x28,0x7c,0x33,0xdb,0xcf,0x0a,0xc8
+,0xb8,0x9a,0xd9,0x29,0x53,0x0a,0x1b,0xb3
+,0xab,0x5e,0x69,0xf2,0x4c,0x7f,0x60,0x70
+,0xc8,0xf8,0x40,0xc9,0xab,0xb4,0xf6,0x9f
+,0xbf,0xc8,0xa7,0xff,0x51,0x26,0xfa,0xee
+,0xbb,0xb5,0x58,0x05,0xee,0x9c,0x1c,0xf2
+,0xce,0x5a,0x57,0x26,0x32,0x87,0xae,0xc5
+,0x78,0x0f,0x04,0xec,0x32,0x4c,0x35,0x14
+,0x12,0x2c,0xfc,0x32,0x31,0xfc,0x1a,0x8b
+,0x71,0x8a,0x62,0x86,0x37,0x30,0xa2,0x70
+,0x2b,0xb7,0x63,0x66,0x11,0x6b,0xed,0x09
+,0xe0,0xfd,0xd4,0xc8,0x60,0xb7,0x07,0x4b
+,0xe8,0x94,0xfa,0xc9,0x69,0x73,0x99,0xbe
+,0x5c,0xc1
diff -urpN libsodium-1.0.11/test/default/auth2.c libsodium-1.0.12/test/default/auth2.c
--- libsodium-1.0.11/test/default/auth2.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/auth2.c	2017-03-06 11:13:57.000000000 +0100
@@ -3,27 +3,30 @@
 #define TEST_NAME "auth2"
 #include "cmptest.h"
 
-static unsigned char key[32]
-    = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
-        0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
-        0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20 };
+static unsigned char key[32] = {
+    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
+    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
+    0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20
+};
 
-static unsigned char c[50]
-    = { 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
-        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
-        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
-        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
-        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd };
+static unsigned char c[50] = { 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd };
 
 static unsigned char a[32];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
     crypto_auth_hmacsha256(a, c, sizeof c, key);
     for (i = 0; i < 32; ++i) {
-        printf(",0x%02x", (unsigned int)a[i]);
+        printf(",0x%02x", (unsigned int) a[i]);
         if (i % 8 == 7)
             printf("\n");
     }
diff -urpN libsodium-1.0.11/test/default/auth3.c libsodium-1.0.12/test/default/auth3.c
--- libsodium-1.0.11/test/default/auth3.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/auth3.c	2017-03-06 11:13:57.000000000 +0100
@@ -3,24 +3,27 @@
 #define TEST_NAME "auth3"
 #include "cmptest.h"
 
-static unsigned char key[32]
-    = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
-        0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
-        0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20 };
+static unsigned char key[32] = {
+    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
+    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
+    0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20
+};
 
-static unsigned char c[50]
-    = { 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
-        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
-        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
-        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
-        0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd };
+static unsigned char c[50] = { 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd,
+                               0xcd, 0xcd };
 
-static unsigned char a[32]
-    = { 0x37, 0x2e, 0xfc, 0xf9, 0xb4, 0x0b, 0x35, 0xc2, 0x11, 0x5b, 0x13,
-        0x46, 0x90, 0x3d, 0x2e, 0xf4, 0x2f, 0xce, 0xd4, 0x6f, 0x08, 0x46,
-        0xe7, 0x25, 0x7b, 0xb1, 0x56, 0xd3, 0xd7, 0xb3, 0x0d, 0x3f };
+static unsigned char a[32] = { 0x37, 0x2e, 0xfc, 0xf9, 0xb4, 0x0b, 0x35, 0xc2,
+                               0x11, 0x5b, 0x13, 0x46, 0x90, 0x3d, 0x2e, 0xf4,
+                               0x2f, 0xce, 0xd4, 0x6f, 0x08, 0x46, 0xe7, 0x25,
+                               0x7b, 0xb1, 0x56, 0xd3, 0xd7, 0xb3, 0x0d, 0x3f };
 
-int main(void)
+int
+main(void)
 {
     printf("%d\n", crypto_auth_hmacsha256_verify(a, c, sizeof c, key));
 
diff -urpN libsodium-1.0.11/test/default/auth5.c libsodium-1.0.12/test/default/auth5.c
--- libsodium-1.0.11/test/default/auth5.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/auth5.c	2017-03-06 11:13:57.000000000 +0100
@@ -6,12 +6,13 @@ static unsigned char key[32];
 static unsigned char c[1000];
 static unsigned char a[32];
 
-int main(void)
+int
+main(void)
 {
     size_t clen;
 
     for (clen = 0; clen < 1000; ++clen) {
-        randombytes_buf(key, sizeof key);
+        crypto_auth_keygen(key);
         randombytes_buf(c, clen);
         crypto_auth(a, c, clen, key);
         if (crypto_auth_verify(a, c, clen, key) != 0) {
diff -urpN libsodium-1.0.11/test/default/auth6.c libsodium-1.0.12/test/default/auth6.c
--- libsodium-1.0.11/test/default/auth6.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/auth6.c	2017-03-06 11:13:57.000000000 +0100
@@ -4,17 +4,18 @@
 
 /* "Test Case 2" from RFC 4231 */
 static unsigned char key[32] = "Jefe";
-static unsigned char c[] = "what do ya want for nothing?";
+static unsigned char c[]     = "what do ya want for nothing?";
 
 static unsigned char a[64];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
     crypto_auth_hmacsha512(a, c, sizeof c - 1U, key);
     for (i = 0; i < 64; ++i) {
-        printf(",0x%02x", (unsigned int)a[i]);
+        printf(",0x%02x", (unsigned int) a[i]);
         if (i % 8 == 7)
             printf("\n");
     }
diff -urpN libsodium-1.0.11/test/default/auth7.c libsodium-1.0.12/test/default/auth7.c
--- libsodium-1.0.11/test/default/auth7.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/auth7.c	2017-03-06 11:13:57.000000000 +0100
@@ -6,12 +6,13 @@ static unsigned char key[32];
 static unsigned char c[600];
 static unsigned char a[64];
 
-int main(void)
+int
+main(void)
 {
     size_t clen;
 
     for (clen = 0; clen < sizeof c; ++clen) {
-        randombytes_buf(key, sizeof key);
+        crypto_auth_keygen(key);
         randombytes_buf(c, clen);
         crypto_auth_hmacsha512(a, c, clen, key);
         if (crypto_auth_hmacsha512_verify(a, c, clen, key) != 0) {
diff -urpN libsodium-1.0.11/test/default/auth.c libsodium-1.0.12/test/default/auth.c
--- libsodium-1.0.11/test/default/auth.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/auth.c	2017-03-06 11:13:57.000000000 +0100
@@ -4,24 +4,28 @@
 
 /* "Test Case 2" from RFC 4231 */
 static unsigned char key[32] = "Jefe";
-static unsigned char c[] = "what do ya want for nothing?";
+static unsigned char c[]     = "what do ya want for nothing?";
 
 /* Hacker manifesto */
-static unsigned char key2[] = "Another one got caught today, it's all over the papers. \"Teenager Arrested in Computer Crime Scandal\", \"Hacker Arrested after Bank Tampering\"... Damn kids. They're all alike.";
+static unsigned char key2[] =
+    "Another one got caught today, it's all over the papers. \"Teenager "
+    "Arrested in Computer Crime Scandal\", \"Hacker Arrested after Bank "
+    "Tampering\"... Damn kids. They're all alike.";
 
 static unsigned char a[crypto_auth_BYTES];
 static unsigned char a2[crypto_auth_hmacsha512_BYTES];
 
-int main(void)
+int
+main(void)
 {
     crypto_auth_hmacsha512_state st;
-    size_t i;
+    size_t                       i;
 
     assert(crypto_auth_hmacsha512_statebytes() ==
            sizeof(crypto_auth_hmacsha512_state));
     crypto_auth(a, c, sizeof c - 1U, key);
     for (i = 0; i < sizeof a; ++i) {
-        printf(",0x%02x", (unsigned int)a[i]);
+        printf(",0x%02x", (unsigned int) a[i]);
         if (i % 8 == 7)
             printf("\n");
     }
@@ -32,7 +36,7 @@ int main(void)
     crypto_auth_hmacsha512_update(&st, c, sizeof c - 2U);
     crypto_auth_hmacsha512_final(&st, a2);
     for (i = 0; i < sizeof a2; ++i) {
-        printf(",0x%02x", (unsigned int)a2[i]);
+        printf(",0x%02x", (unsigned int) a2[i]);
         if (i % 8 == 7)
             printf("\n");
     }
@@ -43,7 +47,7 @@ int main(void)
     crypto_auth_hmacsha512_update(&st, c, sizeof c - 2U);
     crypto_auth_hmacsha512_final(&st, a2);
     for (i = 0; i < sizeof a2; ++i) {
-        printf(",0x%02x", (unsigned int)a2[i]);
+        printf(",0x%02x", (unsigned int) a2[i]);
         if (i % 8 == 7)
             printf("\n");
     }
diff -urpN libsodium-1.0.11/test/default/box2.c libsodium-1.0.12/test/default/box2.c
--- libsodium-1.0.11/test/default/box2.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/box2.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,54 +2,59 @@
 #define TEST_NAME "box2"
 #include "cmptest.h"
 
-static unsigned char bobsk[32]
-    = { 0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f,
-        0x8b, 0x83, 0x80, 0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18,
-        0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27, 0xff, 0x88, 0xe0, 0xeb };
-
-static unsigned char alicepk[32]
-    = { 0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d,
-        0xdc, 0xb4, 0x3e, 0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38,
-        0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0x6a };
-
-static const unsigned char small_order_p[crypto_box_PUBLICKEYBYTES]
-    = { 0xe0, 0xeb, 0x7a, 0x7c, 0x3b, 0x41, 0xb8, 0xae, 0x16, 0x56, 0xe3,
-        0xfa, 0xf1, 0x9f, 0xc4, 0x6a, 0xda, 0x09, 0x8d, 0xeb, 0x9c, 0x32,
-        0xb1, 0xfd, 0x86, 0x62, 0x05, 0x16, 0x5f, 0x49, 0xb8, 0x00 };
-
-static unsigned char nonce[24]
-    = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73,
-        0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6,
-        0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
+static unsigned char bobsk[32] = { 0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a,
+                                   0x4b, 0x79, 0xe1, 0x7f, 0x8b, 0x83, 0x80,
+                                   0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26,
+                                   0x18, 0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27,
+                                   0xff, 0x88, 0xe0, 0xeb };
+
+static unsigned char alicepk[32] = { 0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7,
+                                     0x54, 0x74, 0x8b, 0x7d, 0xdc, 0xb4, 0x3e,
+                                     0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26,
+                                     0x38, 0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e,
+                                     0xaa, 0x9b, 0x4e, 0x6a };
+
+static const unsigned char small_order_p[crypto_box_PUBLICKEYBYTES] = {
+    0xe0, 0xeb, 0x7a, 0x7c, 0x3b, 0x41, 0xb8, 0xae, 0x16, 0x56, 0xe3,
+    0xfa, 0xf1, 0x9f, 0xc4, 0x6a, 0xda, 0x09, 0x8d, 0xeb, 0x9c, 0x32,
+    0xb1, 0xfd, 0x86, 0x62, 0x05, 0x16, 0x5f, 0x49, 0xb8, 0x00
+};
+
+static unsigned char nonce[24] = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6,
+                                   0x2b, 0x73, 0xcd, 0x62, 0xbd, 0xa8,
+                                   0x75, 0xfc, 0x73, 0xd6, 0x82, 0x19,
+                                   0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
 
 /* API requires first 16 bytes to be 0 */
-static unsigned char c[163]
-    = { 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0xf3, 0xff, 0xc7, 0x70, 0x3f, 0x94, 0x00, 0xe5,
-        0x2a, 0x7d, 0xfb, 0x4b, 0x3d, 0x33, 0x05, 0xd9, 0x8e, 0x99, 0x3b, 0x9f,
-        0x48, 0x68, 0x12, 0x73, 0xc2, 0x96, 0x50, 0xba, 0x32, 0xfc, 0x76, 0xce,
-        0x48, 0x33, 0x2e, 0xa7, 0x16, 0x4d, 0x96, 0xa4, 0x47, 0x6f, 0xb8, 0xc5,
-        0x31, 0xa1, 0x18, 0x6a, 0xc0, 0xdf, 0xc1, 0x7c, 0x98, 0xdc, 0xe8, 0x7b,
-        0x4d, 0xa7, 0xf0, 0x11, 0xec, 0x48, 0xc9, 0x72, 0x71, 0xd2, 0xc2, 0x0f,
-        0x9b, 0x92, 0x8f, 0xe2, 0x27, 0x0d, 0x6f, 0xb8, 0x63, 0xd5, 0x17, 0x38,
-        0xb4, 0x8e, 0xee, 0xe3, 0x14, 0xa7, 0xcc, 0x8a, 0xb9, 0x32, 0x16, 0x45,
-        0x48, 0xe5, 0x26, 0xae, 0x90, 0x22, 0x43, 0x68, 0x51, 0x7a, 0xcf, 0xea,
-        0xbd, 0x6b, 0xb3, 0x73, 0x2b, 0xc0, 0xe9, 0xda, 0x99, 0x83, 0x2b, 0x61,
-        0xca, 0x01, 0xb6, 0xde, 0x56, 0x24, 0x4a, 0x9e, 0x88, 0xd5, 0xf9, 0xb3,
-        0x79, 0x73, 0xf6, 0x22, 0xa4, 0x3d, 0x14, 0xa6, 0x59, 0x9b, 0x1f, 0x65,
-        0x4c, 0xb4, 0x5a, 0x74, 0xe3, 0x55, 0xa5 };
+static unsigned char c[163] = {
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0xf3, 0xff, 0xc7, 0x70, 0x3f, 0x94, 0x00, 0xe5,
+    0x2a, 0x7d, 0xfb, 0x4b, 0x3d, 0x33, 0x05, 0xd9, 0x8e, 0x99, 0x3b, 0x9f,
+    0x48, 0x68, 0x12, 0x73, 0xc2, 0x96, 0x50, 0xba, 0x32, 0xfc, 0x76, 0xce,
+    0x48, 0x33, 0x2e, 0xa7, 0x16, 0x4d, 0x96, 0xa4, 0x47, 0x6f, 0xb8, 0xc5,
+    0x31, 0xa1, 0x18, 0x6a, 0xc0, 0xdf, 0xc1, 0x7c, 0x98, 0xdc, 0xe8, 0x7b,
+    0x4d, 0xa7, 0xf0, 0x11, 0xec, 0x48, 0xc9, 0x72, 0x71, 0xd2, 0xc2, 0x0f,
+    0x9b, 0x92, 0x8f, 0xe2, 0x27, 0x0d, 0x6f, 0xb8, 0x63, 0xd5, 0x17, 0x38,
+    0xb4, 0x8e, 0xee, 0xe3, 0x14, 0xa7, 0xcc, 0x8a, 0xb9, 0x32, 0x16, 0x45,
+    0x48, 0xe5, 0x26, 0xae, 0x90, 0x22, 0x43, 0x68, 0x51, 0x7a, 0xcf, 0xea,
+    0xbd, 0x6b, 0xb3, 0x73, 0x2b, 0xc0, 0xe9, 0xda, 0x99, 0x83, 0x2b, 0x61,
+    0xca, 0x01, 0xb6, 0xde, 0x56, 0x24, 0x4a, 0x9e, 0x88, 0xd5, 0xf9, 0xb3,
+    0x79, 0x73, 0xf6, 0x22, 0xa4, 0x3d, 0x14, 0xa6, 0x59, 0x9b, 0x1f, 0x65,
+    0x4c, 0xb4, 0x5a, 0x74, 0xe3, 0x55, 0xa5
+};
 
 static unsigned char m[163];
 
-int main(void)
+int
+main(void)
 {
     unsigned char k[crypto_box_BEFORENMBYTES];
-    int i;
-    int ret;
+    int           i;
+    int           ret;
 
     if (crypto_box_open(m, c, 163, nonce, alicepk, bobsk) == 0) {
         for (i = 32; i < 163; ++i) {
-            printf(",0x%02x", (unsigned int)m[i]);
+            printf(",0x%02x", (unsigned int) m[i]);
             if (i % 8 == 7)
                 printf("\n");
         }
@@ -63,7 +68,7 @@ int main(void)
     assert(ret == 0);
     if (crypto_box_open_afternm(m, c, 163, nonce, k) == 0) {
         for (i = 32; i < 163; ++i) {
-            printf(",0x%02x", (unsigned int)m[i]);
+            printf(",0x%02x", (unsigned int) m[i]);
             if (i % 8 == 7)
                 printf("\n");
         }
diff -urpN libsodium-1.0.11/test/default/box7.c libsodium-1.0.12/test/default/box7.c
--- libsodium-1.0.11/test/default/box7.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/box7.c	2017-03-06 11:13:57.000000000 +0100
@@ -8,7 +8,8 @@ static unsigned char bobsk[crypto_box_SE
 static unsigned char bobpk[crypto_box_PUBLICKEYBYTES];
 static unsigned char n[crypto_box_NONCEBYTES];
 
-int main(void)
+int
+main(void)
 {
     unsigned char *m;
     unsigned char *c;
@@ -18,8 +19,8 @@ int main(void)
     size_t         i;
     int            ret;
 
-    m = (unsigned char *) sodium_malloc(mlen_max);
-    c = (unsigned char *) sodium_malloc(mlen_max);
+    m  = (unsigned char *) sodium_malloc(mlen_max);
+    c  = (unsigned char *) sodium_malloc(mlen_max);
     m2 = (unsigned char *) sodium_malloc(mlen_max);
     memset(m, 0, crypto_box_ZEROBYTES);
     crypto_box_keypair(alicepk, alicesk);
diff -urpN libsodium-1.0.11/test/default/box8.c libsodium-1.0.12/test/default/box8.c
--- libsodium-1.0.11/test/default/box8.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/box8.c	2017-03-06 11:13:57.000000000 +0100
@@ -8,7 +8,8 @@ static unsigned char bobsk[crypto_box_SE
 static unsigned char bobpk[crypto_box_PUBLICKEYBYTES];
 static unsigned char n[crypto_box_NONCEBYTES];
 
-int main(void)
+int
+main(void)
 {
     unsigned char *m;
     unsigned char *c;
@@ -19,8 +20,8 @@ int main(void)
     int            faults;
     int            ret;
 
-    m = (unsigned char *) sodium_malloc(mlen_max);
-    c = (unsigned char *) sodium_malloc(mlen_max);
+    m  = (unsigned char *) sodium_malloc(mlen_max);
+    c  = (unsigned char *) sodium_malloc(mlen_max);
     m2 = (unsigned char *) sodium_malloc(mlen_max);
     crypto_box_keypair(alicepk, alicesk);
     crypto_box_keypair(bobpk, bobsk);
diff -urpN libsodium-1.0.11/test/default/box.c libsodium-1.0.12/test/default/box.c
--- libsodium-1.0.11/test/default/box.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/box.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,55 +2,60 @@
 #define TEST_NAME "box"
 #include "cmptest.h"
 
-static const unsigned char alicesk[32]
-    = { 0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1,
-        0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0,
-        0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a };
-
-static const unsigned char bobpk[32]
-    = { 0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61,
-        0xc2, 0xec, 0xe4, 0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78,
-        0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14, 0x6f, 0x88, 0x2b, 0x4f };
-
-static const unsigned char small_order_p[crypto_box_PUBLICKEYBYTES]
-    = { 0xe0, 0xeb, 0x7a, 0x7c, 0x3b, 0x41, 0xb8, 0xae, 0x16, 0x56, 0xe3,
-        0xfa, 0xf1, 0x9f, 0xc4, 0x6a, 0xda, 0x09, 0x8d, 0xeb, 0x9c, 0x32,
-        0xb1, 0xfd, 0x86, 0x62, 0x05, 0x16, 0x5f, 0x49, 0xb8, 0x00 };
-
-static const unsigned char nonce[24]
-    = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73,
-        0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6,
-        0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
+static const unsigned char alicesk[32] = {
+    0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1,
+    0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0,
+    0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a
+};
+
+static const unsigned char bobpk[32] = {
+    0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61,
+    0xc2, 0xec, 0xe4, 0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78,
+    0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14, 0x6f, 0x88, 0x2b, 0x4f
+};
+
+static const unsigned char small_order_p[crypto_box_PUBLICKEYBYTES] = {
+    0xe0, 0xeb, 0x7a, 0x7c, 0x3b, 0x41, 0xb8, 0xae, 0x16, 0x56, 0xe3,
+    0xfa, 0xf1, 0x9f, 0xc4, 0x6a, 0xda, 0x09, 0x8d, 0xeb, 0x9c, 0x32,
+    0xb1, 0xfd, 0x86, 0x62, 0x05, 0x16, 0x5f, 0x49, 0xb8, 0x00
+};
+
+static const unsigned char nonce[24] = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6,
+                                         0x2b, 0x73, 0xcd, 0x62, 0xbd, 0xa8,
+                                         0x75, 0xfc, 0x73, 0xd6, 0x82, 0x19,
+                                         0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
 
 /* API requires first 32 bytes to be 0 */
-static const unsigned char m[163]
-    = { 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,    0xbe, 0x07, 0x5f, 0xc5,
-        0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16, 0xeb, 0xeb, 0x0c, 0x7b,
-        0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4, 0x4b, 0x66, 0x84, 0x9b,
-        0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf, 0x33, 0xbd, 0x75, 0x1a,
-        0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29, 0x6c, 0xdc, 0x3c, 0x01,
-        0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce, 0x31, 0x4a, 0xdb, 0x31,
-        0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d, 0xce, 0xea, 0x3a, 0x7f,
-        0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a, 0xd6, 0xb1, 0x31, 0x8a,
-        0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde, 0x04, 0x89, 0x77, 0xeb,
-        0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c, 0x60, 0x90, 0x2e, 0x52,
-        0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40, 0xe0, 0x82, 0xf9, 0x37,
-        0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05 };
+static const unsigned char m[163] = {
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0xbe, 0x07, 0x5f, 0xc5,
+    0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16, 0xeb, 0xeb, 0x0c, 0x7b,
+    0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4, 0x4b, 0x66, 0x84, 0x9b,
+    0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf, 0x33, 0xbd, 0x75, 0x1a,
+    0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29, 0x6c, 0xdc, 0x3c, 0x01,
+    0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce, 0x31, 0x4a, 0xdb, 0x31,
+    0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d, 0xce, 0xea, 0x3a, 0x7f,
+    0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a, 0xd6, 0xb1, 0x31, 0x8a,
+    0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde, 0x04, 0x89, 0x77, 0xeb,
+    0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c, 0x60, 0x90, 0x2e, 0x52,
+    0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40, 0xe0, 0x82, 0xf9, 0x37,
+    0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05
+};
 
 static unsigned char c[163];
 
-int main(void)
+int
+main(void)
 {
     unsigned char k[crypto_box_BEFORENMBYTES];
-    int i;
-    int ret;
+    int           i;
+    int           ret;
 
     ret = crypto_box(c, m, 163, nonce, bobpk, alicesk);
     assert(ret == 0);
     for (i = 16; i < 163; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
         if (i % 8 == 7)
             printf("\n");
     }
@@ -65,7 +70,7 @@ int main(void)
     assert(ret == 0);
     crypto_box_afternm(c, m, 163, nonce, k);
     for (i = 16; i < 163; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
         if (i % 8 == 7)
             printf("\n");
     }
@@ -83,22 +88,22 @@ int main(void)
     assert(crypto_box_boxzerobytes() > 0U);
     assert(crypto_box_macbytes() > 0U);
     assert(strcmp(crypto_box_primitive(), "curve25519xsalsa20poly1305") == 0);
-    assert(crypto_box_curve25519xsalsa20poly1305_seedbytes()
-           == crypto_box_seedbytes());
-    assert(crypto_box_curve25519xsalsa20poly1305_publickeybytes()
-           == crypto_box_publickeybytes());
-    assert(crypto_box_curve25519xsalsa20poly1305_secretkeybytes()
-           == crypto_box_secretkeybytes());
-    assert(crypto_box_curve25519xsalsa20poly1305_beforenmbytes()
-           == crypto_box_beforenmbytes());
-    assert(crypto_box_curve25519xsalsa20poly1305_noncebytes()
-           == crypto_box_noncebytes());
-    assert(crypto_box_curve25519xsalsa20poly1305_zerobytes()
-           == crypto_box_zerobytes());
-    assert(crypto_box_curve25519xsalsa20poly1305_boxzerobytes()
-           == crypto_box_boxzerobytes());
-    assert(crypto_box_curve25519xsalsa20poly1305_macbytes()
-           == crypto_box_macbytes());
+    assert(crypto_box_curve25519xsalsa20poly1305_seedbytes() ==
+           crypto_box_seedbytes());
+    assert(crypto_box_curve25519xsalsa20poly1305_publickeybytes() ==
+           crypto_box_publickeybytes());
+    assert(crypto_box_curve25519xsalsa20poly1305_secretkeybytes() ==
+           crypto_box_secretkeybytes());
+    assert(crypto_box_curve25519xsalsa20poly1305_beforenmbytes() ==
+           crypto_box_beforenmbytes());
+    assert(crypto_box_curve25519xsalsa20poly1305_noncebytes() ==
+           crypto_box_noncebytes());
+    assert(crypto_box_curve25519xsalsa20poly1305_zerobytes() ==
+           crypto_box_zerobytes());
+    assert(crypto_box_curve25519xsalsa20poly1305_boxzerobytes() ==
+           crypto_box_boxzerobytes());
+    assert(crypto_box_curve25519xsalsa20poly1305_macbytes() ==
+           crypto_box_macbytes());
 
     return 0;
 }
diff -urpN libsodium-1.0.11/test/default/box_easy2.c libsodium-1.0.12/test/default/box_easy2.c
--- libsodium-1.0.11/test/default/box_easy2.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/box_easy2.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,12 +2,14 @@
 #define TEST_NAME "box_easy2"
 #include "cmptest.h"
 
-static const unsigned char small_order_p[crypto_box_PUBLICKEYBYTES]
-    = { 0xe0, 0xeb, 0x7a, 0x7c, 0x3b, 0x41, 0xb8, 0xae, 0x16, 0x56, 0xe3,
-        0xfa, 0xf1, 0x9f, 0xc4, 0x6a, 0xda, 0x09, 0x8d, 0xeb, 0x9c, 0x32,
-        0xb1, 0xfd, 0x86, 0x62, 0x05, 0x16, 0x5f, 0x49, 0xb8, 0x00 };
+static const unsigned char small_order_p[crypto_box_PUBLICKEYBYTES] = {
+    0xe0, 0xeb, 0x7a, 0x7c, 0x3b, 0x41, 0xb8, 0xae, 0x16, 0x56, 0xe3,
+    0xfa, 0xf1, 0x9f, 0xc4, 0x6a, 0xda, 0x09, 0x8d, 0xeb, 0x9c, 0x32,
+    0xb1, 0xfd, 0x86, 0x62, 0x05, 0x16, 0x5f, 0x49, 0xb8, 0x00
+};
 
-int main(void)
+int
+main(void)
 {
     unsigned char *alicepk;
     unsigned char *alicesk;
@@ -28,18 +30,18 @@ int main(void)
     int            ret;
 
     m2_size = m_size = 1U + randombytes_uniform(1000);
-    c_size = crypto_box_MACBYTES + m_size;
-    m = (unsigned char *) sodium_malloc(m_size);
-    m2 = (unsigned char *) sodium_malloc(m2_size);
-    c = (unsigned char *) sodium_malloc(c_size);
+    c_size           = crypto_box_MACBYTES + m_size;
+    m                = (unsigned char *) sodium_malloc(m_size);
+    m2               = (unsigned char *) sodium_malloc(m2_size);
+    c                = (unsigned char *) sodium_malloc(c_size);
     alicepk = (unsigned char *) sodium_malloc(crypto_box_PUBLICKEYBYTES);
     alicesk = (unsigned char *) sodium_malloc(crypto_box_SECRETKEYBYTES);
-    bobpk = (unsigned char *) sodium_malloc(crypto_box_PUBLICKEYBYTES);
-    bobsk = (unsigned char *) sodium_malloc(crypto_box_SECRETKEYBYTES);
-    mac = (unsigned char *) sodium_malloc(crypto_box_MACBYTES);
-    nonce = (unsigned char *) sodium_malloc(crypto_box_NONCEBYTES);
-    k1 = (unsigned char *) sodium_malloc(crypto_box_BEFORENMBYTES);
-    k2 = (unsigned char *) sodium_malloc(crypto_box_BEFORENMBYTES);
+    bobpk   = (unsigned char *) sodium_malloc(crypto_box_PUBLICKEYBYTES);
+    bobsk   = (unsigned char *) sodium_malloc(crypto_box_SECRETKEYBYTES);
+    mac     = (unsigned char *) sodium_malloc(crypto_box_MACBYTES);
+    nonce   = (unsigned char *) sodium_malloc(crypto_box_NONCEBYTES);
+    k1      = (unsigned char *) sodium_malloc(crypto_box_BEFORENMBYTES);
+    k2      = (unsigned char *) sodium_malloc(crypto_box_BEFORENMBYTES);
     crypto_box_keypair(alicepk, alicesk);
     crypto_box_keypair(bobpk, bobsk);
     mlen = (size_t) randombytes_uniform((uint32_t) m_size) + 1U;
@@ -56,14 +58,15 @@ int main(void)
     printf("%d\n", memcmp(m, m2, mlen));
 
     for (i = 0; i < mlen + crypto_box_MACBYTES - 1; i++) {
-        if (crypto_box_open_easy(m2, c, (unsigned long long) i,
-                                 nonce, alicepk, bobsk) == 0) {
+        if (crypto_box_open_easy(m2, c, (unsigned long long) i, nonce, alicepk,
+                                 bobsk) == 0) {
             printf("short open() should have failed");
             return 1;
         }
     }
     memcpy(c, m, mlen);
-    ret = crypto_box_easy(c, c, (unsigned long long) mlen, nonce, bobpk, alicesk);
+    ret =
+        crypto_box_easy(c, c, (unsigned long long) mlen, nonce, bobpk, alicesk);
     assert(ret == 0);
     printf("%d\n", memcmp(m, c, mlen) == 0);
     printf("%d\n", memcmp(m, c + crypto_box_MACBYTES, mlen) == 0);
@@ -86,35 +89,39 @@ int main(void)
     memset(m2, 0, m2_size);
 
     if (crypto_box_easy_afternm(c, m, SIZE_MAX - 1U, nonce, k1) == 0) {
-        printf("crypto_box_easy_afternm() with a short ciphertext should have failed\n");
+        printf(
+            "crypto_box_easy_afternm() with a short ciphertext should have "
+            "failed\n");
     }
     crypto_box_easy_afternm(c, m, (unsigned long long) mlen, nonce, k1);
-    if (crypto_box_open_easy_afternm(m2, c,
-                                     (unsigned long long) mlen + crypto_box_MACBYTES,
-                                 nonce, k2) != 0) {
+    if (crypto_box_open_easy_afternm(
+            m2, c, (unsigned long long) mlen + crypto_box_MACBYTES, nonce,
+            k2) != 0) {
         printf("crypto_box_open_easy_afternm() failed\n");
     }
     printf("%d\n", memcmp(m, m2, mlen));
-    if (crypto_box_open_easy_afternm(m2, c, crypto_box_MACBYTES - 1U,
-                                     nonce, k2) == 0) {
-        printf("crypto_box_open_easy_afternm() with a huge ciphertext should have failed\n");
+    if (crypto_box_open_easy_afternm(m2, c, crypto_box_MACBYTES - 1U, nonce,
+                                     k2) == 0) {
+        printf(
+            "crypto_box_open_easy_afternm() with a huge ciphertext should have "
+            "failed\n");
     }
     memset(m2, 0, m2_size);
-    ret = crypto_box_detached(c, mac, m, (unsigned long long) mlen,
-                              nonce, small_order_p, bobsk);
+    ret = crypto_box_detached(c, mac, m, (unsigned long long) mlen, nonce,
+                              small_order_p, bobsk);
     assert(ret == -1);
-    ret = crypto_box_detached(c, mac, m, (unsigned long long) mlen,
-                              nonce, alicepk, bobsk);
+    ret = crypto_box_detached(c, mac, m, (unsigned long long) mlen, nonce,
+                              alicepk, bobsk);
     assert(ret == 0);
-    if (crypto_box_open_detached(m2, c, mac, (unsigned long long) mlen,
-                                 nonce, bobpk, alicesk) != 0) {
+    if (crypto_box_open_detached(m2, c, mac, (unsigned long long) mlen, nonce,
+                                 bobpk, alicesk) != 0) {
         printf("crypto_box_open_detached() failed\n");
     }
     printf("%d\n", memcmp(m, m2, mlen));
 
     memset(m2, 0, m2_size);
-    crypto_box_detached_afternm(c, mac, m, (unsigned long long) mlen,
-                                nonce, k1);
+    crypto_box_detached_afternm(c, mac, m, (unsigned long long) mlen, nonce,
+                                k1);
     if (crypto_box_open_detached_afternm(m2, c, mac, (unsigned long long) mlen,
                                          nonce, k2) != 0) {
         printf("crypto_box_open_detached_afternm() failed\n");
diff -urpN libsodium-1.0.11/test/default/box_easy.c libsodium-1.0.12/test/default/box_easy.c
--- libsodium-1.0.11/test/default/box_easy.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/box_easy.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,37 +2,41 @@
 #define TEST_NAME "box_easy"
 #include "cmptest.h"
 
-static unsigned char alicesk[32]
-    = { 0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1,
-        0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0,
-        0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a };
-
-static unsigned char bobpk[32]
-    = { 0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61,
-        0xc2, 0xec, 0xe4, 0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78,
-        0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14, 0x6f, 0x88, 0x2b, 0x4f };
-
-static unsigned char nonce[24]
-    = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73,
-        0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6,
-        0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
-
-static unsigned char m[131]
-    = { 0xbe, 0x07, 0x5f, 0xc5, 0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16,
-        0xeb, 0xeb, 0x0c, 0x7b, 0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4,
-        0x4b, 0x66, 0x84, 0x9b, 0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf,
-        0x33, 0xbd, 0x75, 0x1a, 0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29,
-        0x6c, 0xdc, 0x3c, 0x01, 0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce,
-        0x31, 0x4a, 0xdb, 0x31, 0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d,
-        0xce, 0xea, 0x3a, 0x7f, 0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a,
-        0xd6, 0xb1, 0x31, 0x8a, 0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde,
-        0x04, 0x89, 0x77, 0xeb, 0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c,
-        0x60, 0x90, 0x2e, 0x52, 0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40,
-        0xe0, 0x82, 0xf9, 0x37, 0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05 };
+static unsigned char alicesk[32] = { 0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5,
+                                     0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2,
+                                     0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb,
+                                     0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5,
+                                     0x1d, 0xb9, 0x2c, 0x2a };
+
+static unsigned char bobpk[32] = { 0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1,
+                                   0xb4, 0xd3, 0x5b, 0x61, 0xc2, 0xec, 0xe4,
+                                   0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b,
+                                   0x78, 0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14,
+                                   0x6f, 0x88, 0x2b, 0x4f };
+
+static unsigned char nonce[24] = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6,
+                                   0x2b, 0x73, 0xcd, 0x62, 0xbd, 0xa8,
+                                   0x75, 0xfc, 0x73, 0xd6, 0x82, 0x19,
+                                   0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
+
+static unsigned char m[131] = {
+    0xbe, 0x07, 0x5f, 0xc5, 0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16,
+    0xeb, 0xeb, 0x0c, 0x7b, 0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4,
+    0x4b, 0x66, 0x84, 0x9b, 0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf,
+    0x33, 0xbd, 0x75, 0x1a, 0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29,
+    0x6c, 0xdc, 0x3c, 0x01, 0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce,
+    0x31, 0x4a, 0xdb, 0x31, 0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d,
+    0xce, 0xea, 0x3a, 0x7f, 0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a,
+    0xd6, 0xb1, 0x31, 0x8a, 0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde,
+    0x04, 0x89, 0x77, 0xeb, 0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c,
+    0x60, 0x90, 0x2e, 0x52, 0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40,
+    0xe0, 0x82, 0xf9, 0x37, 0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05
+};
 
 static unsigned char c[147 + crypto_box_MACBYTES];
 
-int main(void)
+int
+main(void)
 {
     size_t i;
     int    ret;
@@ -40,7 +44,7 @@ int main(void)
     ret = crypto_box_easy(c, m, 131, nonce, bobpk, alicesk);
     assert(ret == 0);
     for (i = 0; i < 131 + crypto_box_MACBYTES; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
     }
     printf("\n");
 
@@ -49,19 +53,19 @@ int main(void)
     ret = crypto_box_easy(c, c, 0, nonce, bobpk, alicesk);
     assert(ret == 0);
     for (i = 0; i < 1 + crypto_box_MACBYTES; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
     }
     printf("\n");
-    ret = crypto_box_open_easy(c, c, crypto_box_MACBYTES, nonce,
-                               bobpk, alicesk);
+    ret =
+        crypto_box_open_easy(c, c, crypto_box_MACBYTES, nonce, bobpk, alicesk);
     assert(ret == 0);
     for (i = 0; i < 1 + crypto_box_MACBYTES; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
     }
     printf("\n");
     c[randombytes_uniform(crypto_box_MACBYTES)]++;
-    ret = crypto_box_open_easy(c, c, crypto_box_MACBYTES, nonce,
-                               bobpk, alicesk);
+    ret =
+        crypto_box_open_easy(c, c, crypto_box_MACBYTES, nonce, bobpk, alicesk);
     assert(ret == -1);
 
     assert(crypto_box_easy(c, m, SIZE_MAX - 1U, nonce, bobpk, alicesk) == -1);
diff -urpN libsodium-1.0.11/test/default/box_seal.c libsodium-1.0.12/test/default/box_seal.c
--- libsodium-1.0.11/test/default/box_seal.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/box_seal.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,10 +2,11 @@
 #define TEST_NAME "box_seal"
 #include "cmptest.h"
 
-int main(void)
+int
+main(void)
 {
-    unsigned char pk[crypto_box_PUBLICKEYBYTES];
-    unsigned char sk[crypto_box_SECRETKEYBYTES];
+    unsigned char  pk[crypto_box_PUBLICKEYBYTES];
+    unsigned char  sk[crypto_box_SECRETKEYBYTES];
     unsigned char *c;
     unsigned char *m;
     unsigned char *m2;
@@ -15,9 +16,9 @@ int main(void)
     crypto_box_keypair(pk, sk);
     m_len = (size_t) randombytes_uniform(1000);
     c_len = crypto_box_SEALBYTES + m_len;
-    m = (unsigned char *) sodium_malloc(m_len);
-    m2 = (unsigned char *) sodium_malloc(m_len);
-    c = (unsigned char *) sodium_malloc(c_len);
+    m     = (unsigned char *) sodium_malloc(m_len);
+    m2    = (unsigned char *) sodium_malloc(m_len);
+    c     = (unsigned char *) sodium_malloc(c_len);
     randombytes_buf(m, m_len);
     if (crypto_box_seal(c, m, m_len, pk) != 0) {
         printf("crypto_box_seal() failure\n");
diff -urpN libsodium-1.0.11/test/default/box_seed.c libsodium-1.0.12/test/default/box_seed.c
--- libsodium-1.0.11/test/default/box_seed.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/box_seed.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,25 +2,27 @@
 #define TEST_NAME "box_seed"
 #include "cmptest.h"
 
-static unsigned char seed[32]
-    = { 0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1,
-        0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0,
-        0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a };
+static unsigned char seed[32] = { 0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5,
+                                  0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2,
+                                  0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb,
+                                  0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5,
+                                  0x1d, 0xb9, 0x2c, 0x2a };
 
-int main(void)
+int
+main(void)
 {
-    int i;
+    int           i;
     unsigned char sk[32];
     unsigned char pk[32];
 
     crypto_box_seed_keypair(pk, sk, seed);
     for (i = 0; i < 32; ++i) {
-        printf(",0x%02x", (unsigned int)pk[i]);
+        printf(",0x%02x", (unsigned int) pk[i]);
         if (i % 8 == 7)
             printf("\n");
     }
     for (i = 0; i < 32; ++i) {
-        printf(",0x%02x", (unsigned int)sk[i]);
+        printf(",0x%02x", (unsigned int) sk[i]);
         if (i % 8 == 7)
             printf("\n");
     }
diff -urpN libsodium-1.0.11/test/default/chacha20.c libsodium-1.0.12/test/default/chacha20.c
--- libsodium-1.0.11/test/default/chacha20.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/chacha20.c	2017-03-06 23:32:40.000000000 +0100
@@ -46,7 +46,13 @@ void tv(void)
             sodium_free(part);
         }
     } while (++i < (sizeof tests) / (sizeof tests[0]));
-
+    assert(66 <= sizeof out);
+    for (plen = 1U; plen < 66; plen += 3) {
+        memset(out, (int) (plen & 0xff), sizeof out);
+        crypto_stream_chacha20(out, plen, nonce, key);
+        sodium_bin2hex(out_hex, sizeof out_hex, out, sizeof out);
+        printf("[%s]\n", out_hex);
+    }
     randombytes_buf(out, sizeof out);
     crypto_stream_chacha20(out, sizeof out, nonce, key);
     sodium_bin2hex(out_hex, sizeof out_hex, out, sizeof out);
@@ -96,7 +102,10 @@ void tv_ietf(void)
             0U },
           { "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",
             "000000090000004a00000000",
-            1U }};
+            1U },
+          { "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f",
+            "000000090000004a00000000",
+            0xffffffff }};
     unsigned char  key[crypto_stream_chacha20_KEYBYTES];
     unsigned char  nonce[crypto_stream_chacha20_IETF_NONCEBYTES];
     unsigned char *part;
@@ -125,7 +134,13 @@ void tv_ietf(void)
             sodium_free(part);
         }
     } while (++i < (sizeof tests) / (sizeof tests[0]));
-
+    assert(66 <= sizeof out);
+    for (plen = 1U; plen < 66; plen += 3) {
+        memset(out, (int) (plen & 0xff), sizeof out);
+        crypto_stream_chacha20(out, plen, nonce, key);
+        sodium_bin2hex(out_hex, sizeof out_hex, out, sizeof out);
+        printf("[%s]\n", out_hex);
+    }
     randombytes_buf(out, sizeof out);
     crypto_stream_chacha20_ietf(out, sizeof out, nonce, key);
     sodium_bin2hex(out_hex, sizeof out_hex, out, sizeof out);
diff -urpN libsodium-1.0.11/test/default/chacha20.exp libsodium-1.0.12/test/default/chacha20.exp
--- libsodium-1.0.11/test/default/chacha20.exp	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/chacha20.exp	2017-03-06 23:32:40.000000000 +0100
@@ -3,6 +3,28 @@
 [de9cba7bf3d69ef5e786dc63973f653a0b49e015adbff7134fcb7df137821031e85a050278a7084527214f73efc7fa5b5277062eb7a0433e445f41e31afab757283547e3d3d30ee0371c1e6025ff4c91b794a291cf7568d48ff84b37329e2730b12738a072a2b2c7169e326fe4893a7b2421bb910b79599a7ce4fbaee86be427c5ee0e8225eb6f48231fd504939d59eac8bd106cc138779b893c54da8758f62a]
 [ef3fdfd6c61578fbf5cf35bd3dd33b8009631634d21e42ac33960bd138e50d32111e4caf237ee53ca8ad6426194a88545ddc497a0b466e7d6bbdb0041b2f586b5305e5e44aff19b235936144675efbe4409eb7e8e5f1430f5f5836aeb49bb5328b017c4b9dc11f8a03863fa803dc71d5726b2b6b31aa32708afe5af1d6b690584d58792b271e5fdb92c486051c48b79a4d48a109bb2d0477956e74c25e93c3c2]
 [f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905d3be59ea1c53f15916155c2be8241a38008b9a26bc35941e2444177c8ade6689de95264986d95889fb60e84629c9bd9a5acb1cc118be563eb9b3a4a472f82e09a7e778492b562ef7130e88dfe031c79db9d4f7c7a899151b9a475032b63fc385245fe054e3dd5a97a5f576fe064025]
+[f7010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101]
+[f798a189040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404]
+[f798a189f195e6070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707]
+[f798a189f195e66982100a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a]
+[f798a189f195e66982105ffb640d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d]
+[f798a189f195e66982105ffb640bb775101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010]
+[f798a189f195e66982105ffb640bb7757f579d131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313]
+[f798a189f195e66982105ffb640bb7757f579da31602161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac561c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac31f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b73252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b4641282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c92b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c94400492e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905d3be59343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905d3be59ea1c53373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905d3be59ea1c53f159163a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905d3be59ea1c53f15916155c2b3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d]
+[f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905d3be59ea1c53f15916155c2be8241a404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040]
 [f798a189f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905d3be59ea1c53f15916155c2be8241a38008b9a26bc35941e2444177c8ade6689de95264986d95889fb60e84629c9bd9a5acb1cc118be563eb9b3a4a472f82e09a7e778492b562ef7130e88dfe031c79db9d4f7c7a899151b9a475032b63fc385245fe054e3dd5a97a5f576fe064025]
 [b5dae3cbb3d7a42bc0521db92649f5373d15dfe15440bed1ae43ee14ba18818376e616393179040372008b06420b552b4791fc1ba85e11b31b54571e69aa66587a42c9d864fe77d65c6606553ec89c24cb9cd7640bc49b1acbb922aa046b8bffd818895e835afc147cfbf1e6e630ba6c4be5a53a0b69146cb5514cca9da27385dffb96b585eadb5759d8051270f47d81c7661da216a19f18d5e7b734bc440267]
 [42424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242]
@@ -13,6 +35,29 @@
 [72d54dfbf12ec44b362692df94137f328fea8da73990265ec1bbbea1ae9af0ca13b25aa26cb4a648cb9b9d1be65b2c0924a66c54d545ec1b7374f4872e99f096bf74dbd52cc4fc95ceb6097fe5e65358c9dbc0a5ecbf7894a132a9a54ae3e951f2e9f209aa9c3d9a877ac9dab62433d2961a17d103e455dfb7337c90f6857aad233065955a212b5c7a8eab4dc8a629e5b6b8ba914afd06de7177054b33d21c96]
 [c2c64d378cd536374ae204b9ef933fcd1a8b2288b3dfa49672ab765b54ee27c78a970e0e955c14f3a88e741b97c286f75f8fc299e8148362fa198a39531bed6d1a91288c874ec254f322c2a197340c55bb3e9b3998f7de2309486a0bb494abd20c9c5ef99c1370d61e77f408ac5514f49202bcc6828d45409d2d1416f8ae106b06ebd2541256264fa415bd54cb12e1d4449ed85299a1b7a249b75ff6c89b2e3f]
 [10f1e7e4d13b5915500fdd1fa32071c4c7d1f4c733c068030422aa9ac3d46c4ed2826446079faa0914c2d705d98b02a2b5129cd1de164eb9cbd083e8a2503c4e0a88837739d7bf4ef8ccacb0ea2bb9d69d56c394aa351dfda5bf459f0a2e9fe8e721f89255f9c486bf21679c683d4f9c5cf2fa27865526005b06ca374c86af3bdcbfbdcb83be65862ed5c20eae5a43241d6a92da6dca9a156be25297f51c2718]
+[ff2941b8d740f6cbb50936bf997ebd5218cb108dc53f41c64841d0218167430ca03b770ca74ccb642a28194d1dedd2ed13151e25ec5d7faeb6d060bfb7e6b146880b67b55162bca26abe045fad14b0f492a3f369dcd52f98bc1513eaf238a3f434c7527121b4b756613e270395358d831d4950b6c7812fb724dc7c9be5e5c62ec8796d6690205061108b113f695582e4cf5d8b51112a51d157ef15e2cb95e4d5]
+[61010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101]
+[6146f256040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404]
+[6146f2564fe1bd070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707]
+[6146f2564fe1bdf9bccd0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a]
+[6146f2564fe1bdf9bccd0fe1ed0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d]
+[6146f2564fe1bdf9bccd0fe1edf0da5d101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb00161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919191919]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af1021c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7081f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7085f55f6222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7085f55f67bf6ab252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7085f55f67bf6ab410fba282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7085f55f67bf6ab410fba060c2c2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7085f55f67bf6ab410fba060c2c2973032e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7085f55f67bf6ab410fba060c2c297303ace1e2313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7085f55f67bf6ab410fba060c2c297303ace1e2e34130343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7085f55f67bf6ab410fba060c2c297303ace1e2e3413018ff7e373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737373737]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7085f55f67bf6ab410fba060c2c297303ace1e2e3413018ff7ed87cfa3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a3a]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7085f55f67bf6ab410fba060c2c297303ace1e2e3413018ff7ed87cfa95b60f3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d]
+[6146f2564fe1bdf9bccd0fe1edf0da5d92f1fa76cb002937ba9af10230a7085f55f67bf6ab410fba060c2c297303ace1e2e3413018ff7ed87cfa95b60f094ee5404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040]
 [8adc91fd9ff4f0f51b0fad50ff15d637e40efda206cc52c783a74200503c1582cd9833367d0a54d57d3c9e998f490ee69ca34c1ff9e939a75584c52d690a35d410f1e7e4d13b5915500fdd1fa32071c4c7d1f4c733c068030422aa9ac3d46c4ed2826446079faa0914c2d705d98b02a2b5129cd1de164eb9cbd083e8a2503c4e0a88837739d7bf4ef8ccacb0ea2bb9d69d56c394aa351dfda5bf459f0a2e9fe8]
 [c89ed3bfddb6b2b7594def12bd579475a64cbfe0448e1085c1e50042127e57c08fda71743f4816973f7edcdbcd0b4ca4dee10e5dbbab7be517c6876f2b48779652b3a5a693791b57124d9f5de16233868593b68571822a414660e8d881962e0c90c0260445dde84b568095479bc940e0f750de939c540cfb8992c1aae0127e0c48cac1357b95fd0cba8eeef2a869fb94df1481d6e8775fbfe7fd07dd486cddaa]
 [42424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242]
diff -urpN libsodium-1.0.11/test/default/core1.c libsodium-1.0.12/test/default/core1.c
--- libsodium-1.0.11/test/default/core1.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/core1.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,20 +2,21 @@
 #define TEST_NAME "core1"
 #include "cmptest.h"
 
-static unsigned char shared[32]
-    = { 0x4a, 0x5d, 0x9d, 0x5b, 0xa4, 0xce, 0x2d, 0xe1, 0x72, 0x8e, 0x3b,
-        0xf4, 0x80, 0x35, 0x0f, 0x25, 0xe0, 0x7e, 0x21, 0xc9, 0x47, 0xd1,
-        0x9e, 0x33, 0x76, 0xf0, 0x9b, 0x3c, 0x1e, 0x16, 0x17, 0x42 };
+static unsigned char shared[32] = { 0x4a, 0x5d, 0x9d, 0x5b, 0xa4, 0xce, 0x2d,
+                                    0xe1, 0x72, 0x8e, 0x3b, 0xf4, 0x80, 0x35,
+                                    0x0f, 0x25, 0xe0, 0x7e, 0x21, 0xc9, 0x47,
+                                    0xd1, 0x9e, 0x33, 0x76, 0xf0, 0x9b, 0x3c,
+                                    0x1e, 0x16, 0x17, 0x42 };
 
 static unsigned char zero[32];
 
-static unsigned char c[16]
-    = { 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,
-        0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b };
+static unsigned char c[16] = { 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,
+                               0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b };
 
 static unsigned char firstkey[32];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
@@ -26,7 +27,7 @@ int main(void)
         } else {
             printf(" ");
         }
-        printf("0x%02x", (unsigned int)firstkey[i]);
+        printf("0x%02x", (unsigned int) firstkey[i]);
         if (i % 8 == 7) {
             printf("\n");
         }
diff -urpN libsodium-1.0.11/test/default/core2.c libsodium-1.0.12/test/default/core2.c
--- libsodium-1.0.11/test/default/core2.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/core2.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,22 +2,23 @@
 #define TEST_NAME "core2"
 #include "cmptest.h"
 
-static unsigned char firstkey[32]
-    = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85, 0xd4, 0x62, 0xcd, 0x51,
-        0x19, 0x7a, 0x9a, 0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac, 0x64,
-        0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08, 0x44, 0xf6, 0x83, 0x89 };
-
-static unsigned char nonceprefix[16]
-    = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73,
-        0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6 };
-
-static unsigned char c[16]
-    = { 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,
-        0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b };
+static unsigned char firstkey[32] = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85,
+                                      0xd4, 0x62, 0xcd, 0x51, 0x19, 0x7a, 0x9a,
+                                      0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac,
+                                      0x64, 0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08,
+                                      0x44, 0xf6, 0x83, 0x89 };
+
+static unsigned char nonceprefix[16] = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6,
+                                         0x2b, 0x73, 0xcd, 0x62, 0xbd, 0xa8,
+                                         0x75, 0xfc, 0x73, 0xd6 };
+
+static unsigned char c[16] = { 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,
+                               0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b };
 
 static unsigned char secondkey[32];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
@@ -28,7 +29,7 @@ int main(void)
         } else {
             printf(" ");
         }
-        printf("0x%02x", (unsigned int)secondkey[i]);
+        printf("0x%02x", (unsigned int) secondkey[i]);
         if (i % 8 == 7) {
             printf("\n");
         }
diff -urpN libsodium-1.0.11/test/default/core3.c libsodium-1.0.12/test/default/core3.c
--- libsodium-1.0.11/test/default/core3.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/core3.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,17 +2,17 @@
 #define TEST_NAME "core3"
 #include "cmptest.h"
 
-static unsigned char secondkey[32]
-    = { 0xdc, 0x90, 0x8d, 0xda, 0x0b, 0x93, 0x44, 0xa9, 0x53, 0x62, 0x9b,
-        0x73, 0x38, 0x20, 0x77, 0x88, 0x80, 0xf3, 0xce, 0xb4, 0x21, 0xbb,
-        0x61, 0xb9, 0x1c, 0xbd, 0x4c, 0x3e, 0x66, 0x25, 0x6c, 0xe4 };
-
-static unsigned char noncesuffix[8]
-    = { 0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
-
-static unsigned char c[16]
-    = { 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,
-        0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b };
+static unsigned char secondkey[32] = { 0xdc, 0x90, 0x8d, 0xda, 0x0b, 0x93, 0x44,
+                                       0xa9, 0x53, 0x62, 0x9b, 0x73, 0x38, 0x20,
+                                       0x77, 0x88, 0x80, 0xf3, 0xce, 0xb4, 0x21,
+                                       0xbb, 0x61, 0xb9, 0x1c, 0xbd, 0x4c, 0x3e,
+                                       0x66, 0x25, 0x6c, 0xe4 };
+
+static unsigned char noncesuffix[8] = { 0x82, 0x19, 0xe0, 0x03,
+                                        0x6b, 0x7a, 0x0b, 0x37 };
+
+static unsigned char c[16] = { 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x20, 0x33,
+                               0x32, 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6b };
 
 static unsigned char in[16];
 
@@ -20,12 +20,13 @@ static unsigned char output[64 * 256 * 2
 
 static unsigned char h[32];
 
-int main(void)
+int
+main(void)
 {
-    int i;
+    int       i;
     long long pos = 0;
 
-    for (i = 0; i < 8; ++i)
+    for (i    = 0; i < 8; ++i)
         in[i] = noncesuffix[i];
     do {
         do {
diff -urpN libsodium-1.0.11/test/default/core4.c libsodium-1.0.12/test/default/core4.c
--- libsodium-1.0.11/test/default/core4.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/core4.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,22 +2,21 @@
 #define TEST_NAME "core4"
 #include "cmptest.h"
 
-static unsigned char k[32]
-    = { 1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,
-        12,  13,  14,  15,  16,  201, 202, 203, 204, 205, 206,
-        207, 208, 209, 210, 211, 212, 213, 214, 215, 216 };
-
-static unsigned char in[16]
-    = { 101, 102, 103, 104, 105, 106, 107, 108,
-        109, 110, 111, 112, 113, 114, 115, 116 };
-
-static unsigned char c[16]
-    = { 101, 120, 112, 97,  110, 100, 32, 51,
-        50,  45,  98,  121, 116, 101, 32, 107 };
+static unsigned char k[32] = { 1,   2,   3,   4,   5,   6,   7,   8,
+                               9,   10,  11,  12,  13,  14,  15,  16,
+                               201, 202, 203, 204, 205, 206, 207, 208,
+                               209, 210, 211, 212, 213, 214, 215, 216 };
+
+static unsigned char in[16] = { 101, 102, 103, 104, 105, 106, 107, 108,
+                                109, 110, 111, 112, 113, 114, 115, 116 };
+
+static unsigned char c[16] = { 101, 120, 112, 97,  110, 100, 32, 51,
+                               50,  45,  98,  121, 116, 101, 32, 107 };
 
 static unsigned char out[64];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
@@ -28,7 +27,7 @@ int main(void)
         } else {
             printf(" ");
         }
-        printf("%3d", (unsigned int)out[i]);
+        printf("%3d", (unsigned int) out[i]);
         if (i % 8 == 7) {
             printf("\n");
         }
diff -urpN libsodium-1.0.11/test/default/core5.c libsodium-1.0.12/test/default/core5.c
--- libsodium-1.0.11/test/default/core5.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/core5.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,28 +2,29 @@
 #define TEST_NAME "core5"
 #include "cmptest.h"
 
-static unsigned char k[32]
-    = { 0xee, 0x30, 0x4f, 0xca, 0x27, 0x00, 0x8d, 0x8c, 0x12, 0x6f, 0x90,
-        0x02, 0x79, 0x01, 0xd8, 0x0f, 0x7f, 0x1d, 0x8b, 0x8d, 0xc9, 0x36,
-        0xcf, 0x3b, 0x9f, 0x81, 0x96, 0x92, 0x82, 0x7e, 0x57, 0x77 };
-
-static unsigned char in[16]
-    = { 0x81, 0x91, 0x8e, 0xf2, 0xa5, 0xe0, 0xda, 0x9b,
-        0x3e, 0x90, 0x60, 0x52, 0x1e, 0x4b, 0xb3, 0x52 };
-
-static unsigned char c[16]
-    = { 101, 120, 112, 97,  110, 100, 32, 51,
-        50,  45,  98,  121, 116, 101, 32, 107 };
+static unsigned char k[32] = { 0xee, 0x30, 0x4f, 0xca, 0x27, 0x00, 0x8d, 0x8c,
+                               0x12, 0x6f, 0x90, 0x02, 0x79, 0x01, 0xd8, 0x0f,
+                               0x7f, 0x1d, 0x8b, 0x8d, 0xc9, 0x36, 0xcf, 0x3b,
+                               0x9f, 0x81, 0x96, 0x92, 0x82, 0x7e, 0x57, 0x77 };
+
+static unsigned char in[16] = {
+    0x81, 0x91, 0x8e, 0xf2, 0xa5, 0xe0, 0xda, 0x9b,
+    0x3e, 0x90, 0x60, 0x52, 0x1e, 0x4b, 0xb3, 0x52
+};
+
+static unsigned char c[16] = { 101, 120, 112, 97,  110, 100, 32, 51,
+                               50,  45,  98,  121, 116, 101, 32, 107 };
 
 unsigned char out[32];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
     crypto_core_hsalsa20(out, in, k, c);
     for (i = 0; i < 32; ++i) {
-        printf(",0x%02x", (unsigned int)out[i]);
+        printf(",0x%02x", (unsigned int) out[i]);
         if (i % 8 == 7) {
             printf("\n");
         }
diff -urpN libsodium-1.0.11/test/default/core6.c libsodium-1.0.12/test/default/core6.c
--- libsodium-1.0.11/test/default/core6.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/core6.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,24 +2,25 @@
 #define TEST_NAME "core6"
 #include "cmptest.h"
 
-static unsigned char k[32]
-    = { 0xee, 0x30, 0x4f, 0xca, 0x27, 0x00, 0x8d, 0x8c, 0x12, 0x6f, 0x90,
-        0x02, 0x79, 0x01, 0xd8, 0x0f, 0x7f, 0x1d, 0x8b, 0x8d, 0xc9, 0x36,
-        0xcf, 0x3b, 0x9f, 0x81, 0x96, 0x92, 0x82, 0x7e, 0x57, 0x77 };
-
-static unsigned char in[16]
-    = { 0x81, 0x91, 0x8e, 0xf2, 0xa5, 0xe0, 0xda, 0x9b,
-        0x3e, 0x90, 0x60, 0x52, 0x1e, 0x4b, 0xb3, 0x52 };
-
-static unsigned char c[16]
-    = { 101, 120, 112, 97,  110, 100, 32, 51,
-        50,  45,  98,  121, 116, 101, 32, 107 };
+static unsigned char k[32] = { 0xee, 0x30, 0x4f, 0xca, 0x27, 0x00, 0x8d, 0x8c,
+                               0x12, 0x6f, 0x90, 0x02, 0x79, 0x01, 0xd8, 0x0f,
+                               0x7f, 0x1d, 0x8b, 0x8d, 0xc9, 0x36, 0xcf, 0x3b,
+                               0x9f, 0x81, 0x96, 0x92, 0x82, 0x7e, 0x57, 0x77 };
+
+static unsigned char in[16] = {
+    0x81, 0x91, 0x8e, 0xf2, 0xa5, 0xe0, 0xda, 0x9b,
+    0x3e, 0x90, 0x60, 0x52, 0x1e, 0x4b, 0xb3, 0x52
+};
+
+static unsigned char c[16] = { 101, 120, 112, 97,  110, 100, 32, 51,
+                               50,  45,  98,  121, 116, 101, 32, 107 };
 
 static unsigned char out[64];
 
-static void print(unsigned char *x, unsigned char *y)
+static void
+print(unsigned char *x, unsigned char *y)
 {
-    int i;
+    int          i;
     unsigned int borrow = 0;
 
     for (i = 0; i < 4; ++i) {
@@ -30,7 +31,8 @@ static void print(unsigned char *x, unsi
     }
 }
 
-int main(void)
+int
+main(void)
 {
     crypto_core_salsa20(out, in, k, c);
     print(out, c);
diff -urpN libsodium-1.0.11/test/default/ed25519_convert.c libsodium-1.0.12/test/default/ed25519_convert.c
--- libsodium-1.0.11/test/default/ed25519_convert.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/ed25519_convert.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,21 +2,23 @@
 #define TEST_NAME "ed25519_convert"
 #include "cmptest.h"
 
-static const unsigned char keypair_seed[crypto_sign_ed25519_SEEDBYTES]
-    = { 0x42, 0x11, 0x51, 0xa4, 0x59, 0xfa, 0xea, 0xde, 0x3d, 0x24, 0x71,
-        0x15, 0xf9, 0x4a, 0xed, 0xae, 0x42, 0x31, 0x81, 0x24, 0x09, 0x5a,
-        0xfa, 0xbe, 0x4d, 0x14, 0x51, 0xa5, 0x59, 0xfa, 0xed, 0xee };
+static const unsigned char keypair_seed[crypto_sign_ed25519_SEEDBYTES] = {
+    0x42, 0x11, 0x51, 0xa4, 0x59, 0xfa, 0xea, 0xde, 0x3d, 0x24, 0x71,
+    0x15, 0xf9, 0x4a, 0xed, 0xae, 0x42, 0x31, 0x81, 0x24, 0x09, 0x5a,
+    0xfa, 0xbe, 0x4d, 0x14, 0x51, 0xa5, 0x59, 0xfa, 0xed, 0xee
+};
 
-int main(void)
+int
+main(void)
 {
     unsigned char ed25519_pk[crypto_sign_ed25519_PUBLICKEYBYTES];
     unsigned char ed25519_skpk[crypto_sign_ed25519_SECRETKEYBYTES];
     unsigned char curve25519_pk[crypto_scalarmult_curve25519_BYTES];
     unsigned char curve25519_pk2[crypto_scalarmult_curve25519_BYTES];
     unsigned char curve25519_sk[crypto_scalarmult_curve25519_BYTES];
-    char curve25519_pk_hex[crypto_scalarmult_curve25519_BYTES * 2 + 1];
-    char curve25519_sk_hex[crypto_scalarmult_curve25519_BYTES * 2 + 1];
-    unsigned int i;
+    char          curve25519_pk_hex[crypto_scalarmult_curve25519_BYTES * 2 + 1];
+    char          curve25519_sk_hex[crypto_scalarmult_curve25519_BYTES * 2 + 1];
+    unsigned int  i;
 
     crypto_sign_ed25519_seed_keypair(ed25519_pk, ed25519_skpk, keypair_seed);
     if (crypto_sign_ed25519_pk_to_curve25519(curve25519_pk, ed25519_pk) != 0) {
@@ -33,7 +35,8 @@ int main(void)
 
     for (i = 0U; i < 500U; i++) {
         crypto_sign_ed25519_keypair(ed25519_pk, ed25519_skpk);
-        if (crypto_sign_ed25519_pk_to_curve25519(curve25519_pk, ed25519_pk) != 0) {
+        if (crypto_sign_ed25519_pk_to_curve25519(curve25519_pk, ed25519_pk) !=
+            0) {
             printf("conversion failed\n");
         }
         crypto_sign_ed25519_sk_to_curve25519(curve25519_sk, ed25519_skpk);
diff -urpN libsodium-1.0.11/test/default/hash3.c libsodium-1.0.12/test/default/hash3.c
--- libsodium-1.0.11/test/default/hash3.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/hash3.c	2017-03-06 11:13:57.000000000 +0100
@@ -5,13 +5,14 @@
 static unsigned char x[] = "testing\n";
 static unsigned char h[crypto_hash_BYTES];
 
-int main(void)
+int
+main(void)
 {
     size_t i;
 
     crypto_hash(h, x, sizeof x - 1U);
     for (i = 0; i < crypto_hash_BYTES; ++i) {
-        printf("%02x", (unsigned int)h[i]);
+        printf("%02x", (unsigned int) h[i]);
     }
     printf("\n");
 
diff -urpN libsodium-1.0.11/test/default/hash.c libsodium-1.0.12/test/default/hash.c
--- libsodium-1.0.11/test/default/hash.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/hash.c	2017-03-06 11:13:57.000000000 +0100
@@ -3,31 +3,35 @@
 #include "cmptest.h"
 
 static unsigned char x[] = "testing\n";
-static unsigned char x2[] = "The Conscience of a Hacker is a small essay written January 8, 1986 by a computer security hacker who went by the handle of The Mentor, who belonged to the 2nd generation of Legion of Doom.";
+static unsigned char x2[] =
+    "The Conscience of a Hacker is a small essay written January 8, 1986 by a "
+    "computer security hacker who went by the handle of The Mentor, who "
+    "belonged to the 2nd generation of Legion of Doom.";
 static unsigned char h[crypto_hash_BYTES];
 
-int main(void)
+int
+main(void)
 {
     size_t i;
 
     crypto_hash(h, x, sizeof x - 1U);
     for (i = 0; i < crypto_hash_BYTES; ++i) {
-        printf("%02x", (unsigned int)h[i]);
+        printf("%02x", (unsigned int) h[i]);
     }
     printf("\n");
     crypto_hash(h, x2, sizeof x2 - 1U);
     for (i = 0; i < crypto_hash_BYTES; ++i) {
-        printf("%02x", (unsigned int)h[i]);
+        printf("%02x", (unsigned int) h[i]);
     }
     printf("\n");
     crypto_hash_sha256(h, x, sizeof x - 1U);
     for (i = 0; i < crypto_hash_sha256_BYTES; ++i) {
-        printf("%02x", (unsigned int)h[i]);
+        printf("%02x", (unsigned int) h[i]);
     }
     printf("\n");
     crypto_hash_sha256(h, x2, sizeof x2 - 1U);
     for (i = 0; i < crypto_hash_sha256_BYTES; ++i) {
-        printf("%02x", (unsigned int)h[i]);
+        printf("%02x", (unsigned int) h[i]);
     }
     printf("\n");
 
diff -urpN libsodium-1.0.11/test/default/kdf.c libsodium-1.0.12/test/default/kdf.c
--- libsodium-1.0.11/test/default/kdf.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/kdf.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,61 @@
+
+#define TEST_NAME "kdf"
+#include "cmptest.h"
+
+static void
+tv_kdf(void)
+{
+    unsigned char *master_key;
+    unsigned char *subkey;
+    char          *context;
+    char           hex[crypto_kdf_BYTES_MAX * 2 + 1];
+    uint64_t       i;
+
+    context = (char *) sodium_malloc(crypto_kdf_CONTEXTBYTES);
+    memcpy(context, "KDF test", strlen("KDF test"));
+    master_key = (unsigned char *) sodium_malloc(crypto_kdf_KEYBYTES);
+    for (i = 0; i < crypto_kdf_KEYBYTES; i++) {
+        master_key[i] = i;
+    }
+    subkey = (unsigned char *) sodium_malloc(crypto_kdf_BYTES_MAX);
+    for (i = 0; i < 10; i++) {
+        assert(crypto_kdf_blake2b_derive_from_key(subkey, crypto_kdf_BYTES_MAX,
+                                                  i, context, master_key) == 0);
+        sodium_bin2hex(hex, sizeof hex, subkey, crypto_kdf_BYTES_MAX);
+        printf("%s\n", hex);
+    }
+    sodium_free(subkey);
+
+    for (i = 0; i < crypto_kdf_BYTES_MAX + 2; i++) {
+        subkey = (unsigned char *) sodium_malloc(crypto_kdf_BYTES_MAX);
+        if (crypto_kdf_blake2b_derive_from_key(subkey, (size_t) i,
+                                               i, context, master_key) == 0) {
+            sodium_bin2hex(hex, sizeof hex, subkey, (size_t) i);
+            printf("%s\n", hex);
+        } else {
+            printf("Failure -- probably expected for output length=%u\n",
+                   (unsigned int) i);
+        }
+        sodium_free(subkey);
+    }
+
+    assert(strcmp(crypto_kdf_primitive(), crypto_kdf_PRIMITIVE) == 0);
+    assert(crypto_kdf_BYTES_MAX > 0);
+    assert(crypto_kdf_BYTES_MIN <= crypto_kdf_BYTES_MAX);
+    assert(crypto_kdf_bytes_min() == crypto_kdf_BYTES_MIN);
+    assert(crypto_kdf_bytes_max() == crypto_kdf_BYTES_MAX);
+    assert(crypto_kdf_CONTEXTBYTES > 0);
+    assert(crypto_kdf_contextbytes() == crypto_kdf_CONTEXTBYTES);
+    assert(crypto_kdf_KEYBYTES >= 16);
+    assert(crypto_kdf_keybytes() == crypto_kdf_KEYBYTES);
+
+    printf("tv_kdf: ok\n");
+}
+
+int
+main(void)
+{
+    tv_kdf();
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/test/default/kdf.exp libsodium-1.0.12/test/default/kdf.exp
--- libsodium-1.0.11/test/default/kdf.exp	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/kdf.exp	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,77 @@
+a0c724404728c8bb95e5433eb6a9716171144d61efb23e74b873fcbeda51d8071b5d70aae12066dfc94ce943f145aa176c055040c3dd73b0a15e36254d450614
+02507f144fa9bf19010bf7c70b235b4c2663cc00e074f929602a5e2c10a780757d2a3993d06debc378a90efdac196dd841817b977d67b786804f6d3cd585bab5
+1944da61ff18dc2028c3578ac85be904931b83860896598f62468f1cb5471c6a344c945dbc62c9aaf70feb62472d17775ea5db6ed5494c68b7a9a59761f39614
+131c0ca1633ed074986215b264f6e0474f362c52b029effc7b0f75977ee89cc95d85c3db87f7e399197a25411592beeeb7e5128a74646a460ecd6deb4994b71e
+a7023a0bf9be245d078aed26bcde0465ff0cc0961196a5482a0ff4ff8b4015971e13611f50529cb408f5776b14a90e7c3dd9160a22211db64ff4b5c0b9953680
+50f49313f3a05b2e565c13feedb44daa675cafd42c2b2cf9edbce9c949fbfc3f175dcb738671509ae2ea66fb85e552394d479afa7fa3affe8791744796b94176
+13b58d6d69780089293862cd59a1a8a4ef79bb850e3f3ba41fb22446a7dd1dc4da4667d37b33bf1225dcf8173c4c349a5d911c5bd2db9c5905ed70c11e809e3b
+15d44b4b44ffa006eeceeb508c98a970aaa573d65905687b9e15854dec6d49c612757e149f78268f727660dedf9abce22a9691feb20a01b0525f4b47a3cf19db
+9aebba11c5428ae8225716369e30a48943be39159a899f804e9963ef78822e186c21fe95bb0b85e60ef03a6f58d0b9d06e91f79d0ab998450b8810c73ca935b4
+70f9b83e463fb441e7a4c43275125cd5b19d8e2e4a5d179a39f5db10bbce745a199104563d308cf8d4c6b27bbb759ded232f5bdb7c367dd632a9677320dfe416
+Failure -- probably expected for output length=0
+Failure -- probably expected for output length=1
+Failure -- probably expected for output length=2
+Failure -- probably expected for output length=3
+Failure -- probably expected for output length=4
+Failure -- probably expected for output length=5
+Failure -- probably expected for output length=6
+Failure -- probably expected for output length=7
+Failure -- probably expected for output length=8
+Failure -- probably expected for output length=9
+Failure -- probably expected for output length=10
+Failure -- probably expected for output length=11
+Failure -- probably expected for output length=12
+Failure -- probably expected for output length=13
+Failure -- probably expected for output length=14
+Failure -- probably expected for output length=15
+a529216624ef9161e4cf117272aafff2
+068bd6940b80c6cc2530a68c31d9f4e323
+0acf4f6c74a590c8a1c0997ec9a1a3f48b2a
+ac17a37ce74c0efece75f9337de20795dbadcc
+268214dc9477a2e3c1022829f934ab992a5a3d84
+33b76197b4531665e494760909eda1cc570e7da9bb
+3d4efbc569ca7f858ad4f49c56b820986a406e6eebbc
+983fea27520f507c40231f9557908f07c095bdf4a4ce5d
+94d678717625e011995c7355f2092267dee47bf0722dd380
+198901896c4f51e74ffa8b2805415c6eaba5accfc85a6e6b34
+4ffabb81d49021f85ef5d2a713ab02ae86bc2e7d1522f5e077fe
+eebc3d55b3f4fc8b64d2474063254da7db98e7398dfdd510e28075
+22c134b9d664e1bdb14dc309a936bf1512b19e4f5175642efb1a0df7
+4b179762bfc8e27a9e575113faa76247b9c046d6f22d5a02e2910a299b
+abc45eb2b031307b8822c7e59a43f4108850c34a7445936bc848422251c4
+d6565bd3265b6373f4f6a6b6458e981006da5e9d532ce94ca4737e188995e9
+154b291f11196737f8b7f491e4ca11764e0227d34f94295408a869f007aa8618
+e9dd395570e09ebb523ffc6ba098a38b17bc4944f14bd3725bdd7edbd8bcff54fb
+7248294d37159e85bacde68c7762a673794c91b811e05f4e3b9e3ecc82bfcf63a2cd
+d060ee4d93f8de6d9ae60fca9596413455183a1f83c7a2381227cec8f7a217e4072f85
+20790290347b9b0f413a954f40e52e270b3b45417e96c8733161672188701c08dd76cc3d
+7674188112a1ab8d3926d468be8e51d788ce4144bb20ff842034e4d1ddab3929a4f1a13a74
+a2ab1f980a47472d8a539f20410cc9bf143d941331ab2259ea73684c0608939c5b23e9cbcb3d
+f4cfbe3050f15ebbaf8d2f3bf3a678c01fc21ee1f4be07d0744c7fbf4835ea9d9472a3d785c24c
+66efa5dfe3efd4cc8ca25f2d622c97a20a192d7add965f26b002b7eb81aae4203c0e5f07fd945845
+ad5d8031055c96dc9db10285206d7edc38d3af85736df8a3b5fdd30a318e80c28d9b26c95a60fa3e68
+9107c8a57a2c9ca40158f33ca0bfb64c095d2f21ca98bb7138477599330a36cdfc2ae5751e370d0e024e
+b0c190177358b955ebebc5e0b86ec91dde3b6f1982ea4d68ec5ec3bdd6527c362e5275600b263601c98452
+31bfaaad4adde0f87d87372e398c42cb7befe065ab2957ebb91ef9dc534b410783899b2e1e84221286f3bab4
+2258dd1f3e516cb8e3d1f6c45808573c365192f073698939721af8961a02a8bdd002a31fd239b9498663a01f27
+7c7a88016610493bb44a9432a88b50f97e2e94383972ff95da826692d96c52d82f86899b3561ec9c95a8b1bf3213
+3929dc7473be4c633be9e08801a8abd284dc0c6154c5c81a4c18259699dd86753c5e14fbd723be46ebb04f4ab3058c
+30b720220015fa60daa69c83f9754d772b1b2dd12ab6baaa2f4edab458d4d251c1cddb8c4a554f3eb13969316b890fbd
+33fa2412a5c3294d49e964419e96d043a2099a72b3351e3bed0f07e12255c95b509ea9bf2963a4c0fe9cc2314dbc44f673
+ca891d2c82a6a8f833dc1a05f190bab6de221307eab1dd2c88341d4d2537a2fc0056b0d04d8104fd3fe89e1ea20877893e81
+fd78ac89a64d03672ad99d663f2613d15277cda1636e334a1706b7211ff1f3a3b3d2e671e391c75e3d242c482ce7e1b8b427ed
+36a6072743d3aafd3ee89344b9ef92cb58a2853ae92b20283520439fcb55afffd3d4b5e4e8c92a85d3cf74497bdcf68bbf1fcf93
+a90afcfaffec1105ad05fdaa9473fb5daf1bf8fb376b7326db46ef4c120c553188c69131933371d409eb56d66d5adca618e1dac65b
+9b990d1fcddbdb5e5c7a48a6a2a666e02e7d4d4a814ece40660d99e1c02d5f023c56ae82526fc6dc8c933d0add92fc376efcddd55a42
+ec545dcf456d1b0907c07418a42bf2b3d668b4797ba6874bf0d563f5f429a820f02177dd4d05e639a06807c9619fee54ffe07712493543
+b0106957626894586682a275f69ed4533e2f94334cc0430394b68d82679aca00dd579e712bdd2d7f5bbce9a050269739bd8427b75b06027f
+05751bfeebb480c9bca0d25d8197e2673845f405d7fb9793e29169ac19956c525f6e637f3d5ea50597b04342afed4ca16f988b4f21a34f1902
+7b4e4294d3f64085b5c09be73548f1f5cb5c6f04e57ce6cdd3077e2fb37640bf1ca0c6393b87d48a6b7e3e42628bd30fca132ded03ce51f71d9d
+082d248862cbfd71a634769a4b1cf52a4af47ace5b9ea4d583ca52207efc7234a6d321788130cbdec122579ad03afe00bc68c9fb3f68dd0532a96f
+a2b39b4428d981013e8a9c0e41b3eed504983fc18dc4b60332b1ab28b9705228147bdb95cc17889d5f0f9cfb7fd16f9d414b1a829346a8922e945b40
+efbf0f8bda1b9ef24fe389f1cf0c0c8a08bca03fc95badabb79a487d8ce1351683f59183aa6229f880d69ad60114ac128f69b2be250109972ab1f3fc3b
+dfe0ba2a6de25fa06b47375e9d9cf6c6fa1493a8a2a81c28d6e09bc161057b445659db76e92e349ff44f34a2a9e3bcaa6b84b21bae56f1499c170ab81af0
+02f9cbdb10759314515b01379c474ad74a1b575137bd3949776dbcfc3e18060cb13ee1f6dcf86035768fc7be63e01de321cacbfade209900dd94273fd8e176
+06ae14308eeeda62a00cb6d5edf18d1707029515db98f472bbf0617419301b1d4f4f2ab65849446be46f87e1d31c6c74283897b9976f70d8a16253ac927e0d9f
+Failure -- probably expected for output length=65
+tv_kdf: ok
diff -urpN libsodium-1.0.11/test/default/keygen.c libsodium-1.0.12/test/default/keygen.c
--- libsodium-1.0.11/test/default/keygen.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/keygen.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,64 @@
+
+#define TEST_NAME "keygen"
+#include "cmptest.h"
+
+typedef struct KeygenTV_ {
+    void (*fn)(unsigned char *k);
+    size_t key_len;
+} KeygenTV;
+
+static void
+tv_keygen(void)
+{
+    static const KeygenTV tvs[] = {
+        { crypto_auth_keygen, crypto_auth_KEYBYTES },
+        { crypto_auth_hmacsha256_keygen, crypto_auth_hmacsha256_KEYBYTES },
+        { crypto_aead_aes256gcm_keygen, crypto_aead_aes256gcm_KEYBYTES },
+        { crypto_auth_hmacsha512_keygen, crypto_auth_hmacsha512_KEYBYTES },
+        { crypto_auth_hmacsha512256_keygen, crypto_auth_hmacsha512256_KEYBYTES },
+        { crypto_generichash_keygen, crypto_generichash_KEYBYTES },
+        { crypto_generichash_blake2b_keygen, crypto_generichash_blake2b_KEYBYTES },
+        { crypto_kdf_keygen, crypto_kdf_KEYBYTES },
+        { crypto_onetimeauth_keygen, crypto_onetimeauth_KEYBYTES },
+        { crypto_onetimeauth_poly1305_keygen, crypto_onetimeauth_poly1305_KEYBYTES },
+        { crypto_aead_chacha20poly1305_ietf_keygen, crypto_aead_chacha20poly1305_ietf_KEYBYTES },
+        { crypto_aead_chacha20poly1305_keygen, crypto_aead_chacha20poly1305_KEYBYTES },
+        { crypto_secretbox_xsalsa20poly1305_keygen, crypto_secretbox_xsalsa20poly1305_KEYBYTES },
+        { crypto_secretbox_keygen, crypto_secretbox_KEYBYTES },
+        { crypto_shorthash_keygen, crypto_shorthash_KEYBYTES },
+        { crypto_stream_keygen, crypto_stream_KEYBYTES },
+        { crypto_stream_chacha20_keygen, crypto_stream_chacha20_KEYBYTES },
+        { crypto_stream_chacha20_ietf_keygen, crypto_stream_chacha20_ietf_KEYBYTES },
+        { crypto_stream_salsa20_keygen, crypto_stream_salsa20_KEYBYTES },
+        { crypto_stream_xsalsa20_keygen, crypto_stream_xsalsa20_KEYBYTES }
+    };
+    const KeygenTV *tv;
+    unsigned char  *key;
+    int             i;
+    int             j;
+
+    for (i = 0; i < (sizeof tvs) / (sizeof tvs[0]); i++) {
+        tv = &tvs[i];
+        key = (unsigned char *) sodium_malloc(tv->key_len);
+        key[tv->key_len - 1U] = 0;
+        for (j = 0; j < 10000; j++) {
+            tv->fn(key);
+            if (key[tv->key_len - 1U] != 0) {
+                break;
+            }
+        }
+        sodium_free(key);
+        if (j >= 10000) {
+            printf("Buffer underflow with test vector %d\n", i);
+        }
+    }
+    printf("tv_keygen: ok\n");
+}
+
+int
+main(void)
+{
+    tv_keygen();
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/test/default/keygen.exp libsodium-1.0.12/test/default/keygen.exp
--- libsodium-1.0.11/test/default/keygen.exp	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/keygen.exp	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1 @@
+tv_keygen: ok
diff -urpN libsodium-1.0.11/test/default/kx.c libsodium-1.0.12/test/default/kx.c
--- libsodium-1.0.11/test/default/kx.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/kx.c	2017-03-12 13:15:39.000000000 +0100
@@ -0,0 +1,119 @@
+
+#define TEST_NAME "kx"
+#include "cmptest.h"
+
+static void
+tv_kx(void)
+{
+    unsigned char *seed;
+    unsigned char *client_pk, *client_sk;
+    unsigned char *client_rx, *client_tx;
+    unsigned char *server_pk, *server_sk;
+    unsigned char *server_rx, *server_tx;
+    char           hex[65];
+    int            i;
+
+    seed = (unsigned char *) sodium_malloc(crypto_kx_SEEDBYTES);
+    for (i = 0; i < crypto_kx_SEEDBYTES; i++) {
+        seed[i] = (unsigned char) i;
+    }
+    client_pk = (unsigned char *) sodium_malloc(crypto_kx_PUBLICKEYBYTES);
+    client_sk = (unsigned char *) sodium_malloc(crypto_kx_SECRETKEYBYTES);
+    crypto_kx_seed_keypair(client_pk, client_sk, seed);
+
+    sodium_bin2hex(hex, sizeof hex, client_pk, crypto_kx_PUBLICKEYBYTES);
+    printf("client_pk: [%s]\n", hex);
+    sodium_bin2hex(hex, sizeof hex, client_sk, crypto_kx_SECRETKEYBYTES);
+    printf("client_sk: [%s]\n", hex);
+
+    server_pk = (unsigned char *) sodium_malloc(crypto_kx_PUBLICKEYBYTES);
+    server_sk = (unsigned char *) sodium_malloc(crypto_kx_SECRETKEYBYTES);
+    crypto_kx_keypair(server_pk, server_sk);
+
+    client_rx = (unsigned char *) sodium_malloc(crypto_kx_SESSIONKEYBYTES);
+    client_tx = (unsigned char *) sodium_malloc(crypto_kx_SESSIONKEYBYTES);
+
+    if (crypto_kx_client_session_keys(client_rx, client_tx,
+                                      client_pk, client_sk, server_pk) != 0) {
+        printf("crypto_kx_client_session_keys() failed\n");
+    }
+
+    server_rx = (unsigned char *) sodium_malloc(crypto_kx_SESSIONKEYBYTES);
+    server_tx = (unsigned char *) sodium_malloc(crypto_kx_SESSIONKEYBYTES);
+
+    if (crypto_kx_server_session_keys(server_rx, server_tx,
+                                      server_pk, server_sk, client_pk) != 0) {
+        printf("crypto_kx_server_session_keys() failed\n");
+    }
+    if (memcmp(server_rx, client_tx, crypto_kx_SESSIONKEYBYTES) != 0 ||
+        memcmp(server_tx, client_rx, crypto_kx_SESSIONKEYBYTES) != 0) {
+        printf("client session keys != server session keys\n");
+    }
+
+    sodium_increment(client_pk, crypto_kx_PUBLICKEYBYTES);
+    if (crypto_kx_server_session_keys(server_rx, server_tx,
+                                      server_pk, server_sk, client_pk) != 0) {
+        printf("crypto_kx_server_session_keys() failed\n");
+    }
+    if (memcmp(server_rx, client_tx, crypto_kx_SESSIONKEYBYTES) == 0 &&
+        memcmp(server_tx, client_rx, crypto_kx_SESSIONKEYBYTES) == 0) {
+        printf("peer's public key is ignored\n");
+    }
+
+    crypto_kx_keypair(client_pk, client_sk);
+    if (crypto_kx_server_session_keys(server_rx, server_tx,
+                                      server_pk, server_sk, client_pk) != 0) {
+        printf("crypto_kx_server_session_keys() failed\n");
+    }
+    if (memcmp(server_rx, client_tx, crypto_kx_SESSIONKEYBYTES) == 0 ||
+        memcmp(server_tx, client_rx, crypto_kx_SESSIONKEYBYTES) == 0) {
+        printf("session keys are constant\n");
+    }
+
+    crypto_kx_seed_keypair(client_pk, client_sk, seed);
+    sodium_increment(seed, crypto_kx_SEEDBYTES);
+    crypto_kx_seed_keypair(server_pk, server_sk, seed);
+    if (crypto_kx_server_session_keys(server_rx, server_tx,
+                                      server_pk, server_sk, client_pk) != 0) {
+        printf("crypto_kx_server_session_keys() failed\n");
+    }
+    sodium_bin2hex(hex, sizeof hex, server_rx, crypto_kx_SESSIONKEYBYTES);
+    printf("server_rx: [%s]\n", hex);
+    sodium_bin2hex(hex, sizeof hex, server_tx, crypto_kx_SESSIONKEYBYTES);
+    printf("server_tx: [%s]\n", hex);
+
+    if (crypto_kx_client_session_keys(client_rx, client_tx,
+                                      client_pk, client_sk, server_pk) != 0) {
+        printf("crypto_kx_client_session_keys() failed\n");
+    }
+    sodium_bin2hex(hex, sizeof hex, client_rx, crypto_kx_SESSIONKEYBYTES);
+    printf("client_rx: [%s]\n", hex);
+    sodium_bin2hex(hex, sizeof hex, client_tx, crypto_kx_SESSIONKEYBYTES);
+    printf("client_tx: [%s]\n", hex);
+
+    sodium_free(client_rx);
+    sodium_free(client_tx);
+    sodium_free(server_rx);
+    sodium_free(server_tx);
+    sodium_free(server_sk);
+    sodium_free(server_pk);
+    sodium_free(client_sk);
+    sodium_free(client_pk);
+    sodium_free(seed);
+
+    assert(strcmp(crypto_kx_primitive(), crypto_kx_PRIMITIVE) == 0);
+    assert(crypto_kx_publickeybytes() == crypto_kx_PUBLICKEYBYTES);
+    assert(crypto_kx_secretkeybytes() == crypto_kx_SECRETKEYBYTES);
+    assert(crypto_kx_seedbytes() == crypto_kx_SEEDBYTES);
+    assert(crypto_kx_sessionkeybytes() == crypto_kx_SESSIONKEYBYTES);
+
+    printf("tv_kx: ok\n");
+}
+
+int
+main(void)
+{
+    tv_kx();
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/test/default/kx.exp libsodium-1.0.12/test/default/kx.exp
--- libsodium-1.0.11/test/default/kx.exp	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/kx.exp	2017-03-12 13:15:39.000000000 +0100
@@ -0,0 +1,7 @@
+client_pk: [0e0216223f147143d32615a91189c288c1728cba3cc5f9f621b1026e03d83129]
+client_sk: [cb2f5160fc1f7e05a55ef49d340b48da2e5a78099d53393351cd579dd42503d6]
+server_rx: [62c8f4fa81800abd0577d99918d129b65deb789af8c8351f391feb0cbf238604]
+server_tx: [749519c68059bce69f7cfcc7b387a3de1a1e8237d110991323bf62870115731a]
+client_rx: [749519c68059bce69f7cfcc7b387a3de1a1e8237d110991323bf62870115731a]
+client_tx: [62c8f4fa81800abd0577d99918d129b65deb789af8c8351f391feb0cbf238604]
+tv_kx: ok
diff -urpN libsodium-1.0.11/test/default/Makefile.am libsodium-1.0.12/test/default/Makefile.am
--- libsodium-1.0.11/test/default/Makefile.am	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/Makefile.am	2017-03-12 12:24:58.000000000 +0100
@@ -5,6 +5,7 @@ EXTRA_DIST = \
 	pre.js.inc \
 	aead_aes256gcm.exp \
 	aead_chacha20poly1305.exp \
+	aead_xchacha20poly1305.exp \
 	auth.exp \
 	auth2.exp \
 	auth3.exp \
@@ -33,6 +34,9 @@ EXTRA_DIST = \
 	hash.exp \
 	hash2.exp \
 	hash3.exp \
+	kdf.exp \
+	keygen.exp \
+	kx.exp \
 	onetimeauth.exp \
 	onetimeauth2.exp \
 	onetimeauth7.exp \
@@ -53,6 +57,7 @@ EXTRA_DIST = \
 	secretbox_easy2.exp \
 	shorthash.exp \
 	sign.exp \
+	siphashx24.exp \
 	sodium_core.exp \
 	sodium_utils.exp \
 	sodium_utils2.exp \
@@ -62,11 +67,13 @@ EXTRA_DIST = \
 	stream2.exp \
 	stream3.exp \
 	stream4.exp \
-	verify1.exp
+	verify1.exp \
+	xchacha20.exp
 
 DISTCLEANFILES = \
 	aead_aes256gcm.res \
 	aead_chacha20poly1305.res \
+	aead_xchacha20poly1305.res \
 	auth.res \
 	auth2.res \
 	auth3.res \
@@ -95,6 +102,9 @@ DISTCLEANFILES = \
 	hash.res \
 	hash2.res \
 	hash3.res \
+	kdf.res \
+	keygen.res \
+	kx.res \
 	onetimeauth.res \
 	onetimeauth2.res \
 	onetimeauth7.res \
@@ -115,6 +125,7 @@ DISTCLEANFILES = \
 	secretbox_easy2.res \
 	shorthash.res \
 	sign.res \
+	siphashx24.res \
 	sodium_core.res \
 	sodium_utils.res \
 	sodium_utils2.res \
@@ -124,12 +135,14 @@ DISTCLEANFILES = \
 	stream2.res \
 	stream3.res \
 	stream4.res \
-	verify1.res
+	verify1.res \
+	xchacha20.res
 
 if NATIVECLIENT
 CLEANFILES = \
 	aead_aes256gcm.final \
 	aead_chacha20poly1305.final \
+	aead_xchacha20poly1305.final \
 	auth.final \
 	auth2.final \
 	auth3.final \
@@ -158,6 +171,9 @@ CLEANFILES = \
 	hash.final \
 	hash2.final \
 	hash3.final \
+	kdf.final \
+	keygen.final \
+	kx.final \
 	onetimeauth.final \
 	onetimeauth2.final \
 	onetimeauth7.final \
@@ -178,6 +194,7 @@ CLEANFILES = \
 	secretbox_easy2.final \
 	shorthash.final \
 	sign.final \
+	siphashx24.final \
 	sodium_core.final \
 	sodium_utils.final \
 	sodium_version.final \
@@ -186,8 +203,10 @@ CLEANFILES = \
 	stream3.final \
 	stream4.final \
 	verify1.final \
+	xchacha20.final \
 	aead_aes256gcm.nexe \
 	aead_chacha20poly1305.nexe \
+	aead_xchacha20poly1305.nexe \
 	auth.nexe \
 	auth2.nexe \
 	auth3.nexe \
@@ -216,6 +235,9 @@ CLEANFILES = \
 	hash.nexe \
 	hash2.nexe \
 	hash3.nexe \
+	kdf.nexe \
+	keygen.nexe \
+	kx.nexe \
 	onetimeauth.nexe \
 	onetimeauth2.nexe \
 	onetimeauth7.nexe \
@@ -236,6 +258,7 @@ CLEANFILES = \
 	secretbox_easy2.nexe \
 	shorthash.nexe \
 	sign.nexe \
+	siphashx24.nexe \
 	sodium_core.nexe \
 	sodium_utils.nexe \
 	sodium_version.nexe \
@@ -243,7 +266,8 @@ CLEANFILES = \
 	stream2.nexe \
 	stream3.nexe \
 	stream4.nexe \
-	verify1.nexe
+	verify1.nexe \
+	xchacha20.nexe
 endif
 
 AM_CPPFLAGS = \
@@ -259,6 +283,7 @@ AM_LDFLAGS = @TEST_LDFLAGS@
 TESTS_TARGETS = \
 	aead_aes256gcm \
 	aead_chacha20poly1305 \
+	aead_xchacha20poly1305 \
 	auth \
 	auth2 \
 	auth3 \
@@ -286,6 +311,9 @@ TESTS_TARGETS = \
 	generichash3 \
 	hash \
 	hash3 \
+	kdf \
+	keygen \
+	kx \
 	onetimeauth \
 	onetimeauth2 \
 	onetimeauth7 \
@@ -336,6 +364,9 @@ aead_aes256gcm_LDADD                  =
 aead_chacha20poly1305_SOURCE          = cmptest.h aead_chacha20poly1305.c
 aead_chacha20poly1305_LDADD           = $(TESTS_LDADD)
 
+aead_xchacha20poly1305_SOURCE         = cmptest.h aead_xchacha20poly1305.c
+aead_xchacha20poly1305_LDADD          = $(TESTS_LDADD)
+
 auth_SOURCE               = cmptest.h auth.c
 auth_LDADD                = $(TESTS_LDADD)
 
@@ -417,6 +448,15 @@ hash_LDADD                = $(TESTS_LDAD
 hash3_SOURCE              = cmptest.h hash3.c
 hash3_LDADD               = $(TESTS_LDADD)
 
+kdf_SOURCE                = cmptest.h kdf.c
+kdf_LDADD                 = $(TESTS_LDADD)
+
+keygen_SOURCE             = cmptest.h keygen.c
+keygen_LDADD              = $(TESTS_LDADD)
+
+kx_SOURCE                 = cmptest.h kx.c
+kx_LDADD                  = $(TESTS_LDADD)
+
 onetimeauth_SOURCE        = cmptest.h onetimeauth.c
 onetimeauth_LDADD         = $(TESTS_LDADD)
 
@@ -477,6 +517,9 @@ shorthash_LDADD           = $(TESTS_LDAD
 sign_SOURCE               = cmptest.h sign.c
 sign_LDADD                = $(TESTS_LDADD)
 
+siphashx24_SOURCE         = cmptest.h siphashx24.c
+siphashx24_LDADD          = $(TESTS_LDADD)
+
 sodium_core_SOURCE        = cmptest.h sodium_core.c
 sodium_core_LDADD         = $(TESTS_LDADD)
 
@@ -507,6 +550,15 @@ stream4_LDADD             = $(TESTS_LDAD
 verify1_SOURCE            = cmptest.h verify1.c
 verify1_LDADD             = $(TESTS_LDADD)
 
+xchacha20_SOURCE          = cmptest.h xchacha20.c
+xchacha20_LDADD           = $(TESTS_LDADD)
+
+if !MINIMAL
+TESTS_TARGETS += \
+	siphashx24 \
+	xchacha20
+endif
+
 if NATIVECLIENT
 LOG_COMPILER = ./nacl-test-wrapper.sh
 endif
diff -urpN libsodium-1.0.11/test/default/Makefile.in libsodium-1.0.12/test/default/Makefile.in
--- libsodium-1.0.11/test/default/Makefile.in	2016-07-31 16:34:39.000000000 +0200
+++ libsodium-1.0.12/test/default/Makefile.in	2017-03-12 20:17:08.000000000 +0100
@@ -91,8 +91,12 @@ host_triplet = @host@
 @EMSCRIPTEN_FALSE@@NATIVECLIENT_FALSE@	sodium_utils2 \
 @EMSCRIPTEN_FALSE@@NATIVECLIENT_FALSE@	sodium_utils3
 
-check_PROGRAMS = $(am__EXEEXT_2)
-TESTS = $(am__EXEEXT_2)
+check_PROGRAMS = $(am__EXEEXT_3)
+TESTS = $(am__EXEEXT_3)
+@MINIMAL_FALSE@am__append_2 = \
+@MINIMAL_FALSE@	siphashx24 \
+@MINIMAL_FALSE@	xchacha20
+
 subdir = test/default
 ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/m4/ax_check_compile_flag.m4 \
@@ -113,16 +117,18 @@ CONFIG_CLEAN_VPATH_FILES =
 @EMSCRIPTEN_FALSE@@NATIVECLIENT_FALSE@am__EXEEXT_1 =  \
 @EMSCRIPTEN_FALSE@@NATIVECLIENT_FALSE@	sodium_utils2$(EXEEXT) \
 @EMSCRIPTEN_FALSE@@NATIVECLIENT_FALSE@	sodium_utils3$(EXEEXT)
-am__EXEEXT_2 = aead_aes256gcm$(EXEEXT) aead_chacha20poly1305$(EXEEXT) \
-	auth$(EXEEXT) auth2$(EXEEXT) auth3$(EXEEXT) auth5$(EXEEXT) \
-	auth6$(EXEEXT) auth7$(EXEEXT) box$(EXEEXT) box2$(EXEEXT) \
-	box7$(EXEEXT) box8$(EXEEXT) box_easy$(EXEEXT) \
-	box_easy2$(EXEEXT) box_seal$(EXEEXT) box_seed$(EXEEXT) \
-	chacha20$(EXEEXT) core1$(EXEEXT) core2$(EXEEXT) core3$(EXEEXT) \
-	core4$(EXEEXT) core5$(EXEEXT) core6$(EXEEXT) \
-	ed25519_convert$(EXEEXT) generichash$(EXEEXT) \
+@MINIMAL_FALSE@am__EXEEXT_2 = siphashx24$(EXEEXT) xchacha20$(EXEEXT)
+am__EXEEXT_3 = aead_aes256gcm$(EXEEXT) aead_chacha20poly1305$(EXEEXT) \
+	aead_xchacha20poly1305$(EXEEXT) auth$(EXEEXT) auth2$(EXEEXT) \
+	auth3$(EXEEXT) auth5$(EXEEXT) auth6$(EXEEXT) auth7$(EXEEXT) \
+	box$(EXEEXT) box2$(EXEEXT) box7$(EXEEXT) box8$(EXEEXT) \
+	box_easy$(EXEEXT) box_easy2$(EXEEXT) box_seal$(EXEEXT) \
+	box_seed$(EXEEXT) chacha20$(EXEEXT) core1$(EXEEXT) \
+	core2$(EXEEXT) core3$(EXEEXT) core4$(EXEEXT) core5$(EXEEXT) \
+	core6$(EXEEXT) ed25519_convert$(EXEEXT) generichash$(EXEEXT) \
 	generichash2$(EXEEXT) generichash3$(EXEEXT) hash$(EXEEXT) \
-	hash3$(EXEEXT) onetimeauth$(EXEEXT) onetimeauth2$(EXEEXT) \
+	hash3$(EXEEXT) kdf$(EXEEXT) keygen$(EXEEXT) kx$(EXEEXT) \
+	onetimeauth$(EXEEXT) onetimeauth2$(EXEEXT) \
 	onetimeauth7$(EXEEXT) pwhash$(EXEEXT) pwhash_scrypt$(EXEEXT) \
 	pwhash_scrypt_ll$(EXEEXT) randombytes$(EXEEXT) \
 	scalarmult$(EXEEXT) scalarmult2$(EXEEXT) scalarmult5$(EXEEXT) \
@@ -132,7 +138,7 @@ am__EXEEXT_2 = aead_aes256gcm$(EXEEXT) a
 	shorthash$(EXEEXT) sign$(EXEEXT) sodium_core$(EXEEXT) \
 	sodium_utils$(EXEEXT) sodium_version$(EXEEXT) stream$(EXEEXT) \
 	stream2$(EXEEXT) stream3$(EXEEXT) stream4$(EXEEXT) \
-	verify1$(EXEEXT) $(am__EXEEXT_1)
+	verify1$(EXEEXT) $(am__EXEEXT_1) $(am__EXEEXT_2)
 aead_aes256gcm_SOURCES = aead_aes256gcm.c
 aead_aes256gcm_OBJECTS = aead_aes256gcm.$(OBJEXT)
 aead_aes256gcm_DEPENDENCIES = $(TESTS_LDADD)
@@ -143,6 +149,9 @@ am__v_lt_1 =
 aead_chacha20poly1305_SOURCES = aead_chacha20poly1305.c
 aead_chacha20poly1305_OBJECTS = aead_chacha20poly1305.$(OBJEXT)
 aead_chacha20poly1305_DEPENDENCIES = $(TESTS_LDADD)
+aead_xchacha20poly1305_SOURCES = aead_xchacha20poly1305.c
+aead_xchacha20poly1305_OBJECTS = aead_xchacha20poly1305.$(OBJEXT)
+aead_xchacha20poly1305_DEPENDENCIES = $(TESTS_LDADD)
 auth_SOURCES = auth.c
 auth_OBJECTS = auth.$(OBJEXT)
 auth_DEPENDENCIES = $(TESTS_LDADD)
@@ -224,6 +233,15 @@ hash_DEPENDENCIES = $(TESTS_LDADD)
 hash3_SOURCES = hash3.c
 hash3_OBJECTS = hash3.$(OBJEXT)
 hash3_DEPENDENCIES = $(TESTS_LDADD)
+kdf_SOURCES = kdf.c
+kdf_OBJECTS = kdf.$(OBJEXT)
+kdf_DEPENDENCIES = $(TESTS_LDADD)
+keygen_SOURCES = keygen.c
+keygen_OBJECTS = keygen.$(OBJEXT)
+keygen_DEPENDENCIES = $(TESTS_LDADD)
+kx_SOURCES = kx.c
+kx_OBJECTS = kx.$(OBJEXT)
+kx_DEPENDENCIES = $(TESTS_LDADD)
 onetimeauth_SOURCES = onetimeauth.c
 onetimeauth_OBJECTS = onetimeauth.$(OBJEXT)
 onetimeauth_DEPENDENCIES = $(TESTS_LDADD)
@@ -284,6 +302,9 @@ shorthash_DEPENDENCIES = $(TESTS_LDADD)
 sign_SOURCES = sign.c
 sign_OBJECTS = sign.$(OBJEXT)
 sign_DEPENDENCIES = $(TESTS_LDADD)
+siphashx24_SOURCES = siphashx24.c
+siphashx24_OBJECTS = siphashx24.$(OBJEXT)
+siphashx24_DEPENDENCIES = $(TESTS_LDADD)
 sodium_core_SOURCES = sodium_core.c
 sodium_core_OBJECTS = sodium_core.$(OBJEXT)
 sodium_core_DEPENDENCIES = $(TESTS_LDADD)
@@ -314,6 +335,9 @@ stream4_DEPENDENCIES = $(TESTS_LDADD)
 verify1_SOURCES = verify1.c
 verify1_OBJECTS = verify1.$(OBJEXT)
 verify1_DEPENDENCIES = $(TESTS_LDADD)
+xchacha20_SOURCES = xchacha20.c
+xchacha20_OBJECTS = xchacha20.$(OBJEXT)
+xchacha20_DEPENDENCIES = $(TESTS_LDADD)
 AM_V_P = $(am__v_P_@AM_V@)
 am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
 am__v_P_0 = false
@@ -348,32 +372,34 @@ AM_V_CCLD = $(am__v_CCLD_@AM_V@)
 am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
 am__v_CCLD_0 = @echo "  CCLD    " $@;
 am__v_CCLD_1 = 
-SOURCES = aead_aes256gcm.c aead_chacha20poly1305.c auth.c auth2.c \
-	auth3.c auth5.c auth6.c auth7.c box.c box2.c box7.c box8.c \
-	box_easy.c box_easy2.c box_seal.c box_seed.c chacha20.c \
-	core1.c core2.c core3.c core4.c core5.c core6.c \
-	ed25519_convert.c generichash.c generichash2.c generichash3.c \
-	hash.c hash3.c onetimeauth.c onetimeauth2.c onetimeauth7.c \
-	pwhash.c pwhash_scrypt.c pwhash_scrypt_ll.c randombytes.c \
-	scalarmult.c scalarmult2.c scalarmult5.c scalarmult6.c \
-	scalarmult7.c secretbox.c secretbox2.c secretbox7.c \
-	secretbox8.c secretbox_easy.c secretbox_easy2.c shorthash.c \
-	sign.c sodium_core.c sodium_utils.c sodium_utils2.c \
-	sodium_utils3.c sodium_version.c stream.c stream2.c stream3.c \
-	stream4.c verify1.c
-DIST_SOURCES = aead_aes256gcm.c aead_chacha20poly1305.c auth.c auth2.c \
-	auth3.c auth5.c auth6.c auth7.c box.c box2.c box7.c box8.c \
-	box_easy.c box_easy2.c box_seal.c box_seed.c chacha20.c \
-	core1.c core2.c core3.c core4.c core5.c core6.c \
-	ed25519_convert.c generichash.c generichash2.c generichash3.c \
-	hash.c hash3.c onetimeauth.c onetimeauth2.c onetimeauth7.c \
-	pwhash.c pwhash_scrypt.c pwhash_scrypt_ll.c randombytes.c \
-	scalarmult.c scalarmult2.c scalarmult5.c scalarmult6.c \
-	scalarmult7.c secretbox.c secretbox2.c secretbox7.c \
-	secretbox8.c secretbox_easy.c secretbox_easy2.c shorthash.c \
-	sign.c sodium_core.c sodium_utils.c sodium_utils2.c \
-	sodium_utils3.c sodium_version.c stream.c stream2.c stream3.c \
-	stream4.c verify1.c
+SOURCES = aead_aes256gcm.c aead_chacha20poly1305.c \
+	aead_xchacha20poly1305.c auth.c auth2.c auth3.c auth5.c \
+	auth6.c auth7.c box.c box2.c box7.c box8.c box_easy.c \
+	box_easy2.c box_seal.c box_seed.c chacha20.c core1.c core2.c \
+	core3.c core4.c core5.c core6.c ed25519_convert.c \
+	generichash.c generichash2.c generichash3.c hash.c hash3.c \
+	kdf.c keygen.c kx.c onetimeauth.c onetimeauth2.c \
+	onetimeauth7.c pwhash.c pwhash_scrypt.c pwhash_scrypt_ll.c \
+	randombytes.c scalarmult.c scalarmult2.c scalarmult5.c \
+	scalarmult6.c scalarmult7.c secretbox.c secretbox2.c \
+	secretbox7.c secretbox8.c secretbox_easy.c secretbox_easy2.c \
+	shorthash.c sign.c siphashx24.c sodium_core.c sodium_utils.c \
+	sodium_utils2.c sodium_utils3.c sodium_version.c stream.c \
+	stream2.c stream3.c stream4.c verify1.c xchacha20.c
+DIST_SOURCES = aead_aes256gcm.c aead_chacha20poly1305.c \
+	aead_xchacha20poly1305.c auth.c auth2.c auth3.c auth5.c \
+	auth6.c auth7.c box.c box2.c box7.c box8.c box_easy.c \
+	box_easy2.c box_seal.c box_seed.c chacha20.c core1.c core2.c \
+	core3.c core4.c core5.c core6.c ed25519_convert.c \
+	generichash.c generichash2.c generichash3.c hash.c hash3.c \
+	kdf.c keygen.c kx.c onetimeauth.c onetimeauth2.c \
+	onetimeauth7.c pwhash.c pwhash_scrypt.c pwhash_scrypt_ll.c \
+	randombytes.c scalarmult.c scalarmult2.c scalarmult5.c \
+	scalarmult6.c scalarmult7.c secretbox.c secretbox2.c \
+	secretbox7.c secretbox8.c secretbox_easy.c secretbox_easy2.c \
+	shorthash.c sign.c siphashx24.c sodium_core.c sodium_utils.c \
+	sodium_utils2.c sodium_utils3.c sodium_version.c stream.c \
+	stream2.c stream3.c stream4.c verify1.c xchacha20.c
 am__can_run_installinfo = \
   case $$AM_UPDATE_INFO_DIR in \
     n|no|NO) false;; \
@@ -694,6 +720,7 @@ SAFECODE_HOME = @SAFECODE_HOME@
 SED = @SED@
 SET_MAKE = @SET_MAKE@
 SHELL = @SHELL@
+SODIUM_LIBRARY_MINIMAL_DEF = @SODIUM_LIBRARY_MINIMAL_DEF@
 SODIUM_LIBRARY_VERSION = @SODIUM_LIBRARY_VERSION@
 SODIUM_LIBRARY_VERSION_MAJOR = @SODIUM_LIBRARY_VERSION_MAJOR@
 SODIUM_LIBRARY_VERSION_MINOR = @SODIUM_LIBRARY_VERSION_MINOR@
@@ -765,6 +792,7 @@ EXTRA_DIST = \
 	pre.js.inc \
 	aead_aes256gcm.exp \
 	aead_chacha20poly1305.exp \
+	aead_xchacha20poly1305.exp \
 	auth.exp \
 	auth2.exp \
 	auth3.exp \
@@ -793,6 +821,9 @@ EXTRA_DIST = \
 	hash.exp \
 	hash2.exp \
 	hash3.exp \
+	kdf.exp \
+	keygen.exp \
+	kx.exp \
 	onetimeauth.exp \
 	onetimeauth2.exp \
 	onetimeauth7.exp \
@@ -813,6 +844,7 @@ EXTRA_DIST = \
 	secretbox_easy2.exp \
 	shorthash.exp \
 	sign.exp \
+	siphashx24.exp \
 	sodium_core.exp \
 	sodium_utils.exp \
 	sodium_utils2.exp \
@@ -822,11 +854,13 @@ EXTRA_DIST = \
 	stream2.exp \
 	stream3.exp \
 	stream4.exp \
-	verify1.exp
+	verify1.exp \
+	xchacha20.exp
 
 DISTCLEANFILES = \
 	aead_aes256gcm.res \
 	aead_chacha20poly1305.res \
+	aead_xchacha20poly1305.res \
 	auth.res \
 	auth2.res \
 	auth3.res \
@@ -855,6 +889,9 @@ DISTCLEANFILES = \
 	hash.res \
 	hash2.res \
 	hash3.res \
+	kdf.res \
+	keygen.res \
+	kx.res \
 	onetimeauth.res \
 	onetimeauth2.res \
 	onetimeauth7.res \
@@ -875,6 +912,7 @@ DISTCLEANFILES = \
 	secretbox_easy2.res \
 	shorthash.res \
 	sign.res \
+	siphashx24.res \
 	sodium_core.res \
 	sodium_utils.res \
 	sodium_utils2.res \
@@ -884,11 +922,13 @@ DISTCLEANFILES = \
 	stream2.res \
 	stream3.res \
 	stream4.res \
-	verify1.res
+	verify1.res \
+	xchacha20.res
 
 @NATIVECLIENT_TRUE@CLEANFILES = \
 @NATIVECLIENT_TRUE@	aead_aes256gcm.final \
 @NATIVECLIENT_TRUE@	aead_chacha20poly1305.final \
+@NATIVECLIENT_TRUE@	aead_xchacha20poly1305.final \
 @NATIVECLIENT_TRUE@	auth.final \
 @NATIVECLIENT_TRUE@	auth2.final \
 @NATIVECLIENT_TRUE@	auth3.final \
@@ -917,6 +957,9 @@ DISTCLEANFILES = \
 @NATIVECLIENT_TRUE@	hash.final \
 @NATIVECLIENT_TRUE@	hash2.final \
 @NATIVECLIENT_TRUE@	hash3.final \
+@NATIVECLIENT_TRUE@	kdf.final \
+@NATIVECLIENT_TRUE@	keygen.final \
+@NATIVECLIENT_TRUE@	kx.final \
 @NATIVECLIENT_TRUE@	onetimeauth.final \
 @NATIVECLIENT_TRUE@	onetimeauth2.final \
 @NATIVECLIENT_TRUE@	onetimeauth7.final \
@@ -937,6 +980,7 @@ DISTCLEANFILES = \
 @NATIVECLIENT_TRUE@	secretbox_easy2.final \
 @NATIVECLIENT_TRUE@	shorthash.final \
 @NATIVECLIENT_TRUE@	sign.final \
+@NATIVECLIENT_TRUE@	siphashx24.final \
 @NATIVECLIENT_TRUE@	sodium_core.final \
 @NATIVECLIENT_TRUE@	sodium_utils.final \
 @NATIVECLIENT_TRUE@	sodium_version.final \
@@ -945,8 +989,10 @@ DISTCLEANFILES = \
 @NATIVECLIENT_TRUE@	stream3.final \
 @NATIVECLIENT_TRUE@	stream4.final \
 @NATIVECLIENT_TRUE@	verify1.final \
+@NATIVECLIENT_TRUE@	xchacha20.final \
 @NATIVECLIENT_TRUE@	aead_aes256gcm.nexe \
 @NATIVECLIENT_TRUE@	aead_chacha20poly1305.nexe \
+@NATIVECLIENT_TRUE@	aead_xchacha20poly1305.nexe \
 @NATIVECLIENT_TRUE@	auth.nexe \
 @NATIVECLIENT_TRUE@	auth2.nexe \
 @NATIVECLIENT_TRUE@	auth3.nexe \
@@ -975,6 +1021,9 @@ DISTCLEANFILES = \
 @NATIVECLIENT_TRUE@	hash.nexe \
 @NATIVECLIENT_TRUE@	hash2.nexe \
 @NATIVECLIENT_TRUE@	hash3.nexe \
+@NATIVECLIENT_TRUE@	kdf.nexe \
+@NATIVECLIENT_TRUE@	keygen.nexe \
+@NATIVECLIENT_TRUE@	kx.nexe \
 @NATIVECLIENT_TRUE@	onetimeauth.nexe \
 @NATIVECLIENT_TRUE@	onetimeauth2.nexe \
 @NATIVECLIENT_TRUE@	onetimeauth7.nexe \
@@ -995,6 +1044,7 @@ DISTCLEANFILES = \
 @NATIVECLIENT_TRUE@	secretbox_easy2.nexe \
 @NATIVECLIENT_TRUE@	shorthash.nexe \
 @NATIVECLIENT_TRUE@	sign.nexe \
+@NATIVECLIENT_TRUE@	siphashx24.nexe \
 @NATIVECLIENT_TRUE@	sodium_core.nexe \
 @NATIVECLIENT_TRUE@	sodium_utils.nexe \
 @NATIVECLIENT_TRUE@	sodium_version.nexe \
@@ -1002,7 +1052,8 @@ DISTCLEANFILES = \
 @NATIVECLIENT_TRUE@	stream2.nexe \
 @NATIVECLIENT_TRUE@	stream3.nexe \
 @NATIVECLIENT_TRUE@	stream4.nexe \
-@NATIVECLIENT_TRUE@	verify1.nexe
+@NATIVECLIENT_TRUE@	verify1.nexe \
+@NATIVECLIENT_TRUE@	xchacha20.nexe
 
 AM_CPPFLAGS = \
 	-DTEST_SRCDIR=\"@srcdir@\" \
@@ -1013,17 +1064,17 @@ AM_CPPFLAGS = \
 	-I$(top_srcdir)/test/quirks
 
 AM_LDFLAGS = @TEST_LDFLAGS@
-TESTS_TARGETS = aead_aes256gcm aead_chacha20poly1305 auth auth2 auth3 \
-	auth5 auth6 auth7 box box2 box7 box8 box_easy box_easy2 \
-	box_seal box_seed chacha20 core1 core2 core3 core4 core5 core6 \
-	ed25519_convert generichash generichash2 generichash3 hash \
-	hash3 onetimeauth onetimeauth2 onetimeauth7 pwhash \
-	pwhash_scrypt pwhash_scrypt_ll randombytes scalarmult \
-	scalarmult2 scalarmult5 scalarmult6 scalarmult7 secretbox \
-	secretbox2 secretbox7 secretbox8 secretbox_easy \
-	secretbox_easy2 shorthash sign sodium_core sodium_utils \
-	sodium_version stream stream2 stream3 stream4 verify1 \
-	$(am__append_1)
+TESTS_TARGETS = aead_aes256gcm aead_chacha20poly1305 \
+	aead_xchacha20poly1305 auth auth2 auth3 auth5 auth6 auth7 box \
+	box2 box7 box8 box_easy box_easy2 box_seal box_seed chacha20 \
+	core1 core2 core3 core4 core5 core6 ed25519_convert \
+	generichash generichash2 generichash3 hash hash3 kdf keygen kx \
+	onetimeauth onetimeauth2 onetimeauth7 pwhash pwhash_scrypt \
+	pwhash_scrypt_ll randombytes scalarmult scalarmult2 \
+	scalarmult5 scalarmult6 scalarmult7 secretbox secretbox2 \
+	secretbox7 secretbox8 secretbox_easy secretbox_easy2 shorthash \
+	sign sodium_core sodium_utils sodium_version stream stream2 \
+	stream3 stream4 verify1 $(am__append_1) $(am__append_2)
 TESTS_LDADD = \
 	${top_builddir}/src/libsodium/libsodium.la
 
@@ -1031,6 +1082,8 @@ aead_aes256gcm_SOURCE = cmptest.h aead_a
 aead_aes256gcm_LDADD = $(TESTS_LDADD)
 aead_chacha20poly1305_SOURCE = cmptest.h aead_chacha20poly1305.c
 aead_chacha20poly1305_LDADD = $(TESTS_LDADD)
+aead_xchacha20poly1305_SOURCE = cmptest.h aead_xchacha20poly1305.c
+aead_xchacha20poly1305_LDADD = $(TESTS_LDADD)
 auth_SOURCE = cmptest.h auth.c
 auth_LDADD = $(TESTS_LDADD)
 auth2_SOURCE = cmptest.h auth2.c
@@ -1085,6 +1138,12 @@ hash_SOURCE = cmptest.h hash.c
 hash_LDADD = $(TESTS_LDADD)
 hash3_SOURCE = cmptest.h hash3.c
 hash3_LDADD = $(TESTS_LDADD)
+kdf_SOURCE = cmptest.h kdf.c
+kdf_LDADD = $(TESTS_LDADD)
+keygen_SOURCE = cmptest.h keygen.c
+keygen_LDADD = $(TESTS_LDADD)
+kx_SOURCE = cmptest.h kx.c
+kx_LDADD = $(TESTS_LDADD)
 onetimeauth_SOURCE = cmptest.h onetimeauth.c
 onetimeauth_LDADD = $(TESTS_LDADD)
 onetimeauth2_SOURCE = cmptest.h onetimeauth2.c
@@ -1125,6 +1184,8 @@ shorthash_SOURCE = cmptest.h shorthash.c
 shorthash_LDADD = $(TESTS_LDADD)
 sign_SOURCE = cmptest.h sign.c
 sign_LDADD = $(TESTS_LDADD)
+siphashx24_SOURCE = cmptest.h siphashx24.c
+siphashx24_LDADD = $(TESTS_LDADD)
 sodium_core_SOURCE = cmptest.h sodium_core.c
 sodium_core_LDADD = $(TESTS_LDADD)
 sodium_utils_SOURCE = cmptest.h sodium_utils.c
@@ -1145,6 +1206,8 @@ stream4_SOURCE = cmptest.h stream4.c
 stream4_LDADD = $(TESTS_LDADD)
 verify1_SOURCE = cmptest.h verify1.c
 verify1_LDADD = $(TESTS_LDADD)
+xchacha20_SOURCE = cmptest.h xchacha20.c
+xchacha20_LDADD = $(TESTS_LDADD)
 @NATIVECLIENT_TRUE@LOG_COMPILER = ./nacl-test-wrapper.sh
 all: all-am
 
@@ -1197,6 +1260,10 @@ aead_chacha20poly1305$(EXEEXT): $(aead_c
 	@rm -f aead_chacha20poly1305$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(aead_chacha20poly1305_OBJECTS) $(aead_chacha20poly1305_LDADD) $(LIBS)
 
+aead_xchacha20poly1305$(EXEEXT): $(aead_xchacha20poly1305_OBJECTS) $(aead_xchacha20poly1305_DEPENDENCIES) $(EXTRA_aead_xchacha20poly1305_DEPENDENCIES) 
+	@rm -f aead_xchacha20poly1305$(EXEEXT)
+	$(AM_V_CCLD)$(LINK) $(aead_xchacha20poly1305_OBJECTS) $(aead_xchacha20poly1305_LDADD) $(LIBS)
+
 auth$(EXEEXT): $(auth_OBJECTS) $(auth_DEPENDENCIES) $(EXTRA_auth_DEPENDENCIES) 
 	@rm -f auth$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(auth_OBJECTS) $(auth_LDADD) $(LIBS)
@@ -1305,6 +1372,18 @@ hash3$(EXEEXT): $(hash3_OBJECTS) $(hash3
 	@rm -f hash3$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(hash3_OBJECTS) $(hash3_LDADD) $(LIBS)
 
+kdf$(EXEEXT): $(kdf_OBJECTS) $(kdf_DEPENDENCIES) $(EXTRA_kdf_DEPENDENCIES) 
+	@rm -f kdf$(EXEEXT)
+	$(AM_V_CCLD)$(LINK) $(kdf_OBJECTS) $(kdf_LDADD) $(LIBS)
+
+keygen$(EXEEXT): $(keygen_OBJECTS) $(keygen_DEPENDENCIES) $(EXTRA_keygen_DEPENDENCIES) 
+	@rm -f keygen$(EXEEXT)
+	$(AM_V_CCLD)$(LINK) $(keygen_OBJECTS) $(keygen_LDADD) $(LIBS)
+
+kx$(EXEEXT): $(kx_OBJECTS) $(kx_DEPENDENCIES) $(EXTRA_kx_DEPENDENCIES) 
+	@rm -f kx$(EXEEXT)
+	$(AM_V_CCLD)$(LINK) $(kx_OBJECTS) $(kx_LDADD) $(LIBS)
+
 onetimeauth$(EXEEXT): $(onetimeauth_OBJECTS) $(onetimeauth_DEPENDENCIES) $(EXTRA_onetimeauth_DEPENDENCIES) 
 	@rm -f onetimeauth$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(onetimeauth_OBJECTS) $(onetimeauth_LDADD) $(LIBS)
@@ -1385,6 +1464,10 @@ sign$(EXEEXT): $(sign_OBJECTS) $(sign_DE
 	@rm -f sign$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(sign_OBJECTS) $(sign_LDADD) $(LIBS)
 
+siphashx24$(EXEEXT): $(siphashx24_OBJECTS) $(siphashx24_DEPENDENCIES) $(EXTRA_siphashx24_DEPENDENCIES) 
+	@rm -f siphashx24$(EXEEXT)
+	$(AM_V_CCLD)$(LINK) $(siphashx24_OBJECTS) $(siphashx24_LDADD) $(LIBS)
+
 sodium_core$(EXEEXT): $(sodium_core_OBJECTS) $(sodium_core_DEPENDENCIES) $(EXTRA_sodium_core_DEPENDENCIES) 
 	@rm -f sodium_core$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(sodium_core_OBJECTS) $(sodium_core_LDADD) $(LIBS)
@@ -1425,6 +1508,10 @@ verify1$(EXEEXT): $(verify1_OBJECTS) $(v
 	@rm -f verify1$(EXEEXT)
 	$(AM_V_CCLD)$(LINK) $(verify1_OBJECTS) $(verify1_LDADD) $(LIBS)
 
+xchacha20$(EXEEXT): $(xchacha20_OBJECTS) $(xchacha20_DEPENDENCIES) $(EXTRA_xchacha20_DEPENDENCIES) 
+	@rm -f xchacha20$(EXEEXT)
+	$(AM_V_CCLD)$(LINK) $(xchacha20_OBJECTS) $(xchacha20_LDADD) $(LIBS)
+
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
 
@@ -1433,6 +1520,7 @@ distclean-compile:
 
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/aead_aes256gcm.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/aead_chacha20poly1305.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/aead_xchacha20poly1305.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/auth.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/auth2.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/auth3.Po@am__quote@
@@ -1460,6 +1548,9 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/generichash3.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hash3.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kdf.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/keygen.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/kx.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/onetimeauth.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/onetimeauth2.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/onetimeauth7.Po@am__quote@
@@ -1480,6 +1571,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/secretbox_easy2.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/shorthash.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sign.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/siphashx24.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sodium_core.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sodium_utils.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sodium_utils2.Po@am__quote@
@@ -1490,6 +1582,7 @@ distclean-compile:
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stream3.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stream4.Po@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/verify1.Po@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xchacha20.Po@am__quote@
 
 .c.o:
 @am__fastdepCC_TRUE@	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
@@ -1728,6 +1821,13 @@ aead_chacha20poly1305.log: aead_chacha20
 	--log-file $$b.log --trs-file $$b.trs \
 	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
 	"$$tst" $(AM_TESTS_FD_REDIRECT)
+aead_xchacha20poly1305.log: aead_xchacha20poly1305$(EXEEXT)
+	@p='aead_xchacha20poly1305$(EXEEXT)'; \
+	b='aead_xchacha20poly1305'; \
+	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
+	--log-file $$b.log --trs-file $$b.trs \
+	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
+	"$$tst" $(AM_TESTS_FD_REDIRECT)
 auth.log: auth$(EXEEXT)
 	@p='auth$(EXEEXT)'; \
 	b='auth'; \
@@ -1917,6 +2017,27 @@ hash3.log: hash3$(EXEEXT)
 	--log-file $$b.log --trs-file $$b.trs \
 	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
 	"$$tst" $(AM_TESTS_FD_REDIRECT)
+kdf.log: kdf$(EXEEXT)
+	@p='kdf$(EXEEXT)'; \
+	b='kdf'; \
+	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
+	--log-file $$b.log --trs-file $$b.trs \
+	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
+	"$$tst" $(AM_TESTS_FD_REDIRECT)
+keygen.log: keygen$(EXEEXT)
+	@p='keygen$(EXEEXT)'; \
+	b='keygen'; \
+	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
+	--log-file $$b.log --trs-file $$b.trs \
+	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
+	"$$tst" $(AM_TESTS_FD_REDIRECT)
+kx.log: kx$(EXEEXT)
+	@p='kx$(EXEEXT)'; \
+	b='kx'; \
+	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
+	--log-file $$b.log --trs-file $$b.trs \
+	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
+	"$$tst" $(AM_TESTS_FD_REDIRECT)
 onetimeauth.log: onetimeauth$(EXEEXT)
 	@p='onetimeauth$(EXEEXT)'; \
 	b='onetimeauth'; \
@@ -2126,6 +2247,20 @@ sodium_utils3.log: sodium_utils3$(EXEEXT
 	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
 	--log-file $$b.log --trs-file $$b.trs \
 	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
+	"$$tst" $(AM_TESTS_FD_REDIRECT)
+siphashx24.log: siphashx24$(EXEEXT)
+	@p='siphashx24$(EXEEXT)'; \
+	b='siphashx24'; \
+	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
+	--log-file $$b.log --trs-file $$b.trs \
+	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
+	"$$tst" $(AM_TESTS_FD_REDIRECT)
+xchacha20.log: xchacha20$(EXEEXT)
+	@p='xchacha20$(EXEEXT)'; \
+	b='xchacha20'; \
+	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
+	--log-file $$b.log --trs-file $$b.trs \
+	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
 	"$$tst" $(AM_TESTS_FD_REDIRECT)
 .test.log:
 	@p='$<'; \
diff -urpN libsodium-1.0.11/test/default/onetimeauth2.c libsodium-1.0.12/test/default/onetimeauth2.c
--- libsodium-1.0.11/test/default/onetimeauth2.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/onetimeauth2.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,29 +2,31 @@
 #define TEST_NAME "onetimeauth2"
 #include "cmptest.h"
 
-static unsigned char rs[32]
-    = { 0xee, 0xa6, 0xa7, 0x25, 0x1c, 0x1e, 0x72, 0x91, 0x6d, 0x11, 0xc2,
-        0xcb, 0x21, 0x4d, 0x3c, 0x25, 0x25, 0x39, 0x12, 0x1d, 0x8e, 0x23,
-        0x4e, 0x65, 0x2d, 0x65, 0x1f, 0xa4, 0xc8, 0xcf, 0xf8, 0x80 };
+static unsigned char rs[32] = {
+    0xee, 0xa6, 0xa7, 0x25, 0x1c, 0x1e, 0x72, 0x91, 0x6d, 0x11, 0xc2,
+    0xcb, 0x21, 0x4d, 0x3c, 0x25, 0x25, 0x39, 0x12, 0x1d, 0x8e, 0x23,
+    0x4e, 0x65, 0x2d, 0x65, 0x1f, 0xa4, 0xc8, 0xcf, 0xf8, 0x80
+};
 
-static unsigned char c[131]
-    = { 0x8e, 0x99, 0x3b, 0x9f, 0x48, 0x68, 0x12, 0x73, 0xc2, 0x96, 0x50, 0xba,
-        0x32, 0xfc, 0x76, 0xce, 0x48, 0x33, 0x2e, 0xa7, 0x16, 0x4d, 0x96, 0xa4,
-        0x47, 0x6f, 0xb8, 0xc5, 0x31, 0xa1, 0x18, 0x6a, 0xc0, 0xdf, 0xc1, 0x7c,
-        0x98, 0xdc, 0xe8, 0x7b, 0x4d, 0xa7, 0xf0, 0x11, 0xec, 0x48, 0xc9, 0x72,
-        0x71, 0xd2, 0xc2, 0x0f, 0x9b, 0x92, 0x8f, 0xe2, 0x27, 0x0d, 0x6f, 0xb8,
-        0x63, 0xd5, 0x17, 0x38, 0xb4, 0x8e, 0xee, 0xe3, 0x14, 0xa7, 0xcc, 0x8a,
-        0xb9, 0x32, 0x16, 0x45, 0x48, 0xe5, 0x26, 0xae, 0x90, 0x22, 0x43, 0x68,
-        0x51, 0x7a, 0xcf, 0xea, 0xbd, 0x6b, 0xb3, 0x73, 0x2b, 0xc0, 0xe9, 0xda,
-        0x99, 0x83, 0x2b, 0x61, 0xca, 0x01, 0xb6, 0xde, 0x56, 0x24, 0x4a, 0x9e,
-        0x88, 0xd5, 0xf9, 0xb3, 0x79, 0x73, 0xf6, 0x22, 0xa4, 0x3d, 0x14, 0xa6,
-        0x59, 0x9b, 0x1f, 0x65, 0x4c, 0xb4, 0x5a, 0x74, 0xe3, 0x55, 0xa5 };
+static unsigned char c[131] = {
+    0x8e, 0x99, 0x3b, 0x9f, 0x48, 0x68, 0x12, 0x73, 0xc2, 0x96, 0x50, 0xba,
+    0x32, 0xfc, 0x76, 0xce, 0x48, 0x33, 0x2e, 0xa7, 0x16, 0x4d, 0x96, 0xa4,
+    0x47, 0x6f, 0xb8, 0xc5, 0x31, 0xa1, 0x18, 0x6a, 0xc0, 0xdf, 0xc1, 0x7c,
+    0x98, 0xdc, 0xe8, 0x7b, 0x4d, 0xa7, 0xf0, 0x11, 0xec, 0x48, 0xc9, 0x72,
+    0x71, 0xd2, 0xc2, 0x0f, 0x9b, 0x92, 0x8f, 0xe2, 0x27, 0x0d, 0x6f, 0xb8,
+    0x63, 0xd5, 0x17, 0x38, 0xb4, 0x8e, 0xee, 0xe3, 0x14, 0xa7, 0xcc, 0x8a,
+    0xb9, 0x32, 0x16, 0x45, 0x48, 0xe5, 0x26, 0xae, 0x90, 0x22, 0x43, 0x68,
+    0x51, 0x7a, 0xcf, 0xea, 0xbd, 0x6b, 0xb3, 0x73, 0x2b, 0xc0, 0xe9, 0xda,
+    0x99, 0x83, 0x2b, 0x61, 0xca, 0x01, 0xb6, 0xde, 0x56, 0x24, 0x4a, 0x9e,
+    0x88, 0xd5, 0xf9, 0xb3, 0x79, 0x73, 0xf6, 0x22, 0xa4, 0x3d, 0x14, 0xa6,
+    0x59, 0x9b, 0x1f, 0x65, 0x4c, 0xb4, 0x5a, 0x74, 0xe3, 0x55, 0xa5
+};
 
-static unsigned char a[16]
-    = { 0xf3, 0xff, 0xc7, 0x70, 0x3f, 0x94, 0x00, 0xe5,
-        0x2a, 0x7d, 0xfb, 0x4b, 0x3d, 0x33, 0x05, 0xd9 };
+static unsigned char a[16] = { 0xf3, 0xff, 0xc7, 0x70, 0x3f, 0x94, 0x00, 0xe5,
+                               0x2a, 0x7d, 0xfb, 0x4b, 0x3d, 0x33, 0x05, 0xd9 };
 
-int main(void)
+int
+main(void)
 {
     printf("%d\n", crypto_onetimeauth_verify(a, c, 131, rs));
     return 0;
diff -urpN libsodium-1.0.11/test/default/onetimeauth7.c libsodium-1.0.12/test/default/onetimeauth7.c
--- libsodium-1.0.11/test/default/onetimeauth7.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/onetimeauth7.c	2017-03-06 11:13:57.000000000 +0100
@@ -6,12 +6,13 @@ static unsigned char key[32];
 static unsigned char c[1000];
 static unsigned char a[16];
 
-int main(void)
+int
+main(void)
 {
     int clen;
 
     for (clen = 0; clen < 1000; ++clen) {
-        randombytes_buf(key, sizeof key);
+        crypto_onetimeauth_keygen(key);
         randombytes_buf(c, clen);
         crypto_onetimeauth(a, c, clen, key);
         if (crypto_onetimeauth_verify(a, c, clen, key) != 0) {
diff -urpN libsodium-1.0.11/test/default/onetimeauth.c libsodium-1.0.12/test/default/onetimeauth.c
--- libsodium-1.0.11/test/default/onetimeauth.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/onetimeauth.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,35 +2,38 @@
 #define TEST_NAME "onetimeauth"
 #include "cmptest.h"
 
-static unsigned char rs[32]
-    = { 0xee, 0xa6, 0xa7, 0x25, 0x1c, 0x1e, 0x72, 0x91, 0x6d, 0x11, 0xc2,
-        0xcb, 0x21, 0x4d, 0x3c, 0x25, 0x25, 0x39, 0x12, 0x1d, 0x8e, 0x23,
-        0x4e, 0x65, 0x2d, 0x65, 0x1f, 0xa4, 0xc8, 0xcf, 0xf8, 0x80 };
-
-static unsigned char c[131]
-    = { 0x8e, 0x99, 0x3b, 0x9f, 0x48, 0x68, 0x12, 0x73, 0xc2, 0x96, 0x50, 0xba,
-        0x32, 0xfc, 0x76, 0xce, 0x48, 0x33, 0x2e, 0xa7, 0x16, 0x4d, 0x96, 0xa4,
-        0x47, 0x6f, 0xb8, 0xc5, 0x31, 0xa1, 0x18, 0x6a, 0xc0, 0xdf, 0xc1, 0x7c,
-        0x98, 0xdc, 0xe8, 0x7b, 0x4d, 0xa7, 0xf0, 0x11, 0xec, 0x48, 0xc9, 0x72,
-        0x71, 0xd2, 0xc2, 0x0f, 0x9b, 0x92, 0x8f, 0xe2, 0x27, 0x0d, 0x6f, 0xb8,
-        0x63, 0xd5, 0x17, 0x38, 0xb4, 0x8e, 0xee, 0xe3, 0x14, 0xa7, 0xcc, 0x8a,
-        0xb9, 0x32, 0x16, 0x45, 0x48, 0xe5, 0x26, 0xae, 0x90, 0x22, 0x43, 0x68,
-        0x51, 0x7a, 0xcf, 0xea, 0xbd, 0x6b, 0xb3, 0x73, 0x2b, 0xc0, 0xe9, 0xda,
-        0x99, 0x83, 0x2b, 0x61, 0xca, 0x01, 0xb6, 0xde, 0x56, 0x24, 0x4a, 0x9e,
-        0x88, 0xd5, 0xf9, 0xb3, 0x79, 0x73, 0xf6, 0x22, 0xa4, 0x3d, 0x14, 0xa6,
-        0x59, 0x9b, 0x1f, 0x65, 0x4c, 0xb4, 0x5a, 0x74, 0xe3, 0x55, 0xa5 };
+static unsigned char rs[32] = {
+    0xee, 0xa6, 0xa7, 0x25, 0x1c, 0x1e, 0x72, 0x91, 0x6d, 0x11, 0xc2,
+    0xcb, 0x21, 0x4d, 0x3c, 0x25, 0x25, 0x39, 0x12, 0x1d, 0x8e, 0x23,
+    0x4e, 0x65, 0x2d, 0x65, 0x1f, 0xa4, 0xc8, 0xcf, 0xf8, 0x80
+};
+
+static unsigned char c[131] = {
+    0x8e, 0x99, 0x3b, 0x9f, 0x48, 0x68, 0x12, 0x73, 0xc2, 0x96, 0x50, 0xba,
+    0x32, 0xfc, 0x76, 0xce, 0x48, 0x33, 0x2e, 0xa7, 0x16, 0x4d, 0x96, 0xa4,
+    0x47, 0x6f, 0xb8, 0xc5, 0x31, 0xa1, 0x18, 0x6a, 0xc0, 0xdf, 0xc1, 0x7c,
+    0x98, 0xdc, 0xe8, 0x7b, 0x4d, 0xa7, 0xf0, 0x11, 0xec, 0x48, 0xc9, 0x72,
+    0x71, 0xd2, 0xc2, 0x0f, 0x9b, 0x92, 0x8f, 0xe2, 0x27, 0x0d, 0x6f, 0xb8,
+    0x63, 0xd5, 0x17, 0x38, 0xb4, 0x8e, 0xee, 0xe3, 0x14, 0xa7, 0xcc, 0x8a,
+    0xb9, 0x32, 0x16, 0x45, 0x48, 0xe5, 0x26, 0xae, 0x90, 0x22, 0x43, 0x68,
+    0x51, 0x7a, 0xcf, 0xea, 0xbd, 0x6b, 0xb3, 0x73, 0x2b, 0xc0, 0xe9, 0xda,
+    0x99, 0x83, 0x2b, 0x61, 0xca, 0x01, 0xb6, 0xde, 0x56, 0x24, 0x4a, 0x9e,
+    0x88, 0xd5, 0xf9, 0xb3, 0x79, 0x73, 0xf6, 0x22, 0xa4, 0x3d, 0x14, 0xa6,
+    0x59, 0x9b, 0x1f, 0x65, 0x4c, 0xb4, 0x5a, 0x74, 0xe3, 0x55, 0xa5
+};
 
 static unsigned char a[16];
 
-int main(void)
+int
+main(void)
 {
     crypto_onetimeauth_state st;
-    int i;
+    int                      i;
 
     assert(crypto_onetimeauth_statebytes() == sizeof st);
     crypto_onetimeauth(a, c, 131, rs);
     for (i = 0; i < 16; ++i) {
-        printf(",0x%02x", (unsigned int)a[i]);
+        printf(",0x%02x", (unsigned int) a[i]);
         if (i % 8 == 7)
             printf("\n");
     }
@@ -42,7 +45,7 @@ int main(void)
     crypto_onetimeauth_update(&st, c + 100, 31);
     crypto_onetimeauth_final(&st, a);
     for (i = 0; i < 16; ++i) {
-        printf(",0x%02x", (unsigned int)a[i]);
+        printf(",0x%02x", (unsigned int) a[i]);
         if (i % 8 == 7)
             printf("\n");
     }
@@ -51,8 +54,8 @@ int main(void)
     assert(crypto_onetimeauth_keybytes() > 0U);
     assert(strcmp(crypto_onetimeauth_primitive(), "poly1305") == 0);
     assert(crypto_onetimeauth_poly1305_bytes() == crypto_onetimeauth_bytes());
-    assert(crypto_onetimeauth_poly1305_keybytes()
-           == crypto_onetimeauth_keybytes());
+    assert(crypto_onetimeauth_poly1305_keybytes() ==
+           crypto_onetimeauth_keybytes());
 
     return 0;
 }
diff -urpN libsodium-1.0.11/test/default/pwhash.c libsodium-1.0.12/test/default/pwhash.c
--- libsodium-1.0.11/test/default/pwhash.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/pwhash.c	2017-03-06 11:13:57.000000000 +0100
@@ -6,77 +6,78 @@
 #define OPSLIMIT 3
 #define MEMLIMIT 5000000
 
-static void tv(void)
+static void
+tv(void)
 {
     static struct {
-        const char         *passwd_hex;
-        size_t              passwdlen;
-        const char         *salt_hex;
-        size_t              outlen;
-        unsigned long long  opslimit;
-        size_t              memlimit;
-        unsigned int        lanes;
+        const char *       passwd_hex;
+        size_t             passwd_len;
+        const char *       salt_hex;
+        size_t             outlen;
+        unsigned long long opslimit;
+        size_t             memlimit;
+        unsigned int       lanes;
     } tests[] = {
-          { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
-            "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
-            "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
-            "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
-            127,
-            "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
-            155, 5, 7256678, 1 },
-          { "e125cee61c8cb7778d9e5ad0a6f5d978ce9f84de213a8556d9ffe202020ab4a6ed"
-            "9074a4eb3416f9b168f137510f3a30b70b96cbfa219ff99f6c6eaffb15c06b60e0"
-            "0cc2890277f0fd3c622115772f7048adaebed86e",
-            86,
-            "f1192dd5dc2368b9cd421338b22433455ee0a3699f9379a08b9650ea2c126f0d",
-            250, 4, 7849083, 1 },
-          { "92263cbf6ac376499f68a4289d3bb59e5a22335eba63a32e6410249155b956b6a3"
-            "b48d4a44906b18b897127300b375b8f834f1ceffc70880a885f47c33876717e392"
-            "be57f7da3ae58da4fd1f43daa7e44bb82d3717af4319349c24cd31e46d295856b0"
-            "441b6b289992a11ced1cc3bf3011604590244a3eb737ff221129215e4e4347f491"
-            "5d41292b5173d196eb9add693be5319fdadc242906178bb6c0286c9b6ca6012746"
-            "711f58c8c392016b2fdfc09c64f0f6b6ab7b",
-            183,
-            "3b840e20e9555e9fb031c4ba1f1747ce25cc1d0ff664be676b9b4a90641ff194",
-            249, 3, 7994791, 1 },
-          { "027b6d8e8c8c474e9b69c7d9ed4f9971e8e1ce2f6ba95048414c3970f0f09b70e3"
-            "b6c5ae05872b3d8678705b7d381829c351a5a9c88c233569b35d6b0b809df44b64"
-            "51a9c273f1150e2ef8a0b5437eb701e373474cd44b97ef0248ebce2ca0400e1b53"
-            "f3d86221eca3f18eb45b702b9172440f774a82cbf1f6f525df30a6e293c873cce6"
-            "9bb078ed1f0d31e7f9b8062409f37f19f8550aae",
-            152,
-            "eb2a3056a09ad2d7d7f975bcd707598f24cd32518cde3069f2e403b34bfee8a5",
-            5, 4, 1397645, 1 },
-          { "4a857e2ee8aa9b6056f2424e84d24a72473378906ee04a46cb05311502d5250b82"
-            "ad86b83c8f20a23dbb74f6da60b0b6ecffd67134d45946ac8ebfb3064294bc097d"
-            "43ced68642bfb8bbbdd0f50b30118f5e",
-            82,
-            "39d82eef32010b8b79cc5ba88ed539fbaba741100f2edbeca7cc171ffeabf258",
-            190, 3, 1432947, 1 },
-          { "c7b09aec680e7b42fedd7fc792e78b2f6c1bea8f4a884320b648f81e8cf515e8ba"
-            "9dcfb11d43c4aae114c1734aa69ca82d44998365db9c93744fa28b63fd16000e82"
-            "61cbbe083e7e2da1e5f696bde0834fe53146d7e0e35e7de9920d041f5a5621aabe"
-            "02da3e2b09b405b77937efef3197bd5772e41fdb73fb5294478e45208063b5f58e"
-            "089dbeb6d6342a909c1307b3fff5fe2cf4da56bdae50848f",
-            156,
-            "039c056d933b475032777edbaffac50f143f64c123329ed9cf59e3b65d3f43b6",
-            178, 3, 4886999, 1 },
-          { "b540beb016a5366524d4605156493f9874514a5aa58818cd0c6dfffaa9e90205f1"
-            "7b",
-            34,
-            "44071f6d181561670bda728d43fb79b443bb805afdebaf98622b5165e01b15fb",
-            231, 1, 1631659, 1 },
-          { "a14975c26c088755a8b715ff2528d647cd343987fcf4aa25e7194a8417fb2b4b3f"
-            "7268da9f3182b4cfb22d138b2749d673a47ecc7525dd15a0a3c66046971784bb63"
-            "d7eae24cc84f2631712075a10e10a96b0e0ee67c43e01c423cb9c44e5371017e9c"
-            "496956b632158da3fe12addecb88912e6759bc37f9af2f45af72c5cae3b179ffb6"
-            "76a697de6ebe45cd4c16d4a9d642d29ddc0186a0a48cb6cd62bfc3dd229d313b30"
-            "1560971e740e2cf1f99a9a090a5b283f35475057e96d7064e2e0fc81984591068d"
-            "55a3b4169f22cccb0745a2689407ea1901a0a766eb99",
-            220,
-            "3d968b2752b8838431165059319f3ff8910b7b8ecb54ea01d3f54769e9d98daf",
-            167, 3, 1784128, 1 },
-      };
+        { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
+          "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
+          "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
+          "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
+          127,
+          "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
+          155, 5, 7256678, 1 },
+        { "e125cee61c8cb7778d9e5ad0a6f5d978ce9f84de213a8556d9ffe202020ab4a6ed"
+          "9074a4eb3416f9b168f137510f3a30b70b96cbfa219ff99f6c6eaffb15c06b60e0"
+          "0cc2890277f0fd3c622115772f7048adaebed86e",
+          86,
+          "f1192dd5dc2368b9cd421338b22433455ee0a3699f9379a08b9650ea2c126f0d",
+          250, 4, 7849083, 1 },
+        { "92263cbf6ac376499f68a4289d3bb59e5a22335eba63a32e6410249155b956b6a3"
+          "b48d4a44906b18b897127300b375b8f834f1ceffc70880a885f47c33876717e392"
+          "be57f7da3ae58da4fd1f43daa7e44bb82d3717af4319349c24cd31e46d295856b0"
+          "441b6b289992a11ced1cc3bf3011604590244a3eb737ff221129215e4e4347f491"
+          "5d41292b5173d196eb9add693be5319fdadc242906178bb6c0286c9b6ca6012746"
+          "711f58c8c392016b2fdfc09c64f0f6b6ab7b",
+          183,
+          "3b840e20e9555e9fb031c4ba1f1747ce25cc1d0ff664be676b9b4a90641ff194",
+          249, 3, 7994791, 1 },
+        { "027b6d8e8c8c474e9b69c7d9ed4f9971e8e1ce2f6ba95048414c3970f0f09b70e3"
+          "b6c5ae05872b3d8678705b7d381829c351a5a9c88c233569b35d6b0b809df44b64"
+          "51a9c273f1150e2ef8a0b5437eb701e373474cd44b97ef0248ebce2ca0400e1b53"
+          "f3d86221eca3f18eb45b702b9172440f774a82cbf1f6f525df30a6e293c873cce6"
+          "9bb078ed1f0d31e7f9b8062409f37f19f8550aae",
+          152,
+          "eb2a3056a09ad2d7d7f975bcd707598f24cd32518cde3069f2e403b34bfee8a5", 5,
+          4, 1397645, 1 },
+        { "4a857e2ee8aa9b6056f2424e84d24a72473378906ee04a46cb05311502d5250b82"
+          "ad86b83c8f20a23dbb74f6da60b0b6ecffd67134d45946ac8ebfb3064294bc097d"
+          "43ced68642bfb8bbbdd0f50b30118f5e",
+          82,
+          "39d82eef32010b8b79cc5ba88ed539fbaba741100f2edbeca7cc171ffeabf258",
+          190, 3, 1432947, 1 },
+        { "c7b09aec680e7b42fedd7fc792e78b2f6c1bea8f4a884320b648f81e8cf515e8ba"
+          "9dcfb11d43c4aae114c1734aa69ca82d44998365db9c93744fa28b63fd16000e82"
+          "61cbbe083e7e2da1e5f696bde0834fe53146d7e0e35e7de9920d041f5a5621aabe"
+          "02da3e2b09b405b77937efef3197bd5772e41fdb73fb5294478e45208063b5f58e"
+          "089dbeb6d6342a909c1307b3fff5fe2cf4da56bdae50848f",
+          156,
+          "039c056d933b475032777edbaffac50f143f64c123329ed9cf59e3b65d3f43b6",
+          178, 3, 4886999, 1 },
+        { "b540beb016a5366524d4605156493f9874514a5aa58818cd0c6dfffaa9e90205f1"
+          "7b",
+          34,
+          "44071f6d181561670bda728d43fb79b443bb805afdebaf98622b5165e01b15fb",
+          231, 1, 1631659, 1 },
+        { "a14975c26c088755a8b715ff2528d647cd343987fcf4aa25e7194a8417fb2b4b3f"
+          "7268da9f3182b4cfb22d138b2749d673a47ecc7525dd15a0a3c66046971784bb63"
+          "d7eae24cc84f2631712075a10e10a96b0e0ee67c43e01c423cb9c44e5371017e9c"
+          "496956b632158da3fe12addecb88912e6759bc37f9af2f45af72c5cae3b179ffb6"
+          "76a697de6ebe45cd4c16d4a9d642d29ddc0186a0a48cb6cd62bfc3dd229d313b30"
+          "1560971e740e2cf1f99a9a090a5b283f35475057e96d7064e2e0fc81984591068d"
+          "55a3b4169f22cccb0745a2689407ea1901a0a766eb99",
+          220,
+          "3d968b2752b8838431165059319f3ff8910b7b8ecb54ea01d3f54769e9d98daf",
+          167, 3, 1784128, 1 },
+    };
     char          passwd[256];
     unsigned char salt[crypto_pwhash_SALTBYTES];
     unsigned char out[256];
@@ -89,11 +90,12 @@ static void tv(void)
                        NULL, NULL);
         sodium_hex2bin(salt, sizeof salt, tests[i].salt_hex,
                        strlen(tests[i].salt_hex), NULL, NULL, NULL);
-        if (crypto_pwhash(out, (unsigned long long) tests[i].outlen,
-                          passwd, tests[i].passwdlen,
-                          (const unsigned char *) salt, tests[i].opslimit,
-                          tests[i].memlimit, crypto_pwhash_alg_default()) != 0) {
-            printf("[tv] pwhash failure (maybe intentional): [%u]\n", (unsigned int) i);
+        if (crypto_pwhash(out, (unsigned long long) tests[i].outlen, passwd,
+                          tests[i].passwd_len, (const unsigned char *) salt,
+                          tests[i].opslimit, tests[i].memlimit,
+                          crypto_pwhash_alg_default()) != 0) {
+            printf("[tv] pwhash failure (maybe intentional): [%u]\n",
+                   (unsigned int) i);
             continue;
         }
         sodium_bin2hex(out_hex, sizeof out_hex, out, tests[i].outlen);
@@ -101,32 +103,33 @@ static void tv(void)
     } while (++i < (sizeof tests) / (sizeof tests[0]));
 }
 
-static void tv2(void)
+static void
+tv2(void)
 {
     static struct {
-        const char         *passwd_hex;
-        size_t              passwdlen;
-        const char         *salt_hex;
-        size_t              outlen;
-        unsigned long long  opslimit;
-        size_t              memlimit;
-        unsigned int        lanes;
+        const char *       passwd_hex;
+        size_t             passwd_len;
+        const char *       salt_hex;
+        size_t             outlen;
+        unsigned long long opslimit;
+        size_t             memlimit;
+        unsigned int       lanes;
     } tests[] = {
-          { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
-            "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
-            "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
-            "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
-            127,
-            "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
-            155, 4, 1397645, 1 },
-          { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
-            "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
-            "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
-            "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
-            127,
-            "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
-            155, 3, 1397645, 1 },
-      };
+        { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
+          "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
+          "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
+          "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
+          127,
+          "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
+          155, 4, 1397645, 1 },
+        { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
+          "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
+          "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
+          "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
+          127,
+          "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
+          155, 3, 1397645, 1 },
+    };
     char          passwd[256];
     unsigned char salt[crypto_pwhash_SALTBYTES];
     unsigned char out[256];
@@ -134,15 +137,15 @@ static void tv2(void)
     size_t        i = 0U;
 
     do {
-        sodium_hex2bin((unsigned char *)passwd, sizeof passwd,
+        sodium_hex2bin((unsigned char *) passwd, sizeof passwd,
                        tests[i].passwd_hex, strlen(tests[i].passwd_hex), NULL,
                        NULL, NULL);
         sodium_hex2bin(salt, sizeof salt, tests[i].salt_hex,
                        strlen(tests[i].salt_hex), NULL, NULL, NULL);
-        if (crypto_pwhash(out, (unsigned long long) tests[i].outlen,
-                          passwd, tests[i].passwdlen,
-                          (const unsigned char *) salt, tests[i].opslimit,
-                          tests[i].memlimit, crypto_pwhash_alg_default()) != 0) {
+        if (crypto_pwhash(out, (unsigned long long) tests[i].outlen, passwd,
+                          tests[i].passwd_len, (const unsigned char *) salt,
+                          tests[i].opslimit, tests[i].memlimit,
+                          crypto_pwhash_alg_default()) != 0) {
             printf("[tv2] pwhash failure: [%u]\n", (unsigned int) i);
             continue;
         }
@@ -150,50 +153,55 @@ static void tv2(void)
         printf("%s\n", out_hex);
     } while (++i < (sizeof tests) / (sizeof tests[0]));
 
-    if (crypto_pwhash(out, sizeof out, "password", strlen("password"),
-                      salt, 3, 1ULL << 12, 0) != -1) {
+    if (crypto_pwhash(out, sizeof out, "password", strlen("password"), salt, 3,
+                      1ULL << 12, 0) != -1) {
         printf("[tv2] pwhash should have failed (0)\n");
     }
-    if (crypto_pwhash(out, sizeof out, "password", strlen("password"),
-                      salt, 3, 1, crypto_pwhash_alg_default()) != -1) {
+    if (crypto_pwhash(out, sizeof out, "password", strlen("password"), salt, 3,
+                      1, crypto_pwhash_alg_default()) != -1) {
         printf("[tv2] pwhash should have failed (1)\n");
     }
-    if (crypto_pwhash(out, sizeof out, "password", strlen("password"),
-                      salt, 3, 1ULL << 12, crypto_pwhash_alg_default()) != -1) {
+    if (crypto_pwhash(out, sizeof out, "password", strlen("password"), salt, 3,
+                      1ULL << 12, crypto_pwhash_alg_default()) != -1) {
         printf("[tv2] pwhash should have failed (2)\n");
     }
-    if (crypto_pwhash(out, sizeof out, "password", strlen("password"),
-                      salt, 2, 1ULL << 12, crypto_pwhash_alg_default()) != -1) {
+    if (crypto_pwhash(out, sizeof out, "password", strlen("password"), salt, 2,
+                      1ULL << 12, crypto_pwhash_alg_default()) != -1) {
         printf("[tv2] pwhash should have failed (3)\n");
     }
-    if (crypto_pwhash(out, 0x100000000ULL, "password", strlen("password"),
-                      salt, 3, 1ULL << 12, crypto_pwhash_alg_default()) != -1) {
-        printf("[tv2] pwhash with a long output length should have failed\n");
+    if (crypto_pwhash(out, 15, "password", strlen("password"), salt, 3,
+                      1ULL << 12, crypto_pwhash_alg_default()) != -1) {
+        printf("[tv2] pwhash with a short output length should have failed\n");
     }
-    if (crypto_pwhash(out, sizeof out, "password", 0x100000000ULL,
-                      salt, 3, 1ULL << 12, crypto_pwhash_alg_default()) != -1) {
+    if (crypto_pwhash(out, sizeof out, "password", 0x100000000ULL, salt, 3,
+                      1ULL << 12, crypto_pwhash_alg_default()) != -1) {
         printf("[tv2] pwhash with a long password length should have failed\n");
     }
 }
 
-static void tv3(void)
+static void
+tv3(void)
 {
     static struct {
         const char *passwd;
         const char *out;
     } tests[] = {
         { "",
-          "$argon2i$v=19$m=4096,t=1,p=1$X1NhbHQAAAAAAAAAAAAAAA$bWh++MKN1OiFHKgIWTLvIi1iHicmHH7+Fv3K88ifFfI" },
+          "$argon2i$v=19$m=4096,t=1,p=1$X1NhbHQAAAAAAAAAAAAAAA$bWh++"
+          "MKN1OiFHKgIWTLvIi1iHicmHH7+Fv3K88ifFfI" },
         { "",
-          "$argon2i$v=19$m=2048,t=4,p=1$SWkxaUhpY21ISDcrRnYzSw$Mbg/Eck1kpZir5T9io7C64cpffdTBaORgyriLQFgQj8" },
+          "$argon2i$v=19$m=2048,t=4,p=1$SWkxaUhpY21ISDcrRnYzSw$Mbg/"
+          "Eck1kpZir5T9io7C64cpffdTBaORgyriLQFgQj8" },
         { "^T5H$JYt39n%K*j:W]!1s?vg!:jGi]Ax?..l7[p0v:1jHTpla9;]bUN;?bWyCbtqg ",
-          "$argon2i$v=19$m=4096,t=3,p=2$X1NhbHQAAAAAAAAAAAAAAA$z/QMiU4lQxGsYNc/+K/bizwsA1P11UG2dj/7+aILJ4I" },
+          "$argon2i$v=19$m=4096,t=3,p=2$X1NhbHQAAAAAAAAAAAAAAA$z/QMiU4lQxGsYNc/"
+          "+K/bizwsA1P11UG2dj/7+aILJ4I" },
         { "K3S=KyH#)36_?]LxeR8QNKw6X=gFbxai$C%29V*",
-          "$argon2i$v=19$m=4096,t=3,p=1$X1NhbHQAAAAAAAAAAAAAAA$fu2Wsecyt+yPnBvSvYN16oP5ozRmkp0ixJ1YL19V3Uo" }
+          "$argon2i$v=19$m=4096,t=3,p=1$X1NhbHQAAAAAAAAAAAAAAA$fu2Wsecyt+"
+          "yPnBvSvYN16oP5ozRmkp0ixJ1YL19V3Uo" }
     };
-    char *out;
-    char *passwd;
-    size_t i = 0U;
+    char   *out;
+    char   *passwd;
+    size_t  i = 0U;
 
     do {
         out = (char *) sodium_malloc(strlen(tests[i].out) + 1U);
@@ -202,9 +210,9 @@ static void tv3(void)
         passwd = (char *) sodium_malloc(strlen(tests[i].passwd) + 1U);
         assert(passwd != NULL);
         memcpy(passwd, tests[i].passwd, strlen(tests[i].passwd) + 1U);
-        if (crypto_pwhash_str_verify
-            (out, passwd, strlen(passwd)) != 0) {
-            printf("[tv3] pwhash_str failure (maybe intentional): [%u]\n", (unsigned int) i);
+        if (crypto_pwhash_str_verify(out, passwd, strlen(passwd)) != 0) {
+            printf("[tv3] pwhash_str failure (maybe intentional): [%u]\n",
+                   (unsigned int) i);
             continue;
         }
         sodium_free(out);
@@ -212,7 +220,8 @@ static void tv3(void)
     } while (++i < (sizeof tests) / (sizeof tests[0]));
 }
 
-int main(void)
+int
+main(void)
 {
     char       *str_out;
     char       *str_out2;
@@ -222,17 +231,17 @@ int main(void)
     tv();
     tv2();
     tv3();
-    salt = (char *) sodium_malloc(crypto_pwhash_SALTBYTES);
-    str_out = (char *) sodium_malloc(crypto_pwhash_STRBYTES);
+    salt     = (char *) sodium_malloc(crypto_pwhash_SALTBYTES);
+    str_out  = (char *) sodium_malloc(crypto_pwhash_STRBYTES);
     str_out2 = (char *) sodium_malloc(crypto_pwhash_STRBYTES);
     memcpy(salt, ">A 16-bytes salt", crypto_pwhash_SALTBYTES);
-    if (crypto_pwhash_str(str_out, passwd, strlen(passwd),
-                          OPSLIMIT, MEMLIMIT) != 0) {
+    if (crypto_pwhash_str(str_out, passwd, strlen(passwd), OPSLIMIT,
+                          MEMLIMIT) != 0) {
         printf("pwhash_str failure\n");
         return 1;
     }
-    if (crypto_pwhash_str(str_out2, passwd, strlen(passwd),
-                          OPSLIMIT, MEMLIMIT) != 0) {
+    if (crypto_pwhash_str(str_out2, passwd, strlen(passwd), OPSLIMIT,
+                          MEMLIMIT) != 0) {
         printf("pwhash_str(2) failure\n");
         return 1;
     }
@@ -255,13 +264,13 @@ int main(void)
     str_out[14]--;
     assert(str_out[crypto_pwhash_STRBYTES - 1U] == 0);
 
-    if (crypto_pwhash_str(str_out2, passwd, 0x100000000ULL,
-                          OPSLIMIT, MEMLIMIT) != -1) {
+    if (crypto_pwhash_str(str_out2, passwd, 0x100000000ULL, OPSLIMIT,
+                          MEMLIMIT) != -1) {
         printf("pwhash_str() with a large password should have failed\n");
         return 1;
     }
-    if (crypto_pwhash_str(str_out2, passwd, strlen(passwd),
-                          1, MEMLIMIT) != -1) {
+    if (crypto_pwhash_str(str_out2, passwd, strlen(passwd), 1, MEMLIMIT) !=
+        -1) {
         printf("pwhash_str() with a small opslimit should have failed\n");
         return 1;
     }
@@ -300,29 +309,41 @@ int main(void)
                                  "password", strlen("password")) != -1) {
         printf("pwhash_str_verify(invalid(6)) failure\n");
     }
-    if (crypto_pwhash_str_verify("$argon2i$v=19$m=4096,t=3,p=2$b2RpZHVlamRpc29kaXNrdw"
-                                 "$TNnWIwlu1061JHrnCqIAmjs3huSxYIU+0jWipu7Kc9M",
-                                 "password", strlen("password")) != 0) {
+    if (crypto_pwhash_str_verify(
+            "$argon2i$v=19$m=4096,t=3,p=2$b2RpZHVlamRpc29kaXNrdw"
+            "$TNnWIwlu1061JHrnCqIAmjs3huSxYIU+0jWipu7Kc9M",
+            "password", strlen("password")) != 0) {
         printf("pwhash_str_verify(valid(7)) failure\n");
     }
-    if (crypto_pwhash_str_verify("$argon2i$v=19$m=4096,t=3,p=2$b2RpZHVlamRpc29kaXNrdw"
-                                 "$TNnWIwlu1061JHrnCqIAmjs3huSxYIU+0jWipu7Kc9M",
-                                 "passwore", strlen("passwore")) != -1) {
+    if (crypto_pwhash_str_verify(
+            "$argon2i$v=19$m=4096,t=3,p=2$b2RpZHVlamRpc29kaXNrdw"
+            "$TNnWIwlu1061JHrnCqIAmjs3huSxYIU+0jWipu7Kc9M",
+            "passwore", strlen("passwore")) != -1) {
         printf("pwhash_str_verify(invalid(7)) failure\n");
     }
-    if (crypto_pwhash_str_verify("$Argon2i$v=19$m=4096,t=3,p=2$b2RpZHVlamRpc29kaXNrdw"
-                                 "$TNnWIwlu1061JHrnCqIAmjs3huSxYIU+0jWipu7Kc9M",
-                                 "password", strlen("password")) != -1) {
+    if (crypto_pwhash_str_verify(
+            "$Argon2i$v=19$m=4096,t=3,p=2$b2RpZHVlamRpc29kaXNrdw"
+            "$TNnWIwlu1061JHrnCqIAmjs3huSxYIU+0jWipu7Kc9M",
+            "password", strlen("password")) != -1) {
         printf("pwhash_str_verify(invalid(8)) failure\n");
     }
-    if (crypto_pwhash_str_verify("$argon2i$v=1$m=4096,t=3,p=2$b2RpZHVlamRpc29kaXNrdw"
-                                 "$TNnWIwlu1061JHrnCqIAmjs3huSxYIU+0jWipu7Kc9M",
-                                 "password", strlen("password")) != -1) {
+    if (crypto_pwhash_str_verify(
+            "$argon2i$v=1$m=4096,t=3,p=2$b2RpZHVlamRpc29kaXNrdw"
+            "$TNnWIwlu1061JHrnCqIAmjs3huSxYIU+0jWipu7Kc9M",
+            "password", strlen("password")) != -1) {
         printf("pwhash_str_verify(invalid(9)) failure\n");
     }
+    assert(crypto_pwhash_bytes_min() > 0U);
+    assert(crypto_pwhash_bytes_max() > crypto_pwhash_bytes_min());
+    assert(crypto_pwhash_passwd_max() > crypto_pwhash_passwd_min());
     assert(crypto_pwhash_saltbytes() > 0U);
     assert(crypto_pwhash_strbytes() > 1U);
     assert(crypto_pwhash_strbytes() > strlen(crypto_pwhash_strprefix()));
+
+    assert(crypto_pwhash_opslimit_min() > 0U);
+    assert(crypto_pwhash_opslimit_max() > 0U);
+    assert(crypto_pwhash_memlimit_min() > 0U);
+    assert(crypto_pwhash_memlimit_max() > 0U);
     assert(crypto_pwhash_opslimit_interactive() > 0U);
     assert(crypto_pwhash_memlimit_interactive() > 0U);
     assert(crypto_pwhash_opslimit_moderate() > 0U);
@@ -331,16 +352,46 @@ int main(void)
     assert(crypto_pwhash_memlimit_sensitive() > 0U);
     assert(strcmp(crypto_pwhash_primitive(), "argon2i") == 0);
 
-    assert(crypto_pwhash_opslimit_interactive() == crypto_pwhash_OPSLIMIT_INTERACTIVE);
-    assert(crypto_pwhash_memlimit_interactive() == crypto_pwhash_MEMLIMIT_INTERACTIVE);
-    assert(crypto_pwhash_opslimit_moderate() == crypto_pwhash_OPSLIMIT_MODERATE);
-    assert(crypto_pwhash_memlimit_moderate() == crypto_pwhash_MEMLIMIT_MODERATE);
-    assert(crypto_pwhash_opslimit_sensitive() == crypto_pwhash_OPSLIMIT_SENSITIVE);
-    assert(crypto_pwhash_memlimit_sensitive() == crypto_pwhash_MEMLIMIT_SENSITIVE);
-
+    assert(crypto_pwhash_bytes_min() == crypto_pwhash_BYTES_MIN);
+    assert(crypto_pwhash_bytes_max() == crypto_pwhash_BYTES_MAX);
+    assert(crypto_pwhash_passwd_min() == crypto_pwhash_PASSWD_MIN);
+    assert(crypto_pwhash_passwd_max() == crypto_pwhash_PASSWD_MAX);
+    assert(crypto_pwhash_saltbytes() == crypto_pwhash_SALTBYTES);
+    assert(crypto_pwhash_strbytes() == crypto_pwhash_STRBYTES);
+
+    assert(crypto_pwhash_opslimit_min() == crypto_pwhash_OPSLIMIT_MIN);
+    assert(crypto_pwhash_opslimit_max() == crypto_pwhash_OPSLIMIT_MAX);
+    assert(crypto_pwhash_memlimit_min() == crypto_pwhash_MEMLIMIT_MIN);
+    assert(crypto_pwhash_memlimit_max() == crypto_pwhash_MEMLIMIT_MAX);
+    assert(crypto_pwhash_opslimit_interactive() ==
+           crypto_pwhash_OPSLIMIT_INTERACTIVE);
+    assert(crypto_pwhash_memlimit_interactive() ==
+           crypto_pwhash_MEMLIMIT_INTERACTIVE);
+    assert(crypto_pwhash_opslimit_moderate() ==
+           crypto_pwhash_OPSLIMIT_MODERATE);
+    assert(crypto_pwhash_memlimit_moderate() ==
+           crypto_pwhash_MEMLIMIT_MODERATE);
+    assert(crypto_pwhash_opslimit_sensitive() ==
+           crypto_pwhash_OPSLIMIT_SENSITIVE);
+    assert(crypto_pwhash_memlimit_sensitive() ==
+           crypto_pwhash_MEMLIMIT_SENSITIVE);
+
+    assert(crypto_pwhash_argon2i_bytes_min() == crypto_pwhash_bytes_min());
+    assert(crypto_pwhash_argon2i_bytes_max() == crypto_pwhash_bytes_max());
+    assert(crypto_pwhash_argon2i_passwd_min() == crypto_pwhash_passwd_min());
+    assert(crypto_pwhash_argon2i_passwd_max() == crypto_pwhash_passwd_max());
     assert(crypto_pwhash_argon2i_saltbytes() == crypto_pwhash_saltbytes());
     assert(crypto_pwhash_argon2i_strbytes() == crypto_pwhash_strbytes());
-    assert(strcmp(crypto_pwhash_argon2i_strprefix(), crypto_pwhash_strprefix()) == 0);
+    assert(strcmp(crypto_pwhash_argon2i_strprefix(),
+                  crypto_pwhash_strprefix()) == 0);
+    assert(crypto_pwhash_argon2i_opslimit_min() ==
+           crypto_pwhash_opslimit_min());
+    assert(crypto_pwhash_argon2i_opslimit_max() ==
+           crypto_pwhash_opslimit_max());
+    assert(crypto_pwhash_argon2i_memlimit_min() ==
+           crypto_pwhash_memlimit_min());
+    assert(crypto_pwhash_argon2i_memlimit_max() ==
+           crypto_pwhash_memlimit_max());
     assert(crypto_pwhash_argon2i_opslimit_interactive() ==
            crypto_pwhash_opslimit_interactive());
     assert(crypto_pwhash_argon2i_opslimit_moderate() ==
@@ -353,7 +404,8 @@ int main(void)
            crypto_pwhash_memlimit_moderate());
     assert(crypto_pwhash_argon2i_memlimit_sensitive() ==
            crypto_pwhash_memlimit_sensitive());
-    assert(crypto_pwhash_alg_argon2i13() == crypto_pwhash_argon2i_alg_argon2i13());
+    assert(crypto_pwhash_alg_argon2i13() ==
+           crypto_pwhash_argon2i_alg_argon2i13());
     assert(crypto_pwhash_alg_argon2i13() == crypto_pwhash_ALG_ARGON2I13);
     assert(crypto_pwhash_alg_argon2i13() == crypto_pwhash_alg_default());
 
diff -urpN libsodium-1.0.11/test/default/pwhash_scrypt.c libsodium-1.0.12/test/default/pwhash_scrypt.c
--- libsodium-1.0.11/test/default/pwhash_scrypt.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/pwhash_scrypt.c	2017-03-06 11:13:57.000000000 +0100
@@ -6,89 +6,90 @@
 #define OPSLIMIT 1000000
 #define MEMLIMIT 10000000
 
-static void tv(void)
+static void
+tv(void)
 {
     static struct {
-        const char         *passwd_hex;
-        size_t              passwdlen;
-        const char         *salt_hex;
-        size_t              outlen;
-        unsigned long long  opslimit;
-        size_t              memlimit;
+        const char *       passwd_hex;
+        size_t             passwdlen;
+        const char *       salt_hex;
+        size_t             outlen;
+        unsigned long long opslimit;
+        size_t             memlimit;
     } tests[] = {
-          { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
-            "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
-            "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
-            "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
-            127,
-            "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
-            155, 481326, 7256678 },
-          { "e125cee61c8cb7778d9e5ad0a6f5d978ce9f84de213a8556d9ffe202020ab4a6ed"
-            "9074a4eb3416f9b168f137510f3a30b70b96cbfa219ff99f6c6eaffb15c06b60e0"
-            "0cc2890277f0fd3c622115772f7048adaebed86e",
-            86,
-            "f1192dd5dc2368b9cd421338b22433455ee0a3699f9379a08b9650ea2c126f0d",
-            250, 535778, 7849083 },
-          { "92263cbf6ac376499f68a4289d3bb59e5a22335eba63a32e6410249155b956b6a3"
-            "b48d4a44906b18b897127300b375b8f834f1ceffc70880a885f47c33876717e392"
-            "be57f7da3ae58da4fd1f43daa7e44bb82d3717af4319349c24cd31e46d295856b0"
-            "441b6b289992a11ced1cc3bf3011604590244a3eb737ff221129215e4e4347f491"
-            "5d41292b5173d196eb9add693be5319fdadc242906178bb6c0286c9b6ca6012746"
-            "711f58c8c392016b2fdfc09c64f0f6b6ab7b",
-            183,
-            "3b840e20e9555e9fb031c4ba1f1747ce25cc1d0ff664be676b9b4a90641ff194",
-            249, 311757, 7994791 },
-          { "027b6d8e8c8c474e9b69c7d9ed4f9971e8e1ce2f6ba95048414c3970f0f09b70e3"
-            "b6c5ae05872b3d8678705b7d381829c351a5a9c88c233569b35d6b0b809df44b64"
-            "51a9c273f1150e2ef8a0b5437eb701e373474cd44b97ef0248ebce2ca0400e1b53"
-            "f3d86221eca3f18eb45b702b9172440f774a82cbf1f6f525df30a6e293c873cce6"
-            "9bb078ed1f0d31e7f9b8062409f37f19f8550aae",
-            152,
-            "eb2a3056a09ad2d7d7f975bcd707598f24cd32518cde3069f2e403b34bfee8a5",
-            5, 643464, 1397645 },
-          { "4a857e2ee8aa9b6056f2424e84d24a72473378906ee04a46cb05311502d5250b82"
-            "ad86b83c8f20a23dbb74f6da60b0b6ecffd67134d45946ac8ebfb3064294bc097d"
-            "43ced68642bfb8bbbdd0f50b30118f5e",
-            82,
-            "39d82eef32010b8b79cc5ba88ed539fbaba741100f2edbeca7cc171ffeabf258",
-            190, 758010, 5432947 },
-          { "1845e375479537e9dd4f4486d5c91ac72775d66605eeb11a787b78a7745f1fd005"
-            "2d526c67235dbae1b2a4d575a74cb551c8e9096c593a497aee74ba3047d911358e"
-            "de57bc27c9ea1829824348daaab606217cc931dcb6627787bd6e4e5854f0e8",
-            97,
-            "3ee91a805aa62cfbe8dce29a2d9a44373a5006f4a4ce24022aca9cecb29d1473",
-            212, 233177, 13101817 },
-          { "c7b09aec680e7b42fedd7fc792e78b2f6c1bea8f4a884320b648f81e8cf515e8ba"
-            "9dcfb11d43c4aae114c1734aa69ca82d44998365db9c93744fa28b63fd16000e82"
-            "61cbbe083e7e2da1e5f696bde0834fe53146d7e0e35e7de9920d041f5a5621aabe"
-            "02da3e2b09b405b77937efef3197bd5772e41fdb73fb5294478e45208063b5f58e"
-            "089dbeb6d6342a909c1307b3fff5fe2cf4da56bdae50848f",
-            156,
-            "039c056d933b475032777edbaffac50f143f64c123329ed9cf59e3b65d3f43b6",
-            178, 234753, 4886999 },
-          { "8f3a06e2fd8711350a517bb12e31f3d3423e8dc0bb14aac8240fca0995938d59bb"
-            "37bd0a7dfc9c9cc0705684b46612e8c8b1d6655fb0f9887562bb9899791a0250d1"
-            "320f945eda48cdc20c233f40a5bb0a7e3ac5ad7250ce684f68fc0b8c9633bfd75a"
-            "ad116525af7bdcdbbdb4e00ab163fd4df08f243f12557e",
-            122,
-            "90631f686a8c3dbc0703ffa353bc1fdf35774568ac62406f98a13ed8f47595fd",
-            55, 695191, 15738350 },
-          { "b540beb016a5366524d4605156493f9874514a5aa58818cd0c6dfffaa9e90205f1"
-            "7b",
-            34,
-            "44071f6d181561670bda728d43fb79b443bb805afdebaf98622b5165e01b15fb",
-            231, 78652, 6631659 },
-          { "a14975c26c088755a8b715ff2528d647cd343987fcf4aa25e7194a8417fb2b4b3f"
-            "7268da9f3182b4cfb22d138b2749d673a47ecc7525dd15a0a3c66046971784bb63"
-            "d7eae24cc84f2631712075a10e10a96b0e0ee67c43e01c423cb9c44e5371017e9c"
-            "496956b632158da3fe12addecb88912e6759bc37f9af2f45af72c5cae3b179ffb6"
-            "76a697de6ebe45cd4c16d4a9d642d29ddc0186a0a48cb6cd62bfc3dd229d313b30"
-            "1560971e740e2cf1f99a9a090a5b283f35475057e96d7064e2e0fc81984591068d"
-            "55a3b4169f22cccb0745a2689407ea1901a0a766eb99",
-            220,
-            "3d968b2752b8838431165059319f3ff8910b7b8ecb54ea01d3f54769e9d98daf",
-            167, 717248, 10784179 },
-      };
+        { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
+          "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
+          "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
+          "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
+          127,
+          "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
+          155, 481326, 7256678 },
+        { "e125cee61c8cb7778d9e5ad0a6f5d978ce9f84de213a8556d9ffe202020ab4a6ed"
+          "9074a4eb3416f9b168f137510f3a30b70b96cbfa219ff99f6c6eaffb15c06b60e0"
+          "0cc2890277f0fd3c622115772f7048adaebed86e",
+          86,
+          "f1192dd5dc2368b9cd421338b22433455ee0a3699f9379a08b9650ea2c126f0d",
+          250, 535778, 7849083 },
+        { "92263cbf6ac376499f68a4289d3bb59e5a22335eba63a32e6410249155b956b6a3"
+          "b48d4a44906b18b897127300b375b8f834f1ceffc70880a885f47c33876717e392"
+          "be57f7da3ae58da4fd1f43daa7e44bb82d3717af4319349c24cd31e46d295856b0"
+          "441b6b289992a11ced1cc3bf3011604590244a3eb737ff221129215e4e4347f491"
+          "5d41292b5173d196eb9add693be5319fdadc242906178bb6c0286c9b6ca6012746"
+          "711f58c8c392016b2fdfc09c64f0f6b6ab7b",
+          183,
+          "3b840e20e9555e9fb031c4ba1f1747ce25cc1d0ff664be676b9b4a90641ff194",
+          249, 311757, 7994791 },
+        { "027b6d8e8c8c474e9b69c7d9ed4f9971e8e1ce2f6ba95048414c3970f0f09b70e3"
+          "b6c5ae05872b3d8678705b7d381829c351a5a9c88c233569b35d6b0b809df44b64"
+          "51a9c273f1150e2ef8a0b5437eb701e373474cd44b97ef0248ebce2ca0400e1b53"
+          "f3d86221eca3f18eb45b702b9172440f774a82cbf1f6f525df30a6e293c873cce6"
+          "9bb078ed1f0d31e7f9b8062409f37f19f8550aae",
+          152,
+          "eb2a3056a09ad2d7d7f975bcd707598f24cd32518cde3069f2e403b34bfee8a5", 5,
+          643464, 1397645 },
+        { "4a857e2ee8aa9b6056f2424e84d24a72473378906ee04a46cb05311502d5250b82"
+          "ad86b83c8f20a23dbb74f6da60b0b6ecffd67134d45946ac8ebfb3064294bc097d"
+          "43ced68642bfb8bbbdd0f50b30118f5e",
+          82,
+          "39d82eef32010b8b79cc5ba88ed539fbaba741100f2edbeca7cc171ffeabf258",
+          190, 758010, 5432947 },
+        { "1845e375479537e9dd4f4486d5c91ac72775d66605eeb11a787b78a7745f1fd005"
+          "2d526c67235dbae1b2a4d575a74cb551c8e9096c593a497aee74ba3047d911358e"
+          "de57bc27c9ea1829824348daaab606217cc931dcb6627787bd6e4e5854f0e8",
+          97,
+          "3ee91a805aa62cfbe8dce29a2d9a44373a5006f4a4ce24022aca9cecb29d1473",
+          212, 233177, 13101817 },
+        { "c7b09aec680e7b42fedd7fc792e78b2f6c1bea8f4a884320b648f81e8cf515e8ba"
+          "9dcfb11d43c4aae114c1734aa69ca82d44998365db9c93744fa28b63fd16000e82"
+          "61cbbe083e7e2da1e5f696bde0834fe53146d7e0e35e7de9920d041f5a5621aabe"
+          "02da3e2b09b405b77937efef3197bd5772e41fdb73fb5294478e45208063b5f58e"
+          "089dbeb6d6342a909c1307b3fff5fe2cf4da56bdae50848f",
+          156,
+          "039c056d933b475032777edbaffac50f143f64c123329ed9cf59e3b65d3f43b6",
+          178, 234753, 4886999 },
+        { "8f3a06e2fd8711350a517bb12e31f3d3423e8dc0bb14aac8240fca0995938d59bb"
+          "37bd0a7dfc9c9cc0705684b46612e8c8b1d6655fb0f9887562bb9899791a0250d1"
+          "320f945eda48cdc20c233f40a5bb0a7e3ac5ad7250ce684f68fc0b8c9633bfd75a"
+          "ad116525af7bdcdbbdb4e00ab163fd4df08f243f12557e",
+          122,
+          "90631f686a8c3dbc0703ffa353bc1fdf35774568ac62406f98a13ed8f47595fd",
+          55, 695191, 15738350 },
+        { "b540beb016a5366524d4605156493f9874514a5aa58818cd0c6dfffaa9e90205f1"
+          "7b",
+          34,
+          "44071f6d181561670bda728d43fb79b443bb805afdebaf98622b5165e01b15fb",
+          231, 78652, 6631659 },
+        { "a14975c26c088755a8b715ff2528d647cd343987fcf4aa25e7194a8417fb2b4b3f"
+          "7268da9f3182b4cfb22d138b2749d673a47ecc7525dd15a0a3c66046971784bb63"
+          "d7eae24cc84f2631712075a10e10a96b0e0ee67c43e01c423cb9c44e5371017e9c"
+          "496956b632158da3fe12addecb88912e6759bc37f9af2f45af72c5cae3b179ffb6"
+          "76a697de6ebe45cd4c16d4a9d642d29ddc0186a0a48cb6cd62bfc3dd229d313b30"
+          "1560971e740e2cf1f99a9a090a5b283f35475057e96d7064e2e0fc81984591068d"
+          "55a3b4169f22cccb0745a2689407ea1901a0a766eb99",
+          220,
+          "3d968b2752b8838431165059319f3ff8910b7b8ecb54ea01d3f54769e9d98daf",
+          167, 717248, 10784179 },
+    };
     char          passwd[256];
     unsigned char salt[crypto_pwhash_scryptsalsa208sha256_SALTBYTES];
     unsigned char out[256];
@@ -102,10 +103,9 @@ static void tv(void)
         sodium_hex2bin(salt, sizeof salt, tests[i].salt_hex,
                        strlen(tests[i].salt_hex), NULL, NULL, NULL);
         if (crypto_pwhash_scryptsalsa208sha256(
-                out, (unsigned long long) tests[i].outlen,
-                passwd, tests[i].passwdlen,
-                (const unsigned char *) salt, tests[i].opslimit,
-                tests[i].memlimit) != 0) {
+                out, (unsigned long long) tests[i].outlen, passwd,
+                tests[i].passwdlen, (const unsigned char *) salt,
+                tests[i].opslimit, tests[i].memlimit) != 0) {
             printf("pwhash failure\n");
         }
         sodium_bin2hex(out_hex, sizeof out_hex, out, tests[i].outlen);
@@ -113,31 +113,32 @@ static void tv(void)
     } while (++i < (sizeof tests) / (sizeof tests[0]));
 }
 
-static void tv2(void)
+static void
+tv2(void)
 {
     static struct {
-        const char         *passwd_hex;
-        size_t              passwdlen;
-        const char         *salt_hex;
-        size_t              outlen;
-        unsigned long long  opslimit;
-        size_t              memlimit;
+        const char *       passwd_hex;
+        size_t             passwdlen;
+        const char *       salt_hex;
+        size_t             outlen;
+        unsigned long long opslimit;
+        size_t             memlimit;
     } tests[] = {
-          { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
-            "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
-            "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
-            "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
-            127,
-            "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
-            155, 64, 1397645 },
-          { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
-            "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
-            "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
-            "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
-            127,
-            "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
-            155, 32768, 1397645 },
-      };
+        { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
+          "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
+          "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
+          "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
+          127,
+          "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
+          155, 64, 1397645 },
+        { "a347ae92bce9f80f6f595a4480fc9c2fe7e7d7148d371e9487d75f5c23008ffae0"
+          "65577a928febd9b1973a5a95073acdbeb6a030cfc0d79caa2dc5cd011cef02c08d"
+          "a232d76d52dfbca38ca8dcbd665b17d1665f7cf5fe59772ec909733b24de97d6f5"
+          "8d220b20c60d7c07ec1fd93c52c31020300c6c1facd77937a597c7a6",
+          127,
+          "5541fbc995d5c197ba290346d2c559dedf405cf97e5f95482143202f9e74f5c2",
+          155, 32768, 1397645 },
+    };
     char          passwd[256];
     unsigned char salt[crypto_pwhash_scryptsalsa208sha256_SALTBYTES];
     unsigned char out[256];
@@ -145,16 +146,15 @@ static void tv2(void)
     size_t        i = 0U;
 
     do {
-        sodium_hex2bin((unsigned char *)passwd, sizeof passwd,
+        sodium_hex2bin((unsigned char *) passwd, sizeof passwd,
                        tests[i].passwd_hex, strlen(tests[i].passwd_hex), NULL,
                        NULL, NULL);
         sodium_hex2bin(salt, sizeof salt, tests[i].salt_hex,
                        strlen(tests[i].salt_hex), NULL, NULL, NULL);
         if (crypto_pwhash_scryptsalsa208sha256(
-                out, (unsigned long long) tests[i].outlen,
-                passwd, tests[i].passwdlen,
-                (const unsigned char *) salt, tests[i].opslimit,
-                tests[i].memlimit) != 0) {
+                out, (unsigned long long) tests[i].outlen, passwd,
+                tests[i].passwdlen, (const unsigned char *) salt,
+                tests[i].opslimit, tests[i].memlimit) != 0) {
             printf("pwhash failure\n");
         }
         sodium_bin2hex(out_hex, sizeof out_hex, out, tests[i].outlen);
@@ -162,111 +162,109 @@ static void tv2(void)
     } while (++i < (sizeof tests) / (sizeof tests[0]));
 }
 
-static void tv3(void)
+static void
+tv3(void)
 {
     static struct {
         const char *passwd;
         const char *out;
     } tests[] = {
-          { "^T5H$JYt39n%K*j:W]!1s?vg!:jGi]Ax?..l7[p0v:1jHTpla9;]bUN;?bWyCbtqg "
-            "nrDFal+Jxl3,2`#^tFSu%v_+7iYse8-cCkNf!tD=KrW)",
-            "$7$B6....1....75gBMAGwfFWZqBdyF3WdTQnWdUsuTiWjG1fF9c1jiSD$tc8RoB3."
-            "Em3/zNgMLWo2u00oGIoTyJv4fl3Fl8Tix72" },
-          { "bl72h6#y<':MFRZ>B IA1=NRkCKS%W8`1I.2uQxJN0g)N N aTt^4K!Iw5r "
-            "H6;crDsv^a55j9tsk'/GqweZn;cdk6+F_St6:#*=?ZCD_lw>.",
-            "$7$A6....3....Iahc6qM0.UQJHVgE4h9oa1/"
-            "4OWlWLm9CCtfguvz6bQD$QnXCo3M7nIqtry2WKsUZ5gQ.mY0wAlJu."
-            "WUhtE8vF66" },
-          { "Py "
-            ">e.5b+tLo@rL`dC2k@eJ&4eVl!W=JJ4+k&mAt@gt',FS1JjqKW3aq21:]^kna`"
-            "mde7kVkN5NrpKUptu)@4*b&?BE_sJMG1=&@`3GBCV]Wg7xwgo7x3El",
-            "$7$96..../....f6bEusKt79kK4wdYN0ki2nw4bJQ7P3rN6k3BSigsK/"
-            "D$Dsvuw7vXj5xijmrb/NOhdgoyK/OiSIYv88cEtl9Cik7" },
-          { "2vj;Um]FKOL27oam(:Uo8+UmSTvb1FD*h?jk_,S=;RDgF-$Fjk?]9yvfxe@fN^!NN("
-            "Cuml?+2Raa",
-            "$7$86....I....7XwIxLtCx4VphmFeUa6OGuGJrFaIaYzDiLNu/"
-            "tyUPhD$U3q5GCEqCWxMwh.YQHDJrlg7FIZgViv9pcXE3h1vg61" },
-          { "CT=[9uUoGav,J`kU+348tA50ue#sL:ABZ3QgF+r[#vh:tTOiL>s8tv%,Jeo]jH/"
-            "_4^i(*jD-_ku[9Ko[=86 06V",
-            "$7$A6....2....R3.bjH6YS9wz9z8Jsj.3weGQ3J80ZZElGw2oVux1TP6$"
-            "i5u6lFzXDHaIgYEICinLD6WNaovbiXP8SnLrDRdKgA9" },
-          { "J#wNn`hDgOpTHNI.w^1a70%f,.9V_m038H_JIJQln`vdWnn/"
-            "rmILR?9H5g(+`;@H(2VosN9Fgk[WEjaBr'yB9Q19-imNa04[Mk5kvGcSn-TV",
-            "$7$B6....1....Dj1y.4mF1J9XmT/6IDskYdCLaPFJTq9xcCwXQ1DpT92$92/"
-            "hYfZLRq1nTLyIz.uc/dC6wLqwnsoqpkadrCXusm6" },
-          { "j4BS38Asa;p)[K+9TY!3YDj<LK-`nLVXQw9%*QfM",
-            "$7$B6....1....5Ods8mojVwXJq4AywF/uI9BdMSiJ/zT8hQP/"
-            "4cB68VC$nk4ExHNXJ802froj51/1wJTrSZvTIyyK7PecOxRRaz0" },
-          { "M.R>Qw+!qJb]>pP :_.9`dxM9k [eR7Y!yL-3)sNs[R,j_/^ "
-            "TH=5ny'15>6UXWcQW^6D%XCsO[vN[%ReA-`tV1vW(Nt*0KVK#]45P_A",
-            "$7$B6....1....D/"
-            "eyk8N5y6Z8YVQEsw521cTx.9zzLuK7YDs1KMMh.o4$alfW8ZbsUWnXc."
-            "vqon2zoljVk24Tt1.IsCuo2KurvS2" },
-          { "K3S=KyH#)36_?]LxeR8QNKw6X=gFb'ai$C%29V* "
-            "tyh^Wo$TN-#Q4qkmtTCf0LLb.^E$0uykkP",
-            "$7$B6....1....CuBuU97xgAage8whp/"
-            "JNKobo0TFbsORGVbfcQIefyP8$aqalP."
-            "XofGViB8EPLONqHma8vs1xc9uTIMYh9CgE.S8" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-
-          /* Invalid pwhash strings */
-
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$A6....1....$TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$.6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$A.....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$A6.........TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i44269$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AH" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx54269" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7^A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$!6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$A!....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$A6....!....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "",
-            "$7$A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7fA6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4#"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$AX....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$A6....1!...TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$A6....1" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "" },
-          { "Y0!?iQa9M%5ekffW(`",
-            "$7$A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
-            "" },
-      };
-    char *out;
-    char *passwd;
+        { "^T5H$JYt39n%K*j:W]!1s?vg!:jGi]Ax?..l7[p0v:1jHTpla9;]bUN;?bWyCbtqg "
+          "nrDFal+Jxl3,2`#^tFSu%v_+7iYse8-cCkNf!tD=KrW)",
+          "$7$B6....1....75gBMAGwfFWZqBdyF3WdTQnWdUsuTiWjG1fF9c1jiSD$tc8RoB3."
+          "Em3/zNgMLWo2u00oGIoTyJv4fl3Fl8Tix72" },
+        { "bl72h6#y<':MFRZ>B IA1=NRkCKS%W8`1I.2uQxJN0g)N N aTt^4K!Iw5r "
+          "H6;crDsv^a55j9tsk'/GqweZn;cdk6+F_St6:#*=?ZCD_lw>.",
+          "$7$A6....3....Iahc6qM0.UQJHVgE4h9oa1/"
+          "4OWlWLm9CCtfguvz6bQD$QnXCo3M7nIqtry2WKsUZ5gQ.mY0wAlJu."
+          "WUhtE8vF66" },
+        { "Py "
+          ">e.5b+tLo@rL`dC2k@eJ&4eVl!W=JJ4+k&mAt@gt',FS1JjqKW3aq21:]^kna`"
+          "mde7kVkN5NrpKUptu)@4*b&?BE_sJMG1=&@`3GBCV]Wg7xwgo7x3El",
+          "$7$96..../....f6bEusKt79kK4wdYN0ki2nw4bJQ7P3rN6k3BSigsK/"
+          "D$Dsvuw7vXj5xijmrb/NOhdgoyK/OiSIYv88cEtl9Cik7" },
+        { "2vj;Um]FKOL27oam(:Uo8+UmSTvb1FD*h?jk_,S=;RDgF-$Fjk?]9yvfxe@fN^!NN("
+          "Cuml?+2Raa",
+          "$7$86....I....7XwIxLtCx4VphmFeUa6OGuGJrFaIaYzDiLNu/"
+          "tyUPhD$U3q5GCEqCWxMwh.YQHDJrlg7FIZgViv9pcXE3h1vg61" },
+        { "CT=[9uUoGav,J`kU+348tA50ue#sL:ABZ3QgF+r[#vh:tTOiL>s8tv%,Jeo]jH/"
+          "_4^i(*jD-_ku[9Ko[=86 06V",
+          "$7$A6....2....R3.bjH6YS9wz9z8Jsj.3weGQ3J80ZZElGw2oVux1TP6$"
+          "i5u6lFzXDHaIgYEICinLD6WNaovbiXP8SnLrDRdKgA9" },
+        { "J#wNn`hDgOpTHNI.w^1a70%f,.9V_m038H_JIJQln`vdWnn/"
+          "rmILR?9H5g(+`;@H(2VosN9Fgk[WEjaBr'yB9Q19-imNa04[Mk5kvGcSn-TV",
+          "$7$B6....1....Dj1y.4mF1J9XmT/6IDskYdCLaPFJTq9xcCwXQ1DpT92$92/"
+          "hYfZLRq1nTLyIz.uc/dC6wLqwnsoqpkadrCXusm6" },
+        { "j4BS38Asa;p)[K+9TY!3YDj<LK-`nLVXQw9%*QfM",
+          "$7$B6....1....5Ods8mojVwXJq4AywF/uI9BdMSiJ/zT8hQP/"
+          "4cB68VC$nk4ExHNXJ802froj51/1wJTrSZvTIyyK7PecOxRRaz0" },
+        { "M.R>Qw+!qJb]>pP :_.9`dxM9k [eR7Y!yL-3)sNs[R,j_/^ "
+          "TH=5ny'15>6UXWcQW^6D%XCsO[vN[%ReA-`tV1vW(Nt*0KVK#]45P_A",
+          "$7$B6....1....D/"
+          "eyk8N5y6Z8YVQEsw521cTx.9zzLuK7YDs1KMMh.o4$alfW8ZbsUWnXc."
+          "vqon2zoljVk24Tt1.IsCuo2KurvS2" },
+        { "K3S=KyH#)36_?]LxeR8QNKw6X=gFb'ai$C%29V* "
+          "tyh^Wo$TN-#Q4qkmtTCf0LLb.^E$0uykkP",
+          "$7$B6....1....CuBuU97xgAage8whp/"
+          "JNKobo0TFbsORGVbfcQIefyP8$aqalP."
+          "XofGViB8EPLONqHma8vs1xc9uTIMYh9CgE.S8" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+
+        /* Invalid pwhash strings */
+
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$A6....1....$TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$.6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$A.....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$A6.........TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i44269$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AH" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx54269" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7^A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$!6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$A!....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$A6....!....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "",
+          "$7$A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7fA6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4#"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$AX....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$A6....1!...TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "a4ik5hGDN7foMuHOW.cp.CtX01UyCeO0.JAG.AHPpx5" },
+        { "Y0!?iQa9M%5ekffW(`", "$7$A6....1" },
+        { "Y0!?iQa9M%5ekffW(`", "$7$" },
+        { "Y0!?iQa9M%5ekffW(`", "" },
+        { "Y0!?iQa9M%5ekffW(`",
+          "$7$A6....1....TrXs5Zk6s8sWHpQgWDIXTR8kUU3s6Jc3s.DtdS8M2i4$"
+          "" },
+    };
+    char * out;
+    char * passwd;
     size_t i = 0U;
 
     do {
@@ -276,31 +274,31 @@ static void tv3(void)
         passwd = (char *) sodium_malloc(strlen(tests[i].passwd) + 1U);
         assert(passwd != NULL);
         memcpy(passwd, tests[i].passwd, strlen(tests[i].passwd) + 1U);
-        if (crypto_pwhash_scryptsalsa208sha256_str_verify
-            (out, passwd, strlen(passwd)) != 0) {
-            printf("pwhash_str failure: [%u]\n", (unsigned int)i);
+        if (crypto_pwhash_scryptsalsa208sha256_str_verify(
+                out, passwd, strlen(passwd)) != 0) {
+            printf("pwhash_str failure: [%u]\n", (unsigned int) i);
         }
         sodium_free(out);
         sodium_free(passwd);
     } while (++i < (sizeof tests) / (sizeof tests[0]));
 }
 
-int main(void)
+int
+main(void)
 {
-    char       *str_out;
-    char       *str_out2;
-    char       *salt;
+    char *      str_out;
+    char *      str_out2;
+    char *      salt;
     const char *passwd = "Correct Horse Battery Staple";
 
     tv();
     tv2();
     tv3();
-    salt = (char *)
-        sodium_malloc(crypto_pwhash_scryptsalsa208sha256_SALTBYTES);
-    str_out = (char *)
-        sodium_malloc(crypto_pwhash_scryptsalsa208sha256_STRBYTES);
-    str_out2 = (char *)
-        sodium_malloc(crypto_pwhash_scryptsalsa208sha256_STRBYTES);
+    salt = (char *) sodium_malloc(crypto_pwhash_scryptsalsa208sha256_SALTBYTES);
+    str_out =
+        (char *) sodium_malloc(crypto_pwhash_scryptsalsa208sha256_STRBYTES);
+    str_out2 =
+        (char *) sodium_malloc(crypto_pwhash_scryptsalsa208sha256_STRBYTES);
     memcpy(salt, "[<~A 32-bytes salt for scrypt~>]",
            crypto_pwhash_scryptsalsa208sha256_SALTBYTES);
     if (crypto_pwhash_scryptsalsa208sha256_str(str_out, passwd, strlen(passwd),
@@ -323,17 +321,27 @@ int main(void)
         printf("pwhash_str_verify failure\n");
     }
     str_out[14]++;
-    if (crypto_pwhash_scryptsalsa208sha256_str_verify(
-        str_out, passwd, strlen(passwd)) == 0) {
+    if (crypto_pwhash_scryptsalsa208sha256_str_verify(str_out, passwd,
+                                                      strlen(passwd)) == 0) {
         printf("pwhash_str_verify(2) failure\n");
     }
     str_out[14]--;
 
     assert(str_out[crypto_pwhash_scryptsalsa208sha256_STRBYTES - 1U] == 0);
+    assert(crypto_pwhash_scryptsalsa208sha256_bytes_min() > 0U);
+    assert(crypto_pwhash_scryptsalsa208sha256_bytes_max() >
+           crypto_pwhash_scryptsalsa208sha256_bytes_min());
+    assert(crypto_pwhash_scryptsalsa208sha256_passwd_max() >
+           crypto_pwhash_scryptsalsa208sha256_passwd_min());
     assert(crypto_pwhash_scryptsalsa208sha256_saltbytes() > 0U);
     assert(crypto_pwhash_scryptsalsa208sha256_strbytes() > 1U);
     assert(crypto_pwhash_scryptsalsa208sha256_strbytes() >
            strlen(crypto_pwhash_scryptsalsa208sha256_strprefix()));
+
+    assert(crypto_pwhash_scryptsalsa208sha256_opslimit_min() > 0U);
+    assert(crypto_pwhash_scryptsalsa208sha256_opslimit_max() > 0U);
+    assert(crypto_pwhash_scryptsalsa208sha256_memlimit_min() > 0U);
+    assert(crypto_pwhash_scryptsalsa208sha256_memlimit_max() > 0U);
     assert(crypto_pwhash_scryptsalsa208sha256_opslimit_interactive() > 0U);
     assert(crypto_pwhash_scryptsalsa208sha256_memlimit_interactive() > 0U);
     assert(crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive() > 0U);
diff -urpN libsodium-1.0.11/test/default/pwhash_scrypt.exp libsodium-1.0.12/test/default/pwhash_scrypt.exp
--- libsodium-1.0.11/test/default/pwhash_scrypt.exp	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/pwhash_scrypt.exp	2017-03-06 11:13:57.000000000 +0100
@@ -1,7 +1,8 @@
 8d40f5f8c6a1791204f03e19a98cd74f918b6e331b39cfc2415e5014d7738b7bb0a83551fb14a035e07fdd4dc0c60c1a6822ac253918979f6324ff0c87cba75d3b91f88f41ca5414a0f152bdc4d636f42ab2250afd058c19ec31a3374d1bd7133289bf21513ff67cbf8482e626aee9864c58fd05f9ea02e508a10182b7d838157119866f072004987ef6c56683ed207705923921af9d76444a331a
 d985d4c278343a46d82af0c4268b7ae6b6d1d2dd289675ef45bfb6d0648bffe5bab8c91228f3a31b091154a9c1142670a07b92e70a298333066de07db9300e046fd7cacc99780804683df7babdfc9d019047178400b2875bde0a1ad824dda7a422d9ed48475af9a3876378dd3a2f206e34984e223afb82c0c1e4644c9a458f4666379fdd3e2d9206d87e3c32c3977f35826a27590baaa1ec1a3bd7d15a92bc84c95dcfc56c14fca7c4c9810162dfdf9dc08a191e79fe40250b7e07d3a9317d9a5cb56e1062c419a6cd6a9b73128e8ad79ab7efffbb3cc52c1f49f86d2ebb46e6e4846aecdb14c2d046f5380517ff8cc794e4a772a58b93083dad
 ee7e9e1369267ec555981f0ea088ff6f93953abfcb767d88ec3c46393d24cfbaba5e4e26e0f35b5d5259647748476d65cd8881c96f8cda049d9c877b2d33d932e67f4c0df2cb434b4b4900e0c49c3f8ba9663795420577e65d0b456201ad9162fbc485c7b44f2b34e6673aa3692c123021ee3b624c3bb22b808b89613d8ecc7b87da47f57152eb3f7b10ad206f6b09cb6935b347b5e42bc3b8c9c9bcd8d7b7c44929b367fc279dec48ea78e6ee3e2620d7459700bd0aedb1c9aa5a323ca94403927f5e5c2b73bda7c5c3287b62fe51874cfeb1dc3151cd886b26d83ece68833229d2d432798c602d85b0505947207d8430febbe901164b12ce
-1828b82997
+pwhash failure
+0000000000
 bcc5c2fd785e4781d1201ed43d84925537e2a540d3de55f5812f29e9dd0a4a00451a5c8ddbb4862c03d45c75bf91b7fb49265feb667ad5c899fdbf2ca19eac67aa5e48595d5b02f8183ab07f71b1ce0d76e5df54919f63810ad0893ded7d1ca18fc956ec06ffd4c3d1f77a00ed53608947b25eea5df6bea02272be15815f974c321a2a9208674fdf59d1d798c2a12f1889df68b0c222b37ee9ef0d6391fc160b0281ec53073cb3a3706ce1d71c3af2f5237a1b3d8545d99012eecc0b4abb
 82765c040c58c1810f8c053ef5c248556299385476bde44bdd91a0d9a239f24e9b1717fd8b23209ffa45b7aa7937296c601b79e77da99e8d2fda0ea4459be2d0900f5bc5a269b5488d873d4632d1baf75965e509ee24b12501a9ce3bbbd8b7d759987d545a1c221a363195e5802d768b3b9e00ebe5ac0ed8ad2362c1c4157b910a40f94adf2561a2b0d3e65dbb06f244e5ac44d362103df54c9b9175777b3db1cdadb03e977ab8a79baf1e1e18ec9f5d0f25c487ddc53d7e81910f83576b44e9caeece26e2eb376569ad3a8cdccbde8bc355210e
 ca9216d4127e2e4a6ee3584b49be106217bb61cc807016d46d0cfbb1fd722e2bbac33541386bdfeac41a299ead22790993fcaa8e1d23bd1c8426afa5ff4c08e731dc476ef834f142c32dfb2c1be12b9978802e63b2cd6f226b1a8df59f0c79154d7ef4296a68ec654538d987104f9a11aca1b7c83ab2ed8fd69da6b88f0bcbd27d3fea01329cecf10c57ec3ba163d57b38801bd6c3b31ce527b33717bb56a46f78fb96be9f2424a21b3284232388cbba6a74
diff -urpN libsodium-1.0.11/test/default/pwhash_scrypt_ll.c libsodium-1.0.12/test/default/pwhash_scrypt_ll.c
--- libsodium-1.0.11/test/default/pwhash_scrypt_ll.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/pwhash_scrypt_ll.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,60 +2,58 @@
 #define TEST_NAME "pwhash_scrypt_ll"
 #include "cmptest.h"
 
-/* Tarsnap test vectors, see: https://www.tarsnap.com/scrypt/scrypt.pdf */
+static const char *   passwd1 = "";
+static const char *   salt1   = "";
+static const uint64_t N1      = 16U;
+static const uint32_t r1      = 1U;
+static const uint32_t p1      = 1U;
+
+static const char *   passwd2 = "password";
+static const char *   salt2   = "NaCl";
+static const uint64_t N2      = 1024U;
+static const uint32_t r2      = 8U;
+static const uint32_t p2      = 16U;
+
+static const char *   passwd3 = "pleaseletmein";
+static const char *   salt3   = "SodiumChloride";
+static const uint64_t N3      = 16384U;
+static const uint32_t r3      = 8U;
+static const uint32_t p3      = 1U;
 
-static const char *password1 = "";
-static const char *salt1 = "";
-static uint64_t N1 = 16U;
-static uint32_t r1 = 1U;
-static uint32_t p1 = 1U;
-
-static const char *password2 = "password";
-static const char *salt2 = "NaCl";
-static uint64_t N2 = 1024U;
-static uint32_t r2 = 8U;
-static uint32_t p2 = 16U;
-
-static const char *password3 = "pleaseletmein";
-static const char *salt3 = "SodiumChloride";
-static uint64_t N3 = 16384U;
-static uint32_t r3 = 8U;
-static uint32_t p3 = 1U;
-
-static void test_vector(const char *password, const char *salt, uint64_t N,
-                        uint32_t r, uint32_t p)
+static void
+tv(const char *passwd, const char *salt, uint64_t N, uint32_t r, uint32_t p)
 {
     uint8_t data[64];
-    size_t i;
-    size_t olen = (sizeof data / sizeof data[0]);
-    size_t passwordLength = strlen(password);
-    size_t saltLenght = strlen(salt);
-    int lineitems = 0;
-    int lineitemsLimit = 15;
+    size_t  i;
+    size_t  olen       = (sizeof data / sizeof data[0]);
+    size_t  passwd_len = strlen(passwd);
+    size_t  salt_len   = strlen(salt);
+    int     line_items  = 0;
 
     if (crypto_pwhash_scryptsalsa208sha256_ll(
-            (const uint8_t *)password, passwordLength, (const uint8_t *)salt,
-            saltLenght, N, r, p, data, olen) != 0) {
-        printf("pwhash_scryptsalsa208sha256_ll([%s],[%s]) failure\n", password,
+            (const uint8_t *) passwd, passwd_len, (const uint8_t *) salt,
+            salt_len, N, r, p, data, olen) != 0) {
+        printf("pwhash_scryptsalsa208sha256_ll([%s],[%s]) failure\n", passwd,
                salt);
         return;
     }
 
-    printf("scrypt('%s', '%s', %lu, %lu, %lu, %lu) =\n", password, salt,
-           (unsigned long)N, (unsigned long)r, (unsigned long)p,
-           (unsigned long)olen);
-
-    for (i = 0; i < olen; ++i) {
-        printf("%02x%c", data[i], lineitems < lineitemsLimit ? ' ' : '\n');
-        lineitems = lineitems < lineitemsLimit ? lineitems + 1 : 0;
+    printf("scrypt('%s', '%s', %lu, %lu, %lu, %lu) =\n", passwd, salt,
+           (unsigned long) N, (unsigned long) r, (unsigned long) p,
+           (unsigned long) olen);
+
+    for (i = 0; i < olen; i++) {
+        printf("%02x%c", data[i], line_items < 15 ? ' ' : '\n');
+        line_items = line_items < 15 ? line_items + 1 : 0;
     }
 }
 
-int main(void)
+int
+main(void)
 {
-    test_vector(password1, salt1, N1, r1, p1);
-    test_vector(password2, salt2, N2, r2, p2);
-    test_vector(password3, salt3, N3, r3, p3);
+    tv(passwd1, salt1, N1, r1, p1);
+    tv(passwd2, salt2, N2, r2, p2);
+    tv(passwd3, salt3, N3, r3, p3);
 
     return 0;
 }
diff -urpN libsodium-1.0.11/test/default/randombytes.c libsodium-1.0.12/test/default/randombytes.c
--- libsodium-1.0.11/test/default/randombytes.c	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/test/default/randombytes.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,10 +2,11 @@
 #define TEST_NAME "randombytes"
 #include "cmptest.h"
 
-static unsigned char x[65536];
+static unsigned char      x[65536];
 static unsigned long long freq[256];
 
-static int compat_tests(void)
+static int
+compat_tests(void)
 {
     size_t i;
 
@@ -15,7 +16,7 @@ static int compat_tests(void)
         freq[i] = 0;
     }
     for (i = 0; i < sizeof x; ++i) {
-        ++freq[255 & (int)x[i]];
+        ++freq[255 & (int) x[i]];
     }
     for (i = 0; i < 256; ++i) {
         if (!freq[i]) {
@@ -25,11 +26,18 @@ static int compat_tests(void)
     return 0;
 }
 
-static int randombytes_tests(void)
+static int
+randombytes_tests(void)
 {
-    unsigned int f = 0U;
-    unsigned int i;
-    uint32_t     n;
+    static const unsigned char seed[randombytes_SEEDBYTES] = {
+        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
+        0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
+        0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
+    };
+    unsigned char out[100];
+    unsigned int  f = 0U;
+    unsigned int  i;
+    uint32_t      n;
 
 #ifdef __EMSCRIPTEN__
     assert(strcmp(randombytes_implementation_name(), "js") == 0);
@@ -43,8 +51,8 @@ static int randombytes_tests(void)
         n = randombytes_random();
         f |= ((n >> 24) > 1);
         f |= ((n >> 16) > 1) << 1;
-        f |= ((n >>  8) > 1) << 2;
-        f |= ((n      ) > 1) << 3;
+        f |= ((n >> 8) > 1) << 2;
+        f |= ((n) > 1) << 3;
         f |= (n > 0x7fffffff) << 4;
     } while (f != 0x1f);
     randombytes_close();
@@ -84,7 +92,7 @@ static int randombytes_tests(void)
         freq[i] = 0;
     }
     for (i = 0; i < sizeof x; ++i) {
-        ++freq[255 & (int)x[i]];
+        ++freq[255 & (int) x[i]];
     }
     for (i = 0; i < 256; ++i) {
         if (!freq[i]) {
@@ -92,20 +100,32 @@ static int randombytes_tests(void)
         }
     }
     assert(randombytes_uniform(1U) == 0U);
+
+    randombytes_buf_deterministic(out, sizeof out, seed);
+    for (i = 0; i < sizeof out; ++i) {
+        printf("%02x", out[i]);
+    }
+    printf(" (deterministic)\n");
+
     randombytes_close();
 
     randombytes(x, 1U);
     randombytes_close();
 
+    assert(randombytes_SEEDBYTES > 0);
+    assert(randombytes_seedbytes() == randombytes_SEEDBYTES);
+
     return 0;
 }
 
-static uint32_t randombytes_uniform_impl(const uint32_t upper_bound)
+static uint32_t
+randombytes_uniform_impl(const uint32_t upper_bound)
 {
     return upper_bound;
 }
 
-static int impl_tests(void)
+static int
+impl_tests(void)
 {
 #ifndef __native_client__
     randombytes_implementation impl = randombytes_sysrandom_implementation;
@@ -128,7 +148,8 @@ static int impl_tests(void)
     return 0;
 }
 
-int main(void)
+int
+main(void)
 {
     compat_tests();
     randombytes_tests();
diff -urpN libsodium-1.0.11/test/default/randombytes.exp libsodium-1.0.12/test/default/randombytes.exp
--- libsodium-1.0.11/test/default/randombytes.exp	2015-07-05 15:35:39.000000000 +0200
+++ libsodium-1.0.12/test/default/randombytes.exp	2017-03-09 13:57:04.000000000 +0100
@@ -1 +1,2 @@
+0d8e6cc68715648926732e7ea73250cfaf2d58422083904c841a8ba33b986111f346ba50723a68ae283524a6bded09f83be6b80595856f72e25b86918e8b114bafb94bc8abedd73daab454576b7c5833eb0bf982a1bb4587a5c970ff0810ca3b791d7e12 (deterministic)
 OK
diff -urpN libsodium-1.0.11/test/default/scalarmult2.c libsodium-1.0.12/test/default/scalarmult2.c
--- libsodium-1.0.11/test/default/scalarmult2.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/scalarmult2.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,14 +2,16 @@
 #define TEST_NAME "scalarmult2"
 #include "cmptest.h"
 
-static unsigned char bobsk[32]
-    = { 0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f,
-        0x8b, 0x83, 0x80, 0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18,
-        0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27, 0xff, 0x88, 0xe0, 0xeb };
+static unsigned char bobsk[32] = { 0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a,
+                                   0x4b, 0x79, 0xe1, 0x7f, 0x8b, 0x83, 0x80,
+                                   0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26,
+                                   0x18, 0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27,
+                                   0xff, 0x88, 0xe0, 0xeb };
 
 static unsigned char bobpk[32];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
@@ -21,7 +23,7 @@ int main(void)
         } else {
             printf(" ");
         }
-        printf("0x%02x", (unsigned int)bobpk[i]);
+        printf("0x%02x", (unsigned int) bobpk[i]);
         if (i % 8 == 7) {
             printf("\n");
         }
diff -urpN libsodium-1.0.11/test/default/scalarmult5.c libsodium-1.0.12/test/default/scalarmult5.c
--- libsodium-1.0.11/test/default/scalarmult5.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/scalarmult5.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,19 +2,22 @@
 #define TEST_NAME "scalarmult5"
 #include "cmptest.h"
 
-static unsigned char alicesk[32]
-    = { 0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1,
-        0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0,
-        0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a };
-
-static unsigned char bobpk[32]
-    = { 0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61,
-        0xc2, 0xec, 0xe4, 0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78,
-        0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14, 0x6f, 0x88, 0x2b, 0x4f };
+static unsigned char alicesk[32] = { 0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5,
+                                     0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2,
+                                     0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb,
+                                     0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5,
+                                     0x1d, 0xb9, 0x2c, 0x2a };
+
+static unsigned char bobpk[32] = { 0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1,
+                                   0xb4, 0xd3, 0x5b, 0x61, 0xc2, 0xec, 0xe4,
+                                   0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b,
+                                   0x78, 0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14,
+                                   0x6f, 0x88, 0x2b, 0x4f };
 
 static unsigned char k[32];
 
-int main(void)
+int
+main(void)
 {
     int i;
     int ret;
@@ -28,7 +31,7 @@ int main(void)
         } else {
             printf(" ");
         }
-        printf("0x%02x", (unsigned int)k[i]);
+        printf("0x%02x", (unsigned int) k[i]);
         if (i % 8 == 7) {
             printf("\n");
         }
diff -urpN libsodium-1.0.11/test/default/scalarmult6.c libsodium-1.0.12/test/default/scalarmult6.c
--- libsodium-1.0.11/test/default/scalarmult6.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/scalarmult6.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,17 +2,20 @@
 #define TEST_NAME "scalarmult6"
 #include "cmptest.h"
 
-static unsigned char bobsk_[crypto_scalarmult_SCALARBYTES]
-    = { 0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f,
-        0x8b, 0x83, 0x80, 0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18,
-        0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27, 0xff, 0x88, 0xe0, 0xeb };
-
-static unsigned char alicepk_[crypto_scalarmult_SCALARBYTES]
-    = { 0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d,
-        0xdc, 0xb4, 0x3e, 0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38,
-        0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0x6a };
+static unsigned char bobsk_[crypto_scalarmult_SCALARBYTES] = {
+    0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f,
+    0x8b, 0x83, 0x80, 0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18,
+    0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27, 0xff, 0x88, 0xe0, 0xeb
+};
+
+static unsigned char alicepk_[crypto_scalarmult_SCALARBYTES] = {
+    0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d,
+    0xdc, 0xb4, 0x3e, 0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38,
+    0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0x6a
+};
 
-int main(void)
+int
+main(void)
 {
     unsigned char *k;
     unsigned char *bobsk;
@@ -20,8 +23,8 @@ int main(void)
     int            i;
     int            ret;
 
-    k = (unsigned char *) sodium_malloc(crypto_scalarmult_BYTES);
-    bobsk = (unsigned char *) sodium_malloc(crypto_scalarmult_SCALARBYTES);
+    k       = (unsigned char *) sodium_malloc(crypto_scalarmult_BYTES);
+    bobsk   = (unsigned char *) sodium_malloc(crypto_scalarmult_SCALARBYTES);
     alicepk = (unsigned char *) sodium_malloc(crypto_scalarmult_SCALARBYTES);
     assert(k != NULL && bobsk != NULL && alicepk != NULL);
 
@@ -40,7 +43,7 @@ int main(void)
         } else {
             printf(" ");
         }
-        printf("0x%02x", (unsigned int)k[i]);
+        printf("0x%02x", (unsigned int) k[i]);
         if (i % 8 == 7) {
             printf("\n");
         }
diff -urpN libsodium-1.0.11/test/default/scalarmult7.c libsodium-1.0.12/test/default/scalarmult7.c
--- libsodium-1.0.11/test/default/scalarmult7.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/scalarmult7.c	2017-03-06 11:13:57.000000000 +0100
@@ -3,29 +3,28 @@
 #include "cmptest.h"
 
 static unsigned char p1[32] = {
-    0x72, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54,
-    0x74, 0x8b, 0x7d, 0xdc, 0xb4, 0x3e, 0xf7, 0x5a,
-    0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38, 0x1a, 0xf4,
-    0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0xea
+    0x72, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d,
+    0xdc, 0xb4, 0x3e, 0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38,
+    0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0xea
 };
 
 static unsigned char p2[32] = {
-    0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54,
-    0x74, 0x8b, 0x7d, 0xdc, 0xb4, 0x3e, 0xf7, 0x5a,
-    0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38, 0x1a, 0xf4,
-    0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0x6a
+    0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d,
+    0xdc, 0xb4, 0x3e, 0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38,
+    0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0x6a
 };
 
 static unsigned char scalar[32];
 static unsigned char out1[32];
 static unsigned char out2[32];
 
-int main(void)
+int
+main(void)
 {
     int ret;
 
     scalar[0] = 1U;
-    ret = crypto_scalarmult_curve25519(out1, scalar, p1);
+    ret       = crypto_scalarmult_curve25519(out1, scalar, p1);
     assert(ret == 0);
     ret = crypto_scalarmult_curve25519(out2, scalar, p2);
     assert(ret == 0);
diff -urpN libsodium-1.0.11/test/default/scalarmult.c libsodium-1.0.12/test/default/scalarmult.c
--- libsodium-1.0.11/test/default/scalarmult.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/scalarmult.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,32 +2,35 @@
 #define TEST_NAME "scalarmult"
 #include "cmptest.h"
 
-static const unsigned char alicesk[crypto_scalarmult_BYTES]
-    = { 0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1,
-        0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0,
-        0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a };
-
-static const unsigned char bobsk[crypto_scalarmult_BYTES]
-    = { 0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f,
-        0x8b, 0x83, 0x80, 0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18,
-        0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27, 0xff, 0x88, 0xe0, 0xeb };
-
-static const unsigned char small_order_p[crypto_scalarmult_BYTES]
-    = { 0xe0, 0xeb, 0x7a, 0x7c, 0x3b, 0x41, 0xb8, 0xae, 0x16, 0x56, 0xe3,
-        0xfa, 0xf1, 0x9f, 0xc4, 0x6a, 0xda, 0x09, 0x8d, 0xeb, 0x9c, 0x32,
-        0xb1, 0xfd, 0x86, 0x62, 0x05, 0x16, 0x5f, 0x49, 0xb8, 0x00 };
+static const unsigned char alicesk[crypto_scalarmult_BYTES] = {
+    0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1,
+    0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0,
+    0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a
+};
+
+static const unsigned char bobsk[crypto_scalarmult_BYTES] = {
+    0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f,
+    0x8b, 0x83, 0x80, 0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18,
+    0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27, 0xff, 0x88, 0xe0, 0xeb
+};
+
+static const unsigned char small_order_p[crypto_scalarmult_BYTES] = {
+    0xe0, 0xeb, 0x7a, 0x7c, 0x3b, 0x41, 0xb8, 0xae, 0x16, 0x56, 0xe3,
+    0xfa, 0xf1, 0x9f, 0xc4, 0x6a, 0xda, 0x09, 0x8d, 0xeb, 0x9c, 0x32,
+    0xb1, 0xfd, 0x86, 0x62, 0x05, 0x16, 0x5f, 0x49, 0xb8, 0x00
+};
 
 static char hex[crypto_scalarmult_BYTES * 2 + 1];
 
-int main(void)
+int
+main(void)
 {
     unsigned char *alicepk =
         (unsigned char *) sodium_malloc(crypto_scalarmult_BYTES);
     unsigned char *bobpk =
         (unsigned char *) sodium_malloc(crypto_scalarmult_BYTES);
-    unsigned char *k =
-        (unsigned char *) sodium_malloc(crypto_scalarmult_BYTES);
-    int ret;
+    unsigned char *k = (unsigned char *) sodium_malloc(crypto_scalarmult_BYTES);
+    int            ret;
 
     assert(alicepk != NULL && bobpk != NULL && k != NULL);
 
@@ -62,8 +65,8 @@ int main(void)
     assert(crypto_scalarmult_scalarbytes() > 0U);
     assert(strcmp(crypto_scalarmult_primitive(), "curve25519") == 0);
     assert(crypto_scalarmult_bytes() == crypto_scalarmult_curve25519_bytes());
-    assert(crypto_scalarmult_scalarbytes()
-           == crypto_scalarmult_curve25519_scalarbytes());
+    assert(crypto_scalarmult_scalarbytes() ==
+           crypto_scalarmult_curve25519_scalarbytes());
     assert(crypto_scalarmult_bytes() == crypto_scalarmult_scalarbytes());
 
     return 0;
diff -urpN libsodium-1.0.11/test/default/secretbox2.c libsodium-1.0.12/test/default/secretbox2.c
--- libsodium-1.0.11/test/default/secretbox2.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/secretbox2.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,42 +2,45 @@
 #define TEST_NAME "secretbox2"
 #include "cmptest.h"
 
-static unsigned char firstkey[32]
-    = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85, 0xd4, 0x62, 0xcd, 0x51,
-        0x19, 0x7a, 0x9a, 0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac, 0x64,
-        0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08, 0x44, 0xf6, 0x83, 0x89 };
-
-static unsigned char nonce[24]
-    = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73,
-        0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6,
-        0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
+static unsigned char firstkey[32] = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85,
+                                      0xd4, 0x62, 0xcd, 0x51, 0x19, 0x7a, 0x9a,
+                                      0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac,
+                                      0x64, 0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08,
+                                      0x44, 0xf6, 0x83, 0x89 };
+
+static unsigned char nonce[24] = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6,
+                                   0x2b, 0x73, 0xcd, 0x62, 0xbd, 0xa8,
+                                   0x75, 0xfc, 0x73, 0xd6, 0x82, 0x19,
+                                   0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
 
 /* API requires first 16 bytes to be 0 */
-static unsigned char c[163]
-    = { 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0xf3, 0xff, 0xc7, 0x70, 0x3f, 0x94, 0x00, 0xe5,
-        0x2a, 0x7d, 0xfb, 0x4b, 0x3d, 0x33, 0x05, 0xd9, 0x8e, 0x99, 0x3b, 0x9f,
-        0x48, 0x68, 0x12, 0x73, 0xc2, 0x96, 0x50, 0xba, 0x32, 0xfc, 0x76, 0xce,
-        0x48, 0x33, 0x2e, 0xa7, 0x16, 0x4d, 0x96, 0xa4, 0x47, 0x6f, 0xb8, 0xc5,
-        0x31, 0xa1, 0x18, 0x6a, 0xc0, 0xdf, 0xc1, 0x7c, 0x98, 0xdc, 0xe8, 0x7b,
-        0x4d, 0xa7, 0xf0, 0x11, 0xec, 0x48, 0xc9, 0x72, 0x71, 0xd2, 0xc2, 0x0f,
-        0x9b, 0x92, 0x8f, 0xe2, 0x27, 0x0d, 0x6f, 0xb8, 0x63, 0xd5, 0x17, 0x38,
-        0xb4, 0x8e, 0xee, 0xe3, 0x14, 0xa7, 0xcc, 0x8a, 0xb9, 0x32, 0x16, 0x45,
-        0x48, 0xe5, 0x26, 0xae, 0x90, 0x22, 0x43, 0x68, 0x51, 0x7a, 0xcf, 0xea,
-        0xbd, 0x6b, 0xb3, 0x73, 0x2b, 0xc0, 0xe9, 0xda, 0x99, 0x83, 0x2b, 0x61,
-        0xca, 0x01, 0xb6, 0xde, 0x56, 0x24, 0x4a, 0x9e, 0x88, 0xd5, 0xf9, 0xb3,
-        0x79, 0x73, 0xf6, 0x22, 0xa4, 0x3d, 0x14, 0xa6, 0x59, 0x9b, 0x1f, 0x65,
-        0x4c, 0xb4, 0x5a, 0x74, 0xe3, 0x55, 0xa5 };
+static unsigned char c[163] = {
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0xf3, 0xff, 0xc7, 0x70, 0x3f, 0x94, 0x00, 0xe5,
+    0x2a, 0x7d, 0xfb, 0x4b, 0x3d, 0x33, 0x05, 0xd9, 0x8e, 0x99, 0x3b, 0x9f,
+    0x48, 0x68, 0x12, 0x73, 0xc2, 0x96, 0x50, 0xba, 0x32, 0xfc, 0x76, 0xce,
+    0x48, 0x33, 0x2e, 0xa7, 0x16, 0x4d, 0x96, 0xa4, 0x47, 0x6f, 0xb8, 0xc5,
+    0x31, 0xa1, 0x18, 0x6a, 0xc0, 0xdf, 0xc1, 0x7c, 0x98, 0xdc, 0xe8, 0x7b,
+    0x4d, 0xa7, 0xf0, 0x11, 0xec, 0x48, 0xc9, 0x72, 0x71, 0xd2, 0xc2, 0x0f,
+    0x9b, 0x92, 0x8f, 0xe2, 0x27, 0x0d, 0x6f, 0xb8, 0x63, 0xd5, 0x17, 0x38,
+    0xb4, 0x8e, 0xee, 0xe3, 0x14, 0xa7, 0xcc, 0x8a, 0xb9, 0x32, 0x16, 0x45,
+    0x48, 0xe5, 0x26, 0xae, 0x90, 0x22, 0x43, 0x68, 0x51, 0x7a, 0xcf, 0xea,
+    0xbd, 0x6b, 0xb3, 0x73, 0x2b, 0xc0, 0xe9, 0xda, 0x99, 0x83, 0x2b, 0x61,
+    0xca, 0x01, 0xb6, 0xde, 0x56, 0x24, 0x4a, 0x9e, 0x88, 0xd5, 0xf9, 0xb3,
+    0x79, 0x73, 0xf6, 0x22, 0xa4, 0x3d, 0x14, 0xa6, 0x59, 0x9b, 0x1f, 0x65,
+    0x4c, 0xb4, 0x5a, 0x74, 0xe3, 0x55, 0xa5
+};
 
 static unsigned char m[163];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
     if (crypto_secretbox_open(m, c, 163, nonce, firstkey) == 0) {
         for (i = 32; i < 163; ++i) {
-            printf(",0x%02x", (unsigned int)m[i]);
+            printf(",0x%02x", (unsigned int) m[i]);
             if (i % 8 == 7)
                 printf("\n");
         }
diff -urpN libsodium-1.0.11/test/default/secretbox7.c libsodium-1.0.12/test/default/secretbox7.c
--- libsodium-1.0.11/test/default/secretbox7.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/secretbox7.c	2017-03-06 11:13:57.000000000 +0100
@@ -8,14 +8,15 @@ static unsigned char m[10000];
 static unsigned char c[10000];
 static unsigned char m2[10000];
 
-int main(void)
+int
+main(void)
 {
     size_t mlen;
     size_t i;
 
     for (mlen = 0; mlen < 1000 && mlen + crypto_secretbox_ZEROBYTES < sizeof m;
          ++mlen) {
-        randombytes_buf(k, crypto_secretbox_KEYBYTES);
+        crypto_secretbox_keygen(k);
         randombytes_buf(n, crypto_secretbox_NONCEBYTES);
         randombytes_buf(m + crypto_secretbox_ZEROBYTES, mlen);
         crypto_secretbox(c, m, mlen + crypto_secretbox_ZEROBYTES, n, k);
diff -urpN libsodium-1.0.11/test/default/secretbox8.c libsodium-1.0.12/test/default/secretbox8.c
--- libsodium-1.0.11/test/default/secretbox8.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/secretbox8.c	2017-03-06 11:13:57.000000000 +0100
@@ -8,15 +8,16 @@ static unsigned char m[10000];
 static unsigned char c[10000];
 static unsigned char m2[10000];
 
-int main(void)
+int
+main(void)
 {
     size_t mlen;
     size_t i;
-    int caught;
+    int    caught;
 
     for (mlen = 0; mlen < 1000 && mlen + crypto_secretbox_ZEROBYTES < sizeof m;
          ++mlen) {
-        randombytes_buf(k, crypto_secretbox_KEYBYTES);
+        crypto_secretbox_keygen(k);
         randombytes_buf(n, crypto_secretbox_NONCEBYTES);
         randombytes_buf(m + crypto_secretbox_ZEROBYTES, mlen);
         crypto_secretbox(c, m, mlen + crypto_secretbox_ZEROBYTES, n, k);
diff -urpN libsodium-1.0.11/test/default/secretbox.c libsodium-1.0.12/test/default/secretbox.c
--- libsodium-1.0.11/test/default/secretbox.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/secretbox.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,42 +2,45 @@
 #define TEST_NAME "secretbox"
 #include "cmptest.h"
 
-static unsigned char firstkey[32]
-    = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85, 0xd4, 0x62, 0xcd, 0x51,
-        0x19, 0x7a, 0x9a, 0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac, 0x64,
-        0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08, 0x44, 0xf6, 0x83, 0x89 };
-
-static unsigned char nonce[24]
-    = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73,
-        0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6,
-        0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
+static unsigned char firstkey[32] = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85,
+                                      0xd4, 0x62, 0xcd, 0x51, 0x19, 0x7a, 0x9a,
+                                      0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac,
+                                      0x64, 0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08,
+                                      0x44, 0xf6, 0x83, 0x89 };
+
+static unsigned char nonce[24] = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6,
+                                   0x2b, 0x73, 0xcd, 0x62, 0xbd, 0xa8,
+                                   0x75, 0xfc, 0x73, 0xd6, 0x82, 0x19,
+                                   0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
 
 /* API requires first 32 bytes to be 0 */
-static unsigned char m[163]
-    = { 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,    0xbe, 0x07, 0x5f, 0xc5,
-        0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16, 0xeb, 0xeb, 0x0c, 0x7b,
-        0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4, 0x4b, 0x66, 0x84, 0x9b,
-        0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf, 0x33, 0xbd, 0x75, 0x1a,
-        0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29, 0x6c, 0xdc, 0x3c, 0x01,
-        0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce, 0x31, 0x4a, 0xdb, 0x31,
-        0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d, 0xce, 0xea, 0x3a, 0x7f,
-        0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a, 0xd6, 0xb1, 0x31, 0x8a,
-        0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde, 0x04, 0x89, 0x77, 0xeb,
-        0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c, 0x60, 0x90, 0x2e, 0x52,
-        0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40, 0xe0, 0x82, 0xf9, 0x37,
-        0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05 };
+static unsigned char m[163] = {
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0xbe, 0x07, 0x5f, 0xc5,
+    0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16, 0xeb, 0xeb, 0x0c, 0x7b,
+    0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4, 0x4b, 0x66, 0x84, 0x9b,
+    0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf, 0x33, 0xbd, 0x75, 0x1a,
+    0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29, 0x6c, 0xdc, 0x3c, 0x01,
+    0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce, 0x31, 0x4a, 0xdb, 0x31,
+    0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d, 0xce, 0xea, 0x3a, 0x7f,
+    0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a, 0xd6, 0xb1, 0x31, 0x8a,
+    0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde, 0x04, 0x89, 0x77, 0xeb,
+    0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c, 0x60, 0x90, 0x2e, 0x52,
+    0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40, 0xe0, 0x82, 0xf9, 0x37,
+    0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05
+};
 
 static unsigned char c[163];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
     crypto_secretbox(c, m, 163, nonce, firstkey);
     for (i = 16; i < 163; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
         if (i % 8 == 7)
             printf("\n");
     }
@@ -46,7 +49,7 @@ int main(void)
     memcpy(c, m, 163);
     crypto_secretbox(c, c, 163, nonce, firstkey);
     for (i = 16; i < 163; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
         if (i % 8 == 7)
             printf("\n");
     }
@@ -58,16 +61,16 @@ int main(void)
     assert(crypto_secretbox_boxzerobytes() > 0U);
     assert(crypto_secretbox_macbytes() > 0U);
     assert(strcmp(crypto_secretbox_primitive(), "xsalsa20poly1305") == 0);
-    assert(crypto_secretbox_keybytes()
-           == crypto_secretbox_xsalsa20poly1305_keybytes());
-    assert(crypto_secretbox_noncebytes()
-           == crypto_secretbox_xsalsa20poly1305_noncebytes());
-    assert(crypto_secretbox_zerobytes()
-           == crypto_secretbox_xsalsa20poly1305_zerobytes());
-    assert(crypto_secretbox_boxzerobytes()
-           == crypto_secretbox_xsalsa20poly1305_boxzerobytes());
-    assert(crypto_secretbox_macbytes()
-           == crypto_secretbox_xsalsa20poly1305_macbytes());
+    assert(crypto_secretbox_keybytes() ==
+           crypto_secretbox_xsalsa20poly1305_keybytes());
+    assert(crypto_secretbox_noncebytes() ==
+           crypto_secretbox_xsalsa20poly1305_noncebytes());
+    assert(crypto_secretbox_zerobytes() ==
+           crypto_secretbox_xsalsa20poly1305_zerobytes());
+    assert(crypto_secretbox_boxzerobytes() ==
+           crypto_secretbox_xsalsa20poly1305_boxzerobytes());
+    assert(crypto_secretbox_macbytes() ==
+           crypto_secretbox_xsalsa20poly1305_macbytes());
 
     return 0;
 }
diff -urpN libsodium-1.0.11/test/default/secretbox_easy2.c libsodium-1.0.12/test/default/secretbox_easy2.c
--- libsodium-1.0.11/test/default/secretbox_easy2.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/secretbox_easy2.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,7 +2,8 @@
 #define TEST_NAME "secretbox_easy2"
 #include "cmptest.h"
 
-int main(void)
+int
+main(void)
 {
     unsigned char *m;
     unsigned char *m2;
@@ -10,30 +11,30 @@ int main(void)
     unsigned char *nonce;
     unsigned char *k;
     unsigned char *mac;
-    size_t mlen;
-    size_t i;
+    size_t         mlen;
+    size_t         i;
 
-    mlen = (size_t) randombytes_uniform((uint32_t) 10000) + 1U;
-    m = (unsigned char *) sodium_malloc(mlen);
-    m2 = (unsigned char *) sodium_malloc(mlen);
-    c = (unsigned char *) sodium_malloc(crypto_secretbox_MACBYTES + mlen);
+    mlen  = (size_t) randombytes_uniform((uint32_t) 10000) + 1U;
+    m     = (unsigned char *) sodium_malloc(mlen);
+    m2    = (unsigned char *) sodium_malloc(mlen);
+    c     = (unsigned char *) sodium_malloc(crypto_secretbox_MACBYTES + mlen);
     nonce = (unsigned char *) sodium_malloc(crypto_secretbox_NONCEBYTES);
-    k = (unsigned char *) sodium_malloc(crypto_secretbox_KEYBYTES);
-    mac = (unsigned char *) sodium_malloc(crypto_secretbox_MACBYTES);
-    randombytes_buf(k, crypto_secretbox_KEYBYTES);
+    k     = (unsigned char *) sodium_malloc(crypto_secretbox_KEYBYTES);
+    mac   = (unsigned char *) sodium_malloc(crypto_secretbox_MACBYTES);
+    crypto_secretbox_keygen(k);
     randombytes_buf(m, (unsigned long long) mlen);
     randombytes_buf(nonce, crypto_secretbox_NONCEBYTES);
     crypto_secretbox_easy(c, m, (unsigned long long) mlen, nonce, k);
-    if (crypto_secretbox_open_easy(m2, c,
-                                   (unsigned long long) mlen + crypto_secretbox_MACBYTES,
-                                   nonce, k) != 0) {
+    if (crypto_secretbox_open_easy(
+            m2, c, (unsigned long long) mlen + crypto_secretbox_MACBYTES, nonce,
+            k) != 0) {
         printf("crypto_secretbox_open_easy() failed\n");
     }
     printf("%d\n", memcmp(m, m2, mlen));
 
     for (i = 0; i < mlen + crypto_secretbox_MACBYTES - 1; i++) {
-        if (crypto_secretbox_open_easy(m2, c, (unsigned long long) i,
-                                       nonce, k) == 0) {
+        if (crypto_secretbox_open_easy(m2, c, (unsigned long long) i, nonce,
+                                       k) == 0) {
             printf("short open() should have failed\n");
             return 1;
         }
@@ -49,9 +50,9 @@ int main(void)
     crypto_secretbox_easy(c, c, (unsigned long long) mlen, nonce, k);
     printf("%d\n", memcmp(m, c, mlen) == 0);
     printf("%d\n", memcmp(m, c + crypto_secretbox_MACBYTES, mlen) == 0);
-    if (crypto_secretbox_open_easy(c, c,
-                                   (unsigned long long) mlen + crypto_secretbox_MACBYTES,
-                                   nonce, k) != 0) {
+    if (crypto_secretbox_open_easy(
+            c, c, (unsigned long long) mlen + crypto_secretbox_MACBYTES, nonce,
+            k) != 0) {
         printf("crypto_secretbox_open_easy() failed\n");
     }
     printf("%d\n", memcmp(m, c, mlen));
diff -urpN libsodium-1.0.11/test/default/secretbox_easy.c libsodium-1.0.12/test/default/secretbox_easy.c
--- libsodium-1.0.11/test/default/secretbox_easy.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/secretbox_easy.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,51 +2,54 @@
 #define TEST_NAME "secretbox_easy"
 #include "cmptest.h"
 
-static unsigned char firstkey[32]
-    = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85, 0xd4, 0x62, 0xcd, 0x51,
-        0x19, 0x7a, 0x9a, 0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac, 0x64,
-        0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08, 0x44, 0xf6, 0x83, 0x89 };
-
-static unsigned char nonce[24]
-    = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73,
-        0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6,
-        0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
-
-static unsigned char m[131]
-    = { 0xbe, 0x07, 0x5f, 0xc5, 0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16,
-        0xeb, 0xeb, 0x0c, 0x7b, 0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4,
-        0x4b, 0x66, 0x84, 0x9b, 0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf,
-        0x33, 0xbd, 0x75, 0x1a, 0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29,
-        0x6c, 0xdc, 0x3c, 0x01, 0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce,
-        0x31, 0x4a, 0xdb, 0x31, 0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d,
-        0xce, 0xea, 0x3a, 0x7f, 0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a,
-        0xd6, 0xb1, 0x31, 0x8a, 0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde,
-        0x04, 0x89, 0x77, 0xeb, 0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c,
-        0x60, 0x90, 0x2e, 0x52, 0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40,
-        0xe0, 0x82, 0xf9, 0x37, 0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05 };
+static unsigned char firstkey[32] = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85,
+                                      0xd4, 0x62, 0xcd, 0x51, 0x19, 0x7a, 0x9a,
+                                      0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac,
+                                      0x64, 0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08,
+                                      0x44, 0xf6, 0x83, 0x89 };
+
+static unsigned char nonce[24] = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6,
+                                   0x2b, 0x73, 0xcd, 0x62, 0xbd, 0xa8,
+                                   0x75, 0xfc, 0x73, 0xd6, 0x82, 0x19,
+                                   0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
+
+static unsigned char m[131] = {
+    0xbe, 0x07, 0x5f, 0xc5, 0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16,
+    0xeb, 0xeb, 0x0c, 0x7b, 0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4,
+    0x4b, 0x66, 0x84, 0x9b, 0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf,
+    0x33, 0xbd, 0x75, 0x1a, 0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29,
+    0x6c, 0xdc, 0x3c, 0x01, 0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce,
+    0x31, 0x4a, 0xdb, 0x31, 0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d,
+    0xce, 0xea, 0x3a, 0x7f, 0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a,
+    0xd6, 0xb1, 0x31, 0x8a, 0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde,
+    0x04, 0x89, 0x77, 0xeb, 0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c,
+    0x60, 0x90, 0x2e, 0x52, 0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40,
+    0xe0, 0x82, 0xf9, 0x37, 0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05
+};
 
-int main(void)
+int
+main(void)
 {
     unsigned char *c;
     unsigned char *mac;
     size_t         i;
 
-    c = (unsigned char *) sodium_malloc(131 + crypto_secretbox_MACBYTES + 1);
+    c   = (unsigned char *) sodium_malloc(131 + crypto_secretbox_MACBYTES + 1);
     mac = (unsigned char *) sodium_malloc(crypto_secretbox_MACBYTES);
     assert(c != NULL && mac != NULL);
 
     crypto_secretbox_easy(c, m, 131, nonce, firstkey);
     for (i = 0; i < 131 + crypto_secretbox_MACBYTES; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
     }
     printf("\n");
 
     crypto_secretbox_detached(c, mac, m, 131, nonce, firstkey);
     for (i = 0; i < crypto_secretbox_MACBYTES; ++i) {
-        printf(",0x%02x", (unsigned int)mac[i]);
+        printf(",0x%02x", (unsigned int) mac[i]);
     }
     for (i = 0; i < 131; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
     }
     printf("\n");
 
@@ -55,21 +58,21 @@ int main(void)
     memcpy(c + 1, m, 131);
     crypto_secretbox_easy(c, c + 1, 131, nonce, firstkey);
     for (i = 0; i < 131 + crypto_secretbox_MACBYTES; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
     }
     printf("\n");
 
     memcpy(c, m, 131);
     crypto_secretbox_easy(c + 1, c, 131, nonce, firstkey);
     for (i = 0; i < 131 + crypto_secretbox_MACBYTES; ++i) {
-        printf(",0x%02x", (unsigned int)c[i + 1]);
+        printf(",0x%02x", (unsigned int) c[i + 1]);
     }
     printf("\n");
 
     memcpy(c, m, 131);
     crypto_secretbox_easy(c, c, 131, nonce, firstkey);
     for (i = 0; i < 131 + crypto_secretbox_MACBYTES; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
     }
     printf("\n");
 
@@ -79,20 +82,20 @@ int main(void)
 
     crypto_secretbox_easy(c, c, 0, nonce, firstkey);
     for (i = 0; i < crypto_secretbox_MACBYTES + 1; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
     }
     printf("\n");
-    if (crypto_secretbox_open_easy(c, c, crypto_secretbox_MACBYTES,
-                                   nonce, firstkey) != 0) {
+    if (crypto_secretbox_open_easy(c, c, crypto_secretbox_MACBYTES, nonce,
+                                   firstkey) != 0) {
         printf("Null crypto_secretbox_open_easy() failed\n");
     }
     for (i = 0; i < crypto_secretbox_MACBYTES + 1; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
     }
     printf("\n");
     c[randombytes_uniform(crypto_secretbox_MACBYTES)]++;
-    if (crypto_secretbox_open_easy(c, c, crypto_secretbox_MACBYTES,
-                                   nonce, firstkey) != -1) {
+    if (crypto_secretbox_open_easy(c, c, crypto_secretbox_MACBYTES, nonce,
+                                   firstkey) != -1) {
         printf("Null tampered crypto_secretbox_open_easy() failed\n");
     }
 
diff -urpN libsodium-1.0.11/test/default/shorthash.c libsodium-1.0.12/test/default/shorthash.c
--- libsodium-1.0.11/test/default/shorthash.c	2016-05-29 08:39:55.000000000 +0200
+++ libsodium-1.0.12/test/default/shorthash.c	2017-03-06 11:13:57.000000000 +0100
@@ -4,7 +4,8 @@
 
 #define MAXLEN 64
 
-int main(void)
+int
+main(void)
 {
     unsigned char in[MAXLEN];
     unsigned char out[crypto_shorthash_BYTES];
@@ -15,7 +16,6 @@ int main(void)
     for (i = 0; i < crypto_shorthash_KEYBYTES; ++i) {
         k[i] = (unsigned char) i;
     }
-
     for (i = 0; i < MAXLEN; ++i) {
         in[i] = (unsigned char) i;
         crypto_shorthash(out, in, (unsigned long long) i, k);
@@ -28,8 +28,8 @@ int main(void)
     assert(crypto_shorthash_keybytes() > 0);
     assert(strcmp(crypto_shorthash_primitive(), "siphash24") == 0);
     assert(crypto_shorthash_bytes() == crypto_shorthash_siphash24_bytes());
-    assert(crypto_shorthash_keybytes()
-           == crypto_shorthash_siphash24_keybytes());
+    assert(crypto_shorthash_keybytes() ==
+           crypto_shorthash_siphash24_keybytes());
 
     return 0;
 }
diff -urpN libsodium-1.0.11/test/default/sign.c libsodium-1.0.12/test/default/sign.c
--- libsodium-1.0.11/test/default/sign.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/sign.c	2017-03-06 23:32:40.000000000 +0100
@@ -1061,21 +1061,23 @@ static void add_l(unsigned char * const
 
 int main(void)
 {
-    unsigned char extracted_seed[crypto_sign_ed25519_SEEDBYTES];
-    unsigned char extracted_pk[crypto_sign_ed25519_PUBLICKEYBYTES];
-    unsigned char sig[crypto_sign_BYTES];
-    unsigned char sm[1024 + crypto_sign_BYTES];
-    unsigned char m[1024];
-    unsigned char skpk[crypto_sign_SECRETKEYBYTES];
-    unsigned char pk[crypto_sign_PUBLICKEYBYTES];
-    unsigned char sk[crypto_sign_SECRETKEYBYTES];
-    char          pk_hex[crypto_sign_PUBLICKEYBYTES * 2 + 1];
-    char          sk_hex[crypto_sign_SECRETKEYBYTES * 2 + 1];
+    crypto_sign_state  st;
+    unsigned char      extracted_seed[crypto_sign_ed25519_SEEDBYTES];
+    unsigned char      extracted_pk[crypto_sign_ed25519_PUBLICKEYBYTES];
+    unsigned char      sig[crypto_sign_BYTES];
+    unsigned char      sm[1024 + crypto_sign_BYTES];
+    unsigned char      m[1024];
+    unsigned char      skpk[crypto_sign_SECRETKEYBYTES];
+    unsigned char      pk[crypto_sign_PUBLICKEYBYTES];
+    unsigned char      sk[crypto_sign_SECRETKEYBYTES];
+    char               sig_hex[crypto_sign_BYTES * 2 + 1];
+    char               pk_hex[crypto_sign_PUBLICKEYBYTES * 2 + 1];
+    char               sk_hex[crypto_sign_SECRETKEYBYTES * 2 + 1];
     unsigned long long siglen;
     unsigned long long smlen;
     unsigned long long mlen;
-    unsigned int i;
-    unsigned int j;
+    unsigned int       i;
+    unsigned int       j;
 
     memset(sig, 0, sizeof sig);
     for (i = 0U; i < (sizeof test_data) / (sizeof test_data[0]); i++) {
@@ -1134,7 +1136,7 @@ int main(void)
             continue;
         }
         if (siglen == 0U || siglen > crypto_sign_BYTES) {
-            printf("detached signature has an unexpected length");
+            printf("detached signature has an unexpected length: [%u]\n", i);
             continue;
         }
         if (memcmp(test_data[i].sig, sig, crypto_sign_BYTES) != 0) {
@@ -1189,6 +1191,60 @@ int main(void)
         printf("detached signature verification should have failed\n");
     }
 
+    if (crypto_sign_seed_keypair(pk, sk, keypair_seed) != 0) {
+        printf("crypto_sign_seed_keypair() failure\n");
+        return -1;
+    }
+    crypto_sign_init(&st);
+    crypto_sign_update(&st, (const unsigned char *)test_data[i].m, i);
+    crypto_sign_final_create(&st, sig, NULL, sk);
+    sodium_bin2hex(sig_hex, sizeof sig_hex, sig, sizeof sig);
+    printf("ed25519ph sig: [%s]\n", sig_hex);
+
+    crypto_sign_init(&st);
+    crypto_sign_update(&st, (const unsigned char *)test_data[i].m, i);
+    if (crypto_sign_final_verify(&st, sig, pk) != 0) {
+        printf("ed5519ph verification failed\n");
+    }
+    crypto_sign_init(&st);
+    crypto_sign_update(&st, (const unsigned char *)test_data[i].m, 0);
+    crypto_sign_update(&st, (const unsigned char *)test_data[i].m, i / 2);
+    crypto_sign_update(&st, ((const unsigned char *)test_data[i].m) + i / 2,
+                       i - i / 2);
+    if (crypto_sign_final_verify(&st, sig, pk) != 0) {
+        printf("ed5519ph verification failed\n");
+    }
+    sig[0]++;
+    if (crypto_sign_final_verify(&st, sig, pk) != -1) {
+        printf("ed5519ph verification could be forged\n");
+    }
+    sig[0]--;
+    pk[0]++;
+    if (crypto_sign_final_verify(&st, sig, pk) != -1) {
+        printf("ed5519ph verification could be forged\n");
+    }
+    sodium_hex2bin(sk, crypto_sign_SECRETKEYBYTES,
+                   "833fe62409237b9d62ec77587520911e9a759cec1d19755b7da901b96dca3d42",
+                   2 * crypto_sign_SECRETKEYBYTES , NULL, NULL, NULL);
+    sodium_hex2bin(pk, crypto_sign_PUBLICKEYBYTES,
+                   "ec172b93ad5e563bf4932c70e1245034c35467ef2efd4d64ebf819683467e2bf",
+                   2 * crypto_sign_PUBLICKEYBYTES, NULL, NULL, NULL);
+    memcpy(sk + crypto_sign_SECRETKEYBYTES - crypto_sign_PUBLICKEYBYTES,
+           pk, crypto_sign_PUBLICKEYBYTES);
+    crypto_sign_init(&st);
+    crypto_sign_update(&st, (const unsigned char *) "abc", 3);
+    crypto_sign_final_create(&st, sig, &siglen, sk);
+    if (siglen == 0U || siglen > crypto_sign_BYTES) {
+        printf("ed25519ph signature has an unexpected length\n");
+    }
+    sodium_bin2hex(sig_hex, sizeof sig_hex, sig, sizeof sig);
+    printf("ed25519ph tv sig: [%s]\n", sig_hex);
+
+    crypto_sign_init(&st);
+    crypto_sign_update(&st, (const unsigned char *) "abc", 3);
+    if (crypto_sign_final_verify(&st, sig, pk) != 0) {
+        printf("ed25519ph verification failed\n");
+    }
     if (crypto_sign_keypair(pk, sk) != 0) {
         printf("crypto_sign_keypair() failure\n");
     }
@@ -1222,6 +1278,7 @@ int main(void)
            == crypto_sign_ed25519_publickeybytes());
     assert(crypto_sign_secretkeybytes()
            == crypto_sign_ed25519_secretkeybytes());
+    assert(crypto_sign_statebytes() == crypto_sign_ed25519ph_statebytes());
 
     return 0;
 }
diff -urpN libsodium-1.0.11/test/default/sign.exp libsodium-1.0.12/test/default/sign.exp
--- libsodium-1.0.11/test/default/sign.exp	2015-12-07 02:04:22.000000000 +0100
+++ libsodium-1.0.12/test/default/sign.exp	2017-03-06 23:32:40.000000000 +0100
@@ -1,3 +1,5 @@
 1024 tests
+ed25519ph sig: [10c5411e40bd10170fb890d4dfdb6d338c8cb11d2764a216ee54df10977dcdefd8ff755b1eeb3f16fce80e40e7aafc99083dbff43d5031baf04157b48423960d]
+ed25519ph tv sig: [98a70222f0b8121aa9d30f813d683f809e462b469c7ff87639499bb94e6dae4131f85042463c2a355a2003d062adf5aaa10b8c61e636062aaad11c2a26083406]
 pk: [b5076a8474a832daee4dd5b4040983b6623b5f344aca57d4d6ee4baf3f259e6e]
 sk: [421151a459faeade3d247115f94aedae42318124095afabe4d1451a559faedeeb5076a8474a832daee4dd5b4040983b6623b5f344aca57d4d6ee4baf3f259e6e]
diff -urpN libsodium-1.0.11/test/default/siphashx24.c libsodium-1.0.12/test/default/siphashx24.c
--- libsodium-1.0.11/test/default/siphashx24.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/siphashx24.c	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,33 @@
+
+#define TEST_NAME "siphashx24"
+#include "cmptest.h"
+
+#define MAXLEN 64
+
+int
+main(void)
+{
+    unsigned char in[MAXLEN];
+    unsigned char out[crypto_shorthash_siphashx24_BYTES];
+    unsigned char k[crypto_shorthash_siphashx24_KEYBYTES];
+    size_t        i;
+    size_t        j;
+
+    for (i = 0; i < crypto_shorthash_siphashx24_KEYBYTES; ++i) {
+        k[i] = (unsigned char) i;
+    }
+    for (i = 0; i < MAXLEN; ++i) {
+        in[i] = (unsigned char) i;
+        crypto_shorthash_siphashx24(out, in, (unsigned long long) i, k);
+        for (j = 0; j < crypto_shorthash_siphashx24_BYTES; ++j) {
+            printf("%02x", (unsigned int) out[j]);
+        }
+        printf("\n");
+    }
+    assert(crypto_shorthash_siphashx24_KEYBYTES >= crypto_shorthash_siphash24_KEYBYTES);
+    assert(crypto_shorthash_siphashx24_BYTES > crypto_shorthash_siphash24_BYTES);
+    assert(crypto_shorthash_siphashx24_bytes() == crypto_shorthash_siphashx24_BYTES);
+    assert(crypto_shorthash_siphashx24_keybytes() == crypto_shorthash_siphashx24_KEYBYTES);
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/test/default/siphashx24.exp libsodium-1.0.12/test/default/siphashx24.exp
--- libsodium-1.0.11/test/default/siphashx24.exp	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/siphashx24.exp	2017-03-06 11:13:57.000000000 +0100
@@ -0,0 +1,64 @@
+a3817f04ba25a8e66df67214c7550293
+da87c1d86b99af44347659119b22fc45
+8177228da4a45dc7fca38bdef60affe4
+9c70b60c5267a94e5f33b6b02985ed51
+f88164c12d9c8faf7d0f6e7c7bcd5579
+1368875980776f8854527a07690e9627
+14eeca338b208613485ea0308fd7a15e
+a1f1ebbed8dbc153c0b84aa61ff08239
+3b62a9ba6258f5610f83e264f31497b4
+264499060ad9baabc47f8b02bb6d71ed
+00110dc378146956c95447d3f3d0fbba
+0151c568386b6677a2b4dc6f81e5dc18
+d626b266905ef35882634df68532c125
+9869e247e9c08b10d029934fc4b952f7
+31fcefac66d7de9c7ec7485fe4494902
+5493e99933b0a8117e08ec0f97cfc3d9
+6ee2a4ca67b054bbfd3315bf85230577
+473d06e8738db89854c066c47ae47740
+a426e5e423bf4885294da481feaef723
+78017731cf65fab074d5208952512eb1
+9e25fc833f2290733e9344a5e83839eb
+568e495abe525a218a2214cd3e071d12
+4a29b54552d16b9a469c10528eff0aae
+c9d184ddd5a9f5e0cf8ce29a9abf691c
+2db479ae78bd50d8882a8a178a6132ad
+8ece5f042d5e447b5051b9eacb8d8f6f
+9c0b53b4b3c307e87eaee08678141f66
+abf248af69a6eae4bfd3eb2f129eeb94
+0664da1668574b88b935f3027358aef4
+aa4b9dc4bf337de90cd4fd3c467c6ab7
+ea5c7f471faf6bde2b1ad7d4686d2287
+2939b0183223fafc1723de4f52c43d35
+7c3956ca5eeafc3e363e9d556546eb68
+77c6077146f01c32b6b69d5f4ea9ffcf
+37a6986cb8847edf0925f0f1309b54de
+a705f0e69da9a8f907241a2e923c8cc8
+3dc47d1f29c448461e9e76ed904f6711
+0d62bf01e6fc0e1a0d3c4751c5d3692b
+8c03468bca7c669ee4fd5e084bbee7b5
+528a5bb93baf2c9c4473cce5d0d22bd9
+df6a301e95c95dad97ae0cc8c6913bd8
+801189902c857f39e73591285e70b6db
+e617346ac9c231bb3650ae34ccca0c5b
+27d93437efb721aa401821dcec5adf89
+89237d9ded9c5e78d8b1c9b166cc7342
+4a6d8091bf5e7d651189fa94a250b14c
+0e33f96055e7ae893ffc0e3dcf492902
+e61c432b720b19d18ec8d84bdc63151b
+f7e5aef549f782cf379055a608269b16
+438d030fd0b7a54fa837f2ad201a6403
+a590d3ee4fbf04e3247e0d27f286423f
+5fe2c1a172fe93c4b15cd37caef9f538
+2c97325cbd06b36eb2133dd08b3a017c
+92c814227a6bca949ff0659f002ad39e
+dce850110bd8328cfbd50841d6911d87
+67f14984c7da791248e32bb5922583da
+1938f2cf72d54ee97e94166fa91d2a36
+74481e9646ed49fe0f6224301604698e
+57fca5de98a9d6d8006438d0583d8a1d
+9fecde1cefdc1cbed4763674d9575359
+e3040c00eb28f15366ca73cbd872e740
+7697009a6a831dfecca91c5993670f7a
+5853542321f567a005d547a4f04759bd
+5150d1772f50834a503e069a973fbd7c
diff -urpN libsodium-1.0.11/test/default/sodium_core.c libsodium-1.0.12/test/default/sodium_core.c
--- libsodium-1.0.11/test/default/sodium_core.c	2016-07-06 20:54:41.000000000 +0200
+++ libsodium-1.0.12/test/default/sodium_core.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,17 +2,18 @@
 #define TEST_NAME "sodium_core"
 #include "cmptest.h"
 
-int main(void)
+int
+main(void)
 {
     printf("%d\n", sodium_init());
 
-    (void)sodium_runtime_has_neon();
-    (void)sodium_runtime_has_sse2();
-    (void)sodium_runtime_has_sse3();
-    (void)sodium_runtime_has_ssse3();
-    (void)sodium_runtime_has_sse41();
-    (void)sodium_runtime_has_pclmul();
-    (void)sodium_runtime_has_aesni();
+    (void) sodium_runtime_has_neon();
+    (void) sodium_runtime_has_sse2();
+    (void) sodium_runtime_has_sse3();
+    (void) sodium_runtime_has_ssse3();
+    (void) sodium_runtime_has_sse41();
+    (void) sodium_runtime_has_pclmul();
+    (void) sodium_runtime_has_aesni();
 
     return 0;
 }
diff -urpN libsodium-1.0.11/test/default/sodium_utils2.c libsodium-1.0.12/test/default/sodium_utils2.c
--- libsodium-1.0.11/test/default/sodium_utils2.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/sodium_utils2.c	2017-03-06 11:13:57.000000000 +0100
@@ -9,10 +9,11 @@
 #include "cmptest.h"
 
 #ifdef __SANITIZE_ADDRESS__
-# warning The sodium_utils2 test is expected to fail with address sanitizer
+#warning The sodium_utils2 test is expected to fail with address sanitizer
 #endif
 
-__attribute__ ((noreturn)) static void segv_handler(int sig)
+__attribute__((noreturn)) static void
+segv_handler(int sig)
 {
     (void) sig;
 
@@ -30,10 +31,11 @@ __attribute__ ((noreturn)) static void s
     exit(0);
 }
 
-int main(void)
+int
+main(void)
 {
-    void *buf;
-    size_t size;
+    void *       buf;
+    size_t       size;
     unsigned int i;
 
     if (sodium_malloc(SIZE_MAX - 1U) != NULL) {
@@ -57,7 +59,7 @@ int main(void)
     sodium_free(NULL);
     for (i = 0U; i < 10000U; i++) {
         size = 1U + randombytes_uniform(100000U);
-        buf = sodium_malloc(size);
+        buf  = sodium_malloc(size);
         assert(buf != NULL);
         memset(buf, i, size);
         sodium_mprotect_noaccess(buf);
@@ -75,12 +77,12 @@ int main(void)
     signal(SIGABRT, segv_handler);
 #endif
     size = 1U + randombytes_uniform(100000U);
-    buf = sodium_malloc(size);
+    buf  = sodium_malloc(size);
     assert(buf != NULL);
     sodium_mprotect_readonly(buf);
     sodium_mprotect_readwrite(buf);
 #ifndef __EMSCRIPTEN__
-    sodium_memzero(((unsigned char *)buf) + size, 1U);
+    sodium_memzero(((unsigned char *) buf) + size, 1U);
     sodium_mprotect_noaccess(buf);
     sodium_free(buf);
     printf("Overflow not caught\n");
diff -urpN libsodium-1.0.11/test/default/sodium_utils3.c libsodium-1.0.12/test/default/sodium_utils3.c
--- libsodium-1.0.11/test/default/sodium_utils3.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/sodium_utils3.c	2017-03-06 11:13:57.000000000 +0100
@@ -9,10 +9,11 @@
 #include "cmptest.h"
 
 #ifdef __SANITIZE_ADDRESS__
-# warning The sodium_utils3 test is expected to fail with address sanitizer
+#warning The sodium_utils3 test is expected to fail with address sanitizer
 #endif
 
-__attribute__ ((noreturn)) static void segv_handler(int sig)
+__attribute__((noreturn)) static void
+segv_handler(int sig)
 {
     (void) sig;
 
@@ -30,9 +31,10 @@ __attribute__ ((noreturn)) static void s
     exit(0);
 }
 
-int main(void)
+int
+main(void)
 {
-    void *buf;
+    void * buf;
     size_t size;
 
 #ifdef SIGSEGV
@@ -45,12 +47,12 @@ int main(void)
     signal(SIGABRT, segv_handler);
 #endif
     size = 1U + randombytes_uniform(100000U);
-    buf = sodium_malloc(size);
+    buf  = sodium_malloc(size);
     assert(buf != NULL);
     sodium_mprotect_noaccess(buf);
     sodium_mprotect_readwrite(buf);
 #ifndef __EMSCRIPTEN__
-    sodium_memzero(((unsigned char *)buf) - 8, 8U);
+    sodium_memzero(((unsigned char *) buf) - 8, 8U);
     sodium_mprotect_readonly(buf);
     sodium_free(buf);
     printf("Underflow not caught\n");
diff -urpN libsodium-1.0.11/test/default/sodium_utils.c libsodium-1.0.12/test/default/sodium_utils.c
--- libsodium-1.0.11/test/default/sodium_utils.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/sodium_utils.c	2017-03-06 11:13:57.000000000 +0100
@@ -1,22 +1,23 @@
 #define TEST_NAME "sodium_utils"
 #include "cmptest.h"
 
-int main(void)
+int
+main(void)
 {
-    unsigned char  buf_add[1000];
-    unsigned char  buf1[1000];
-    unsigned char  buf2[1000];
-    unsigned char  buf1_rev[1000];
-    unsigned char  buf2_rev[1000];
-    char           buf3[33];
-    unsigned char  buf4[4];
-    unsigned char  nonce[24];
-    char           nonce_hex[49];
-    const char    *hex;
-    const char    *hex_end;
-    size_t         bin_len;
-    unsigned int   i;
-    unsigned int   j;
+    unsigned char buf_add[1000];
+    unsigned char buf1[1000];
+    unsigned char buf2[1000];
+    unsigned char buf1_rev[1000];
+    unsigned char buf2_rev[1000];
+    char          buf3[33];
+    unsigned char buf4[4];
+    unsigned char nonce[24];
+    char          nonce_hex[49];
+    const char *  hex;
+    const char *  hex_end;
+    size_t        bin_len;
+    unsigned int  i;
+    unsigned int  j;
 
     randombytes_buf(buf1, sizeof buf1);
     memcpy(buf2, buf1, sizeof buf2);
@@ -29,17 +30,18 @@ int main(void)
     sodium_memzero(buf2, sizeof buf2 / 2);
     printf("%d\n", sodium_memcmp(buf1, buf2, sizeof buf1));
     printf("%s\n",
-           sodium_bin2hex(buf3, 33U, (const unsigned char *)"0123456789ABCDEF",
+           sodium_bin2hex(buf3, 33U, (const unsigned char *) "0123456789ABCDEF",
                           16U));
     hex = "Cafe : 6942";
-    sodium_hex2bin(buf4, sizeof buf4, hex, strlen(hex), ": ", &bin_len, &hex_end);
-    printf("%lu:%02x%02x%02x%02x\n", (unsigned long)bin_len, buf4[0], buf4[1],
+    sodium_hex2bin(buf4, sizeof buf4, hex, strlen(hex), ": ", &bin_len,
+                   &hex_end);
+    printf("%lu:%02x%02x%02x%02x\n", (unsigned long) bin_len, buf4[0], buf4[1],
            buf4[2], buf4[3]);
     printf("dt1: %ld\n", (long) (hex_end - hex));
 
     hex = "Cafe : 6942";
     sodium_hex2bin(buf4, sizeof buf4, hex, strlen(hex), ": ", &bin_len, NULL);
-    printf("%lu:%02x%02x%02x%02x\n", (unsigned long)bin_len, buf4[2], buf4[3],
+    printf("%lu:%02x%02x%02x%02x\n", (unsigned long) bin_len, buf4[2], buf4[3],
            buf4[2], buf4[3]);
 
     hex = "deadbeef";
@@ -50,43 +52,47 @@ int main(void)
 
     hex = "de:ad:be:eff";
     if (sodium_hex2bin(buf1, 4U, hex, 12U, ":", &bin_len, &hex_end) != -1) {
-        printf("sodium_hex2bin() with an odd input length and a short output buffer\n");
+        printf(
+            "sodium_hex2bin() with an odd input length and a short output "
+            "buffer\n");
     }
     printf("dt3: %ld\n", (long) (hex_end - hex));
 
     hex = "de:ad:be:eff";
-    if (sodium_hex2bin(buf1, sizeof buf1, hex, 12U, ":", &bin_len, &hex_end) != 0) {
+    if (sodium_hex2bin(buf1, sizeof buf1, hex, 12U, ":", &bin_len, &hex_end) !=
+        0) {
         printf("sodium_hex2bin() with an odd input length\n");
     }
     printf("dt4: %ld\n", (long) (hex_end - hex));
 
     hex = "de:ad:be:eff";
-    if (sodium_hex2bin(buf1, sizeof buf1, hex, 13U, ":", &bin_len, &hex_end) != 0) {
+    if (sodium_hex2bin(buf1, sizeof buf1, hex, 13U, ":", &bin_len, &hex_end) !=
+        0) {
         printf("sodium_hex2bin() with an odd input length\n");
     }
     printf("dt5: %ld\n", (long) (hex_end - hex));
 
     memset(nonce, 0, sizeof nonce);
     sodium_increment(nonce, sizeof nonce);
-    printf("%s\n", sodium_bin2hex(nonce_hex, sizeof nonce_hex,
-                                  nonce, sizeof nonce));
+    printf("%s\n",
+           sodium_bin2hex(nonce_hex, sizeof nonce_hex, nonce, sizeof nonce));
     memset(nonce, 255, sizeof nonce);
     sodium_increment(nonce, sizeof nonce);
-    printf("%s\n", sodium_bin2hex(nonce_hex, sizeof nonce_hex,
-                                  nonce, sizeof nonce));
+    printf("%s\n",
+           sodium_bin2hex(nonce_hex, sizeof nonce_hex, nonce, sizeof nonce));
     nonce[1] = 1U;
     sodium_increment(nonce, sizeof nonce);
-    printf("%s\n", sodium_bin2hex(nonce_hex, sizeof nonce_hex,
-                                  nonce, sizeof nonce));
+    printf("%s\n",
+           sodium_bin2hex(nonce_hex, sizeof nonce_hex, nonce, sizeof nonce));
     nonce[1] = 0U;
     sodium_increment(nonce, sizeof nonce);
-    printf("%s\n", sodium_bin2hex(nonce_hex, sizeof nonce_hex,
-                                  nonce, sizeof nonce));
+    printf("%s\n",
+           sodium_bin2hex(nonce_hex, sizeof nonce_hex, nonce, sizeof nonce));
     nonce[0] = 255U;
     nonce[2] = 255U;
     sodium_increment(nonce, sizeof nonce);
-    printf("%s\n", sodium_bin2hex(nonce_hex, sizeof nonce_hex,
-                                  nonce, sizeof nonce));
+    printf("%s\n",
+           sodium_bin2hex(nonce_hex, sizeof nonce_hex, nonce, sizeof nonce));
     for (i = 0U; i < 1000U; i++) {
         bin_len = (size_t) randombytes_uniform(sizeof buf1);
         randombytes_buf(buf1, bin_len);
@@ -96,7 +102,8 @@ int main(void)
             buf2_rev[bin_len - 1 - j] = buf2[j];
         }
         if (memcmp(buf1_rev, buf2_rev, bin_len) *
-            sodium_compare(buf1, buf2, bin_len) < 0) {
+                sodium_compare(buf1, buf2, bin_len) <
+            0) {
             printf("sodium_compare() failure with length=%u\n",
                    (unsigned int) bin_len);
         }
@@ -146,37 +153,36 @@ int main(void)
     memset(nonce, 0xfe, 24U);
     memset(nonce, 0xff, 6U);
     sodium_increment(nonce, 8U);
-    printf("%s\n", sodium_bin2hex(nonce_hex, sizeof nonce_hex,
-                                  nonce, sizeof nonce));
+    printf("%s\n",
+           sodium_bin2hex(nonce_hex, sizeof nonce_hex, nonce, sizeof nonce));
     memset(nonce, 0xfe, 24U);
     memset(nonce, 0xff, 10U);
     sodium_increment(nonce, 12U);
-    printf("%s\n", sodium_bin2hex(nonce_hex, sizeof nonce_hex,
-                                  nonce, sizeof nonce));
+    printf("%s\n",
+           sodium_bin2hex(nonce_hex, sizeof nonce_hex, nonce, sizeof nonce));
     memset(nonce, 0xff, 22U);
     sodium_increment(nonce, 24U);
-    printf("%s\n", sodium_bin2hex(nonce_hex, sizeof nonce_hex,
-                                  nonce, sizeof nonce));
-
+    printf("%s\n",
+           sodium_bin2hex(nonce_hex, sizeof nonce_hex, nonce, sizeof nonce));
 
     assert(sizeof nonce >= 24U);
     memset(nonce, 0xfe, 24U);
     memset(nonce, 0xff, 6U);
     sodium_add(nonce, nonce, 7U);
     sodium_add(nonce, nonce, 8U);
-    printf("%s\n", sodium_bin2hex(nonce_hex, sizeof nonce_hex,
-                                  nonce, sizeof nonce));
+    printf("%s\n",
+           sodium_bin2hex(nonce_hex, sizeof nonce_hex, nonce, sizeof nonce));
     memset(nonce, 0xfe, 24U);
     memset(nonce, 0xff, 10U);
     sodium_add(nonce, nonce, 11U);
     sodium_add(nonce, nonce, 12U);
-    printf("%s\n", sodium_bin2hex(nonce_hex, sizeof nonce_hex,
-                                  nonce, sizeof nonce));
+    printf("%s\n",
+           sodium_bin2hex(nonce_hex, sizeof nonce_hex, nonce, sizeof nonce));
     memset(nonce, 0xff, 22U);
     sodium_add(nonce, nonce, 23U);
     sodium_add(nonce, nonce, 24U);
-    printf("%s\n", sodium_bin2hex(nonce_hex, sizeof nonce_hex,
-                                  nonce, sizeof nonce));
+    printf("%s\n",
+           sodium_bin2hex(nonce_hex, sizeof nonce_hex, nonce, sizeof nonce));
 
     return 0;
 }
diff -urpN libsodium-1.0.11/test/default/sodium_version.c libsodium-1.0.12/test/default/sodium_version.c
--- libsodium-1.0.11/test/default/sodium_version.c	2016-02-27 13:22:10.000000000 +0100
+++ libsodium-1.0.12/test/default/sodium_version.c	2017-03-06 23:32:40.000000000 +0100
@@ -2,11 +2,17 @@
 #define TEST_NAME "sodium_version"
 #include "cmptest.h"
 
-int main(void)
+int
+main(void)
 {
     printf("%d\n", sodium_version_string() != NULL);
     printf("%d\n", sodium_library_version_major() > 0);
     printf("%d\n", sodium_library_version_minor() >= 0);
+#ifdef SODIUM_LIBRARY_MINIMAL
+    assert(sodium_library_minimal() == 1);
+#else
+    assert(sodium_library_minimal() == 0);
+#endif
 
     return 0;
 }
diff -urpN libsodium-1.0.11/test/default/stream2.c libsodium-1.0.12/test/default/stream2.c
--- libsodium-1.0.11/test/default/stream2.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/stream2.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,19 +2,21 @@
 #define TEST_NAME "stream2"
 #include "cmptest.h"
 
-static unsigned char secondkey[32]
-    = { 0xdc, 0x90, 0x8d, 0xda, 0x0b, 0x93, 0x44, 0xa9, 0x53, 0x62, 0x9b,
-        0x73, 0x38, 0x20, 0x77, 0x88, 0x80, 0xf3, 0xce, 0xb4, 0x21, 0xbb,
-        0x61, 0xb9, 0x1c, 0xbd, 0x4c, 0x3e, 0x66, 0x25, 0x6c, 0xe4 };
+static unsigned char secondkey[32] = { 0xdc, 0x90, 0x8d, 0xda, 0x0b, 0x93, 0x44,
+                                       0xa9, 0x53, 0x62, 0x9b, 0x73, 0x38, 0x20,
+                                       0x77, 0x88, 0x80, 0xf3, 0xce, 0xb4, 0x21,
+                                       0xbb, 0x61, 0xb9, 0x1c, 0xbd, 0x4c, 0x3e,
+                                       0x66, 0x25, 0x6c, 0xe4 };
 
-static unsigned char noncesuffix[8]
-    = { 0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
+static unsigned char noncesuffix[8] = { 0x82, 0x19, 0xe0, 0x03,
+                                        0x6b, 0x7a, 0x0b, 0x37 };
 
 static unsigned char output[4194304];
 
 static unsigned char h[32];
 
-int main(void)
+int
+main(void)
 {
     int i;
     crypto_stream_salsa20(output, sizeof output, noncesuffix, secondkey);
@@ -25,11 +27,13 @@ int main(void)
 
     assert(sizeof output > 4000);
 
-    crypto_stream_salsa20_xor_ic(output, output, 4000, noncesuffix, 0U, secondkey);
+    crypto_stream_salsa20_xor_ic(output, output, 4000, noncesuffix, 0U,
+                                 secondkey);
     for (i = 0; i < 4000; ++i)
         assert(output[i] == 0);
 
-    crypto_stream_salsa20_xor_ic(output, output, 4000, noncesuffix, 1U, secondkey);
+    crypto_stream_salsa20_xor_ic(output, output, 4000, noncesuffix, 1U,
+                                 secondkey);
     crypto_hash_sha256(h, output, sizeof output);
     for (i = 0; i < 32; ++i)
         printf("%02x", h[i]);
diff -urpN libsodium-1.0.11/test/default/stream3.c libsodium-1.0.12/test/default/stream3.c
--- libsodium-1.0.11/test/default/stream3.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/stream3.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,26 +2,28 @@
 #define TEST_NAME "stream3"
 #include "cmptest.h"
 
-static unsigned char firstkey[32]
-    = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85, 0xd4, 0x62, 0xcd, 0x51,
-        0x19, 0x7a, 0x9a, 0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac, 0x64,
-        0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08, 0x44, 0xf6, 0x83, 0x89 };
-
-static unsigned char nonce[24]
-    = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73,
-        0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6,
-        0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
+static unsigned char firstkey[32] = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85,
+                                      0xd4, 0x62, 0xcd, 0x51, 0x19, 0x7a, 0x9a,
+                                      0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac,
+                                      0x64, 0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08,
+                                      0x44, 0xf6, 0x83, 0x89 };
+
+static unsigned char nonce[24] = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6,
+                                   0x2b, 0x73, 0xcd, 0x62, 0xbd, 0xa8,
+                                   0x75, 0xfc, 0x73, 0xd6, 0x82, 0x19,
+                                   0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
 
 static unsigned char rs[32];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
     crypto_stream(rs, 32, nonce, firstkey);
 
     for (i = 0; i < 32; ++i) {
-        printf(",0x%02x", (unsigned int)rs[i]);
+        printf(",0x%02x", (unsigned int) rs[i]);
         if (i % 8 == 7)
             printf("\n");
     }
diff -urpN libsodium-1.0.11/test/default/stream4.c libsodium-1.0.12/test/default/stream4.c
--- libsodium-1.0.11/test/default/stream4.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/stream4.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,42 +2,45 @@
 #define TEST_NAME "stream4"
 #include "cmptest.h"
 
-static unsigned char firstkey[32]
-    = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85, 0xd4, 0x62, 0xcd, 0x51,
-        0x19, 0x7a, 0x9a, 0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac, 0x64,
-        0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08, 0x44, 0xf6, 0x83, 0x89 };
-
-static unsigned char nonce[24]
-    = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73,
-        0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6,
-        0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
-
-static unsigned char m[163]
-    = { 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,    0xbe, 0x07, 0x5f, 0xc5,
-        0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16, 0xeb, 0xeb, 0x0c, 0x7b,
-        0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4, 0x4b, 0x66, 0x84, 0x9b,
-        0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf, 0x33, 0xbd, 0x75, 0x1a,
-        0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29, 0x6c, 0xdc, 0x3c, 0x01,
-        0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce, 0x31, 0x4a, 0xdb, 0x31,
-        0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d, 0xce, 0xea, 0x3a, 0x7f,
-        0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a, 0xd6, 0xb1, 0x31, 0x8a,
-        0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde, 0x04, 0x89, 0x77, 0xeb,
-        0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c, 0x60, 0x90, 0x2e, 0x52,
-        0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40, 0xe0, 0x82, 0xf9, 0x37,
-        0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05 };
+static unsigned char firstkey[32] = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85,
+                                      0xd4, 0x62, 0xcd, 0x51, 0x19, 0x7a, 0x9a,
+                                      0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac,
+                                      0x64, 0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08,
+                                      0x44, 0xf6, 0x83, 0x89 };
+
+static unsigned char nonce[24] = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6,
+                                   0x2b, 0x73, 0xcd, 0x62, 0xbd, 0xa8,
+                                   0x75, 0xfc, 0x73, 0xd6, 0x82, 0x19,
+                                   0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
+
+static unsigned char m[163] = {
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0xbe, 0x07, 0x5f, 0xc5,
+    0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14, 0x13, 0x16, 0xeb, 0xeb, 0x0c, 0x7b,
+    0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4, 0x4b, 0x66, 0x84, 0x9b,
+    0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf, 0x33, 0xbd, 0x75, 0x1a,
+    0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29, 0x6c, 0xdc, 0x3c, 0x01,
+    0x23, 0x35, 0x61, 0xf4, 0x1d, 0xb6, 0x6c, 0xce, 0x31, 0x4a, 0xdb, 0x31,
+    0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46, 0xf0, 0x6d, 0xce, 0xea, 0x3a, 0x7f,
+    0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a, 0xd6, 0xb1, 0x31, 0x8a,
+    0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde, 0x04, 0x89, 0x77, 0xeb,
+    0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c, 0x60, 0x90, 0x2e, 0x52,
+    0xf0, 0xa0, 0x89, 0xbc, 0x76, 0x89, 0x70, 0x40, 0xe0, 0x82, 0xf9, 0x37,
+    0x76, 0x38, 0x48, 0x64, 0x5e, 0x07, 0x05
+};
 
 static unsigned char c[163];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
     crypto_stream_xor(c, m, 163, nonce, firstkey);
 
     for (i = 32; i < 163; ++i) {
-        printf(",0x%02x", (unsigned int)c[i]);
+        printf(",0x%02x", (unsigned int) c[i]);
         if (i % 8 == 7)
             printf("\n");
     }
diff -urpN libsodium-1.0.11/test/default/stream.c libsodium-1.0.12/test/default/stream.c
--- libsodium-1.0.11/test/default/stream.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/stream.c	2017-03-06 23:32:40.000000000 +0100
@@ -2,43 +2,56 @@
 #define TEST_NAME "stream"
 #include "cmptest.h"
 
-static unsigned char firstkey[32]
-    = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85, 0xd4, 0x62, 0xcd, 0x51,
-        0x19, 0x7a, 0x9a, 0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac, 0x64,
-        0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08, 0x44, 0xf6, 0x83, 0x89 };
-
-static unsigned char nonce[24]
-    = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73,
-        0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6,
-        0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
+static unsigned char firstkey[32] = { 0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85,
+                                      0xd4, 0x62, 0xcd, 0x51, 0x19, 0x7a, 0x9a,
+                                      0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac,
+                                      0x64, 0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08,
+                                      0x44, 0xf6, 0x83, 0x89 };
+
+static unsigned char nonce[24] = { 0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6,
+                                   0x2b, 0x73, 0xcd, 0x62, 0xbd, 0xa8,
+                                   0x75, 0xfc, 0x73, 0xd6, 0x82, 0x19,
+                                   0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37 };
 
 static unsigned char output[4194304];
 
 static unsigned char h[32];
+static char          hex[2 * 192 + 1];
 
-int main(void)
+int
+main(void)
 {
     int i;
 
     randombytes_buf(output, sizeof output);
     crypto_stream(output, sizeof output, nonce, firstkey);
     crypto_hash_sha256(h, output, sizeof output);
-
-    for (i = 0; i < 32; ++i)
-        printf("%02x", h[i]);
-    printf("\n");
+    sodium_bin2hex(hex, sizeof hex, h, sizeof h);
+    printf("%s\n", hex);
 
     assert(sizeof output > 4000);
 
     crypto_stream_xsalsa20_xor_ic(output, output, 4000, nonce, 0U, firstkey);
-    for (i = 0; i < 4000; ++i)
+    for (i = 0; i < 4000; i++) {
         assert(output[i] == 0);
-
+    }
     crypto_stream_xsalsa20_xor_ic(output, output, 4000, nonce, 1U, firstkey);
     crypto_hash_sha256(h, output, sizeof output);
-    for (i = 0; i < 32; ++i)
-        printf("%02x", h[i]);
-    printf("\n");
+    sodium_bin2hex(hex, sizeof hex, h, sizeof h);
+    printf("%s\n", hex);
+
+    for (i = 0; i < 64; i++) {
+        memset(output, i, 64);
+        crypto_stream(output, (int) (i & 0xff), nonce, firstkey);
+        sodium_bin2hex(hex, sizeof hex, output, 64);
+        printf("%s\n", hex);
+    }
+
+    memset(output, 0, 192);
+    crypto_stream_xsalsa20_xor_ic(output, output, 192, nonce,
+                                  (1ULL << 32) - 1ULL, firstkey);
+    sodium_bin2hex(hex, 192 * 2 + 1, output, 192);
+    printf("%s\n", hex);
 
     assert(crypto_stream_keybytes() > 0U);
     assert(crypto_stream_noncebytes() > 0U);
diff -urpN libsodium-1.0.11/test/default/stream.exp libsodium-1.0.12/test/default/stream.exp
--- libsodium-1.0.11/test/default/stream.exp	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/stream.exp	2017-03-06 23:32:41.000000000 +0100
@@ -1,2 +1,67 @@
 662b9d0e3463029156069b12f918691a98f7dfb2ca0393c96bbfc6b1fbd630a2
 0cc9ffaf60a99d221b548e9762385a231121ab226d1c610d2661ced26b6ad5ee
+00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
+ee010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
+eea60202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202
+eea6a703030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303
+eea6a725040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404
+eea6a7251c0505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505
+eea6a7251c1e06060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606
+eea6a7251c1e72070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707
+eea6a7251c1e72910808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808
+eea6a7251c1e72916d09090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909
+eea6a7251c1e72916d110a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a
+eea6a7251c1e72916d11c20b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b
+eea6a7251c1e72916d11c2cb0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c
+eea6a7251c1e72916d11c2cb210d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d
+eea6a7251c1e72916d11c2cb214d0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e0e
+eea6a7251c1e72916d11c2cb214d3c0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
+eea6a7251c1e72916d11c2cb214d3c25101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010
+eea6a7251c1e72916d11c2cb214d3c25251111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
+eea6a7251c1e72916d11c2cb214d3c25253912121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
+eea6a7251c1e72916d11c2cb214d3c25253912131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313
+eea6a7251c1e72916d11c2cb214d3c252539121d1414141414141414141414141414141414141414141414141414141414141414141414141414141414141414
+eea6a7251c1e72916d11c2cb214d3c252539121d8e15151515151515151515151515151515151515151515151515151515151515151515151515151515151515
+eea6a7251c1e72916d11c2cb214d3c252539121d8e23161616161616161616161616161616161616161616161616161616161616161616161616161616161616
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e1717171717171717171717171717171717171717171717171717171717171717171717171717171717
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e6518181818181818181818181818181818181818181818181818181818181818181818181818181818
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d191919191919191919191919191919191919191919191919191919191919191919191919191919
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651f1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa41c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c81d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cf1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff81f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f1f
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff8802020202020202020202020202020202020202020202020202020202020202020
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff8803021212121212121212121212121212121212121212121212121212121212121
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e222222222222222222222222222222222222222222222222222222222222
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e642323232323232323232323232323232323232323232323232323232323
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a24242424242424242424242424242424242424242424242424242424
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74252525252525252525252525252525252525252525252525252525
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e92626262626262626262626262626262626262626262626262626
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e027272727272727272727272727272727272727272727272727
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a6282828282828282828282828282828282828282828282828
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d2929292929292929292929292929292929292929292929
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d822a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d82432b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243ac2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd92d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9172e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177a2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab530303030303030303030303030303030
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a313131313131313131313131313131
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1b3232323232323232323232323232
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb33333333333333333333333333
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d343434343434343434343434
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d5a3535353535353535353535
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d5a2f36363636363636363636
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d5a2f5d373737373737373737
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d5a2f5d703838383838383838
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d5a2f5d700c39393939393939
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d5a2f5d700c093a3a3a3a3a3a
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d5a2f5d700c093c3b3b3b3b3b
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d5a2f5d700c093c5e3c3c3c3c
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d5a2f5d700c093c5e553d3d3d
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d5a2f5d700c093c5e55853e3e
+eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880309e645a74e9e0a60d8243acd9177ab51a1beb8d5a2f5d700c093c5e5585573f
+b46af0bf761b78533e01a0dd7e07216c9710ef35f09a28d1e5fa469b602472ca5085f6dbcc6a6b51fb89986f8feca85658d05701f5677d0bb340a1f2c769547219f5420c62ffff7d1304dad82b6dec2bdc59ec12a9e18a774eed128c2c90610a9d4c75c0817d64817a76bbc12746971ae897af210a072c1bc9fb044e086b7bfe85fad95d5c2bbb28c12de5755b1ccde63e93cc892b4d2bcbd7dc0706b094c2492e329e3b9a98a9cbc7d01031cf1d5861f576e1291df6286c28146b0b4df9ad44
diff -urpN libsodium-1.0.11/test/default/verify1.c libsodium-1.0.12/test/default/verify1.c
--- libsodium-1.0.11/test/default/verify1.c	2016-05-29 16:48:02.000000000 +0200
+++ libsodium-1.0.12/test/default/verify1.c	2017-03-06 11:13:57.000000000 +0100
@@ -2,7 +2,8 @@
 #define TEST_NAME "verify1"
 #include "cmptest.h"
 
-int main(void)
+int
+main(void)
 {
     unsigned char *v16, *v16x;
     unsigned char *v32, *v32x;
@@ -11,11 +12,11 @@ int main(void)
     uint8_t        o;
     int            i;
 
-    v16 = (unsigned char *) sodium_malloc(16);
+    v16  = (unsigned char *) sodium_malloc(16);
     v16x = (unsigned char *) sodium_malloc(16);
-    v32 = (unsigned char *) sodium_malloc(32);
+    v32  = (unsigned char *) sodium_malloc(32);
     v32x = (unsigned char *) sodium_malloc(32);
-    v64 = (unsigned char *) sodium_malloc(64);
+    v64  = (unsigned char *) sodium_malloc(64);
     v64x = (unsigned char *) sodium_malloc(64);
     for (i = 0; i < 10000; i++) {
         randombytes_buf(v16, 16);
diff -urpN libsodium-1.0.11/test/default/xchacha20.c libsodium-1.0.12/test/default/xchacha20.c
--- libsodium-1.0.11/test/default/xchacha20.c	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/xchacha20.c	2017-03-06 23:32:41.000000000 +0100
@@ -0,0 +1,376 @@
+
+#define TEST_NAME "xchacha20"
+#include "cmptest.h"
+
+typedef struct HChaCha20TV_ {
+    const char key[crypto_core_hchacha20_KEYBYTES * 2 + 1];
+    const char in[crypto_core_hchacha20_INPUTBYTES * 2 + 1];
+    const char out[crypto_core_hchacha20_OUTPUTBYTES * 2 + 1];
+} HChaCha20TV;
+
+static void
+tv_hchacha20(void)
+{
+    static const HChaCha20TV tvs[] = {
+        { "24f11cce8a1b3d61e441561a696c1c1b7e173d084fd4812425435a8896a013dc", "d9660c5900ae19ddad28d6e06e45fe5e", "5966b3eec3bff1189f831f06afe4d4e3be97fa9235ec8c20d08acfbbb4e851e3" },
+        { "80a5f6272031e18bb9bcd84f3385da65e7731b7039f13f5e3d475364cd4d42f7", "c0eccc384b44c88e92c57eb2d5ca4dfa", "6ed11741f724009a640a44fce7320954c46e18e0d7ae063bdbc8d7cf372709df" },
+        { "cb1fc686c0eec11a89438b6f4013bf110e7171dace3297f3a657a309b3199629", "fcd49b93e5f8f299227e64d40dc864a3", "84b7e96937a1a0a406bb7162eeaad34308d49de60fd2f7ec9dc6a79cbab2ca34" },
+        { "6640f4d80af5496ca1bc2cfff1fefbe99638dbceaabd7d0ade118999d45f053d", "31f59ceeeafdbfe8cae7914caeba90d6", "9af4697d2f5574a44834a2c2ae1a0505af9f5d869dbe381a994a18eb374c36a0" },
+        { "0693ff36d971225a44ac92c092c60b399e672e4cc5aafd5e31426f123787ac27", "3a6293da061da405db45be1731d5fc4d", "f87b38609142c01095bfc425573bb3c698f9ae866b7e4216840b9c4caf3b0865" },
+        { "809539bd2639a23bf83578700f055f313561c7785a4a19fc9114086915eee551", "780c65d6a3318e479c02141d3f0b3918", "902ea8ce4680c09395ce71874d242f84274243a156938aaa2dd37ac5be382b42" },
+        { "1a170ddf25a4fd69b648926e6d794e73408805835c64b2c70efddd8cd1c56ce0", "05dbee10de87eb0c5acb2b66ebbe67d3", "a4e20b634c77d7db908d387b48ec2b370059db916e8ea7716dc07238532d5981" },
+        { "3b354e4bb69b5b4a1126f509e84cad49f18c9f5f29f0be0c821316a6986e15a6", "d8a89af02f4b8b2901d8321796388b6c", "9816cb1a5b61993735a4b161b51ed2265b696e7ded5309c229a5a99f53534fbc" },
+        { "4b9a818892e15a530db50dd2832e95ee192e5ed6afffb408bd624a0c4e12a081", "a9079c551de70501be0286d1bc78b045", "ebc5224cf41ea97473683b6c2f38a084bf6e1feaaeff62676db59d5b719d999b" },
+        { "c49758f00003714c38f1d4972bde57ee8271f543b91e07ebce56b554eb7fa6a7", "31f0204e10cf4f2035f9e62bb5ba7303", "0dd8cc400f702d2c06ed920be52048a287076b86480ae273c6d568a2e9e7518c" }
+    };
+    const HChaCha20TV *tv;
+    unsigned char     *constant;
+    unsigned char     *key;
+    unsigned char     *in;
+    unsigned char     *out;
+    unsigned char     *out2;
+    int                i;
+
+    constant = (unsigned char *) sodium_malloc(crypto_core_hchacha20_CONSTBYTES);
+    key = (unsigned char *) sodium_malloc(crypto_core_hchacha20_KEYBYTES);
+    in = (unsigned char *) sodium_malloc(crypto_core_hchacha20_INPUTBYTES);
+    out = (unsigned char *) sodium_malloc(crypto_core_hchacha20_OUTPUTBYTES);
+    out2 = (unsigned char *) sodium_malloc(crypto_core_hchacha20_OUTPUTBYTES);
+    for (i = 0; i < (sizeof tvs) / (sizeof tvs[0]); i++) {
+        tv = &tvs[i];
+        sodium_hex2bin(key, crypto_core_hchacha20_KEYBYTES,
+                       tv->key, strlen(tv->key), NULL, NULL, NULL);
+        sodium_hex2bin(in, crypto_core_hchacha20_INPUTBYTES,
+                       tv->in, strlen(tv->in), NULL, NULL, NULL);
+        sodium_hex2bin(out, crypto_core_hchacha20_OUTPUTBYTES,
+                       tv->out, strlen(tv->out), NULL, NULL, NULL);
+        crypto_core_hchacha20(out2, in, key, NULL);
+        assert(memcmp(out, out2, crypto_core_hchacha20_OUTPUTBYTES) == 0);
+    }
+
+    sodium_hex2bin(constant, crypto_core_hchacha20_CONSTBYTES,
+                   "0d29b795c1ca70c1652e823364d32417",
+                   crypto_core_hchacha20_CONSTBYTES * 2 + 1, NULL, NULL, NULL);
+    sodium_hex2bin(out, crypto_core_hchacha20_OUTPUTBYTES,
+                   "934d941d78eb9bfc2f0376f7ccd4a11ecf0c6a44104618a9749ef47fe97037a2",
+                   crypto_core_hchacha20_OUTPUTBYTES * 2 + 1, NULL, NULL, NULL);
+
+    crypto_core_hchacha20(out2, in, key, constant);
+    assert(memcmp(out, out2, crypto_core_hchacha20_OUTPUTBYTES) == 0);
+
+    sodium_free(out2);
+    sodium_free(out);
+    sodium_free(in);
+    sodium_free(key);
+    sodium_free(constant);
+
+    assert(crypto_core_hchacha20_outputbytes() == crypto_core_hchacha20_OUTPUTBYTES);
+    assert(crypto_core_hchacha20_inputbytes() == crypto_core_hchacha20_INPUTBYTES);
+    assert(crypto_core_hchacha20_keybytes() == crypto_core_hchacha20_KEYBYTES);
+    assert(crypto_core_hchacha20_constbytes() == crypto_core_hchacha20_CONSTBYTES);
+
+    printf("tv_hchacha20: ok\n");
+}
+
+#define XCHACHA20_OUT_MAX 100
+
+typedef struct XChaCha20TV_ {
+    const char key[crypto_stream_xchacha20_KEYBYTES * 2 + 1];
+    const char nonce[crypto_stream_xchacha20_NONCEBYTES * 2 + 1];
+    const char out[XCHACHA20_OUT_MAX * 2 + 1];
+} XChaCha20TV;
+
+static void
+tv_stream_xchacha20(void)
+{
+    static const XChaCha20TV tvs[] = {
+        { "79c99798ac67300bbb2704c95c341e3245f3dcb21761b98e52ff45b24f304fc4", "b33ffd3096479bcfbc9aee49417688a0a2554f8d95389419", "c6e9758160083ac604ef90e712ce6e75d7797590744e0cf060f013739c" },
+        { "ddf7784fee099612c40700862189d0397fcc4cc4b3cc02b5456b3a97d1186173", "a9a04491e7bf00c3ca91ac7c2d38a777d88993a7047dfcc4", "2f289d371f6f0abc3cb60d11d9b7b29adf6bc5ad843e8493e928448d" },
+        { "3d12800e7b014e88d68a73f0a95b04b435719936feba60473f02a9e61ae60682", "56bed2599eac99fb27ebf4ffcb770a64772dec4d5849ea2d", "a2c3c1406f33c054a92760a8e0666b84f84fa3a618f0" },
+        { "5f5763ff9a30c95da5c9f2a8dfd7cc6efd9dfb431812c075aa3e4f32e04f53e4", "a5fa890efa3b9a034d377926ce0e08ee6d7faccaee41b771", "8a1a5ba898bdbcff602b1036e469a18a5e45789d0e8d9837d81a2388a52b0b6a0f51891528f424c4a7f492a8dd7bce8bac19fbdbe1fb379ac0" },
+        { "eadc0e27f77113b5241f8ca9d6f9a5e7f09eee68d8a5cf30700563bf01060b4e", "a171a4ef3fde7c4794c5b86170dc5a099b478f1b852f7b64", "23839f61795c3cdbcee2c749a92543baeeea3cbb721402aa42e6cae140447575f2916c5d71108e3b13357eaf86f060cb" },
+        { "91319c9545c7c804ba6b712e22294c386fe31c4ff3d278827637b959d3dbaab2", "410e854b2a911f174aaf1a56540fc3855851f41c65967a4e", "cbe7d24177119b7fdfa8b06ee04dade4256ba7d35ffda6b89f014e479faef6" },
+        { "6a6d3f412fc86c4450fc31f89f64ed46baa3256ffcf8616e8c23a06c422842b6", "6b7773fce3c2546a5db4829f53a9165f41b08faae2fb72d5", "8b23e35b3cdd5f3f75525fc37960ec2b68918e8c046d8a832b9838f1546be662e54feb1203e2" },
+        { "d45e56368ebc7ba9be7c55cfd2da0feb633c1d86cab67cd5627514fd20c2b391", "fd37da2db31e0c738754463edadc7dafb0833bd45da497fc", "47950efa8217e3dec437454bd6b6a80a287e2570f0a48b3fa1ea3eb868be3d486f6516606d85e5643becc473b370871ab9ef8e2a728f73b92bd98e6e26ea7c8ff96ec5a9e8de95e1eee9300c" },
+        { "aface41a64a9a40cbc604d42bd363523bd762eb717f3e08fe2e0b4611eb4dcf3", "6906e0383b895ab9f1cf3803f42f27c79ad47b681c552c63", "a5fa7c0190792ee17675d52ad7570f1fb0892239c76d6e802c26b5b3544d13151e67513b8aaa1ac5af2d7fd0d5e4216964324838" },
+        { "9d23bd4149cb979ccf3c5c94dd217e9808cb0e50cd0f67812235eaaf601d6232", "c047548266b7c370d33566a2425cbf30d82d1eaf5294109e", "a21209096594de8c5667b1d13ad93f744106d054df210e4782cd396fec692d3515a20bf351eec011a92c367888bc464c32f0807acd6c203a247e0db854148468e9f96bee4cf718d68d5f637cbd5a376457788e6fae90fc31097cfc" },
+    };
+    const XChaCha20TV *tv;
+    char              *hex;
+    unsigned char     *key;
+    unsigned char     *nonce;
+    unsigned char     *out;
+    unsigned char     *out2;
+    size_t             out_len;
+    int                i;
+
+    key = (unsigned char *) sodium_malloc(crypto_stream_xchacha20_KEYBYTES);
+    nonce = (unsigned char *) sodium_malloc(crypto_stream_xchacha20_NONCEBYTES);
+    out = (unsigned char *) sodium_malloc(XCHACHA20_OUT_MAX);
+    for (i = 0; i < (sizeof tvs) / (sizeof tvs[0]); i++) {
+        tv = &tvs[i];
+
+        sodium_hex2bin(key, crypto_stream_xchacha20_KEYBYTES,
+                       tv->key, strlen(tv->key), NULL, NULL, NULL);
+        sodium_hex2bin(nonce, crypto_stream_xchacha20_NONCEBYTES,
+                       tv->nonce, strlen(tv->nonce), NULL, NULL, NULL);
+        sodium_hex2bin(out, XCHACHA20_OUT_MAX,
+                       tv->out, strlen(tv->out), NULL, &out_len, NULL);
+        out2 = (unsigned char *) sodium_malloc(out_len);
+        crypto_stream_xchacha20(out2, out_len, nonce, key);
+        assert(memcmp(out, out2, out_len) == 0);
+        crypto_stream_xchacha20_xor(out2, out, out_len, nonce, key);
+        assert(sodium_is_zero(out2, out_len));
+        crypto_stream_xchacha20_xor_ic(out2, out, out_len, nonce, 0, key);
+        assert(sodium_is_zero(out2, out_len));
+        crypto_stream_xchacha20_xor_ic(out2, out, out_len, nonce, 1, key);
+        assert(!sodium_is_zero(out2, out_len));
+        crypto_stream_xchacha20_xor(out, out, out_len, nonce, key);
+        assert(sodium_is_zero(out, out_len));
+        sodium_free(out2);
+    }
+
+    out2 = (unsigned char *) sodium_malloc(0);
+    crypto_stream_xchacha20(out2, 0, nonce, key);
+    crypto_stream_xchacha20_xor(out2, out2, 0, nonce, key);
+    crypto_stream_xchacha20_xor_ic(out2, out2, 0, nonce, 1, key);
+    sodium_free(out2);
+    sodium_free(out);
+
+    out = (unsigned char *) sodium_malloc(64);
+    out2 = (unsigned char *) sodium_malloc(128);
+    randombytes_buf(out, 64);
+    randombytes_buf(out2, 64);
+    memcpy(out2 + 64, out, 64);
+    crypto_stream_xchacha20_xor_ic(out, out, 64, nonce, 1, key);
+    crypto_stream_xchacha20_xor(out2, out2, 128, nonce, key);
+    assert(memcmp(out, out2 + 64, 64) == 0);
+    sodium_free(out);
+    sodium_free(out2);
+
+    out = (unsigned char *) sodium_malloc(192);
+    out2 = (unsigned char *) sodium_malloc(192);
+    memset(out, 0, 192);
+    memset(out2, 0, 192);
+    crypto_stream_xchacha20_xor_ic(out2, out2, 192, nonce,
+                                   (1ULL << 32) - 1ULL, key);
+    crypto_stream_xchacha20_xor_ic(out, out, 64, nonce,
+                                   (1ULL << 32) - 1ULL, key);
+    crypto_stream_xchacha20_xor_ic(out + 64, out + 64, 64, nonce,
+                                   (1ULL << 32), key);
+    crypto_stream_xchacha20_xor_ic(out + 128, out + 128, 64, nonce,
+                                   (1ULL << 32) + 1, key);
+    assert(memcmp(out, out2, 192) == 0);
+    hex = (char *) sodium_malloc(192 * 2 + 1);
+    sodium_bin2hex(hex, 192 * 2 + 1, out, 192);
+    printf("%s\n", hex);
+    sodium_free(hex);
+    sodium_free(out);
+    sodium_free(out2);
+
+    sodium_free(nonce);
+    sodium_free(key);
+
+    assert(crypto_stream_xchacha20_keybytes() == crypto_stream_xchacha20_KEYBYTES);
+    assert(crypto_stream_xchacha20_noncebytes() == crypto_stream_xchacha20_NONCEBYTES);
+
+    printf("tv_stream_xchacha20: ok\n");
+}
+
+typedef struct XChaCha20Poly1305TV_ {
+    const char  key[crypto_secretbox_xchacha20poly1305_KEYBYTES * 2 + 1];
+    const char  nonce[crypto_secretbox_xchacha20poly1305_NONCEBYTES * 2 + 1];
+    const char *m;
+    const char *out;
+} XChaCha20Poly1305TV;
+
+static void
+tv_secretbox_xchacha20poly1305(void)
+{
+    static const XChaCha20Poly1305TV tvs[] = {
+        { "065ff46a9dddb1ab047ee5914d6d575a828b8cc1f454b24e8cd0f57efdc49a34", "f83262646ce01293b9923a65a073df78c54b2e799cd6c4e5", "", "4c72340416339dcdea01b760db5adaf7" },
+        { "d3c71d54e6b13506e07aa2e7b412a17a7a1f34df3d3148cd3f45b91ccaa5f4d9", "943b454a853aa514c63cf99b1e197bbb99da24b2e2d93e47", "76bd706e07741e713d90efdb34ad202067263f984942aae8bda159f30dfccc72200f8093520b85c5ad124ff7c8b2d920946e5cfff4b819abf84c7b35a6205ca72c9f8747c3044dd73fb4bebda1b476", "0384276f1cfa5c82c3e58f0f2acc1f821c6f526d2c19557cf8bd270fcde43fba1d88890663f7b2f5c6b1d7deccf5c91b4df5865dc55cc7e04d6793fc2db8f9e3b418f95cb796d67a7f3f7e097150cb607c435dacf82eac3d669866e5092ace" },
+        { "9498fdb922e0596e32af7f8108def2068f5a32a5ac70bd33ade371701f3d98d0", "a0056f24be0d20106fe750e2ee3684d4457cbdcb3a74e566", "b1bc9cfedb340fb06a37eba80439189e48aa0cfd37020eec0afa09165af12864671b3fbddbbb20ac18f586f2f66d13b3ca40c9a7e21c4513a5d87a95319f8ca3c2151e2a1b8b86a35653e77f90b9e63d2a84be9b9603876a89d60fd708edcd64b41be1064b8ad1046553aaeb51dc70b8112c9915d94f2a5dad1e14e7009db6c703c843a4f64b77d44b179b9579ac497dac2d33", "4918790d46893fa3dca74d8abc57eef7fca2c6393d1beef5efa845ac20475db38d1a068debf4c5dbd8614eb072877c565dc52bd40941f0b590d2079a5028e426bf50bcbaadcbebf278bddceedc578a5e31379523dee15026ec82d34e56f2871fdf13255db199ac48f163d5ee7e4f4e09a39451356959d9242a39aea33990ab960a4c25346e3d9397fc5e7cb6266c2476411cd331f2bcb4486750c746947ec6401865d5" },
+        { "fa2d915e044d0519248150e7c815b01f0f2a691c626f8d22c3ef61e7f16eea47", "c946065dc8befa9cc9f292ea2cf28f0256285565051792b7", "d5be1a24c7872115dc5c5b4234dbee35a6f89ae3a91b3e33d75249a0aecfed252341295f49296f7ee14d64de1ea6355cb8facd065052d869aeb1763cda7e418a7e33b6f7a81327181df6cd4de3a126d9df1b5e8b0b1a6b281e63f2", "6d32e3571afec58b0acabb54a287118b3ed6691f56cc8ead12d735352c9a050c2ca173c78b6092f9ad4b7c21c36fb0ce18560956395bab3099c54760a743051ac6a898a0b0034b5e953340c975cf7a873c56b27e66bca2bff1dd977addefc7935bb7550753dd13d1f1a43d" },
+        { "6f149c2ec27af45176030c8dd7ab0e1e488f5803f26f75045d7a56f59a587a85", "952aff2f39bc70016f04ac7fb8b55fd22764ba16b56e255d", "8fde598c4bde5786abdc6ab83fce66d59782b6ce36afe028c447ad4086a748764afa88a520e837a9d56d0b7693b0476649f24c2aa44b94615a1efc75", "9bccf07974836fa4609d32d9527d928d184d9c6c0823af2f703e0e257a162d26d3678fa15ab1c4db76ac42084d32cefca8efaf77814c199b310999e327a3e3daa2e235b175979504ede87b58" },
+        { "b964b7fdf442efbcc2cd3e4cd596035bdfb05ed7d44f7fd4dce2d5614af5c8c4", "2886fbfa4b35b68f28d31df6243a4fbc56475b69e24820a4", "", "b83fbdd112bf0f7d62eff96c9faa8850" },
+        { "10c0ad4054b48d7d1de1d9ab6f782ca883d886573e9d18c1d47b6ee6b5208189", "977edf57428d0e0247a3c88c9a9ec321bbaae1a4da8353b5", "518e4a27949812424b2a381c3efea6055ee5e75eff", "0c801a037c2ed0500d6ef68e8d195eceb05a15f8edb68b35773e81ac2aca18e9be53416f9a" },
+        { "7db0a81d01699c86f47a3ec76d46aa32660adad7f9ac72cf8396419f789f6bb1", "e7cb57132ce954e28f4470cca1dbda20b534cdf32fbe3658", "ee6511d403539e611ab312205f0c3b8f36a33d36f1dc44bb33d6836f0ab93b9f1747167bf0150f045fcd12a39479641d8bdde6fe01475196e8fe2c435e834e30a59f6aaa01ebcd", "ae8b1d4df4f982b2702626feca07590fedd0dfa7ae34e6a098372a1aa32f9fbf0ce2a88b5c16a571ef48f3c9fda689ce8ebb9947c9e2a28e01b1191efc81ad2ce0ed6e6fc7c164b1fc7f3d50b7f5e47a895db3c1fc46c0" },
+        { "7b043dd27476cf5a2baf2907541d8241ecd8b97d38d08911737e69b0846732fb", "74706a2855f946ed600e9b453c1ac372520b6a76a3c48a76", "dbf165bb8352d6823991b99f3981ba9c8153635e5695477cba54e96a2a8c4dc5f9dbe817887d7340e3f48a", "ce57261afba90a9598de15481c43f26f7b8c8cb2806c7c977752dba898dc51b92a3f1a62ebf696747bfccf72e0edda97f2ccd6d496f55aefbb3ec2" },
+        { "e588e418d658df1b2b1583122e26f74ca3506b425087bea895d81021168f8164", "4f4d0ffd699268cd841ce4f603fe0cd27b8069fcf8215fbb", "f91bcdcf4d08ba8598407ba8ef661e66c59ca9d89f3c0a3542e47246c777091e4864e63e1e3911dc01257255e551527a53a34481be", "22dc88de7cacd4d9ce73359f7d6e16e74caeaa7b0d1ef2bb10fda4e79c3d5a9aa04b8b03575fd27bc970c9ed0dc80346162469e0547030ddccb8cdc95981400907c87c9442" }
+    };
+    const XChaCha20Poly1305TV *tv;
+    unsigned char             *m;
+    unsigned char             *nonce;
+    unsigned char             *key;
+    unsigned char             *out;
+    unsigned char             *out2;
+    size_t                     m_len;
+    size_t                     out_len;
+    size_t                     n;
+    int                        i;
+
+    key = (unsigned char *) sodium_malloc
+        (crypto_secretbox_xchacha20poly1305_KEYBYTES);
+    nonce = (unsigned char *) sodium_malloc
+        (crypto_secretbox_xchacha20poly1305_NONCEBYTES);
+    for (i = 0; i < (sizeof tvs) / (sizeof tvs[0]); i++) {
+        tv = &tvs[i];
+        m_len = strlen(tv->m) / 2;
+        m = (unsigned char *) sodium_malloc(m_len);
+        sodium_hex2bin(key, crypto_secretbox_xchacha20poly1305_KEYBYTES,
+                       tv->key, strlen(tv->key), NULL, NULL, NULL);
+        sodium_hex2bin(nonce, crypto_secretbox_xchacha20poly1305_NONCEBYTES,
+                       tv->nonce, strlen(tv->nonce), NULL, NULL, NULL);
+        sodium_hex2bin(m, m_len, tv->m, strlen(tv->m), NULL, NULL, NULL);
+        out = (unsigned char *) sodium_malloc
+            (crypto_secretbox_xchacha20poly1305_MACBYTES + m_len);
+        out2 = (unsigned char *) sodium_malloc
+            (crypto_secretbox_xchacha20poly1305_MACBYTES + m_len);
+        sodium_hex2bin(out, crypto_secretbox_xchacha20poly1305_MACBYTES + m_len,
+                       tv->out, strlen(tv->out), NULL, NULL, NULL);
+        crypto_secretbox_xchacha20poly1305_easy(out2, m, m_len, nonce, key);
+        assert(memcmp(out, out2,
+                      crypto_secretbox_xchacha20poly1305_MACBYTES + m_len) == 0);
+        n = randombytes_uniform(crypto_secretbox_xchacha20poly1305_MACBYTES + m_len);
+        out2[n]++;
+        assert(crypto_secretbox_xchacha20poly1305_open_easy
+               (out2, out2, crypto_secretbox_xchacha20poly1305_MACBYTES + m_len,
+                nonce, key) == -1);
+        out2[n]--;
+        nonce[0]++;
+        assert(crypto_secretbox_xchacha20poly1305_open_easy
+               (out2, out2, crypto_secretbox_xchacha20poly1305_MACBYTES + m_len,
+                nonce, key) == -1);
+        nonce[0]--;
+        assert(crypto_secretbox_xchacha20poly1305_open_easy
+               (out2, out2, crypto_secretbox_xchacha20poly1305_MACBYTES + m_len,
+                nonce, key) == 0);
+        assert(memcmp(m, out2, m_len) == 0);
+        assert(crypto_secretbox_xchacha20poly1305_open_detached
+               (out2, out + crypto_secretbox_xchacha20poly1305_MACBYTES, out,
+                m_len, nonce, key) == 0);
+        crypto_secretbox_xchacha20poly1305_detached
+            (out2 + crypto_secretbox_xchacha20poly1305_MACBYTES, out2, m,
+             m_len, nonce, key);
+        assert(memcmp(out, out2,
+                      crypto_secretbox_xchacha20poly1305_MACBYTES + m_len) == 0);
+        sodium_free(out);
+        sodium_free(out2);
+        sodium_free(m);
+    }
+    sodium_free(nonce);
+    sodium_free(key);
+
+    assert(crypto_secretbox_xchacha20poly1305_keybytes() == crypto_secretbox_xchacha20poly1305_KEYBYTES);
+    assert(crypto_secretbox_xchacha20poly1305_noncebytes() == crypto_secretbox_xchacha20poly1305_NONCEBYTES);
+    assert(crypto_secretbox_xchacha20poly1305_macbytes() == crypto_secretbox_xchacha20poly1305_MACBYTES);
+
+    printf("tv_secretbox_xchacha20: ok\n");
+}
+
+static void
+tv_box_xchacha20poly1305(void)
+{
+    char           hex[65];
+    unsigned char *pk;
+    unsigned char *sk;
+    unsigned char *m;
+    unsigned char *m2;
+    unsigned char *mac;
+    unsigned char *nonce;
+    unsigned char *out;
+    unsigned char *pc;
+    unsigned char *seed;
+    size_t         m_len;
+    int            i;
+
+    pk = (unsigned char *) sodium_malloc(crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES);
+    sk = (unsigned char *) sodium_malloc(crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES);
+    nonce = (unsigned char *) sodium_malloc(crypto_box_curve25519xchacha20poly1305_NONCEBYTES);
+    mac = (unsigned char *) sodium_malloc(crypto_box_curve25519xchacha20poly1305_MACBYTES);
+    pc = (unsigned char *) sodium_malloc(crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES);
+    for (i = 0; i < 10; i++) {
+        m_len = (i == 0) ? 0 : randombytes_uniform(150);
+        m = (unsigned char *) sodium_malloc(m_len);
+        m2 = (unsigned char *) sodium_malloc(m_len);
+
+        out = (unsigned char *) sodium_malloc
+            (crypto_box_curve25519xchacha20poly1305_MACBYTES + m_len);
+        randombytes_buf(nonce, crypto_box_curve25519xchacha20poly1305_NONCEBYTES);
+        randombytes_buf(m, m_len);
+        assert(crypto_box_curve25519xchacha20poly1305_keypair(pk, sk) == 0);
+        assert(crypto_box_curve25519xchacha20poly1305_easy(out, m, m_len, nonce,
+                                                           pk, sk) == 0);
+        assert(crypto_box_curve25519xchacha20poly1305_open_easy
+               (m2, out, crypto_box_curve25519xchacha20poly1305_MACBYTES + m_len,
+                nonce, pk, sk) == 0);
+        assert(memcmp(m2, m, m_len) == 0);
+        sodium_free(out);
+
+        out = (unsigned char *) sodium_malloc
+            (crypto_box_curve25519xchacha20poly1305_MACBYTES + m_len);
+        assert(crypto_box_curve25519xchacha20poly1305_beforenm(pc, pk, sk) == 0);
+        assert(crypto_box_curve25519xchacha20poly1305_easy_afternm
+               (out, m, m_len, nonce, pc) == 0);
+        assert(crypto_box_curve25519xchacha20poly1305_open_easy_afternm
+               (m2, out, crypto_box_curve25519xchacha20poly1305_MACBYTES + m_len,
+                nonce, pc) == 0);
+        assert(memcmp(m2, m, m_len) == 0);
+        sodium_free(out);
+
+        out = (unsigned char *) sodium_malloc(m_len);
+        assert(crypto_box_curve25519xchacha20poly1305_detached(out, mac, m, m_len,
+                                                               nonce, pk, sk) == 0);
+        assert(crypto_box_curve25519xchacha20poly1305_open_detached
+               (m2, out, mac, m_len, nonce, pk, sk) == 0);
+        sodium_free(out);
+
+        out = (unsigned char *) sodium_malloc(m_len);
+        assert(crypto_box_curve25519xchacha20poly1305_detached_afternm
+               (out, mac, m, m_len, nonce, pc) == 0);
+        assert(crypto_box_curve25519xchacha20poly1305_open_detached_afternm
+               (m2, out, mac, m_len, nonce, pc) == 0);
+        sodium_free(out);
+
+        sodium_free(m2);
+        sodium_free(m);
+    }
+    sodium_free(pc);
+    sodium_free(mac);
+    sodium_free(nonce);
+
+    seed = (unsigned char *) sodium_malloc
+        (crypto_box_curve25519xchacha20poly1305_SEEDBYTES);
+    for (i = 0; i < crypto_box_curve25519xchacha20poly1305_SEEDBYTES; i++) {
+        seed[i] = i;
+    }
+    crypto_box_curve25519xchacha20poly1305_seed_keypair(pk, sk, seed);
+    sodium_bin2hex(hex, sizeof hex, pk, crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES);
+    assert(strcmp(hex, "4701d08488451f545a409fb58ae3e58581ca40ac3f7f114698cd71deac73ca01") == 0);
+    sodium_bin2hex(hex, sizeof hex, sk, crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES);
+    assert(strcmp(hex, "3d94eea49c580aef816935762be049559d6d1440dede12e6a125f1841fff8e6f") == 0);
+    sodium_free(seed);
+
+    sodium_free(sk);
+    sodium_free(pk);
+
+    assert(crypto_box_curve25519xchacha20poly1305_seedbytes() == crypto_box_curve25519xchacha20poly1305_SEEDBYTES);
+    assert(crypto_box_curve25519xchacha20poly1305_publickeybytes() == crypto_box_curve25519xchacha20poly1305_PUBLICKEYBYTES);
+    assert(crypto_box_curve25519xchacha20poly1305_secretkeybytes() == crypto_box_curve25519xchacha20poly1305_SECRETKEYBYTES);
+    assert(crypto_box_curve25519xchacha20poly1305_beforenmbytes() == crypto_box_curve25519xchacha20poly1305_BEFORENMBYTES);
+    assert(crypto_box_curve25519xchacha20poly1305_noncebytes() == crypto_box_curve25519xchacha20poly1305_NONCEBYTES);
+
+    printf("tv_box_xchacha20poly1305: ok\n");
+}
+
+int
+main(void)
+{
+    tv_hchacha20();
+    tv_stream_xchacha20();
+    tv_secretbox_xchacha20poly1305();
+    tv_box_xchacha20poly1305();
+
+    return 0;
+}
diff -urpN libsodium-1.0.11/test/default/xchacha20.exp libsodium-1.0.12/test/default/xchacha20.exp
--- libsodium-1.0.11/test/default/xchacha20.exp	1970-01-01 01:00:00.000000000 +0100
+++ libsodium-1.0.12/test/default/xchacha20.exp	2017-03-06 23:32:41.000000000 +0100
@@ -0,0 +1,5 @@
+tv_hchacha20: ok
+3e34c160a966ddfbd52d38f6a440a77256c1134ad54653db427dfdfc72f0f995768039052ec2ec4e6fe02c655d7d95681fabd417c087ad17f177510ba09d4cfe7beb8f7c9b8330d746310f9e29583e9ef240156015faafeb24a4d002d6337b7bcec8b54a64ef704e1ae3247d79625d267cbacd1c90e4a2df2f72d4090babf88c90e65a086c464ec1753c49d3b8ad02f2a3c0808e1695c5d77cec6f6f12578ae4ed077a2046e06644d14af65ae90f2869a6f1f910b83a7a3cfec8dd390621a511
+tv_stream_xchacha20: ok
+tv_secretbox_xchacha20: ok
+tv_box_xchacha20poly1305: ok
diff -urpN libsodium-1.0.11/test/Makefile.in libsodium-1.0.12/test/Makefile.in
--- libsodium-1.0.11/test/Makefile.in	2016-07-31 16:34:39.000000000 +0200
+++ libsodium-1.0.12/test/Makefile.in	2017-03-12 20:17:08.000000000 +0100
@@ -274,6 +274,7 @@ SAFECODE_HOME = @SAFECODE_HOME@
 SED = @SED@
 SET_MAKE = @SET_MAKE@
 SHELL = @SHELL@
+SODIUM_LIBRARY_MINIMAL_DEF = @SODIUM_LIBRARY_MINIMAL_DEF@
 SODIUM_LIBRARY_VERSION = @SODIUM_LIBRARY_VERSION@
 SODIUM_LIBRARY_VERSION_MAJOR = @SODIUM_LIBRARY_VERSION_MAJOR@
 SODIUM_LIBRARY_VERSION_MINOR = @SODIUM_LIBRARY_VERSION_MINOR@
diff -urpN libsodium-1.0.11/test/quirks/quirks.h libsodium-1.0.12/test/quirks/quirks.h
--- libsodium-1.0.11/test/quirks/quirks.h	2016-07-24 20:04:08.000000000 +0200
+++ libsodium-1.0.12/test/quirks/quirks.h	2017-03-06 11:13:57.000000000 +0100
@@ -10,8 +10,8 @@
 static void *
 xmemset(void *dst, int c, size_t n)
 {
-    unsigned char      *dst_ = (unsigned char *) dst;
-    const unsigned char c_ = (unsigned char) c;
+    unsigned char *     dst_ = (unsigned char *) dst;
+    const unsigned char c_   = (unsigned char) c;
     size_t              i;
 
     for (i = 0; i < n; i++) {
@@ -25,7 +25,8 @@ xmemset(void *dst, int c, size_t n)
 # define strcmp(s1, s2) xstrcmp(s1, s2)
 
 static int
-strcmp(const char *s1, const char *s2) {
+strcmp(const char *s1, const char *s2)
+{
     while (*s1 == *s2++) {
         if (*s1++ == 0) {
             return 0;
