#
# Broadcom Linux Router Makefile
#
# Copyright 2001-2003, Broadcom Corporation
# All Rights Reserved.
#
# THIS SOFTWARE IS OFFERED "AS IS", AND BROADCOM GRANTS NO WARRANTIES OF ANY
# KIND, EXPRESS OR IMPLIED, BY STATUTE, COMMUNICATION OR OTHERWISE. BROADCOM
# SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A SPECIFIC PURPOSE OR NONINFRINGEMENT CONCERNING THIS SOFTWARE.
#
# $Id: Makefile,v 1.2 2005/09/26 11:06:58 seg Exp $
#

include .config
ifneq ($(wildcard ../cy_conf.mak),)
  include ../cy_conf.mak
endif

#
# Paths

CONFIG_NOOPT=y
OPENSER_MODULES := sl tm rr maxfwd usrloc registrar dbtext textops exec auth auth_db nathelper
OPENSER_MODULE_FILES := $(foreach module,$(OPENSER_MODULES),openser/modules/$(module)/$(module).so)
OPENSSL_NO_CIPHERS:= no-idea no-md2 no-mdc2 no-rc5 no-sha0 no-rmd160 no-aes192
OPENSSL_OPTIONS:= shared no-ec no-err no-fips no-hw no-krb5 no-threads zlib-dynamic

# Source bases

export PLATFORM LINUXDIR LIBDIR USRLIBDIR
export TOP := $(shell pwd)
export SRCBASE := $(shell (cd $(TOP)/.. && pwd -P))


# Set the HAL directory if you have the HAL sources

# Set the Atheros Rate Control directory if you have the proprietary rate control
export ATH_RATE=ath_rate/sample

#
# Cross-compile environment variables
#

# Build platform
export BUILD := i386-pc-linux-gnu
export HOSTCC := gcc

# uClibc wrapper
export ARCH:=$(PLATFORM)
ifeq ($(CONFIG_UCLIBC),y)
export PLATFORM := $(PLATFORM)-uclibc
endif

#export LINUXDIR := $(SRCBASE)/linux/linux.v24
ifeq ($(ARCH),mips)
export LINUXDIR := $(SRCBASE)/linux/brcm63xx/linux-2.6.17
endif
#ifeq ($(ARCH),armeb)
#export LINUXDIR := $(SRCBASE)/linux/xscale/linux-2.6.23
#endif
ifeq ($(ARCH),mipsel)
export LINUXDIR := $(SRCBASE)/kernel/rb500/linux-2.6.17-rc5
endif
ifeq ($(ARCH),i386)
export LINUXDIR := $(SRCBASE)/kernel/wrap/linux-2.6.16.7
endif

export KERNELRELEASE = $(shell cat $(LINUXDIR)/include/config/kernel.release 2> /dev/null)

#export KERNELRELEASE = $(shell cat $(LINUXDIR)/.kernelrelease 2> /dev/null)

#ifeq ($(PLATFORM),mipsel)
#export CROSS_COMPILE := mipsel-linux-
#export CONFIGURE := ./configure mipsel-linux --build=$(BUILD)
#export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/../mipsel-linux && pwd -P)
#endif

#ifeq ($(PLATFORM),mipsel-uclibc)
export CROSS_COMPILE := aarch64-linux-uclibc-
export CONFIGURE := ./configure $(ARCH)-linux --build=$(BUILD)
export TOOLCHAIN := $(shell cd $(dir $(shell which $(CROSS_COMPILE)gcc))/.. && pwd -P)
#endif

#ifeq ($(CONFIG_BCMWPA2),y)
#export CFLAGS += -DBCMWPA2 
#endif

export BASEOPT:=-Os -fno-unwind-tables -fno-asynchronous-unwind-tables
#export ARCH:= mipsel

ifeq ($(ARCH),mipsel)
export COPTS:=$(BASEOPT) -pipe -mips32 -mtune=mips32 -funit-at-a-time 
endif
ifeq ($(ARCH),armeb)
export COPTS:=$(BASEOPT) -pipe -mtune=xscale -march=armv5te -Wa,-mcpu=xscale -mno-thumb-interwork -mno-thumb 
endif
ifeq ($(ARCH),arm)
#export COPTS:=$(BASEOPT) -pipe -mtune=cortex-a9 -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=hard
export COPTS:=$(BASEOPT) -pipe -mtune=cortex-a9 -march=armv7-a -mfpu=neon -mfloat-abi=hard -fno-caller-saves -fno-plt
#-D_FILE_OFFSET_BITS=64
endif
ifeq ($(ARCH),aarch64)
#export COPTS:=$(BASEOPT) -pipe -mtune=cortex-a9 -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=hard
export COPTS:=$(BASEOPT) -pipe -march=armv8-a+crc+crypto -mcpu=cortex-a53+crc+crypto -mtune=cortex-a53 -fno-caller-saves -fno-plt -ffast-math -funsafe-math-optimizations -fcommon -ftree-vectorize -ftree-vectorizer-verbose=2 -fopt-info-vec
#-D_FILE_OFFSET_BITS=64
endif
ifeq ($(ARCH),mips)
export COPTS:=$(BASEOPT) -pipe -mips32 -mtune=mips32 -funit-at-a-time 
endif
ifeq ($(ARCH),i386)
export COPTS:=$(BASEOPT) -pipe -march=i486 -funit-at-a-time 
endif

export CC := ccache $(CROSS_COMPILE)gcc
export CXX := ccache $(CROSS_COMPILE)g++
export AR := $(CROSS_COMPILE)gcc-ar
export AS := $(CROSS_COMPILE)as
export LD := $(CROSS_COMPILE)ld
export NM := $(CROSS_COMPILE)gcc-nm
export RANLIB := $(CROSS_COMPILE)gcc-ranlib
export STRIP := $(CROSS_COMPILE)strip
export SIZE := $(CROSS_COMPILE)size

export CFLAGS := $(COPTS)

#
# Install and target directories
#

export PLATFORMDIR := $(TOP)/$(PLATFORM)
export INSTALLDIR := $(PLATFORMDIR)/install
export TARGETDIR := $(PLATFORMDIR)/target

ifeq ($(PLATFORM),mipsel)
obj-y += libcrypto
endif
#
# Configuration
#
CONFIG_IPTABLES=y

include rules/configs.mk

obj-clean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-clean)
obj-install := $(foreach obj,$(obj-y),$(obj)-install)
obj-distclean := $(foreach obj,$(obj-y) $(obj-n),$(obj)-distclean)

all: install_headers build_date clean_target $(obj-y) $(LINUXDIR)/.config kernel

build_date:
	echo "#define BUILD_DATE \"$(shell date +%D)\"" > ../../opt/build.h 


kernelsource:
	mkdir -p $(LINUXDIR)
	wget http://www.de.kernel.org/pub/linux/kernel/v2.6/linux-$(KERNELVERSION).tar.bz2 -O $(LINUXDIR)/../linux-$(KERNELVERSION).tar.bz2
	cd $(LINUXDIR)/../ && tar -xvjf $(LINUXDIR)/../linux-$(KERNELVERSION).tar.bz2
	cd $(LINUXDIR)/../ && ./patch $(KERNELVERSION)

include kernel-features.mk
include common.mk

kernel:
	# Also build kernel
	cp $(LINUXDIR)/.config_ipq6018 $(LINUXDIR)/.config

	$(kernelfeatures)
	$(MAKE) -C $(LINUXDIR) ARCH=arm64 oldconfig	

	$(MAKE) -f Makefile.ipq60xx kernel-relink-prep MAKEEXT=ipq60xx KBUILD_TARGETS="Image dtbs" ARCH=aarch64
	$(MAKE) -f Makefile.ipq60xx kernel-relink MAKEEXT=ipq60xx KBUILD_TARGETS="Image dtbs" ARCH=aarch64

testimage:
	cp $(LINUXDIR)/arch/arm64/boot/Image $(ARCH)-uclibc/
	cp $(ARCH)-uclibc/Image $(ARCH)-uclibc/Image.itb
	libdeflate-gzip -f -12 -c $(ARCH)-uclibc/Image.itb > $(ARCH)-uclibc/Image.itb.new
	mv $(ARCH)-uclibc/Image.itb.new $(ARCH)-uclibc/Image.itb
	tools/qcom/mkits.sh  -D linksys_mr7350 -o $(TOP)/$(ARCH)-uclibc/Image.itb.its -k $(TOP)/$(ARCH)-uclibc/Image.itb -C gzip -d $(LINUXDIR)/arch/arm64/boot/dts/qcom/ipq6000-mr7350.dtb -a 0x41000000 -e 0x41000000 -c config@1 -A arm64 -v $(KERNELRELEASE)
	mkimage -f $(TOP)/$(ARCH)-uclibc/Image.itb.its $(TOP)/$(ARCH)-uclibc/Image.itb.new
	mv $(TOP)/$(ARCH)-uclibc/Image.itb.new $(TOP)/$(ARCH)-uclibc/Image.itb
	tools/qcom/ubinize-image.sh  --rootfs $(TOP)/$(ARCH)-uclibc/root.fs $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp  -p 128KiB  -m 2048
	dd if=$(TOP)/$(ARCH)-uclibc/Image.itb > $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=$(TOP)/$(ARCH)-uclibc/Image-factory.bin of=$(TOP)/$(ARCH)-uclibc/Image-factory.bin.new bs=8192k conv=sync
	mv $(TOP)/$(ARCH)-uclibc/Image-factory.bin.new $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	cat $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	let size="$$(stat -c%s $(TOP)/$(ARCH)-uclibc/Image-factory.bin)" pad="2048" offset="256" pad="(pad - ((size + offset) % pad)) % pad"; dd if=/dev/zero bs=$$pad count=1 | tr '\000' '\377' >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	printf ".LINKSYS.01000409%-15s%08X%-8s%-16s" "MR7350" "$$(cksum $(TOP)/$(ARCH)-uclibc/Image-factory.bin | cut -d ' ' -f1)" "0" "K0000000F0246434" >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=/dev/zero bs=192 count=1 >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin



install package: clean_target $(filter-out lib.$(ARCH)-install,$(obj-install)) $(LINUXDIR)/.config
        # Install binaries into target directory
	install -d $(TARGETDIR)
	for dir in $(wildcard $(patsubst %,$(INSTALLDIR)/%,$(obj-y))) ; do \
	    (cd $${dir} && tar cpf - .) | (cd $(TARGETDIR) && tar xpf -) \
	done
	mkdir -p $(ARCH)-uclibc/target/etc/config
	mkdir -p $(ARCH)-uclibc/target/etc/kaid
	mkdir -p $(ARCH)-uclibc/target/etc/langpack
	cd  $(ARCH)-uclibc/target/lib
	cp ./opt/etc/preinit $(ARCH)-uclibc/target/etc
	cp ./opt/etc/postinit $(ARCH)-uclibc/target/etc
	cp ./opt/etc/config/* $(ARCH)-uclibc/target/etc/config
	cp ./opt/usr/lib/smb.conf $(ARCH)-uclibc/target/usr/lib
	ln -sf ../tmp/smbshare $(ARCH)-uclibc/target/www/smb
	# optimize the crypto library by removing unneeded symbols
	# Install (and possibly optimize) C library
#	$(MAKE) -f Makefile.ipq60xx lib.$(ARCH)-install
	# optimize the others library by removing unneeded symbols
	$(MAKE) -f Makefile.ipq60xx optimize-lib
	# Install modules into filesystem
	if grep -q "CONFIG_MODULES=y" $(LINUXDIR)/.config ; then \
	    $(MAKE) -C $(LINUXDIR) MAKE=make modules_install DEPMOD=/bin/true INSTALL_MOD_PATH=$(TARGETDIR) ; \
	fi

	find $(TARGETDIR) -name "wl_*.o"  | xargs rm -rf
ifneq ($(CONFIG_SAMBA),y)
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel/fs/cifs
endif
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/build
	rm -f $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/source
        # Prepare filesystem
        # Make sure mksquashfs-2.0 is used
	cd $(TARGETDIR)  &&  find . -iname "CVS" | xargs rm -rf
	cd $(TARGETDIR)  &&  find . -iname ".svn" | xargs rm -rf

	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/net -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	-find $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/extra -name *.ko -exec mv {} $(TARGETDIR)/lib/modules/$(KERNELRELEASE) \;
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/extra
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/kernel
	rm -rf $(TARGETDIR)/lib/modules/$(KERNELRELEASE)/net
	#e2fsck -y -f $(ARCH)-uclibc/root.fs
	./busybox/examples/depmod.pl -F $(LINUXDIR)/System.map -b $(ARCH)-uclibc/target/lib/modules
#	tar --directory=$(TARGETDIR) --remove-files -cvvjf $(TARGETDIR)/etc/local.tar.bz2 usr/local
	rm -rf $(TARGETDIR)/usr/local
	mkdir $(TARGETDIR)/usr/local
ifeq ($(CONFIG_KAID),y)
	cp kaid/kaid $(TARGETDIR)/usr/sbin
endif
#	mv $(TARGETDIR)/usr/lib/services.so $(TARGETDIR)/lib
	export STRIP_KMOD="$(LINUXDIR)/scripts/strip-kmod.sh" && \
	export STRIP="sstrip" && \
	export NO_RENAME=1 && \
	$(LINUXDIR)/scripts/rstrip.sh $(TARGETDIR)
	cd $(TARGETDIR) && $(TOP)/misc/rootprep.sh
	$(TOP)/../../tools/removewhitespace.sh $(TOP)/../../tools $(TARGETDIR)/etc/config

	cp $(LINUXDIR)/arch/arm64/boot/Image $(ARCH)-uclibc/vmlinux
	gzip -f $(ARCH)-uclibc/vmlinux

	# copy openwrt rootfs to image
	$(LINUXDIR)/scripts/squashfs/mksquashfs4 $(ARCH)-uclibc/target $(ARCH)-uclibc/root.fs -comp xz -root-owned -noappend -Xbcj arm64 -b 262144

#mr7350
	cp $(LINUXDIR)/arch/arm64/boot/Image $(ARCH)-uclibc/
	cp $(ARCH)-uclibc/Image $(ARCH)-uclibc/Image.itb
	libdeflate-gzip -f -12 -c $(ARCH)-uclibc/Image.itb > $(ARCH)-uclibc/Image.itb.new
	mv $(ARCH)-uclibc/Image.itb.new $(ARCH)-uclibc/Image.itb
	tools/qcom/mkits.sh  -D linksys_mr7350 -o $(TOP)/$(ARCH)-uclibc/Image.itb.its -k $(TOP)/$(ARCH)-uclibc/Image.itb -C gzip -d $(LINUXDIR)/arch/arm64/boot/dts/qcom/ipq6000-mr7350.dtb -a 0x41000000 -e 0x41000000 -c config@1 -A arm64 -v $(KERNELRELEASE)
	mkimage -f $(TOP)/$(ARCH)-uclibc/Image.itb.its $(TOP)/$(ARCH)-uclibc/Image.itb.new
	mv $(TOP)/$(ARCH)-uclibc/Image.itb.new $(TOP)/$(ARCH)-uclibc/Image.itb
	tools/qcom/ubinize-image.sh  --rootfs $(TOP)/$(ARCH)-uclibc/root.fs $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp  -p 128KiB  -m 2048
	dd if=$(TOP)/$(ARCH)-uclibc/Image.itb > $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=$(TOP)/$(ARCH)-uclibc/Image-factory.bin of=$(TOP)/$(ARCH)-uclibc/Image-factory.bin.new bs=8192k conv=sync
	mv $(TOP)/$(ARCH)-uclibc/Image-factory.bin.new $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	cat $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	let size="$$(stat -c%s $(TOP)/$(ARCH)-uclibc/Image-factory.bin)" pad="2048" offset="256" pad="(pad - ((size + offset) % pad)) % pad"; dd if=/dev/zero bs=$$pad count=1 | tr '\000' '\377' >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	printf ".LINKSYS.01000409%-15s%08X%-8s%-16s" "MR7350" "$$(cksum $(TOP)/$(ARCH)-uclibc/Image-factory.bin | cut -d ' ' -f1)" "0" "K0000000F0246434" >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=/dev/zero bs=192 count=1 >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	cp $(TOP)/$(ARCH)-uclibc/Image-factory.bin  $(TOP)/$(ARCH)-uclibc/Image-factory-mr7350.bin
	-./tools/trx_n -m 184000000 -o $(ARCH)-uclibc/linksys_mr7350-webflash.bin $(ARCH)-uclibc/Image-factory.bin

#mx4200 v1
	cp $(LINUXDIR)/arch/arm64/boot/Image $(ARCH)-uclibc/
	cp $(ARCH)-uclibc/Image $(ARCH)-uclibc/Image.itb
	libdeflate-gzip -f -12 -c $(ARCH)-uclibc/Image.itb > $(ARCH)-uclibc/Image.itb.new
	mv $(ARCH)-uclibc/Image.itb.new $(ARCH)-uclibc/Image.itb
	tools/qcom/mkits.sh  -D linksys_mx4200v1 -o $(TOP)/$(ARCH)-uclibc/Image.itb.its -k $(TOP)/$(ARCH)-uclibc/Image.itb -C gzip -d $(LINUXDIR)/arch/arm64/boot/dts/qcom/ipq8174-mx4200v1.dtb -a 0x41000000 -e 0x41000000 -c config@1 -A arm64 -v $(KERNELRELEASE)
	mkimage -f $(TOP)/$(ARCH)-uclibc/Image.itb.its $(TOP)/$(ARCH)-uclibc/Image.itb.new
	mv $(TOP)/$(ARCH)-uclibc/Image.itb.new $(TOP)/$(ARCH)-uclibc/Image.itb
	tools/qcom/ubinize-image.sh  --rootfs $(TOP)/$(ARCH)-uclibc/root.fs $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp  -p 128KiB  -m 2048
	dd if=$(TOP)/$(ARCH)-uclibc/Image.itb > $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=$(TOP)/$(ARCH)-uclibc/Image-factory.bin of=$(TOP)/$(ARCH)-uclibc/Image-factory.bin.new bs=6144k conv=sync
	mv $(TOP)/$(ARCH)-uclibc/Image-factory.bin.new $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	cat $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	let size="$$(stat -c%s $(TOP)/$(ARCH)-uclibc/Image-factory.bin)" pad="2048" offset="256" pad="(pad - ((size + offset) % pad)) % pad"; dd if=/dev/zero bs=$$pad count=1 | tr '\000' '\377' >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	printf ".LINKSYS.01000409%-15s%08X%-8s%-16s" "MX4200" "$$(cksum $(TOP)/$(ARCH)-uclibc/Image-factory.bin | cut -d ' ' -f1)" "0" "K0000000F0246434" >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=/dev/zero bs=192 count=1 >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	cp $(TOP)/$(ARCH)-uclibc/Image-factory.bin  $(TOP)/$(ARCH)-uclibc/Image-factory-mx4200v1.bin
	-./tools/trx_n -m 184000000 -o $(ARCH)-uclibc/linksys_mx4200v1-webflash.bin $(ARCH)-uclibc/Image-factory.bin

#mx4200 v2
	cp $(LINUXDIR)/arch/arm64/boot/Image $(ARCH)-uclibc/
	cp $(ARCH)-uclibc/Image $(ARCH)-uclibc/Image.itb
	libdeflate-gzip -f -12 -c $(ARCH)-uclibc/Image.itb > $(ARCH)-uclibc/Image.itb.new
	mv $(ARCH)-uclibc/Image.itb.new $(ARCH)-uclibc/Image.itb
	tools/qcom/mkits.sh  -D linksys_mx4200v2 -o $(TOP)/$(ARCH)-uclibc/Image.itb.its -k $(TOP)/$(ARCH)-uclibc/Image.itb -C gzip -d $(LINUXDIR)/arch/arm64/boot/dts/qcom/ipq8174-mx4200v2.dtb -a 0x41000000 -e 0x41000000 -c config@1 -A arm64 -v $(KERNELRELEASE)
	mkimage -f $(TOP)/$(ARCH)-uclibc/Image.itb.its $(TOP)/$(ARCH)-uclibc/Image.itb.new
	mv $(TOP)/$(ARCH)-uclibc/Image.itb.new $(TOP)/$(ARCH)-uclibc/Image.itb
	tools/qcom/ubinize-image.sh  --rootfs $(TOP)/$(ARCH)-uclibc/root.fs $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp  -p 128KiB  -m 2048
	dd if=$(TOP)/$(ARCH)-uclibc/Image.itb > $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=$(TOP)/$(ARCH)-uclibc/Image-factory.bin of=$(TOP)/$(ARCH)-uclibc/Image-factory.bin.new bs=6144k conv=sync
	mv $(TOP)/$(ARCH)-uclibc/Image-factory.bin.new $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	cat $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	let size="$$(stat -c%s $(TOP)/$(ARCH)-uclibc/Image-factory.bin)" pad="2048" offset="256" pad="(pad - ((size + offset) % pad)) % pad"; dd if=/dev/zero bs=$$pad count=1 | tr '\000' '\377' >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	printf ".LINKSYS.01000409%-15s%08X%-8s%-16s" "MX4200" "$$(cksum $(TOP)/$(ARCH)-uclibc/Image-factory.bin | cut -d ' ' -f1)" "0" "K0000000F0246434" >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=/dev/zero bs=192 count=1 >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	cp $(TOP)/$(ARCH)-uclibc/Image-factory.bin  $(TOP)/$(ARCH)-uclibc/Image-factory-mx4200v2.bin
	-./tools/trx_n -m 184000000 -o $(ARCH)-uclibc/linksys_mx4200v2-webflash.bin $(ARCH)-uclibc/Image-factory.bin

	cp $(LINUXDIR)/arch/arm64/boot/Image $(ARCH)-uclibc/
	cp $(ARCH)-uclibc/Image $(ARCH)-uclibc/Image.itb
	libdeflate-gzip -f -12 -c $(ARCH)-uclibc/Image.itb > $(ARCH)-uclibc/Image.itb.new
	mv $(ARCH)-uclibc/Image.itb.new $(ARCH)-uclibc/Image.itb
	tools/qcom/mkits.sh  -D dynalink_dl-wrx36 -o $(TOP)/$(ARCH)-uclibc/Image.itb.its -k $(TOP)/$(ARCH)-uclibc/Image.itb -C gzip -d $(LINUXDIR)/arch/arm64/boot/dts/qcom/ipq8072-dl-wrx36.dtb -a 0x41000000 -e 0x41000000 -c config@rt5010w-d350-rev0 -A arm64 -v $(KERNELRELEASE)
	mkimage -f $(TOP)/$(ARCH)-uclibc/Image.itb.its $(TOP)/$(ARCH)-uclibc/Image.itb.new
	mv $(TOP)/$(ARCH)-uclibc/Image.itb.new $(TOP)/$(ARCH)-uclibc/Image.itb
	tools/qcom/ubinize-image.sh --kernel $(TOP)/$(ARCH)-uclibc/Image.itb --rootfs $(TOP)/$(ARCH)-uclibc/root.fs $(TOP)/$(ARCH)-uclibc/Image-factory.bin  -p 128KiB  -m 2048
	cp $(TOP)/$(ARCH)-uclibc/Image-factory.bin  $(TOP)/$(ARCH)-uclibc/dynalink_dlwrx36.ubi
	-./tools/trx_n -m 184000000 -o $(ARCH)-uclibc/dynalink_dlwrx36-webflash.bin $(TOP)/$(ARCH)-uclibc/Image-factory.bin

#mr5500
	cp $(LINUXDIR)/arch/arm64/boot/Image $(ARCH)-uclibc/
	cp $(ARCH)-uclibc/Image $(ARCH)-uclibc/Image.itb
	libdeflate-gzip -f -12 -c $(ARCH)-uclibc/Image.itb > $(ARCH)-uclibc/Image.itb.new
	mv $(ARCH)-uclibc/Image.itb.new $(ARCH)-uclibc/Image.itb
	tools/qcom/mkits.sh  -D linksys_mr5500 -o $(TOP)/$(ARCH)-uclibc/Image.itb.its -k $(TOP)/$(ARCH)-uclibc/Image.itb -C gzip -d $(LINUXDIR)/arch/arm64/boot/dts/qcom/ipq5018-mr5500.dtb -a 0x41000000 -e 0x41000000 -c config@1 -A arm64 -v $(KERNELRELEASE)
	mkimage -f $(TOP)/$(ARCH)-uclibc/Image.itb.its $(TOP)/$(ARCH)-uclibc/Image.itb.new
	mv $(TOP)/$(ARCH)-uclibc/Image.itb.new $(TOP)/$(ARCH)-uclibc/Image.itb
	tools/qcom/ubinize-image.sh  --rootfs $(TOP)/$(ARCH)-uclibc/root.fs $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp  -p 128KiB  -m 2048
	dd if=$(TOP)/$(ARCH)-uclibc/Image.itb > $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=$(TOP)/$(ARCH)-uclibc/Image-factory.bin of=$(TOP)/$(ARCH)-uclibc/Image-factory.bin.new bs=8192k conv=sync
	mv $(TOP)/$(ARCH)-uclibc/Image-factory.bin.new $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	cat $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	let size="$$(stat -c%s $(TOP)/$(ARCH)-uclibc/Image-factory.bin)" pad="2048" offset="256" pad="(pad - ((size + offset) % pad)) % pad"; dd if=/dev/zero bs=$$pad count=1 | tr '\000' '\377' >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	printf ".LINKSYS.01000409%-15s%08X%-8s%-16s" "MR5500" "$$(cksum $(TOP)/$(ARCH)-uclibc/Image-factory.bin | cut -d ' ' -f1)" "0" "K0000000F0246434" >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=/dev/zero bs=192 count=1 >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	cp $(TOP)/$(ARCH)-uclibc/Image-factory.bin  $(TOP)/$(ARCH)-uclibc/Image-factory-mr5500.bin
	-./tools/trx_n -m 184000000 -o $(ARCH)-uclibc/linksys_mr5500-webflash.bin $(ARCH)-uclibc/Image-factory.bin

#mx5500
	cp $(LINUXDIR)/arch/arm64/boot/Image $(ARCH)-uclibc/
	cp $(ARCH)-uclibc/Image $(ARCH)-uclibc/Image.itb
	libdeflate-gzip -f -12 -c $(ARCH)-uclibc/Image.itb > $(ARCH)-uclibc/Image.itb.new
	mv $(ARCH)-uclibc/Image.itb.new $(ARCH)-uclibc/Image.itb
	tools/qcom/mkits.sh  -D linksys_mx5500 -o $(TOP)/$(ARCH)-uclibc/Image.itb.its -k $(TOP)/$(ARCH)-uclibc/Image.itb -C gzip -d $(LINUXDIR)/arch/arm64/boot/dts/qcom/ipq5018-mx5500.dtb -a 0x41000000 -e 0x41000000 -c config@1 -A arm64 -v $(KERNELRELEASE)
	mkimage -f $(TOP)/$(ARCH)-uclibc/Image.itb.its $(TOP)/$(ARCH)-uclibc/Image.itb.new
	mv $(TOP)/$(ARCH)-uclibc/Image.itb.new $(TOP)/$(ARCH)-uclibc/Image.itb
	tools/qcom/ubinize-image.sh  --rootfs $(TOP)/$(ARCH)-uclibc/root.fs $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp  -p 128KiB  -m 2048
	dd if=$(TOP)/$(ARCH)-uclibc/Image.itb > $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=$(TOP)/$(ARCH)-uclibc/Image-factory.bin of=$(TOP)/$(ARCH)-uclibc/Image-factory.bin.new bs=8192k conv=sync
	mv $(TOP)/$(ARCH)-uclibc/Image-factory.bin.new $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	cat $(TOP)/$(ARCH)-uclibc/Image-factory.bin.tmp >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	let size="$$(stat -c%s $(TOP)/$(ARCH)-uclibc/Image-factory.bin)" pad="2048" offset="256" pad="(pad - ((size + offset) % pad)) % pad"; dd if=/dev/zero bs=$$pad count=1 | tr '\000' '\377' >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	printf ".LINKSYS.01000409%-15s%08X%-8s%-16s" "MX5500" "$$(cksum $(TOP)/$(ARCH)-uclibc/Image-factory.bin | cut -d ' ' -f1)" "0" "K0000000F0246434" >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	dd if=/dev/zero bs=192 count=1 >> $(TOP)/$(ARCH)-uclibc/Image-factory.bin
	cp $(TOP)/$(ARCH)-uclibc/Image-factory.bin  $(TOP)/$(ARCH)-uclibc/Image-factory-mx5500.bin
	-./tools/trx_n -m 184000000 -o $(ARCH)-uclibc/linksys_mx5500-webflash.bin $(ARCH)-uclibc/Image-factory.bin

	

include rules/all.mk

.PHONY: all clean distclean mrproper install package
.PHONY: conf mconf oldconf kconf kmconf config menuconfig oldconfig
.PHONY: dummy fixkc libnet libpcap



