diff -urpN Python-3.6.3/Doc/c-api/buffer.rst Python-3.6.5/Doc/c-api/buffer.rst
--- Python-3.6.3/Doc/c-api/buffer.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/c-api/buffer.rst	2018-03-28 11:19:31.000000000 +0200
@@ -473,7 +473,7 @@ Buffer-related functions
    (*order* is ``'A'``).  Return ``0`` otherwise.
 
 
-.. c:function:: void PyBuffer_FillContiguousStrides(int ndim, Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t itemsize, char order)
+.. c:function:: void PyBuffer_FillContiguousStrides(int ndims, Py_ssize_t *shape, Py_ssize_t *strides, int itemsize, char order)
 
    Fill the *strides* array with byte-strides of a :term:`contiguous` (C-style if
    *order* is ``'C'`` or Fortran-style if *order* is ``'F'``) array of the
diff -urpN Python-3.6.3/Doc/c-api/datetime.rst Python-3.6.5/Doc/c-api/datetime.rst
--- Python-3.6.3/Doc/c-api/datetime.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/c-api/datetime.rst	2018-03-28 11:19:31.000000000 +0200
@@ -188,7 +188,7 @@ not be *NULL*, and the type is not check
    .. versionadded:: 3.3
 
 
-.. c:function:: int PyDateTime_DELTA_GET_MICROSECOND(PyDateTime_Delta *o)
+.. c:function:: int PyDateTime_DELTA_GET_MICROSECONDS(PyDateTime_Delta *o)
 
    Return the number of microseconds, as an int from 0 through 999999.
 
diff -urpN Python-3.6.3/Doc/c-api/init.rst Python-3.6.5/Doc/c-api/init.rst
--- Python-3.6.3/Doc/c-api/init.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/c-api/init.rst	2018-03-28 11:19:31.000000000 +0200
@@ -64,8 +64,8 @@ Initializing and finalizing the interpre
    the last call to :c:func:`Py_Initialize`.  Ideally, this frees all memory
    allocated by the Python interpreter.  This is a no-op when called for a second
    time (without calling :c:func:`Py_Initialize` again first).  Normally the
-   return value is 0.  If there were errors during finalization
-   (flushing buffered data), -1 is returned.
+   return value is ``0``.  If there were errors during finalization
+   (flushing buffered data), ``-1`` is returned.
 
    This function is provided for a number of reasons.  An embedding application
    might want to restart Python without having to restart the application itself.
@@ -1063,12 +1063,12 @@ Python-level trace functions in previous
    +------------------------------+--------------------------------------+
    | Value of *what*              | Meaning of *arg*                     |
    +==============================+======================================+
-   | :const:`PyTrace_CALL`        | Always *NULL*.                       |
+   | :const:`PyTrace_CALL`        | Always :c:data:`Py_None`.            |
    +------------------------------+--------------------------------------+
    | :const:`PyTrace_EXCEPTION`   | Exception information as returned by |
    |                              | :func:`sys.exc_info`.                |
    +------------------------------+--------------------------------------+
-   | :const:`PyTrace_LINE`        | Always *NULL*.                       |
+   | :const:`PyTrace_LINE`        | Always :c:data:`Py_None`.            |
    +------------------------------+--------------------------------------+
    | :const:`PyTrace_RETURN`      | Value being returned to the caller,  |
    |                              | or *NULL* if caused by an exception. |
@@ -1110,7 +1110,7 @@ Python-level trace functions in previous
 .. c:var:: int PyTrace_RETURN
 
    The value for the *what* parameter to :c:type:`Py_tracefunc` functions when a
-   call is returning without propagating an exception.
+   call is about to return.
 
 
 .. c:var:: int PyTrace_C_CALL
@@ -1137,15 +1137,19 @@ Python-level trace functions in previous
    function as its first parameter, and may be any Python object, or *NULL*.  If
    the profile function needs to maintain state, using a different value for *obj*
    for each thread provides a convenient and thread-safe place to store it.  The
-   profile function is called for all monitored events except the line-number
-   events.
+   profile function is called for all monitored events except :const:`PyTrace_LINE`
+   and :const:`PyTrace_EXCEPTION`.
 
 
 .. c:function:: void PyEval_SetTrace(Py_tracefunc func, PyObject *obj)
 
    Set the tracing function to *func*.  This is similar to
    :c:func:`PyEval_SetProfile`, except the tracing function does receive line-number
-   events.
+   events and does not receive any event related to C function objects being called. Any
+   trace function registered using :c:func:`PyEval_SetTrace` will not receive
+   :const:`PyTrace_C_CALL`, :const:`PyTrace_C_EXCEPTION` or :const:`PyTrace_C_RETURN`
+   as a value for the *what* parameter.
+
 
 .. c:function:: PyObject* PyEval_GetCallStats(PyObject *self)
 
diff -urpN Python-3.6.3/Doc/c-api/long.rst Python-3.6.5/Doc/c-api/long.rst
--- Python-3.6.3/Doc/c-api/long.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/c-api/long.rst	2018-03-28 11:19:31.000000000 +0200
@@ -10,6 +10,9 @@ Integer Objects
 
 All integers are implemented as "long" integer objects of arbitrary size.
 
+On error, most ``PyLong_As*`` APIs return ``(return type)-1`` which cannot be
+distinguished from a number.  Use :c:func:`PyErr_Occurred` to disambiguate.
+
 .. c:type:: PyLongObject
 
    This subtype of :c:type:`PyObject` represents a Python integer object.
@@ -134,6 +137,8 @@ All integers are implemented as "long" i
    Raise :exc:`OverflowError` if the value of *obj* is out of range for a
    :c:type:`long`.
 
+   Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate.
+
 
 .. c:function:: long PyLong_AsLongAndOverflow(PyObject *obj, int *overflow)
 
@@ -146,6 +151,8 @@ All integers are implemented as "long" i
    return ``-1``; otherwise, set *\*overflow* to ``0``.  If any other exception
    occurs set *\*overflow* to ``0`` and return ``-1`` as usual.
 
+   Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate.
+
 
 .. c:function:: long long PyLong_AsLongLong(PyObject *obj)
 
@@ -159,6 +166,8 @@ All integers are implemented as "long" i
    Raise :exc:`OverflowError` if the value of *obj* is out of range for a
    :c:type:`long`.
 
+   Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate.
+
 
 .. c:function:: long long PyLong_AsLongLongAndOverflow(PyObject *obj, int *overflow)
 
@@ -171,6 +180,8 @@ All integers are implemented as "long" i
    and return ``-1``; otherwise, set *\*overflow* to ``0``.  If any other
    exception occurs set *\*overflow* to ``0`` and return ``-1`` as usual.
 
+   Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate.
+
    .. versionadded:: 3.2
 
 
@@ -186,6 +197,8 @@ All integers are implemented as "long" i
    Raise :exc:`OverflowError` if the value of *pylong* is out of range for a
    :c:type:`Py_ssize_t`.
 
+   Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate.
+
 
 .. c:function:: unsigned long PyLong_AsUnsignedLong(PyObject *pylong)
 
@@ -199,15 +212,25 @@ All integers are implemented as "long" i
    Raise :exc:`OverflowError` if the value of *pylong* is out of range for a
    :c:type:`unsigned long`.
 
+   Returns ``(unsigned long)-1`` on error.
+   Use :c:func:`PyErr_Occurred` to disambiguate.
+
 
 .. c:function:: size_t PyLong_AsSize_t(PyObject *pylong)
 
+   .. index::
+      single: SIZE_MAX
+      single: OverflowError (built-in exception)
+
    Return a C :c:type:`size_t` representation of *pylong*.  *pylong* must be
    an instance of :c:type:`PyLongObject`.
 
    Raise :exc:`OverflowError` if the value of *pylong* is out of range for a
    :c:type:`size_t`.
 
+   Returns ``(size_t)-1`` on error.
+   Use :c:func:`PyErr_Occurred` to disambiguate.
+
 
 .. c:function:: unsigned long long PyLong_AsUnsignedLongLong(PyObject *pylong)
 
@@ -220,6 +243,9 @@ All integers are implemented as "long" i
    Raise :exc:`OverflowError` if the value of *pylong* is out of range for an
    :c:type:`unsigned long long`.
 
+   Returns ``(unsigned long long)-1`` on error.
+   Use :c:func:`PyErr_Occurred` to disambiguate.
+
    .. versionchanged:: 3.1
       A negative *pylong* now raises :exc:`OverflowError`, not :exc:`TypeError`.
 
@@ -233,6 +259,8 @@ All integers are implemented as "long" i
    If the value of *obj* is out of range for an :c:type:`unsigned long`,
    return the reduction of that value modulo ``ULONG_MAX + 1``.
 
+   Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate.
+
 
 .. c:function:: unsigned long long PyLong_AsUnsignedLongLongMask(PyObject *obj)
 
@@ -243,6 +271,8 @@ All integers are implemented as "long" i
    If the value of *obj* is out of range for an :c:type:`unsigned long long`,
    return the reduction of that value modulo ``PY_ULLONG_MAX + 1``.
 
+   Returns ``-1`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate.
+
 
 .. c:function:: double PyLong_AsDouble(PyObject *pylong)
 
@@ -252,6 +282,8 @@ All integers are implemented as "long" i
    Raise :exc:`OverflowError` if the value of *pylong* is out of range for a
    :c:type:`double`.
 
+   Returns ``-1.0`` on error.  Use :c:func:`PyErr_Occurred` to disambiguate.
+
 
 .. c:function:: void* PyLong_AsVoidPtr(PyObject *pylong)
 
@@ -259,3 +291,5 @@ All integers are implemented as "long" i
    If *pylong* cannot be converted, an :exc:`OverflowError` will be raised.  This
    is only assured to produce a usable :c:type:`void` pointer for values created
    with :c:func:`PyLong_FromVoidPtr`.
+
+   Returns *NULL* on error.  Use :c:func:`PyErr_Occurred` to disambiguate.
diff -urpN Python-3.6.3/Doc/c-api/memory.rst Python-3.6.5/Doc/c-api/memory.rst
--- Python-3.6.3/Doc/c-api/memory.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/c-api/memory.rst	2018-03-28 11:19:31.000000000 +0200
@@ -150,7 +150,7 @@ The default raw memory block allocator u
 
    Frees the memory block pointed to by *p*, which must have been returned by a
    previous call to :c:func:`PyMem_RawMalloc`, :c:func:`PyMem_RawRealloc` or
-   :c:func:`PyMem_RawCalloc`.  Otherwise, or if ``PyMem_Free(p)`` has been
+   :c:func:`PyMem_RawCalloc`.  Otherwise, or if ``PyMem_RawFree(p)`` has been
    called before, undefined behavior occurs.
 
    If *p* is *NULL*, no operation is performed.
@@ -263,6 +263,69 @@ versions and is therefore deprecated in
 * ``PyMem_DEL(ptr)``
 
 
+Object allocators
+=================
+
+The following function sets, modeled after the ANSI C standard, but specifying
+behavior when requesting zero bytes, are available for allocating and releasing
+memory from the Python heap.
+
+By default, these functions use :ref:`pymalloc memory allocator <pymalloc>`.
+
+.. warning::
+
+   The :term:`GIL <global interpreter lock>` must be held when using these
+   functions.
+
+.. c:function:: void* PyObject_Malloc(size_t n)
+
+   Allocates *n* bytes and returns a pointer of type :c:type:`void\*` to the
+   allocated memory, or *NULL* if the request fails.
+
+   Requesting zero bytes returns a distinct non-*NULL* pointer if possible, as
+   if ``PyObject_Malloc(1)`` had been called instead. The memory will not have
+   been initialized in any way.
+
+
+.. c:function:: void* PyObject_Calloc(size_t nelem, size_t elsize)
+
+   Allocates *nelem* elements each whose size in bytes is *elsize* and returns
+   a pointer of type :c:type:`void\*` to the allocated memory, or *NULL* if the
+   request fails. The memory is initialized to zeros.
+
+   Requesting zero elements or elements of size zero bytes returns a distinct
+   non-*NULL* pointer if possible, as if ``PyObject_Calloc(1, 1)`` had been called
+   instead.
+
+   .. versionadded:: 3.5
+
+
+.. c:function:: void* PyObject_Realloc(void *p, size_t n)
+
+   Resizes the memory block pointed to by *p* to *n* bytes. The contents will be
+   unchanged to the minimum of the old and the new sizes.
+
+   If *p* is *NULL*, the call is equivalent to ``PyObject_Malloc(n)``; else if *n*
+   is equal to zero, the memory block is resized but is not freed, and the
+   returned pointer is non-*NULL*.
+
+   Unless *p* is *NULL*, it must have been returned by a previous call to
+   :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` or :c:func:`PyObject_Calloc`.
+
+   If the request fails, :c:func:`PyObject_Realloc` returns *NULL* and *p* remains
+   a valid pointer to the previous memory area.
+
+
+.. c:function:: void PyObject_Free(void *p)
+
+   Frees the memory block pointed to by *p*, which must have been returned by a
+   previous call to :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` or
+   :c:func:`PyObject_Calloc`.  Otherwise, or if ``PyObject_Free(p)`` has been called
+   before, undefined behavior occurs.
+
+   If *p* is *NULL*, no operation is performed.
+
+
 Customize Memory Allocators
 ===========================
 
diff -urpN Python-3.6.3/Doc/c-api/sequence.rst Python-3.6.5/Doc/c-api/sequence.rst
--- Python-3.6.3/Doc/c-api/sequence.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/c-api/sequence.rst	2018-03-28 11:19:31.000000000 +0200
@@ -17,9 +17,8 @@ Sequence Protocol
 
    .. index:: builtin: len
 
-   Returns the number of objects in sequence *o* on success, and ``-1`` on failure.
-   For objects that do not provide sequence protocol, this is equivalent to the
-   Python expression ``len(o)``.
+   Returns the number of objects in sequence *o* on success, and ``-1`` on
+   failure.  This is equivalent to the Python expression ``len(o)``.
 
 
 .. c:function:: PyObject* PySequence_Concat(PyObject *o1, PyObject *o2)
diff -urpN Python-3.6.3/Doc/c-api/sys.rst Python-3.6.5/Doc/c-api/sys.rst
--- Python-3.6.3/Doc/c-api/sys.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/c-api/sys.rst	2018-03-28 11:19:31.000000000 +0200
@@ -66,9 +66,18 @@ Operating System Utilities
    surrogate character, escape the bytes using the surrogateescape error
    handler instead of decoding them.
 
+   Encoding, highest priority to lowest priority:
+
+   * ``UTF-8`` on macOS and Android;
+   * ``ASCII`` if the ``LC_CTYPE`` locale is ``"C"``,
+     ``nl_langinfo(CODESET)`` returns the ``ASCII`` encoding (or an alias),
+     and :c:func:`mbstowcs` and :c:func:`wcstombs` functions use the
+     ``ISO-8859-1`` encoding.
+   * the current locale encoding (``LC_CTYPE`` locale).
+
    Return a pointer to a newly allocated wide character string, use
    :c:func:`PyMem_RawFree` to free the memory. If size is not ``NULL``, write
-   the number of wide characters excluding the null character into ``*size``
+   the number of wide characters excluding the null character into ``*size``.
 
    Return ``NULL`` on decoding error or memory allocation error. If *size* is
    not ``NULL``, ``*size`` is set to ``(size_t)-1`` on memory error or set to
@@ -94,6 +103,15 @@ Operating System Utilities
    :ref:`surrogateescape error handler <surrogateescape>`: surrogate characters
    in the range U+DC80..U+DCFF are converted to bytes 0x80..0xFF.
 
+   Encoding, highest priority to lowest priority:
+
+   * ``UTF-8`` on macOS and Android;
+   * ``ASCII`` if the ``LC_CTYPE`` locale is ``"C"``,
+     ``nl_langinfo(CODESET)`` returns the ``ASCII`` encoding (or an alias),
+     and :c:func:`mbstowcs` and :c:func:`wcstombs` functions uses the
+     ``ISO-8859-1`` encoding.
+   * the current locale encoding.
+
    Return a pointer to a newly allocated byte string, use :c:func:`PyMem_Free`
    to free the memory. Return ``NULL`` on encoding error or memory allocation
    error
diff -urpN Python-3.6.3/Doc/c-api/unicode.rst Python-3.6.5/Doc/c-api/unicode.rst
--- Python-3.6.3/Doc/c-api/unicode.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/c-api/unicode.rst	2018-03-28 11:19:31.000000000 +0200
@@ -773,6 +773,12 @@ system.
 
    .. versionadded:: 3.3
 
+   .. versionchanged:: 3.6.5
+      The function now also uses the current locale encoding for the
+      ``surrogateescape`` error handler. Previously, :c:func:`Py_DecodeLocale`
+      was used for the ``surrogateescape``, and the current locale encoding was
+      used for ``strict``.
+
 
 .. c:function:: PyObject* PyUnicode_DecodeLocale(const char *str, const char *errors)
 
@@ -800,6 +806,12 @@ system.
 
    .. versionadded:: 3.3
 
+   .. versionchanged:: 3.6.5
+      The function now also uses the current locale encoding for the
+      ``surrogateescape`` error handler. Previously, :c:func:`Py_EncodeLocale`
+      was used for the ``surrogateescape``, and the current locale encoding was
+      used for ``strict``.
+
 
 File System Encoding
 """"""""""""""""""""
diff -urpN Python-3.6.3/Doc/c-api/veryhigh.rst Python-3.6.5/Doc/c-api/veryhigh.rst
--- Python-3.6.3/Doc/c-api/veryhigh.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/c-api/veryhigh.rst	2018-03-28 11:19:31.000000000 +0200
@@ -141,7 +141,8 @@ the same library that the Python runtime
    Read and execute statements from a file associated with an interactive device
    until EOF is reached.  The user will be prompted using ``sys.ps1`` and
    ``sys.ps2``.  *filename* is decoded from the filesystem encoding
-   (:func:`sys.getfilesystemencoding`).  Returns ``0`` at EOF.
+   (:func:`sys.getfilesystemencoding`).  Returns ``0`` at EOF or a negative
+   number upon failure.
 
 
 .. c:var:: int (*PyOS_InputHook)(void)
diff -urpN Python-3.6.3/Doc/conf.py Python-3.6.5/Doc/conf.py
--- Python-3.6.3/Doc/conf.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/conf.py	2018-03-28 11:19:31.000000000 +0200
@@ -37,7 +37,8 @@ highlight_language = 'python3'
 needs_sphinx = '1.2'
 
 # Ignore any .rst files in the venv/ directory.
-exclude_patterns = ['venv/*', 'README.rst']
+venvdir = os.getenv('VENVDIR', 'venv')
+exclude_patterns = [venvdir+'/*', 'README.rst']
 
 
 # Options for HTML output
@@ -88,11 +89,10 @@ html_split_index = True
 # Options for LaTeX output
 # ------------------------
 
+latex_engine = 'xelatex'
+
 # Get LaTeX to handle Unicode correctly
 latex_elements = {
-    'inputenc': r'\usepackage[utf8x]{inputenc}',
-    'utf8extra': '',
-    'fontenc': r'\usepackage[T1,T2A]{fontenc}',
 }
 
 # Additional stuff for the LaTeX preamble.
diff -urpN Python-3.6.3/Doc/copyright.rst Python-3.6.5/Doc/copyright.rst
--- Python-3.6.3/Doc/copyright.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/copyright.rst	2018-03-28 11:19:31.000000000 +0200
@@ -4,7 +4,7 @@ Copyright
 
 Python and this documentation is:
 
-Copyright © 2001-2017 Python Software Foundation. All rights reserved.
+Copyright © 2001-2018 Python Software Foundation. All rights reserved.
 
 Copyright © 2000 BeOpen.com. All rights reserved.
 
diff -urpN Python-3.6.3/Doc/docutils.conf Python-3.6.5/Doc/docutils.conf
--- Python-3.6.3/Doc/docutils.conf	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/Doc/docutils.conf	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,2 @@
+[restructuredtext parser]
+smartquotes-locales: ja: ""''
diff -urpN Python-3.6.3/Doc/extending/extending.rst Python-3.6.5/Doc/extending/extending.rst
--- Python-3.6.3/Doc/extending/extending.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/extending/extending.rst	2018-03-28 11:19:31.000000000 +0200
@@ -40,7 +40,7 @@ A Simple Example
 
 Let's create an extension module called ``spam`` (the favorite food of Monty
 Python fans...) and let's say we want to create a Python interface to the C
-library function :c:func:`system`. [#]_ This function takes a null-terminated
+library function :c:func:`system` [#]_. This function takes a null-terminated
 character string as argument and returns an integer.  We want this function to
 be callable from Python as follows::
 
@@ -917,7 +917,7 @@ It is also possible to :dfn:`borrow` [#]
 borrower of a reference should not call :c:func:`Py_DECREF`.  The borrower must
 not hold on to the object longer than the owner from which it was borrowed.
 Using a borrowed reference after the owner has disposed of it risks using freed
-memory and should be avoided completely. [#]_
+memory and should be avoided completely [#]_.
 
 The advantage of borrowing over owning a reference is that you don't need to
 take care of disposing of the reference on all possible paths through the code
@@ -1088,7 +1088,7 @@ checking.
 
 The C function calling mechanism guarantees that the argument list passed to C
 functions (``args`` in the examples) is never *NULL* --- in fact it guarantees
-that it is always a tuple. [#]_
+that it is always a tuple [#]_.
 
 It is a severe error to ever let a *NULL* pointer "escape" to the Python user.
 
diff -urpN Python-3.6.3/Doc/extending/newtypes.rst Python-3.6.5/Doc/extending/newtypes.rst
--- Python-3.6.3/Doc/extending/newtypes.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/extending/newtypes.rst	2018-03-28 11:19:31.000000000 +0200
@@ -391,8 +391,8 @@ is used to initialize an object after it
 can't guarantee that the initializer is called.  The initializer isn't called
 when unpickling objects and it can be overridden.  Our initializer accepts
 arguments to provide initial values for our instance. Initializers always accept
-positional and keyword arguments. Initializers should return either 0 on
-success or -1 on error.
+positional and keyword arguments. Initializers should return either ``0`` on
+success or ``-1`` on error.
 
 Initializers can be called multiple times.  Anyone can call the :meth:`__init__`
 method on our objects.  For this reason, we have to be extra careful when
@@ -666,7 +666,7 @@ Fortunately, Python's cyclic-garbage col
 the list is garbage and free it.
 
 In the second version of the :class:`Noddy` example, we allowed any kind of
-object to be stored in the :attr:`first` or :attr:`last` attributes. [#]_ This
+object to be stored in the :attr:`first` or :attr:`last` attributes [#]_. This
 means that :class:`Noddy` objects can participate in cycles::
 
    >>> import noddy2
diff -urpN Python-3.6.3/Doc/faq/extending.rst Python-3.6.5/Doc/faq/extending.rst
--- Python-3.6.3/Doc/faq/extending.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/faq/extending.rst	2018-03-28 11:19:31.000000000 +0200
@@ -53,7 +53,7 @@ with a tool such as `SWIG <http://www.sw
 <https://riverbankcomputing.com/software/sip/intro>`__, `CXX
 <http://cxx.sourceforge.net/>`_ `Boost
 <http://www.boost.org/libs/python/doc/index.html>`_, or `Weave
-<https://scipy.github.io/devdocs/tutorial/weave.html>`_ are also
+<https://github.com/scipy/weave>`_ are also
 alternatives for wrapping C++ libraries.
 
 
@@ -62,7 +62,7 @@ How can I execute arbitrary Python state
 
 The highest-level function to do this is :c:func:`PyRun_SimpleString` which takes
 a single string argument to be executed in the context of the module
-``__main__`` and returns 0 for success and -1 when an exception occurred
+``__main__`` and returns ``0`` for success and ``-1`` when an exception occurred
 (including ``SyntaxError``).  If you want more control, use
 :c:func:`PyRun_String`; see the source for :c:func:`PyRun_SimpleString` in
 ``Python/pythonrun.c``.
diff -urpN Python-3.6.3/Doc/glossary.rst Python-3.6.5/Doc/glossary.rst
--- Python-3.6.3/Doc/glossary.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/glossary.rst	2018-03-28 11:19:31.000000000 +0200
@@ -391,7 +391,8 @@ Glossary
    garbage collection
       The process of freeing memory when it is not used anymore.  Python
       performs garbage collection via reference counting and a cyclic garbage
-      collector that is able to detect and break reference cycles.
+      collector that is able to detect and break reference cycles.  The
+      garbage collector can be controlled using the :mod:`gc` module.
 
       .. index:: single: generator
 
@@ -535,7 +536,10 @@ Glossary
       iterables include all sequence types (such as :class:`list`, :class:`str`,
       and :class:`tuple`) and some non-sequence types like :class:`dict`,
       :term:`file objects <file object>`, and objects of any classes you define
-      with an :meth:`__iter__` or :meth:`__getitem__` method.  Iterables can be
+      with an :meth:`__iter__` method or with a :meth:`__getitem__` method
+      that implements :term:`Sequence` semantics.
+
+      Iterables can be
       used in a :keyword:`for` loop and in many other places where a sequence is
       needed (:func:`zip`, :func:`map`, ...).  When an iterable object is passed
       as an argument to the built-in function :func:`iter`, it returns an
diff -urpN Python-3.6.3/Doc/howto/descriptor.rst Python-3.6.5/Doc/howto/descriptor.rst
--- Python-3.6.3/Doc/howto/descriptor.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/howto/descriptor.rst	2018-03-28 11:19:31.000000000 +0200
@@ -180,7 +180,7 @@ descriptor is useful for monitoring just
 
 The protocol is simple and offers exciting possibilities.  Several use cases are
 so common that they have been packaged into individual function calls.
-Properties, bound and unbound methods, static methods, and class methods are all
+Properties, bound methods, static methods, and class methods are all
 based on the descriptor protocol.
 
 
@@ -266,22 +266,23 @@ Python's object oriented features are bu
 Using non-data descriptors, the two are merged seamlessly.
 
 Class dictionaries store methods as functions.  In a class definition, methods
-are written using :keyword:`def` and :keyword:`lambda`, the usual tools for
-creating functions.  The only difference from regular functions is that the
+are written using :keyword:`def` or :keyword:`lambda`, the usual tools for
+creating functions.  Methods only differ from regular functions in that the
 first argument is reserved for the object instance.  By Python convention, the
 instance reference is called *self* but may be called *this* or any other
 variable name.
 
 To support method calls, functions include the :meth:`__get__` method for
 binding methods during attribute access.  This means that all functions are
-non-data descriptors which return bound or unbound methods depending whether
-they are invoked from an object or a class.  In pure python, it works like
-this::
+non-data descriptors which return bound methods when they are invoked from an
+object.  In pure python, it works like this::
 
     class Function(object):
         . . .
         def __get__(self, obj, objtype=None):
             "Simulate func_descr_get() in Objects/funcobject.c"
+            if obj is None:
+                return self
             return types.MethodType(self, obj)
 
 Running the interpreter shows how the function descriptor works in practice::
@@ -291,25 +292,34 @@ Running the interpreter shows how the fu
     ...         return x
     ...
     >>> d = D()
-    >>> D.__dict__['f']  # Stored internally as a function
-    <function f at 0x00C45070>
-    >>> D.f              # Get from a class becomes an unbound method
-    <unbound method D.f>
-    >>> d.f              # Get from an instance becomes a bound method
+
+    # Access through the class dictionary does not invoke __get__.
+    # It just returns the underlying function object.
+    >>> D.__dict__['f']
+    <function D.f at 0x00C45070>
+
+    # Dotted access from a class calls __get__() which just returns
+    # the underlying function unchanged.
+    >>> D.f
+    <function D.f at 0x00C45070>
+
+    # The function has a __qualname__ attribute to support introspection
+    >>> D.f.__qualname__
+    'D.f'
+
+    # Dotted access from an instance calls __get__() which returns the
+    # function wrapped in a bound method object
+    >>> d.f
     <bound method D.f of <__main__.D object at 0x00B18C90>>
 
-The output suggests that bound and unbound methods are two different types.
-While they could have been implemented that way, the actual C implementation of
-:c:type:`PyMethod_Type` in :source:`Objects/classobject.c` is a single object
-with two different representations depending on whether the :attr:`im_self`
-field is set or is *NULL* (the C equivalent of ``None``).
-
-Likewise, the effects of calling a method object depend on the :attr:`im_self`
-field. If set (meaning bound), the original function (stored in the
-:attr:`im_func` field) is called as expected with the first argument set to the
-instance.  If unbound, all of the arguments are passed unchanged to the original
-function. The actual C implementation of :func:`instancemethod_call()` is only
-slightly more complex in that it includes some type checking.
+    # Internally, the bound method stores the underlying function,
+    # the bound instance, and the class of the bound instance.
+    >>> d.f.__func__
+    <function D.f at 0x1012e5ae8>
+    >>> d.f.__self__
+    <__main__.D object at 0x1012e1f98>
+    >>> d.f.__class__
+    <class 'method'>
 
 
 Static Methods and Class Methods
diff -urpN Python-3.6.3/Doc/howto/logging-cookbook.rst Python-3.6.5/Doc/howto/logging-cookbook.rst
--- Python-3.6.3/Doc/howto/logging-cookbook.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/howto/logging-cookbook.rst	2018-03-28 11:19:31.000000000 +0200
@@ -941,7 +941,7 @@ Using file rotation
 -------------------
 
 .. sectionauthor:: Doug Hellmann, Vinay Sajip (changes)
-.. (see <http://blog.doughellmann.com/2007/05/pymotw-logging.html>)
+.. (see <https://pymotw.com/3/logging/>)
 
 Sometimes you want to let a log file grow to a certain size, then open a new
 file and log to that. You may want to keep a certain number of these files, and
diff -urpN Python-3.6.3/Doc/howto/regex.rst Python-3.6.5/Doc/howto/regex.rst
--- Python-3.6.3/Doc/howto/regex.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/howto/regex.rst	2018-03-28 11:19:31.000000000 +0200
@@ -153,8 +153,8 @@ These sequences can be included inside a
 ``','`` or ``'.'``.
 
 The final metacharacter in this section is ``.``.  It matches anything except a
-newline character, and there's an alternate mode (``re.DOTALL``) where it will
-match even a newline.  ``'.'`` is often used where you want to match "any
+newline character, and there's an alternate mode (:const:`re.DOTALL`) where it will
+match even a newline.  ``.`` is often used where you want to match "any
 character".
 
 
@@ -168,14 +168,11 @@ wouldn't be much of an advance. Another
 portions of the RE must be repeated a certain number of times.
 
 The first metacharacter for repeating things that we'll look at is ``*``.  ``*``
-doesn't match the literal character ``*``; instead, it specifies that the
+doesn't match the literal character ``'*'``; instead, it specifies that the
 previous character can be matched zero or more times, instead of exactly once.
 
-For example, ``ca*t`` will match ``ct`` (0 ``a`` characters), ``cat`` (1 ``a``),
-``caaat`` (3 ``a`` characters), and so forth.  The RE engine has various
-internal limitations stemming from the size of C's ``int`` type that will
-prevent it from matching over 2 billion ``a`` characters; patterns
-are usually not written to match that much data.
+For example, ``ca*t`` will match ``'ct'`` (0 ``'a'`` characters), ``'cat'`` (1 ``'a'``),
+``'caaat'`` (3 ``'a'`` characters), and so forth.
 
 Repetitions such as ``*`` are :dfn:`greedy`; when repeating a RE, the matching
 engine will try to repeat it as many times as possible. If later portions of the
@@ -185,7 +182,7 @@ fewer repetitions.
 A step-by-step example will make this more obvious.  Let's consider the
 expression ``a[bcd]*b``.  This matches the letter ``'a'``, zero or more letters
 from the class ``[bcd]``, and finally ends with a ``'b'``.  Now imagine matching
-this RE against the string ``abcbd``.
+this RE against the string ``'abcbd'``.
 
 +------+-----------+---------------------------------+
 | Step | Matched   | Explanation                     |
@@ -218,7 +215,7 @@ this RE against the string ``abcbd``.
 |      |           | it succeeds.                    |
 +------+-----------+---------------------------------+
 
-The end of the RE has now been reached, and it has matched ``abcb``.  This
+The end of the RE has now been reached, and it has matched ``'abcb'``.  This
 demonstrates how the matching engine goes as far as it can at first, and if no
 match is found it will then progressively back up and retry the rest of the RE
 again and again.  It will back up until it has tried zero matches for
@@ -229,24 +226,23 @@ Another repeating metacharacter is ``+``
 careful attention to the difference between ``*`` and ``+``; ``*`` matches
 *zero* or more times, so whatever's being repeated may not be present at all,
 while ``+`` requires at least *one* occurrence.  To use a similar example,
-``ca+t`` will match ``cat`` (1 ``a``), ``caaat`` (3 ``a``'s), but won't match
-``ct``.
+``ca+t`` will match ``'cat'`` (1 ``'a'``), ``'caaat'`` (3 ``'a'``\ s), but won't
+match ``'ct'``.
 
 There are two more repeating qualifiers.  The question mark character, ``?``,
 matches either once or zero times; you can think of it as marking something as
-being optional.  For example, ``home-?brew`` matches either ``homebrew`` or
-``home-brew``.
+being optional.  For example, ``home-?brew`` matches either ``'homebrew'`` or
+``'home-brew'``.
 
 The most complicated repeated qualifier is ``{m,n}``, where *m* and *n* are
 decimal integers.  This qualifier means there must be at least *m* repetitions,
-and at most *n*.  For example, ``a/{1,3}b`` will match ``a/b``, ``a//b``, and
-``a///b``.  It won't match ``ab``, which has no slashes, or ``a////b``, which
+and at most *n*.  For example, ``a/{1,3}b`` will match ``'a/b'``, ``'a//b'``, and
+``'a///b'``.  It won't match ``'ab'``, which has no slashes, or ``'a////b'``, which
 has four.
 
 You can omit either *m* or *n*; in that case, a reasonable value is assumed for
 the missing value.  Omitting *m* is interpreted as a lower limit of 0, while
-omitting *n* results in an upper bound of infinity --- actually, the upper bound
-is the 2-billion limit mentioned earlier, but that might as well be infinity.
+omitting *n* results in an upper bound of infinity.
 
 Readers of a reductionist bent may notice that the three other qualifiers can
 all be expressed using this notation.  ``{0,}`` is the same as ``*``, ``{1,}``
@@ -293,6 +289,8 @@ Putting REs in strings keeps the Python
 disadvantage which is the topic of the next section.
 
 
+.. _the-backslash-plague:
+
 The Backslash Plague
 --------------------
 
@@ -331,6 +329,13 @@ backslashes are not handled in any speci
 while ``"\n"`` is a one-character string containing a newline. Regular
 expressions will often be written in Python code using this raw string notation.
 
+In addition, special escape sequences that are valid in regular expressions,
+but not valid as Python string literals, now result in a
+:exc:`DeprecationWarning` and will eventually become a :exc:`SyntaxError`,
+which means the sequences will be invalid if raw string notation or escaping
+the backslashes isn't used.
+
+
 +-------------------+------------------+
 | Regular String    | Raw string       |
 +===================+==================+
@@ -366,7 +371,7 @@ for a complete listing.
 |                  | returns them as an :term:`iterator`.          |
 +------------------+-----------------------------------------------+
 
-:meth:`~re.regex.match` and :meth:`~re.regex.search` return ``None`` if no match can be found.  If
+:meth:`~re.pattern.match` and :meth:`~re.pattern.search` return ``None`` if no match can be found.  If
 they're successful, a :ref:`match object <match-objects>` instance is returned,
 containing information about the match: where it starts and ends, the substring
 it matched, and more.
@@ -388,24 +393,24 @@ Python interpreter, import the :mod:`re`
 
 Now, you can try matching various strings against the RE ``[a-z]+``.  An empty
 string shouldn't match at all, since ``+`` means 'one or more repetitions'.
-:meth:`match` should return ``None`` in this case, which will cause the
+:meth:`~re.pattern.match` should return ``None`` in this case, which will cause the
 interpreter to print no output.  You can explicitly print the result of
-:meth:`match` to make this clear. ::
+:meth:`!match` to make this clear. ::
 
    >>> p.match("")
    >>> print(p.match(""))
    None
 
 Now, let's try it on a string that it should match, such as ``tempo``.  In this
-case, :meth:`match` will return a :ref:`match object <match-objects>`, so you
+case, :meth:`~re.pattern.match` will return a :ref:`match object <match-objects>`, so you
 should store the result in a variable for later use. ::
 
    >>> m = p.match('tempo')
-   >>> m  #doctest: +ELLIPSIS
+   >>> m
    <_sre.SRE_Match object; span=(0, 5), match='tempo'>
 
 Now you can query the :ref:`match object <match-objects>` for information
-about the matching string.  :ref:`match object <match-objects>` instances
+about the matching string.  Match object instances
 also have several methods and attributes; the most important ones are:
 
 +------------------+--------------------------------------------+
@@ -432,15 +437,15 @@ Trying these methods will soon clarify t
 
 :meth:`~re.match.group` returns the substring that was matched by the RE.  :meth:`~re.match.start`
 and :meth:`~re.match.end` return the starting and ending index of the match. :meth:`~re.match.span`
-returns both start and end indexes in a single tuple.  Since the :meth:`match`
-method only checks if the RE matches at the start of a string, :meth:`start`
-will always be zero.  However, the :meth:`search` method of patterns
+returns both start and end indexes in a single tuple.  Since the :meth:`~re.pattern.match`
+method only checks if the RE matches at the start of a string, :meth:`!start`
+will always be zero.  However, the :meth:`~re.pattern.search` method of patterns
 scans through the string, so  the match may not start at zero in that
 case. ::
 
    >>> print(p.match('::: message'))
    None
-   >>> m = p.search('::: message'); print(m)  #doctest: +ELLIPSIS
+   >>> m = p.search('::: message'); print(m)
    <_sre.SRE_Match object; span=(4, 11), match='message'>
    >>> m.group()
    'message'
@@ -459,14 +464,20 @@ In actual programs, the most common styl
        print('No match')
 
 Two pattern methods return all of the matches for a pattern.
-:meth:`~re.regex.findall` returns a list of matching strings::
+:meth:`~re.pattern.findall` returns a list of matching strings::
 
-   >>> p = re.compile('\d+')
+   >>> p = re.compile(r'\d+')
    >>> p.findall('12 drummers drumming, 11 pipers piping, 10 lords a-leaping')
    ['12', '11', '10']
 
-:meth:`findall` has to create the entire list before it can be returned as the
-result.  The :meth:`~re.regex.finditer` method returns a sequence of
+The ``r`` prefix, making the literal a raw string literal, is needed in this
+example because escape sequences in a normal "cooked" string literal that are
+not recognized by Python, as opposed to regular expressions, now result in a
+:exc:`DeprecationWarning` and will eventually become a :exc:`SyntaxError`.  See
+:ref:`the-backslash-plague`.
+
+:meth:`~re.Pattern.findall` has to create the entire list before it can be returned as the
+result.  The :meth:`~re.Pattern.finditer` method returns a sequence of
 :ref:`match object <match-objects>` instances as an :term:`iterator`::
 
    >>> iterator = p.finditer('12 drummers drumming, 11 ... 10 ...')
@@ -529,14 +540,14 @@ of each one.
 |                                 | characters with the respective property.   |
 +---------------------------------+--------------------------------------------+
 | :const:`DOTALL`, :const:`S`     | Make ``.`` match any character, including  |
-|                                 | newlines                                   |
+|                                 | newlines.                                  |
 +---------------------------------+--------------------------------------------+
-| :const:`IGNORECASE`, :const:`I` | Do case-insensitive matches                |
+| :const:`IGNORECASE`, :const:`I` | Do case-insensitive matches.               |
 +---------------------------------+--------------------------------------------+
-| :const:`LOCALE`, :const:`L`     | Do a locale-aware match                    |
+| :const:`LOCALE`, :const:`L`     | Do a locale-aware match.                   |
 +---------------------------------+--------------------------------------------+
 | :const:`MULTILINE`, :const:`M`  | Multi-line matching, affecting ``^`` and   |
-|                                 | ``$``                                      |
+|                                 | ``$``.                                     |
 +---------------------------------+--------------------------------------------+
 | :const:`VERBOSE`, :const:`X`    | Enable verbose REs, which can be organized |
 | (for 'extended')                | more cleanly and understandably.           |
@@ -549,27 +560,41 @@ of each one.
 
    Perform case-insensitive matching; character class and literal strings will
    match letters by ignoring case.  For example, ``[A-Z]`` will match lowercase
-   letters, too, and ``Spam`` will match ``Spam``, ``spam``, or ``spAM``. This
-   lowercasing doesn't take the current locale into account; it will if you also
-   set the :const:`LOCALE` flag.
+   letters, too. Full Unicode matching also works unless the :const:`ASCII`
+   flag is used to disable non-ASCII matches.  When the Unicode patterns
+   ``[a-z]`` or ``[A-Z]`` are used in combination with the :const:`IGNORECASE`
+   flag, they will match the 52 ASCII letters and 4 additional non-ASCII
+   letters: 'İ' (U+0130, Latin capital letter I with dot above), 'ı' (U+0131,
+   Latin small letter dotless i), 'ſ' (U+017F, Latin small letter long s) and
+   'K' (U+212A, Kelvin sign).  ``Spam`` will match ``'Spam'``, ``'spam'``,
+   ``'spAM'``, or ``'ſpam'`` (the latter is matched only in Unicode mode).
+   This lowercasing doesn't take the current locale into account;
+   it will if you also set the :const:`LOCALE` flag.
 
 
 .. data:: L
           LOCALE
    :noindex:
 
-   Make ``\w``, ``\W``, ``\b``, and ``\B``, dependent on the current locale
-   instead of the Unicode database.
+   Make ``\w``, ``\W``, ``\b``, ``\B`` and case-insensitive matching dependent
+   on the current locale instead of the Unicode database.
 
-   Locales are a feature of the C library intended to help in writing programs that
-   take account of language differences.  For example, if you're processing French
-   text, you'd want to be able to write ``\w+`` to match words, but ``\w`` only
-   matches the character class ``[A-Za-z]``; it won't match ``'é'`` or ``'ç'``.  If
-   your system is configured properly and a French locale is selected, certain C
-   functions will tell the program that ``'é'`` should also be considered a letter.
+   Locales are a feature of the C library intended to help in writing programs
+   that take account of language differences.  For example, if you're
+   processing encoded French text, you'd want to be able to write ``\w+`` to
+   match words, but ``\w`` only matches the character class ``[A-Za-z]`` in
+   bytes patterns; it won't match bytes corresponding to ``é`` or ``ç``.
+   If your system is configured properly and a French locale is selected,
+   certain C functions will tell the program that the byte corresponding to
+   ``é`` should also be considered a letter.
    Setting the :const:`LOCALE` flag when compiling a regular expression will cause
    the resulting compiled object to use these C functions for ``\w``; this is
    slower, but also enables ``\w+`` to match French words as you'd expect.
+   The use of this flag is discouraged in Python 3 as the locale mechanism
+   is very unreliable, it only handles one "culture" at a time, and it only
+   works with 8-bit locales.  Unicode matching is already enabled by default
+   in Python 3 for Unicode (str) patterns, and it is able to handle different
+   locales/languages.
 
 
 .. data:: M
@@ -667,11 +692,11 @@ zero-width assertions should never be re
 given location, they can obviously be matched an infinite number of times.
 
 ``|``
-   Alternation, or the "or" operator.   If A and B are regular expressions,
-   ``A|B`` will match any string that matches either ``A`` or ``B``. ``|`` has very
+   Alternation, or the "or" operator.   If *A* and *B* are regular expressions,
+   ``A|B`` will match any string that matches either *A* or *B*. ``|`` has very
    low precedence in order to make it work reasonably when you're alternating
-   multi-character strings. ``Crow|Servo`` will match either ``Crow`` or ``Servo``,
-   not ``Cro``, a ``'w'`` or an ``'S'``, and ``ervo``.
+   multi-character strings. ``Crow|Servo`` will match either ``'Crow'`` or ``'Servo'``,
+   not ``'Cro'``, a ``'w'`` or an ``'S'``, and ``'ervo'``.
 
    To match a literal ``'|'``, use ``\|``, or enclose it inside a character class,
    as in ``[|]``.
@@ -689,8 +714,7 @@ given location, they can obviously be ma
       >>> print(re.search('^From', 'Reciting From Memory'))
       None
 
-   .. To match a literal \character{\^}, use \regexp{\e\^} or enclose it
-   .. inside a character class, as in \regexp{[{\e}\^]}.
+   To match a literal ``'^'``, use ``\^``.
 
 ``$``
    Matches at the end of a line, which is defined as either the end of the string,
@@ -725,7 +749,7 @@ given location, they can obviously be ma
    match when it's contained inside another word. ::
 
       >>> p = re.compile(r'\bclass\b')
-      >>> print(p.search('no class at all'))  #doctest: +ELLIPSIS
+      >>> print(p.search('no class at all'))
       <_sre.SRE_Match object; span=(3, 8), match='class'>
       >>> print(p.search('the declassified algorithm'))
       None
@@ -743,7 +767,7 @@ given location, they can obviously be ma
       >>> p = re.compile('\bclass\b')
       >>> print(p.search('no class at all'))
       None
-      >>> print(p.search('\b' + 'class' + '\b'))  #doctest: +ELLIPSIS
+      >>> print(p.search('\b' + 'class' + '\b'))
       <_sre.SRE_Match object; span=(0, 7), match='\x08class\x08'>
 
    Second, inside a character class, where there's no use for this assertion,
@@ -786,7 +810,8 @@ of a group with a repeating qualifier, s
 
 Groups indicated with ``'('``, ``')'`` also capture the starting and ending
 index of the text that they match; this can be retrieved by passing an argument
-to :meth:`group`, :meth:`start`, :meth:`end`, and :meth:`span`.  Groups are
+to :meth:`~re.match.group`, :meth:`~re.match.start`, :meth:`~re.match.end`, and
+:meth:`~re.match.span`.  Groups are
 numbered starting with 0.  Group 0 is always present; it's the whole RE, so
 :ref:`match object <match-objects>` methods all have group 0 as their default
 argument.  Later we'll see how to express groups that don't capture the span
@@ -812,13 +837,13 @@ from left to right. ::
    >>> m.group(2)
    'b'
 
-:meth:`group` can be passed multiple group numbers at a time, in which case it
+:meth:`~re.match.group` can be passed multiple group numbers at a time, in which case it
 will return a tuple containing the corresponding values for those groups. ::
 
    >>> m.group(2,1,2)
    ('b', 'abc', 'b')
 
-The :meth:`groups` method returns a tuple containing the strings for all the
+The :meth:`~re.match.groups` method returns a tuple containing the strings for all the
 subgroups, from 1 up to however many there are. ::
 
    >>> m.groups()
@@ -834,7 +859,7 @@ backreferences in a RE.
 
 For example, the following RE detects doubled words in a string. ::
 
-   >>> p = re.compile(r'(\b\w+)\s+\1')
+   >>> p = re.compile(r'\b(\w+)\s+\1\b')
    >>> p.search('Paris in the the spring').group()
    'the the'
 
@@ -933,9 +958,9 @@ number of the group.  There's naturally
 instead of the number. This is another Python extension: ``(?P=name)`` indicates
 that the contents of the group called *name* should again be matched at the
 current point.  The regular expression for finding doubled words,
-``(\b\w+)\s+\1`` can also be written as ``(?P<word>\b\w+)\s+(?P=word)``::
+``\b(\w+)\s+\1\b`` can also be written as ``\b(?P<word>\w+)\s+(?P=word)\b``::
 
-   >>> p = re.compile(r'(?P<word>\b\w+)\s+(?P=word)')
+   >>> p = re.compile(r'\b(?P<word>\w+)\s+(?P=word)\b')
    >>> p.search('Paris in the the spring').group()
    'the the'
 
@@ -1034,7 +1059,7 @@ using the following pattern methods:
 | ``sub()``        | Find all substrings where the RE matches, and |
 |                  | replace them with a different string          |
 +------------------+-----------------------------------------------+
-| ``subn()``       | Does the same thing as :meth:`sub`,  but      |
+| ``subn()``       | Does the same thing as :meth:`!sub`,  but     |
 |                  | returns the new string and the number of      |
 |                  | replacements                                  |
 +------------------+-----------------------------------------------+
@@ -1043,10 +1068,10 @@ using the following pattern methods:
 Splitting Strings
 -----------------
 
-The :meth:`split` method of a pattern splits a string apart
+The :meth:`~re.pattern.split` method of a pattern splits a string apart
 wherever the RE matches, returning a list of the pieces. It's similar to the
-:meth:`split` method of strings but provides much more generality in the
-delimiters that you can split by; string :meth:`split` only supports splitting by
+:meth:`~str.split` method of strings but provides much more generality in the
+delimiters that you can split by; string :meth:`!split` only supports splitting by
 whitespace or by a fixed string.  As you'd expect, there's a module-level
 :func:`re.split` function, too.
 
@@ -1086,11 +1111,11 @@ following calls::
 The module-level function :func:`re.split` adds the RE to be used as the first
 argument, but is otherwise the same.   ::
 
-   >>> re.split('[\W]+', 'Words, words, words.')
+   >>> re.split(r'[\W]+', 'Words, words, words.')
    ['Words', 'words', 'words', '']
-   >>> re.split('([\W]+)', 'Words, words, words.')
+   >>> re.split(r'([\W]+)', 'Words, words, words.')
    ['Words', ', ', 'words', ', ', 'words', '.', '']
-   >>> re.split('[\W]+', 'Words, words, words.', 1)
+   >>> re.split(r'[\W]+', 'Words, words, words.', 1)
    ['Words', 'words, words.']
 
 
@@ -1098,7 +1123,7 @@ Search and Replace
 ------------------
 
 Another common task is to find all the matches for a pattern, and replace them
-with a different string.  The :meth:`sub` method takes a replacement value,
+with a different string.  The :meth:`~re.pattern.sub` method takes a replacement value,
 which can be either a string or a function, and the string to be processed.
 
 .. method:: .sub(replacement, string[, count=0])
@@ -1112,7 +1137,7 @@ which can be either a string or a functi
    replaced; *count* must be a non-negative integer.  The default value of 0 means
    to replace all occurrences.
 
-Here's a simple example of using the :meth:`sub` method.  It replaces colour
+Here's a simple example of using the :meth:`~re.pattern.sub` method.  It replaces colour
 names with the word ``colour``::
 
    >>> p = re.compile('(blue|white|red)')
@@ -1121,7 +1146,7 @@ names with the word ``colour``::
    >>> p.sub('colour', 'blue socks and red shoes', count=1)
    'colour socks and red shoes'
 
-The :meth:`subn` method does the same work, but returns a 2-tuple containing the
+The :meth:`~re.pattern.subn` method does the same work, but returns a 2-tuple containing the
 new string value and the number of replacements  that were performed::
 
    >>> p = re.compile('(blue|white|red)')
@@ -1206,24 +1231,24 @@ Use String Methods
 
 Sometimes using the :mod:`re` module is a mistake.  If you're matching a fixed
 string, or a single character class, and you're not using any :mod:`re` features
-such as the :const:`IGNORECASE` flag, then the full power of regular expressions
+such as the :const:`~re.IGNORECASE` flag, then the full power of regular expressions
 may not be required. Strings have several methods for performing operations with
 fixed strings and they're usually much faster, because the implementation is a
 single small C loop that's been optimized for the purpose, instead of the large,
 more generalized regular expression engine.
 
 One example might be replacing a single fixed string with another one; for
-example, you might replace ``word`` with ``deed``.  ``re.sub()`` seems like the
-function to use for this, but consider the :meth:`replace` method.  Note that
-:func:`replace` will also replace ``word`` inside words, turning ``swordfish``
+example, you might replace ``word`` with ``deed``.  :func:`re.sub` seems like the
+function to use for this, but consider the :meth:`~str.replace` method.  Note that
+:meth:`!replace` will also replace ``word`` inside words, turning ``swordfish``
 into ``sdeedfish``, but the  naive RE ``word`` would have done that, too.  (To
 avoid performing the substitution on parts of words, the pattern would have to
 be ``\bword\b``, in order to require that ``word`` have a word boundary on
-either side.  This takes the job beyond  :meth:`replace`'s abilities.)
+either side.  This takes the job beyond  :meth:`!replace`'s abilities.)
 
 Another common task is deleting every occurrence of a single character from a
 string or replacing it with another single character.  You might do this with
-something like ``re.sub('\n', ' ', S)``, but :meth:`translate` is capable of
+something like ``re.sub('\n', ' ', S)``, but :meth:`~str.translate` is capable of
 doing both tasks and will be faster than any regular expression operation can
 be.
 
@@ -1234,18 +1259,18 @@ can be solved with a faster and simpler
 match() versus search()
 -----------------------
 
-The :func:`match` function only checks if the RE matches at the beginning of the
-string while :func:`search` will scan forward through the string for a match.
-It's important to keep this distinction in mind.  Remember,  :func:`match` will
+The :func:`~re.match` function only checks if the RE matches at the beginning of the
+string while :func:`~re.search` will scan forward through the string for a match.
+It's important to keep this distinction in mind.  Remember,  :func:`!match` will
 only report a successful match which will start at 0; if the match wouldn't
-start at zero,  :func:`match` will *not* report it. ::
+start at zero,  :func:`!match` will *not* report it. ::
 
    >>> print(re.match('super', 'superstition').span())
    (0, 5)
    >>> print(re.match('super', 'insuperable'))
    None
 
-On the other hand, :func:`search` will scan forward through the string,
+On the other hand, :func:`~re.search` will scan forward through the string,
 reporting the first match it finds. ::
 
    >>> print(re.search('super', 'superstition').span())
@@ -1284,12 +1309,12 @@ doesn't work because of the greedy natur
    >>> print(re.match('<.*>', s).group())
    <html><head><title>Title</title>
 
-The RE matches the ``'<'`` in ``<html>``, and the ``.*`` consumes the rest of
+The RE matches the ``'<'`` in ``'<html>'``, and the ``.*`` consumes the rest of
 the string.  There's still more left in the RE, though, and the ``>`` can't
 match at the end of the string, so the regular expression engine has to
 backtrack character by character until it finds a match for the ``>``.   The
-final match extends from the ``'<'`` in ``<html>`` to the ``'>'`` in
-``</title>``, which isn't what you want.
+final match extends from the ``'<'`` in ``'<html>'`` to the ``'>'`` in
+``'</title>'``, which isn't what you want.
 
 In this case, the solution is to use the non-greedy qualifiers ``*?``, ``+?``,
 ``??``, or ``{m,n}?``, which match as *little* text as possible.  In the above
@@ -1315,7 +1340,7 @@ notation, but they're not terribly reada
 become lengthy collections of backslashes, parentheses, and metacharacters,
 making them difficult to read and understand.
 
-For such REs, specifying the ``re.VERBOSE`` flag when compiling the regular
+For such REs, specifying the :const:`re.VERBOSE` flag when compiling the regular
 expression can be helpful, because it allows you to format the regular
 expression more clearly.
 
@@ -1354,5 +1379,5 @@ Friedl's Mastering Regular Expressions,
 it exclusively concentrates on Perl and Java's flavours of regular expressions,
 and doesn't contain any Python material at all, so it won't be useful as a
 reference for programming in Python.  (The first edition covered Python's
-now-removed :mod:`regex` module, which won't help you much.)  Consider checking
+now-removed :mod:`!regex` module, which won't help you much.)  Consider checking
 it out from your library.
diff -urpN Python-3.6.3/Doc/howto/unicode.rst Python-3.6.5/Doc/howto/unicode.rst
--- Python-3.6.3/Doc/howto/unicode.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/howto/unicode.rst	2018-03-28 11:19:31.000000000 +0200
@@ -463,7 +463,7 @@ The string in this example has the numbe
 Arabic numerals::
 
    import re
-   p = re.compile('\d+')
+   p = re.compile(r'\d+')
 
    s = "Over \u0e55\u0e57 57 flavours"
    m = p.search(s)
diff -urpN Python-3.6.3/Doc/includes/email-alternative.py Python-3.6.5/Doc/includes/email-alternative.py
--- Python-3.6.3/Doc/includes/email-alternative.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/includes/email-alternative.py	2018-03-28 11:19:31.000000000 +0200
@@ -32,7 +32,7 @@ msg.add_alternative("""\
   <body>
     <p>Salut!</p>
     <p>Cela ressemble à un excellent
-        <a href="http://www.yummly.com/recipe/Roasted-Asparagus-Epicurious-203718>
+        <a href="http://www.yummly.com/recipe/Roasted-Asparagus-Epicurious-203718">
             recipie
         </a> déjeuner.
     </p>
diff -urpN Python-3.6.3/Doc/includes/email-read-alternative.py Python-3.6.5/Doc/includes/email-read-alternative.py
--- Python-3.6.3/Doc/includes/email-read-alternative.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/includes/email-read-alternative.py	2018-03-28 11:19:31.000000000 +0200
@@ -21,7 +21,7 @@ print('To:', msg['to'])
 print('From:', msg['from'])
 print('Subject:', msg['subject'])
 
-# If we want to print a priview of the message content, we can extract whatever
+# If we want to print a preview of the message content, we can extract whatever
 # the least formatted payload is and print the first three lines.  Of course,
 # if the message has no plain text part printing the first three lines of html
 # is probably useless, but this is just a conceptual example.
diff -urpN Python-3.6.3/Doc/includes/sqlite3/load_extension.py Python-3.6.5/Doc/includes/sqlite3/load_extension.py
--- Python-3.6.3/Doc/includes/sqlite3/load_extension.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/includes/sqlite3/load_extension.py	2018-03-28 11:19:31.000000000 +0200
@@ -11,7 +11,7 @@ con.execute("select load_extension('./ft
 # alternatively you can load the extension using an API call:
 # con.load_extension("./fts3.so")
 
-# disable extension laoding again
+# disable extension loading again
 con.enable_load_extension(False)
 
 # example from SQLite wiki
diff -urpN Python-3.6.3/Doc/library/2to3.rst Python-3.6.5/Doc/library/2to3.rst
--- Python-3.6.3/Doc/library/2to3.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/2to3.rst	2018-03-28 11:19:31.000000000 +0200
@@ -288,7 +288,8 @@ and off individually.  They are describe
 
    Fixes duplicate types in the second argument of :func:`isinstance`.  For
    example, ``isinstance(x, (int, int))`` is converted to ``isinstance(x,
-   (int))``.
+   int)`` and ``isinstance(x, (int, float, int))`` is converted to
+   ``isinstance(x, (int, float))``.
 
 .. 2to3fixer:: itertools_imports
 
diff -urpN Python-3.6.3/Doc/library/abc.rst Python-3.6.5/Doc/library/abc.rst
--- Python-3.6.3/Doc/library/abc.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/abc.rst	2018-03-28 11:19:31.000000000 +0200
@@ -160,7 +160,7 @@ a helper class :class:`ABC` to alternati
 
 
 
-The :mod:`abc` module also provides the following decorators:
+The :mod:`abc` module also provides the following decorator:
 
 .. decorator:: abstractmethod
 
@@ -236,8 +236,15 @@ The :mod:`abc` module also provides the
       multiple-inheritance.
 
 
+The :mod:`abc` module also supports the following legacy decorators:
+
 .. decorator:: abstractclassmethod
 
+   .. versionadded:: 3.2
+   .. deprecated:: 3.3
+       It is now possible to use :class:`classmethod` with
+       :func:`abstractmethod`, making this decorator redundant.
+
    A subclass of the built-in :func:`classmethod`, indicating an abstract
    classmethod. Otherwise it is similar to :func:`abstractmethod`.
 
@@ -251,14 +258,14 @@ The :mod:`abc` module also provides the
           def my_abstract_classmethod(cls, ...):
               ...
 
+
+.. decorator:: abstractstaticmethod
+
    .. versionadded:: 3.2
    .. deprecated:: 3.3
-       It is now possible to use :class:`classmethod` with
+       It is now possible to use :class:`staticmethod` with
        :func:`abstractmethod`, making this decorator redundant.
 
-
-.. decorator:: abstractstaticmethod
-
    A subclass of the built-in :func:`staticmethod`, indicating an abstract
    staticmethod. Otherwise it is similar to :func:`abstractmethod`.
 
@@ -272,23 +279,17 @@ The :mod:`abc` module also provides the
           def my_abstract_staticmethod(...):
               ...
 
-   .. versionadded:: 3.2
-   .. deprecated:: 3.3
-       It is now possible to use :class:`staticmethod` with
-       :func:`abstractmethod`, making this decorator redundant.
 
+.. decorator:: abstractproperty
 
-.. decorator:: abstractproperty(fget=None, fset=None, fdel=None, doc=None)
+   .. deprecated:: 3.3
+       It is now possible to use :class:`property`, :meth:`property.getter`,
+       :meth:`property.setter` and :meth:`property.deleter` with
+       :func:`abstractmethod`, making this decorator redundant.
 
    A subclass of the built-in :func:`property`, indicating an abstract
    property.
 
-   Using this function requires that the class's metaclass is :class:`ABCMeta`
-   or is derived from it. A class that has a metaclass derived from
-   :class:`ABCMeta` cannot be instantiated unless all of its abstract methods
-   and properties are overridden. The abstract properties can be called using
-   any of the normal 'super' call mechanisms.
-
    This special case is deprecated, as the :func:`property` decorator
    is now correctly identified as abstract when applied to an abstract
    method::
@@ -322,12 +323,6 @@ The :mod:`abc` module also provides the
               ...
 
 
-   .. deprecated:: 3.3
-       It is now possible to use :class:`property`, :meth:`property.getter`,
-       :meth:`property.setter` and :meth:`property.deleter` with
-       :func:`abstractmethod`, making this decorator redundant.
-
-
 The :mod:`abc` module also provides the following functions:
 
 .. function:: get_cache_token()
diff -urpN Python-3.6.3/Doc/library/ast.rst Python-3.6.5/Doc/library/ast.rst
--- Python-3.6.3/Doc/library/ast.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/ast.rst	2018-03-28 11:19:31.000000000 +0200
@@ -113,6 +113,11 @@ and classes for traversing abstract synt
    Parse the source into an AST node.  Equivalent to ``compile(source,
    filename, mode, ast.PyCF_ONLY_AST)``.
 
+   .. warning::
+      It is possible to crash the Python interpreter with a
+      sufficiently large/complex string due to stack depth limitations
+      in Python's AST compiler.
+
 
 .. function:: literal_eval(node_or_string)
 
@@ -126,6 +131,11 @@ and classes for traversing abstract synt
    capable of evaluating arbitrarily complex expressions, for example involving
    operators or indexing.
 
+   .. warning::
+      It is possible to crash the Python interpreter with a
+      sufficiently large/complex string due to stack depth limitations
+      in Python's AST compiler.
+
    .. versionchanged:: 3.2
       Now allows bytes and set literals.
 
diff -urpN Python-3.6.3/Doc/library/asyncio-dev.rst Python-3.6.5/Doc/library/asyncio-dev.rst
--- Python-3.6.3/Doc/library/asyncio-dev.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/asyncio-dev.rst	2018-03-28 11:19:31.000000000 +0200
@@ -209,9 +209,9 @@ The fix is to call the :func:`ensure_fut
 Detect exceptions never consumed
 --------------------------------
 
-Python usually calls :func:`sys.displayhook` on unhandled exceptions. If
+Python usually calls :func:`sys.excepthook` on unhandled exceptions. If
 :meth:`Future.set_exception` is called, but the exception is never consumed,
-:func:`sys.displayhook` is not called. Instead, :ref:`a log is emitted
+:func:`sys.excepthook` is not called. Instead, :ref:`a log is emitted
 <asyncio-logger>` when the future is deleted by the garbage collector, with the
 traceback where the exception was raised.
 
diff -urpN Python-3.6.3/Doc/library/asyncio-eventloop.rst Python-3.6.5/Doc/library/asyncio-eventloop.rst
--- Python-3.6.3/Doc/library/asyncio-eventloop.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/asyncio-eventloop.rst	2018-03-28 11:19:31.000000000 +0200
@@ -500,6 +500,9 @@ Creating listening connections
    This method is a :ref:`coroutine <coroutine>`.  When completed, the
    coroutine returns a ``(transport, protocol)`` pair.
 
+   .. versionadded:: 3.5.3
+
+
 Watch file descriptors
 ----------------------
 
diff -urpN Python-3.6.3/Doc/library/asyncio-eventloops.rst Python-3.6.5/Doc/library/asyncio-eventloops.rst
--- Python-3.6.3/Doc/library/asyncio-eventloops.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/asyncio-eventloops.rst	2018-03-28 11:19:31.000000000 +0200
@@ -148,10 +148,9 @@ process based on the calling context. A
 :class:`AbstractEventLoopPolicy` interface.
 
 For most users of :mod:`asyncio`, policies never have to be dealt with
-explicitly, since the default global policy is sufficient.
+explicitly, since the default global policy is sufficient (see below).
 
-The default policy defines context as the current thread, and manages an event
-loop per thread that interacts with :mod:`asyncio`. The module-level functions
+The module-level functions
 :func:`get_event_loop` and :func:`set_event_loop` provide convenient access to
 event loops managed by the default policy.
 
@@ -189,6 +188,13 @@ An event loop policy must implement the
       context, :meth:`set_event_loop` must be called explicitly.
 
 
+The default policy defines context as the current thread, and manages an event
+loop per thread that interacts with :mod:`asyncio`.  If the current thread
+doesn't already have an event loop associated with it, the default policy's
+:meth:`~AbstractEventLoopPolicy.get_event_loop` method creates one when
+called from the main thread, but raises :exc:`RuntimeError` otherwise.
+
+
 Access to the global loop policy
 --------------------------------
 
@@ -200,3 +206,24 @@ Access to the global loop policy
 
    Set the current event loop policy. If *policy* is ``None``, the default
    policy is restored.
+
+
+Customizing the event loop policy
+---------------------------------
+
+To implement a new event loop policy, it is recommended you subclass the
+concrete default event loop policy :class:`DefaultEventLoopPolicy`
+and override the methods for which you want to change behavior, for example::
+
+    class MyEventLoopPolicy(asyncio.DefaultEventLoopPolicy):
+
+        def get_event_loop(self):
+            """Get the event loop.
+
+            This may be None or an instance of EventLoop.
+            """
+            loop = super().get_event_loop()
+            # Do something with loop ...
+            return loop
+
+    asyncio.set_event_loop_policy(MyEventLoopPolicy())
diff -urpN Python-3.6.3/Doc/library/asyncio-task.rst Python-3.6.5/Doc/library/asyncio-task.rst
--- Python-3.6.3/Doc/library/asyncio-task.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/asyncio-task.rst	2018-03-28 11:19:31.000000000 +0200
@@ -216,7 +216,7 @@ Future
      raise an exception when the future isn't done yet.
 
    - Callbacks registered with :meth:`add_done_callback` are always called
-     via the event loop's :meth:`~AbstractEventLoop.call_soon_threadsafe`.
+     via the event loop's :meth:`~AbstractEventLoop.call_soon`.
 
    - This class is not compatible with the :func:`~concurrent.futures.wait` and
      :func:`~concurrent.futures.as_completed` functions in the
@@ -630,7 +630,7 @@ Task functions
 
    This function is a :ref:`coroutine <coroutine>`.
 
-.. function:: shield(arg, \*, loop=None)
+.. coroutinefunction:: shield(arg, \*, loop=None)
 
    Wait for a future, shielding it from cancellation.
 
diff -urpN Python-3.6.3/Doc/library/atexit.rst Python-3.6.5/Doc/library/atexit.rst
--- Python-3.6.3/Doc/library/atexit.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/atexit.rst	2018-03-28 11:19:31.000000000 +0200
@@ -21,7 +21,7 @@ program is killed by a signal not handle
 internal error is detected, or when :func:`os._exit` is called.
 
 
-.. function:: register(func, *args, **kargs)
+.. function:: register(func, *args, **kwargs)
 
    Register *func* as a function to be executed at termination.  Any optional
    arguments that are to be passed to *func* must be passed as arguments to
diff -urpN Python-3.6.3/Doc/library/base64.rst Python-3.6.5/Doc/library/base64.rst
--- Python-3.6.3/Doc/library/base64.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/base64.rst	2018-03-28 11:19:31.000000000 +0200
@@ -218,14 +218,6 @@ The modern interface provides:
    .. versionadded:: 3.4
 
 
-.. note::
-   Both Base85 and Ascii85 have an expansion factor of 5 to 4 (5 Base85 or
-   Ascii85 characters can encode 4 binary bytes), while the better-known
-   Base64 has an expansion factor of 6 to 4.  They are therefore more
-   efficient when space expensive.  They differ by details such as the
-   character map used for encoding.
-
-
 The legacy interface:
 
 .. function:: decode(input, output)
diff -urpN Python-3.6.3/Doc/library/codecs.rst Python-3.6.5/Doc/library/codecs.rst
--- Python-3.6.3/Doc/library/codecs.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/codecs.rst	2018-03-28 11:19:31.000000000 +0200
@@ -802,7 +802,7 @@ The design is such that one can use the
 :func:`lookup` function to construct the instance.
 
 
-.. class:: StreamReaderWriter(stream, Reader, Writer, errors)
+.. class:: StreamReaderWriter(stream, Reader, Writer, errors='strict')
 
    Creates a :class:`StreamReaderWriter` instance. *stream* must be a file-like
    object. *Reader* and *Writer* must be factory functions or classes providing the
@@ -826,7 +826,7 @@ The design is such that one can use the
 :func:`lookup` function to construct the instance.
 
 
-.. class:: StreamRecoder(stream, encode, decode, Reader, Writer, errors)
+.. class:: StreamRecoder(stream, encode, decode, Reader, Writer, errors='strict')
 
    Creates a :class:`StreamRecoder` instance which implements a two-way conversion:
    *encode* and *decode* work on the frontend — the data visible to
@@ -977,10 +977,14 @@ e.g. ``'utf-8'`` is a valid alias for th
 
    Some common encodings can bypass the codecs lookup machinery to
    improve performance.  These optimization opportunities are only
-   recognized by CPython for a limited set of aliases: utf-8, utf8,
-   latin-1, latin1, iso-8859-1, mbcs (Windows only), ascii, utf-16,
-   and utf-32.  Using alternative spellings for these encodings may
-   result in slower execution.
+   recognized by CPython for a limited set of (case insensitive)
+   aliases: utf-8, utf8, latin-1, latin1, iso-8859-1, iso8859-1, mbcs
+   (Windows only), ascii, us-ascii, utf-16, utf16, utf-32, utf32, and
+   the same using underscores instead of dashes. Using alternative
+   aliases for these encodings may result in slower execution.
+
+   .. versionchanged:: 3.6
+      Optimization opportunity recognized for us-ascii.
 
 Many of the character sets support the same languages. They vary in individual
 characters (e.g. whether the EURO SIGN is supported or not), and in the
diff -urpN Python-3.6.3/Doc/library/collections.abc.rst Python-3.6.5/Doc/library/collections.abc.rst
--- Python-3.6.3/Doc/library/collections.abc.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/collections.abc.rst	2018-03-28 11:19:31.000000000 +0200
@@ -107,7 +107,12 @@ ABC                        Inherits from
 .. class:: Iterable
 
    ABC for classes that provide the :meth:`__iter__` method.
-   See also the definition of :term:`iterable`.
+
+   Checking ``isinstance(obj, Iterable)`` detects classes that are registered
+   as :class:`Iterable` or that have an :meth:`__iter__` method, but it does
+   not detect classes that iterate with the :meth:`__getitem__` method.
+   The only reliable way to determine whether an object is :term:`iterable`
+   is to call ``iter(obj)``.
 
 .. class:: Collection
 
diff -urpN Python-3.6.3/Doc/library/collections.rst Python-3.6.5/Doc/library/collections.rst
--- Python-3.6.3/Doc/library/collections.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/collections.rst	2018-03-28 11:19:31.000000000 +0200
@@ -509,11 +509,14 @@ or subtracting from an empty counter.
         .. versionadded:: 3.2
 
 
-    .. method:: rotate(n)
+    .. method:: rotate(n=1)
 
-        Rotate the deque *n* steps to the right.  If *n* is negative, rotate to
-        the left.  Rotating one step to the right is equivalent to:
-        ``d.appendleft(d.pop())``.
+        Rotate the deque *n* steps to the right.  If *n* is negative, rotate
+        to the left.
+
+        When the deque is not empty, rotating one step to the right is equivalent
+        to ``d.appendleft(d.pop())``, and rotating one step to the left is
+        equivalent to ``d.append(d.popleft())``.
 
 
     Deque objects also provide one read-only attribute:
diff -urpN Python-3.6.3/Doc/library/concurrent.futures.rst Python-3.6.5/Doc/library/concurrent.futures.rst
--- Python-3.6.3/Doc/library/concurrent.futures.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/concurrent.futures.rst	2018-03-28 11:19:31.000000000 +0200
@@ -40,21 +40,29 @@ Executor Objects
 
     .. method:: map(func, *iterables, timeout=None, chunksize=1)
 
-       Equivalent to :func:`map(func, *iterables) <map>` except *func* is executed
-       asynchronously and several calls to *func* may be made concurrently.  The
-       returned iterator raises a :exc:`concurrent.futures.TimeoutError` if
-       :meth:`~iterator.__next__` is called and the result isn't available
+       Similar to :func:`map(func, *iterables) <map>` except:
+
+       * the *iterables* are collected immediately rather than lazily;
+
+       * *func* is executed asynchronously and several calls to
+         *func* may be made concurrently.
+
+       The returned iterator raises a :exc:`concurrent.futures.TimeoutError`
+       if :meth:`~iterator.__next__` is called and the result isn't available
        after *timeout* seconds from the original call to :meth:`Executor.map`.
        *timeout* can be an int or a float.  If *timeout* is not specified or
-       ``None``, there is no limit to the wait time.  If a call raises an
-       exception, then that exception will be raised when its value is
-       retrieved from the iterator. When using :class:`ProcessPoolExecutor`, this
-       method chops *iterables* into a number of chunks which it submits to the
-       pool as separate tasks. The (approximate) size of these chunks can be
-       specified by setting *chunksize* to a positive integer. For very long
-       iterables, using a large value for *chunksize* can significantly improve
-       performance compared to the default size of 1. With :class:`ThreadPoolExecutor`,
-       *chunksize* has no effect.
+       ``None``, there is no limit to the wait time.
+
+       If a *func* call raises an exception, then that exception will be
+       raised when its value is retrieved from the iterator.
+
+       When using :class:`ProcessPoolExecutor`, this method chops *iterables*
+       into a number of chunks which it submits to the pool as separate
+       tasks.  The (approximate) size of these chunks can be specified by
+       setting *chunksize* to a positive integer.  For very long iterables,
+       using a large value for *chunksize* can significantly improve
+       performance compared to the default size of 1.  With
+       :class:`ThreadPoolExecutor`, *chunksize* has no effect.
 
        .. versionchanged:: 3.5
           Added the *chunksize* argument.
diff -urpN Python-3.6.3/Doc/library/constants.rst Python-3.6.5/Doc/library/constants.rst
--- Python-3.6.3/Doc/library/constants.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/constants.rst	2018-03-28 11:19:31.000000000 +0200
@@ -86,10 +86,14 @@ should not be used in programs.
    specified exit code.
 
 .. data:: copyright
-          license
           credits
 
-   Objects that when printed, print a message like "Type license() to see the
-   full license text", and when called, display the corresponding text in a
+   Objects that when printed or called, print the text of copyright or
+   credits, respectively.
+
+.. data:: license
+
+   Object that when printed, prints the message "Type license() to see the
+   full license text", and when called, displays the full license text in a
    pager-like fashion (one screen at a time).
 
diff -urpN Python-3.6.3/Doc/library/csv.rst Python-3.6.5/Doc/library/csv.rst
--- Python-3.6.3/Doc/library/csv.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/csv.rst	2018-03-28 11:19:31.000000000 +0200
@@ -172,7 +172,7 @@ The :mod:`csv` module defines the follow
    A short usage example::
 
        >>> import csv
-       >>> with open('names.csv') as csvfile:
+       >>> with open('names.csv', newline='') as csvfile:
        ...     reader = csv.DictReader(csvfile)
        ...     for row in reader:
        ...         print(row['first_name'], row['last_name'])
@@ -211,7 +211,7 @@ The :mod:`csv` module defines the follow
 
        import csv
 
-       with open('names.csv', 'w') as csvfile:
+       with open('names.csv', 'w', newline='') as csvfile:
            fieldnames = ['first_name', 'last_name']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
 
@@ -270,7 +270,7 @@ The :mod:`csv` module defines the follow
 
 An example for :class:`Sniffer` use::
 
-   with open('example.csv') as csvfile:
+   with open('example.csv', newline='') as csvfile:
        dialect = csv.Sniffer().sniff(csvfile.read(1024))
        csvfile.seek(0)
        reader = csv.reader(csvfile, dialect)
diff -urpN Python-3.6.3/Doc/library/curses.ascii.rst Python-3.6.5/Doc/library/curses.ascii.rst
--- Python-3.6.3/Doc/library/curses.ascii.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/curses.ascii.rst	2018-03-28 11:19:31.000000000 +0200
@@ -176,14 +176,12 @@ C library:
 
    Checks for a non-ASCII character (ordinal values 0x80 and above).
 
-These functions accept either integers or strings; when the argument is a
+These functions accept either integers or single-character strings; when the argument is a
 string, it is first converted using the built-in function :func:`ord`.
 
-Note that all these functions check ordinal bit values derived from the  first
+Note that all these functions check ordinal bit values derived from the
 character of the string you pass in; they do not actually know anything about
-the host machine's character encoding.  For functions  that know about the
-character encoding (and handle internationalization properly) see the
-:mod:`string` module.
+the host machine's character encoding.
 
 The following two functions take either a single-character string or integer
 byte value; they return a value of the same type.
diff -urpN Python-3.6.3/Doc/library/curses.panel.rst Python-3.6.5/Doc/library/curses.panel.rst
--- Python-3.6.3/Doc/library/curses.panel.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/curses.panel.rst	2018-03-28 11:19:31.000000000 +0200
@@ -74,7 +74,7 @@ Panel objects have the following methods
 
 .. method:: Panel.hidden()
 
-   Returns true if the panel is hidden (not visible), false otherwise.
+   Returns ``True`` if the panel is hidden (not visible), ``False`` otherwise.
 
 
 .. method:: Panel.hide()
diff -urpN Python-3.6.3/Doc/library/curses.rst Python-3.6.5/Doc/library/curses.rst
--- Python-3.6.3/Doc/library/curses.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/curses.rst	2018-03-28 11:19:31.000000000 +0200
@@ -21,6 +21,14 @@ Linux and the BSD variants of Unix.
 
 .. note::
 
+   Whenever the documentation mentions a *character* it can be specified
+   as an integer, a one-character Unicode string or a one-byte byte string.
+
+   Whenever the documentation mentions a *character string* it can be specified
+   as a Unicode string or a byte string.
+
+.. note::
+
    Since version 5.4, the ncurses library decides how to interpret non-ASCII data
    using the ``nl_langinfo`` function.  That means that you have to call
    :func:`locale.setlocale` in the application and encode Unicode strings
@@ -104,8 +112,8 @@ The module :mod:`curses` defines the fol
 .. function:: color_content(color_number)
 
    Return the intensity of the red, green, and blue (RGB) components in the color
-   *color_number*, which must be between ``0`` and :const:`COLORS`.  A 3-tuple is
-   returned, containing the R,G,B values for the given color, which will be between
+   *color_number*, which must be between ``0`` and :const:`COLORS`.  Return a 3-tuple,
+   containing the R,G,B values for the given color, which will be between
    ``0`` (no component) and ``1000`` (maximum amount of component).
 
 
@@ -119,9 +127,9 @@ The module :mod:`curses` defines the fol
 
 .. function:: curs_set(visibility)
 
-   Set the cursor state.  *visibility* can be set to 0, 1, or 2, for invisible,
-   normal, or very visible.  If the terminal supports the visibility requested, the
-   previous cursor state is returned; otherwise, an exception is raised.  On many
+   Set the cursor state.  *visibility* can be set to ``0``, ``1``, or ``2``, for invisible,
+   normal, or very visible.  If the terminal supports the visibility requested, return the
+   previous cursor state; otherwise raise an exception.  On many
    terminals, the "visible" mode is an underline cursor and the "very visible" mode
    is a block cursor.
 
@@ -154,12 +162,12 @@ The module :mod:`curses` defines the fol
    representing the desired next state.  The :func:`doupdate` ground updates the
    physical screen to match the virtual screen.
 
-   The virtual screen may be updated by a :meth:`noutrefresh` call after write
-   operations such as :meth:`addstr` have been performed on a window.  The normal
-   :meth:`refresh` call is simply :meth:`noutrefresh` followed by :func:`doupdate`;
+   The virtual screen may be updated by a :meth:`~window.noutrefresh` call after write
+   operations such as :meth:`~window.addstr` have been performed on a window.  The normal
+   :meth:`~window.refresh` call is simply :meth:`!noutrefresh` followed by :func:`!doupdate`;
    if you have to update multiple windows, you can speed performance and perhaps
-   reduce screen flicker by issuing :meth:`noutrefresh` calls on all windows,
-   followed by a single :func:`doupdate`.
+   reduce screen flicker by issuing :meth:`!noutrefresh` calls on all windows,
+   followed by a single :func:`!doupdate`.
 
 
 .. function:: echo()
@@ -175,7 +183,7 @@ The module :mod:`curses` defines the fol
 
 .. function:: erasechar()
 
-   Return the user's current erase character.  Under Unix operating systems this
+   Return the user's current erase character as a one-byte bytes object.  Under Unix operating systems this
    is a property of the controlling tty of the curses program, and is not set by
    the curses library itself.
 
@@ -183,9 +191,9 @@ The module :mod:`curses` defines the fol
 .. function:: filter()
 
    The :func:`.filter` routine, if used, must be called before :func:`initscr` is
-   called.  The effect is that, during those calls, :envvar:`LINES` is set to 1; the
-   capabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and the home
-   string is set to the value of cr. The effect is that the cursor is confined to
+   called.  The effect is that, during those calls, :envvar:`LINES` is set to ``1``; the
+   capabilities ``clear``, ``cup``, ``cud``, ``cud1``, ``cuu1``, ``cuu``, ``vpa`` are disabled; and the ``home``
+   string is set to the value of ``cr``. The effect is that the cursor is confined to
    the current line, and so are screen updates.  This may be used for enabling
    character-at-a-time  line editing without touching the rest of the screen.
 
@@ -205,7 +213,7 @@ The module :mod:`curses` defines the fol
 
 .. function:: getmouse()
 
-   After :meth:`getch` returns :const:`KEY_MOUSE` to signal a mouse event, this
+   After :meth:`~window.getch` returns :const:`KEY_MOUSE` to signal a mouse event, this
    method should be call to retrieve the queued mouse event, represented as a
    5-tuple ``(id, x, y, z, bstate)``. *id* is an ID value used to distinguish
    multiple devices, and *x*, *y*, *z* are the event's coordinates.  (*z* is
@@ -219,8 +227,8 @@ The module :mod:`curses` defines the fol
 
 .. function:: getsyx()
 
-   Return the current coordinates of the virtual screen cursor in y and x.  If
-   leaveok is currently true, then -1,-1 is returned.
+   Return the current coordinates of the virtual screen cursor as a tuple
+   ``(y, x)``.  If :meth:`leaveok <window.leaveok>` is currently ``True``, then return ``(-1, -1)``.
 
 
 .. function:: getwin(file)
@@ -260,7 +268,7 @@ The module :mod:`curses` defines the fol
 
    Used for half-delay mode, which is similar to cbreak mode in that characters
    typed by the user are immediately available to the program. However, after
-   blocking for *tenths* tenths of seconds, an exception is raised if nothing has
+   blocking for *tenths* tenths of seconds, raise an exception if nothing has
    been typed.  The value of *tenths* must be a number between ``1`` and ``255``.  Use
    :func:`nocbreak` to leave half-delay mode.
 
@@ -273,7 +281,7 @@ The module :mod:`curses` defines the fol
    :const:`COLORS`.  Each of *r*, *g*, *b*, must be a value between ``0`` and
    ``1000``.  When :func:`init_color` is used, all occurrences of that color on the
    screen immediately change to the new definition.  This function is a no-op on
-   most terminals; it is active only if :func:`can_change_color` returns ``1``.
+   most terminals; it is active only if :func:`can_change_color` returns ``True``.
 
 
 .. function:: init_pair(pair_number, fg, bg)
@@ -313,32 +321,32 @@ The module :mod:`curses` defines the fol
 
 .. function:: keyname(k)
 
-   Return the name of the key numbered *k*.  The name of a key generating printable
+   Return the name of the key numbered *k* as a bytes object.  The name of a key generating printable
    ASCII character is the key's character.  The name of a control-key combination
-   is a two-character string consisting of a caret followed by the corresponding
+   is a two-byte bytes object consisting of a caret (``b'^'``) followed by the corresponding
    printable ASCII character.  The name of an alt-key combination (128--255) is a
-   string consisting of the prefix 'M-' followed by the name of the corresponding
+   bytes object consisting of the prefix ``b'M-'`` followed by the name of the corresponding
    ASCII character.
 
 
 .. function:: killchar()
 
-   Return the user's current line kill character. Under Unix operating systems
+   Return the user's current line kill character as a one-byte bytes object. Under Unix operating systems
    this is a property of the controlling tty of the curses program, and is not set
    by the curses library itself.
 
 
 .. function:: longname()
 
-   Return a string containing the terminfo long name field describing the current
+   Return a bytes object containing the terminfo long name field describing the current
    terminal.  The maximum length of a verbose description is 128 characters.  It is
    defined only after the call to :func:`initscr`.
 
 
-.. function:: meta(yes)
+.. function:: meta(flag)
 
-   If *yes* is 1, allow 8-bit characters to be input. If *yes* is 0,  allow only
-   7-bit chars.
+   If *flag* is ``True``, allow 8-bit characters to be input.  If
+   *flag* is ``False``,  allow only 7-bit chars.
 
 
 .. function:: mouseinterval(interval)
@@ -352,7 +360,7 @@ The module :mod:`curses` defines the fol
 
    Set the mouse events to be reported, and return a tuple ``(availmask,
    oldmask)``.   *availmask* indicates which of the specified mouse events can be
-   reported; on complete failure it returns 0.  *oldmask* is the previous value of
+   reported; on complete failure it returns ``0``.  *oldmask* is the previous value of
    the given window's mouse event mask.  If this function is never called, no mouse
    events are ever reported.
 
@@ -365,13 +373,13 @@ The module :mod:`curses` defines the fol
 .. function:: newpad(nlines, ncols)
 
    Create and return a pointer to a new pad data structure with the given number
-   of lines and columns.  A pad is returned as a window object.
+   of lines and columns.  Return a pad as a window object.
 
    A pad is like a window, except that it is not restricted by the screen size, and
    is not necessarily associated with a particular part of the screen.  Pads can be
    used when a large window is needed, and only a part of the window will be on the
    screen at one time.  Automatic refreshes of pads (such as from scrolling or
-   echoing of input) do not occur.  The :meth:`refresh` and :meth:`noutrefresh`
+   echoing of input) do not occur.  The :meth:`~window.refresh` and :meth:`~window.noutrefresh`
    methods of a pad require 6 arguments to specify the part of the pad to be
    displayed and the location on the screen to be used for the display. The
    arguments are *pminrow*, *pmincol*, *sminrow*, *smincol*, *smaxrow*, *smaxcol*; the *p*
@@ -419,9 +427,9 @@ The module :mod:`curses` defines the fol
 
 .. function:: noqiflush()
 
-   When the :func:`noqiflush` routine is used, normal flush of input and output queues
-   associated with the INTR, QUIT and SUSP characters will not be done.  You may
-   want to call :func:`noqiflush` in a signal handler if you want output to
+   When the :func:`!noqiflush` routine is used, normal flush of input and output queues
+   associated with the ``INTR``, ``QUIT`` and ``SUSP`` characters will not be done.  You may
+   want to call :func:`!noqiflush` in a signal handler if you want output to
    continue as though the interrupt had not occurred, after the handler exits.
 
 
@@ -442,14 +450,14 @@ The module :mod:`curses` defines the fol
    :func:`color_pair` is the counterpart to this function.
 
 
-.. function:: putp(string)
+.. function:: putp(str)
 
    Equivalent to ``tputs(str, 1, putchar)``; emit the value of a specified
    terminfo capability for the current terminal.  Note that the output of :func:`putp`
    always goes to standard output.
 
 
-.. function:: qiflush( [flag] )
+.. function:: qiflush([flag])
 
    If *flag* is ``False``, the effect is the same as calling :func:`noqiflush`. If
    *flag* is ``True``, or no argument is provided, the queues will be flushed when
@@ -486,7 +494,7 @@ The module :mod:`curses` defines the fol
    Backend function used by :func:`resizeterm`, performing most of the work;
    when resizing the windows, :func:`resize_term` blank-fills the areas that are
    extended.  The calling application should fill in these areas with
-   appropriate data.  The :func:`resize_term` function attempts to resize all
+   appropriate data.  The :func:`!resize_term` function attempts to resize all
    windows.  However, due to the calling convention of pads, it is not possible
    to resize these without additional interaction with the application.
 
@@ -506,16 +514,17 @@ The module :mod:`curses` defines the fol
 
 .. function:: setsyx(y, x)
 
-   Set the virtual screen cursor to *y*, *x*. If *y* and *x* are both -1, then
-   leaveok is set.
+   Set the virtual screen cursor to *y*, *x*. If *y* and *x* are both ``-1``, then
+   :meth:`leaveok <window.leaveok>` is set ``True``.
 
 
-.. function:: setupterm([termstr, fd])
+.. function:: setupterm(term=None, fd=-1)
 
-   Initialize the terminal.  *termstr* is a string giving the terminal name; if
-   omitted, the value of the :envvar:`TERM` environment variable will be used.  *fd* is the
+   Initialize the terminal.  *term* is a string giving
+   the terminal name, or ``None``; if omitted or ``None``, the value of the
+   :envvar:`TERM` environment variable will be used.  *fd* is the
    file descriptor to which any initialization sequences will be sent; if not
-   supplied, the file descriptor for ``sys.stdout`` will be used.
+   supplied or ``-1``, the file descriptor for ``sys.stdout`` will be used.
 
 
 .. function:: start_color()
@@ -540,13 +549,14 @@ The module :mod:`curses` defines the fol
 
 .. function:: termname()
 
-   Return the value of the environment variable :envvar:`TERM`, truncated to 14 characters.
+   Return the value of the environment variable :envvar:`TERM`, as a bytes object,
+   truncated to 14 characters.
 
 
 .. function:: tigetflag(capname)
 
    Return the value of the Boolean capability corresponding to the terminfo
-   capability name *capname*.  The value ``-1`` is returned if *capname* is not a
+   capability name *capname* as an integer.  Return the value ``-1`` if *capname* is not a
    Boolean capability, or ``0`` if it is canceled or absent from the terminal
    description.
 
@@ -554,7 +564,7 @@ The module :mod:`curses` defines the fol
 .. function:: tigetnum(capname)
 
    Return the value of the numeric capability corresponding to the terminfo
-   capability name *capname*.  The value ``-2`` is returned if *capname* is not a
+   capability name *capname* as an integer.  Return the value ``-2`` if *capname* is not a
    numeric capability, or ``-1`` if it is canceled or absent from the terminal
    description.
 
@@ -562,13 +572,14 @@ The module :mod:`curses` defines the fol
 .. function:: tigetstr(capname)
 
    Return the value of the string capability corresponding to the terminfo
-   capability name *capname*.  ``None`` is returned if *capname* is not a string
-   capability, or is canceled or absent from the terminal description.
+   capability name *capname* as a bytes object.  Return ``None`` if *capname*
+   is not a terminfo "string capability", or is canceled or absent from the
+   terminal description.
 
 
 .. function:: tparm(str[, ...])
 
-   Instantiate the string *str* with the supplied parameters, where *str* should
+   Instantiate the bytes object *str* with the supplied parameters, where *str* should
    be a parameterized string obtained from the terminfo database.  E.g.
    ``tparm(tigetstr("cup"), 5, 3)`` could result in ``b'\033[6;4H'``, the exact
    result depending on terminal type.
@@ -588,18 +599,18 @@ The module :mod:`curses` defines the fol
 
 .. function:: unctrl(ch)
 
-   Return a string which is a printable representation of the character *ch*.
-   Control characters are displayed as a caret followed by the character, for
-   example as ``^C``. Printing characters are left as they are.
+   Return a bytes object which is a printable representation of the character *ch*.
+   Control characters are represented as a caret followed by the character, for
+   example as ``b'^C'``. Printing characters are left as they are.
 
 
 .. function:: ungetch(ch)
 
-   Push *ch* so the next :meth:`getch` will return it.
+   Push *ch* so the next :meth:`~window.getch` will return it.
 
    .. note::
 
-      Only one *ch* can be pushed before :meth:`getch` is called.
+      Only one *ch* can be pushed before :meth:`!getch` is called.
 
 
 .. function:: update_lines_cols()
@@ -611,11 +622,11 @@ The module :mod:`curses` defines the fol
 
 .. function:: unget_wch(ch)
 
-   Push *ch* so the next :meth:`get_wch` will return it.
+   Push *ch* so the next :meth:`~window.get_wch` will return it.
 
    .. note::
 
-      Only one *ch* can be pushed before :meth:`get_wch` is called.
+      Only one *ch* can be pushed before :meth:`!get_wch` is called.
 
    .. versionadded:: 3.3
 
@@ -640,7 +651,7 @@ The module :mod:`curses` defines the fol
 
    Allow use of default values for colors on terminals supporting this feature. Use
    this to support transparency in your application.  The default color is assigned
-   to the color number -1. After calling this function,  ``init_pair(x,
+   to the color number ``-1``. After calling this function,  ``init_pair(x,
    curses.COLOR_RED, -1)`` initializes, for instance, color pair *x* to a red
    foreground color on the default background.
 
@@ -652,7 +663,7 @@ The module :mod:`curses` defines the fol
    this function will restore the terminal to a sane state before re-raising the
    exception and generating a traceback.  The callable object *func* is then passed
    the main window 'stdscr' as its first argument, followed by any other arguments
-   passed to :func:`wrapper`.  Before calling *func*, :func:`wrapper` turns on
+   passed to :func:`!wrapper`.  Before calling *func*, :func:`!wrapper` turns on
    cbreak mode, turns off echo, enables the terminal keypad, and initializes colors
    if the terminal has color support.  On exit (whether normally or by exception)
    it restores cooked mode, turns on echo, and disables the terminal keypad.
@@ -670,13 +681,6 @@ the following methods and attributes:
 .. method:: window.addch(ch[, attr])
             window.addch(y, x, ch[, attr])
 
-   .. note::
-
-      A *character* means a C character (an ASCII code), rather than a Python
-      character (a string of length 1). (This note is true whenever the
-      documentation mentions a character.) The built-in :func:`ord` is handy for
-      conveying strings to codes.
-
    Paint character *ch* at ``(y, x)`` with attributes *attr*, overwriting any
    character previously painter at that location.  By default, the character
    position and attributes are the current settings for the window object.
@@ -685,15 +689,16 @@ the following methods and attributes:
 .. method:: window.addnstr(str, n[, attr])
             window.addnstr(y, x, str, n[, attr])
 
-   Paint at most *n* characters of the  string *str* at ``(y, x)`` with attributes
+   Paint at most *n* characters of the character string *str* at
+   ``(y, x)`` with attributes
    *attr*, overwriting anything previously on the display.
 
 
 .. method:: window.addstr(str[, attr])
             window.addstr(y, x, str[, attr])
 
-   Paint the string *str* at ``(y, x)`` with attributes *attr*, overwriting
-   anything previously on the display.
+   Paint the character string *str* at ``(y, x)`` with attributes
+   *attr*, overwriting anything previously on the display.
 
 
 .. method:: window.attroff(attr)
@@ -710,8 +715,8 @@ the following methods and attributes:
 
 .. method:: window.attrset(attr)
 
-   Set the "background" set of attributes to *attr*.  This set is initially 0 (no
-   attributes).
+   Set the "background" set of attributes to *attr*.  This set is initially
+   ``0`` (no attributes).
 
 
 .. method:: window.bkgd(ch[, attr])
@@ -741,8 +746,7 @@ the following methods and attributes:
 
    Draw a border around the edges of the window. Each parameter specifies  the
    character to use for a specific part of the border; see the table below for more
-   details.  The characters can be specified as integers or as one-character
-   strings.
+   details.
 
    .. note::
 
@@ -783,11 +787,11 @@ the following methods and attributes:
             window.chgat(y, x, num, attr)
 
    Set the attributes of *num* characters at the current cursor position, or at
-   position ``(y, x)`` if supplied. If no value of *num* is given or *num* = -1,
-   the attribute will  be set on all the characters to the end of the line.  This
-   function does not move the cursor. The changed line will be touched using the
-   :meth:`touchline` method so that the contents will be redisplayed by the next
-   window refresh.
+   position ``(y, x)`` if supplied. If *num* is not given or is ``-1``,
+   the attribute will be set on all the characters to the end of the line.  This
+   function moves cursor to position ``(y, x)`` if supplied. The changed line
+   will be touched using the :meth:`touchline` method so that the contents will
+   be redisplayed by the next window refresh.
 
 
 .. method:: window.clear()
@@ -796,9 +800,9 @@ the following methods and attributes:
    call to :meth:`refresh`.
 
 
-.. method:: window.clearok(yes)
+.. method:: window.clearok(flag)
 
-   If *yes* is 1, the next call to :meth:`refresh` will clear the window
+   If *flag* is ``True``, the next call to :meth:`refresh` will clear the window
    completely.
 
 
@@ -880,15 +884,16 @@ the following methods and attributes:
 .. method:: window.getch([y, x])
 
    Get a character. Note that the integer returned does *not* have to be in ASCII
-   range: function keys, keypad keys and so on return numbers higher than 256. In
-   no-delay mode, -1 is returned if there is no input, else :func:`getch` waits
-   until a key is pressed.
+   range: function keys, keypad keys and so on are represented by numbers higher
+   than 255.  In no-delay mode, return ``-1`` if there is no input, otherwise
+   wait until a key is pressed.
 
 
 .. method:: window.get_wch([y, x])
 
    Get a wide character. Return a character for most keys, or an integer for
    function keys, keypad keys, and other special keys.
+   In no-delay mode, raise an exception if there is no input.
 
    .. versionadded:: 3.3
 
@@ -897,7 +902,7 @@ the following methods and attributes:
 
    Get a character, returning a string instead of an integer, as :meth:`getch`
    does. Function keys, keypad keys and other special keys return a multibyte
-   string containing the key name.  In no-delay mode, an exception is raised if
+   string containing the key name.  In no-delay mode, raise an exception if
    there is no input.
 
 
@@ -909,13 +914,16 @@ the following methods and attributes:
 .. method:: window.getparyx()
 
    Return the beginning coordinates of this window relative to its parent window
-   into two integer variables y and x.  Return ``-1, -1`` if this window has no
+   as a tuple ``(y, x)``.  Return ``(-1, -1)`` if this window has no
    parent.
 
 
-.. method:: window.getstr([y, x])
+.. method:: window.getstr()
+            window.getstr(n)
+            window.getstr(y, x)
+            window.getstr(y, x, n)
 
-   Read a string from the user, with primitive line editing capacity.
+   Read a bytes object from the user, with primitive line editing capacity.
 
 
 .. method:: window.getyx()
@@ -939,9 +947,9 @@ the following methods and attributes:
    insert/delete is enabled by default.
 
 
-.. method:: window.idlok(yes)
+.. method:: window.idlok(flag)
 
-   If called with *yes* equal to 1, :mod:`curses` will try and use hardware line
+   If *flag* is ``True``, :mod:`curses` will try and use hardware line
    editing facilities. Otherwise, line insertion/deletion are disabled.
 
 
@@ -1003,7 +1011,7 @@ the following methods and attributes:
 .. method:: window.instr([n])
             window.instr(y, x[, n])
 
-   Return a string of characters, extracted from the window starting at the
+   Return a bytes object of characters, extracted from the window starting at the
    current cursor position, or at *y*, *x* if specified. Attributes are stripped
    from the characters.  If *n* is specified, :meth:`instr` returns a string
    at most *n* characters long (exclusive of the trailing NUL).
@@ -1022,20 +1030,20 @@ the following methods and attributes:
    :meth:`refresh`; otherwise return ``False``.
 
 
-.. method:: window.keypad(yes)
+.. method:: window.keypad(flag)
 
-   If *yes* is 1, escape sequences generated by some keys (keypad,  function keys)
-   will be interpreted by :mod:`curses`. If *yes* is 0, escape sequences will be
+   If *flag* is ``True``, escape sequences generated by some keys (keypad,  function keys)
+   will be interpreted by :mod:`curses`. If *flag* is ``False``, escape sequences will be
    left as is in the input stream.
 
 
-.. method:: window.leaveok(yes)
+.. method:: window.leaveok(flag)
 
-   If *yes* is 1, cursor is left where it is on update, instead of being at "cursor
+   If *flag* is ``True``, cursor is left where it is on update, instead of being at "cursor
    position."  This reduces cursor movement where possible. If possible the cursor
    will be made invisible.
 
-   If *yes* is 0, cursor will always be at "cursor position" after an update.
+   If *flag* is ``False``, cursor will always be at "cursor position" after an update.
 
 
 .. method:: window.move(new_y, new_x)
@@ -1055,16 +1063,16 @@ the following methods and attributes:
    Move the window so its upper-left corner is at ``(new_y, new_x)``.
 
 
-.. method:: window.nodelay(yes)
+.. method:: window.nodelay(flag)
 
-   If *yes* is ``1``, :meth:`getch` will be non-blocking.
+   If *flag* is ``True``, :meth:`getch` will be non-blocking.
 
 
-.. method:: window.notimeout(yes)
+.. method:: window.notimeout(flag)
 
-   If *yes* is ``1``, escape sequences will not be timed out.
+   If *flag* is ``True``, escape sequences will not be timed out.
 
-   If *yes* is ``0``, after a few milliseconds, an escape sequence will not be
+   If *flag* is ``False``, after a few milliseconds, an escape sequence will not be
    interpreted, and will be left in the input stream as is.
 
 
@@ -1153,8 +1161,8 @@ the following methods and attributes:
 
    Control what happens when the cursor of a window is moved off the edge of the
    window or scrolling region, either as a result of a newline action on the bottom
-   line, or typing the last character of the last line.  If *flag* is false, the
-   cursor is left on the bottom line.  If *flag* is true, the window is scrolled up
+   line, or typing the last character of the last line.  If *flag* is ``False``, the
+   cursor is left on the bottom line.  If *flag* is ``True``, the window is scrolled up
    one line.  Note that in order to get the physical scrolling effect on the
    terminal, it is also necessary to call :meth:`idlok`.
 
@@ -1202,7 +1210,7 @@ the following methods and attributes:
 
 .. method:: window.syncok(flag)
 
-   If called with *flag* set to ``True``, then :meth:`syncup` is called automatically
+   If *flag* is ``True``, then :meth:`syncup` is called automatically
    whenever there is a change in the window.
 
 
@@ -1216,9 +1224,9 @@ the following methods and attributes:
 
    Set blocking or non-blocking read behavior for the window.  If *delay* is
    negative, blocking read is used (which will wait indefinitely for input).  If
-   *delay* is zero, then non-blocking read is used, and -1 will be returned by
-   :meth:`getch` if no input is waiting.  If *delay* is positive, then
-   :meth:`getch` will block for *delay* milliseconds, and return -1 if there is
+   *delay* is zero, then non-blocking read is used, and :meth:`getch` will
+   return ``-1`` if no input is waiting.  If *delay* is positive, then
+   :meth:`getch` will block for *delay* milliseconds, and return ``-1`` if there is
    still no input at the end of that time.
 
 
@@ -1226,7 +1234,7 @@ the following methods and attributes:
 
    Pretend *count* lines have been changed, starting with line *start*.  If
    *changed* is supplied, it specifies whether the affected lines are marked as
-   having been changed (*changed*\ =1) or unchanged (*changed*\ =0).
+   having been changed (*changed*\ ``=True``) or unchanged (*changed*\ ``=False``).
 
 
 .. method:: window.touchwin()
@@ -1268,7 +1276,7 @@ The :mod:`curses` module defines the fol
 
 .. data:: version
 
-   A string representing the current version of the module.  Also available as
+   A bytes object representing the current version of the module.  Also available as
    :const:`__version__`.
 
 Some constants are available to specify character cell attributes.
diff -urpN Python-3.6.3/Doc/library/dis.rst Python-3.6.5/Doc/library/dis.rst
--- Python-3.6.3/Doc/library/dis.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/dis.rst	2018-03-28 11:19:31.000000000 +0200
@@ -318,12 +318,16 @@ The Python compiler currently generates
 
    Duplicates the reference on top of the stack.
 
+   .. versionadded:: 3.2
+
 
 .. opcode:: DUP_TOP_TWO
 
    Duplicates the two references on top of the stack, leaving them in the
    same order.
 
+   .. versionadded:: 3.2
+
 
 **Unary operations**
 
@@ -534,29 +538,39 @@ the original TOS1.
    the CO_ITERABLE_COROUTINE flag, or resolves
    ``o.__await__``.
 
+   .. versionadded:: 3.5
+
 
 .. opcode:: GET_AITER
 
    Implements ``TOS = get_awaitable(TOS.__aiter__())``.  See ``GET_AWAITABLE``
    for details about ``get_awaitable``
 
+   .. versionadded:: 3.5
+
 
 .. opcode:: GET_ANEXT
 
    Implements ``PUSH(get_awaitable(TOS.__anext__()))``.  See ``GET_AWAITABLE``
    for details about ``get_awaitable``
 
+   .. versionadded:: 3.5
+
 
 .. opcode:: BEFORE_ASYNC_WITH
 
    Resolves ``__aenter__`` and ``__aexit__`` from the object on top of the
    stack.  Pushes ``__aexit__`` and result of ``__aenter__()`` to the stack.
 
+   .. versionadded:: 3.5
+
 
 .. opcode:: SETUP_ASYNC_WITH
 
    Creates a new frame object.
 
+   .. versionadded:: 3.5
+
 
 
 **Miscellaneous opcodes**
@@ -594,6 +608,8 @@ the original TOS1.
    Calls ``dict.setitem(TOS1[-i], TOS, TOS1)``.  Used to implement dict
    comprehensions.
 
+   .. versionadded:: 3.1
+
 For all of the :opcode:`SET_ADD`, :opcode:`LIST_APPEND` and :opcode:`MAP_ADD`
 instructions, while the added value or key/value pair is popped off, the
 container object remains on the stack so that it is available for further
@@ -616,6 +632,7 @@ iterations of the loop.
 
    .. versionadded:: 3.3
 
+
 .. opcode:: SETUP_ANNOTATIONS
 
    Checks whether ``__annotations__`` is defined in ``locals()``, if not it is
@@ -625,6 +642,7 @@ iterations of the loop.
 
    .. versionadded:: 3.6
 
+
 .. opcode:: IMPORT_STAR
 
    Loads all symbols not starting with ``'_'`` directly from the module TOS to
@@ -670,6 +688,8 @@ iterations of the loop.
    store it in (a) variable(s) (:opcode:`STORE_FAST`, :opcode:`STORE_NAME`, or
    :opcode:`UNPACK_SEQUENCE`).
 
+   .. versionadded:: 3.2
+
 
 .. opcode:: WITH_CLEANUP_START
 
@@ -900,23 +920,31 @@ All of the following opcodes use their a
 
    If TOS is true, sets the bytecode counter to *target*.  TOS is popped.
 
+   .. versionadded:: 3.1
+
 
 .. opcode:: POP_JUMP_IF_FALSE (target)
 
    If TOS is false, sets the bytecode counter to *target*.  TOS is popped.
 
+   .. versionadded:: 3.1
+
 
 .. opcode:: JUMP_IF_TRUE_OR_POP (target)
 
    If TOS is true, sets the bytecode counter to *target* and leaves TOS on the
    stack.  Otherwise (TOS is false), TOS is popped.
 
+   .. versionadded:: 3.1
+
 
 .. opcode:: JUMP_IF_FALSE_OR_POP (target)
 
    If TOS is false, sets the bytecode counter to *target* and leaves TOS on the
    stack.  Otherwise (TOS is true), TOS is popped.
 
+   .. versionadded:: 3.1
+
 
 .. opcode:: JUMP_ABSOLUTE (target)
 
@@ -996,6 +1024,8 @@ All of the following opcodes use their a
    consulting the cell.  This is used for loading free variables in class
    bodies.
 
+   .. versionadded:: 3.4
+
 
 .. opcode:: STORE_DEREF (i)
 
@@ -1008,6 +1038,8 @@ All of the following opcodes use their a
    Empties the cell contained in slot *i* of the cell and free variable storage.
    Used by the :keyword:`del` statement.
 
+   .. versionadded:: 3.2
+
 
 .. opcode:: RAISE_VARARGS (argc)
 
@@ -1053,7 +1085,7 @@ All of the following opcodes use their a
    Pops all function arguments, and the function itself off the stack, and
    pushes the return value. Note that this opcode pops at most three items
    from the stack. Var-positional and var-keyword arguments are packed
-   by :opcode:`BUILD_MAP_UNPACK_WITH_CALL` and
+   by :opcode:`BUILD_TUPLE_UNPACK_WITH_CALL` and
    :opcode:`BUILD_MAP_UNPACK_WITH_CALL`.
 
    .. versionadded:: 3.6
diff -urpN Python-3.6.3/Doc/library/ensurepip.rst Python-3.6.5/Doc/library/ensurepip.rst
--- Python-3.6.3/Doc/library/ensurepip.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/ensurepip.rst	2018-03-28 11:19:31.000000000 +0200
@@ -78,6 +78,9 @@ options:
 
 Providing both of the script selection options will trigger an exception.
 
+.. versionchanged:: 3.6.3
+   The exit status is non-zero if the command fails.
+
 
 Module API
 ----------
diff -urpN Python-3.6.3/Doc/library/enum.rst Python-3.6.5/Doc/library/enum.rst
--- Python-3.6.3/Doc/library/enum.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/enum.rst	2018-03-28 11:19:31.000000000 +0200
@@ -654,7 +654,7 @@ value and let :class:`Flag` select an ap
 Like :class:`IntFlag`, if a combination of :class:`Flag` members results in no
 flags being set, the boolean evaluation is :data:`False`::
 
-    >>> from enum import Flag
+    >>> from enum import Flag, auto
     >>> class Color(Flag):
     ...     RED = auto()
     ...     BLUE = auto()
diff -urpN Python-3.6.3/Doc/library/functions.rst Python-3.6.5/Doc/library/functions.rst
--- Python-3.6.3/Doc/library/functions.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/functions.rst	2018-03-28 11:19:31.000000000 +0200
@@ -182,9 +182,9 @@ are always available.  They are listed h
    base 16).  :exc:`ValueError` will be raised if *i* is outside that range.
 
 
-.. function:: classmethod(function)
+.. decorator:: classmethod
 
-   Return a class method for *function*.
+   Transform a method into a class method.
 
    A class method receives the class as implicit first argument, just like an
    instance method receives the instance. To declare a class method, use this
@@ -260,6 +260,12 @@ are always available.  They are listed h
       character.  This is to facilitate detection of incomplete and complete
       statements in the :mod:`code` module.
 
+   .. warning::
+
+      It is possible to crash the Python interpreter with a
+      sufficiently large/complex string when compiling to an AST
+      object due to stack depth limitations in Python's AST compiler.
+
    .. versionchanged:: 3.2
       Allowed use of Windows and Mac newlines.  Also input in ``'exec'`` mode
       does not have to end in a newline anymore.  Added the *optimize* parameter.
@@ -711,8 +717,11 @@ are always available.  They are listed h
 
    Return an integer object constructed from a number or string *x*, or return
    ``0`` if no arguments are given.  If *x* is a number, return
-   :meth:`x.__int__() <object.__int__>`.  For floating point numbers, this
-   truncates towards zero.
+   :meth:`x.__int__() <object.__int__>`. If *x* defines
+   :meth:`x.__trunc__() <object.__trunc__>` but not
+   :meth:`x.__int__() <object.__int__>`, then return
+   if :meth:`x.__trunc__() <object.__trunc__>`.  For floating point numbers,
+   this truncates towards zero.
 
    If *x* is not a number or if *base* is given, then *x* must be a string,
    :class:`bytes`, or :class:`bytearray` instance representing an :ref:`integer
@@ -1384,9 +1393,9 @@ are always available.  They are listed h
 
    For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`.
 
-.. function:: staticmethod(function)
+.. decorator:: staticmethod
 
-   Return a static method for *function*.
+   Transform a method into a static method.
 
    A static method does not receive an implicit first argument. To declare a static
    method, use this idiom::
@@ -1405,12 +1414,21 @@ are always available.  They are listed h
    :func:`classmethod` for a variant that is useful for creating alternate class
    constructors.
 
+   Like all decorators, it is also possible to call ``staticmethod`` as
+   a regular function and do something with its result.  This is needed
+   in some cases where you need a reference to a function from a class
+   body and you want to avoid the automatic transformation to instance
+   method.  For these cases, use this idiom::
+
+      class C:
+          builtin_open = staticmethod(open)
+
    For more information on static methods, consult the documentation on the
    standard type hierarchy in :ref:`types`.
 
-   .. index::
-      single: string; str() (built-in function)
 
+.. index::
+   single: string; str() (built-in function)
 
 .. _func-str:
 .. class:: str(object='')
diff -urpN Python-3.6.3/Doc/library/functools.rst Python-3.6.5/Doc/library/functools.rst
--- Python-3.6.3/Doc/library/functools.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/functools.rst	2018-03-28 11:19:31.000000000 +0200
@@ -264,9 +264,9 @@ The :mod:`functools` module defines the
           return value
 
 
-.. decorator:: singledispatch(default)
+.. decorator:: singledispatch
 
-   Transforms a function into a :term:`single-dispatch <single
+   Transform a function into a :term:`single-dispatch <single
    dispatch>` :term:`generic function`.
 
    To define a generic function, decorate it with the ``@singledispatch``
diff -urpN Python-3.6.3/Doc/library/getpass.rst Python-3.6.5/Doc/library/getpass.rst
--- Python-3.6.3/Doc/library/getpass.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/getpass.rst	2018-03-28 11:19:31.000000000 +0200
@@ -42,8 +42,10 @@ The :mod:`getpass` module provides two f
    Return the "login name" of the user.
 
    This function checks the environment variables :envvar:`LOGNAME`,
-   :envvar:`USER`, :envvar:`LNAME` and :envvar:`USERNAME`, in order, and returns
-   the value of the first one which is set to a non-empty string.  If none are set,
-   the login name from the password database is returned on systems which support
-   the :mod:`pwd` module, otherwise, an exception is raised.
+   :envvar:`USER`, :envvar:`LNAME` and :envvar:`USERNAME`, in order, and
+   returns the value of the first one which is set to a non-empty string.  If
+   none are set, the login name from the password database is returned on
+   systems which support the :mod:`pwd` module, otherwise, an exception is
+   raised.
 
+   In general, this function should be preferred over :func:`os.getlogin()`.
diff -urpN Python-3.6.3/Doc/library/gettext.rst Python-3.6.5/Doc/library/gettext.rst
--- Python-3.6.3/Doc/library/gettext.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/gettext.rst	2018-03-28 11:19:31.000000000 +0200
@@ -134,7 +134,7 @@ Class-based API
 
 The class-based API of the :mod:`gettext` module gives you more flexibility and
 greater convenience than the GNU :program:`gettext` API.  It is the recommended
-way of localizing your Python applications and modules.  :mod:`gettext` defines
+way of localizing your Python applications and modules.  :mod:`!gettext` defines
 a "translations" class which implements the parsing of GNU :file:`.mo` format
 files, and has methods for returning strings. Instances of this "translations"
 class can also install themselves in the built-in namespace as the function
@@ -219,7 +219,7 @@ Translation classes are what actually im
 source file message strings to translated message strings. The base class used
 by all translation classes is :class:`NullTranslations`; this provides the basic
 interface you can use to write your own specialized translation classes.  Here
-are the methods of :class:`NullTranslations`:
+are the methods of :class:`!NullTranslations`:
 
 
 .. class:: NullTranslations(fp=None)
@@ -247,13 +247,13 @@ are the methods of :class:`NullTranslati
 
    .. method:: gettext(message)
 
-      If a fallback has been set, forward :meth:`.gettext` to the fallback.
+      If a fallback has been set, forward :meth:`!gettext` to the fallback.
       Otherwise, return *message*.  Overridden in derived classes.
 
 
    .. method:: ngettext(singular, plural, n)
 
-      If a fallback has been set, forward :meth:`ngettext` to the fallback.
+      If a fallback has been set, forward :meth:`!ngettext` to the fallback.
       Otherwise, return *singular* if *n* is 1; return *plural* otherwise.
       Overridden in derived classes.
 
@@ -261,7 +261,7 @@ are the methods of :class:`NullTranslati
    .. method:: lgettext(message)
    .. method:: lngettext(singular, plural, n)
 
-      Equivalent to :meth:`.gettext` and :meth:`ngettext`, but the translation
+      Equivalent to :meth:`.gettext` and :meth:`.ngettext`, but the translation
       is returned as a byte string encoded in the preferred system encoding
       if no encoding was explicitly set with :meth:`set_output_charset`.
       Overridden in derived classes.
diff -urpN Python-3.6.3/Doc/library/glob.rst Python-3.6.5/Doc/library/glob.rst
--- Python-3.6.3/Doc/library/glob.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/glob.rst	2018-03-28 11:19:31.000000000 +0200
@@ -48,7 +48,7 @@ For example, ``'[?]'`` matches the chara
       Support for recursive globs using "``**``".
 
 
-.. function:: iglob(pathname, recursive=False)
+.. function:: iglob(pathname, *, recursive=False)
 
    Return an :term:`iterator` which yields the same values as :func:`glob`
    without actually storing them all simultaneously.
diff -urpN Python-3.6.3/Doc/library/hashlib.rst Python-3.6.5/Doc/library/hashlib.rst
--- Python-3.6.3/Doc/library/hashlib.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/hashlib.rst	2018-03-28 11:19:31.000000000 +0200
@@ -510,15 +510,19 @@ to users and later verify them to make s
     ...     h.update(cookie)
     ...     return h.hexdigest().encode('utf-8')
     >>>
-    >>> cookie = b'user:vatrogasac'
+    >>> def verify(cookie, sig):
+    ...     good_sig = sign(cookie)
+    ...     return compare_digest(good_sig, sig)
+    >>>
+    >>> cookie = b'user-alice'
     >>> sig = sign(cookie)
     >>> print("{0},{1}".format(cookie.decode('utf-8'), sig))
-    user:vatrogasac,349cf904533767ed2d755279a8df84d0
-    >>> compare_digest(cookie, sig)
+    user-alice,b'43b3c982cf697e0c5ab22172d1ca7421'
+    >>> verify(cookie, sig)
     True
-    >>> compare_digest(b'user:policajac', sig)
+    >>> verify(b'user-bob', sig)
     False
-    >>> compare_digest(cookie, b'0102030405060708090a0b0c0d0e0f00')
+    >>> verify(cookie, b'0102030405060708090a0b0c0d0e0f00')
     False
 
 Even though there's a native keyed hashing mode, BLAKE2 can, of course, be used
diff -urpN Python-3.6.3/Doc/library/importlib.rst Python-3.6.5/Doc/library/importlib.rst
--- Python-3.6.3/Doc/library/importlib.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/importlib.rst	2018-03-28 11:19:31.000000000 +0200
@@ -1045,7 +1045,15 @@ find and load modules.
 
 .. class:: ModuleSpec(name, loader, *, origin=None, loader_state=None, is_package=None)
 
-   A specification for a module's import-system-related state.
+   A specification for a module's import-system-related state.  This is
+   typically exposed as the module's ``__spec__`` attribute.  In the
+   descriptions below, the names in parentheses give the corresponding
+   attribute available directly on the module object.
+   E.g. ``module.__spec__.origin == module.__file__``.  Note however that
+   while the *values* are usually equivalent, they can differ since there is
+   no synchronization between the two objects.  Thus it is possible to update
+   the module's ``__path__`` at runtime, and this will not be automatically
+   reflected in ``__spec__.submodule_search_locations``.
 
    .. versionadded:: 3.4
 
diff -urpN Python-3.6.3/Doc/library/io.rst Python-3.6.5/Doc/library/io.rst
--- Python-3.6.3/Doc/library/io.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/io.rst	2018-03-28 11:19:31.000000000 +0200
@@ -205,8 +205,8 @@ ABC                        Inherits
                                                                          ``writable``, and ``writelines``
 :class:`RawIOBase`         :class:`IOBase`     ``readinto`` and          Inherited :class:`IOBase` methods, ``read``,
                                                ``write``                 and ``readall``
-:class:`BufferedIOBase`    :class:`IOBase`     ``detach``, ``read``,     Inherited :class:`IOBase` methods, ``readinto``
-                                               ``read1``, and ``write``
+:class:`BufferedIOBase`    :class:`IOBase`     ``detach``, ``read``,     Inherited :class:`IOBase` methods, ``readinto``,
+                                               ``read1``, and ``write``  and ``readinto1``
 :class:`TextIOBase`        :class:`IOBase`     ``detach``, ``read``,     Inherited :class:`IOBase` methods, ``encoding``,
                                                ``readline``, and         ``errors``, and ``newlines``
                                                ``write``
@@ -385,14 +385,17 @@ I/O Base Classes
    .. method:: read(size=-1)
 
       Read up to *size* bytes from the object and return them.  As a convenience,
-      if *size* is unspecified or -1, :meth:`readall` is called.  Otherwise,
-      only one system call is ever made.  Fewer than *size* bytes may be
-      returned if the operating system call returns fewer than *size* bytes.
+      if *size* is unspecified or -1, all bytes until EOF are returned.
+      Otherwise, only one system call is ever made.  Fewer than *size* bytes may
+      be returned if the operating system call returns fewer than *size* bytes.
 
       If 0 bytes are returned, and *size* was not 0, this indicates end of file.
       If the object is in non-blocking mode and no bytes are available,
       ``None`` is returned.
 
+      The default implementation defers to :meth:`readall` and
+      :meth:`readinto`.
+
    .. method:: readall()
 
       Read and return all the bytes from the stream until EOF, using multiple
diff -urpN Python-3.6.3/Doc/library/ipaddress.rst Python-3.6.5/Doc/library/ipaddress.rst
--- Python-3.6.3/Doc/library/ipaddress.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/ipaddress.rst	2018-03-28 11:19:31.000000000 +0200
@@ -234,7 +234,7 @@ write code that handles both IP versions
    groups consisting entirely of zeroes included.
 
 
-   For the following attributes, see the corresponding documention of the
+   For the following attributes, see the corresponding documentation of the
    :class:`IPv4Address` class:
 
    .. attribute:: packed
@@ -440,7 +440,11 @@ so to avoid duplication they are only do
 
    .. attribute:: hostmask
 
-      The host mask, as a string.
+      The host mask, as an :class:`IPv4Address` object.
+
+   .. attribute:: netmask
+
+      The net mask, as an :class:`IPv4Address` object.
 
    .. attribute:: with_prefixlen
    .. attribute:: compressed
@@ -561,13 +565,12 @@ so to avoid duplication they are only do
 
    1. A string consisting of an IP address and an optional mask, separated by
       a slash (``/``).  The IP address is the network address, and the mask
-      can be either a single number, which means it's a *prefix*, or a string
-      representation of an IPv6 address.  If it's the latter, the mask is
-      interpreted as a *net mask*.  If no mask is provided, it's considered to
-      be ``/128``.
+      is a single number, which represents a *prefix*.  If no mask is provided,
+      it's considered to be ``/128``.
 
-      For example, the following *address* specifications are equivalent:
-      ``2001:db00::0/24`` and ``2001:db00::0/ffff:ff00::``.
+      Note that currently expanded netmasks are not supported.  That means
+      ``2001:db00::0/24`` is a valid argument while ``2001:db00::0/ffff:ff00::``
+      not.
 
    2. An integer that fits into 128 bits.  This is equivalent to a
       single-address network, with the network address being *address* and
@@ -604,6 +607,7 @@ so to avoid duplication they are only do
    .. attribute:: network_address
    .. attribute:: broadcast_address
    .. attribute:: hostmask
+   .. attribute:: netmask
    .. attribute:: with_prefixlen
    .. attribute:: compressed
    .. attribute:: exploded
diff -urpN Python-3.6.3/Doc/library/itertools.rst Python-3.6.5/Doc/library/itertools.rst
--- Python-3.6.3/Doc/library/itertools.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/itertools.rst	2018-03-28 11:19:31.000000000 +0200
@@ -32,7 +32,7 @@ operator can be mapped across two vector
 ``sum(map(operator.mul, vector1, vector2))``.
 
 
-**Infinite Iterators:**
+**Infinite iterators:**
 
 ==================  =================       =================================================               =========================================
 Iterator            Arguments               Results                                                         Example
@@ -53,7 +53,7 @@ Iterator                        Argument
 :func:`compress`                data, selectors                 (d[0] if s[0]), (d[1] if s[1]), ...                 ``compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F``
 :func:`dropwhile`               pred, seq                       seq[n], seq[n+1], starting when pred fails          ``dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1``
 :func:`filterfalse`             pred, seq                       elements of seq where pred(elem) is false           ``filterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8``
-:func:`groupby`                 iterable[, keyfunc]             sub-iterators grouped by value of keyfunc(v)
+:func:`groupby`                 iterable[, key]                 sub-iterators grouped by value of key(v)
 :func:`islice`                  seq, [start,] stop [, step]     elements from seq[start:stop:step]                  ``islice('ABCDEFG', 2, None) --> C D E F G``
 :func:`starmap`                 func, seq                       func(\*seq[0]), func(\*seq[1]), ...                 ``starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000``
 :func:`takewhile`               pred, seq                       seq[0], seq[1], until pred fails                    ``takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4``
@@ -61,7 +61,7 @@ Iterator                        Argument
 :func:`zip_longest`             p, q, ...                       (p[0], q[0]), (p[1], q[1]), ...                     ``zip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-``
 ============================    ============================    =================================================   =============================================================
 
-**Combinatoric generators:**
+**Combinatoric iterators:**
 
 ==============================================   ====================       =============================================================
 Iterator                                         Arguments                  Results
@@ -753,15 +753,16 @@ which incur interpreter overhead.
    def roundrobin(*iterables):
        "roundrobin('ABC', 'D', 'EF') --> A D E B F C"
        # Recipe credited to George Sakkis
-       pending = len(iterables)
+       num_active = len(iterables)
        nexts = cycle(iter(it).__next__ for it in iterables)
-       while pending:
+       while num_active:
            try:
                for next in nexts:
                    yield next()
            except StopIteration:
-               pending -= 1
-               nexts = cycle(islice(nexts, pending))
+               # Remove the iterator we just exhausted from the cycle.
+               num_active -= 1
+               nexts = cycle(islice(nexts, num_active))
 
    def partition(pred, iterable):
        'Use a predicate to partition entries into false entries and true entries'
@@ -858,6 +859,29 @@ which incur interpreter overhead.
        indices = sorted(random.randrange(n) for i in range(r))
        return tuple(pool[i] for i in indices)
 
+   def nth_combination(iterable, r, index):
+       'Equivalent to list(combinations(iterable, r))[index]'
+       pool = tuple(iterable)
+       n = len(pool)
+       if r < 0 or r > n:
+           raise ValueError
+       c = 1
+       k = min(r, n-r)
+       for i in range(1, k+1):
+           c = c * (n - k + i) // i
+       if index < 0:
+           index += c
+       if index < 0 or index >= c:
+           raise IndexError
+       result = []
+       while r:
+           c, n, r = c*r//n, n-1, r-1
+           while index >= c:
+               index -= c
+               c, n = c*(n-r)//n, n-1
+           result.append(pool[-1-n])
+       return tuple(result)
+
 Note, many of the above recipes can be optimized by replacing global lookups
 with local variables defined as default values.  For example, the
 *dotproduct* recipe can be written as::
diff -urpN Python-3.6.3/Doc/library/locale.rst Python-3.6.5/Doc/library/locale.rst
--- Python-3.6.3/Doc/library/locale.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/locale.rst	2018-03-28 11:19:31.000000000 +0200
@@ -147,6 +147,16 @@ The :mod:`locale` module defines the fol
    | ``CHAR_MAX`` | Nothing is specified in this locale.    |
    +--------------+-----------------------------------------+
 
+   The function sets temporarily the ``LC_CTYPE`` locale to the ``LC_NUMERIC``
+   locale to decode ``decimal_point`` and ``thousands_sep`` byte strings if
+   they are non-ASCII or longer than 1 byte, and the ``LC_NUMERIC`` locale is
+   different than the ``LC_CTYPE`` locale. This temporary change affects other
+   threads.
+
+   .. versionchanged:: 3.6.5
+      The function now sets temporarily the ``LC_CTYPE`` locale to the
+      ``LC_NUMERIC`` locale in some cases.
+
 
 .. function:: nl_langinfo(option)
 
@@ -542,17 +552,23 @@ library.
 Access to message catalogs
 --------------------------
 
+.. function:: gettext(msg)
+.. function:: dgettext(domain, msg)
+.. function:: dcgettext(domain, msg, category)
+.. function:: textdomain(domain)
+.. function:: bindtextdomain(domain, dir)
+
 The locale module exposes the C library's gettext interface on systems that
-provide this interface.  It consists of the functions :func:`gettext`,
-:func:`dgettext`, :func:`dcgettext`, :func:`textdomain`, :func:`bindtextdomain`,
-and :func:`bind_textdomain_codeset`.  These are similar to the same functions in
+provide this interface.  It consists of the functions :func:`!gettext`,
+:func:`!dgettext`, :func:`!dcgettext`, :func:`!textdomain`, :func:`!bindtextdomain`,
+and :func:`!bind_textdomain_codeset`.  These are similar to the same functions in
 the :mod:`gettext` module, but use the C library's binary format for message
 catalogs, and the C library's search algorithms for locating message catalogs.
 
 Python applications should normally find no need to invoke these functions, and
 should use :mod:`gettext` instead.  A known exception to this rule are
 applications that link with additional C libraries which internally invoke
-:c:func:`gettext` or :func:`dcgettext`.  For these applications, it may be
+:c:func:`gettext` or :c:func:`dcgettext`.  For these applications, it may be
 necessary to bind the text domain, so that the libraries can properly locate
 their message catalogs.
 
diff -urpN Python-3.6.3/Doc/library/logging.rst Python-3.6.5/Doc/library/logging.rst
--- Python-3.6.3/Doc/library/logging.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/logging.rst	2018-03-28 11:19:31.000000000 +0200
@@ -69,260 +69,266 @@ is the module's name in the Python packa
 
 .. class:: Logger
 
-.. attribute:: Logger.propagate
+   .. attribute:: Logger.propagate
 
-   If this evaluates to true, events logged to this logger will be passed to the
-   handlers of higher level (ancestor) loggers, in addition to any handlers
-   attached to this logger. Messages are passed directly to the ancestor
-   loggers' handlers - neither the level nor filters of the ancestor loggers in
-   question are considered.
-
-   If this evaluates to false, logging messages are not passed to the handlers
-   of ancestor loggers.
-
-   The constructor sets this attribute to ``True``.
-
-   .. note:: If you attach a handler to a logger *and* one or more of its
-      ancestors, it may emit the same record multiple times. In general, you
-      should not need to attach a handler to more than one logger - if you just
-      attach it to the appropriate logger which is highest in the logger
-      hierarchy, then it will see all events logged by all descendant loggers,
-      provided that their propagate setting is left set to ``True``. A common
-      scenario is to attach handlers only to the root logger, and to let
-      propagation take care of the rest.
-
-.. method:: Logger.setLevel(lvl)
-
-   Sets the threshold for this logger to *lvl*. Logging messages which are less
-   severe than *lvl* will be ignored. When a logger is created, the level is set to
-   :const:`NOTSET` (which causes all messages to be processed when the logger is
-   the root logger, or delegation to the parent when the logger is a non-root
-   logger). Note that the root logger is created with level :const:`WARNING`.
-
-   The term 'delegation to the parent' means that if a logger has a level of
-   NOTSET, its chain of ancestor loggers is traversed until either an ancestor with
-   a level other than NOTSET is found, or the root is reached.
-
-   If an ancestor is found with a level other than NOTSET, then that ancestor's
-   level is treated as the effective level of the logger where the ancestor search
-   began, and is used to determine how a logging event is handled.
+      If this attribute evaluates to true, events logged to this logger will be
+      passed to the handlers of higher level (ancestor) loggers, in addition to
+      any handlers attached to this logger. Messages are passed directly to the
+      ancestor loggers' handlers - neither the level nor filters of the ancestor
+      loggers in question are considered.
 
-   If the root is reached, and it has a level of NOTSET, then all messages will be
-   processed. Otherwise, the root's level will be used as the effective level.
+      If this evaluates to false, logging messages are not passed to the handlers
+      of ancestor loggers.
 
-   See :ref:`levels` for a list of levels.
+      The constructor sets this attribute to ``True``.
 
-   .. versionchanged:: 3.2
-      The *lvl* parameter now accepts a string representation of the
-      level such as 'INFO' as an alternative to the integer constants
-      such as :const:`INFO`. Note, however, that levels are internally stored
-      as integers, and methods such as e.g. :meth:`getEffectiveLevel` and
-      :meth:`isEnabledFor` will return/expect to be passed integers.
+      .. note:: If you attach a handler to a logger *and* one or more of its
+         ancestors, it may emit the same record multiple times. In general, you
+         should not need to attach a handler to more than one logger - if you just
+         attach it to the appropriate logger which is highest in the logger
+         hierarchy, then it will see all events logged by all descendant loggers,
+         provided that their propagate setting is left set to ``True``. A common
+         scenario is to attach handlers only to the root logger, and to let
+         propagation take care of the rest.
 
+   .. method:: Logger.setLevel(level)
 
-.. method:: Logger.isEnabledFor(lvl)
+      Sets the threshold for this logger to *level*. Logging messages which are less
+      severe than *level* will be ignored; logging messages which have severity *level*
+      or higher will be emitted by whichever handler or handlers service this logger,
+      unless a handler's level has been set to a higher severity level than *level*.
 
-   Indicates if a message of severity *lvl* would be processed by this logger.
-   This method checks first the module-level level set by
-   ``logging.disable(lvl)`` and then the logger's effective level as determined
-   by :meth:`getEffectiveLevel`.
+      When a logger is created, the level is set to :const:`NOTSET` (which causes
+      all messages to be processed when the logger is the root logger, or delegation
+      to the parent when the logger is a non-root logger). Note that the root logger
+      is created with level :const:`WARNING`.
 
+      The term 'delegation to the parent' means that if a logger has a level of
+      NOTSET, its chain of ancestor loggers is traversed until either an ancestor with
+      a level other than NOTSET is found, or the root is reached.
 
-.. method:: Logger.getEffectiveLevel()
+      If an ancestor is found with a level other than NOTSET, then that ancestor's
+      level is treated as the effective level of the logger where the ancestor search
+      began, and is used to determine how a logging event is handled.
 
-   Indicates the effective level for this logger. If a value other than
-   :const:`NOTSET` has been set using :meth:`setLevel`, it is returned. Otherwise,
-   the hierarchy is traversed towards the root until a value other than
-   :const:`NOTSET` is found, and that value is returned. The value returned is
-   an integer, typically one of :const:`logging.DEBUG`, :const:`logging.INFO`
-   etc.
+      If the root is reached, and it has a level of NOTSET, then all messages will be
+      processed. Otherwise, the root's level will be used as the effective level.
 
+      See :ref:`levels` for a list of levels.
 
-.. method:: Logger.getChild(suffix)
+      .. versionchanged:: 3.2
+         The *level* parameter now accepts a string representation of the
+         level such as 'INFO' as an alternative to the integer constants
+         such as :const:`INFO`. Note, however, that levels are internally stored
+         as integers, and methods such as e.g. :meth:`getEffectiveLevel` and
+         :meth:`isEnabledFor` will return/expect to be passed integers.
 
-   Returns a logger which is a descendant to this logger, as determined by the suffix.
-   Thus, ``logging.getLogger('abc').getChild('def.ghi')`` would return the same
-   logger as would be returned by ``logging.getLogger('abc.def.ghi')``. This is a
-   convenience method, useful when the parent logger is named using e.g. ``__name__``
-   rather than a literal string.
 
-   .. versionadded:: 3.2
+   .. method:: Logger.isEnabledFor(lvl)
 
+      Indicates if a message of severity *lvl* would be processed by this logger.
+      This method checks first the module-level level set by
+      ``logging.disable(lvl)`` and then the logger's effective level as determined
+      by :meth:`getEffectiveLevel`.
 
-.. method:: Logger.debug(msg, *args, **kwargs)
 
-   Logs a message with level :const:`DEBUG` on this logger. The *msg* is the
-   message format string, and the *args* are the arguments which are merged into
-   *msg* using the string formatting operator. (Note that this means that you can
-   use keywords in the format string, together with a single dictionary argument.)
+   .. method:: Logger.getEffectiveLevel()
 
-   There are three keyword arguments in *kwargs* which are inspected:
-   *exc_info*, *stack_info*, and *extra*.
+      Indicates the effective level for this logger. If a value other than
+      :const:`NOTSET` has been set using :meth:`setLevel`, it is returned. Otherwise,
+      the hierarchy is traversed towards the root until a value other than
+      :const:`NOTSET` is found, and that value is returned. The value returned is
+      an integer, typically one of :const:`logging.DEBUG`, :const:`logging.INFO`
+      etc.
 
-   If *exc_info* does not evaluate as false, it causes exception information to be
-   added to the logging message. If an exception tuple (in the format returned by
-   :func:`sys.exc_info`) or an exception instance is provided, it is used;
-   otherwise, :func:`sys.exc_info` is called to get the exception information.
 
-   The second optional keyword argument is *stack_info*, which defaults to
-   ``False``. If true, stack information is added to the logging
-   message, including the actual logging call. Note that this is not the same
-   stack information as that displayed through specifying *exc_info*: The
-   former is stack frames from the bottom of the stack up to the logging call
-   in the current thread, whereas the latter is information about stack frames
-   which have been unwound, following an exception, while searching for
-   exception handlers.
+   .. method:: Logger.getChild(suffix)
 
-   You can specify *stack_info* independently of *exc_info*, e.g. to just show
-   how you got to a certain point in your code, even when no exceptions were
-   raised. The stack frames are printed following a header line which says::
+      Returns a logger which is a descendant to this logger, as determined by the suffix.
+      Thus, ``logging.getLogger('abc').getChild('def.ghi')`` would return the same
+      logger as would be returned by ``logging.getLogger('abc.def.ghi')``. This is a
+      convenience method, useful when the parent logger is named using e.g. ``__name__``
+      rather than a literal string.
 
-       Stack (most recent call last):
+      .. versionadded:: 3.2
 
-   This mimics the ``Traceback (most recent call last):`` which is used when
-   displaying exception frames.
 
-   The third keyword argument is *extra* which can be used to pass a
-   dictionary which is used to populate the __dict__ of the LogRecord created for
-   the logging event with user-defined attributes. These custom attributes can then
-   be used as you like. For example, they could be incorporated into logged
-   messages. For example::
+   .. method:: Logger.debug(msg, *args, **kwargs)
 
-      FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
-      logging.basicConfig(format=FORMAT)
-      d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
-      logger = logging.getLogger('tcpserver')
-      logger.warning('Protocol problem: %s', 'connection reset', extra=d)
+      Logs a message with level :const:`DEBUG` on this logger. The *msg* is the
+      message format string, and the *args* are the arguments which are merged into
+      *msg* using the string formatting operator. (Note that this means that you can
+      use keywords in the format string, together with a single dictionary argument.)
 
-   would print something like  ::
+      There are three keyword arguments in *kwargs* which are inspected:
+      *exc_info*, *stack_info*, and *extra*.
 
-      2006-02-08 22:20:02,165 192.168.0.1 fbloggs  Protocol problem: connection reset
+      If *exc_info* does not evaluate as false, it causes exception information to be
+      added to the logging message. If an exception tuple (in the format returned by
+      :func:`sys.exc_info`) or an exception instance is provided, it is used;
+      otherwise, :func:`sys.exc_info` is called to get the exception information.
 
-   The keys in the dictionary passed in *extra* should not clash with the keys used
-   by the logging system. (See the :class:`Formatter` documentation for more
-   information on which keys are used by the logging system.)
+      The second optional keyword argument is *stack_info*, which defaults to
+      ``False``. If true, stack information is added to the logging
+      message, including the actual logging call. Note that this is not the same
+      stack information as that displayed through specifying *exc_info*: The
+      former is stack frames from the bottom of the stack up to the logging call
+      in the current thread, whereas the latter is information about stack frames
+      which have been unwound, following an exception, while searching for
+      exception handlers.
 
-   If you choose to use these attributes in logged messages, you need to exercise
-   some care. In the above example, for instance, the :class:`Formatter` has been
-   set up with a format string which expects 'clientip' and 'user' in the attribute
-   dictionary of the LogRecord. If these are missing, the message will not be
-   logged because a string formatting exception will occur. So in this case, you
-   always need to pass the *extra* dictionary with these keys.
+      You can specify *stack_info* independently of *exc_info*, e.g. to just show
+      how you got to a certain point in your code, even when no exceptions were
+      raised. The stack frames are printed following a header line which says::
 
-   While this might be annoying, this feature is intended for use in specialized
-   circumstances, such as multi-threaded servers where the same code executes in
-   many contexts, and interesting conditions which arise are dependent on this
-   context (such as remote client IP address and authenticated user name, in the
-   above example). In such circumstances, it is likely that specialized
-   :class:`Formatter`\ s would be used with particular :class:`Handler`\ s.
+          Stack (most recent call last):
 
-   .. versionadded:: 3.2
-      The *stack_info* parameter was added.
+      This mimics the ``Traceback (most recent call last):`` which is used when
+      displaying exception frames.
 
-   .. versionchanged:: 3.5
-      The *exc_info* parameter can now accept exception instances.
+      The third keyword argument is *extra* which can be used to pass a
+      dictionary which is used to populate the __dict__ of the LogRecord created for
+      the logging event with user-defined attributes. These custom attributes can then
+      be used as you like. For example, they could be incorporated into logged
+      messages. For example::
 
+         FORMAT = '%(asctime)-15s %(clientip)s %(user)-8s %(message)s'
+         logging.basicConfig(format=FORMAT)
+         d = {'clientip': '192.168.0.1', 'user': 'fbloggs'}
+         logger = logging.getLogger('tcpserver')
+         logger.warning('Protocol problem: %s', 'connection reset', extra=d)
 
-.. method:: Logger.info(msg, *args, **kwargs)
+      would print something like  ::
 
-   Logs a message with level :const:`INFO` on this logger. The arguments are
-   interpreted as for :meth:`debug`.
+         2006-02-08 22:20:02,165 192.168.0.1 fbloggs  Protocol problem: connection reset
 
+      The keys in the dictionary passed in *extra* should not clash with the keys used
+      by the logging system. (See the :class:`Formatter` documentation for more
+      information on which keys are used by the logging system.)
 
-.. method:: Logger.warning(msg, *args, **kwargs)
+      If you choose to use these attributes in logged messages, you need to exercise
+      some care. In the above example, for instance, the :class:`Formatter` has been
+      set up with a format string which expects 'clientip' and 'user' in the attribute
+      dictionary of the LogRecord. If these are missing, the message will not be
+      logged because a string formatting exception will occur. So in this case, you
+      always need to pass the *extra* dictionary with these keys.
 
-   Logs a message with level :const:`WARNING` on this logger. The arguments are
-   interpreted as for :meth:`debug`.
+      While this might be annoying, this feature is intended for use in specialized
+      circumstances, such as multi-threaded servers where the same code executes in
+      many contexts, and interesting conditions which arise are dependent on this
+      context (such as remote client IP address and authenticated user name, in the
+      above example). In such circumstances, it is likely that specialized
+      :class:`Formatter`\ s would be used with particular :class:`Handler`\ s.
 
-   .. note:: There is an obsolete method ``warn`` which is functionally
-      identical to ``warning``. As ``warn`` is deprecated, please do not use
-      it - use ``warning`` instead.
+      .. versionadded:: 3.2
+         The *stack_info* parameter was added.
 
-.. method:: Logger.error(msg, *args, **kwargs)
+      .. versionchanged:: 3.5
+         The *exc_info* parameter can now accept exception instances.
 
-   Logs a message with level :const:`ERROR` on this logger. The arguments are
-   interpreted as for :meth:`debug`.
 
+   .. method:: Logger.info(msg, *args, **kwargs)
 
-.. method:: Logger.critical(msg, *args, **kwargs)
+      Logs a message with level :const:`INFO` on this logger. The arguments are
+      interpreted as for :meth:`debug`.
 
-   Logs a message with level :const:`CRITICAL` on this logger. The arguments are
-   interpreted as for :meth:`debug`.
 
+   .. method:: Logger.warning(msg, *args, **kwargs)
 
-.. method:: Logger.log(lvl, msg, *args, **kwargs)
+      Logs a message with level :const:`WARNING` on this logger. The arguments are
+      interpreted as for :meth:`debug`.
 
-   Logs a message with integer level *lvl* on this logger. The other arguments are
-   interpreted as for :meth:`debug`.
+      .. note:: There is an obsolete method ``warn`` which is functionally
+         identical to ``warning``. As ``warn`` is deprecated, please do not use
+         it - use ``warning`` instead.
 
+   .. method:: Logger.error(msg, *args, **kwargs)
 
-.. method:: Logger.exception(msg, *args, **kwargs)
+      Logs a message with level :const:`ERROR` on this logger. The arguments are
+      interpreted as for :meth:`debug`.
 
-   Logs a message with level :const:`ERROR` on this logger. The arguments are
-   interpreted as for :meth:`debug`. Exception info is added to the logging
-   message. This method should only be called from an exception handler.
 
+   .. method:: Logger.critical(msg, *args, **kwargs)
 
-.. method:: Logger.addFilter(filt)
+      Logs a message with level :const:`CRITICAL` on this logger. The arguments are
+      interpreted as for :meth:`debug`.
 
-   Adds the specified filter *filt* to this logger.
 
+   .. method:: Logger.log(lvl, msg, *args, **kwargs)
 
-.. method:: Logger.removeFilter(filt)
+      Logs a message with integer level *lvl* on this logger. The other arguments are
+      interpreted as for :meth:`debug`.
 
-   Removes the specified filter *filt* from this logger.
 
+   .. method:: Logger.exception(msg, *args, **kwargs)
 
-.. method:: Logger.filter(record)
+      Logs a message with level :const:`ERROR` on this logger. The arguments are
+      interpreted as for :meth:`debug`. Exception info is added to the logging
+      message. This method should only be called from an exception handler.
 
-   Applies this logger's filters to the record and returns a true value if the
-   record is to be processed. The filters are consulted in turn, until one of
-   them returns a false value. If none of them return a false value, the record
-   will be processed (passed to handlers). If one returns a false value, no
-   further processing of the record occurs.
 
+   .. method:: Logger.addFilter(filter)
 
-.. method:: Logger.addHandler(hdlr)
+      Adds the specified filter *filter* to this logger.
 
-   Adds the specified handler *hdlr* to this logger.
 
+   .. method:: Logger.removeFilter(filter)
 
-.. method:: Logger.removeHandler(hdlr)
+      Removes the specified filter *filter* from this logger.
 
-   Removes the specified handler *hdlr* from this logger.
 
+   .. method:: Logger.filter(record)
 
-.. method:: Logger.findCaller(stack_info=False)
+      Applies this logger's filters to the record and returns a true value if the
+      record is to be processed. The filters are consulted in turn, until one of
+      them returns a false value. If none of them return a false value, the record
+      will be processed (passed to handlers). If one returns a false value, no
+      further processing of the record occurs.
 
-   Finds the caller's source filename and line number. Returns the filename, line
-   number, function name and stack information as a 4-element tuple. The stack
-   information is returned as ``None`` unless *stack_info* is ``True``.
 
+   .. method:: Logger.addHandler(hdlr)
 
-.. method:: Logger.handle(record)
+      Adds the specified handler *hdlr* to this logger.
 
-   Handles a record by passing it to all handlers associated with this logger and
-   its ancestors (until a false value of *propagate* is found). This method is used
-   for unpickled records received from a socket, as well as those created locally.
-   Logger-level filtering is applied using :meth:`~Logger.filter`.
 
+   .. method:: Logger.removeHandler(hdlr)
 
-.. method:: Logger.makeRecord(name, lvl, fn, lno, msg, args, exc_info, func=None, extra=None, sinfo=None)
+      Removes the specified handler *hdlr* from this logger.
 
-   This is a factory method which can be overridden in subclasses to create
-   specialized :class:`LogRecord` instances.
 
-.. method:: Logger.hasHandlers()
+   .. method:: Logger.findCaller(stack_info=False)
 
-   Checks to see if this logger has any handlers configured. This is done by
-   looking for handlers in this logger and its parents in the logger hierarchy.
-   Returns ``True`` if a handler was found, else ``False``. The method stops searching
-   up the hierarchy whenever a logger with the 'propagate' attribute set to
-   false is found - that will be the last logger which is checked for the
-   existence of handlers.
+      Finds the caller's source filename and line number. Returns the filename, line
+      number, function name and stack information as a 4-element tuple. The stack
+      information is returned as ``None`` unless *stack_info* is ``True``.
+
+
+   .. method:: Logger.handle(record)
+
+      Handles a record by passing it to all handlers associated with this logger and
+      its ancestors (until a false value of *propagate* is found). This method is used
+      for unpickled records received from a socket, as well as those created locally.
+      Logger-level filtering is applied using :meth:`~Logger.filter`.
 
-   .. versionadded:: 3.2
 
+   .. method:: Logger.makeRecord(name, lvl, fn, lno, msg, args, exc_info, func=None, extra=None, sinfo=None)
+
+      This is a factory method which can be overridden in subclasses to create
+      specialized :class:`LogRecord` instances.
+
+   .. method:: Logger.hasHandlers()
+
+      Checks to see if this logger has any handlers configured. This is done by
+      looking for handlers in this logger and its parents in the logger hierarchy.
+      Returns ``True`` if a handler was found, else ``False``. The method stops searching
+      up the hierarchy whenever a logger with the 'propagate' attribute set to
+      false is found - that will be the last logger which is checked for the
+      existence of handlers.
+
+      .. versionadded:: 3.2
+
+   .. versionchanged:: 3.7
+      Loggers can now be picked and unpickled.
 
 .. _levels:
 
@@ -362,113 +368,115 @@ is never instantiated directly; this cla
 subclasses. However, the :meth:`__init__` method in subclasses needs to call
 :meth:`Handler.__init__`.
 
+.. class:: Handler
 
-.. method:: Handler.__init__(level=NOTSET)
+   .. method:: Handler.__init__(level=NOTSET)
 
-   Initializes the :class:`Handler` instance by setting its level, setting the list
-   of filters to the empty list and creating a lock (using :meth:`createLock`) for
-   serializing access to an I/O mechanism.
+      Initializes the :class:`Handler` instance by setting its level, setting the list
+      of filters to the empty list and creating a lock (using :meth:`createLock`) for
+      serializing access to an I/O mechanism.
 
 
-.. method:: Handler.createLock()
+   .. method:: Handler.createLock()
 
-   Initializes a thread lock which can be used to serialize access to underlying
-   I/O functionality which may not be threadsafe.
+      Initializes a thread lock which can be used to serialize access to underlying
+      I/O functionality which may not be threadsafe.
 
 
-.. method:: Handler.acquire()
+   .. method:: Handler.acquire()
 
-   Acquires the thread lock created with :meth:`createLock`.
+      Acquires the thread lock created with :meth:`createLock`.
 
 
-.. method:: Handler.release()
+   .. method:: Handler.release()
 
-   Releases the thread lock acquired with :meth:`acquire`.
+      Releases the thread lock acquired with :meth:`acquire`.
 
 
-.. method:: Handler.setLevel(lvl)
+   .. method:: Handler.setLevel(level)
 
-   Sets the threshold for this handler to *lvl*. Logging messages which are less
-   severe than *lvl* will be ignored. When a handler is created, the level is set
-   to :const:`NOTSET` (which causes all messages to be processed).
+      Sets the threshold for this handler to *level*. Logging messages which are
+      less severe than *level* will be ignored. When a handler is created, the
+      level is set to :const:`NOTSET` (which causes all messages to be
+      processed).
 
-   See :ref:`levels` for a list of levels.
+      See :ref:`levels` for a list of levels.
 
-   .. versionchanged:: 3.2
-      The *lvl* parameter now accepts a string representation of the
-      level such as 'INFO' as an alternative to the integer constants
-      such as :const:`INFO`.
+      .. versionchanged:: 3.2
+         The *level* parameter now accepts a string representation of the
+         level such as 'INFO' as an alternative to the integer constants
+         such as :const:`INFO`.
 
 
-.. method:: Handler.setFormatter(form)
+   .. method:: Handler.setFormatter(fmt)
 
-   Sets the :class:`Formatter` for this handler to *form*.
+      Sets the :class:`Formatter` for this handler to *fmt*.
 
 
-.. method:: Handler.addFilter(filt)
+   .. method:: Handler.addFilter(filter)
 
-   Adds the specified filter *filt* to this handler.
+      Adds the specified filter *filter* to this handler.
 
 
-.. method:: Handler.removeFilter(filt)
+   .. method:: Handler.removeFilter(filter)
 
-   Removes the specified filter *filt* from this handler.
+      Removes the specified filter *filter* from this handler.
 
 
-.. method:: Handler.filter(record)
+   .. method:: Handler.filter(record)
 
-   Applies this handler's filters to the record and returns a true value if the
-   record is to be processed. The filters are consulted in turn, until one of
-   them returns a false value. If none of them return a false value, the record
-   will be emitted. If one returns a false value, the handler will not emit the
-   record.
+      Applies this handler's filters to the record and returns a true value if the
+      record is to be processed. The filters are consulted in turn, until one of
+      them returns a false value. If none of them return a false value, the record
+      will be emitted. If one returns a false value, the handler will not emit the
+      record.
 
 
-.. method:: Handler.flush()
+   .. method:: Handler.flush()
 
-   Ensure all logging output has been flushed. This version does nothing and is
-   intended to be implemented by subclasses.
+      Ensure all logging output has been flushed. This version does nothing and is
+      intended to be implemented by subclasses.
 
 
-.. method:: Handler.close()
+   .. method:: Handler.close()
 
-   Tidy up any resources used by the handler. This version does no output but
-   removes the handler from an internal list of handlers which is closed when
-   :func:`shutdown` is called. Subclasses should ensure that this gets called
-   from overridden :meth:`close` methods.
+      Tidy up any resources used by the handler. This version does no output but
+      removes the handler from an internal list of handlers which is closed when
+      :func:`shutdown` is called. Subclasses should ensure that this gets called
+      from overridden :meth:`close` methods.
 
 
-.. method:: Handler.handle(record)
+   .. method:: Handler.handle(record)
 
-   Conditionally emits the specified logging record, depending on filters which may
-   have been added to the handler. Wraps the actual emission of the record with
-   acquisition/release of the I/O thread lock.
+      Conditionally emits the specified logging record, depending on filters which may
+      have been added to the handler. Wraps the actual emission of the record with
+      acquisition/release of the I/O thread lock.
 
 
-.. method:: Handler.handleError(record)
+   .. method:: Handler.handleError(record)
 
-   This method should be called from handlers when an exception is encountered
-   during an :meth:`emit` call. If the module-level attribute
-   ``raiseExceptions`` is ``False``, exceptions get silently ignored. This is
-   what is mostly wanted for a logging system - most users will not care about
-   errors in the logging system, they are more interested in application
-   errors. You could, however, replace this with a custom handler if you wish.
-   The specified record is the one which was being processed when the exception
-   occurred. (The default value of ``raiseExceptions`` is ``True``, as that is
-   more useful during development).
+      This method should be called from handlers when an exception is encountered
+      during an :meth:`emit` call. If the module-level attribute
+      ``raiseExceptions`` is ``False``, exceptions get silently ignored. This is
+      what is mostly wanted for a logging system - most users will not care about
+      errors in the logging system, they are more interested in application
+      errors. You could, however, replace this with a custom handler if you wish.
+      The specified record is the one which was being processed when the exception
+      occurred. (The default value of ``raiseExceptions`` is ``True``, as that is
+      more useful during development).
 
 
-.. method:: Handler.format(record)
+   .. method:: Handler.format(record)
 
-   Do formatting for a record - if a formatter is set, use it. Otherwise, use the
-   default formatter for the module.
+      Do formatting for a record - if a formatter is set, use it. Otherwise, use the
+      default formatter for the module.
 
 
-.. method:: Handler.emit(record)
+   .. method:: Handler.emit(record)
 
-   Do whatever it takes to actually log the specified logging record. This version
-   is intended to be implemented by subclasses and so raises a
-   :exc:`NotImplementedError`.
+      Do whatever it takes to actually log the specified logging record. This version
+      is intended to be implemented by subclasses and so raises a
+      :exc:`NotImplementedError`.
 
 For a list of handlers included as standard, see :mod:`logging.handlers`.
 
@@ -772,15 +780,15 @@ the options available to you.
 | lineno         | ``%(lineno)d``          | Source line number where the logging call was |
 |                |                         | issued (if available).                        |
 +----------------+-------------------------+-----------------------------------------------+
+| message        | ``%(message)s``         | The logged message, computed as ``msg %       |
+|                |                         | args``. This is set when                      |
+|                |                         | :meth:`Formatter.format` is invoked.          |
++----------------+-------------------------+-----------------------------------------------+
 | module         | ``%(module)s``          | Module (name portion of ``filename``).        |
 +----------------+-------------------------+-----------------------------------------------+
 | msecs          | ``%(msecs)d``           | Millisecond portion of the time when the      |
 |                |                         | :class:`LogRecord` was created.               |
 +----------------+-------------------------+-----------------------------------------------+
-| message        | ``%(message)s``         | The logged message, computed as ``msg %       |
-|                |                         | args``. This is set when                      |
-|                |                         | :meth:`Formatter.format` is invoked.          |
-+----------------+-------------------------+-----------------------------------------------+
 | msg            | You shouldn't need to   | The format string passed in the original      |
 |                | format this yourself.   | logging call. Merged with ``args`` to         |
 |                |                         | produce ``message``, or an arbitrary object   |
@@ -1023,7 +1031,7 @@ functions.
       handlers being added multiple times to the root logger, which can in turn
       lead to multiple messages for the same event.
 
-.. function:: disable(lvl)
+.. function:: disable(lvl=CRITICAL)
 
    Provides an overriding level *lvl* for all loggers which takes precedence over
    the logger's own level. When the need arises to temporarily throttle logging
@@ -1036,6 +1044,14 @@ functions.
    overriding level, so that logging output again depends on the effective
    levels of individual loggers.
 
+   Note that if you have defined any custom logging level higher than
+   ``CRITICAL`` (this is not recommended), you won't be able to rely on the
+   default value for the *lvl* parameter, but will have to explicitly supply a
+   suitable value.
+
+   .. versionchanged:: 3.7
+      The *lvl* parameter was defaulted to level ``CRITICAL``. See Issue
+      #28524 for more information about this change.
 
 .. function:: addLevelName(lvl, levelName)
 
@@ -1248,4 +1264,3 @@ with the :mod:`warnings` module.
       package available from this site is suitable for use with Python 1.5.2, 2.1.x
       and 2.2.x, which do not include the :mod:`logging` package in the standard
       library.
-
diff -urpN Python-3.6.3/Doc/library/mailbox.rst Python-3.6.5/Doc/library/mailbox.rst
--- Python-3.6.3/Doc/library/mailbox.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/mailbox.rst	2018-03-28 11:19:31.000000000 +0200
@@ -491,7 +491,7 @@ Supported mailbox formats are Maildir, m
    `Configuring Netscape Mail on Unix: Why The Content-Length Format is Bad <https://www.jwz.org/doc/content-length.html>`_
       An argument for using the original mbox format rather than a variation.
 
-   `"mbox" is a family of several mutually incompatible mailbox formats <http://homepage.ntlworld.com/jonathan.deboynepollard/FGA/mail-mbox-formats.html>`_
+   `"mbox" is a family of several mutually incompatible mailbox formats <https://www.loc.gov/preservation/digital/formats/fdd/fdd000383.shtml>`_
       A history of mbox variations.
 
 
diff -urpN Python-3.6.3/Doc/library/math.rst Python-3.6.5/Doc/library/math.rst
--- Python-3.6.3/Doc/library/math.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/math.rst	2018-03-28 11:19:31.000000000 +0200
@@ -179,7 +179,7 @@ Number-theoretic and representation func
 
    Return the :class:`~numbers.Real` value *x* truncated to an
    :class:`~numbers.Integral` (usually an integer). Delegates to
-   ``x.__trunc__()``.
+   :meth:`x.__trunc__() <object.__trunc__>`.
 
 
 Note that :func:`frexp` and :func:`modf` have a different call/return pattern
diff -urpN Python-3.6.3/Doc/library/msilib.rst Python-3.6.5/Doc/library/msilib.rst
--- Python-3.6.3/Doc/library/msilib.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/msilib.rst	2018-03-28 11:19:31.000000000 +0200
@@ -124,9 +124,9 @@ structures.
 
 .. seealso::
 
-   `FCICreateFile <https://msdn.microsoft.com/library?url=/library/en-us/devnotes/winprog/fcicreate.asp>`_
-   `UuidCreate <https://msdn.microsoft.com/library?url=/library/en-us/rpc/rpc/uuidcreate.asp>`_
-   `UuidToString <https://msdn.microsoft.com/library?url=/library/en-us/rpc/rpc/uuidtostring.asp>`_
+   `FCICreate <https://msdn.microsoft.com/en-us/library/bb432265.aspx>`_
+   `UuidCreate <https://msdn.microsoft.com/en-us/library/windows/desktop/aa379205.aspx>`_
+   `UuidToString <https://msdn.microsoft.com/en-us/library/windows/desktop/aa379352.aspx>`_
 
 .. _database-objects:
 
@@ -155,9 +155,9 @@ Database Objects
 
 .. seealso::
 
-   `MSIDatabaseOpenView <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msidatabaseopenview.asp>`_
-   `MSIDatabaseCommit <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msidatabasecommit.asp>`_
-   `MSIGetSummaryInformation <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msigetsummaryinformation.asp>`_
+   `MSIDatabaseOpenView <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370082.aspx>`_
+   `MSIDatabaseCommit <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370075.aspx>`_
+   `MSIGetSummaryInformation <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370301.aspx>`_
 
 .. _view-objects:
 
@@ -203,11 +203,11 @@ View Objects
 
 .. seealso::
 
-   `MsiViewExecute <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msiviewexecute.asp>`_
-   `MSIViewGetColumnInfo <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msiviewgetcolumninfo.asp>`_
-   `MsiViewFetch <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msiviewfetch.asp>`_
-   `MsiViewModify <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msiviewmodify.asp>`_
-   `MsiViewClose <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msiviewclose.asp>`_
+   `MsiViewExecute <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370513.aspx>`_
+   `MSIViewGetColumnInfo <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370516.aspx>`_
+   `MsiViewFetch <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370514.aspx>`_
+   `MsiViewModify <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370519.aspx>`_
+   `MsiViewClose <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370510.aspx>`_
 
 .. _summary-objects:
 
@@ -247,10 +247,10 @@ Summary Information Objects
 
 .. seealso::
 
-   `MsiSummaryInfoGetProperty <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msisummaryinfogetproperty.asp>`_
-   `MsiSummaryInfoGetPropertyCount <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msisummaryinfogetpropertycount.asp>`_
-   `MsiSummaryInfoSetProperty <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msisummaryinfosetproperty.asp>`_
-   `MsiSummaryInfoPersist <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msisummaryinfopersist.asp>`_
+   `MsiSummaryInfoGetProperty <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370409.aspx>`_
+   `MsiSummaryInfoGetPropertyCount <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370488.aspx>`_
+   `MsiSummaryInfoSetProperty <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370491.aspx>`_
+   `MsiSummaryInfoPersist <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370490.aspx>`_
 
 .. _record-objects:
 
@@ -301,18 +301,18 @@ Record Objects
 
 .. seealso::
 
-   `MsiRecordGetFieldCount <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msirecordgetfieldcount.asp>`_
-   `MsiRecordSetString <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msirecordsetstring.asp>`_
-   `MsiRecordSetStream <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msirecordsetstream.asp>`_
-   `MsiRecordSetInteger <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msirecordsetinteger.asp>`_
-   `MsiRecordClear <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/msirecordclear.asp>`_
+   `MsiRecordGetFieldCount <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370366.aspx>`_
+   `MsiRecordSetString <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370373.aspx>`_
+   `MsiRecordSetStream <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370372.aspx>`_
+   `MsiRecordSetInteger <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370371.aspx>`_
+   `MsiRecordClearData <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370364.aspx>`_
 
 .. _msi-errors:
 
 Errors
 ------
 
-All wrappers around MSI functions raise :exc:`MsiError`; the string inside the
+All wrappers around MSI functions raise :exc:`MSIError`; the string inside the
 exception will contain more detail.
 
 
@@ -392,15 +392,15 @@ Directory Objects
 
    .. method:: remove_pyc()
 
-      Remove ``.pyc``/``.pyo`` files on uninstall.
+      Remove ``.pyc`` files on uninstall.
 
 
 .. seealso::
 
-   `Directory Table <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/directory_table.asp>`_
-   `File Table <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/file_table.asp>`_
-   `Component Table <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/component_table.asp>`_
-   `FeatureComponents Table <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/featurecomponents_table.asp>`_
+   `Directory Table <https://msdn.microsoft.com/en-us/library/windows/desktop/aa368295.aspx>`_
+   `File Table <https://msdn.microsoft.com/en-us/library/windows/desktop/aa368596.aspx>`_
+   `Component Table <https://msdn.microsoft.com/en-us/library/windows/desktop/aa368007.aspx>`_
+   `FeatureComponents Table <https://msdn.microsoft.com/en-us/library/windows/desktop/aa368579.aspx>`_
 
 .. _features:
 
@@ -425,7 +425,7 @@ Features
 
 .. seealso::
 
-   `Feature Table <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/feature_table.asp>`_
+   `Feature Table <https://msdn.microsoft.com/en-us/library/windows/desktop/aa368585.aspx>`_
 
 .. _msi-gui:
 
@@ -520,13 +520,13 @@ for installing Python packages.
 
 .. seealso::
 
-   `Dialog Table <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/dialog_table.asp>`_
-   `Control Table <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/control_table.asp>`_
-   `Control Types <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/controls.asp>`_
-   `ControlCondition Table <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/controlcondition_table.asp>`_
-   `ControlEvent Table <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/controlevent_table.asp>`_
-   `EventMapping Table <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/eventmapping_table.asp>`_
-   `RadioButton Table <https://msdn.microsoft.com/library?url=/library/en-us/msi/setup/radiobutton_table.asp>`_
+   `Dialog Table <https://msdn.microsoft.com/en-us/library/windows/desktop/aa368286.aspx>`_
+   `Control Table <https://msdn.microsoft.com/en-us/library/windows/desktop/aa368044.aspx>`_
+   `Control Types <https://msdn.microsoft.com/en-us/library/windows/desktop/aa368039.aspx>`_
+   `ControlCondition Table <https://msdn.microsoft.com/en-us/library/windows/desktop/aa368035.aspx>`_
+   `ControlEvent Table <https://msdn.microsoft.com/en-us/library/windows/desktop/aa368037.aspx>`_
+   `EventMapping Table <https://msdn.microsoft.com/en-us/library/windows/desktop/aa368559.aspx>`_
+   `RadioButton Table <https://msdn.microsoft.com/en-us/library/windows/desktop/aa370962.aspx>`_
 
 .. _msi-tables:
 
diff -urpN Python-3.6.3/Doc/library/multiprocessing.rst Python-3.6.5/Doc/library/multiprocessing.rst
--- Python-3.6.3/Doc/library/multiprocessing.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/multiprocessing.rst	2018-03-28 11:19:31.000000000 +0200
@@ -1821,8 +1821,8 @@ Running the following commands creates a
 remote clients can access::
 
    >>> from multiprocessing.managers import BaseManager
-   >>> import queue
-   >>> queue = queue.Queue()
+   >>> from queue import Queue
+   >>> queue = Queue()
    >>> class QueueManager(BaseManager): pass
    >>> QueueManager.register('get_queue', callable=lambda:queue)
    >>> m = QueueManager(address=('', 50000), authkey=b'abracadabra')
@@ -2165,7 +2165,7 @@ with the :class:`Pool` class.
 
       .. versionadded:: 3.3
 
-   .. method:: starmap_async(func, iterable[, chunksize[, callback[, error_back]]])
+   .. method:: starmap_async(func, iterable[, chunksize[, callback[, error_callback]]])
 
       A combination of :meth:`starmap` and :meth:`map_async` that iterates over
       *iterable* of iterables and calls *func* with the iterables unpacked.
@@ -2280,7 +2280,7 @@ multiple connections at the same time.
    If a welcome message is not received, then
    :exc:`~multiprocessing.AuthenticationError` is raised.
 
-.. function:: Client(address[, family[, authenticate[, authkey]]])
+.. function:: Client(address[, family[, authkey]])
 
    Attempt to set up a connection to the listener which is using address
    *address*, returning a :class:`~multiprocessing.Connection`.
@@ -2289,14 +2289,13 @@ multiple connections at the same time.
    generally be omitted since it can usually be inferred from the format of
    *address*. (See :ref:`multiprocessing-address-formats`)
 
-   If *authenticate* is ``True`` or *authkey* is a byte string then digest
-   authentication is used.  The key used for authentication will be either
-   *authkey* or ``current_process().authkey`` if *authkey* is ``None``.
-   If authentication fails then
-   :exc:`~multiprocessing.AuthenticationError` is raised.  See
-   :ref:`multiprocessing-auth-keys`.
+   If *authkey* is given and not None, it should be a byte string and will be
+   used as the secret key for an HMAC-based authentication challenge. No
+   authentication is done if *authkey* is None.
+   :exc:`~multiprocessing.AuthenticationError` is raised if authentication fails.
+   See :ref:`multiprocessing-auth-keys`.
 
-.. class:: Listener([address[, family[, backlog[, authenticate[, authkey]]]]])
+.. class:: Listener([address[, family[, backlog[, authkey]]]])
 
    A wrapper for a bound socket or Windows named pipe which is 'listening' for
    connections.
@@ -2325,17 +2324,10 @@ multiple connections at the same time.
    to the :meth:`~socket.socket.listen` method of the socket once it has been
    bound.
 
-   If *authenticate* is ``True`` (``False`` by default) or *authkey* is not
-   ``None`` then digest authentication is used.
-
-   If *authkey* is a byte string then it will be used as the
-   authentication key; otherwise it must be ``None``.
-
-   If *authkey* is ``None`` and *authenticate* is ``True`` then
-   ``current_process().authkey`` is used as the authentication key.  If
-   *authkey* is ``None`` and *authenticate* is ``False`` then no
-   authentication is done.  If authentication fails then
-   :exc:`~multiprocessing.AuthenticationError` is raised.
+   If *authkey* is given and not None, it should be a byte string and will be
+   used as the secret key for an HMAC-based authentication challenge. No
+   authentication is done if *authkey* is None.
+   :exc:`~multiprocessing.AuthenticationError` is raised if authentication fails.
    See :ref:`multiprocessing-auth-keys`.
 
    .. method:: accept()
diff -urpN Python-3.6.3/Doc/library/operator.rst Python-3.6.5/Doc/library/operator.rst
--- Python-3.6.3/Doc/library/operator.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/operator.rst	2018-03-28 11:19:31.000000000 +0200
@@ -17,9 +17,10 @@
 
 The :mod:`operator` module exports a set of efficient functions corresponding to
 the intrinsic operators of Python.  For example, ``operator.add(x, y)`` is
-equivalent to the expression ``x+y``.  The function names are those used for
-special class methods; variants without leading and trailing ``__`` are also
-provided for convenience.
+equivalent to the expression ``x+y``. Many function names are those used for
+special methods, without the double underscores.  For backward compatibility,
+many of these have a variant with the double underscores kept. The variants
+without the double underscores are preferred for clarity.
 
 The functions fall into categories that perform object comparisons, logical
 operations, mathematical operations and sequence operations.
diff -urpN Python-3.6.3/Doc/library/optparse.rst Python-3.6.5/Doc/library/optparse.rst
--- Python-3.6.3/Doc/library/optparse.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/optparse.rst	2018-03-28 11:19:31.000000000 +0200
@@ -567,7 +567,7 @@ An option group is obtained using the cl
 
    where
 
-   * parser is the :class:`OptionParser` instance the group will be insterted in
+   * parser is the :class:`OptionParser` instance the group will be inserted in
      to
    * title is the group title
    * description, optional, is a long description of the group
diff -urpN Python-3.6.3/Doc/library/os.path.rst Python-3.6.5/Doc/library/os.path.rst
--- Python-3.6.3/Doc/library/os.path.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/os.path.rst	2018-03-28 11:19:31.000000000 +0200
@@ -246,8 +246,9 @@ the :mod:`glob` module.)
 
 .. function:: isfile(path)
 
-   Return ``True`` if *path* is an existing regular file.  This follows symbolic
-   links, so both :func:`islink` and :func:`isfile` can be true for the same path.
+   Return ``True`` if *path* is an :func:`existing <exists>` regular file.
+   This follows symbolic links, so both :func:`islink` and :func:`isfile` can
+   be true for the same path.
 
    .. versionchanged:: 3.6
       Accepts a :term:`path-like object`.
@@ -255,8 +256,9 @@ the :mod:`glob` module.)
 
 .. function:: isdir(path)
 
-   Return ``True`` if *path* is an existing directory.  This follows symbolic
-   links, so both :func:`islink` and :func:`isdir` can be true for the same path.
+   Return ``True`` if *path* is an :func:`existing <exists>` directory.  This
+   follows symbolic links, so both :func:`islink` and :func:`isdir` can be true
+   for the same path.
 
    .. versionchanged:: 3.6
       Accepts a :term:`path-like object`.
@@ -264,8 +266,9 @@ the :mod:`glob` module.)
 
 .. function:: islink(path)
 
-   Return ``True`` if *path* refers to a directory entry that is a symbolic link.
-   Always ``False`` if symbolic links are not supported by the Python runtime.
+   Return ``True`` if *path* refers to an :func:`existing <exists>` directory
+   entry that is a symbolic link.  Always ``False`` if symbolic links are not
+   supported by the Python runtime.
 
    .. versionchanged:: 3.6
       Accepts a :term:`path-like object`.
diff -urpN Python-3.6.3/Doc/library/os.rst Python-3.6.5/Doc/library/os.rst
--- Python-3.6.3/Doc/library/os.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/os.rst	2018-03-28 11:19:31.000000000 +0200
@@ -325,10 +325,11 @@ process and user.
 .. function:: getlogin()
 
    Return the name of the user logged in on the controlling terminal of the
-   process.  For most purposes, it is more useful to use the environment
-   variables :envvar:`LOGNAME` or :envvar:`USERNAME` to find out who the user
-   is, or ``pwd.getpwuid(os.getuid())[0]`` to get the login name of the current
-   real user id.
+   process.  For most purposes, it is more useful to use
+   :func:`getpass.getuser` since the latter checks the environment variables
+   :envvar:`LOGNAME` or :envvar:`USERNAME` to find out who the user is, and
+   falls back to ``pwd.getpwuid(os.getuid())[0]`` to get the login name of the
+   current real user id.
 
    Availability: Unix, Windows.
 
diff -urpN Python-3.6.3/Doc/library/ossaudiodev.rst Python-3.6.5/Doc/library/ossaudiodev.rst
--- Python-3.6.3/Doc/library/ossaudiodev.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/ossaudiodev.rst	2018-03-28 11:19:31.000000000 +0200
@@ -14,7 +14,7 @@ the standard audio interface for Linux a
 .. Things will get more complicated for future Linux versions, since
    ALSA is in the standard kernel as of 2.5.x.  Presumably if you
    use ALSA, you'll have to make sure its OSS compatibility layer
-   is active to use ossaudiodev, but you're gonna need it for the vast
+   is active to use ossaudiodev, but you're going to need it for the vast
    majority of Linux audio apps anyway.
 
    Sounds like things are also complicated for other BSDs.  In response
@@ -447,4 +447,3 @@ The remaining methods are specific to au
    microphone input::
 
       mixer.setrecsrc (1 << ossaudiodev.SOUND_MIXER_MIC)
-
diff -urpN Python-3.6.3/Doc/library/pickle.rst Python-3.6.5/Doc/library/pickle.rst
--- Python-3.6.3/Doc/library/pickle.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/pickle.rst	2018-03-28 11:19:31.000000000 +0200
@@ -370,7 +370,7 @@ The :mod:`pickle` module exports two cla
    Python 2 names to the new names used in Python 3.  The *encoding* and
    *errors* tell pickle how to decode 8-bit string instances pickled by Python
    2; these default to 'ASCII' and 'strict', respectively.  The *encoding* can
-   be 'bytes' to read these ß8-bit string instances as bytes objects.
+   be 'bytes' to read these 8-bit string instances as bytes objects.
 
    .. method:: load()
 
diff -urpN Python-3.6.3/Doc/library/quopri.rst Python-3.6.5/Doc/library/quopri.rst
--- Python-3.6.3/Doc/library/quopri.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/quopri.rst	2018-03-28 11:19:31.000000000 +0200
@@ -34,9 +34,10 @@ sending a graphics file.
 
    Encode the contents of the *input* file and write the resulting quoted-printable
    data to the *output* file. *input* and *output* must be
-   :term:`binary file objects <file object>`. *quotetabs*, a flag which controls
-   whether to encode embedded spaces and tabs must be provideda and when true it
-   encodes such embedded whitespace, and when false it leaves them unencoded.
+   :term:`binary file objects <file object>`. *quotetabs*, a
+   non-optional flag which controls whether to encode embedded spaces
+   and tabs; when true it encodes such embedded whitespace, and when
+   false it leaves them unencoded.
    Note that spaces and tabs appearing at the end of lines are always encoded,
    as per :rfc:`1521`.  *header* is a flag which controls if spaces are encoded
    as underscores as per :rfc:`1522`.
diff -urpN Python-3.6.3/Doc/library/re.rst Python-3.6.5/Doc/library/re.rst
--- Python-3.6.3/Doc/library/re.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/re.rst	2018-03-28 11:19:31.000000000 +0200
@@ -14,8 +14,9 @@
 This module provides regular expression matching operations similar to
 those found in Perl.
 
-Both patterns and strings to be searched can be Unicode strings as well as
-8-bit strings. However, Unicode strings and 8-bit strings cannot be mixed:
+Both patterns and strings to be searched can be Unicode strings (:class:`str`)
+as well as 8-bit strings (:class:`bytes`).
+However, Unicode strings and 8-bit strings cannot be mixed:
 that is, you cannot match a Unicode string with a byte pattern or
 vice-versa; similarly, when asking for a substitution, the replacement
 string must be of the same type as both the pattern and the search string.
@@ -81,9 +82,7 @@ strings to be matched ``'in single quote
 
 Some characters, like ``'|'`` or ``'('``, are special. Special
 characters either stand for classes of ordinary characters, or affect
-how the regular expressions around them are interpreted. Regular
-expression pattern strings may not contain null bytes, but can specify
-the null byte using a ``\number`` notation such as ``'\x00'``.
+how the regular expressions around them are interpreted.
 
 Repetition qualifiers (``*``, ``+``, ``?``, ``{m,n}``, etc) cannot be
 directly nested. This avoids ambiguity with the non-greedy modifier suffix
@@ -94,16 +93,16 @@ the expression ``(?:a{6})*`` matches any
 
 The special characters are:
 
-``'.'``
+``.``
    (Dot.)  In the default mode, this matches any character except a newline.  If
    the :const:`DOTALL` flag has been specified, this matches any character
    including a newline.
 
-``'^'``
+``^``
    (Caret.)  Matches the start of the string, and in :const:`MULTILINE` mode also
    matches immediately after each newline.
 
-``'$'``
+``$``
    Matches the end of the string or just before the newline at the end of the
    string, and in :const:`MULTILINE` mode also matches before a newline.  ``foo``
    matches both 'foo' and 'foobar', while the regular expression ``foo$`` matches
@@ -112,28 +111,28 @@ The special characters are:
    a single ``$`` in ``'foo\n'`` will find two (empty) matches: one just before
    the newline, and one at the end of the string.
 
-``'*'``
+``*``
    Causes the resulting RE to match 0 or more repetitions of the preceding RE, as
    many repetitions as are possible.  ``ab*`` will match 'a', 'ab', or 'a' followed
    by any number of 'b's.
 
-``'+'``
+``+``
    Causes the resulting RE to match 1 or more repetitions of the preceding RE.
    ``ab+`` will match 'a' followed by any non-zero number of 'b's; it will not
    match just 'a'.
 
-``'?'``
+``?``
    Causes the resulting RE to match 0 or 1 repetitions of the preceding RE.
    ``ab?`` will match either 'a' or 'ab'.
 
 ``*?``, ``+?``, ``??``
    The ``'*'``, ``'+'``, and ``'?'`` qualifiers are all :dfn:`greedy`; they match
    as much text as possible.  Sometimes this behaviour isn't desired; if the RE
-   ``<.*>`` is matched against ``<a> b <c>``, it will match the entire
-   string, and not just ``<a>``.  Adding ``?`` after the qualifier makes it
+   ``<.*>`` is matched against ``'<a> b <c>'``, it will match the entire
+   string, and not just ``'<a>'``.  Adding ``?`` after the qualifier makes it
    perform the match in :dfn:`non-greedy` or :dfn:`minimal` fashion; as *few*
    characters as possible will be matched.  Using the RE ``<.*?>`` will match
-   only ``<a>``.
+   only ``'<a>'``.
 
 ``{m}``
    Specifies that exactly *m* copies of the previous RE should be matched; fewer
@@ -145,8 +144,8 @@ The special characters are:
    RE, attempting to match as many repetitions as possible.  For example,
    ``a{3,5}`` will match from 3 to 5 ``'a'`` characters.  Omitting *m* specifies a
    lower bound of zero,  and omitting *n* specifies an infinite upper bound.  As an
-   example, ``a{4,}b`` will match ``aaaab`` or a thousand ``'a'`` characters
-   followed by a ``b``, but not ``aaab``. The comma may not be omitted or the
+   example, ``a{4,}b`` will match ``'aaaab'`` or a thousand ``'a'`` characters
+   followed by a ``'b'``, but not ``'aaab'``. The comma may not be omitted or the
    modifier would be confused with the previously described form.
 
 ``{m,n}?``
@@ -156,7 +155,7 @@ The special characters are:
    6-character string ``'aaaaaa'``, ``a{3,5}`` will match 5 ``'a'`` characters,
    while ``a{3,5}?`` will only match 3 characters.
 
-``'\'``
+``\``
    Either escapes special characters (permitting you to match characters like
    ``'*'``, ``'?'``, and so forth), or signals a special sequence; special
    sequences are discussed below.
@@ -179,8 +178,8 @@ The special characters are:
      them by a ``'-'``, for example ``[a-z]`` will match any lowercase ASCII letter,
      ``[0-5][0-9]`` will match all the two-digits numbers from ``00`` to ``59``, and
      ``[0-9A-Fa-f]`` will match any hexadecimal digit.  If ``-`` is escaped (e.g.
-     ``[a\-z]``) or if it's placed as the first or last character (e.g. ``[a-]``),
-     it will match a literal ``'-'``.
+     ``[a\-z]``) or if it's placed as the first or last character
+     (e.g. ``[-a]`` or ``[a-]``), it will match a literal ``'-'``.
 
    * Special characters lose their special meaning inside sets.  For example,
      ``[(+*)]`` will match any of the literal characters ``'('``, ``'+'``,
@@ -201,13 +200,13 @@ The special characters are:
      place it at the beginning of the set.  For example, both ``[()[\]{}]`` and
      ``[]()[{}]`` will both match a parenthesis.
 
-``'|'``
-   ``A|B``, where A and B can be arbitrary REs, creates a regular expression that
-   will match either A or B.  An arbitrary number of REs can be separated by the
+``|``
+   ``A|B``, where *A* and *B* can be arbitrary REs, creates a regular expression that
+   will match either *A* or *B*.  An arbitrary number of REs can be separated by the
    ``'|'`` in this way.  This can be used inside groups (see below) as well.  As
    the target string is scanned, REs separated by ``'|'`` are tried from left to
    right. When one pattern completely matches, that branch is accepted. This means
-   that once ``A`` matches, ``B`` will not be tested further, even if it would
+   that once *A* matches, *B* will not be tested further, even if it would
    produce a longer overall match.  In other words, the ``'|'`` operator is never
    greedy.  To match a literal ``'|'``, use ``\|``, or enclose it inside a
    character class, as in ``[|]``.
@@ -217,7 +216,7 @@ The special characters are:
    start and end of a group; the contents of a group can be retrieved after a match
    has been performed, and can be matched later in the string with the ``\number``
    special sequence, described below.  To match the literals ``'('`` or ``')'``,
-   use ``\(`` or ``\)``, or enclose them inside a character class: ``[(] [)]``.
+   use ``\(`` or ``\)``, or enclose them inside a character class: ``[(]``, ``[)]``.
 
 ``(?...)``
    This is an extension notation (a ``'?'`` following a ``'('`` is not meaningful
@@ -232,10 +231,11 @@ The special characters are:
    letters set the corresponding flags: :const:`re.A` (ASCII-only matching),
    :const:`re.I` (ignore case), :const:`re.L` (locale dependent),
    :const:`re.M` (multi-line), :const:`re.S` (dot matches all),
-   and :const:`re.X` (verbose), for the entire regular expression. (The
-   flags are described in :ref:`contents-of-module-re`.) This
-   is useful if you wish to include the flags as part of the regular
-   expression, instead of passing a *flag* argument to the
+   :const:`re.U` (Unicode matching), and :const:`re.X` (verbose),
+   for the entire regular expression.
+   (The flags are described in :ref:`contents-of-module-re`.)
+   This is useful if you wish to include the flags as part of the
+   regular expression, instead of passing a *flag* argument to the
    :func:`re.compile` function.  Flags should be used first in the
    expression string.
 
@@ -272,10 +272,10 @@ The special characters are:
    | in the same pattern itself            | * ``(?P=quote)`` (as shown)      |
    |                                       | * ``\1``                         |
    +---------------------------------------+----------------------------------+
-   | when processing match object ``m``    | * ``m.group('quote')``           |
+   | when processing match object *m*      | * ``m.group('quote')``           |
    |                                       | * ``m.end('quote')`` (etc.)      |
    +---------------------------------------+----------------------------------+
-   | in a string passed to the ``repl``    | * ``\g<quote>``                  |
+   | in a string passed to the *repl*      | * ``\g<quote>``                  |
    | argument of ``re.sub()``              | * ``\g<1>``                      |
    |                                       | * ``\1``                         |
    +---------------------------------------+----------------------------------+
@@ -289,18 +289,18 @@ The special characters are:
 
 ``(?=...)``
    Matches if ``...`` matches next, but doesn't consume any of the string.  This is
-   called a lookahead assertion.  For example, ``Isaac (?=Asimov)`` will match
+   called a :dfn:`lookahead assertion`.  For example, ``Isaac (?=Asimov)`` will match
    ``'Isaac '`` only if it's followed by ``'Asimov'``.
 
 ``(?!...)``
-   Matches if ``...`` doesn't match next.  This is a negative lookahead assertion.
+   Matches if ``...`` doesn't match next.  This is a :dfn:`negative lookahead assertion`.
    For example, ``Isaac (?!Asimov)`` will match ``'Isaac '`` only if it's *not*
    followed by ``'Asimov'``.
 
 ``(?<=...)``
    Matches if the current position in the string is preceded by a match for ``...``
    that ends at the current position.  This is called a :dfn:`positive lookbehind
-   assertion`. ``(?<=abc)def`` will find a match in ``abcdef``, since the
+   assertion`. ``(?<=abc)def`` will find a match in ``'abcdef'``, since the
    lookbehind will back up 3 characters and check if the contained pattern matches.
    The contained pattern must only match strings of some fixed length, meaning that
    ``abc`` or ``a|b`` are allowed, but ``a*`` and ``a{3,4}`` are not.  Note that
@@ -315,7 +315,7 @@ The special characters are:
 
    This example looks for a word following a hyphen:
 
-      >>> m = re.search('(?<=-)\w+', 'spam-egg')
+      >>> m = re.search(r'(?<=-)\w+', 'spam-egg')
       >>> m.group(0)
       'egg'
 
@@ -358,26 +358,26 @@ character ``'$'``.
 
 ``\b``
    Matches the empty string, but only at the beginning or end of a word.
-   A word is defined as a sequence of Unicode alphanumeric or underscore
-   characters, so the end of a word is indicated by whitespace or a
-   non-alphanumeric, non-underscore Unicode character.  Note that formally,
+   A word is defined as a sequence of word characters.  Note that formally,
    ``\b`` is defined as the boundary between a ``\w`` and a ``\W`` character
    (or vice versa), or between ``\w`` and the beginning/end of the string.
    This means that ``r'\bfoo\b'`` matches ``'foo'``, ``'foo.'``, ``'(foo)'``,
    ``'bar foo baz'`` but not ``'foobar'`` or ``'foo3'``.
 
-   By default Unicode alphanumerics are the ones used, but this can  be changed
-   by using the :const:`ASCII` flag.  Inside a character range, ``\b``
-   represents the backspace character, for compatibility with Python's string
-   literals.
+   By default Unicode alphanumerics are the ones used in Unicode patterns, but
+   this can be changed by using the :const:`ASCII` flag.  Word boundaries are
+   determined by the current locale if the :const:`LOCALE` flag is used.
+   Inside a character range, ``\b`` represents the backspace character, for
+   compatibility with Python's string literals.
 
 ``\B``
    Matches the empty string, but only when it is *not* at the beginning or end
    of a word.  This means that ``r'py\B'`` matches ``'python'``, ``'py3'``,
    ``'py2'``, but not ``'py'``, ``'py.'``, or ``'py!'``.
-   ``\B`` is just the opposite of ``\b``, so word characters are
-   Unicode alphanumerics or the underscore, although this can be changed
-   by using the :const:`ASCII` flag.
+   ``\B`` is just the opposite of ``\b``, so word characters in Unicode
+   patterns are Unicode alphanumerics or the underscore, although this can
+   be changed by using the :const:`ASCII` flag.  Word boundaries are
+   determined by the current locale if the :const:`LOCALE` flag is used.
 
 ``\d``
    For Unicode (str) patterns:
@@ -387,11 +387,12 @@ character ``'$'``.
       used only ``[0-9]`` is matched (but the flag affects the entire
       regular expression, so in such cases using an explicit ``[0-9]``
       may be a better choice).
+
    For 8-bit (bytes) patterns:
       Matches any decimal digit; this is equivalent to ``[0-9]``.
 
 ``\D``
-   Matches any character which is not a Unicode decimal digit. This is
+   Matches any character which is not a decimal digit. This is
    the opposite of ``\d``. If the :const:`ASCII` flag is used this
    becomes the equivalent of ``[^0-9]`` (but the flag affects the entire
    regular expression, so in such cases using an explicit ``[^0-9]`` may
@@ -412,7 +413,7 @@ character ``'$'``.
       this is equivalent to ``[ \t\n\r\f\v]``.
 
 ``\S``
-   Matches any character which is not a Unicode whitespace character. This is
+   Matches any character which is not a whitespace character. This is
    the opposite of ``\s``. If the :const:`ASCII` flag is used this
    becomes the equivalent of ``[^ \t\n\r\f\v]`` (but the flag affects the entire
    regular expression, so in such cases using an explicit ``[^ \t\n\r\f\v]`` may
@@ -426,16 +427,21 @@ character ``'$'``.
       ``[a-zA-Z0-9_]`` is matched (but the flag affects the entire
       regular expression, so in such cases using an explicit
       ``[a-zA-Z0-9_]`` may be a better choice).
+
    For 8-bit (bytes) patterns:
       Matches characters considered alphanumeric in the ASCII character set;
-      this is equivalent to ``[a-zA-Z0-9_]``.
+      this is equivalent to ``[a-zA-Z0-9_]``.  If the :const:`LOCALE` flag is
+      used, matches characters considered alphanumeric in the current locale
+      and the underscore.
 
 ``\W``
-   Matches any character which is not a Unicode word character. This is
+   Matches any character which is not a word character. This is
    the opposite of ``\w``. If the :const:`ASCII` flag is used this
    becomes the equivalent of ``[^a-zA-Z0-9_]`` (but the flag affects the
    entire regular expression, so in such cases using an explicit
-   ``[^a-zA-Z0-9_]`` may be a better choice).
+   ``[^a-zA-Z0-9_]`` may be a better choice).  If the :const:`LOCALE` flag is
+   used, matches characters considered alphanumeric in the current locale
+   and the underscore.
 
 ``\Z``
    Matches only at the end of the string.
@@ -451,7 +457,7 @@ accepted by the regular expression parse
 only inside character classes.)
 
 ``'\u'`` and ``'\U'`` escape sequences are only recognized in Unicode
-patterns.  In bytes patterns they are not treated specially.
+patterns.  In bytes patterns they are errors.
 
 Octal escapes are included in a limited form.  If the first digit is a 0, or if
 there are three octal digits, it is considered an octal escape. Otherwise, it is
@@ -526,6 +532,7 @@ form.
    Make ``\w``, ``\W``, ``\b``, ``\B``, ``\d``, ``\D``, ``\s`` and ``\S``
    perform ASCII-only matching instead of full Unicode matching.  This is only
    meaningful for Unicode patterns, and is ignored for byte patterns.
+   Corresponds to the inline flag ``(?a)``.
 
    Note that for backward compatibility, the :const:`re.U` flag still
    exists (as well as its synonym :const:`re.UNICODE` and its embedded
@@ -537,26 +544,40 @@ form.
 .. data:: DEBUG
 
    Display debug information about compiled expression.
+   No corresponding inline flag.
 
 
 .. data:: I
           IGNORECASE
 
    Perform case-insensitive matching; expressions like ``[A-Z]`` will also
-   match lowercase letters.  The current locale does not change the effect of
-   this flag.  Full Unicode matching (such as ``Ü`` matching ``ü``) also
-   works unless the :const:`re.ASCII` flag is also used to disable non-ASCII
-   matches.
-
+   match lowercase letters.  Full Unicode matching (such as ``Ü`` matching
+   ``ü``) also works unless the :const:`re.ASCII` flag is used to disable
+   non-ASCII matches.  The current locale does not change the effect of this
+   flag unless the :const:`re.LOCALE` flag is also used.
+   Corresponds to the inline flag ``(?i)``.
+
+   Note that when the Unicode patterns ``[a-z]`` or ``[A-Z]`` are used in
+   combination with the :const:`IGNORECASE` flag, they will match the 52 ASCII
+   letters and 4 additional non-ASCII letters: 'İ' (U+0130, Latin capital
+   letter I with dot above), 'ı' (U+0131, Latin small letter dotless i),
+   'ſ' (U+017F, Latin small letter long s) and 'K' (U+212A, Kelvin sign).
+   If the :const:`ASCII` flag is used, only letters 'a' to 'z'
+   and 'A' to 'Z' are matched (but the flag affects the entire regular
+   expression, so in such cases using an explicit ``(?-i:[a-zA-Z])`` may be
+   a better choice).
 
 .. data:: L
           LOCALE
 
-   Make ``\w``, ``\W``, ``\b``, ``\B``, ``\s`` and ``\S`` dependent on the
-   current locale. The use of this flag is discouraged as the locale mechanism
-   is very unreliable, and it only handles one "culture" at a time anyway;
-   you should use Unicode matching instead, which is the default in Python 3
-   for Unicode (str) patterns. This flag can be used only with bytes patterns.
+   Make ``\w``, ``\W``, ``\b``, ``\B`` and case-insensitive matching
+   dependent on the current locale.  This flag can be used only with bytes
+   patterns.  The use of this flag is discouraged as the locale mechanism
+   is very unreliable, it only handles one "culture" at a time, and it only
+   works with 8-bit locales.  Unicode matching is already enabled by default
+   in Python 3 for Unicode (str) patterns, and it is able to handle different
+   locales/languages.
+   Corresponds to the inline flag ``(?L)``.
 
    .. versionchanged:: 3.6
       :const:`re.LOCALE` can be used only with bytes patterns and is
@@ -572,6 +593,7 @@ form.
    end of each line (immediately preceding each newline).  By default, ``'^'``
    matches only at the beginning of the string, and ``'$'`` only at the end of the
    string and immediately before the newline (if any) at the end of the string.
+   Corresponds to the inline flag ``(?m)``.
 
 
 .. data:: S
@@ -579,6 +601,7 @@ form.
 
    Make the ``'.'`` special character match any character at all, including a
    newline; without this flag, ``'.'`` will match anything *except* a newline.
+   Corresponds to the inline flag ``(?s)``.
 
 
 .. data:: X
@@ -587,7 +610,8 @@ form.
    This flag allows you to write regular expressions that look nicer and are
    more readable by allowing you to visually separate logical sections of the
    pattern and add comments. Whitespace within the pattern is ignored, except
-   when in a character class or when preceded by an unescaped backslash.
+   when in a character class, or when preceded by an unescaped backslash,
+   or within tokens like ``*?``, ``(?:`` or ``(?P<...>``.
    When a line contains a ``#`` that is not in a character class and is not
    preceded by an unescaped backslash, all characters from the leftmost such
    ``#`` through the end of the line are ignored.
@@ -600,7 +624,7 @@ form.
                          \d *  # some fractional digits""", re.X)
       b = re.compile(r"\d+\.\d*")
 
-
+   Corresponds to the inline flag ``(?x)``.
 
 
 .. function:: search(pattern, string, flags=0)
@@ -644,20 +668,20 @@ form.
    splits occur, and the remainder of the string is returned as the final element
    of the list. ::
 
-      >>> re.split('\W+', 'Words, words, words.')
+      >>> re.split(r'\W+', 'Words, words, words.')
       ['Words', 'words', 'words', '']
-      >>> re.split('(\W+)', 'Words, words, words.')
+      >>> re.split(r'(\W+)', 'Words, words, words.')
       ['Words', ', ', 'words', ', ', 'words', '.', '']
-      >>> re.split('\W+', 'Words, words, words.', 1)
+      >>> re.split(r'\W+', 'Words, words, words.', 1)
       ['Words', 'words, words.']
       >>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)
       ['0', '3', '9']
 
    If there are capturing groups in the separator and it matches at the start of
    the string, the result will start with an empty string.  The same holds for
-   the end of the string:
+   the end of the string::
 
-      >>> re.split('(\W+)', '...words, words...')
+      >>> re.split(r'(\W+)', '...words, words...')
       ['', '...', 'words', ', ', 'words', '...', '']
 
    That way, separator components are always found at the same relative
@@ -666,7 +690,7 @@ form.
    .. note::
 
       :func:`split` doesn't currently split a string on an empty pattern match.
-      For example:
+      For example::
 
          >>> re.split('x*', 'axbc')
          ['a', 'bc']
@@ -695,14 +719,21 @@ form.
       Splitting on a pattern that could match an empty string now raises
       a warning.  Patterns that can only match empty strings are now rejected.
 
+
 .. function:: findall(pattern, string, flags=0)
 
    Return all non-overlapping matches of *pattern* in *string*, as a list of
    strings.  The *string* is scanned left-to-right, and matches are returned in
    the order found.  If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern has more than
-   one group.  Empty matches are included in the result unless they touch the
-   beginning of another match.
+   one group.  Empty matches are included in the result.
+
+   .. note::
+
+      Due to the limitation of the current implementation the character
+      following an empty match is not included in a next match, so
+      ``findall(r'^|\w+', 'two words')`` returns ``['', 'wo', 'words']``
+      (note missed "t").  This is changed in Python 3.7.
 
 
 .. function:: finditer(pattern, string, flags=0)
@@ -710,8 +741,7 @@ form.
    Return an :term:`iterator` yielding :ref:`match objects <match-objects>` over
    all non-overlapping matches for the RE *pattern* in *string*.  The *string*
    is scanned left-to-right, and matches are returned in the order found.  Empty
-   matches are included in the result unless they touch the beginning of another
-   match.
+   matches are included in the result.  See also the note about :func:`findall`.
 
 
 .. function:: sub(pattern, repl, string, count=0, flags=0)
@@ -723,7 +753,7 @@ form.
    converted to a single newline character, ``\r`` is converted to a carriage return, and
    so forth.  Unknown escapes such as ``\&`` are left alone.  Backreferences, such
    as ``\6``, are replaced with the substring matched by group 6 in the pattern.
-   For example:
+   For example::
 
       >>> re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',
       ...        r'static PyObject*\npy_\1(void)\n{',
@@ -731,8 +761,8 @@ form.
       'static PyObject*\npy_myfunc(void)\n{'
 
    If *repl* is a function, it is called for every non-overlapping occurrence of
-   *pattern*.  The function takes a single match object argument, and returns the
-   replacement string.  For example:
+   *pattern*.  The function takes a single :ref:`match object <match-objects>`
+   argument, and returns the replacement string.  For example::
 
       >>> def dashrepl(matchobj):
       ...     if matchobj.group(0) == '-': return ' '
@@ -742,7 +772,7 @@ form.
       >>> re.sub(r'\sAND\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)
       'Baked Beans & Spam'
 
-   The pattern may be a string or an RE object.
+   The pattern may be a string or a :ref:`pattern object <re-objects>`.
 
    The optional argument *count* is the maximum number of pattern occurrences to be
    replaced; *count* must be a non-negative integer.  If omitted or zero, all
@@ -804,6 +834,14 @@ form.
       >>> print('|'.join(map(re.escape, sorted(operators, reverse=True))))
       \/|\-|\+|\*\*|\*
 
+   This functions must not be used for the replacement string in :func:`sub`
+   and :func:`subn`, only backslashes should be escaped.  For example::
+
+      >>> digits_re = r'\d+'
+      >>> sample = '/usr/sbin/sendmail - 0 errors, 12 warnings'
+      >>> print(re.sub(digits_re, digits_re.replace('\\', r'\\'), sample))
+      /usr/sbin/sendmail - \d+ errors, \d+ warnings
+
    .. versionchanged:: 3.3
       The ``'_'`` character is no longer escaped.
 
@@ -871,12 +909,12 @@ attributes:
    from *pos* to ``endpos - 1`` will be searched for a match.  If *endpos* is less
    than *pos*, no match will be found; otherwise, if *rx* is a compiled regular
    expression object, ``rx.search(string, 0, 50)`` is equivalent to
-   ``rx.search(string[:50], 0)``.
+   ``rx.search(string[:50], 0)``. ::
 
-   >>> pattern = re.compile("d")
-   >>> pattern.search("dog")     # Match at index 0
-   <_sre.SRE_Match object; span=(0, 1), match='d'>
-   >>> pattern.search("dog", 1)  # No match; search doesn't include the "d"
+      >>> pattern = re.compile("d")
+      >>> pattern.search("dog")     # Match at index 0
+      <_sre.SRE_Match object; span=(0, 1), match='d'>
+      >>> pattern.search("dog", 1)  # No match; search doesn't include the "d"
 
 
 .. method:: regex.match(string[, pos[, endpos]])
@@ -887,12 +925,12 @@ attributes:
    different from a zero-length match.
 
    The optional *pos* and *endpos* parameters have the same meaning as for the
-   :meth:`~regex.search` method.
+   :meth:`~regex.search` method. ::
 
-   >>> pattern = re.compile("o")
-   >>> pattern.match("dog")      # No match as "o" is not at the start of "dog".
-   >>> pattern.match("dog", 1)   # Match as "o" is the 2nd character of "dog".
-   <_sre.SRE_Match object; span=(1, 2), match='o'>
+      >>> pattern = re.compile("o")
+      >>> pattern.match("dog")      # No match as "o" is not at the start of "dog".
+      >>> pattern.match("dog", 1)   # Match as "o" is the 2nd character of "dog".
+      <_sre.SRE_Match object; span=(1, 2), match='o'>
 
    If you want to locate a match anywhere in *string*, use
    :meth:`~regex.search` instead (see also :ref:`search-vs-match`).
@@ -905,13 +943,13 @@ attributes:
    match the pattern; note that this is different from a zero-length match.
 
    The optional *pos* and *endpos* parameters have the same meaning as for the
-   :meth:`~regex.search` method.
+   :meth:`~regex.search` method. ::
 
-   >>> pattern = re.compile("o[gh]")
-   >>> pattern.fullmatch("dog")      # No match as "o" is not at the start of "dog".
-   >>> pattern.fullmatch("ogre")     # No match as not the full string matches.
-   >>> pattern.fullmatch("doggie", 1, 3)   # Matches within given limits.
-   <_sre.SRE_Match object; span=(1, 3), match='og'>
+      >>> pattern = re.compile("o[gh]")
+      >>> pattern.fullmatch("dog")      # No match as "o" is not at the start of "dog".
+      >>> pattern.fullmatch("ogre")     # No match as not the full string matches.
+      >>> pattern.fullmatch("doggie", 1, 3)   # Matches within given limits.
+      <_sre.SRE_Match object; span=(1, 3), match='og'>
 
    .. versionadded:: 3.4
 
@@ -925,14 +963,14 @@ attributes:
 
    Similar to the :func:`findall` function, using the compiled pattern, but
    also accepts optional *pos* and *endpos* parameters that limit the search
-   region like for :meth:`match`.
+   region like for :meth:`search`.
 
 
 .. method:: regex.finditer(string[, pos[, endpos]])
 
    Similar to the :func:`finditer` function, using the compiled pattern, but
    also accepts optional *pos* and *endpos* parameters that limit the search
-   region like for :meth:`match`.
+   region like for :meth:`search`.
 
 
 .. method:: regex.sub(repl, string, count=0)
@@ -1010,7 +1048,7 @@ Match objects support the following meth
    pattern, an :exc:`IndexError` exception is raised. If a group is contained in a
    part of the pattern that did not match, the corresponding result is ``None``.
    If a group is contained in a part of the pattern that matched multiple times,
-   the last match is returned.
+   the last match is returned. ::
 
       >>> m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
       >>> m.group(0)       # The entire match
@@ -1027,7 +1065,7 @@ Match objects support the following meth
    string argument is not used as a group name in the pattern, an :exc:`IndexError`
    exception is raised.
 
-   A moderately complicated example:
+   A moderately complicated example::
 
       >>> m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Malcolm Reynolds")
       >>> m.group('first_name')
@@ -1035,14 +1073,14 @@ Match objects support the following meth
       >>> m.group('last_name')
       'Reynolds'
 
-   Named groups can also be referred to by their index:
+   Named groups can also be referred to by their index::
 
       >>> m.group(1)
       'Malcolm'
       >>> m.group(2)
       'Reynolds'
 
-   If a group matches multiple times, only the last match is accessible:
+   If a group matches multiple times, only the last match is accessible::
 
       >>> m = re.match(r"(..)+", "a1b2c3")  # Matches 3 times.
       >>> m.group(1)                        # Returns only the last match.
@@ -1052,7 +1090,7 @@ Match objects support the following meth
 .. method:: match.__getitem__(g)
 
    This is identical to ``m.group(g)``.  This allows easier access to
-   an individual group from a match:
+   an individual group from a match::
 
       >>> m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
       >>> m[0]       # The entire match
@@ -1071,7 +1109,7 @@ Match objects support the following meth
    many groups are in the pattern.  The *default* argument is used for groups that
    did not participate in the match; it defaults to ``None``.
 
-   For example:
+   For example::
 
       >>> m = re.match(r"(\d+)\.(\d+)", "24.1632")
       >>> m.groups()
@@ -1079,7 +1117,7 @@ Match objects support the following meth
 
    If we make the decimal place and everything after it optional, not all groups
    might participate in the match.  These groups will default to ``None`` unless
-   the *default* argument is given:
+   the *default* argument is given::
 
       >>> m = re.match(r"(\d+)\.?(\d+)?", "24")
       >>> m.groups()      # Second group defaults to None.
@@ -1092,7 +1130,7 @@ Match objects support the following meth
 
    Return a dictionary containing all the *named* subgroups of the match, keyed by
    the subgroup name.  The *default* argument is used for groups that did not
-   participate in the match; it defaults to ``None``.  For example:
+   participate in the match; it defaults to ``None``.  For example::
 
       >>> m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Malcolm Reynolds")
       >>> m.groupdict()
@@ -1115,7 +1153,7 @@ Match objects support the following meth
    ``m.start(0)`` is 1, ``m.end(0)`` is 2, ``m.start(1)`` and ``m.end(1)`` are both
    2, and ``m.start(2)`` raises an :exc:`IndexError` exception.
 
-   An example that will remove *remove_this* from email addresses:
+   An example that will remove *remove_this* from email addresses::
 
       >>> email = "tony@tiremove_thisger.net"
       >>> m = re.search("remove_this", email)
@@ -1161,7 +1199,7 @@ Match objects support the following meth
 
 .. attribute:: match.re
 
-   The regular expression object whose :meth:`~regex.match` or
+   The :ref:`regular expression object <re-objects>` whose :meth:`~regex.match` or
    :meth:`~regex.search` method produced this match instance.
 
 
@@ -1194,7 +1232,7 @@ a 5-character string with each character
 for king, "q" for queen, "j" for jack, "t" for 10, and "2" through "9"
 representing the card with that value.
 
-To see if a given string is a valid hand, one could do the following:
+To see if a given string is a valid hand, one could do the following::
 
    >>> valid = re.compile(r"^[a2-9tjqk]{5}$")
    >>> displaymatch(valid.match("akt5q"))  # Valid.
@@ -1205,7 +1243,7 @@ To see if a given string is a valid hand
    "<Match: '727ak', groups=()>"
 
 That last hand, ``"727ak"``, contained a pair, or two of the same valued cards.
-To match this with a regular expression, one could use backreferences as such:
+To match this with a regular expression, one could use backreferences as such::
 
    >>> pair = re.compile(r".*(.).*\1")
    >>> displaymatch(pair.match("717ak"))     # Pair of 7s.
@@ -1307,7 +1345,7 @@ restrict the match at the beginning of t
 
 Note however that in :const:`MULTILINE` mode :func:`match` only matches at the
 beginning of the string, whereas using :func:`search` with a regular expression
-beginning with ``'^'`` will match at the beginning of each line.
+beginning with ``'^'`` will match at the beginning of each line. ::
 
    >>> re.match('X', 'A\nB\nX', re.MULTILINE)  # No match
    >>> re.search('^X', 'A\nB\nX', re.MULTILINE)  # Match
@@ -1323,7 +1361,7 @@ easily read and modified by Python as de
 creates a phonebook.
 
 First, here is the input.  Normally it may come from a file, here we are using
-triple-quoted string syntax:
+triple-quoted string syntax::
 
    >>> text = """Ross McFluff: 834.345.1254 155 Elm Street
    ...
@@ -1398,7 +1436,7 @@ Finding all Adverbs
 :func:`findall` matches *all* occurrences of a pattern, not just the first
 one as :func:`search` does.  For example, if one was a writer and wanted to
 find all of the adverbs in some text, he or she might use :func:`findall` in
-the following manner:
+the following manner::
 
    >>> text = "He was carefully disguised but captured quickly by police."
    >>> re.findall(r"\w+ly", text)
@@ -1412,7 +1450,7 @@ If one wants more information about all
 text, :func:`finditer` is useful as it provides :ref:`match objects
 <match-objects>` instead of strings.  Continuing with the previous example, if
 one was a writer who wanted to find all of the adverbs *and their positions* in
-some text, he or she would use :func:`finditer` in the following manner:
+some text, he or she would use :func:`finditer` in the following manner::
 
    >>> text = "He was carefully disguised but captured quickly by police."
    >>> for m in re.finditer(r"\w+ly", text):
@@ -1427,7 +1465,7 @@ Raw String Notation
 Raw string notation (``r"text"``) keeps regular expressions sane.  Without it,
 every backslash (``'\'``) in a regular expression would have to be prefixed with
 another one to escape it.  For example, the two following lines of code are
-functionally identical:
+functionally identical::
 
    >>> re.match(r"\W(.)\1\W", " ff ")
    <_sre.SRE_Match object; span=(0, 4), match=' ff '>
@@ -1437,7 +1475,7 @@ functionally identical:
 When one wants to match a literal backslash, it must be escaped in the regular
 expression.  With raw string notation, this means ``r"\\"``.  Without raw string
 notation, one must use ``"\\\\"``, making the following lines of code
-functionally identical:
+functionally identical::
 
    >>> re.match(r"\\", r"\\")
    <_sre.SRE_Match object; span=(0, 1), match='\\'>
diff -urpN Python-3.6.3/Doc/library/readline.rst Python-3.6.5/Doc/library/readline.rst
--- Python-3.6.3/Doc/library/readline.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/readline.rst	2018-03-28 11:19:31.000000000 +0200
@@ -312,13 +312,13 @@ sessions, by only appending the new hist
 
    try:
        readline.read_history_file(histfile)
-       h_len = readline.get_history_length()
+       h_len = readline.get_current_history_length()
    except FileNotFoundError:
        open(histfile, 'wb').close()
        h_len = 0
 
    def save(prev_h_len, histfile):
-       new_h_len = readline.get_history_length()
+       new_h_len = readline.get_current_history_length()
        readline.set_history_length(1000)
        readline.append_history_file(new_h_len - prev_h_len, histfile)
    atexit.register(save, h_len, histfile)
diff -urpN Python-3.6.3/Doc/library/sched.rst Python-3.6.5/Doc/library/sched.rst
--- Python-3.6.3/Doc/library/sched.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/sched.rst	2018-03-28 11:19:31.000000000 +0200
@@ -69,7 +69,7 @@ Scheduler Objects
    Schedule a new event. The *time* argument should be a numeric type compatible
    with the return value of the *timefunc* function passed  to the constructor.
    Events scheduled for the same *time* will be executed in the order of their
-   *priority*.
+   *priority*. A lower number represents a higher priority.
 
    Executing the event means executing ``action(*argument, **kwargs)``.
    *argument* is a sequence holding the positional arguments for *action*.
diff -urpN Python-3.6.3/Doc/library/shutil.rst Python-3.6.5/Doc/library/shutil.rst
--- Python-3.6.3/Doc/library/shutil.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/shutil.rst	2018-03-28 11:19:31.000000000 +0200
@@ -318,7 +318,8 @@ Directory and files operations
 
    Return disk usage statistics about the given path as a :term:`named tuple`
    with the attributes *total*, *used* and *free*, which are the amount of
-   total, used and free space, in bytes.
+   total, used and free space, in bytes.  On Windows, *path* must be a
+   directory; on Unix, it can be a file or directory.
 
    .. versionadded:: 3.3
 
diff -urpN Python-3.6.3/Doc/library/socket.rst Python-3.6.5/Doc/library/socket.rst
--- Python-3.6.3/Doc/library/socket.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/socket.rst	2018-03-28 11:19:31.000000000 +0200
@@ -303,6 +303,10 @@ Constants
       ``SO_DOMAIN``, ``SO_PROTOCOL``, ``SO_PEERSEC``, ``SO_PASSSEC``,
       ``TCP_USER_TIMEOUT``, ``TCP_CONGESTION`` were added.
 
+   .. versionchanged:: 3.6.5
+      On Windows, ``TCP_FASTOPEN``, ``TCP_KEEPCNT`` appear if run-time Windows
+      supports.
+
 .. data:: AF_CAN
           PF_CAN
           SOL_CAN_*
diff -urpN Python-3.6.3/Doc/library/socketserver.rst Python-3.6.5/Doc/library/socketserver.rst
--- Python-3.6.3/Doc/library/socketserver.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/socketserver.rst	2018-03-28 11:19:31.000000000 +0200
@@ -289,7 +289,7 @@ Server Objects
    .. XXX should the default implementations of these be documented, or should
       it be assumed that the user will look at socketserver.py?
 
-   .. method:: finish_request()
+   .. method:: finish_request(request, client_address)
 
       Actually processes the request by instantiating :attr:`RequestHandlerClass` and
       calling its :meth:`~BaseRequestHandler.handle` method.
diff -urpN Python-3.6.3/Doc/library/sqlite3.rst Python-3.6.5/Doc/library/sqlite3.rst
--- Python-3.6.3/Doc/library/sqlite3.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/sqlite3.rst	2018-03-28 11:19:31.000000000 +0200
@@ -421,6 +421,10 @@ Connection Objects
       If you want to clear any previously installed progress handler, call the
       method with :const:`None` for *handler*.
 
+      Returning a non-zero value from the handler function will terminate the
+      currently executing query and cause it to raise an :exc:`OperationalError`
+      exception.
+
 
    .. method:: set_trace_callback(trace_callback)
 
diff -urpN Python-3.6.3/Doc/library/ssl.rst Python-3.6.5/Doc/library/ssl.rst
--- Python-3.6.3/Doc/library/ssl.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/ssl.rst	2018-03-28 11:19:31.000000000 +0200
@@ -218,7 +218,7 @@ instead.
 
    The *ciphers* parameter sets the available ciphers for this SSL object.
    It should be a string in the `OpenSSL cipher list format
-   <https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT>`_.
+   <https://wiki.openssl.org/index.php/Manual:Ciphers(1)#CIPHER_LIST_FORMAT>`_.
 
    The parameter ``do_handshake_on_connect`` specifies whether to do the SSL
    handshake automatically after doing a :meth:`socket.connect`, or whether the
@@ -1351,7 +1351,7 @@ to speed up repeated connections from th
    The *capath* string, if present, is
    the path to a directory containing several CA certificates in PEM format,
    following an `OpenSSL specific layout
-   <https://www.openssl.org/docs/ssl/SSL_CTX_load_verify_locations.html>`_.
+   <https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_load_verify_locations.html>`_.
 
    The *cadata* object, if present, is either an ASCII string of one or more
    PEM-encoded certificates or a :term:`bytes-like object` of DER-encoded
@@ -1445,7 +1445,7 @@ to speed up repeated connections from th
 
    Set the available ciphers for sockets created with this context.
    It should be a string in the `OpenSSL cipher list format
-   <https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT>`_.
+   <https://wiki.openssl.org/index.php/Manual:Ciphers(1)#CIPHER_LIST_FORMAT>`_.
    If no cipher can be selected (because compile-time options or other
    configuration forbids use of all the specified ciphers), an
    :class:`SSLError` will be raised.
@@ -1539,7 +1539,7 @@ to speed up repeated connections from th
 
 .. method:: SSLContext.load_dh_params(dhfile)
 
-   Load the key generation parameters for Diffie-Helman (DH) key exchange.
+   Load the key generation parameters for Diffie-Hellman (DH) key exchange.
    Using DH key exchange improves forward secrecy at the expense of
    computational resources (both on the server and on the client).
    The *dhfile* parameter should be the path to a file containing DH
@@ -1614,7 +1614,7 @@ to speed up repeated connections from th
 
    Get statistics about the SSL sessions created or managed by this context.
    A dictionary is returned which maps the names of each `piece of information
-   <https://www.openssl.org/docs/ssl/SSL_CTX_sess_number.html>`_ to their
+   <https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_sess_number.html>`_ to their
    numeric values.  For example, here is the total number of hits and misses
    in the session cache since the context was created::
 
@@ -1634,7 +1634,7 @@ to speed up repeated connections from th
 
       import socket, ssl
 
-      context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
+      context = ssl.SSLContext()
       context.verify_mode = ssl.CERT_REQUIRED
       context.check_hostname = True
       context.load_default_certs()
@@ -1861,7 +1861,7 @@ If you prefer to tune security settings
 a context from scratch (but beware that you might not get the settings
 right)::
 
-   >>> context = ssl.SSLContext(ssl.PROTOCOL_TLS)
+   >>> context = ssl.SSLContext()
    >>> context.verify_mode = ssl.CERT_REQUIRED
    >>> context.check_hostname = True
    >>> context.load_verify_locations("/etc/ssl/certs/ca-bundle.crt")
@@ -2320,13 +2320,30 @@ successful call of :func:`~ssl.RAND_add`
 :func:`~ssl.RAND_pseudo_bytes` is sufficient.
 
 
+.. ssl-libressl:
+
+LibreSSL support
+----------------
+
+LibreSSL is a fork of OpenSSL 1.0.1. The ssl module has limited support for
+LibreSSL. Some features are not available when the ssl module is compiled
+with LibreSSL.
+
+* LibreSSL >= 2.6.1 no longer supports NPN. The methods
+  :meth:`SSLContext.set_npn_protocols` and
+  :meth:`SSLSocket.selected_npn_protocol` are not available.
+* :meth:`SSLContext.set_default_verify_paths` ignores the env vars
+  :envvar:`SSL_CERT_FILE` and :envvar:`SSL_CERT_PATH` although
+  :func:`get_default_verify_paths` still reports them.
+
+
 .. seealso::
 
    Class :class:`socket.socket`
        Documentation of underlying :mod:`socket` class
 
    `SSL/TLS Strong Encryption: An Introduction <https://httpd.apache.org/docs/trunk/en/ssl/ssl_intro.html>`_
-       Intro from the Apache webserver documentation
+       Intro from the Apache HTTP Server documentation
 
    `RFC 1422: Privacy Enhancement for Internet Electronic Mail: Part II: Certificate-Based Key Management <https://www.ietf.org/rfc/rfc1422>`_
        Steve Kent
diff -urpN Python-3.6.3/Doc/library/stdtypes.rst Python-3.6.5/Doc/library/stdtypes.rst
--- Python-3.6.3/Doc/library/stdtypes.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/stdtypes.rst	2018-03-28 11:19:31.000000000 +0200
@@ -973,9 +973,9 @@ Notes:
 
 (8)
    ``index`` raises :exc:`ValueError` when *x* is not found in *s*.
-   When supported, the additional arguments to the index method allow
-   efficient searching of subsections of the sequence. Passing the extra
-   arguments is roughly equivalent to using ``s[i:j].index(x)``, only
+   Not all implementations support passing the additional arguments *i* and *j*.
+   These arguments allow efficient searching of subsections of the sequence. Passing
+   the extra arguments is roughly equivalent to using ``s[i:j].index(x)``, only
    without copying any data and with the returned index being relative to
    the start of the sequence rather than the start of the slice.
 
@@ -1599,6 +1599,20 @@ expression support in the :mod:`re` modu
    See :ref:`formatstrings` for a description of the various formatting options
    that can be specified in format strings.
 
+   .. note::
+      When formatting a number (:class:`int`, :class:`float`, :class:`float`
+      and subclasses) with the ``n`` type (ex: ``'{:n}'.format(1234)``), the
+      function sets temporarily the ``LC_CTYPE`` locale to the ``LC_NUMERIC``
+      locale to decode ``decimal_point`` and ``thousands_sep`` fields of
+      :c:func:`localeconv` if they are non-ASCII or longer than 1 byte, and the
+      ``LC_NUMERIC`` locale is different than the ``LC_CTYPE`` locale. This
+      temporary change affects other threads.
+
+   .. versionchanged:: 3.6.5
+      When formatting a number with the ``n`` type, the function sets
+      temporarily the ``LC_CTYPE`` locale to the ``LC_NUMERIC`` locale in some
+      cases.
+
 
 .. method:: str.format_map(mapping)
 
@@ -2564,8 +2578,9 @@ arbitrary binary data.
             bytearray.partition(sep)
 
    Split the sequence at the first occurrence of *sep*, and return a 3-tuple
-   containing the part before the separator, the separator, and the part
-   after the separator.  If the separator is not found, return a 3-tuple
+   containing the part before the separator, the separator itself or its
+   bytearray copy, and the part after the separator.
+   If the separator is not found, return a 3-tuple
    containing a copy of the original sequence, followed by two empty bytes or
    bytearray objects.
 
@@ -2620,8 +2635,9 @@ arbitrary binary data.
             bytearray.rpartition(sep)
 
    Split the sequence at the last occurrence of *sep*, and return a 3-tuple
-   containing the part before the separator, the separator, and the part
-   after the separator.  If the separator is not found, return a 3-tuple
+   containing the part before the separator, the separator itself or its
+   bytearray copy, and the part after the separator.
+   If the separator is not found, return a 3-tuple
    containing a copy of the original sequence, followed by two empty bytes or
    bytearray objects.
 
diff -urpN Python-3.6.3/Doc/library/string.rst Python-3.6.5/Doc/library/string.rst
--- Python-3.6.3/Doc/library/string.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/string.rst	2018-03-28 11:19:31.000000000 +0200
@@ -202,9 +202,9 @@ The grammar for a replacement field is a
    .. productionlist:: sf
       replacement_field: "{" [`field_name`] ["!" `conversion`] [":" `format_spec`] "}"
       field_name: arg_name ("." `attribute_name` | "[" `element_index` "]")*
-      arg_name: [`identifier` | `integer`]
+      arg_name: [`identifier` | `digit`+]
       attribute_name: `identifier`
-      element_index: `integer` | `index_string`
+      element_index: `digit`+ | `index_string`
       index_string: <any source character except "]"> +
       conversion: "r" | "s" | "a"
       format_spec: <described in the next section>
@@ -304,9 +304,9 @@ The general form of a *standard format s
    fill: <any character>
    align: "<" | ">" | "=" | "^"
    sign: "+" | "-" | " "
-   width: `integer`
+   width: `digit`+
    grouping_option: "_" | ","
-   precision: `integer`
+   precision: `digit`+
    type: "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"
 
 If a valid *align* value is specified, it can be preceded by a *fill*
@@ -746,8 +746,18 @@ to parse template strings.  To do this,
 
 * *idpattern* -- This is the regular expression describing the pattern for
   non-braced placeholders (the braces will be added automatically as
-  appropriate).  The default value is the regular expression
-  ``[_a-z][_a-z0-9]*``.
+  appropriate). The default value is the regular expression
+  ``(?-i:[_a-zA-Z][_a-zA-Z0-9]*)``.
+
+  .. note::
+
+     Since default *flags* is ``re.IGNORECASE``, pattern ``[a-z]`` can match
+     with some non-ASCII characters. That's why we use local ``-i`` flag here.
+
+     While *flags* is kept to ``re.IGNORECASE`` for backward compatibility,
+     you can override it to ``0`` or ``re.IGNORECASE | re.ASCII`` when
+     subclassing.
+
 
 * *flags* -- The regular expression flags that will be applied when compiling
   the regular expression used for recognizing substitutions.  The default value
diff -urpN Python-3.6.3/Doc/library/subprocess.rst Python-3.6.5/Doc/library/subprocess.rst
--- Python-3.6.3/Doc/library/subprocess.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/subprocess.rst	2018-03-28 11:19:31.000000000 +0200
@@ -584,7 +584,7 @@ Instances of the :class:`Popen` class ha
 .. method:: Popen.poll()
 
    Check if child process has terminated.  Set and return
-   :attr:`~Popen.returncode` attribute.
+   :attr:`~Popen.returncode` attribute. Otherwise, returns ``None``.
 
 
 .. method:: Popen.wait(timeout=None)
@@ -956,6 +956,9 @@ calls these functions.
    .. versionchanged:: 3.4
       Support for the *input* keyword argument was added.
 
+   .. versionchanged:: 3.6
+      *encoding* and *errors* were added.  See :func:`run` for details.
+
 .. _subprocess-replacements:
 
 Replacing Older Functions with the :mod:`subprocess` Module
diff -urpN Python-3.6.3/Doc/library/sys.rst Python-3.6.5/Doc/library/sys.rst
--- Python-3.6.3/Doc/library/sys.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/sys.rst	2018-03-28 11:19:31.000000000 +0200
@@ -1005,13 +1005,38 @@ always available.
    Set the system's profile function, which allows you to implement a Python source
    code profiler in Python.  See chapter :ref:`profile` for more information on the
    Python profiler.  The system's profile function is called similarly to the
-   system's trace function (see :func:`settrace`), but it isn't called for each
-   executed line of code (only on call and return, but the return event is reported
-   even when an exception has been set).  The function is thread-specific, but
-   there is no way for the profiler to know about context switches between threads,
-   so it does not make sense to use this in the presence of multiple threads. Also,
+   system's trace function (see :func:`settrace`), but it is called with different events,
+   for example it isn't called for each executed line of code (only on call and return,
+   but the return event is reported even when an exception has been set). The function is
+   thread-specific, but there is no way for the profiler to know about context switches between
+   threads, so it does not make sense to use this in the presence of multiple threads. Also,
    its return value is not used, so it can simply return ``None``.
 
+   Profile functions should have three arguments: *frame*, *event*, and
+   *arg*. *frame* is the current stack frame.  *event* is a string: ``'call'``,
+   ``'return'``, ``'c_call'``, ``'c_return'``, or ``'c_exception'``. *arg* depends
+   on the event type.
+
+   The events have the following meaning:
+
+   ``'call'``
+      A function is called (or some other code block entered).  The
+      profile function is called; *arg* is ``None``.
+
+   ``'return'``
+      A function (or other code block) is about to return.  The profile
+      function is called; *arg* is the value that will be returned, or ``None``
+      if the event is caused by an exception being raised.
+
+   ``'c_call'``
+      A C function is about to be called.  This may be an extension function or
+      a built-in.  *arg* is the C function object.
+
+   ``'c_return'``
+      A C function has returned. *arg* is the C function object.
+
+   ``'c_exception'``
+      A C function has raised an exception.  *arg* is the C function object.
 
 .. function:: setrecursionlimit(limit)
 
@@ -1058,8 +1083,8 @@ always available.
 
    Trace functions should have three arguments: *frame*, *event*, and
    *arg*. *frame* is the current stack frame.  *event* is a string: ``'call'``,
-   ``'line'``, ``'return'``, ``'exception'``, ``'c_call'``, ``'c_return'``, or
-   ``'c_exception'``. *arg* depends on the event type.
+   ``'line'``, ``'return'`` or ``'exception'``.  *arg* depends on
+   the event type.
 
    The trace function is invoked (with *event* set to ``'call'``) whenever a new
    local scope is entered; it should return a reference to a local trace
@@ -1094,16 +1119,6 @@ always available.
       tuple ``(exception, value, traceback)``; the return value specifies the
       new local trace function.
 
-   ``'c_call'``
-      A C function is about to be called.  This may be an extension function or
-      a built-in.  *arg* is the C function object.
-
-   ``'c_return'``
-      A C function has returned. *arg* is the C function object.
-
-   ``'c_exception'``
-      A C function has raised an exception.  *arg* is the C function object.
-
    Note that as an exception is propagated down the chain of callers, an
    ``'exception'`` event is generated at each level.
 
diff -urpN Python-3.6.3/Doc/library/termios.rst Python-3.6.5/Doc/library/termios.rst
--- Python-3.6.3/Doc/library/termios.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/termios.rst	2018-03-28 11:19:31.000000000 +0200
@@ -12,7 +12,7 @@
 --------------
 
 This module provides an interface to the POSIX calls for tty I/O control. For a
-complete description of these calls, see :manpage:`termios(2)` Unix manual
+complete description of these calls, see :manpage:`termios(3)` Unix manual
 page.  It is only available for those Unix versions that support POSIX
 *termios* style tty I/O control configured during installation.
 
diff -urpN Python-3.6.3/Doc/library/test.rst Python-3.6.5/Doc/library/test.rst
--- Python-3.6.3/Doc/library/test.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/test.rst	2018-03-28 11:19:31.000000000 +0200
@@ -440,7 +440,7 @@ The :mod:`test.support` module defines t
    otherwise.
 
 
-.. decorator:: skip_unless_symlink()
+.. decorator:: skip_unless_symlink
 
    A decorator for running tests that require support for symbolic links.
 
@@ -677,3 +677,10 @@ The :mod:`test.support` module defines t
 
    Class used to record warnings for unit tests. See documentation of
    :func:`check_warnings` above for more details.
+
+
+.. class:: FakePath(path)
+
+   Simple :term:`path-like object`.  It implements the :meth:`__fspath__`
+   method which just returns the *path* argument.  If *path* is an exception,
+   it will be raised in :meth:`!__fspath__`.
diff -urpN Python-3.6.3/Doc/library/threading.rst Python-3.6.5/Doc/library/threading.rst
--- Python-3.6.3/Doc/library/threading.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/threading.rst	2018-03-28 11:19:31.000000000 +0200
@@ -291,10 +291,10 @@ since it is impossible to detect the ter
    .. attribute:: ident
 
       The 'thread identifier' of this thread or ``None`` if the thread has not
-      been started.  This is a nonzero integer.  See the
-      :func:`_thread.get_ident()` function.  Thread identifiers may be recycled
-      when a thread exits and another thread is created.  The identifier is
-      available even after the thread has exited.
+      been started.  This is a nonzero integer.  See the :func:`get_ident`
+      function.  Thread identifiers may be recycled when a thread exits and
+      another thread is created.  The identifier is available even after the
+      thread has exited.
 
    .. method:: is_alive()
 
@@ -684,8 +684,8 @@ Semaphores also support the :ref:`contex
 
 .. class:: Semaphore(value=1)
 
-   This class implements semaphore objects.  A semaphore manages a counter
-   representing the number of :meth:`release` calls minus the number of
+   This class implements semaphore objects.  A semaphore manages an atomic
+   counter representing the number of :meth:`release` calls minus the number of
    :meth:`acquire` calls, plus an initial value.  The :meth:`acquire` method
    blocks if necessary until it can return without making the counter negative.
    If not given, *value* defaults to 1.
@@ -701,19 +701,19 @@ Semaphores also support the :ref:`contex
 
       Acquire a semaphore.
 
-      When invoked without arguments: if the internal counter is larger than
-      zero on entry, decrement it by one and return immediately.  If it is zero
-      on entry, block, waiting until some other thread has called
-      :meth:`~Semaphore.release` to make it larger than zero.  This is done
-      with proper interlocking so that if multiple :meth:`acquire` calls are
-      blocked, :meth:`~Semaphore.release` will wake exactly one of them up.
-      The implementation may pick one at random, so the order in which
-      blocked threads are awakened should not be relied on.  Returns
-      true (or blocks indefinitely).
+      When invoked without arguments:
+
+      * If the internal counter is larger than zero on entry, decrement it by
+        one and return true immediately.
+      * If the internal counter is zero on entry, block until awoken by a call to
+        :meth:`~Semaphore.release`.  Once awoken (and the counter is greater
+        than 0), decrement the counter by 1 and return true.  Exactly one
+        thread will be awoken by each call to :meth:`~Semaphore.release`.  The
+        order in which threads are awoken should not be relied on.
 
       When invoked with *blocking* set to false, do not block.  If a call
-      without an argument would block, return false immediately; otherwise,
-      do the same thing as when called without arguments, and return true.
+      without an argument would block, return false immediately; otherwise, do
+      the same thing as when called without arguments, and return true.
 
       When invoked with a *timeout* other than ``None``, it will block for at
       most *timeout* seconds.  If acquire does not complete successfully in
diff -urpN Python-3.6.3/Doc/library/time.rst Python-3.6.5/Doc/library/time.rst
--- Python-3.6.3/Doc/library/time.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/time.rst	2018-03-28 11:19:31.000000000 +0200
@@ -118,14 +118,10 @@ An explanation of some terminology and c
   +-------------------------+-------------------------+-------------------------+
 
 
-The module defines the following functions and data items:
-
-.. data:: altzone
-
-   The offset of the local DST timezone, in seconds west of UTC, if one is defined.
-   This is negative if the local DST timezone is east of UTC (as in Western Europe,
-   including the UK).  Only use this if ``daylight`` is nonzero.
+.. _time-functions:
 
+Functions
+---------
 
 .. function:: asctime([t])
 
@@ -165,7 +161,8 @@ The module defines the following functio
 
 .. function:: clock_getres(clk_id)
 
-   Return the resolution (precision) of the specified clock *clk_id*.
+   Return the resolution (precision) of the specified clock *clk_id*.  Refer to
+   :ref:`time-clock-id-constants` for a list of accepted values for *clk_id*.
 
    Availability: Unix.
 
@@ -174,7 +171,8 @@ The module defines the following functio
 
 .. function:: clock_gettime(clk_id)
 
-   Return the time of the specified clock *clk_id*.
+   Return the time of the specified clock *clk_id*.  Refer to
+   :ref:`time-clock-id-constants` for a list of accepted values for *clk_id*.
 
    Availability: Unix.
 
@@ -183,66 +181,8 @@ The module defines the following functio
 
 .. function:: clock_settime(clk_id, time)
 
-   Set the time of the specified clock *clk_id*.
-
-   Availability: Unix.
-
-   .. versionadded:: 3.3
-
-
-.. data:: CLOCK_HIGHRES
-
-   The Solaris OS has a CLOCK_HIGHRES timer that attempts to use an optimal
-   hardware source, and may give close to nanosecond resolution.  CLOCK_HIGHRES
-   is the nonadjustable, high-resolution clock.
-
-   Availability: Solaris.
-
-   .. versionadded:: 3.3
-
-
-.. data:: CLOCK_MONOTONIC
-
-   Clock that cannot be set and represents monotonic time since some unspecified
-   starting point.
-
-   Availability: Unix.
-
-   .. versionadded:: 3.3
-
-
-.. data:: CLOCK_MONOTONIC_RAW
-
-   Similar to :data:`CLOCK_MONOTONIC`, but provides access to a raw
-   hardware-based time that is not subject to NTP adjustments.
-
-   Availability: Linux 2.6.28 or later.
-
-   .. versionadded:: 3.3
-
-
-.. data:: CLOCK_PROCESS_CPUTIME_ID
-
-   High-resolution per-process timer from the CPU.
-
-   Availability: Unix.
-
-   .. versionadded:: 3.3
-
-
-.. data:: CLOCK_REALTIME
-
-   System-wide real-time clock.  Setting this clock requires appropriate
-   privileges.
-
-   Availability: Unix.
-
-   .. versionadded:: 3.3
-
-
-.. data:: CLOCK_THREAD_CPUTIME_ID
-
-   Thread-specific CPU-time clock.
+   Set the time of the specified clock *clk_id*.  Currently,
+   :data:`CLOCK_REALTIME` is the only accepted value for *clk_id*.
 
    Availability: Unix.
 
@@ -257,11 +197,6 @@ The module defines the following functio
    ``asctime(localtime(secs))``. Locale information is not used by :func:`ctime`.
 
 
-.. data:: daylight
-
-   Nonzero if a DST timezone is defined.
-
-
 .. function:: get_clock_info(name)
 
    Get information on the specified clock as a namespace object.
@@ -279,7 +214,7 @@ The module defines the following functio
    - *adjustable*: ``True`` if the clock can be changed automatically (e.g. by
      a NTP daemon) or manually by the system administrator, ``False`` otherwise
    - *implementation*: The name of the underlying C function used to get
-     the clock value
+     the clock value.  Refer to :ref:`time-clock-id-constants` for possible values.
    - *monotonic*: ``True`` if the clock cannot go backward,
      ``False`` otherwise
    - *resolution*: The resolution of the clock in seconds (:class:`float`)
@@ -607,18 +542,6 @@ The module defines the following functio
    :class:`struct_time` object is returned, from which the components
    of the calendar date may be accessed as attributes.
 
-.. data:: timezone
-
-   The offset of the local (non-DST) timezone, in seconds west of UTC (negative in
-   most of Western Europe, positive in the US, zero in the UK).
-
-
-.. data:: tzname
-
-   A tuple of two strings: the first is the name of the local non-DST timezone, the
-   second is the name of the local DST timezone.  If no DST timezone is defined,
-   the second string should not be used.
-
 
 .. function:: tzset()
 
@@ -703,6 +626,111 @@ The module defines the following functio
       ('EET', 'EEST')
 
 
+.. _time-clock-id-constants:
+
+Clock ID Constants
+------------------
+
+These constants are used as parameters for :func:`clock_getres` and
+:func:`clock_gettime`.
+
+.. data:: CLOCK_HIGHRES
+
+   The Solaris OS has a ``CLOCK_HIGHRES`` timer that attempts to use an optimal
+   hardware source, and may give close to nanosecond resolution.
+   ``CLOCK_HIGHRES`` is the nonadjustable, high-resolution clock.
+
+   Availability: Solaris.
+
+   .. versionadded:: 3.3
+
+
+.. data:: CLOCK_MONOTONIC
+
+   Clock that cannot be set and represents monotonic time since some unspecified
+   starting point.
+
+   Availability: Unix.
+
+   .. versionadded:: 3.3
+
+
+.. data:: CLOCK_MONOTONIC_RAW
+
+   Similar to :data:`CLOCK_MONOTONIC`, but provides access to a raw
+   hardware-based time that is not subject to NTP adjustments.
+
+   Availability: Linux 2.6.28 or later.
+
+   .. versionadded:: 3.3
+
+
+.. data:: CLOCK_PROCESS_CPUTIME_ID
+
+   High-resolution per-process timer from the CPU.
+
+   Availability: Unix.
+
+   .. versionadded:: 3.3
+
+
+.. data:: CLOCK_THREAD_CPUTIME_ID
+
+   Thread-specific CPU-time clock.
+
+   Availability: Unix.
+
+   .. versionadded:: 3.3
+
+
+The following constant is the only parameter that can be sent to
+:func:`clock_settime`.
+
+.. data:: CLOCK_REALTIME
+
+   System-wide real-time clock.  Setting this clock requires appropriate
+   privileges.
+
+   Availability: Unix.
+
+   .. versionadded:: 3.3
+
+
+.. _time-timezone-constants:
+
+Timezone Constants
+-------------------
+
+.. data:: altzone
+
+   The offset of the local DST timezone, in seconds west of UTC, if one is defined.
+   This is negative if the local DST timezone is east of UTC (as in Western Europe,
+   including the UK).  Only use this if ``daylight`` is nonzero.  See note below.
+
+.. data:: daylight
+
+   Nonzero if a DST timezone is defined.  See note below.
+
+.. data:: timezone
+
+   The offset of the local (non-DST) timezone, in seconds west of UTC (negative in
+   most of Western Europe, positive in the US, zero in the UK).  See note below.
+
+.. data:: tzname
+
+   A tuple of two strings: the first is the name of the local non-DST timezone, the
+   second is the name of the local DST timezone.  If no DST timezone is defined,
+   the second string should not be used.  See note below.
+
+.. note::
+
+   For the above Timezone constants (:data:`altzone`, :data:`daylight`, :data:`timezone`,
+   and :data:`tzname`), the value is determined by the timezone rules in effect
+   at module load time or the last time :func:`tzset` is called and may be incorrect
+   for times in the past.  It is recommended to use the :attr:`tm_gmtoff` and
+   :attr:`tm_zone` results from :func:`localtime` to obtain timezone information.
+
+
 .. seealso::
 
    Module :mod:`datetime`
diff -urpN Python-3.6.3/Doc/library/tkinter.rst Python-3.6.5/Doc/library/tkinter.rst
--- Python-3.6.3/Doc/library/tkinter.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/tkinter.rst	2018-03-28 11:19:31.000000000 +0200
@@ -154,7 +154,7 @@ background material, while the second ha
 handy reference.
 
 When trying to answer questions of the form "how do I do blah", it is often best
-to find out how to do"blah" in straight Tk, and then convert this back into the
+to find out how to do "blah" in straight Tk, and then convert this back into the
 corresponding :mod:`tkinter` call. Python programmers can often guess at the
 correct Python command by looking at the Tk documentation. This means that in
 order to use Tkinter, you will have to know a little bit about Tk. This document
diff -urpN Python-3.6.3/Doc/library/tkinter.ttk.rst Python-3.6.5/Doc/library/tkinter.ttk.rst
--- Python-3.6.3/Doc/library/tkinter.ttk.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/tkinter.ttk.rst	2018-03-28 11:19:31.000000000 +0200
@@ -1099,26 +1099,42 @@ ttk.Treeview
       If *selop* is not specified, returns selected items. Otherwise, it will
       act according to the following selection methods.
 
+      .. deprecated-removed:: 3.6 3.8
+         Using ``selection()`` for changing the selection state is deprecated.
+         Use the following selection methods instead.
 
-   .. method:: selection_set(items)
+
+   .. method:: selection_set(*items)
 
       *items* becomes the new selection.
 
+      .. versionchanged:: 3.6
+         *items* can be passed as separate arguments, not just as a single tuple.
+
 
-   .. method:: selection_add(items)
+   .. method:: selection_add(*items)
 
       Add *items* to the selection.
 
+      .. versionchanged:: 3.6
+         *items* can be passed as separate arguments, not just as a single tuple.
+
 
-   .. method:: selection_remove(items)
+   .. method:: selection_remove(*items)
 
       Remove *items* from the selection.
 
+      .. versionchanged:: 3.6
+         *items* can be passed as separate arguments, not just as a single tuple.
 
-   .. method:: selection_toggle(items)
+
+   .. method:: selection_toggle(*items)
 
       Toggle the selection state of each item in *items*.
 
+      .. versionchanged:: 3.6
+         *items* can be passed as separate arguments, not just as a single tuple.
+
 
    .. method:: set(item, column=None, value=None)
 
diff -urpN Python-3.6.3/Doc/library/typing.rst Python-3.6.5/Doc/library/typing.rst
--- Python-3.6.3/Doc/library/typing.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/typing.rst	2018-03-28 11:19:31.000000000 +0200
@@ -111,8 +111,7 @@ More precisely, the expression ``some_va
 true at runtime.
 
 This also means that it is not possible to create a subtype of ``Derived``
-since it is an identity function at runtime, not an actual type. Similarly, it
-is not possible to create another :func:`NewType` based on a ``Derived`` type::
+since it is an identity function at runtime, not an actual type::
 
    from typing import NewType
 
@@ -121,9 +120,16 @@ is not possible to create another :func:
    # Fails at runtime and does not typecheck
    class AdminUserId(UserId): pass
 
-   # Also does not typecheck
+However, it is possible to create a :func:`NewType` based on a 'derived' ``NewType``::
+
+   from typing import NewType
+
+   UserId = NewType('UserId', int)
+
    ProUserId = NewType('ProUserId', UserId)
 
+and typechecking for ``ProUserId`` will work as expected.
+
 See :pep:`484` for more details.
 
 .. note::
@@ -140,6 +146,8 @@ See :pep:`484` for more details.
    ``Derived`` is expected. This is useful when you want to prevent logic
    errors with minimal runtime cost.
 
+.. versionadded:: 3.5.2
+
 Callable
 --------
 
@@ -488,6 +496,8 @@ The module defines the following classes
    ``Type[Any]`` is equivalent to ``Type`` which in turn is equivalent
    to ``type``, which is the root of Python's metaclass hierarchy.
 
+   .. versionadded:: 3.5.2
+
 .. class:: Iterable(Generic[T_co])
 
     A generic version of :class:`collections.abc.Iterable`.
@@ -668,6 +678,8 @@ The module defines the following classes
 
    A generic version of :class:`collections.defaultdict`.
 
+   .. versionadded:: 3.5.2
+
 .. class:: Counter(collections.Counter, Dict[T, int])
 
    A generic version of :class:`collections.Counter`.
@@ -756,13 +768,15 @@ The module defines the following classes
        def add_unicode_checkmark(text: Text) -> Text:
            return text + u' \u2713'
 
+   .. versionadded:: 3.5.2
+
 .. class:: io
 
    Wrapper namespace for I/O stream types.
 
-   This defines the generic type ``IO[AnyStr]`` and aliases ``TextIO``
-   and ``BinaryIO`` for respectively ``IO[str]`` and ``IO[bytes]``.
-   These represent the types of I/O streams such as returned by
+   This defines the generic type ``IO[AnyStr]`` and subclasses ``TextIO``
+   and ``BinaryIO``, deriving from ``IO[str]`` and ``IO[bytes]``,
+   respectively. These represent the types of I/O streams such as returned by
    :func:`open`.
 
    These types are also accessible directly as ``typing.IO``,
@@ -841,6 +855,8 @@ The module defines the following classes
       UserId = NewType('UserId', int)
       first_user = UserId(1)
 
+   .. versionadded:: 3.5.2
+
 .. function:: cast(typ, val)
 
    Cast a value to a type.
@@ -891,17 +907,17 @@ The module defines the following classes
 
    See :pep:`484` for details and comparison with other typing semantics.
 
-.. decorator:: no_type_check(arg)
+.. decorator:: no_type_check
 
    Decorator to indicate that annotations are not type hints.
 
-   The argument must be a class or function; if it is a class, it
+   This works as class or function :term:`decorator`.  With a class, it
    applies recursively to all methods defined in that class (but not
    to methods defined in its superclasses or subclasses).
 
    This mutates the function(s) in place.
 
-.. decorator:: no_type_check_decorator(decorator)
+.. decorator:: no_type_check_decorator
 
    Decorator to give another decorator the :func:`no_type_check` effect.
 
@@ -1048,3 +1064,5 @@ The module defines the following classes
    "forward reference", to hide the ``expensive_mod`` reference from the
    interpreter runtime.  Type annotations for local variables are not
    evaluated, so the second annotation does not need to be enclosed in quotes.
+
+   .. versionadded:: 3.5.2
diff -urpN Python-3.6.3/Doc/library/unittest.rst Python-3.6.5/Doc/library/unittest.rst
--- Python-3.6.3/Doc/library/unittest.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/unittest.rst	2018-03-28 11:19:31.000000000 +0200
@@ -402,10 +402,14 @@ you can do it yourself::
 
    def suite():
        suite = unittest.TestSuite()
-       suite.addTest(WidgetTestCase('test_default_size'))
-       suite.addTest(WidgetTestCase('test_resize'))
+       suite.addTest(WidgetTestCase('test_default_widget_size'))
+       suite.addTest(WidgetTestCase('test_widget_resize'))
        return suite
 
+   if __name__ == '__main__':
+       runner = unittest.TextTestRunner()
+       runner.run(suite())
+
 You can place the definitions of test cases and test suites in the same modules
 as the code they are to test (such as :file:`widget.py`), but there are several
 advantages to placing the test code in a separate module, such as
@@ -2278,7 +2282,7 @@ handling functionality within test frame
 
    When called without arguments this function removes the control-c handler
    if it has been installed. This function can also be used as a test decorator
-   to temporarily remove the handler whilst the test is being executed::
+   to temporarily remove the handler while the test is being executed::
 
       @unittest.removeHandler
       def test_signal_handling(self):
diff -urpN Python-3.6.3/Doc/library/urllib.robotparser.rst Python-3.6.5/Doc/library/urllib.robotparser.rst
--- Python-3.6.3/Doc/library/urllib.robotparser.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/urllib.robotparser.rst	2018-03-28 11:19:31.000000000 +0200
@@ -69,10 +69,10 @@ structure of :file:`robots.txt` files, s
    .. method:: request_rate(useragent)
 
       Returns the contents of the ``Request-rate`` parameter from
-      ``robots.txt`` in the form of a :func:`~collections.namedtuple`
-      ``(requests, seconds)``.  If there is no such parameter or it doesn't
-      apply to the *useragent* specified or the ``robots.txt`` entry for this
-      parameter has invalid syntax, return ``None``.
+      ``robots.txt`` as a :term:`named tuple` ``RequestRate(requests, seconds)``.
+      If there is no such parameter or it doesn't apply to the *useragent*
+      specified or the ``robots.txt`` entry for this parameter has invalid
+      syntax, return ``None``.
 
       .. versionadded:: 3.6
 
diff -urpN Python-3.6.3/Doc/library/xml.etree.elementtree.rst Python-3.6.5/Doc/library/xml.etree.elementtree.rst
--- Python-3.6.3/Doc/library/xml.etree.elementtree.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/xml.etree.elementtree.rst	2018-03-28 11:19:31.000000000 +0200
@@ -297,7 +297,7 @@ If the XML input has `namespaces
 with prefixes in the form ``prefix:sometag`` get expanded to
 ``{uri}sometag`` where the *prefix* is replaced by the full *URI*.
 Also, if there is a `default namespace
-<https://www.w3.org/TR/2006/REC-xml-names-20060816/#defaulting>`__,
+<https://www.w3.org/TR/xml-names/#defaulting>`__,
 that full URI gets prepended to all of the non-prefixed tags.
 
 Here is an XML example that incorporates two namespaces, one with the
diff -urpN Python-3.6.3/Doc/library/zlib.rst Python-3.6.5/Doc/library/zlib.rst
--- Python-3.6.3/Doc/library/zlib.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/library/zlib.rst	2018-03-28 11:19:31.000000000 +0200
@@ -51,9 +51,9 @@ The available exception and functions in
 
    Compresses the bytes in *data*, returning a bytes object containing compressed data.
    *level* is an integer from ``0`` to ``9`` or ``-1`` controlling the level of compression;
-   ``1`` is fastest and produces the least compression, ``9`` is slowest and
-   produces the most.  ``0`` is no compression.  The default value is ``-1``
-   (Z_DEFAULT_COMPRESSION).  Z_DEFAULT_COMPRESSION represents a default
+   ``1`` (Z_BEST_SPEED) is fastest and produces the least compression, ``9`` (Z_BEST_COMPRESSION)
+   is slowest and produces the most.  ``0`` (Z_NO_COMPRESSION) is no compression.
+   The default value is ``-1`` (Z_DEFAULT_COMPRESSION).  Z_DEFAULT_COMPRESSION represents a default
    compromise between speed and compression (currently equivalent to level 6).
    Raises the :exc:`error` exception if any error occurs.
 
@@ -61,23 +61,25 @@ The available exception and functions in
       *level* can now be used as a keyword parameter.
 
 
-.. function:: compressobj(level=-1, method=DEFLATED, wbits=15, memLevel=8, strategy=Z_DEFAULT_STRATEGY[, zdict])
+.. function:: compressobj(level=-1, method=DEFLATED, wbits=MAX_WBITS, memLevel=DEF_MEM_LEVEL, strategy=Z_DEFAULT_STRATEGY[, zdict])
 
    Returns a compression object, to be used for compressing data streams that won't
    fit into memory at once.
 
    *level* is the compression level -- an integer from ``0`` to ``9`` or ``-1``.
-   A value of ``1`` is fastest and produces the least compression, while a value of
-   ``9`` is slowest and produces the most. ``0`` is no compression. The default
-   value is ``-1`` (Z_DEFAULT_COMPRESSION). Z_DEFAULT_COMPRESSION represents a default
-   compromise between speed and compression (currently equivalent to level 6).
+   A value of ``1`` (Z_BEST_SPEED) is fastest and produces the least compression,
+   while a value of ``9`` (Z_BEST_COMPRESSION) is slowest and produces the most.
+   ``0`` (Z_NO_COMPRESSION) is no compression.  The default value is ``-1`` (Z_DEFAULT_COMPRESSION).
+   Z_DEFAULT_COMPRESSION represents a default compromise between speed and compression
+   (currently equivalent to level 6).
 
    *method* is the compression algorithm. Currently, the only supported value is
-   ``DEFLATED``.
+   :const:`DEFLATED`.
 
    The *wbits* argument controls the size of the history buffer (or the
    "window size") used when compressing data, and whether a header and
-   trailer is included in the output.  It can take several ranges of values:
+   trailer is included in the output.  It can take several ranges of values,
+   defaulting to ``15`` (MAX_WBITS):
 
    * +9 to +15: The base-two logarithm of the window size, which
      therefore ranges between 512 and 32768.  Larger values produce
@@ -97,7 +99,8 @@ The available exception and functions in
    Higher values use more memory, but are faster and produce smaller output.
 
    *strategy* is used to tune the compression algorithm. Possible values are
-   ``Z_DEFAULT_STRATEGY``, ``Z_FILTERED``, and ``Z_HUFFMAN_ONLY``.
+   :const:`Z_DEFAULT_STRATEGY`, :const:`Z_FILTERED`, :const:`Z_HUFFMAN_ONLY`,
+   :const:`Z_RLE` (zlib 1.2.0.1) and :const:`Z_FIXED` (zlib 1.2.2.2).
 
    *zdict* is a predefined compression dictionary. This is a sequence of bytes
    (such as a :class:`bytes` object) containing subsequences that are expected
@@ -175,7 +178,7 @@ The available exception and functions in
    .. versionchanged:: 3.6
       *wbits* and *bufsize* can be used as keyword arguments.
 
-.. function:: decompressobj(wbits=15[, zdict])
+.. function:: decompressobj(wbits=MAX_WBITS[, zdict])
 
    Returns a decompression object, to be used for decompressing data streams that
    won't fit into memory at once.
@@ -213,13 +216,13 @@ Compression objects support the followin
 
    All pending input is processed, and a bytes object containing the remaining compressed
    output is returned.  *mode* can be selected from the constants
-   :const:`Z_SYNC_FLUSH`,  :const:`Z_FULL_FLUSH`,  or  :const:`Z_FINISH`,
-   defaulting to :const:`Z_FINISH`.  :const:`Z_SYNC_FLUSH` and
-   :const:`Z_FULL_FLUSH` allow compressing further bytestrings of data, while
-   :const:`Z_FINISH` finishes the compressed stream and  prevents compressing any
-   more data.  After calling :meth:`flush` with *mode* set to :const:`Z_FINISH`,
-   the :meth:`compress` method cannot be called again; the only realistic action is
-   to delete the object.
+   :const:`Z_NO_FLUSH`, :const:`Z_PARTIAL_FLUSH`, :const:`Z_SYNC_FLUSH`,
+   :const:`Z_FULL_FLUSH`, :const:`Z_BLOCK` (zlib 1.2.3.4), or :const:`Z_FINISH`,
+   defaulting to :const:`Z_FINISH`.  Except :const:`Z_FINISH`, all constants
+   allow compressing further bytestrings of data, while :const:`Z_FINISH` finishes the
+   compressed stream and prevents compressing any more data.  After calling :meth:`flush`
+   with *mode* set to :const:`Z_FINISH`, the :meth:`compress` method cannot be called again;
+   the only realistic action is to delete the object.
 
 
 .. method:: Compress.copy()
diff -urpN Python-3.6.3/Doc/license.rst Python-3.6.5/Doc/license.rst
--- Python-3.6.3/Doc/license.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/license.rst	2018-03-28 11:19:31.000000000 +0200
@@ -87,7 +87,7 @@ PSF LICENSE AGREEMENT FOR PYTHON |releas
       analyze, test, perform and/or display publicly, prepare derivative works,
       distribute, and otherwise use Python |release| alone or in any derivative
       version, provided, however, that PSF's License Agreement and PSF's notice of
-      copyright, i.e., "Copyright © 2001-2017 Python Software Foundation; All Rights
+      copyright, i.e., "Copyright © 2001-2018 Python Software Foundation; All Rights
       Reserved" are retained in Python |release| alone or in any derivative version
       prepared by Licensee.
 
@@ -545,7 +545,7 @@ The :mod:`xmlrpc.client` module contains
 test_epoll
 ----------
 
-The :mod:`test_epoll` contains the following notice::
+The :mod:`test_epoll` module contains the following notice::
 
   Copyright (c) 2001-2006 Twisted Matrix Laboratories.
 
@@ -571,7 +571,8 @@ The :mod:`test_epoll` contains the follo
 Select kqueue
 -------------
 
-The :mod:`select` and contains the following notice for the kqueue interface::
+The :mod:`select` module contains the following notice for the kqueue
+interface::
 
   Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
   All rights reserved.
@@ -927,7 +928,7 @@ on the cfuhash project::
 libmpdec
 --------
 
-The :mod:`_decimal` Module is built using an included copy of the libmpdec
+The :mod:`_decimal` module is built using an included copy of the libmpdec
 library unless the build is configured ``--with-system-libmpdec``::
 
    Copyright (c) 2008-2016 Stefan Krah. All rights reserved.
diff -urpN Python-3.6.3/Doc/reference/compound_stmts.rst Python-3.6.5/Doc/reference/compound_stmts.rst
--- Python-3.6.3/Doc/reference/compound_stmts.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/reference/compound_stmts.rst	2018-03-28 11:19:31.000000000 +0200
@@ -773,7 +773,6 @@ Is semantically equivalent to::
     mgr = (EXPR)
     aexit = type(mgr).__aexit__
     aenter = type(mgr).__aenter__(mgr)
-    exc = True
 
     VAR = await aenter
     try:
diff -urpN Python-3.6.3/Doc/reference/datamodel.rst Python-3.6.5/Doc/reference/datamodel.rst
--- Python-3.6.3/Doc/reference/datamodel.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/reference/datamodel.rst	2018-03-28 11:19:31.000000000 +0200
@@ -1157,60 +1157,68 @@ Basic customization
 
    .. index::
       single: destructor
+      single: finalizer
       statement: del
 
    Called when the instance is about to be destroyed.  This is also called a
-   destructor.  If a base class has a :meth:`__del__` method, the derived class's
-   :meth:`__del__` method, if any, must explicitly call it to ensure proper
-   deletion of the base class part of the instance.  Note that it is possible
-   (though not recommended!) for the :meth:`__del__` method to postpone destruction
-   of the instance by creating a new reference to it.  It may then be called at a
-   later time when this new reference is deleted.  It is not guaranteed that
-   :meth:`__del__` methods are called for objects that still exist when the
-   interpreter exits.
+   finalizer or (improperly) a destructor.  If a base class has a
+   :meth:`__del__` method, the derived class's :meth:`__del__` method,
+   if any, must explicitly call it to ensure proper deletion of the base
+   class part of the instance.
+
+   It is possible (though not recommended!) for the :meth:`__del__` method
+   to postpone destruction of the instance by creating a new reference to
+   it.  This is called object *resurrection*.  It is implementation-dependent
+   whether :meth:`__del__` is called a second time when a resurrected object
+   is about to be destroyed; the current :term:`CPython` implementation
+   only calls it once.
+
+   It is not guaranteed that :meth:`__del__` methods are called for objects
+   that still exist when the interpreter exits.
 
    .. note::
 
       ``del x`` doesn't directly call ``x.__del__()`` --- the former decrements
       the reference count for ``x`` by one, and the latter is only called when
-      ``x``'s reference count reaches zero.  Some common situations that may
-      prevent the reference count of an object from going to zero include:
-      circular references between objects (e.g., a doubly-linked list or a tree
-      data structure with parent and child pointers); a reference to the object
-      on the stack frame of a function that caught an exception (the traceback
-      stored in ``sys.exc_info()[2]`` keeps the stack frame alive); or a
-      reference to the object on the stack frame that raised an unhandled
-      exception in interactive mode (the traceback stored in
-      ``sys.last_traceback`` keeps the stack frame alive).  The first situation
-      can only be remedied by explicitly breaking the cycles; the second can be
-      resolved by freeing the reference to the traceback object when it is no
-      longer useful, and the third can be resolved by storing ``None`` in
-      ``sys.last_traceback``.
-      Circular references which are garbage are detected and cleaned up when
-      the cyclic garbage collector is enabled (it's on by default). Refer to the
-      documentation for the :mod:`gc` module for more information about this
-      topic.
+      ``x``'s reference count reaches zero.
+
+   .. impl-detail::
+      It is possible for a reference cycle to prevent the reference count
+      of an object from going to zero.  In this case, the cycle will be
+      later detected and deleted by the :term:`cyclic garbage collector
+      <garbage collection>`.  A common cause of reference cycles is when
+      an exception has been caught in a local variable.  The frame's
+      locals then reference the exception, which references its own
+      traceback, which references the locals of all frames caught in the
+      traceback.
+
+      .. seealso::
+         Documentation for the :mod:`gc` module.
 
    .. warning::
 
       Due to the precarious circumstances under which :meth:`__del__` methods are
       invoked, exceptions that occur during their execution are ignored, and a warning
-      is printed to ``sys.stderr`` instead.  Also, when :meth:`__del__` is invoked in
-      response to a module being deleted (e.g., when execution of the program is
-      done), other globals referenced by the :meth:`__del__` method may already have
-      been deleted or in the process of being torn down (e.g. the import
-      machinery shutting down).  For this reason, :meth:`__del__` methods
-      should do the absolute
-      minimum needed to maintain external invariants.  Starting with version 1.5,
-      Python guarantees that globals whose name begins with a single underscore are
-      deleted from their module before other globals are deleted; if no other
-      references to such globals exist, this may help in assuring that imported
-      modules are still available at the time when the :meth:`__del__` method is
-      called.
+      is printed to ``sys.stderr`` instead.  In particular:
+
+      * :meth:`__del__` can be invoked when arbitrary code is being executed,
+        including from any arbitrary thread.  If :meth:`__del__` needs to take
+        a lock or invoke any other blocking resource, it may deadlock as
+        the resource may already be taken by the code that gets interrupted
+        to execute :meth:`__del__`.
+
+      * :meth:`__del__` can be executed during interpreter shutdown.  As a
+        consequence, the global variables it needs to access (including other
+        modules) may already have been deleted or set to ``None``. Python
+        guarantees that globals whose name begins with a single underscore
+        are deleted from their module before other globals are deleted; if
+        no other references to such globals exist, this may help in assuring
+        that imported modules are still available at the time when the
+        :meth:`__del__` method is called.
 
-      .. index::
-         single: repr() (built-in function); __repr__() (object method)
 
+   .. index::
+      single: repr() (built-in function); __repr__() (object method)
 
 .. method:: object.__repr__(self)
 
@@ -1435,10 +1443,12 @@ access (use of, assignment to, or deleti
 
 .. method:: object.__getattr__(self, name)
 
-   Called when an attribute lookup has not found the attribute in the usual places
-   (i.e. it is not an instance attribute nor is it found in the class tree for
-   ``self``).  ``name`` is the attribute name. This method should return the
-   (computed) attribute value or raise an :exc:`AttributeError` exception.
+   Called when the default attribute access fails with an :exc:`AttributeError`
+   (either :meth:`__getattribute__` raises an :exc:`AttributeError` because
+   *name* is not an instance attribute or an attribute in the class tree
+   for ``self``; or :meth:`__get__` of a *name* property raises
+   :exc:`AttributeError`).  This method should either return the (computed)
+   attribute value or raise an :exc:`AttributeError` exception.
 
    Note that if the attribute is found through the normal mechanism,
    :meth:`__getattr__` is not called.  (This is an intentional asymmetry between
@@ -1492,6 +1502,39 @@ access (use of, assignment to, or deleti
    returned. :func:`dir` converts the returned sequence to a list and sorts it.
 
 
+Customizing module attribute access
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. index::
+   single: __class__ (module attribute)
+
+For a more fine grained customization of the module behavior (setting
+attributes, properties, etc.), one can set the ``__class__`` attribute of
+a module object to a subclass of :class:`types.ModuleType`. For example::
+
+   import sys
+   from types import ModuleType
+
+   class VerboseModule(ModuleType):
+       def __repr__(self):
+           return f'Verbose {self.__name__}'
+
+       def __setattr__(self, attr, value):
+           print(f'Setting {attr}...')
+           setattr(self, attr, value)
+
+   sys.modules[__name__].__class__ = VerboseModule
+
+.. note::
+   Setting module ``__class__`` only affects lookups made using the attribute
+   access syntax -- directly accessing the module globals (whether by code
+   within the module, or via a reference to the module's globals dictionary)
+   is unaffected.
+
+.. versionchanged:: 3.5
+   ``__class__`` module attribute is now writable.
+
+
 .. _descriptors:
 
 Implementing Descriptors
@@ -1610,15 +1653,11 @@ instances cannot override the behavior o
 __slots__
 ^^^^^^^^^
 
-By default, instances of classes have a dictionary for attribute storage.  This
-wastes space for objects having very few instance variables.  The space
-consumption can become acute when creating large numbers of instances.
-
-The default can be overridden by defining *__slots__* in a class definition.
-The *__slots__* declaration takes a sequence of instance variables and reserves
-just enough space in each instance to hold a value for each variable.  Space is
-saved because *__dict__* is not created for each instance.
+*__slots__* allow us to explicitly declare data members (like
+properties) and deny the creation of *__dict__* and *__weakref__*
+(unless explicitly declared in *__slots__* or available in a parent.)
 
+The space saved over using *__dict__* can be significant.
 
 .. data:: object.__slots__
 
@@ -1631,9 +1670,8 @@ saved because *__dict__* is not created
 Notes on using *__slots__*
 """"""""""""""""""""""""""
 
-* When inheriting from a class without *__slots__*, the *__dict__* attribute of
-  that class will always be accessible, so a *__slots__* definition in the
-  subclass is meaningless.
+* When inheriting from a class without *__slots__*, the *__dict__* and
+  *__weakref__* attribute of the instances will always be accessible.
 
 * Without a *__dict__* variable, instances cannot be assigned new variables not
   listed in the *__slots__* definition.  Attempts to assign to an unlisted
@@ -1652,9 +1690,11 @@ Notes on using *__slots__*
   *__slots__*; otherwise, the class attribute would overwrite the descriptor
   assignment.
 
-* The action of a *__slots__* declaration is limited to the class where it is
-  defined.  As a result, subclasses will have a *__dict__* unless they also define
-  *__slots__* (which must only contain names of any *additional* slots).
+* The action of a *__slots__* declaration is not limited to the class
+  where it is defined.  *__slots__* declared in parents are available in
+  child classes. However, child subclasses will get a *__dict__*  and
+  *__weakref__* unless they also define *__slots__* (which should only
+  contain names of any *additional* slots).
 
 * If a class defines a slot also defined in a base class, the instance variable
   defined by the base class slot is inaccessible (except by retrieving its
@@ -1670,6 +1710,10 @@ Notes on using *__slots__*
 
 * *__class__* assignment works only if both classes have the same *__slots__*.
 
+* Multiple inheritance with multiple slotted parent classes can be used,
+  but only one parent is allowed to have attributes created by slots
+  (the other bases must have empty slot layouts) - violations raise
+  :exc:`TypeError`.
 
 .. _class-customization:
 
@@ -2255,16 +2299,14 @@ left undefined.
 .. method:: object.__complex__(self)
             object.__int__(self)
             object.__float__(self)
-            object.__round__(self, [,n])
 
    .. index::
       builtin: complex
       builtin: int
       builtin: float
-      builtin: round
 
    Called to implement the built-in functions :func:`complex`,
-   :func:`int`, :func:`float` and :func:`round`.  Should return a value
+   :func:`int` and :func:`float`.  Should return a value
    of the appropriate type.
 
 
@@ -2283,6 +2325,23 @@ left undefined.
       the same value.
 
 
+.. method:: object.__round__(self, [,ndigits])
+            object.__trunc__(self)
+            object.__floor__(self)
+            object.__ceil__(self)
+
+   .. index:: builtin: round
+
+   Called to implement the built-in function :func:`round` and :mod:`math`
+   functions :func:`~math.trunc`, :func:`~math.floor` and :func:`~math.ceil`.
+   Unless *ndigits* is passed to :meth:`!__round__` all these methods should
+   return the value of the object truncated to an :class:`~numbers.Integral`
+   (typically an :class:`int`).
+
+   If :meth:`__int__` is not defined then the built-in function :func:`int`
+   falls back to :meth:`__trunc__`.
+
+
 .. _context-managers:
 
 With Statement Context Managers
diff -urpN Python-3.6.3/Doc/reference/expressions.rst Python-3.6.5/Doc/reference/expressions.rst
--- Python-3.6.3/Doc/reference/expressions.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/reference/expressions.rst	2018-03-28 11:19:31.000000000 +0200
@@ -1692,8 +1692,8 @@ precedence and have a left-to-right chai
 | ``+``, ``-``                                  | Addition and subtraction            |
 +-----------------------------------------------+-------------------------------------+
 | ``*``, ``@``, ``/``, ``//``, ``%``            | Multiplication, matrix              |
-|                                               | multiplication division,            |
-|                                               | remainder [#]_                      |
+|                                               | multiplication, division, floor     |
+|                                               | division, remainder [#]_            |
 +-----------------------------------------------+-------------------------------------+
 | ``+x``, ``-x``, ``~x``                        | Positive, negative, bitwise NOT     |
 +-----------------------------------------------+-------------------------------------+
diff -urpN Python-3.6.3/Doc/reference/import.rst Python-3.6.5/Doc/reference/import.rst
--- Python-3.6.3/Doc/reference/import.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/reference/import.rst	2018-03-28 11:19:31.000000000 +0200
@@ -519,8 +519,9 @@ and the loader that executes it.  Most i
 import machinery to perform the boilerplate operations of loading,
 whereas without a module spec the loader had that responsibility.
 
-See :class:`~importlib.machinery.ModuleSpec` for more specifics on what
-information a module's spec may hold.
+The module's spec is exposed as the ``__spec__`` attribute on a module object.
+See :class:`~importlib.machinery.ModuleSpec` for details on the contents of
+the module spec.
 
 .. versionadded:: 3.4
 
diff -urpN Python-3.6.3/Doc/reference/lexical_analysis.rst Python-3.6.5/Doc/reference/lexical_analysis.rst
--- Python-3.6.3/Doc/reference/lexical_analysis.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/reference/lexical_analysis.rst	2018-03-28 11:19:31.000000000 +0200
@@ -446,9 +446,6 @@ instance of the :class:`bytes` type inst
 may only contain ASCII characters; bytes with a numeric value of 128 or greater
 must be expressed with escapes.
 
-As of Python 3.3 it is possible again to prefix string literals with a
-``u`` prefix to simplify maintenance of dual 2.x and 3.x codebases.
-
 Both string and bytes literals may optionally be prefixed with a letter ``'r'``
 or ``'R'``; such strings are called :dfn:`raw strings` and treat backslashes as
 literal characters.  As a result, in string literals, ``'\U'`` and ``'\u'``
@@ -574,7 +571,7 @@ that a single backslash followed by a ne
 characters as part of the literal, *not* as a line continuation.
 
 
-.. _string-catenation:
+.. _string-concatenation:
 
 String literal concatenation
 ----------------------------
@@ -657,9 +654,11 @@ expression or conversion result.  An emp
 format specifier is omitted.  The formatted result is then included in
 the final value of the whole string.
 
-Top-level format specifiers may include nested replacement fields.
-These nested fields may include their own conversion fields and
-format specifiers, but may not include more deeply-nested replacement fields.
+Top-level format specifiers may include nested replacement fields. These nested
+fields may include their own conversion fields and :ref:`format specifiers
+<formatspec>`, but may not include more deeply-nested replacement fields. The
+:ref:`format specifier mini-language <formatspec>` is the same as that used by
+the string .format() method.
 
 Formatted string literals may be concatenated, but replacement fields
 cannot be split across literals.
@@ -677,7 +676,7 @@ Some examples of formatted string litera
    >>> f"result: {value:{width}.{precision}}"  # nested fields
    'result:      12.35'
    >>> today = datetime(year=2017, month=1, day=27)
-   >>> f"{today:%b %d, %Y}"  # using date format specifier
+   >>> f"{today:%B %d, %Y}"  # using date format specifier
    'January 27, 2017'
    >>> number = 1024
    >>> f"{number:#0x}"  # using integer format specifier
@@ -799,10 +798,6 @@ Some examples of floating point literals
 
    3.14    10.    .001    1e100    3.14e-10    0e0    3.14_15_93
 
-Note that numeric literals do not include a sign; a phrase like ``-1`` is
-actually an expression composed of the unary operator ``-`` and the literal
-``1``.
-
 .. versionchanged:: 3.6
    Underscores are now allowed for grouping purposes in literals.
 
diff -urpN Python-3.6.3/Doc/reference/simple_stmts.rst Python-3.6.5/Doc/reference/simple_stmts.rst
--- Python-3.6.3/Doc/reference/simple_stmts.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/reference/simple_stmts.rst	2018-03-28 11:19:31.000000000 +0200
@@ -931,7 +931,7 @@ annotation.
 
 .. impl-detail::
 
-   The current implementation does not enforce some of these restriction, but
+   The current implementation does not enforce some of these restrictions, but
    programs should not abuse this freedom, as future implementations may enforce
    them or silently change the meaning of the program.
 
diff -urpN Python-3.6.3/Doc/tools/extensions/pyspecific.py Python-3.6.5/Doc/tools/extensions/pyspecific.py
--- Python-3.6.3/Doc/tools/extensions/pyspecific.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/tools/extensions/pyspecific.py	2018-03-28 11:19:31.000000000 +0200
@@ -196,7 +196,7 @@ class DeprecatedRemoved(Directive):
     final_argument_whitespace = True
     option_spec = {}
 
-    _label = 'Deprecated since version %s, will be removed in version %s'
+    _label = 'Deprecated since version {deprecated}, will be removed in version {removed}'
 
     def run(self):
         node = addnodes.versionmodified()
@@ -204,11 +204,12 @@ class DeprecatedRemoved(Directive):
         node['type'] = 'deprecated-removed'
         version = (self.arguments[0], self.arguments[1])
         node['version'] = version
-        text = self._label % version
+        label = translators['sphinx'].gettext(self._label)
+        text = label.format(deprecated=self.arguments[0], removed=self.arguments[1])
         if len(self.arguments) == 3:
             inodes, messages = self.state.inline_text(self.arguments[2],
                                                       self.lineno+1)
-            para = nodes.paragraph(self.arguments[2], '', *inodes)
+            para = nodes.paragraph(self.arguments[2], '', *inodes, translatable=False)
             node.append(para)
         else:
             messages = []
@@ -220,13 +221,14 @@ class DeprecatedRemoved(Directive):
                 content.source = node[0].source
                 content.line = node[0].line
                 content += node[0].children
-                node[0].replace_self(nodes.paragraph('', '', content))
+                node[0].replace_self(nodes.paragraph('', '', content, translatable=False))
             node[0].insert(0, nodes.inline('', '%s: ' % text,
                                            classes=['versionmodified']))
         else:
             para = nodes.paragraph('', '',
                                    nodes.inline('', '%s.' % text,
-                                                classes=['versionmodified']))
+                                                classes=['versionmodified']),
+                                   translatable=False)
             node.append(para)
         env = self.state.document.settings.env
         env.note_versionchange('deprecated', version[0], node, self.lineno)
diff -urpN Python-3.6.3/Doc/tools/static/switchers.js Python-3.6.5/Doc/tools/static/switchers.js
--- Python-3.6.3/Doc/tools/static/switchers.js	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/tools/static/switchers.js	2018-03-28 11:19:31.000000000 +0200
@@ -10,11 +10,10 @@
     '(?:release/\\d.\\d[\\x\\d\\.]*)'];
 
   var all_versions = {
-    '3.7': 'dev (3.7)',
+    '3.8': 'dev (3.8)',
+    '3.7': 'pre (3.7)',
     '3.6': '3.6',
     '3.5': '3.5',
-    '3.4': '3.4',
-    '3.3': '3.3',
     '2.7': '2.7',
   };
 
diff -urpN Python-3.6.3/Doc/tools/susp-ignored.csv Python-3.6.5/Doc/tools/susp-ignored.csv
--- Python-3.6.3/Doc/tools/susp-ignored.csv	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/tools/susp-ignored.csv	2018-03-28 11:19:31.000000000 +0200
@@ -130,9 +130,6 @@ library/exceptions,,:err,err.object[err.
 library/functions,,:step,a[start:stop:step]
 library/functions,,:stop,"a[start:stop, i]"
 library/functions,,:stop,a[start:stop:step]
-library/hashlib,,:vatrogasac,>>> cookie = b'user:vatrogasac'
-library/hashlib,,:vatrogasac,"user:vatrogasac,349cf904533767ed2d755279a8df84d0"
-library/hashlib,,:policajac,">>> compare_digest(b'user:policajac', sig)"
 library/hashlib,,:LEAF,"h00 = blake2b(buf[0:LEAF_SIZE], fanout=FANOUT, depth=DEPTH,"
 library/http.client,,:port,host:port
 library/http.cookies,,`,!#$%&'*+-.^_`|~:
diff -urpN Python-3.6.3/Doc/tools/templates/dummy.html Python-3.6.5/Doc/tools/templates/dummy.html
--- Python-3.6.3/Doc/tools/templates/dummy.html	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/tools/templates/dummy.html	2018-03-28 11:19:31.000000000 +0200
@@ -4,3 +4,4 @@ texts in extensions to sphinx.pot file.
 In extensions/pyspecific.py:
 
 {% trans %}CPython implementation detail:{% endtrans %}
+{% trans %}Deprecated since version {deprecated}, will be removed in version {removed}{% endtrans %}
diff -urpN Python-3.6.3/Doc/tools/templates/indexsidebar.html Python-3.6.5/Doc/tools/templates/indexsidebar.html
--- Python-3.6.3/Doc/tools/templates/indexsidebar.html	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/tools/templates/indexsidebar.html	2018-03-28 11:19:31.000000000 +0200
@@ -2,9 +2,10 @@
 <p><a href="{{ pathto('download') }}">{% trans %}Download these documents{% endtrans %}</a></p>
 <h3>{% trans %}Docs for other versions{% endtrans %}</h3>
 <ul>
-  <li><a href="https://docs.python.org/2.7/">{% trans %}Python 2.7 (stable){% endtrans %}</a></li>
+  <li><a href="https://docs.python.org/3.8/">{% trans %}Python 3.8 (in development){% endtrans %}</a></li>
+  <li><a href="https://docs.python.org/3.7/">{% trans %}Python 3.7 (pre-release){% endtrans %}</a></li>
   <li><a href="https://docs.python.org/3.5/">{% trans %}Python 3.5 (stable){% endtrans %}</a></li>
-  <li><a href="https://docs.python.org/3.7/">{% trans %}Python 3.7 (in development){% endtrans %}</a></li>
+  <li><a href="https://docs.python.org/2.7/">{% trans %}Python 2.7 (stable){% endtrans %}</a></li>
   <li><a href="https://www.python.org/doc/versions/">{% trans %}Old versions{% endtrans %}</a></li>
 </ul>
 
diff -urpN Python-3.6.3/Doc/tutorial/classes.rst Python-3.6.5/Doc/tutorial/classes.rst
--- Python-3.6.3/Doc/tutorial/classes.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/tutorial/classes.rst	2018-03-28 11:19:31.000000000 +0200
@@ -876,9 +876,9 @@ Generator Expressions
 =====================
 
 Some simple generators can be coded succinctly as expressions using a syntax
-similar to list comprehensions but with parentheses instead of brackets.  These
-expressions are designed for situations where the generator is used right away
-by an enclosing function.  Generator expressions are more compact but less
+similar to list comprehensions but with parentheses instead of square brackets.
+These expressions are designed for situations where the generator is used right
+away by an enclosing function.  Generator expressions are more compact but less
 versatile than full generator definitions and tend to be more memory friendly
 than equivalent list comprehensions.
 
diff -urpN Python-3.6.3/Doc/tutorial/controlflow.rst Python-3.6.5/Doc/tutorial/controlflow.rst
--- Python-3.6.3/Doc/tutorial/controlflow.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/tutorial/controlflow.rst	2018-03-28 11:19:31.000000000 +0200
@@ -105,7 +105,7 @@ is possible to let the range start at an
 increment (even negative; sometimes this is called the 'step')::
 
     range(5, 10)
-       5 through 9
+       5, 6, 7, 8, 9
 
     range(0, 10, 3)
        0, 3, 6, 9
diff -urpN Python-3.6.3/Doc/tutorial/inputoutput.rst Python-3.6.5/Doc/tutorial/inputoutput.rst
--- Python-3.6.3/Doc/tutorial/inputoutput.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/tutorial/inputoutput.rst	2018-03-28 11:19:31.000000000 +0200
@@ -100,7 +100,7 @@ Here are two ways to write a table of sq
    10 100 1000
 
 (Note that in the first example, one space between each column was added by the
-way :func:`print` works: it always adds spaces between its arguments.)
+way :func:`print` works: by default it adds spaces between its arguments.)
 
 This example demonstrates the :meth:`str.rjust` method of string
 objects, which right-justifies a string in a field of a given width by padding
diff -urpN Python-3.6.3/Doc/tutorial/introduction.rst Python-3.6.5/Doc/tutorial/introduction.rst
--- Python-3.6.3/Doc/tutorial/introduction.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/tutorial/introduction.rst	2018-03-28 11:19:31.000000000 +0200
@@ -212,6 +212,13 @@ to each other are automatically concaten
    >>> 'Py' 'thon'
    'Python'
 
+This feature is particularly useful when you want to break long strings::
+
+   >>> text = ('Put several strings within parentheses '
+   ...         'to have them joined together.')
+   >>> text
+   'Put several strings within parentheses to have them joined together.'
+
 This only works with two literals though, not with variables or expressions::
 
    >>> prefix = 'Py'
@@ -227,13 +234,6 @@ If you want to concatenate variables or
    >>> prefix + 'thon'
    'Python'
 
-This feature is particularly useful when you want to break long strings::
-
-   >>> text = ('Put several strings within parentheses '
-   ...         'to have them joined together.')
-   >>> text
-   'Put several strings within parentheses to have them joined together.'
-
 Strings can be *indexed* (subscripted), with the first character having index 0.
 There is no separate character type; a character is simply a string of size
 one::
diff -urpN Python-3.6.3/Doc/tutorial/modules.rst Python-3.6.5/Doc/tutorial/modules.rst
--- Python-3.6.3/Doc/tutorial/modules.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/tutorial/modules.rst	2018-03-28 11:19:31.000000000 +0200
@@ -112,6 +112,25 @@ Note that in general the practice of imp
 frowned upon, since it often causes poorly readable code. However, it is okay to
 use it to save typing in interactive sessions.
 
+If the module name is followed by :keyword:`as`, then the name
+following :keyword:`as` is bound directly to the imported module.
+
+::
+
+   >>> import fibo as fib
+   >>> fib.fib(500)
+   0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
+
+This is effectively importing the module in the same way that ``import fibo``
+will do, with the only difference of it being available as ``fib``.
+
+It can also be used when utilising :keyword:`from` with similar effects::
+
+   >>> from fibo import fib as fibonacci
+   >>> fibonacci(500)
+   0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
+
+
 .. note::
 
    For efficiency reasons, each module is only imported once per interpreter
diff -urpN Python-3.6.3/Doc/using/cmdline.rst Python-3.6.5/Doc/using/cmdline.rst
--- Python-3.6.3/Doc/using/cmdline.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/using/cmdline.rst	2018-03-28 11:19:31.000000000 +0200
@@ -246,12 +246,23 @@ Miscellaneous options
 
 .. cmdoption:: -O
 
-   Turn on basic optimizations.  See also :envvar:`PYTHONOPTIMIZE`.
+   Remove assert statements and any code conditional on the value of
+   :const:`__debug__`.  Augment the filename for compiled
+   (:term:`bytecode`) files by adding ``.opt-1`` before the ``.pyc``
+   extension (see :pep:`488`).  See also :envvar:`PYTHONOPTIMIZE`.
+
+   .. versionchanged:: 3.5
+      Modify ``.pyc`` filenames according to :pep:`488`.
 
 
 .. cmdoption:: -OO
 
-   Discard docstrings in addition to the :option:`-O` optimizations.
+   Do :option:`-O` and also discard docstrings.  Augment the filename
+   for compiled (:term:`bytecode`) files by adding ``.opt-2`` before the
+   ``.pyc`` extension (see :pep:`488`).
+
+   .. versionchanged:: 3.5
+      Modify ``.pyc`` filenames according to :pep:`488`.
 
 
 .. cmdoption:: -q
@@ -387,8 +398,6 @@ Miscellaneous options
    Skip the first line of the source, allowing use of non-Unix forms of
    ``#!cmd``.  This is intended for a DOS specific hack only.
 
-   .. note:: The line numbers in error messages will be off by one.
-
 
 .. cmdoption:: -X
 
diff -urpN Python-3.6.3/Doc/using/unix.rst Python-3.6.5/Doc/using/unix.rst
--- Python-3.6.3/Doc/using/unix.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/using/unix.rst	2018-03-28 11:19:31.000000000 +0200
@@ -41,9 +41,11 @@ On FreeBSD and OpenBSD
 
 * FreeBSD users, to add the package use::
 
-     pkg_add -r python
+     pkg install python3
+
+* OpenBSD users, to add the package use::
 
-* OpenBSD users use::
+     pkg_add -r python
 
      pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert your architecture here>/python-<version>.tgz
 
diff -urpN Python-3.6.3/Doc/using/venv-create.inc Python-3.6.5/Doc/using/venv-create.inc
--- Python-3.6.3/Doc/using/venv-create.inc	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/using/venv-create.inc	2018-03-28 11:19:31.000000000 +0200
@@ -9,7 +9,8 @@ with a ``home`` key pointing to the Pyth
 was run.  It also creates a ``bin`` (or ``Scripts`` on Windows) subdirectory
 containing a copy of the ``python`` binary (or binaries, in the case of
 Windows).  It also creates an (initially empty) ``lib/pythonX.Y/site-packages``
-subdirectory (on Windows, this is ``Lib\site-packages``).
+subdirectory (on Windows, this is ``Lib\site-packages``). If an existing
+directory is specified, it will be re-used.
 
 .. deprecated:: 3.6
    ``pyvenv`` was the recommended tool for creating virtual environments for
@@ -33,7 +34,7 @@ On Windows, invoke the ``venv`` command
 Alternatively, if you configured the ``PATH`` and ``PATHEXT`` variables for
 your :ref:`Python installation <using-on-windows>`::
 
-    c:\>python -m venv myenv c:\path\to\myenv
+    c:\>python -m venv c:\path\to\myenv
 
 The command, if run with ``-h``, will show the available options::
 
@@ -71,9 +72,7 @@ The command, if run with ``-h``, will sh
 
 .. versionchanged:: 3.4
    In earlier versions, if the target directory already existed, an error was
-   raised, unless the ``--clear`` or ``--upgrade`` option was provided. Now,
-   if an existing directory is specified, its contents are removed and
-   the directory is processed as if it had been newly created.
+   raised, unless the ``--clear`` or ``--upgrade`` option was provided.
 
 The created ``pyvenv.cfg`` file also includes the
 ``include-system-site-packages`` key, set to ``true`` if ``venv`` is
diff -urpN Python-3.6.3/Doc/whatsnew/3.3.rst Python-3.6.5/Doc/whatsnew/3.3.rst
--- Python-3.6.3/Doc/whatsnew/3.3.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/whatsnew/3.3.rst	2018-03-28 11:19:31.000000000 +0200
@@ -2480,12 +2480,12 @@ Porting C code
   :c:func:`PyUnicode_FromFormat()`, your code will automatically take
   advantage of the new unicode representations.
 
-* :c:func:`PyImport_GetMagicNumber` now returns -1 upon failure.
+* :c:func:`PyImport_GetMagicNumber` now returns ``-1`` upon failure.
 
 * As a negative value for the *level* argument to :func:`__import__` is no
   longer valid, the same now holds for :c:func:`PyImport_ImportModuleLevel`.
   This also means that the value of *level* used by
-  :c:func:`PyImport_ImportModuleEx` is now 0 instead of -1.
+  :c:func:`PyImport_ImportModuleEx` is now ``0`` instead of ``-1``.
 
 
 Building C extensions
diff -urpN Python-3.6.3/Doc/whatsnew/3.6.rst Python-3.6.5/Doc/whatsnew/3.6.rst
--- Python-3.6.3/Doc/whatsnew/3.6.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Doc/whatsnew/3.6.rst	2018-03-28 11:19:31.000000000 +0200
@@ -1016,6 +1016,11 @@ attribute defaults to ``['gztar']``. Alt
 any code relying on the presence of ``default_format`` may
 need to be adapted. See :issue:`27819` for more details.
 
+The ``upload`` command now longer tries to change CR end-of-line characters
+to CRLF.  This fixes a corruption issue with sdists that ended with a byte
+equivalent to CR.
+(Contributed by Bo Bayles in :issue:`32304`.)
+
 
 email
 -----
@@ -1852,6 +1857,11 @@ Build and C API Changes
 * The :c:func:`PyUnicode_FSConverter` and :c:func:`PyUnicode_FSDecoder`
   functions will now accept :term:`path-like objects <path-like object>`.
 
+* The ``PyExc_RecursionErrorInst`` singleton that was part of the public API
+  has been removed as its members being never cleared may cause a segfault
+  during finalization of the interpreter. Contributed by Xavier de Gaye in
+  :issue:`22898` and :issue:`30697`.
+
 
 Other Improvements
 ==================
@@ -2341,3 +2351,11 @@ It has been replaced by the new ``make r
 (Contributed by Victor Stinner in :issue:`23404`.)
 
 .. versionchanged:: 3.6.2
+
+
+Notable changes in Python 3.6.5
+===============================
+
+The :func:`locale.localeconv` function now sets temporarily the ``LC_CTYPE``
+locale to the ``LC_NUMERIC`` locale in some cases.
+(Contributed by Victor Stinner in :issue:`31900`.)
diff -urpN Python-3.6.3/Include/Python.h Python-3.6.5/Include/Python.h
--- Python-3.6.3/Include/Python.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Include/Python.h	2018-03-28 11:19:31.000000000 +0200
@@ -35,6 +35,9 @@
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
+#ifdef HAVE_CRYPT_H
+#include <crypt.h>
+#endif
 
 /* For size_t? */
 #ifdef HAVE_STDDEF_H
diff -urpN Python-3.6.3/Include/fileutils.h Python-3.6.5/Include/fileutils.h
--- Python-3.6.3/Include/fileutils.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Include/fileutils.h	2018-03-28 11:19:31.000000000 +0200
@@ -17,6 +17,16 @@ PyAPI_FUNC(char*) Py_EncodeLocale(
 
 #ifndef Py_LIMITED_API
 
+PyAPI_FUNC(wchar_t *) _Py_DecodeLocaleEx(
+    const char *arg,
+    size_t *size,
+    int current_locale);
+
+PyAPI_FUNC(char*) _Py_EncodeLocaleEx(
+    const wchar_t *text,
+    size_t *error_pos,
+    int current_locale);
+
 PyAPI_FUNC(PyObject *) _Py_device_encoding(int);
 
 #ifdef MS_WINDOWS
@@ -111,6 +121,9 @@ PyAPI_FUNC(int) _Py_get_inheritable(int
 PyAPI_FUNC(int) _Py_set_inheritable(int fd, int inheritable,
                                     int *atomic_flag_works);
 
+PyAPI_FUNC(int) _Py_set_inheritable_async_safe(int fd, int inheritable,
+                                               int *atomic_flag_works);
+
 PyAPI_FUNC(int) _Py_dup(int fd);
 
 #ifndef MS_WINDOWS
@@ -119,6 +132,11 @@ PyAPI_FUNC(int) _Py_get_blocking(int fd)
 PyAPI_FUNC(int) _Py_set_blocking(int fd, int blocking);
 #endif   /* !MS_WINDOWS */
 
+PyAPI_FUNC(int) _Py_GetLocaleconvNumeric(
+    PyObject **decimal_point,
+    PyObject **thousands_sep,
+    const char **grouping);
+
 #endif   /* Py_LIMITED_API */
 
 #ifdef __cplusplus
diff -urpN Python-3.6.3/Include/objimpl.h Python-3.6.5/Include/objimpl.h
--- Python-3.6.3/Include/objimpl.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Include/objimpl.h	2018-03-28 11:19:31.000000000 +0200
@@ -56,7 +56,7 @@ must use the platform malloc heap(s), or
 operator new), you must first allocate the object with your custom allocator,
 then pass its pointer to PyObject_{Init, InitVar} for filling in its Python-
 specific fields:  reference count, type pointer, possibly others.  You should
-be aware that Python no control over these objects because they don't
+be aware that Python has no control over these objects because they don't
 cooperate with the Python memory manager.  Such objects may not be eligible
 for automatic garbage collection and you have to make sure that they are
 released accordingly whenever their destructor gets called (cf. the specific
diff -urpN Python-3.6.3/Include/odictobject.h Python-3.6.5/Include/odictobject.h
--- Python-3.6.3/Include/odictobject.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Include/odictobject.h	2018-03-28 11:19:31.000000000 +0200
@@ -6,6 +6,7 @@ extern "C" {
 
 
 /* OrderedDict */
+/* This API is optional and mostly redundant. */
 
 #ifndef Py_LIMITED_API
 
@@ -21,10 +22,6 @@ PyAPI_DATA(PyTypeObject) PyODictValues_T
 #define PyODict_CheckExact(op) (Py_TYPE(op) == &PyODict_Type)
 #define PyODict_SIZE(op) ((PyDictObject *)op)->ma_used
 
-#endif /* Py_LIMITED_API */
-
-#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03050000
-
 PyAPI_FUNC(PyObject *) PyODict_New(void);
 PyAPI_FUNC(int) PyODict_SetItem(PyObject *od, PyObject *key, PyObject *item);
 PyAPI_FUNC(int) PyODict_DelItem(PyObject *od, PyObject *key);
diff -urpN Python-3.6.3/Include/patchlevel.h Python-3.6.5/Include/patchlevel.h
--- Python-3.6.3/Include/patchlevel.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Include/patchlevel.h	2018-03-28 11:19:31.000000000 +0200
@@ -18,12 +18,12 @@
 /*--start constants--*/
 #define PY_MAJOR_VERSION	3
 #define PY_MINOR_VERSION	6
-#define PY_MICRO_VERSION	3
+#define PY_MICRO_VERSION	5
 #define PY_RELEASE_LEVEL	PY_RELEASE_LEVEL_FINAL
 #define PY_RELEASE_SERIAL	0
 
 /* Version as a string */
-#define PY_VERSION      	"3.6.3"
+#define PY_VERSION      	"3.6.5"
 /*--end constants--*/
 
 /* Version as a single 4-byte hex number, e.g. 0x010502B2 == 1.5.2b2.
diff -urpN Python-3.6.3/Include/py_curses.h Python-3.6.5/Include/py_curses.h
--- Python-3.6.3/Include/py_curses.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Include/py_curses.h	2018-03-28 11:19:31.000000000 +0200
@@ -7,14 +7,9 @@
 ** On Mac OS X 10.2 [n]curses.h and stdlib.h use different guards
 ** against multiple definition of wchar_t.
 */
-#ifdef	_BSD_WCHAR_T_DEFINED_
+#ifdef _BSD_WCHAR_T_DEFINED_
 #define _WCHAR_T
 #endif
-
-/* the following define is necessary for OS X 10.6; without it, the
-   Apple-supplied ncurses.h sets NCURSES_OPAQUE to 1, and then Python
-   can't get at the WINDOW flags field. */
-#define NCURSES_OPAQUE 0
 #endif /* __APPLE__ */
 
 #ifdef __FreeBSD__
@@ -22,7 +17,7 @@
 ** On FreeBSD, [n]curses.h and stdlib.h/wchar.h use different guards
 ** against multiple definition of wchar_t and wint_t.
 */
-#ifdef	_XOPEN_SOURCE_EXTENDED
+#ifdef _XOPEN_SOURCE_EXTENDED
 #ifndef __FreeBSD_version
 #include <osreldate.h>
 #endif
@@ -44,22 +39,28 @@
 #endif
 #endif
 
+#if !defined(HAVE_CURSES_IS_PAD) && defined(WINDOW_HAS_FLAGS)
+/* The following definition is necessary for ncurses 5.7; without it,
+   some of [n]curses.h set NCURSES_OPAQUE to 1, and then Python
+   can't get at the WINDOW flags field. */
+#define NCURSES_OPAQUE 0
+#endif
+
 #ifdef HAVE_NCURSES_H
 #include <ncurses.h>
 #else
 #include <curses.h>
-#ifdef HAVE_TERM_H
-/* for tigetstr, which is not declared in SysV curses */
-#include <term.h>
-#endif
 #endif
 
 #ifdef HAVE_NCURSES_H
 /* configure was checking <curses.h>, but we will
-   use <ncurses.h>, which has all these features. */
-#ifndef WINDOW_HAS_FLAGS
+   use <ncurses.h>, which has some or all these features. */
+#if !defined(WINDOW_HAS_FLAGS) && !(NCURSES_OPAQUE+0)
 #define WINDOW_HAS_FLAGS 1
 #endif
+#if !defined(HAVE_CURSES_IS_PAD) && NCURSES_VERSION_PATCH+0 >= 20090906
+#define HAVE_CURSES_IS_PAD 1
+#endif
 #ifndef MVWDELCH_IS_EXPRESSION
 #define MVWDELCH_IS_EXPRESSION 1
 #endif
@@ -74,12 +75,12 @@ extern "C" {
 /* Type declarations */
 
 typedef struct {
-	PyObject_HEAD
-	WINDOW *win;
-	char *encoding;
+    PyObject_HEAD
+    WINDOW *win;
+    char *encoding;
 } PyCursesWindowObject;
 
-#define PyCursesWindow_Check(v)	 (Py_TYPE(v) == &PyCursesWindow_Type)
+#define PyCursesWindow_Check(v)  (Py_TYPE(v) == &PyCursesWindow_Type)
 
 #define PyCurses_CAPSULE_NAME "_curses._C_API"
 
diff -urpN Python-3.6.3/Include/pyerrors.h Python-3.6.5/Include/pyerrors.h
--- Python-3.6.3/Include/pyerrors.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Include/pyerrors.h	2018-03-28 11:19:31.000000000 +0200
@@ -219,8 +219,6 @@ PyAPI_DATA(PyObject *) PyExc_IOError;
 PyAPI_DATA(PyObject *) PyExc_WindowsError;
 #endif
 
-PyAPI_DATA(PyObject *) PyExc_RecursionErrorInst;
-
 /* Predefined warning categories */
 PyAPI_DATA(PyObject *) PyExc_Warning;
 PyAPI_DATA(PyObject *) PyExc_UserWarning;
diff -urpN Python-3.6.3/Include/pyhash.h Python-3.6.5/Include/pyhash.h
--- Python-3.6.3/Include/pyhash.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Include/pyhash.h	2018-03-28 11:19:31.000000000 +0200
@@ -16,7 +16,7 @@ PyAPI_FUNC(Py_hash_t) _Py_HashBytes(cons
 #define _PyHASH_MULTIPLIER 1000003UL  /* 0xf4243 */
 
 /* Parameters used for the numeric hash implementation.  See notes for
-   _Py_HashDouble in Objects/object.c.  Numeric hashes are based on
+   _Py_HashDouble in Python/pyhash.c.  Numeric hashes are based on
    reduction modulo the prime 2**_PyHASH_BITS - 1. */
 
 #if SIZEOF_VOID_P >= 8
diff -urpN Python-3.6.3/Include/pytime.h Python-3.6.5/Include/pytime.h
--- Python-3.6.3/Include/pytime.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Include/pytime.h	2018-03-28 11:19:31.000000000 +0200
@@ -29,9 +29,20 @@ typedef enum {
     _PyTime_ROUND_CEILING=1,
     /* Round to nearest with ties going to nearest even integer.
        For example, used to round from a Python float. */
-    _PyTime_ROUND_HALF_EVEN
+    _PyTime_ROUND_HALF_EVEN=2,
+    /* Round away from zero
+       For example, used for timeout. _PyTime_ROUND_CEILING rounds
+       -1e-9 to 0 milliseconds which causes bpo-31786 issue.
+       _PyTime_ROUND_UP rounds -1e-9 to -1 millisecond which keeps
+       the timeout sign as expected. select.poll(timeout) must block
+       for negative values." */
+    _PyTime_ROUND_UP=3,
+    /* _PyTime_ROUND_TIMEOUT (an alias for _PyTime_ROUND_UP) should be
+       used for timeouts. */
+    _PyTime_ROUND_TIMEOUT = _PyTime_ROUND_UP
 } _PyTime_round_t;
 
+
 /* Convert a time_t to a PyLong. */
 PyAPI_FUNC(PyObject *) _PyLong_FromTime_t(
     time_t sec);
diff -urpN Python-3.6.3/LICENSE Python-3.6.5/LICENSE
--- Python-3.6.3/LICENSE	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/LICENSE	2018-03-28 11:19:31.000000000 +0200
@@ -73,9 +73,9 @@ analyze, test, perform and/or display pu
 distribute, and otherwise use Python alone or in any derivative version,
 provided, however, that PSF's License Agreement and PSF's notice of copyright,
 i.e., "Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
-2011, 2012, 2013, 2014, 2015, 2016, 2017 Python Software Foundation; All Rights
-Reserved" are retained in Python alone or in any derivative version prepared by
-Licensee.
+2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation; All
+Rights Reserved" are retained in Python alone or in any derivative version
+prepared by Licensee.
 
 3. In the event Licensee prepares a derivative work that is based on
 or incorporates Python or any part thereof, and wants to make
diff -urpN Python-3.6.3/Lib/_collections_abc.py Python-3.6.5/Lib/_collections_abc.py
--- Python-3.6.3/Lib/_collections_abc.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/_collections_abc.py	2018-03-28 11:19:31.000000000 +0200
@@ -899,6 +899,9 @@ class Sequence(Reversible, Collection):
     def index(self, value, start=0, stop=None):
         '''S.index(value, [start, [stop]]) -> integer -- return first index of value.
            Raises ValueError if the value is not present.
+
+           Supporting start and stop arguments is optional, but
+           recommended.
         '''
         if start is not None and start < 0:
             start = max(len(self) + start, 0)
diff -urpN Python-3.6.3/Lib/_threading_local.py Python-3.6.5/Lib/_threading_local.py
--- Python-3.6.3/Lib/_threading_local.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/_threading_local.py	2018-03-28 11:19:31.000000000 +0200
@@ -56,11 +56,7 @@ You can create custom local objects by s
 
   >>> class MyLocal(local):
   ...     number = 2
-  ...     initialized = False
   ...     def __init__(self, **kw):
-  ...         if self.initialized:
-  ...             raise SystemError('__init__ called too many times')
-  ...         self.initialized = True
   ...         self.__dict__.update(kw)
   ...     def squared(self):
   ...         return self.number ** 2
@@ -97,7 +93,7 @@ As before, we can access the data in a s
   >>> thread.start()
   >>> thread.join()
   >>> log
-  [[('color', 'red'), ('initialized', True)], 11]
+  [[('color', 'red')], 11]
 
 without affecting this thread's data:
 
diff -urpN Python-3.6.3/Lib/abc.py Python-3.6.5/Lib/abc.py
--- Python-3.6.3/Lib/abc.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/abc.py	2018-03-28 11:19:31.000000000 +0200
@@ -170,9 +170,11 @@ class ABCMeta(type):
         """Debug helper to print the ABC registry."""
         print("Class: %s.%s" % (cls.__module__, cls.__qualname__), file=file)
         print("Inv.counter: %s" % ABCMeta._abc_invalidation_counter, file=file)
-        for name in sorted(cls.__dict__.keys()):
+        for name in sorted(cls.__dict__):
             if name.startswith("_abc_"):
                 value = getattr(cls, name)
+                if isinstance(value, WeakSet):
+                    value = set(value)
                 print("%s: %r" % (name, value), file=file)
 
     def __instancecheck__(cls, instance):
diff -urpN Python-3.6.3/Lib/aifc.py Python-3.6.5/Lib/aifc.py
--- Python-3.6.3/Lib/aifc.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/aifc.py	2018-03-28 11:19:31.000000000 +0200
@@ -322,6 +322,7 @@ class Aifc_read:
         else:
             raise Error('not an AIFF or AIFF-C file')
         self._comm_chunk_read = 0
+        self._ssnd_chunk = None
         while 1:
             self._ssnd_seek_needed = 1
             try:
diff -urpN Python-3.6.3/Lib/asyncio/base_events.py Python-3.6.5/Lib/asyncio/base_events.py
--- Python-3.6.3/Lib/asyncio/base_events.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/asyncio/base_events.py	2018-03-28 11:19:31.000000000 +0200
@@ -84,18 +84,24 @@ def _set_reuseport(sock):
                              'SO_REUSEPORT defined but not implemented.')
 
 
-def _is_stream_socket(sock):
-    # Linux's socket.type is a bitmask that can include extra info
-    # about socket, therefore we can't do simple
-    # `sock_type == socket.SOCK_STREAM`.
-    return (sock.type & socket.SOCK_STREAM) == socket.SOCK_STREAM
+def _is_stream_socket(sock_type):
+    if hasattr(socket, 'SOCK_NONBLOCK'):
+        # Linux's socket.type is a bitmask that can include extra info
+        # about socket (like SOCK_NONBLOCK bit), therefore we can't do simple
+        # `sock_type == socket.SOCK_STREAM`, see
+        # https://github.com/torvalds/linux/blob/v4.13/include/linux/net.h#L77
+        # for more details.
+        return (sock_type & 0xF) == socket.SOCK_STREAM
+    else:
+        return sock_type == socket.SOCK_STREAM
 
 
-def _is_dgram_socket(sock):
-    # Linux's socket.type is a bitmask that can include extra info
-    # about socket, therefore we can't do simple
-    # `sock_type == socket.SOCK_DGRAM`.
-    return (sock.type & socket.SOCK_DGRAM) == socket.SOCK_DGRAM
+def _is_dgram_socket(sock_type):
+    if hasattr(socket, 'SOCK_NONBLOCK'):
+        # See the comment in `_is_stream_socket`.
+        return (sock_type & 0xF) == socket.SOCK_DGRAM
+    else:
+        return sock_type == socket.SOCK_DGRAM
 
 
 def _ipaddr_info(host, port, family, type, proto):
@@ -108,14 +114,9 @@ def _ipaddr_info(host, port, family, typ
             host is None:
         return None
 
-    if type == socket.SOCK_STREAM:
-        # Linux only:
-        #    getaddrinfo() can raise when socket.type is a bit mask.
-        #    So if socket.type is a bit mask of SOCK_STREAM, and say
-        #    SOCK_NONBLOCK, we simply return None, which will trigger
-        #    a call to getaddrinfo() letting it process this request.
+    if _is_stream_socket(type):
         proto = socket.IPPROTO_TCP
-    elif type == socket.SOCK_DGRAM:
+    elif _is_dgram_socket(type):
         proto = socket.IPPROTO_UDP
     else:
         return None
@@ -789,7 +790,7 @@ class BaseEventLoop(events.AbstractEvent
             if sock is None:
                 raise ValueError(
                     'host and port was not specified and no sock specified')
-            if not _is_stream_socket(sock):
+            if not _is_stream_socket(sock.type):
                 # We allow AF_INET, AF_INET6, AF_UNIX as long as they
                 # are SOCK_STREAM.
                 # We support passing AF_UNIX sockets even though we have
@@ -841,7 +842,7 @@ class BaseEventLoop(events.AbstractEvent
                                  allow_broadcast=None, sock=None):
         """Create datagram connection."""
         if sock is not None:
-            if not _is_dgram_socket(sock):
+            if not _is_dgram_socket(sock.type):
                 raise ValueError(
                     'A UDP Socket was expected, got {!r}'.format(sock))
             if (local_addr or remote_addr or
@@ -1054,7 +1055,7 @@ class BaseEventLoop(events.AbstractEvent
         else:
             if sock is None:
                 raise ValueError('Neither host/port nor sock were specified')
-            if not _is_stream_socket(sock):
+            if not _is_stream_socket(sock.type):
                 raise ValueError(
                     'A Stream Socket was expected, got {!r}'.format(sock))
             sockets = [sock]
@@ -1078,7 +1079,7 @@ class BaseEventLoop(events.AbstractEvent
         This method is a coroutine.  When completed, the coroutine
         returns a (transport, protocol) pair.
         """
-        if not _is_stream_socket(sock):
+        if not _is_stream_socket(sock.type):
             raise ValueError(
                 'A Stream Socket was expected, got {!r}'.format(sock))
 
@@ -1222,6 +1223,11 @@ class BaseEventLoop(events.AbstractEvent
         handler is set, and can be called by a custom exception
         handler that wants to defer to the default behavior.
 
+        This default handler logs the error message and other
+        context-dependent information.  In debug mode, a truncated
+        stack trace is also appended showing where the given object
+        (e.g. a handle or future or task) was created, if any.
+
         The context parameter has the same meaning as in
         `call_exception_handler()`.
         """
diff -urpN Python-3.6.3/Lib/asyncio/constants.py Python-3.6.5/Lib/asyncio/constants.py
--- Python-3.6.3/Lib/asyncio/constants.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/asyncio/constants.py	2018-03-28 11:19:31.000000000 +0200
@@ -5,3 +5,8 @@ LOG_THRESHOLD_FOR_CONNLOST_WRITES = 5
 
 # Seconds to wait before retrying accept().
 ACCEPT_RETRY_DELAY = 1
+
+# Number of stack entries to capture in debug mode.
+# The large the number, the slower the operation in debug mode
+# (see extract_stack() in events.py)
+DEBUG_STACK_DEPTH = 10
diff -urpN Python-3.6.3/Lib/asyncio/coroutines.py Python-3.6.5/Lib/asyncio/coroutines.py
--- Python-3.6.3/Lib/asyncio/coroutines.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/asyncio/coroutines.py	2018-03-28 11:19:31.000000000 +0200
@@ -10,6 +10,7 @@ import traceback
 import types
 
 from . import compat
+from . import constants
 from . import events
 from . import base_futures
 from .log import logger
@@ -91,7 +92,7 @@ class CoroWrapper:
         assert inspect.isgenerator(gen) or inspect.iscoroutine(gen), gen
         self.gen = gen
         self.func = func  # Used to unwrap @coroutine decorator
-        self._source_traceback = traceback.extract_stack(sys._getframe(1))
+        self._source_traceback = events.extract_stack(sys._getframe(1))
         self.__name__ = getattr(gen, '__name__', None)
         self.__qualname__ = getattr(gen, '__qualname__', None)
 
@@ -183,8 +184,9 @@ class CoroWrapper:
             tb = getattr(self, '_source_traceback', ())
             if tb:
                 tb = ''.join(traceback.format_list(tb))
-                msg += ('\nCoroutine object created at '
-                        '(most recent call last):\n')
+                msg += (f'\nCoroutine object created at '
+                        f'(most recent call last, truncated to '
+                        f'{constants.DEBUG_STACK_DEPTH} last lines):\n')
                 msg += tb.rstrip()
             logger.error(msg)
 
diff -urpN Python-3.6.3/Lib/asyncio/events.py Python-3.6.5/Lib/asyncio/events.py
--- Python-3.6.3/Lib/asyncio/events.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/asyncio/events.py	2018-03-28 11:19:31.000000000 +0200
@@ -19,7 +19,8 @@ import sys
 import threading
 import traceback
 
-from asyncio import compat
+from . import compat
+from . import constants
 
 
 def _get_function_source(func):
@@ -77,6 +78,23 @@ def _format_callback_source(func, args):
     return func_repr
 
 
+def extract_stack(f=None, limit=None):
+    """Replacement for traceback.extract_stack() that only does the
+    necessary work for asyncio debug mode.
+    """
+    if f is None:
+        f = sys._getframe().f_back
+    if limit is None:
+        # Limit the amount of work to a reasonable amount, as extract_stack()
+        # can be called for each coroutine and future in debug mode.
+        limit = constants.DEBUG_STACK_DEPTH
+    stack = traceback.StackSummary.extract(traceback.walk_stack(f),
+                                           limit=limit,
+                                           lookup_lines=False)
+    stack.reverse()
+    return stack
+
+
 class Handle:
     """Object returned by callback registration methods."""
 
@@ -90,7 +108,7 @@ class Handle:
         self._cancelled = False
         self._repr = None
         if self._loop.get_debug():
-            self._source_traceback = traceback.extract_stack(sys._getframe(1))
+            self._source_traceback = extract_stack(sys._getframe(1))
         else:
             self._source_traceback = None
 
diff -urpN Python-3.6.3/Lib/asyncio/futures.py Python-3.6.5/Lib/asyncio/futures.py
--- Python-3.6.3/Lib/asyncio/futures.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/asyncio/futures.py	2018-03-28 11:19:31.000000000 +0200
@@ -112,11 +112,13 @@ class Future:
 
     Differences:
 
+    - This class is not thread-safe.
+
     - result() and exception() do not take a timeout argument and
       raise an exception when the future isn't done yet.
 
     - Callbacks registered with add_done_callback() are always called
-      via the event loop's call_soon_threadsafe().
+      via the event loop's call_soon().
 
     - This class is not compatible with the wait() and as_completed()
       methods in the concurrent.futures package.
@@ -141,8 +143,7 @@ class Future:
     #   `yield Future()` (incorrect).
     _asyncio_future_blocking = False
 
-    _log_traceback = False   # Used for Python 3.4 and later
-    _tb_logger = None        # Used for Python 3.3 only
+    _log_traceback = False
 
     def __init__(self, *, loop=None):
         """Initialize the future.
@@ -157,7 +158,7 @@ class Future:
             self._loop = loop
         self._callbacks = []
         if self._loop.get_debug():
-            self._source_traceback = traceback.extract_stack(sys._getframe(1))
+            self._source_traceback = events.extract_stack(sys._getframe(1))
 
     _repr_info = base_futures._future_repr_info
 
@@ -238,9 +239,6 @@ class Future:
         if self._state != _FINISHED:
             raise InvalidStateError('Result is not ready.')
         self._log_traceback = False
-        if self._tb_logger is not None:
-            self._tb_logger.clear()
-            self._tb_logger = None
         if self._exception is not None:
             raise self._exception
         return self._result
@@ -258,9 +256,6 @@ class Future:
         if self._state != _FINISHED:
             raise InvalidStateError('Exception is not set.')
         self._log_traceback = False
-        if self._tb_logger is not None:
-            self._tb_logger.clear()
-            self._tb_logger = None
         return self._exception
 
     def add_done_callback(self, fn):
diff -urpN Python-3.6.3/Lib/asyncio/locks.py Python-3.6.5/Lib/asyncio/locks.py
--- Python-3.6.3/Lib/asyncio/locks.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/asyncio/locks.py	2018-03-28 11:19:31.000000000 +0200
@@ -172,16 +172,22 @@ class Lock(_ContextManagerMixin):
 
         fut = self._loop.create_future()
         self._waiters.append(fut)
+
+        # Finally block should be called before the CancelledError
+        # handling as we don't want CancelledError to call
+        # _wake_up_first() and attempt to wake up itself.
         try:
-            yield from fut
-            self._locked = True
-            return True
+            try:
+                yield from fut
+            finally:
+                self._waiters.remove(fut)
         except futures.CancelledError:
             if not self._locked:
                 self._wake_up_first()
             raise
-        finally:
-            self._waiters.remove(fut)
+
+        self._locked = True
+        return True
 
     def release(self):
         """Release a lock.
@@ -201,11 +207,17 @@ class Lock(_ContextManagerMixin):
             raise RuntimeError('Lock is not acquired.')
 
     def _wake_up_first(self):
-        """Wake up the first waiter who isn't cancelled."""
-        for fut in self._waiters:
-            if not fut.done():
-                fut.set_result(True)
-                break
+        """Wake up the first waiter if it isn't done."""
+        try:
+            fut = next(iter(self._waiters))
+        except StopIteration:
+            return
+
+        # .done() necessarily means that a waiter will wake up later on and
+        # either take the lock, or, if it was cancelled and lock wasn't
+        # taken already, will hit this again and wake up a new waiter.
+        if not fut.done():
+            fut.set_result(True)
 
 
 class Event:
@@ -337,12 +349,16 @@ class Condition(_ContextManagerMixin):
 
         finally:
             # Must reacquire lock even if wait is cancelled
+            cancelled = False
             while True:
                 try:
                     yield from self.acquire()
                     break
                 except futures.CancelledError:
-                    pass
+                    cancelled = True
+
+            if cancelled:
+                raise futures.CancelledError
 
     @coroutine
     def wait_for(self, predicate):
diff -urpN Python-3.6.3/Lib/asyncio/queues.py Python-3.6.5/Lib/asyncio/queues.py
--- Python-3.6.3/Lib/asyncio/queues.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/asyncio/queues.py	2018-03-28 11:19:31.000000000 +0200
@@ -167,6 +167,12 @@ class Queue:
                 yield from getter
             except:
                 getter.cancel()  # Just in case getter is not done yet.
+
+                try:
+                    self._getters.remove(getter)
+                except ValueError:
+                    pass
+
                 if not self.empty() and not getter.cancelled():
                     # We were woken up by put_nowait(), but can't take
                     # the call.  Wake up the next in line.
diff -urpN Python-3.6.3/Lib/asyncio/selector_events.py Python-3.6.5/Lib/asyncio/selector_events.py
--- Python-3.6.3/Lib/asyncio/selector_events.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/asyncio/selector_events.py	2018-03-28 11:19:31.000000000 +0200
@@ -43,7 +43,7 @@ def _test_selector_event(selector, fd, e
 if hasattr(socket, 'TCP_NODELAY'):
     def _set_nodelay(sock):
         if (sock.family in {socket.AF_INET, socket.AF_INET6} and
-                sock.type == socket.SOCK_STREAM and
+                base_events._is_stream_socket(sock.type) and
                 sock.proto == socket.IPPROTO_TCP):
             sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
 else:
@@ -363,25 +363,25 @@ class BaseSelectorEventLoop(base_events.
         if self._debug and sock.gettimeout() != 0:
             raise ValueError("the socket must be non-blocking")
         fut = self.create_future()
-        self._sock_recv(fut, False, sock, n)
+        self._sock_recv(fut, None, sock, n)
         return fut
 
-    def _sock_recv(self, fut, registered, sock, n):
+    def _sock_recv(self, fut, registered_fd, sock, n):
         # _sock_recv() can add itself as an I/O callback if the operation can't
         # be done immediately. Don't use it directly, call sock_recv().
-        fd = sock.fileno()
-        if registered:
+        if registered_fd is not None:
             # Remove the callback early.  It should be rare that the
             # selector says the fd is ready but the call still returns
             # EAGAIN, and I am willing to take a hit in that case in
             # order to simplify the common case.
-            self.remove_reader(fd)
+            self.remove_reader(registered_fd)
         if fut.cancelled():
             return
         try:
             data = sock.recv(n)
         except (BlockingIOError, InterruptedError):
-            self.add_reader(fd, self._sock_recv, fut, True, sock, n)
+            fd = sock.fileno()
+            self.add_reader(fd, self._sock_recv, fut, fd, sock, n)
         except Exception as exc:
             fut.set_exception(exc)
         else:
@@ -402,16 +402,14 @@ class BaseSelectorEventLoop(base_events.
             raise ValueError("the socket must be non-blocking")
         fut = self.create_future()
         if data:
-            self._sock_sendall(fut, False, sock, data)
+            self._sock_sendall(fut, None, sock, data)
         else:
             fut.set_result(None)
         return fut
 
-    def _sock_sendall(self, fut, registered, sock, data):
-        fd = sock.fileno()
-
-        if registered:
-            self.remove_writer(fd)
+    def _sock_sendall(self, fut, registered_fd, sock, data):
+        if registered_fd is not None:
+            self.remove_writer(registered_fd)
         if fut.cancelled():
             return
 
@@ -428,7 +426,8 @@ class BaseSelectorEventLoop(base_events.
         else:
             if n:
                 data = data[n:]
-            self.add_writer(fd, self._sock_sendall, fut, True, sock, data)
+            fd = sock.fileno()
+            self.add_writer(fd, self._sock_sendall, fut, fd, sock, data)
 
     @coroutine
     def sock_connect(self, sock, address):
diff -urpN Python-3.6.3/Lib/asyncio/sslproto.py Python-3.6.5/Lib/asyncio/sslproto.py
--- Python-3.6.3/Lib/asyncio/sslproto.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/asyncio/sslproto.py	2018-03-28 11:19:31.000000000 +0200
@@ -294,11 +294,10 @@ class _SSLPipe(object):
 class _SSLProtocolTransport(transports._FlowControlMixin,
                             transports.Transport):
 
-    def __init__(self, loop, ssl_protocol, app_protocol):
+    def __init__(self, loop, ssl_protocol):
         self._loop = loop
         # SSLProtocol instance
         self._ssl_protocol = ssl_protocol
-        self._app_protocol = app_protocol
         self._closed = False
 
     def get_extra_info(self, name, default=None):
@@ -306,10 +305,10 @@ class _SSLProtocolTransport(transports._
         return self._ssl_protocol._get_extra_info(name, default)
 
     def set_protocol(self, protocol):
-        self._app_protocol = protocol
+        self._ssl_protocol._app_protocol = protocol
 
     def get_protocol(self):
-        return self._app_protocol
+        return self._ssl_protocol._app_protocol
 
     def is_closing(self):
         return self._closed
@@ -436,8 +435,7 @@ class SSLProtocol(protocols.Protocol):
         self._waiter = waiter
         self._loop = loop
         self._app_protocol = app_protocol
-        self._app_transport = _SSLProtocolTransport(self._loop,
-                                                    self, self._app_protocol)
+        self._app_transport = _SSLProtocolTransport(self._loop, self)
         # _SSLPipe instance (None until the connection is made)
         self._sslpipe = None
         self._session_established = False
@@ -499,6 +497,10 @@ class SSLProtocol(protocols.Protocol):
 
         The argument is a bytes object.
         """
+        if self._sslpipe is None:
+            # transport closing, sslpipe is destroyed
+            return
+
         try:
             ssldata, appdata = self._sslpipe.feed_ssldata(data)
         except ssl.SSLError as e:
@@ -628,7 +630,7 @@ class SSLProtocol(protocols.Protocol):
 
     def _process_write_backlog(self):
         # Try to make progress on the write backlog.
-        if self._transport is None:
+        if self._transport is None or self._sslpipe is None:
             return
 
         try:
diff -urpN Python-3.6.3/Lib/asyncio/streams.py Python-3.6.5/Lib/asyncio/streams.py
--- Python-3.6.3/Lib/asyncio/streams.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/asyncio/streams.py	2018-03-28 11:19:31.000000000 +0200
@@ -35,6 +35,9 @@ class IncompleteReadError(EOFError):
         self.partial = partial
         self.expected = expected
 
+    def __reduce__(self):
+        return type(self), (self.partial, self.expected)
+
 
 class LimitOverrunError(Exception):
     """Reached the buffer limit while looking for a separator.
@@ -46,6 +49,9 @@ class LimitOverrunError(Exception):
         super().__init__(message)
         self.consumed = consumed
 
+    def __reduce__(self):
+        return type(self), (self.args[0], self.consumed)
+
 
 @coroutine
 def open_connection(host=None, port=None, *,
diff -urpN Python-3.6.3/Lib/asyncio/unix_events.py Python-3.6.5/Lib/asyncio/unix_events.py
--- Python-3.6.3/Lib/asyncio/unix_events.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/asyncio/unix_events.py	2018-03-28 11:19:31.000000000 +0200
@@ -61,8 +61,17 @@ class _UnixSelectorEventLoop(selector_ev
 
     def close(self):
         super().close()
-        for sig in list(self._signal_handlers):
-            self.remove_signal_handler(sig)
+        if not sys.is_finalizing():
+            for sig in list(self._signal_handlers):
+                self.remove_signal_handler(sig)
+        else:
+            if self._signal_handlers:
+                warnings.warn(f"Closing the loop {self!r} "
+                              f"on interpreter shutdown "
+                              f"stage, skipping signal handlers removal",
+                              ResourceWarning,
+                              source=self)
+                self._signal_handlers.clear()
 
     def _process_self_data(self, data):
         for signum in data:
@@ -242,7 +251,7 @@ class _UnixSelectorEventLoop(selector_ev
             if sock is None:
                 raise ValueError('no path and sock were specified')
             if (sock.family != socket.AF_UNIX or
-                    not base_events._is_stream_socket(sock)):
+                    not base_events._is_stream_socket(sock.type)):
                 raise ValueError(
                     'A UNIX Domain Stream Socket was expected, got {!r}'
                     .format(sock))
@@ -297,7 +306,7 @@ class _UnixSelectorEventLoop(selector_ev
                     'path was not specified, and no sock specified')
 
             if (sock.family != socket.AF_UNIX or
-                    not base_events._is_stream_socket(sock)):
+                    not base_events._is_stream_socket(sock.type)):
                 raise ValueError(
                     'A UNIX Domain Stream Socket was expected, got {!r}'
                     .format(sock))
diff -urpN Python-3.6.3/Lib/bdb.py Python-3.6.5/Lib/bdb.py
--- Python-3.6.3/Lib/bdb.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/bdb.py	2018-03-28 11:19:31.000000000 +0200
@@ -3,10 +3,13 @@
 import fnmatch
 import sys
 import os
-from inspect import CO_GENERATOR
+from inspect import CO_GENERATOR, CO_COROUTINE, CO_ASYNC_GENERATOR
 
 __all__ = ["BdbQuit", "Bdb", "Breakpoint"]
 
+GENERATOR_AND_COROUTINE_FLAGS = CO_GENERATOR | CO_COROUTINE | CO_ASYNC_GENERATOR
+
+
 class BdbQuit(Exception):
     """Exception to give up completely."""
 
@@ -77,7 +80,7 @@ class Bdb:
             # No need to trace this function
             return # None
         # Ignore call events in generator except when stepping.
-        if self.stopframe and frame.f_code.co_flags & CO_GENERATOR:
+        if self.stopframe and frame.f_code.co_flags & GENERATOR_AND_COROUTINE_FLAGS:
             return self.trace_dispatch
         self.user_call(frame, arg)
         if self.quitting: raise BdbQuit
@@ -86,7 +89,7 @@ class Bdb:
     def dispatch_return(self, frame, arg):
         if self.stop_here(frame) or frame == self.returnframe:
             # Ignore return events in generator except when stepping.
-            if self.stopframe and frame.f_code.co_flags & CO_GENERATOR:
+            if self.stopframe and frame.f_code.co_flags & GENERATOR_AND_COROUTINE_FLAGS:
                 return self.trace_dispatch
             try:
                 self.frame_returning = frame
@@ -104,7 +107,7 @@ class Bdb:
             # When stepping with next/until/return in a generator frame, skip
             # the internal StopIteration exception (with no traceback)
             # triggered by a subiterator run with the 'yield from' statement.
-            if not (frame.f_code.co_flags & CO_GENERATOR
+            if not (frame.f_code.co_flags & GENERATOR_AND_COROUTINE_FLAGS
                     and arg[0] is StopIteration and arg[2] is None):
                 self.user_exception(frame, arg)
                 if self.quitting: raise BdbQuit
@@ -113,7 +116,7 @@ class Bdb:
         # next/until command at the last statement in the generator before the
         # exception.
         elif (self.stopframe and frame is not self.stopframe
-                and self.stopframe.f_code.co_flags & CO_GENERATOR
+                and self.stopframe.f_code.co_flags & GENERATOR_AND_COROUTINE_FLAGS
                 and arg[0] in (StopIteration, GeneratorExit)):
             self.user_exception(frame, arg)
             if self.quitting: raise BdbQuit
@@ -230,7 +233,7 @@ class Bdb:
 
     def set_return(self, frame):
         """Stop when returning from the given frame."""
-        if frame.f_code.co_flags & CO_GENERATOR:
+        if frame.f_code.co_flags & GENERATOR_AND_COROUTINE_FLAGS:
             self._set_stopinfo(frame, None, -1)
         else:
             self._set_stopinfo(frame.f_back, frame)
diff -urpN Python-3.6.3/Lib/codecs.py Python-3.6.5/Lib/codecs.py
--- Python-3.6.3/Lib/codecs.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/codecs.py	2018-03-28 11:19:31.000000000 +0200
@@ -479,15 +479,17 @@ class StreamReader(Codec):
             self.charbuffer = self._empty_charbuffer.join(self.linebuffer)
             self.linebuffer = None
 
+        if chars < 0:
+            # For compatibility with other read() methods that take a
+            # single argument
+            chars = size
+
         # read until we get the required number of characters (if available)
         while True:
             # can the request be satisfied from the character buffer?
             if chars >= 0:
                 if len(self.charbuffer) >= chars:
                     break
-            elif size >= 0:
-                if len(self.charbuffer) >= size:
-                    break
             # we need more data
             if size < 0:
                 newdata = self.stream.read()
diff -urpN Python-3.6.3/Lib/csv.py Python-3.6.5/Lib/csv.py
--- Python-3.6.3/Lib/csv.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/csv.py	2018-03-28 11:19:31.000000000 +0200
@@ -217,7 +217,7 @@ class Sniffer:
         matches = []
         for restr in (r'(?P<delim>[^\w\n"\'])(?P<space> ?)(?P<quote>["\']).*?(?P=quote)(?P=delim)', # ,".*?",
                       r'(?:^|\n)(?P<quote>["\']).*?(?P=quote)(?P<delim>[^\w\n"\'])(?P<space> ?)',   #  ".*?",
-                      r'(?P<delim>>[^\w\n"\'])(?P<space> ?)(?P<quote>["\']).*?(?P=quote)(?:$|\n)',  # ,".*?"
+                      r'(?P<delim>[^\w\n"\'])(?P<space> ?)(?P<quote>["\']).*?(?P=quote)(?:$|\n)',   # ,".*?"
                       r'(?:^|\n)(?P<quote>["\']).*?(?P=quote)(?:$|\n)'):                            #  ".*?" (no delim, no space)
             regexp = re.compile(restr, re.DOTALL | re.MULTILINE)
             matches = regexp.findall(data)
diff -urpN Python-3.6.3/Lib/ctypes/test/test_anon.py Python-3.6.5/Lib/ctypes/test/test_anon.py
--- Python-3.6.3/Lib/ctypes/test/test_anon.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ctypes/test/test_anon.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,4 +1,5 @@
 import unittest
+import test.support
 from ctypes import *
 
 class AnonTest(unittest.TestCase):
@@ -35,6 +36,18 @@ class AnonTest(unittest.TestCase):
                                                       {"_fields_": [],
                                                        "_anonymous_": ["x"]}))
 
+    @test.support.cpython_only
+    def test_issue31490(self):
+        # There shouldn't be an assertion failure in case the class has an
+        # attribute whose name is specified in _anonymous_ but not in _fields_.
+
+        # AttributeError: 'x' is specified in _anonymous_ but not in _fields_
+        with self.assertRaises(AttributeError):
+            class Name(Structure):
+                _fields_ = []
+                _anonymous_ = ["x"]
+                x = 42
+
     def test_nested(self):
         class ANON_S(Structure):
             _fields_ = [("a", c_int)]
diff -urpN Python-3.6.3/Lib/ctypes/test/test_as_parameter.py Python-3.6.5/Lib/ctypes/test/test_as_parameter.py
--- Python-3.6.3/Lib/ctypes/test/test_as_parameter.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ctypes/test/test_as_parameter.py	2018-03-28 11:19:31.000000000 +0200
@@ -169,6 +169,10 @@ class BasicWrapTestCase(unittest.TestCas
         s2h = dll.ret_2h_func(self.wrap(inp))
         self.assertEqual((s2h.x, s2h.y), (99*2, 88*3))
 
+        # Test also that the original struct was unmodified (i.e. was passed by
+        # value)
+        self.assertEqual((inp.x, inp.y), (99, 88))
+
     def test_struct_return_8H(self):
         class S8I(Structure):
             _fields_ = [("a", c_int),
diff -urpN Python-3.6.3/Lib/ctypes/test/test_frombuffer.py Python-3.6.5/Lib/ctypes/test/test_frombuffer.py
--- Python-3.6.3/Lib/ctypes/test/test_frombuffer.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ctypes/test/test_frombuffer.py	2018-03-28 11:19:31.000000000 +0200
@@ -121,12 +121,21 @@ class Test(unittest.TestCase):
             (c_int * 1).from_buffer_copy(a, 16 * sizeof(c_int))
 
     def test_abstract(self):
+        from ctypes import _Pointer, _SimpleCData, _CFuncPtr
+
         self.assertRaises(TypeError, Array.from_buffer, bytearray(10))
         self.assertRaises(TypeError, Structure.from_buffer, bytearray(10))
         self.assertRaises(TypeError, Union.from_buffer, bytearray(10))
+        self.assertRaises(TypeError, _CFuncPtr.from_buffer, bytearray(10))
+        self.assertRaises(TypeError, _Pointer.from_buffer, bytearray(10))
+        self.assertRaises(TypeError, _SimpleCData.from_buffer, bytearray(10))
+
         self.assertRaises(TypeError, Array.from_buffer_copy, b"123")
         self.assertRaises(TypeError, Structure.from_buffer_copy, b"123")
         self.assertRaises(TypeError, Union.from_buffer_copy, b"123")
+        self.assertRaises(TypeError, _CFuncPtr.from_buffer_copy, b"123")
+        self.assertRaises(TypeError, _Pointer.from_buffer_copy, b"123")
+        self.assertRaises(TypeError, _SimpleCData.from_buffer_copy, b"123")
 
 if __name__ == '__main__':
     unittest.main()
diff -urpN Python-3.6.3/Lib/ctypes/test/test_funcptr.py Python-3.6.5/Lib/ctypes/test/test_funcptr.py
--- Python-3.6.3/Lib/ctypes/test/test_funcptr.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ctypes/test/test_funcptr.py	2018-03-28 11:19:31.000000000 +0200
@@ -123,5 +123,10 @@ class CFuncPtrTestCase(unittest.TestCase
         self.assertEqual(strtok(None, b"\n"), b"c")
         self.assertEqual(strtok(None, b"\n"), None)
 
+    def test_abstract(self):
+        from ctypes import _CFuncPtr
+
+        self.assertRaises(TypeError, _CFuncPtr, 13, "name", 42, "iid")
+
 if __name__ == '__main__':
     unittest.main()
diff -urpN Python-3.6.3/Lib/ctypes/test/test_parameters.py Python-3.6.5/Lib/ctypes/test/test_parameters.py
--- Python-3.6.3/Lib/ctypes/test/test_parameters.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ctypes/test/test_parameters.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,5 +1,6 @@
 import unittest
 from ctypes.test import need_symbol
+import test.support
 
 class SimpleTypesTestCase(unittest.TestCase):
 
@@ -169,6 +170,36 @@ class SimpleTypesTestCase(unittest.TestC
         # ArgumentError: argument 1: ValueError: 99
         self.assertRaises(ArgumentError, func, 99)
 
+    def test_abstract(self):
+        from ctypes import (Array, Structure, Union, _Pointer,
+                            _SimpleCData, _CFuncPtr)
+
+        self.assertRaises(TypeError, Array.from_param, 42)
+        self.assertRaises(TypeError, Structure.from_param, 42)
+        self.assertRaises(TypeError, Union.from_param, 42)
+        self.assertRaises(TypeError, _CFuncPtr.from_param, 42)
+        self.assertRaises(TypeError, _Pointer.from_param, 42)
+        self.assertRaises(TypeError, _SimpleCData.from_param, 42)
+
+    @test.support.cpython_only
+    def test_issue31311(self):
+        # __setstate__ should neither raise a SystemError nor crash in case
+        # of a bad __dict__.
+        from ctypes import Structure
+
+        class BadStruct(Structure):
+            @property
+            def __dict__(self):
+                pass
+        with self.assertRaises(TypeError):
+            BadStruct().__setstate__({}, b'foo')
+
+        class WorseStruct(Structure):
+            @property
+            def __dict__(self):
+                1/0
+        with self.assertRaises(ZeroDivisionError):
+            WorseStruct().__setstate__({}, b'foo')
 
 ################################################################
 
diff -urpN Python-3.6.3/Lib/ctypes/test/test_pep3118.py Python-3.6.5/Lib/ctypes/test/test_pep3118.py
--- Python-3.6.3/Lib/ctypes/test/test_pep3118.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ctypes/test/test_pep3118.py	2018-03-28 11:19:31.000000000 +0200
@@ -188,7 +188,7 @@ native_types = [
     (PackedPoint,               "B",                                   (),  PackedPoint),
     (Point2,                    "T{<l:x:<l:y:}".replace('l', s_long),  (),  Point2),
     (EmptyStruct,               "T{}",                                 (),  EmptyStruct),
-    # the pep does't support unions
+    # the pep doesn't support unions
     (aUnion,                    "B",                                   (),  aUnion),
     # structure with sub-arrays
     (StructWithArrays, "T{(2,3)<l:x:(4)T{<l:x:<l:y:}:y:}".replace('l', s_long), (), StructWithArrays),
diff -urpN Python-3.6.3/Lib/ctypes/test/test_pointers.py Python-3.6.5/Lib/ctypes/test/test_pointers.py
--- Python-3.6.3/Lib/ctypes/test/test_pointers.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ctypes/test/test_pointers.py	2018-03-28 11:19:31.000000000 +0200
@@ -213,6 +213,11 @@ class PointersTestCase(unittest.TestCase
         from ctypes import _pointer_type_cache
         del _pointer_type_cache[id(P)]
 
+    def test_abstract(self):
+        from ctypes import _Pointer
+
+        self.assertRaises(TypeError, _Pointer.set_type, 42)
+
 
 if __name__ == '__main__':
     unittest.main()
diff -urpN Python-3.6.3/Lib/ctypes/test/test_struct_fields.py Python-3.6.5/Lib/ctypes/test/test_struct_fields.py
--- Python-3.6.3/Lib/ctypes/test/test_struct_fields.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ctypes/test/test_struct_fields.py	2018-03-28 11:19:31.000000000 +0200
@@ -46,5 +46,29 @@ class StructFieldsTestCase(unittest.Test
         Y._fields_ = []
         self.assertRaises(AttributeError, setattr, X, "_fields_", [])
 
+    # __set__ and __get__ should raise a TypeError in case their self
+    # argument is not a ctype instance.
+    def test___set__(self):
+        class MyCStruct(Structure):
+            _fields_ = (("field", c_int),)
+        self.assertRaises(TypeError,
+                          MyCStruct.field.__set__, 'wrong type self', 42)
+
+        class MyCUnion(Union):
+            _fields_ = (("field", c_int),)
+        self.assertRaises(TypeError,
+                          MyCUnion.field.__set__, 'wrong type self', 42)
+
+    def test___get__(self):
+        class MyCStruct(Structure):
+            _fields_ = (("field", c_int),)
+        self.assertRaises(TypeError,
+                          MyCStruct.field.__get__, 'wrong type self', 42)
+
+        class MyCUnion(Union):
+            _fields_ = (("field", c_int),)
+        self.assertRaises(TypeError,
+                          MyCUnion.field.__get__, 'wrong type self', 42)
+
 if __name__ == "__main__":
     unittest.main()
diff -urpN Python-3.6.3/Lib/ctypes/test/test_structures.py Python-3.6.5/Lib/ctypes/test/test_structures.py
--- Python-3.6.3/Lib/ctypes/test/test_structures.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ctypes/test/test_structures.py	2018-03-28 11:19:31.000000000 +0200
@@ -129,7 +129,7 @@ class StructureTestCase(unittest.TestCas
         self.assertEqual(sizeof(XX), 0)
 
     def test_fields(self):
-        # test the offset and size attributes of Structure/Unoin fields.
+        # test the offset and size attributes of Structure/Union fields.
         class X(Structure):
             _fields_ = [("x", c_int),
                         ("y", c_char)]
@@ -417,6 +417,28 @@ class StructureTestCase(unittest.TestCas
         self.assertEqual(s.second, 0xcafebabe)
         self.assertEqual(s.third, 0x0bad1dea)
 
+    def test_pass_by_value_in_register(self):
+        class X(Structure):
+            _fields_ = [
+                ('first', c_uint),
+                ('second', c_uint)
+            ]
+
+        s = X()
+        s.first = 0xdeadbeef
+        s.second = 0xcafebabe
+        dll = CDLL(_ctypes_test.__file__)
+        func = dll._testfunc_reg_struct_update_value
+        func.argtypes = (X,)
+        func.restype = None
+        func(s)
+        self.assertEqual(s.first, 0xdeadbeef)
+        self.assertEqual(s.second, 0xcafebabe)
+        got = X.in_dll(dll, "last_tfrsuv_arg")
+        self.assertEqual(s.first, got.first)
+        self.assertEqual(s.second, got.second)
+
+
 class PointerMemberTestCase(unittest.TestCase):
 
     def test(self):
diff -urpN Python-3.6.3/Lib/datetime.py Python-3.6.5/Lib/datetime.py
--- Python-3.6.3/Lib/datetime.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/datetime.py	2018-03-28 11:19:31.000000000 +0200
@@ -827,7 +827,7 @@ class date:
             month = self._month
         if day is None:
             day = self._day
-        return date(year, month, day)
+        return type(self)(year, month, day)
 
     # Comparisons of date objects with other.
 
@@ -1315,7 +1315,7 @@ class time:
             tzinfo = self.tzinfo
         if fold is None:
             fold = self._fold
-        return time(hour, minute, second, microsecond, tzinfo, fold=fold)
+        return type(self)(hour, minute, second, microsecond, tzinfo, fold=fold)
 
     # Pickle support.
 
@@ -1596,7 +1596,7 @@ class datetime(date):
             tzinfo = self.tzinfo
         if fold is None:
             fold = self.fold
-        return datetime(year, month, day, hour, minute, second,
+        return type(self)(year, month, day, hour, minute, second,
                           microsecond, tzinfo, fold=fold)
 
     def _local_timezone(self):
diff -urpN Python-3.6.3/Lib/difflib.py Python-3.6.5/Lib/difflib.py
--- Python-3.6.3/Lib/difflib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/difflib.py	2018-03-28 11:19:31.000000000 +0200
@@ -1083,7 +1083,7 @@ class Differ:
 
 import re
 
-def IS_LINE_JUNK(line, pat=re.compile(r"\s*#?\s*$").match):
+def IS_LINE_JUNK(line, pat=re.compile(r"\s*(?:#\s*)?$").match):
     r"""
     Return 1 for ignorable line: iff `line` is blank or contains a single '#'.
 
diff -urpN Python-3.6.3/Lib/distutils/_msvccompiler.py Python-3.6.5/Lib/distutils/_msvccompiler.py
--- Python-3.6.3/Lib/distutils/_msvccompiler.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/distutils/_msvccompiler.py	2018-03-28 11:19:31.000000000 +0200
@@ -56,7 +56,7 @@ def _find_vc2015():
     return best_version, best_dir
 
 def _find_vc2017():
-    import _findvs
+    import _distutils_findvs
     import threading
 
     best_version = 0,   # tuple for full version comparisons
@@ -66,7 +66,7 @@ def _find_vc2017():
     # initialize COM.
     all_packages = []
     def _getall():
-        all_packages.extend(_findvs.findall())
+        all_packages.extend(_distutils_findvs.findall())
     t = threading.Thread(target=_getall)
     t.start()
     t.join()
diff -urpN Python-3.6.3/Lib/distutils/command/bdist_wininst.py Python-3.6.5/Lib/distutils/command/bdist_wininst.py
--- Python-3.6.3/Lib/distutils/command/bdist_wininst.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/distutils/command/bdist_wininst.py	2018-03-28 11:19:31.000000000 +0200
@@ -337,11 +337,10 @@ class bdist_wininst(Command):
                 # cross-building, so assume the latest version
                 bv = '14.0'
             else:
-                bv = '.'.join(CRT_ASSEMBLY_VERSION.split('.', 2)[:2])
-                if bv == '14.11':
-                    # v141 and v140 are binary compatible,
-                    # so keep using the 14.0 stub.
-                    bv = '14.0'
+                # as far as we know, CRT is binary compatible based on
+                # the first field, so assume 'x.0' until proven otherwise
+                major = CRT_ASSEMBLY_VERSION.partition('.')[0]
+                bv = major + '.0'
 
 
         # wininst-x.y.exe is in the same directory as this file
diff -urpN Python-3.6.3/Lib/distutils/command/upload.py Python-3.6.5/Lib/distutils/command/upload.py
--- Python-3.6.3/Lib/distutils/command/upload.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/distutils/command/upload.py	2018-03-28 11:19:31.000000000 +0200
@@ -57,7 +57,8 @@ class upload(PyPIRCCommand):
 
     def run(self):
         if not self.distribution.dist_files:
-            msg = "No dist file created in earlier command"
+            msg = ("Must create and upload files in one command "
+                   "(e.g. setup.py sdist upload)")
             raise DistutilsOptionError(msg)
         for command, pyversion, filename in self.distribution.dist_files:
             self.upload_file(command, pyversion, filename)
@@ -159,8 +160,6 @@ class upload(PyPIRCCommand):
                 body.write(title.encode('utf-8'))
                 body.write(b"\r\n\r\n")
                 body.write(value)
-                if value and value[-1:] == b'\r':
-                    body.write(b'\n')  # write an extra newline (lurve Macs)
         body.write(end_boundary)
         body = body.getvalue()
 
diff -urpN Python-3.6.3/Lib/distutils/tests/test_upload.py Python-3.6.5/Lib/distutils/tests/test_upload.py
--- Python-3.6.3/Lib/distutils/tests/test_upload.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/distutils/tests/test_upload.py	2018-03-28 11:19:31.000000000 +0200
@@ -143,6 +143,32 @@ class uploadTestCase(BasePyPIRCCommandTe
         results = self.get_logs(INFO)
         self.assertEqual(results[-1], 75 * '-' + '\nxyzzy\n' + 75 * '-')
 
+    # bpo-32304: archives whose last byte was b'\r' were corrupted due to
+    # normalization intended for Mac OS 9.
+    def test_upload_correct_cr(self):
+        # content that ends with \r should not be modified.
+        tmp = self.mkdtemp()
+        path = os.path.join(tmp, 'xxx')
+        self.write_file(path, content='yy\r')
+        command, pyversion, filename = 'xxx', '2.6', path
+        dist_files = [(command, pyversion, filename)]
+        self.write_file(self.rc, PYPIRC_LONG_PASSWORD)
+
+        # other fields that ended with \r used to be modified, now are
+        # preserved.
+        pkg_dir, dist = self.create_dist(
+            dist_files=dist_files,
+            description='long description\r'
+        )
+        cmd = upload(dist)
+        cmd.show_response = 1
+        cmd.ensure_finalized()
+        cmd.run()
+
+        headers = dict(self.last_open.req.headers)
+        self.assertEqual(headers['Content-length'], '2172')
+        self.assertIn(b'long description\r', self.last_open.req.data)
+
     def test_upload_fails(self):
         self.next_msg = "Not Found"
         self.next_code = 404
diff -urpN Python-3.6.3/Lib/email/_header_value_parser.py Python-3.6.5/Lib/email/_header_value_parser.py
--- Python-3.6.3/Lib/email/_header_value_parser.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/email/_header_value_parser.py	2018-03-28 11:19:31.000000000 +0200
@@ -97,96 +97,14 @@ def quote_string(value):
     return '"'+str(value).replace('\\', '\\\\').replace('"', r'\"')+'"'
 
 #
-# Accumulator for header folding
-#
-
-class _Folded:
-
-    def __init__(self, maxlen, policy):
-        self.maxlen = maxlen
-        self.policy = policy
-        self.lastlen = 0
-        self.stickyspace = None
-        self.firstline = True
-        self.done = []
-        self.current = []
-
-    def newline(self):
-        self.done.extend(self.current)
-        self.done.append(self.policy.linesep)
-        self.current.clear()
-        self.lastlen = 0
-
-    def finalize(self):
-        if self.current:
-            self.newline()
-
-    def __str__(self):
-        return ''.join(self.done)
-
-    def append(self, stoken):
-        self.current.append(stoken)
-
-    def append_if_fits(self, token, stoken=None):
-        if stoken is None:
-            stoken = str(token)
-        l = len(stoken)
-        if self.stickyspace is not None:
-            stickyspace_len = len(self.stickyspace)
-            if self.lastlen + stickyspace_len + l <= self.maxlen:
-                self.current.append(self.stickyspace)
-                self.lastlen += stickyspace_len
-                self.current.append(stoken)
-                self.lastlen += l
-                self.stickyspace = None
-                self.firstline = False
-                return True
-            if token.has_fws:
-                ws = token.pop_leading_fws()
-                if ws is not None:
-                    self.stickyspace += str(ws)
-                    stickyspace_len += len(ws)
-                token._fold(self)
-                return True
-            if stickyspace_len and l + 1 <= self.maxlen:
-                margin = self.maxlen - l
-                if 0 < margin < stickyspace_len:
-                    trim = stickyspace_len - margin
-                    self.current.append(self.stickyspace[:trim])
-                    self.stickyspace = self.stickyspace[trim:]
-                    stickyspace_len = trim
-                self.newline()
-                self.current.append(self.stickyspace)
-                self.current.append(stoken)
-                self.lastlen = l + stickyspace_len
-                self.stickyspace = None
-                self.firstline = False
-                return True
-            if not self.firstline:
-                self.newline()
-            self.current.append(self.stickyspace)
-            self.current.append(stoken)
-            self.stickyspace = None
-            self.firstline = False
-            return True
-        if self.lastlen + l <= self.maxlen:
-            self.current.append(stoken)
-            self.lastlen += l
-            return True
-        if l < self.maxlen:
-            self.newline()
-            self.current.append(stoken)
-            self.lastlen = l
-            return True
-        return False
-
-#
 # TokenList and its subclasses
 #
 
 class TokenList(list):
 
     token_type = None
+    syntactic_break = True
+    ew_combine_allowed = True
 
     def __init__(self, *args, **kw):
         super().__init__(*args, **kw)
@@ -207,84 +125,13 @@ class TokenList(list):
     def all_defects(self):
         return sum((x.all_defects for x in self), self.defects)
 
-    #
-    # Folding API
-    #
-    # parts():
-    #
-    # return a list of objects that constitute the "higher level syntactic
-    # objects" specified by the RFC as the best places to fold a header line.
-    # The returned objects must include leading folding white space, even if
-    # this means mutating the underlying parse tree of the object.  Each object
-    # is only responsible for returning *its* parts, and should not drill down
-    # to any lower level except as required to meet the leading folding white
-    # space constraint.
-    #
-    # _fold(folded):
-    #
-    #   folded: the result accumulator.  This is an instance of _Folded.
-    #       (XXX: I haven't finished factoring this out yet, the folding code
-    #       pretty much uses this as a state object.) When the folded.current
-    #       contains as much text as will fit, the _fold method should call
-    #       folded.newline.
-    #  folded.lastlen: the current length of the test stored in folded.current.
-    #  folded.maxlen: The maximum number of characters that may appear on a
-    #       folded line.  Differs from the policy setting in that "no limit" is
-    #       represented by +inf, which means it can be used in the trivially
-    #       logical fashion in comparisons.
-    #
-    # Currently no subclasses implement parts, and I think this will remain
-    # true.  A subclass only needs to implement _fold when the generic version
-    # isn't sufficient.  _fold will need to be implemented primarily when it is
-    # possible for encoded words to appear in the specialized token-list, since
-    # there is no generic algorithm that can know where exactly the encoded
-    # words are allowed.  A _fold implementation is responsible for filling
-    # lines in the same general way that the top level _fold does. It may, and
-    # should, call the _fold method of sub-objects in a similar fashion to that
-    # of the top level _fold.
-    #
-    # XXX: I'm hoping it will be possible to factor the existing code further
-    # to reduce redundancy and make the logic clearer.
-
-    @property
-    def parts(self):
-        klass = self.__class__
-        this = []
-        for token in self:
-            if token.startswith_fws():
-                if this:
-                    yield this[0] if len(this)==1 else klass(this)
-                    this.clear()
-            end_ws = token.pop_trailing_ws()
-            this.append(token)
-            if end_ws:
-                yield klass(this)
-                this = [end_ws]
-        if this:
-            yield this[0] if len(this)==1 else klass(this)
-
     def startswith_fws(self):
         return self[0].startswith_fws()
 
-    def pop_leading_fws(self):
-        if self[0].token_type == 'fws':
-            return self.pop(0)
-        return self[0].pop_leading_fws()
-
-    def pop_trailing_ws(self):
-        if self[-1].token_type == 'cfws':
-            return self.pop(-1)
-        return self[-1].pop_trailing_ws()
-
     @property
-    def has_fws(self):
-        for part in self:
-            if part.has_fws:
-                return True
-        return False
-
-    def has_leading_comment(self):
-        return self[0].has_leading_comment()
+    def as_ew_allowed(self):
+        """True if all top level tokens of this part may be RFC2047 encoded."""
+        return all(part.as_ew_allowed for part in self)
 
     @property
     def comments(self):
@@ -294,69 +141,13 @@ class TokenList(list):
         return comments
 
     def fold(self, *, policy):
-        # max_line_length 0/None means no limit, ie: infinitely long.
-        maxlen = policy.max_line_length or float("+inf")
-        folded = _Folded(maxlen, policy)
-        self._fold(folded)
-        folded.finalize()
-        return str(folded)
-
-    def as_encoded_word(self, charset):
-        # This works only for things returned by 'parts', which include
-        # the leading fws, if any, that should be used.
-        res = []
-        ws = self.pop_leading_fws()
-        if ws:
-            res.append(ws)
-        trailer = self.pop(-1) if self[-1].token_type=='fws' else ''
-        res.append(_ew.encode(str(self), charset))
-        res.append(trailer)
-        return ''.join(res)
-
-    def cte_encode(self, charset, policy):
-        res = []
-        for part in self:
-            res.append(part.cte_encode(charset, policy))
-        return ''.join(res)
-
-    def _fold(self, folded):
-        encoding = 'utf-8' if folded.policy.utf8 else 'ascii'
-        for part in self.parts:
-            tstr = str(part)
-            tlen = len(tstr)
-            try:
-                str(part).encode(encoding)
-            except UnicodeEncodeError:
-                if any(isinstance(x, errors.UndecodableBytesDefect)
-                        for x in part.all_defects):
-                    charset = 'unknown-8bit'
-                else:
-                    # XXX: this should be a policy setting when utf8 is False.
-                    charset = 'utf-8'
-                tstr = part.cte_encode(charset, folded.policy)
-                tlen = len(tstr)
-            if folded.append_if_fits(part, tstr):
-                continue
-            # Peel off the leading whitespace if any and make it sticky, to
-            # avoid infinite recursion.
-            ws = part.pop_leading_fws()
-            if ws is not None:
-                folded.stickyspace = str(ws)
-                if folded.append_if_fits(part):
-                    continue
-            if part.has_fws:
-                part._fold(folded)
-                continue
-            # There are no fold points in this one; it is too long for a single
-            # line and can't be split...we just have to put it on its own line.
-            folded.append(tstr)
-            folded.newline()
+        return _refold_parse_tree(self, policy=policy)
 
     def pprint(self, indent=''):
-        print('\n'.join(self._pp(indent='')))
+        print(self.ppstr(indent=indent))
 
     def ppstr(self, indent=''):
-        return '\n'.join(self._pp(indent=''))
+        return '\n'.join(self._pp(indent=indent))
 
     def _pp(self, indent=''):
         yield '{}{}/{}('.format(
@@ -391,173 +182,11 @@ class UnstructuredTokenList(TokenList):
 
     token_type = 'unstructured'
 
-    def _fold(self, folded):
-        last_ew = None
-        encoding = 'utf-8' if folded.policy.utf8 else 'ascii'
-        for part in self.parts:
-            tstr = str(part)
-            is_ew = False
-            try:
-                str(part).encode(encoding)
-            except UnicodeEncodeError:
-                if any(isinstance(x, errors.UndecodableBytesDefect)
-                       for x in part.all_defects):
-                    charset = 'unknown-8bit'
-                else:
-                    charset = 'utf-8'
-                if last_ew is not None:
-                    # We've already done an EW, combine this one with it
-                    # if there's room.
-                    chunk = get_unstructured(
-                        ''.join(folded.current[last_ew:]+[tstr])).as_encoded_word(charset)
-                    oldlastlen = sum(len(x) for x in folded.current[:last_ew])
-                    schunk = str(chunk)
-                    lchunk = len(schunk)
-                    if oldlastlen + lchunk <= folded.maxlen:
-                        del folded.current[last_ew:]
-                        folded.append(schunk)
-                        folded.lastlen = oldlastlen + lchunk
-                        continue
-                tstr = part.as_encoded_word(charset)
-                is_ew = True
-            if folded.append_if_fits(part, tstr):
-                if is_ew:
-                    last_ew = len(folded.current) - 1
-                continue
-            if is_ew or last_ew:
-                # It's too big to fit on the line, but since we've
-                # got encoded words we can use encoded word folding.
-                part._fold_as_ew(folded)
-                continue
-            # Peel off the leading whitespace if any and make it sticky, to
-            # avoid infinite recursion.
-            ws = part.pop_leading_fws()
-            if ws is not None:
-                folded.stickyspace = str(ws)
-                if folded.append_if_fits(part):
-                    continue
-            if part.has_fws:
-                part._fold(folded)
-                continue
-            # It can't be split...we just have to put it on its own line.
-            folded.append(tstr)
-            folded.newline()
-            last_ew = None
-
-    def cte_encode(self, charset, policy):
-        res = []
-        last_ew = None
-        for part in self:
-            spart = str(part)
-            try:
-                spart.encode('us-ascii')
-                res.append(spart)
-            except UnicodeEncodeError:
-                if last_ew is None:
-                    res.append(part.cte_encode(charset, policy))
-                    last_ew = len(res)
-                else:
-                    tl = get_unstructured(''.join(res[last_ew:] + [spart]))
-                    res.append(tl.as_encoded_word(charset))
-        return ''.join(res)
-
 
 class Phrase(TokenList):
 
     token_type = 'phrase'
 
-    def _fold(self, folded):
-        # As with Unstructured, we can have pure ASCII with or without
-        # surrogateescape encoded bytes, or we could have unicode.  But this
-        # case is more complicated, since we have to deal with the various
-        # sub-token types and how they can be composed in the face of
-        # unicode-that-needs-CTE-encoding, and the fact that if a token a
-        # comment that becomes a barrier across which we can't compose encoded
-        # words.
-        last_ew = None
-        encoding = 'utf-8' if folded.policy.utf8 else 'ascii'
-        for part in self.parts:
-            tstr = str(part)
-            tlen = len(tstr)
-            has_ew = False
-            try:
-                str(part).encode(encoding)
-            except UnicodeEncodeError:
-                if any(isinstance(x, errors.UndecodableBytesDefect)
-                        for x in part.all_defects):
-                    charset = 'unknown-8bit'
-                else:
-                    charset = 'utf-8'
-                if last_ew is not None and not part.has_leading_comment():
-                    # We've already done an EW, let's see if we can combine
-                    # this one with it.  The last_ew logic ensures that all we
-                    # have at this point is atoms, no comments or quoted
-                    # strings.  So we can treat the text between the last
-                    # encoded word and the content of this token as
-                    # unstructured text, and things will work correctly.  But
-                    # we have to strip off any trailing comment on this token
-                    # first, and if it is a quoted string we have to pull out
-                    # the content (we're encoding it, so it no longer needs to
-                    # be quoted).
-                    if part[-1].token_type == 'cfws' and part.comments:
-                        remainder = part.pop(-1)
-                    else:
-                        remainder = ''
-                    for i, token in enumerate(part):
-                        if token.token_type == 'bare-quoted-string':
-                            part[i] = UnstructuredTokenList(token[:])
-                    chunk = get_unstructured(
-                        ''.join(folded.current[last_ew:]+[tstr])).as_encoded_word(charset)
-                    schunk = str(chunk)
-                    lchunk = len(schunk)
-                    if last_ew + lchunk <= folded.maxlen:
-                        del folded.current[last_ew:]
-                        folded.append(schunk)
-                        folded.lastlen = sum(len(x) for x in folded.current)
-                        continue
-                tstr = part.as_encoded_word(charset)
-                tlen = len(tstr)
-                has_ew = True
-            if folded.append_if_fits(part, tstr):
-                if has_ew and not part.comments:
-                    last_ew = len(folded.current) - 1
-                elif part.comments or part.token_type == 'quoted-string':
-                    # If a comment is involved we can't combine EWs.  And if a
-                    # quoted string is involved, it's not worth the effort to
-                    # try to combine them.
-                    last_ew = None
-                continue
-            part._fold(folded)
-
-    def cte_encode(self, charset, policy):
-        res = []
-        last_ew = None
-        is_ew = False
-        for part in self:
-            spart = str(part)
-            try:
-                spart.encode('us-ascii')
-                res.append(spart)
-            except UnicodeEncodeError:
-                is_ew = True
-                if last_ew is None:
-                    if not part.comments:
-                        last_ew = len(res)
-                    res.append(part.cte_encode(charset, policy))
-                elif not part.has_leading_comment():
-                    if part[-1].token_type == 'cfws' and part.comments:
-                        remainder = part.pop(-1)
-                    else:
-                        remainder = ''
-                    for i, token in enumerate(part):
-                        if token.token_type == 'bare-quoted-string':
-                            part[i] = UnstructuredTokenList(token[:])
-                    tl = get_unstructured(''.join(res[last_ew:] + [spart]))
-                    res[last_ew:] = [tl.as_encoded_word(charset)]
-            if part.comments or (not is_ew and part.token_type == 'quoted-string'):
-                last_ew = None
-        return ''.join(res)
-
 class Word(TokenList):
 
     token_type = 'word'
@@ -567,9 +196,6 @@ class CFWSList(WhiteSpaceTokenList):
 
     token_type = 'cfws'
 
-    def has_leading_comment(self):
-        return bool(self.comments)
-
 
 class Atom(TokenList):
 
@@ -579,6 +205,7 @@ class Atom(TokenList):
 class Token(TokenList):
 
     token_type = 'token'
+    encode_as_ew = False
 
 
 class EncodedWord(TokenList):
@@ -588,13 +215,6 @@ class EncodedWord(TokenList):
     charset = None
     lang = None
 
-    @property
-    def encoded(self):
-        if self.cte is not None:
-            return self.cte
-        _ew.encode(str(self), self.charset)
-
-
 
 class QuotedString(TokenList):
 
@@ -810,7 +430,10 @@ class AngleAddr(TokenList):
     def addr_spec(self):
         for x in self:
             if x.token_type == 'addr-spec':
-                return x.addr_spec
+                if x.local_part:
+                    return x.addr_spec
+                else:
+                    return quote_string(x.local_part) + x.addr_spec
         else:
             return '<>'
 
@@ -865,6 +488,7 @@ class InvalidMailbox(TokenList):
 class Domain(TokenList):
 
     token_type = 'domain'
+    as_ew_allowed = False
 
     @property
     def domain(self):
@@ -879,11 +503,13 @@ class DotAtom(TokenList):
 class DotAtomText(TokenList):
 
     token_type = 'dot-atom-text'
+    as_ew_allowed = True
 
 
 class AddrSpec(TokenList):
 
     token_type = 'addr-spec'
+    as_ew_allowed = False
 
     @property
     def local_part(self):
@@ -916,11 +542,13 @@ class AddrSpec(TokenList):
 class ObsLocalPart(TokenList):
 
     token_type = 'obs-local-part'
+    as_ew_allowed = False
 
 
 class DisplayName(Phrase):
 
     token_type = 'display-name'
+    ew_combine_allowed = False
 
     @property
     def display_name(self):
@@ -960,6 +588,7 @@ class DisplayName(Phrase):
 class LocalPart(TokenList):
 
     token_type = 'local-part'
+    as_ew_allowed = False
 
     @property
     def value(self):
@@ -995,6 +624,7 @@ class LocalPart(TokenList):
 class DomainLiteral(TokenList):
 
     token_type = 'domain-literal'
+    as_ew_allowed = False
 
     @property
     def domain(self):
@@ -1081,6 +711,7 @@ class Value(TokenList):
 class MimeParameters(TokenList):
 
     token_type = 'mime-parameters'
+    syntactic_break = False
 
     @property
     def params(self):
@@ -1165,6 +796,10 @@ class MimeParameters(TokenList):
 
 class ParameterizedHeaderValue(TokenList):
 
+    # Set this false so that the value doesn't wind up on a new line even
+    # if it and the parameters would fit there but not on the first line.
+    syntactic_break = False
+
     @property
     def params(self):
         for token in reversed(self):
@@ -1172,18 +807,11 @@ class ParameterizedHeaderValue(TokenList
                 return token.params
         return {}
 
-    @property
-    def parts(self):
-        if self and self[-1].token_type == 'mime-parameters':
-            # We don't want to start a new line if all of the params don't fit
-            # after the value, so unwrap the parameter list.
-            return TokenList(self[:-1] + self[-1])
-        return TokenList(self).parts
-
 
 class ContentType(ParameterizedHeaderValue):
 
     token_type = 'content-type'
+    as_ew_allowed = False
     maintype = 'text'
     subtype = 'plain'
 
@@ -1191,40 +819,27 @@ class ContentType(ParameterizedHeaderVal
 class ContentDisposition(ParameterizedHeaderValue):
 
     token_type = 'content-disposition'
+    as_ew_allowed = False
     content_disposition = None
 
 
 class ContentTransferEncoding(TokenList):
 
     token_type = 'content-transfer-encoding'
+    as_ew_allowed = False
     cte = '7bit'
 
 
 class HeaderLabel(TokenList):
 
     token_type = 'header-label'
+    as_ew_allowed = False
 
 
 class Header(TokenList):
 
     token_type = 'header'
 
-    def _fold(self, folded):
-        folded.append(str(self.pop(0)))
-        folded.lastlen = len(folded.current[0])
-        # The first line of the header is different from all others: we don't
-        # want to start a new object on a new line if it has any fold points in
-        # it that would allow part of it to be on the first header line.
-        # Further, if the first fold point would fit on the new line, we want
-        # to do that, but if it doesn't we want to put it on the first line.
-        # Folded supports this via the stickyspace attribute.  If this
-        # attribute is not None, it does the special handling.
-        folded.stickyspace = str(self.pop(0)) if self[0].token_type == 'cfws' else ''
-        rest = self.pop(0)
-        if self:
-            raise ValueError("Malformed Header token list")
-        rest._fold(folded)
-
 
 #
 # Terminal classes and instances
@@ -1232,6 +847,10 @@ class Header(TokenList):
 
 class Terminal(str):
 
+    as_ew_allowed = True
+    ew_combine_allowed = True
+    syntactic_break = True
+
     def __new__(cls, value, token_type):
         self = super().__new__(cls, value)
         self.token_type = token_type
@@ -1241,6 +860,9 @@ class Terminal(str):
     def __repr__(self):
         return "{}({})".format(self.__class__.__name__, super().__repr__())
 
+    def pprint(self):
+        print(self.__class__.__name__ + '/' + self.token_type)
+
     @property
     def all_defects(self):
         return list(self.defects)
@@ -1254,29 +876,14 @@ class Terminal(str):
             '' if not self.defects else ' {}'.format(self.defects),
             )]
 
-    def cte_encode(self, charset, policy):
-        value = str(self)
-        try:
-            value.encode('us-ascii')
-            return value
-        except UnicodeEncodeError:
-            return _ew.encode(value, charset)
-
     def pop_trailing_ws(self):
         # This terminates the recursion.
         return None
 
-    def pop_leading_fws(self):
-        # This terminates the recursion.
-        return None
-
     @property
     def comments(self):
         return []
 
-    def has_leading_comment(self):
-        return False
-
     def __getnewargs__(self):
         return(str(self), self.token_type)
 
@@ -1290,8 +897,6 @@ class WhiteSpaceTerminal(Terminal):
     def startswith_fws(self):
         return True
 
-    has_fws = True
-
 
 class ValueTerminal(Terminal):
 
@@ -1302,11 +907,6 @@ class ValueTerminal(Terminal):
     def startswith_fws(self):
         return False
 
-    has_fws = False
-
-    def as_encoded_word(self, charset):
-        return _ew.encode(str(self), charset)
-
 
 class EWWhiteSpaceTerminal(WhiteSpaceTerminal):
 
@@ -1314,15 +914,9 @@ class EWWhiteSpaceTerminal(WhiteSpaceTer
     def value(self):
         return ''
 
-    @property
-    def encoded(self):
-        return self[:]
-
     def __str__(self):
         return ''
 
-    has_fws = True
-
 
 # XXX these need to become classes and used as instances so
 # that a program can't change them in a parse tree and screw
@@ -1574,6 +1168,9 @@ def get_bare_quoted_string(value):
             "expected '\"' but found '{}'".format(value))
     bare_quoted_string = BareQuotedString()
     value = value[1:]
+    if value[0] == '"':
+        token, value = get_qcontent(value)
+        bare_quoted_string.append(token)
     while value and value[0] != '"':
         if value[0] in WSP:
             token, value = get_fws(value)
@@ -2752,7 +2349,7 @@ def get_parameter(value):
         if value[0] != "'":
             raise errors.HeaderParseError("Expected RFC2231 char/lang encoding "
                                           "delimiter, but found {!r}".format(value))
-        appendto.append(ValueTerminal("'", 'RFC2231 delimiter'))
+        appendto.append(ValueTerminal("'", 'RFC2231-delimiter'))
         value = value[1:]
         if value and value[0] != "'":
             token, value = get_attrtext(value)
@@ -2761,7 +2358,7 @@ def get_parameter(value):
             if not value or value[0] != "'":
                 raise errors.HeaderParseError("Expected RFC2231 char/lang encoding "
                                   "delimiter, but found {}".format(value))
-        appendto.append(ValueTerminal("'", 'RFC2231 delimiter'))
+        appendto.append(ValueTerminal("'", 'RFC2231-delimiter'))
         value = value[1:]
     if remainder is not None:
         # Treat the rest of value as bare quoted string content.
@@ -2966,3 +2563,255 @@ def parse_content_transfer_encoding_head
             token, value = get_phrase(value)
             cte_header.append(token)
     return cte_header
+
+
+#
+# Header folding
+#
+# Header folding is complex, with lots of rules and corner cases.  The
+# following code does its best to obey the rules and handle the corner
+# cases, but you can be sure there are few bugs:)
+#
+# This folder generally canonicalizes as it goes, preferring the stringified
+# version of each token.  The tokens contain information that supports the
+# folder, including which tokens can be encoded in which ways.
+#
+# Folded text is accumulated in a simple list of strings ('lines'), each
+# one of which should be less than policy.max_line_length ('maxlen').
+#
+
+def _steal_trailing_WSP_if_exists(lines):
+    wsp = ''
+    if lines and lines[-1] and lines[-1][-1] in WSP:
+        wsp = lines[-1][-1]
+        lines[-1] = lines[-1][:-1]
+    return wsp
+
+def _refold_parse_tree(parse_tree, *, policy):
+    """Return string of contents of parse_tree folded according to RFC rules.
+
+    """
+    # max_line_length 0/None means no limit, ie: infinitely long.
+    maxlen = policy.max_line_length or float("+inf")
+    encoding = 'utf-8' if policy.utf8 else 'us-ascii'
+    lines = ['']
+    last_ew = None
+    wrap_as_ew_blocked = 0
+    want_encoding = False
+    end_ew_not_allowed = Terminal('', 'wrap_as_ew_blocked')
+    parts = list(parse_tree)
+    while parts:
+        part = parts.pop(0)
+        if part is end_ew_not_allowed:
+            wrap_as_ew_blocked -= 1
+            continue
+        tstr = str(part)
+        try:
+            tstr.encode(encoding)
+            charset = encoding
+        except UnicodeEncodeError:
+            if any(isinstance(x, errors.UndecodableBytesDefect)
+                   for x in part.all_defects):
+                charset = 'unknown-8bit'
+            else:
+                # If policy.utf8 is false this should really be taken from a
+                # 'charset' property on the policy.
+                charset = 'utf-8'
+            want_encoding = True
+        if part.token_type == 'mime-parameters':
+            # Mime parameter folding (using RFC2231) is extra special.
+            _fold_mime_parameters(part, lines, maxlen, encoding)
+            continue
+        if want_encoding and not wrap_as_ew_blocked:
+            if not part.as_ew_allowed:
+                want_encoding = False
+                last_ew = None
+                if part.syntactic_break:
+                    encoded_part = part.fold(policy=policy)[:-1] # strip nl
+                    if policy.linesep not in encoded_part:
+                        # It fits on a single line
+                        if len(encoded_part) > maxlen - len(lines[-1]):
+                            # But not on this one, so start a new one.
+                            newline = _steal_trailing_WSP_if_exists(lines)
+                            # XXX what if encoded_part has no leading FWS?
+                            lines.append(newline)
+                        lines[-1] += encoded_part
+                        continue
+                # Either this is not a major syntactic break, so we don't
+                # want it on a line by itself even if it fits, or it
+                # doesn't fit on a line by itself.  Either way, fall through
+                # to unpacking the subparts and wrapping them.
+            if not hasattr(part, 'encode'):
+                # It's not a Terminal, do each piece individually.
+                parts = list(part) + parts
+            else:
+                # It's a terminal, wrap it as an encoded word, possibly
+                # combining it with previously encoded words if allowed.
+                last_ew = _fold_as_ew(tstr, lines, maxlen, last_ew,
+                                      part.ew_combine_allowed, charset)
+            want_encoding = False
+            continue
+        if len(tstr) <= maxlen - len(lines[-1]):
+            lines[-1] += tstr
+            continue
+        # This part is too long to fit.  The RFC wants us to break at
+        # "major syntactic breaks", so unless we don't consider this
+        # to be one, check if it will fit on the next line by itself.
+        if (part.syntactic_break and
+                len(tstr) + 1 <= maxlen):
+            newline = _steal_trailing_WSP_if_exists(lines)
+            if newline or part.startswith_fws():
+                lines.append(newline + tstr)
+                continue
+        if not hasattr(part, 'encode'):
+            # It's not a terminal, try folding the subparts.
+            newparts = list(part)
+            if not part.as_ew_allowed:
+                wrap_as_ew_blocked += 1
+                newparts.append(end_ew_not_allowed)
+            parts = newparts + parts
+            continue
+        if part.as_ew_allowed and not wrap_as_ew_blocked:
+            # It doesn't need CTE encoding, but encode it anyway so we can
+            # wrap it.
+            parts.insert(0, part)
+            want_encoding = True
+            continue
+        # We can't figure out how to wrap, it, so give up.
+        newline = _steal_trailing_WSP_if_exists(lines)
+        if newline or part.startswith_fws():
+            lines.append(newline + tstr)
+        else:
+            # We can't fold it onto the next line either...
+            lines[-1] += tstr
+    return policy.linesep.join(lines) + policy.linesep
+
+def _fold_as_ew(to_encode, lines, maxlen, last_ew, ew_combine_allowed, charset):
+    """Fold string to_encode into lines as encoded word, combining if allowed.
+    Return the new value for last_ew, or None if ew_combine_allowed is False.
+
+    If there is already an encoded word in the last line of lines (indicated by
+    a non-None value for last_ew) and ew_combine_allowed is true, decode the
+    existing ew, combine it with to_encode, and re-encode.  Otherwise, encode
+    to_encode.  In either case, split to_encode as necessary so that the
+    encoded segments fit within maxlen.
+
+    """
+    if last_ew is not None and ew_combine_allowed:
+        to_encode = str(
+            get_unstructured(lines[-1][last_ew:] + to_encode))
+        lines[-1] = lines[-1][:last_ew]
+    if to_encode[0] in WSP:
+        # We're joining this to non-encoded text, so don't encode
+        # the leading blank.
+        leading_wsp = to_encode[0]
+        to_encode = to_encode[1:]
+        if (len(lines[-1]) == maxlen):
+            lines.append(_steal_trailing_WSP_if_exists(lines))
+        lines[-1] += leading_wsp
+    trailing_wsp = ''
+    if to_encode[-1] in WSP:
+        # Likewise for the trailing space.
+        trailing_wsp = to_encode[-1]
+        to_encode = to_encode[:-1]
+    new_last_ew = len(lines[-1]) if last_ew is None else last_ew
+    while to_encode:
+        remaining_space = maxlen - len(lines[-1])
+        # The RFC2047 chrome takes up 7 characters plus the length
+        # of the charset name.
+        encode_as = 'utf-8' if charset == 'us-ascii' else charset
+        text_space = remaining_space - len(encode_as) - 7
+        if text_space <= 0:
+            lines.append(' ')
+            # XXX We'll get an infinite loop here if maxlen is <= 7
+            continue
+        first_part = to_encode[:text_space]
+        ew = _ew.encode(first_part, charset=encode_as)
+        excess = len(ew) - remaining_space
+        if excess > 0:
+            # encode always chooses the shortest encoding, so this
+            # is guaranteed to fit at this point.
+            first_part = first_part[:-excess]
+            ew = _ew.encode(first_part)
+        lines[-1] += ew
+        to_encode = to_encode[len(first_part):]
+        if to_encode:
+            lines.append(' ')
+            new_last_ew = len(lines[-1])
+    lines[-1] += trailing_wsp
+    return new_last_ew if ew_combine_allowed else None
+
+def _fold_mime_parameters(part, lines, maxlen, encoding):
+    """Fold TokenList 'part' into the 'lines' list as mime parameters.
+
+    Using the decoded list of parameters and values, format them according to
+    the RFC rules, including using RFC2231 encoding if the value cannot be
+    expressed in 'encoding' and/or the parameter+value is too long to fit
+    within 'maxlen'.
+
+    """
+    # Special case for RFC2231 encoding: start from decoded values and use
+    # RFC2231 encoding iff needed.
+    #
+    # Note that the 1 and 2s being added to the length calculations are
+    # accounting for the possibly-needed spaces and semicolons we'll be adding.
+    #
+    for name, value in part.params:
+        # XXX What if this ';' puts us over maxlen the first time through the
+        # loop?  We should split the header value onto a newline in that case,
+        # but to do that we need to recognize the need earlier or reparse the
+        # header, so I'm going to ignore that bug for now.  It'll only put us
+        # one character over.
+        if not lines[-1].rstrip().endswith(';'):
+            lines[-1] += ';'
+        charset = encoding
+        error_handler = 'strict'
+        try:
+            value.encode(encoding)
+            encoding_required = False
+        except UnicodeEncodeError:
+            encoding_required = True
+            if utils._has_surrogates(value):
+                charset = 'unknown-8bit'
+                error_handler = 'surrogateescape'
+            else:
+                charset = 'utf-8'
+        if encoding_required:
+            encoded_value = urllib.parse.quote(
+                value, safe='', errors=error_handler)
+            tstr = "{}*={}''{}".format(name, charset, encoded_value)
+        else:
+            tstr = '{}={}'.format(name, quote_string(value))
+        if len(lines[-1]) + len(tstr) + 1 < maxlen:
+            lines[-1] = lines[-1] + ' ' + tstr
+            continue
+        elif len(tstr) + 2 <= maxlen:
+            lines.append(' ' + tstr)
+            continue
+        # We need multiple sections.  We are allowed to mix encoded and
+        # non-encoded sections, but we aren't going to.  We'll encode them all.
+        section = 0
+        extra_chrome = charset + "''"
+        while value:
+            chrome_len = len(name) + len(str(section)) + 3 + len(extra_chrome)
+            if maxlen <= chrome_len + 3:
+                # We need room for the leading blank, the trailing semicolon,
+                # and at least one character of the value.  If we don't
+                # have that, we'd be stuck, so in that case fall back to
+                # the RFC standard width.
+                maxlen = 78
+            splitpoint = maxchars = maxlen - chrome_len - 2
+            while True:
+                partial = value[:splitpoint]
+                encoded_value = urllib.parse.quote(
+                    partial, safe='', errors=error_handler)
+                if len(encoded_value) <= maxchars:
+                    break
+                splitpoint -= 1
+            lines.append(" {}*{}*={}{}".format(
+                name, section, extra_chrome, encoded_value))
+            extra_chrome = ''
+            section += 1
+            value = value[splitpoint:]
+            if value:
+                lines[-1] += ';'
diff -urpN Python-3.6.3/Lib/email/headerregistry.py Python-3.6.5/Lib/email/headerregistry.py
--- Python-3.6.3/Lib/email/headerregistry.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/email/headerregistry.py	2018-03-28 11:19:31.000000000 +0200
@@ -245,13 +245,16 @@ class BaseHeader(str):
         the header name and the ': ' separator.
 
         """
-        # At some point we need to only put fws here if it was in the source.
+        # At some point we need to put fws here iif it was in the source.
         header = parser.Header([
             parser.HeaderLabel([
                 parser.ValueTerminal(self.name, 'header-name'),
                 parser.ValueTerminal(':', 'header-sep')]),
-            parser.CFWSList([parser.WhiteSpaceTerminal(' ', 'fws')]),
-                             self._parse_tree])
+            ])
+        if self._parse_tree:
+            header.append(
+                parser.CFWSList([parser.WhiteSpaceTerminal(' ', 'fws')]))
+        header.append(self._parse_tree)
         return header.fold(policy=policy)
 
 
diff -urpN Python-3.6.3/Lib/email/quoprimime.py Python-3.6.5/Lib/email/quoprimime.py
--- Python-3.6.3/Lib/email/quoprimime.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/email/quoprimime.py	2018-03-28 11:19:31.000000000 +0200
@@ -173,7 +173,7 @@ def body_encode(body, maxlinelen=76, eol
     if not body:
         return body
 
-    # quote speacial characters
+    # quote special characters
     body = body.translate(_QUOPRI_BODY_ENCODE_MAP)
 
     soft_break = '=' + eol
diff -urpN Python-3.6.3/Lib/email/utils.py Python-3.6.5/Lib/email/utils.py
--- Python-3.6.3/Lib/email/utils.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/email/utils.py	2018-03-28 11:19:31.000000000 +0200
@@ -215,6 +215,12 @@ def parsedate_to_datetime(data):
 
 
 def parseaddr(addr):
+    """
+    Parse addr into its constituent realname and email address parts.
+
+    Return a tuple of realname and email address, unless the parse fails, in
+    which case return a 2-tuple of ('', '').
+    """
     addrs = _AddressList(addr).addresslist
     if not addrs:
         return '', ''
diff -urpN Python-3.6.3/Lib/ensurepip/__init__.py Python-3.6.5/Lib/ensurepip/__init__.py
--- Python-3.6.3/Lib/ensurepip/__init__.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ensurepip/__init__.py	2018-03-28 11:19:31.000000000 +0200
@@ -8,9 +8,9 @@ import tempfile
 __all__ = ["version", "bootstrap"]
 
 
-_SETUPTOOLS_VERSION = "28.8.0"
+_SETUPTOOLS_VERSION = "39.0.1"
 
-_PIP_VERSION = "9.0.1"
+_PIP_VERSION = "9.0.3"
 
 _PROJECTS = [
     ("setuptools", _SETUPTOOLS_VERSION),
@@ -25,7 +25,7 @@ def _run_pip(args, additional_paths=None
 
     # Install the bundled software
     import pip
-    pip.main(args)
+    return pip.main(args)
 
 
 def version():
@@ -55,6 +55,21 @@ def bootstrap(*, root=None, upgrade=Fals
 
     Note that calling this function will alter both sys.path and os.environ.
     """
+    # Discard the return value
+    _bootstrap(root=root, upgrade=upgrade, user=user,
+               altinstall=altinstall, default_pip=default_pip,
+               verbosity=verbosity)
+
+
+def _bootstrap(*, root=None, upgrade=False, user=False,
+              altinstall=False, default_pip=False,
+              verbosity=0):
+    """
+    Bootstrap pip into the current Python installation (or the given root
+    directory). Returns pip command status code.
+
+    Note that calling this function will alter both sys.path and os.environ.
+    """
     if altinstall and default_pip:
         raise ValueError("Cannot use altinstall and default_pip together")
 
@@ -99,7 +114,7 @@ def bootstrap(*, root=None, upgrade=Fals
         if verbosity:
             args += ["-" + "v" * verbosity]
 
-        _run_pip(args + [p[0] for p in _PROJECTS], additional_paths)
+        return _run_pip(args + [p[0] for p in _PROJECTS], additional_paths)
 
 def _uninstall_helper(*, verbosity=0):
     """Helper to support a clean default uninstall process on Windows
@@ -126,7 +141,7 @@ def _uninstall_helper(*, verbosity=0):
     if verbosity:
         args += ["-" + "v" * verbosity]
 
-    _run_pip(args + [p[0] for p in reversed(_PROJECTS)])
+    return _run_pip(args + [p[0] for p in reversed(_PROJECTS)])
 
 
 def _main(argv=None):
@@ -180,7 +195,7 @@ def _main(argv=None):
 
     args = parser.parse_args(argv)
 
-    bootstrap(
+    return _bootstrap(
         root=args.root,
         upgrade=args.upgrade,
         user=args.user,
diff -urpN Python-3.6.3/Lib/ensurepip/__main__.py Python-3.6.5/Lib/ensurepip/__main__.py
--- Python-3.6.3/Lib/ensurepip/__main__.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ensurepip/__main__.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,4 +1,5 @@
 import ensurepip
+import sys
 
 if __name__ == "__main__":
-    ensurepip._main()
+    sys.exit(ensurepip._main())
Binary files Python-3.6.3/Lib/ensurepip/_bundled/pip-9.0.1-py2.py3-none-any.whl and Python-3.6.5/Lib/ensurepip/_bundled/pip-9.0.1-py2.py3-none-any.whl differ
Binary files Python-3.6.3/Lib/ensurepip/_bundled/pip-9.0.3-py2.py3-none-any.whl and Python-3.6.5/Lib/ensurepip/_bundled/pip-9.0.3-py2.py3-none-any.whl differ
Binary files Python-3.6.3/Lib/ensurepip/_bundled/setuptools-28.8.0-py2.py3-none-any.whl and Python-3.6.5/Lib/ensurepip/_bundled/setuptools-28.8.0-py2.py3-none-any.whl differ
Binary files Python-3.6.3/Lib/ensurepip/_bundled/setuptools-39.0.1-py2.py3-none-any.whl and Python-3.6.5/Lib/ensurepip/_bundled/setuptools-39.0.1-py2.py3-none-any.whl differ
diff -urpN Python-3.6.3/Lib/ensurepip/_uninstall.py Python-3.6.5/Lib/ensurepip/_uninstall.py
--- Python-3.6.3/Lib/ensurepip/_uninstall.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ensurepip/_uninstall.py	2018-03-28 11:19:31.000000000 +0200
@@ -2,6 +2,7 @@
 
 import argparse
 import ensurepip
+import sys
 
 
 def _main(argv=None):
@@ -23,8 +24,8 @@ def _main(argv=None):
 
     args = parser.parse_args(argv)
 
-    ensurepip._uninstall_helper(verbosity=args.verbosity)
+    return ensurepip._uninstall_helper(verbosity=args.verbosity)
 
 
 if __name__ == "__main__":
-    _main()
+    sys.exit(_main())
diff -urpN Python-3.6.3/Lib/http/client.py Python-3.6.5/Lib/http/client.py
--- Python-3.6.3/Lib/http/client.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/http/client.py	2018-03-28 11:19:31.000000000 +0200
@@ -540,7 +540,7 @@ class HTTPResponse(io.BufferedIOBase):
         chunk_left = self.chunk_left
         if not chunk_left: # Can be 0 or None
             if chunk_left is not None:
-                # We are at the end of chunk. dicard chunk end
+                # We are at the end of chunk, discard chunk end
                 self._safe_read(2)  # toss the CRLF at the end of the chunk
             try:
                 chunk_left = self._read_next_chunk_size()
diff -urpN Python-3.6.3/Lib/idlelib/NEWS.txt Python-3.6.5/Lib/idlelib/NEWS.txt
--- Python-3.6.3/Lib/idlelib/NEWS.txt	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/NEWS.txt	2018-03-28 11:19:31.000000000 +0200
@@ -1,7 +1,98 @@
+What's New in IDLE 3.6.5
+Released on 2017-03-26?
+======================================
+
+
+bpo-32916: Change 'str' to 'code' in idlelib.pyparse and users.
+
+bpo-32905: Remove unused code in pyparse module.
+
+bpo-32874: IDLE - add pyparse tests with 97% coverage.
+
+bpo-32837: IDLE - require encoding argument for textview.view_file.
+Using the system and place-dependent default encoding for open()
+is a bad idea for IDLE's system and location-independent files.
+
+bpo-32826: Add "encoding=utf-8" to open() in IDLE's test_help_about.
+GUI test test_file_buttons() only looks at initial ascii-only lines,
+but failed on systems where open() defaults to 'ascii' because
+readline() internally reads and decodes far enough ahead to encounter
+a non-ascii character in CREDITS.txt.
+
+bpo-32765: Update configdialog General tab create page docstring.
+Add new widgets to the widget list.
+
+
+What's New in IDLE 3.6.4
+Released on 2017-12-19
+========================
+
+bpo-32207: Improve tk event exception tracebacks in IDLE.
+When tk event handling is driven by IDLE's run loop, a confusing
+and distracting queue.EMPTY traceback context is no longer added
+to tk event exception tracebacks.  The traceback is now the same
+as when event handling is driven by user code.  Patch based on
+a suggestion by Serhiy Storchaka.
+
+bpo-32164: Delete unused file idlelib/tabbedpages.py.
+Use of TabbedPageSet in configdialog was replaced by ttk.Notebook.
+
+bpo-32100: Fix old and new bugs in pathbrowser; improve tests.
+Patch mostly by Cheryl Sabella.
+
+bpo-31860: The font sample in the settings dialog is now editable.
+Edits persist while IDLE remains open.
+Patch by Serhiy Storchake and Terry Jan Reedy.
+
+bpo-31858: Restrict shell prompt manipulaton to the shell.
+Editor and output windows only see an empty last prompt line.  This
+simplifies the code and fixes a minor bug when newline is inserted.
+Sys.ps1, if present, is read on Shell start-up, but is not set or changed.
+Patch by Terry Jan Reedy.
+
+bpo-28603: Fix a TypeError that caused a shell restart when printing
+a traceback that includes an exception that is unhashable.
+Patch by Zane Bitter.
+
+bpo-13802: Use non-Latin characters in the Font settings sample.
+Even if one selects a font that defines a limited subset of the unicode
+Basic Multilingual Plane, tcl/tk will use other fonts that define a
+character.  The expanded example give users of non-Latin characters
+a better idea of what they might see in the shell and editors.
+
+To make room for the expanded sample, frames on the Font tab are
+re-arranged.  The Font/Tabs help explains a bit about the additions.
+Patch by Terry Jan Reedy
+
+
 What's New in IDLE 3.6.3
-Released on 2017-09-25?
+Released on 2017-10-03
 ========================
 
+bpo-31460: Simplify the API of IDLE's Module Browser.
+Passing a widget instead of an flist with a root widget opens the
+option of creating a browser frame that is only part of a window.
+Passing a full file name instead of pieces assumed to come from a
+.py file opens the possibility of browsing python files that do not
+end in .py.
+
+bpo-31649: Make _htest and _utest parameters keyword-only.
+These are used to adjust code for human and unit tests.
+
+bpo-31459: Rename module browser from Class Browser to Module Browser.
+The original module-level class and method browser became a module
+browser, with the addition of module-level functions, years ago.
+Nested classes and functions were added yesterday.  For back-
+compatibility, the virtual event <<open-class-browser>>, which
+appears on the Keys tab of the Settings dialog, is not changed.
+Patch by Cheryl Sabella.
+
+bpo-1612262: Module browser now shows nested classes and functions.
+Original patches for code and tests by Guilherme Polo and
+Cheryl Sabella, respectively.  Revisions by Terry Jan Reedy.
+
+bpo-31500: Tk's default fonts now are scaled on HiDPI displays.
+This affects all dialogs.  Patch by Serhiy Storchaka.
 
 bpo-31493: Fix code context update and font update timers.
 Canceling timers prevents a warning message when test_idle completes.
@@ -22,7 +113,7 @@ bpo-31421: Document how IDLE runs tkinte
 IDLE calls tcl/tk update in the background in order to make live
 interaction and experimentatin with tkinter applications much easier.
 
-bpo-bpo-31414: Fix tk entry box tests by deleting first.
+bpo-31414: Fix tk entry box tests by deleting first.
 Adding to an int entry is not the same as deleting and inserting
 because int('') will fail.  Patch by Terry Jan Reedy.
 
@@ -42,7 +133,7 @@ extension.cfg.  All take effect as soon
 '<<zoom-height>>'.  Any (global) customizations made before 3.6.3 will
 not affect their keyset-specific customization after 3.6.3. and vice
 versa.
-  Inital patch by Charles Wohlganger, revised by Terry Jan Reedy.
+  Initial patch by Charles Wohlganger, revised by Terry Jan Reedy.
 
 bpo-31051:  Rearrange condigdialog General tab.
 Sort non-Help options into Window (Shell+Editor) and Editor (only).
@@ -206,7 +297,7 @@ bpo-24813: Add icon to help_about and ma
 
 
 What's New in IDLE 3.6.2
-Released on 2017-07-11
+Released on 2017-07-17
 ========================
 
 bpo-15786: Fix several problems with IDLE's autocompletion box.
@@ -242,9 +333,9 @@ Issue #28572: Add 10% to coverage of IDL
 Update and augment description of the configuration system.
 
 
-What's New in IDLE 3.6.0
+What's New in IDLE 3.6.0 (since 3.5.0)
 Released on 2016-12-23
-========================
+======================================
 
 - Issue #15308: Add 'interrupt execution' (^C) to Shell menu.
   Patch by Roger Serwy, updated by Bayard Randel.
diff -urpN Python-3.6.3/Lib/idlelib/_pyclbr.py Python-3.6.5/Lib/idlelib/_pyclbr.py
--- Python-3.6.3/Lib/idlelib/_pyclbr.py	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/Lib/idlelib/_pyclbr.py	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,402 @@
+# A private copy of 3.7.0a1 pyclbr for use by idlelib.browser
+"""Parse a Python module and describe its classes and functions.
+
+Parse enough of a Python file to recognize imports and class and
+function definitions, and to find out the superclasses of a class.
+
+The interface consists of a single function:
+    readmodule_ex(module, path=None)
+where module is the name of a Python module, and path is an optional
+list of directories where the module is to be searched.  If present,
+path is prepended to the system search path sys.path.  The return value
+is a dictionary.  The keys of the dictionary are the names of the
+classes and functions defined in the module (including classes that are
+defined via the from XXX import YYY construct).  The values are
+instances of classes Class and Function.  One special key/value pair is
+present for packages: the key '__path__' has a list as its value which
+contains the package search path.
+
+Classes and Functions have a common superclass: _Object.  Every instance
+has the following attributes:
+    module  -- name of the module;
+    name    -- name of the object;
+    file    -- file in which the object is defined;
+    lineno  -- line in the file where the object's definition starts;
+    parent  -- parent of this object, if any;
+    children -- nested objects contained in this object.
+The 'children' attribute is a dictionary mapping names to objects.
+
+Instances of Function describe functions with the attributes from _Object.
+
+Instances of Class describe classes with the attributes from _Object,
+plus the following:
+    super   -- list of super classes (Class instances if possible);
+    methods -- mapping of method names to beginning line numbers.
+If the name of a super class is not recognized, the corresponding
+entry in the list of super classes is not a class instance but a
+string giving the name of the super class.  Since import statements
+are recognized and imported modules are scanned as well, this
+shouldn't happen often.
+"""
+
+import io
+import sys
+import importlib.util
+import tokenize
+from token import NAME, DEDENT, OP
+
+__all__ = ["readmodule", "readmodule_ex", "Class", "Function"]
+
+_modules = {}  # Initialize cache of modules we've seen.
+
+
+class _Object:
+    "Informaton about Python class or function."
+    def __init__(self, module, name, file, lineno, parent):
+        self.module = module
+        self.name = name
+        self.file = file
+        self.lineno = lineno
+        self.parent = parent
+        self.children = {}
+
+    def _addchild(self, name, obj):
+        self.children[name] = obj
+
+
+class Function(_Object):
+    "Information about a Python function, including methods."
+    def __init__(self, module, name, file, lineno, parent=None):
+        _Object.__init__(self, module, name, file, lineno, parent)
+
+
+class Class(_Object):
+    "Information about a Python class."
+    def __init__(self, module, name, super, file, lineno, parent=None):
+        _Object.__init__(self, module, name, file, lineno, parent)
+        self.super = [] if super is None else super
+        self.methods = {}
+
+    def _addmethod(self, name, lineno):
+        self.methods[name] = lineno
+
+
+def _nest_function(ob, func_name, lineno):
+    "Return a Function after nesting within ob."
+    newfunc = Function(ob.module, func_name, ob.file, lineno, ob)
+    ob._addchild(func_name, newfunc)
+    if isinstance(ob, Class):
+        ob._addmethod(func_name, lineno)
+    return newfunc
+
+def _nest_class(ob, class_name, lineno, super=None):
+    "Return a Class after nesting within ob."
+    newclass = Class(ob.module, class_name, super, ob.file, lineno, ob)
+    ob._addchild(class_name, newclass)
+    return newclass
+
+def readmodule(module, path=None):
+    """Return Class objects for the top-level classes in module.
+
+    This is the original interface, before Functions were added.
+    """
+
+    res = {}
+    for key, value in _readmodule(module, path or []).items():
+        if isinstance(value, Class):
+            res[key] = value
+    return res
+
+def readmodule_ex(module, path=None):
+    """Return a dictionary with all functions and classes in module.
+
+    Search for module in PATH + sys.path.
+    If possible, include imported superclasses.
+    Do this by reading source, without importing (and executing) it.
+    """
+    return _readmodule(module, path or [])
+
+def _readmodule(module, path, inpackage=None):
+    """Do the hard work for readmodule[_ex].
+
+    If inpackage is given, it must be the dotted name of the package in
+    which we are searching for a submodule, and then PATH must be the
+    package search path; otherwise, we are searching for a top-level
+    module, and path is combined with sys.path.
+    """
+    # Compute the full module name (prepending inpackage if set).
+    if inpackage is not None:
+        fullmodule = "%s.%s" % (inpackage, module)
+    else:
+        fullmodule = module
+
+    # Check in the cache.
+    if fullmodule in _modules:
+        return _modules[fullmodule]
+
+    # Initialize the dict for this module's contents.
+    tree = {}
+
+    # Check if it is a built-in module; we don't do much for these.
+    if module in sys.builtin_module_names and inpackage is None:
+        _modules[module] = tree
+        return tree
+
+    # Check for a dotted module name.
+    i = module.rfind('.')
+    if i >= 0:
+        package = module[:i]
+        submodule = module[i+1:]
+        parent = _readmodule(package, path, inpackage)
+        if inpackage is not None:
+            package = "%s.%s" % (inpackage, package)
+        if not '__path__' in parent:
+            raise ImportError('No package named {}'.format(package))
+        return _readmodule(submodule, parent['__path__'], package)
+
+    # Search the path for the module.
+    f = None
+    if inpackage is not None:
+        search_path = path
+    else:
+        search_path = path + sys.path
+    spec = importlib.util._find_spec_from_path(fullmodule, search_path)
+    _modules[fullmodule] = tree
+    # Is module a package?
+    if spec.submodule_search_locations is not None:
+        tree['__path__'] = spec.submodule_search_locations
+    try:
+        source = spec.loader.get_source(fullmodule)
+        if source is None:
+            return tree
+    except (AttributeError, ImportError):
+        # If module is not Python source, we cannot do anything.
+        return tree
+
+    fname = spec.loader.get_filename(fullmodule)
+    return _create_tree(fullmodule, path, fname, source, tree, inpackage)
+
+
+def _create_tree(fullmodule, path, fname, source, tree, inpackage):
+    """Return the tree for a particular module.
+
+    fullmodule (full module name), inpackage+module, becomes o.module.
+    path is passed to recursive calls of _readmodule.
+    fname becomes o.file.
+    source is tokenized.  Imports cause recursive calls to _readmodule.
+    tree is {} or {'__path__': <submodule search locations>}.
+    inpackage, None or string, is passed to recursive calls of _readmodule.
+
+    The effect of recursive calls is mutation of global _modules.
+    """
+    f = io.StringIO(source)
+
+    stack = [] # Initialize stack of (class, indent) pairs.
+
+    g = tokenize.generate_tokens(f.readline)
+    try:
+        for tokentype, token, start, _end, _line in g:
+            if tokentype == DEDENT:
+                lineno, thisindent = start
+                # Close previous nested classes and defs.
+                while stack and stack[-1][1] >= thisindent:
+                    del stack[-1]
+            elif token == 'def':
+                lineno, thisindent = start
+                # Close previous nested classes and defs.
+                while stack and stack[-1][1] >= thisindent:
+                    del stack[-1]
+                tokentype, func_name, start = next(g)[0:3]
+                if tokentype != NAME:
+                    continue  # Skip def with syntax error.
+                cur_func = None
+                if stack:
+                    cur_obj = stack[-1][0]
+                    cur_func = _nest_function(cur_obj, func_name, lineno)
+                else:
+                    # It is just a function.
+                    cur_func = Function(fullmodule, func_name, fname, lineno)
+                    tree[func_name] = cur_func
+                stack.append((cur_func, thisindent))
+            elif token == 'class':
+                lineno, thisindent = start
+                # Close previous nested classes and defs.
+                while stack and stack[-1][1] >= thisindent:
+                    del stack[-1]
+                tokentype, class_name, start = next(g)[0:3]
+                if tokentype != NAME:
+                    continue # Skip class with syntax error.
+                # Parse what follows the class name.
+                tokentype, token, start = next(g)[0:3]
+                inherit = None
+                if token == '(':
+                    names = [] # Initialize list of superclasses.
+                    level = 1
+                    super = [] # Tokens making up current superclass.
+                    while True:
+                        tokentype, token, start = next(g)[0:3]
+                        if token in (')', ',') and level == 1:
+                            n = "".join(super)
+                            if n in tree:
+                                # We know this super class.
+                                n = tree[n]
+                            else:
+                                c = n.split('.')
+                                if len(c) > 1:
+                                    # Super class form is module.class:
+                                    # look in module for class.
+                                    m = c[-2]
+                                    c = c[-1]
+                                    if m in _modules:
+                                        d = _modules[m]
+                                        if c in d:
+                                            n = d[c]
+                            names.append(n)
+                            super = []
+                        if token == '(':
+                            level += 1
+                        elif token == ')':
+                            level -= 1
+                            if level == 0:
+                                break
+                        elif token == ',' and level == 1:
+                            pass
+                        # Only use NAME and OP (== dot) tokens for type name.
+                        elif tokentype in (NAME, OP) and level == 1:
+                            super.append(token)
+                        # Expressions in the base list are not supported.
+                    inherit = names
+                if stack:
+                    cur_obj = stack[-1][0]
+                    cur_class = _nest_class(
+                            cur_obj, class_name, lineno, inherit)
+                else:
+                    cur_class = Class(fullmodule, class_name, inherit,
+                                      fname, lineno)
+                    tree[class_name] = cur_class
+                stack.append((cur_class, thisindent))
+            elif token == 'import' and start[1] == 0:
+                modules = _getnamelist(g)
+                for mod, _mod2 in modules:
+                    try:
+                        # Recursively read the imported module.
+                        if inpackage is None:
+                            _readmodule(mod, path)
+                        else:
+                            try:
+                                _readmodule(mod, path, inpackage)
+                            except ImportError:
+                                _readmodule(mod, [])
+                    except:
+                        # If we can't find or parse the imported module,
+                        # too bad -- don't die here.
+                        pass
+            elif token == 'from' and start[1] == 0:
+                mod, token = _getname(g)
+                if not mod or token != "import":
+                    continue
+                names = _getnamelist(g)
+                try:
+                    # Recursively read the imported module.
+                    d = _readmodule(mod, path, inpackage)
+                except:
+                    # If we can't find or parse the imported module,
+                    # too bad -- don't die here.
+                    continue
+                # Add any classes that were defined in the imported module
+                # to our name space if they were mentioned in the list.
+                for n, n2 in names:
+                    if n in d:
+                        tree[n2 or n] = d[n]
+                    elif n == '*':
+                        # Don't add names that start with _.
+                        for n in d:
+                            if n[0] != '_':
+                                tree[n] = d[n]
+    except StopIteration:
+        pass
+
+    f.close()
+    return tree
+
+
+def _getnamelist(g):
+    """Return list of (dotted-name, as-name or None) tuples for token source g.
+
+    An as-name is the name that follows 'as' in an as clause.
+    """
+    names = []
+    while True:
+        name, token = _getname(g)
+        if not name:
+            break
+        if token == 'as':
+            name2, token = _getname(g)
+        else:
+            name2 = None
+        names.append((name, name2))
+        while token != "," and "\n" not in token:
+            token = next(g)[1]
+        if token != ",":
+            break
+    return names
+
+
+def _getname(g):
+    "Return (dotted-name or None, next-token) tuple for token source g."
+    parts = []
+    tokentype, token = next(g)[0:2]
+    if tokentype != NAME and token != '*':
+        return (None, token)
+    parts.append(token)
+    while True:
+        tokentype, token = next(g)[0:2]
+        if token != '.':
+            break
+        tokentype, token = next(g)[0:2]
+        if tokentype != NAME:
+            break
+        parts.append(token)
+    return (".".join(parts), token)
+
+
+def _main():
+    "Print module output (default this file) for quick visual check."
+    import os
+    try:
+        mod = sys.argv[1]
+    except:
+        mod = __file__
+    if os.path.exists(mod):
+        path = [os.path.dirname(mod)]
+        mod = os.path.basename(mod)
+        if mod.lower().endswith(".py"):
+            mod = mod[:-3]
+    else:
+        path = []
+    tree = readmodule_ex(mod, path)
+    lineno_key = lambda a: getattr(a, 'lineno', 0)
+    objs = sorted(tree.values(), key=lineno_key, reverse=True)
+    indent_level = 2
+    while objs:
+        obj = objs.pop()
+        if isinstance(obj, list):
+            # Value is a __path__ key.
+            continue
+        if not hasattr(obj, 'indent'):
+            obj.indent = 0
+
+        if isinstance(obj, _Object):
+            new_objs = sorted(obj.children.values(),
+                              key=lineno_key, reverse=True)
+            for ob in new_objs:
+                ob.indent = obj.indent + indent_level
+            objs.extend(new_objs)
+        if isinstance(obj, Class):
+            print("{}class {} {} {}"
+                  .format(' ' * obj.indent, obj.name, obj.super, obj.lineno))
+        elif isinstance(obj, Function):
+            print("{}def {} {}".format(' ' * obj.indent, obj.name, obj.lineno))
+
+if __name__ == "__main__":
+    _main()
diff -urpN Python-3.6.3/Lib/idlelib/autocomplete_w.py Python-3.6.5/Lib/idlelib/autocomplete_w.py
--- Python-3.6.3/Lib/idlelib/autocomplete_w.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/autocomplete_w.py	2018-03-28 11:19:31.000000000 +0200
@@ -246,7 +246,7 @@ class AutoCompleteWindow:
         acw.wm_geometry("+%d+%d" % (new_x, new_y))
 
         if platform.system().startswith('Windows'):
-            # See issue 15786. When on windows platform, Tk will misbehaive
+            # See issue 15786. When on windows platform, Tk will misbehave
             # to call winconfig_event multiple times, we need to prevent this,
             # otherwise mouse button double click will not be able to used.
             acw.unbind(WINCONFIG_SEQUENCE, self.winconfigid)
diff -urpN Python-3.6.3/Lib/idlelib/browser.py Python-3.6.5/Lib/idlelib/browser.py
--- Python-3.6.3/Lib/idlelib/browser.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/browser.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,17 +1,16 @@
-"""Class browser.
+"""Module browser.
 
 XXX TO DO:
 
 - reparse when source changed (maybe just a button would be OK?)
     (or recheck on window popup)
 - add popup menu with more options (e.g. doc strings, base classes, imports)
-- show function argument list? (have to do pattern matching on source)
-- should the classes and methods lists also be in the module's menu bar?
 - add base classes to class browser tree
+- finish removing limitation to x.py files (ModuleBrowserTreeItem)
 """
 
 import os
-import pyclbr
+from idlelib import _pyclbr as pyclbr
 import sys
 
 from idlelib.config import idleConf
@@ -19,23 +18,57 @@ from idlelib import pyshell
 from idlelib.tree import TreeNode, TreeItem, ScrolledCanvas
 from idlelib.windows import ListedToplevel
 
+
 file_open = None  # Method...Item and Class...Item use this.
 # Normally pyshell.flist.open, but there is no pyshell.flist for htest.
 
-class ClassBrowser:
+
+def transform_children(child_dict, modname=None):
+    """Transform a child dictionary to an ordered sequence of objects.
+
+    The dictionary maps names to pyclbr information objects.
+    Filter out imported objects.
+    Augment class names with bases.
+    Sort objects by line number.
+
+    The current tree only calls this once per child_dic as it saves
+    TreeItems once created.  A future tree and tests might violate this,
+    so a check prevents multiple in-place augmentations.
+    """
+    obs = []  # Use list since values should already be sorted.
+    for key, obj in child_dict.items():
+        if modname is None or obj.module == modname:
+            if hasattr(obj, 'super') and obj.super and obj.name == key:
+                # If obj.name != key, it has already been suffixed.
+                supers = []
+                for sup in obj.super:
+                    if type(sup) is type(''):
+                        sname = sup
+                    else:
+                        sname = sup.name
+                        if sup.module != obj.module:
+                            sname = f'{sup.module}.{sname}'
+                    supers.append(sname)
+                obj.name += '({})'.format(', '.join(supers))
+            obs.append(obj)
+    return sorted(obs, key=lambda o: o.lineno)
+
+
+class ModuleBrowser:
     """Browse module classes and functions in IDLE.
     """
+    # This class is also the base class for pathbrowser.PathBrowser.
+    # Init and close are inherited, other methods are overridden.
+    # PathBrowser.__init__ does not call __init__ below.
 
-    def __init__(self, flist, name, path, _htest=False):
-        # XXX This API should change, if the file doesn't end in ".py"
-        # XXX the code here is bogus!
+    def __init__(self, master, path, *, _htest=False, _utest=False):
         """Create a window for browsing a module's structure.
 
         Args:
-            flist: filelist.FileList instance used as the root for the window.
-            name: Python module to parse.
-            path: Module search path.
-            _htest - bool, change box when location running htest.
+            master: parent for widgets.
+            path: full path of file to browse.
+            _htest - bool; change box location when running htest.
+            -utest - bool; suppress contents when running unittest.
 
         Global variables:
             file_open: Function used for opening a file.
@@ -46,56 +79,63 @@ class ClassBrowser:
                 creating ModuleBrowserTreeItem as the rootnode for
                 the tree and subsequently in the children.
         """
-        global file_open
-        if not _htest:
-            file_open = pyshell.flist.open
-        self.name = name
-        self.file = os.path.join(path[0], self.name + ".py")
+        self.master = master
+        self.path = path
         self._htest = _htest
-        self.init(flist)
+        self._utest = _utest
+        self.init()
 
     def close(self, event=None):
         "Dismiss the window and the tree nodes."
         self.top.destroy()
         self.node.destroy()
 
-    def init(self, flist):
+    def init(self):
         "Create browser tkinter widgets, including the tree."
-        self.flist = flist
-        # reset pyclbr
+        global file_open
+        root = self.master
+        flist = (pyshell.flist if not (self._htest or self._utest)
+                 else pyshell.PyShellFileList(root))
+        file_open = flist.open
         pyclbr._modules.clear()
+
         # create top
-        self.top = top = ListedToplevel(flist.root)
+        self.top = top = ListedToplevel(root)
         top.protocol("WM_DELETE_WINDOW", self.close)
         top.bind("<Escape>", self.close)
         if self._htest: # place dialog below parent if running htest
             top.geometry("+%d+%d" %
-                (flist.root.winfo_rootx(), flist.root.winfo_rooty() + 200))
+                (root.winfo_rootx(), root.winfo_rooty() + 200))
         self.settitle()
         top.focus_set()
+
         # create scrolled canvas
         theme = idleConf.CurrentTheme()
         background = idleConf.GetHighlight(theme, 'normal')['background']
-        sc = ScrolledCanvas(top, bg=background, highlightthickness=0, takefocus=1)
+        sc = ScrolledCanvas(top, bg=background, highlightthickness=0,
+                            takefocus=1)
         sc.frame.pack(expand=1, fill="both")
         item = self.rootnode()
         self.node = node = TreeNode(sc.canvas, None, item)
-        node.update()
-        node.expand()
+        if not self._utest:
+            node.update()
+            node.expand()
 
     def settitle(self):
         "Set the window title."
-        self.top.wm_title("Class Browser - " + self.name)
-        self.top.wm_iconname("Class Browser")
+        self.top.wm_title("Module Browser - " + os.path.basename(self.path))
+        self.top.wm_iconname("Module Browser")
 
     def rootnode(self):
         "Return a ModuleBrowserTreeItem as the root of the tree."
-        return ModuleBrowserTreeItem(self.file)
+        return ModuleBrowserTreeItem(self.path)
+
 
 class ModuleBrowserTreeItem(TreeItem):
     """Browser tree for Python module.
 
     Uses TreeItem as the basis for the structure of the tree.
+    Used by both browsers.
     """
 
     def __init__(self, file):
@@ -115,16 +155,8 @@ class ModuleBrowserTreeItem(TreeItem):
         return "python"
 
     def GetSubList(self):
-        """Return the list of ClassBrowserTreeItem items.
-
-        Each item returned from listclasses is the first level of
-        classes/functions within the module.
-        """
-        sublist = []
-        for name in self.listclasses():
-            item = ClassBrowserTreeItem(name, self.classes, self.file)
-            sublist.append(item)
-        return sublist
+        "Return ChildBrowserTreeItems for children."
+        return [ChildBrowserTreeItem(obj) for obj in self.listchildren()]
 
     def OnDoubleClick(self):
         "Open a module in an editor window when double clicked."
@@ -132,89 +164,44 @@ class ModuleBrowserTreeItem(TreeItem):
             return
         if not os.path.exists(self.file):
             return
-        pyshell.flist.open(self.file)
+        file_open(self.file)
 
     def IsExpandable(self):
         "Return True if Python (.py) file."
         return os.path.normcase(self.file[-3:]) == ".py"
 
-    def listclasses(self):
-        """Return list of classes and functions in the module.
-
-        The dictionary output from pyclbr is re-written as a
-        list of tuples in the form (lineno, name) and
-        then sorted so that the classes and functions are
-        processed in line number order.  The returned list only
-        contains the name and not the line number.  An instance
-        variable self.classes contains the pyclbr dictionary values,
-        which are instances of Class and Function.
-        """
-        dir, file = os.path.split(self.file)
-        name, ext = os.path.splitext(file)
+    def listchildren(self):
+        "Return sequenced classes and functions in the module."
+        dir, base = os.path.split(self.file)
+        name, ext = os.path.splitext(base)
         if os.path.normcase(ext) != ".py":
             return []
         try:
-            dict = pyclbr.readmodule_ex(name, [dir] + sys.path)
+            tree = pyclbr.readmodule_ex(name, [dir] + sys.path)
         except ImportError:
             return []
-        items = []
-        self.classes = {}
-        for key, cl in dict.items():
-            if cl.module == name:
-                s = key
-                if hasattr(cl, 'super') and cl.super:
-                    supers = []
-                    for sup in cl.super:
-                        if type(sup) is type(''):
-                            sname = sup
-                        else:
-                            sname = sup.name
-                            if sup.module != cl.module:
-                                sname = "%s.%s" % (sup.module, sname)
-                        supers.append(sname)
-                    s = s + "(%s)" % ", ".join(supers)
-                items.append((cl.lineno, s))
-                self.classes[s] = cl
-        items.sort()
-        list = []
-        for item, s in items:
-            list.append(s)
-        return list
+        return transform_children(tree, name)
+
 
-class ClassBrowserTreeItem(TreeItem):
-    """Browser tree for classes within a module.
+class ChildBrowserTreeItem(TreeItem):
+    """Browser tree for child nodes within the module.
 
     Uses TreeItem as the basis for the structure of the tree.
     """
 
-    def __init__(self, name, classes, file):
-        """Create a TreeItem for the class/function.
-
-        Args:
-            name: Name of the class/function.
-            classes: Dictonary of Class/Function instances from pyclbr.
-            file: Full path and module name.
-
-        Instance variables:
-            self.cl: Class/Function instance for the class/function name.
-            self.isfunction: True if self.cl is a Function.
-        """
-        self.name = name
-        # XXX - Does classes need to be an instance variable?
-        self.classes = classes
-        self.file = file
-        try:
-            self.cl = self.classes[self.name]
-        except (IndexError, KeyError):
-            self.cl = None
-        self.isfunction = isinstance(self.cl, pyclbr.Function)
+    def __init__(self, obj):
+        "Create a TreeItem for a pyclbr class/function object."
+        self.obj = obj
+        self.name = obj.name
+        self.isfunction = isinstance(obj, pyclbr.Function)
 
     def GetText(self):
         "Return the name of the function/class to display."
+        name = self.name
         if self.isfunction:
-            return "def " + self.name + "(...)"
+            return "def " + name + "(...)"
         else:
-            return "class " + self.name
+            return "class " + name
 
     def GetIconName(self):
         "Return the name of the icon to display."
@@ -224,102 +211,38 @@ class ClassBrowserTreeItem(TreeItem):
             return "folder"
 
     def IsExpandable(self):
-        "Return True if this class has methods."
-        if self.cl:
-            try:
-                return not not self.cl.methods
-            except AttributeError:
-                return False
-        return None
+        "Return True if self.obj has nested objects."
+        return self.obj.children != {}
 
     def GetSubList(self):
-        """Return Class methods as a list of MethodBrowserTreeItem items.
-
-        Each item is a method within the class.
-        """
-        if not self.cl:
-            return []
-        sublist = []
-        for name in self.listmethods():
-            item = MethodBrowserTreeItem(name, self.cl, self.file)
-            sublist.append(item)
-        return sublist
+        "Return ChildBrowserTreeItems for children."
+        return [ChildBrowserTreeItem(obj)
+                for obj in transform_children(self.obj.children)]
 
     def OnDoubleClick(self):
-        "Open module with file_open and position to lineno, if it exists."
-        if not os.path.exists(self.file):
-            return
-        edit = file_open(self.file)
-        if hasattr(self.cl, 'lineno'):
-            lineno = self.cl.lineno
-            edit.gotoline(lineno)
-
-    def listmethods(self):
-        "Return list of methods within a class sorted by lineno."
-        if not self.cl:
-            return []
-        items = []
-        for name, lineno in self.cl.methods.items():
-            items.append((lineno, name))
-        items.sort()
-        list = []
-        for item, name in items:
-            list.append(name)
-        return list
-
-class MethodBrowserTreeItem(TreeItem):
-    """Browser tree for methods within a class.
-
-    Uses TreeItem as the basis for the structure of the tree.
-    """
-
-    def __init__(self, name, cl, file):
-        """Create a TreeItem for the methods.
-
-        Args:
-            name: Name of the class/function.
-            cl: pyclbr.Class instance for name.
-            file: Full path and module name.
-        """
-        self.name = name
-        self.cl = cl
-        self.file = file
-
-    def GetText(self):
-        "Return the method name to display."
-        return "def " + self.name + "(...)"
-
-    def GetIconName(self):
-        "Return the name of the icon to display."
-        return "python"
-
-    def IsExpandable(self):
-        "Return False as there are no tree items after methods."
-        return False
+        "Open module with file_open and position to lineno."
+        try:
+            edit = file_open(self.obj.file)
+            edit.gotoline(self.obj.lineno)
+        except (OSError, AttributeError):
+            pass
 
-    def OnDoubleClick(self):
-        "Open module with file_open and position at the method start."
-        if not os.path.exists(self.file):
-            return
-        edit = file_open(self.file)
-        edit.gotoline(self.cl.methods[self.name])
 
-def _class_browser(parent): # htest #
-    try:
+def _module_browser(parent): # htest #
+    if len(sys.argv) > 1:  # If pass file on command line.
+        file = sys.argv[1]
+    else:
         file = __file__
-    except NameError:
-        file = sys.argv[0]
-        if sys.argv[1:]:
-            file = sys.argv[1]
-        else:
-            file = sys.argv[0]
-    dir, file = os.path.split(file)
-    name = os.path.splitext(file)[0]
-    flist = pyshell.PyShellFileList(parent)
-    global file_open
-    file_open = flist.open
-    ClassBrowser(flist, name, [dir], _htest=True)
+        # Add nested objects for htest.
+        class Nested_in_func(TreeNode):
+            def nested_in_class(): pass
+        def closure():
+            class Nested_in_closure: pass
+    ModuleBrowser(parent, file, _htest=True)
 
 if __name__ == "__main__":
+    if len(sys.argv) == 1:  # If pass file on command line, unittest fails.
+        from unittest import main
+        main('idlelib.idle_test.test_browser', verbosity=2, exit=False)
     from idlelib.idle_test.htest import run
-    run(_class_browser)
+    run(_module_browser)
diff -urpN Python-3.6.3/Lib/idlelib/config_key.py Python-3.6.5/Lib/idlelib/config_key.py
--- Python-3.6.3/Lib/idlelib/config_key.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/config_key.py	2018-03-28 11:19:31.000000000 +0200
@@ -14,7 +14,7 @@ class GetKeysDialog(Toplevel):
     keyerror_title = 'Key Sequence Error'
 
     def __init__(self, parent, title, action, currentKeySequences,
-                 _htest=False, _utest=False):
+                 *, _htest=False, _utest=False):
         """
         action - string, the name of the virtual event these keys will be
                  mapped to
diff -urpN Python-3.6.3/Lib/idlelib/configdialog.py Python-3.6.5/Lib/idlelib/configdialog.py
--- Python-3.6.3/Lib/idlelib/configdialog.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/configdialog.py	2018-03-28 11:19:31.000000000 +0200
@@ -11,7 +11,7 @@ Refer to comments in EditorWindow autoin
 """
 from tkinter import (Toplevel, Listbox, Text, Scale, Canvas,
                      StringVar, BooleanVar, IntVar, TRUE, FALSE,
-                     TOP, BOTTOM, RIGHT, LEFT, SOLID, GROOVE, NORMAL, DISABLED,
+                     TOP, BOTTOM, RIGHT, LEFT, SOLID, GROOVE,
                      NONE, BOTH, X, Y, W, E, EW, NS, NSEW, NW,
                      HORIZONTAL, VERTICAL, ANCHOR, ACTIVE, END)
 from tkinter.ttk import (Button, Checkbutton, Entry, Frame, Label, LabelFrame,
@@ -25,7 +25,6 @@ from idlelib.config_key import GetKeysDi
 from idlelib.dynoption import DynOptionMenu
 from idlelib import macosx
 from idlelib.query import SectionName, HelpSource
-from idlelib.tabbedpages import TabbedPageSet
 from idlelib.textview import view_text
 from idlelib.autocomplete import AutoComplete
 from idlelib.codecontext import CodeContext
@@ -41,7 +40,7 @@ class ConfigDialog(Toplevel):
     """Config dialog for IDLE.
     """
 
-    def __init__(self, parent, title='', _htest=False, _utest=False):
+    def __init__(self, parent, title='', *, _htest=False, _utest=False):
         """Show the tabbed dialog for user configuration.
 
         Args:
@@ -105,7 +104,7 @@ class ConfigDialog(Toplevel):
             load_configs: Load pages except for extensions.
             activate_config_changes: Tell editors to reload.
         """
-        self.note = note = Notebook(self, width=450, height=450)
+        self.note = note = Notebook(self)
         self.highpage = HighPage(note)
         self.fontpage = FontPage(note, self.highpage)
         self.keyspage = KeysPage(note)
@@ -189,6 +188,11 @@ class ConfigDialog(Toplevel):
         """
         self.destroy()
 
+    def destroy(self):
+        global font_sample_text
+        font_sample_text = self.fontpage.font_sample.get('1.0', 'end')
+        super().destroy()
+
     def help(self):
         """Create textview for config dialog help.
 
@@ -429,6 +433,35 @@ class ConfigDialog(Toplevel):
 #     def other_methods():
 #         # Define tab-specific behavior.
 
+font_sample_text = (
+    '<ASCII/Latin1>\n'
+    'AaBbCcDdEeFfGgHhIiJj\n1234567890#:+=(){}[]\n'
+    '\u00a2\u00a3\u00a5\u00a7\u00a9\u00ab\u00ae\u00b6\u00bd\u011e'
+    '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c7\u00d0\u00d8\u00df\n'
+    '\n<IPA,Greek,Cyrillic>\n'
+    '\u0250\u0255\u0258\u025e\u025f\u0264\u026b\u026e\u0270\u0277'
+    '\u027b\u0281\u0283\u0286\u028e\u029e\u02a2\u02ab\u02ad\u02af\n'
+    '\u0391\u03b1\u0392\u03b2\u0393\u03b3\u0394\u03b4\u0395\u03b5'
+    '\u0396\u03b6\u0397\u03b7\u0398\u03b8\u0399\u03b9\u039a\u03ba\n'
+    '\u0411\u0431\u0414\u0434\u0416\u0436\u041f\u043f\u0424\u0444'
+    '\u0427\u0447\u042a\u044a\u042d\u044d\u0460\u0464\u046c\u04dc\n'
+    '\n<Hebrew, Arabic>\n'
+    '\u05d0\u05d1\u05d2\u05d3\u05d4\u05d5\u05d6\u05d7\u05d8\u05d9'
+    '\u05da\u05db\u05dc\u05dd\u05de\u05df\u05e0\u05e1\u05e2\u05e3\n'
+    '\u0627\u0628\u062c\u062f\u0647\u0648\u0632\u062d\u0637\u064a'
+    '\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\n'
+    '\n<Devanagari, Tamil>\n'
+    '\u0966\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f'
+    '\u0905\u0906\u0907\u0908\u0909\u090a\u090f\u0910\u0913\u0914\n'
+    '\u0be6\u0be7\u0be8\u0be9\u0bea\u0beb\u0bec\u0bed\u0bee\u0bef'
+    '\u0b85\u0b87\u0b89\u0b8e\n'
+    '\n<East Asian>\n'
+    '\u3007\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\n'
+    '\u6c49\u5b57\u6f22\u5b57\u4eba\u6728\u706b\u571f\u91d1\u6c34\n'
+    '\uac00\ub0d0\ub354\ub824\ubaa8\ubd64\uc218\uc720\uc988\uce58\n'
+    '\u3042\u3044\u3046\u3048\u304a\u30a2\u30a4\u30a6\u30a8\u30aa\n'
+    )
+
 
 class FontPage(Frame):
 
@@ -462,7 +495,7 @@ class FontPage(Frame):
         Changing any of the font vars invokes var_changed_font, which
         adds all 3 font options to changes and calls set_samples.
         Set_samples applies a new font constructed from the font vars to
-        font_sample and to highlight_sample on the hightlight page.
+        font_sample and to highlight_sample on the highlight page.
 
         Tabs: Enable users to change spaces entered for indent tabs.
         Changing indent_scale value with the mouse sets Var space_num,
@@ -479,8 +512,8 @@ class FontPage(Frame):
                     font_size_title: Label
                     (*)sizelist: DynOptionMenu - font_size
                     (*)bold_toggle: Checkbutton - font_bold
-                frame_font_sample: Frame
-                    (*)font_sample: Label
+            frame_sample: LabelFrame
+                (*)font_sample: Label
             frame_indent: LabelFrame
                     indent_title: Label
                     (*)indent_scale: Scale - space_num
@@ -490,10 +523,12 @@ class FontPage(Frame):
         self.font_bold = tracers.add(BooleanVar(self), self.var_changed_font)
         self.space_num = tracers.add(IntVar(self), ('main', 'Indent', 'num-spaces'))
 
-        # Create widgets:
-        # body and body section frames.
+        # Define frames and widgets.
         frame_font = LabelFrame(
-                self, borderwidth=2, relief=GROOVE, text=' Base Editor Font ')
+                self, borderwidth=2, relief=GROOVE, text=' Shell/Editor Font ')
+        frame_sample = LabelFrame(
+                self, borderwidth=2, relief=GROOVE,
+                text=' Font Sample (Editable) ')
         frame_indent = LabelFrame(
                 self, borderwidth=2, relief=GROOVE, text=' Indentation Width ')
         # frame_font.
@@ -501,7 +536,7 @@ class FontPage(Frame):
         frame_font_param = Frame(frame_font)
         font_name_title = Label(
                 frame_font_name, justify=LEFT, text='Font Face :')
-        self.fontlist = Listbox(frame_font_name, height=5,
+        self.fontlist = Listbox(frame_font_name, height=15,
                                 takefocus=True, exportselection=FALSE)
         self.fontlist.bind('<ButtonRelease-1>', self.on_fontlist_select)
         self.fontlist.bind('<KeyRelease-Up>', self.on_fontlist_select)
@@ -514,11 +549,9 @@ class FontPage(Frame):
         self.bold_toggle = Checkbutton(
                 frame_font_param, variable=self.font_bold,
                 onvalue=1, offvalue=0, text='Bold')
-        frame_font_sample = Frame(frame_font, relief=SOLID, borderwidth=1)
-        temp_font = tkFont.Font(self, ('courier', 10, 'normal'))
-        self.font_sample = Label(
-                frame_font_sample, justify=LEFT, font=temp_font,
-                text='AaBbCcDdEe\nFfGgHhIiJj\n1234567890\n#:+=(){}[]')
+        # frame_sample.
+        self.font_sample = Text(frame_sample, width=20, height=20)
+        self.font_sample.insert(END, font_sample_text)
         # frame_indent.
         indent_title = Label(
                 frame_indent, justify=LEFT,
@@ -527,10 +560,12 @@ class FontPage(Frame):
                 frame_indent, variable=self.space_num,
                 orient='horizontal', tickinterval=2, from_=2, to=16)
 
-        # Pack widgets:
-        # body.
-        frame_font.pack(side=LEFT, padx=5, pady=5, expand=TRUE, fill=BOTH)
-        frame_indent.pack(side=LEFT, padx=5, pady=5, fill=Y)
+        # Grid and pack widgets:
+        self.columnconfigure(1, weight=1)
+        frame_font.grid(row=0, column=0, padx=5, pady=5)
+        frame_sample.grid(row=0, column=1, rowspan=2, padx=5, pady=5,
+                          sticky='nsew')
+        frame_indent.grid(row=1, column=0, padx=5, pady=5, sticky='ew')
         # frame_font.
         frame_font_name.pack(side=TOP, padx=5, pady=5, fill=X)
         frame_font_param.pack(side=TOP, padx=5, pady=5, fill=X)
@@ -540,10 +575,9 @@ class FontPage(Frame):
         font_size_title.pack(side=LEFT, anchor=W)
         self.sizelist.pack(side=LEFT, anchor=W)
         self.bold_toggle.pack(side=LEFT, anchor=W, padx=20)
-        frame_font_sample.pack(side=TOP, padx=5, pady=5, expand=TRUE, fill=BOTH)
+        # frame_sample.
         self.font_sample.pack(expand=TRUE, fill=BOTH)
         # frame_indent.
-        frame_indent.pack(side=TOP, fill=X)
         indent_title.pack(side=TOP, anchor=W, padx=5)
         self.indent_scale.pack(side=TOP, padx=5, fill=X)
 
@@ -612,7 +646,7 @@ class FontPage(Frame):
 
         Called on font initialization and change events.
         Accesses font_name, font_size, and font_bold Variables.
-        Updates font_sample and hightlight page highlight_sample.
+        Updates font_sample and highlight page highlight_sample.
         """
         font_name = self.font_name.get()
         font_weight = tkFont.BOLD if self.font_bold.get() else tkFont.NORMAL
@@ -1408,7 +1442,7 @@ class KeysPage(Frame):
         self.bindingslist['xscrollcommand'] = scroll_target_x.set
         self.button_new_keys = Button(
                 frame_custom, text='Get New Keys for Selection',
-                command=self.get_new_keys, state=DISABLED)
+                command=self.get_new_keys, state='disabled')
         # frame_key_sets.
         frames = [Frame(frame_key_sets, padding=2, borderwidth=0)
                   for i in range(2)]
@@ -1758,11 +1792,27 @@ class GenPage(Frame):
                     (*)win_width_int: Entry - win_width
                     win_height_title: Label
                     (*)win_height_int: Entry - win_height
+                frame_autocomplete: Frame
+                    auto_wait_title: Label
+                    (*)auto_wait_int: Entry - autocomplete_wait
+                frame_paren1: Frame
+                    paren_style_title: Label
+                    (*)paren_style_type: OptionMenu - paren_style
+                frame_paren2: Frame
+                    paren_time_title: Label
+                    (*)paren_flash_time: Entry - flash_delay
+                    (*)bell_on: Checkbutton - paren_bell
             frame_editor: LabelFrame
                 frame_save: Frame
                     run_save_title: Label
                     (*)save_ask_on: Radiobutton - autosave
                     (*)save_auto_on: Radiobutton - autosave
+                frame_format: Frame
+                    format_width_title: Label
+                    (*)format_width_int: Entry - format_width
+                frame_context: Frame
+                    context_title: Label
+                    (*)context_int: Entry - context_lines
             frame_help: LabelFrame
                 frame_helplist: Frame
                     frame_helplist_buttons: Frame
@@ -2108,10 +2158,26 @@ When you click either the Apply or Ok bu
 dialog that are different from IDLE's default are saved in
 a .idlerc directory in your home directory. Except as noted,
 these changes apply to all versions of IDLE installed on this
-machine. Some do not take affect until IDLE is restarted.
-[Cancel] only cancels changes made since the last save.
+machine. [Cancel] only cancels changes made since the last save.
 '''
 help_pages = {
+    'Fonts/Tabs':'''
+Font sample: This shows what a selection of Basic Multilingual Plane
+unicode characters look like for the current font selection.  If the
+selected font does not define a character, Tk attempts to find another
+font that does.  Substitute glyphs depend on what is available on a
+particular system and will not necessarily have the same size as the
+font selected.  Line contains 20 characters up to Devanagari, 14 for
+Tamil, and 10 for East Asia.
+
+Hebrew and Arabic letters should display right to left, starting with
+alef, \u05d0 and \u0627.  Arabic digits display left to right.  The
+Devanagari and Tamil lines start with digits.  The East Asian lines
+are Chinese digits, Chinese Hanzi, Korean Hangul, and Japanese
+Hiragana and Katakana.
+
+You can edit the font sample. Changes remain until IDLE is closed.
+''',
     'Highlights': '''
 Highlighting:
 The IDLE Dark color theme is new in October 2015.  It can only
diff -urpN Python-3.6.3/Lib/idlelib/editor.py Python-3.6.5/Lib/idlelib/editor.py
--- Python-3.6.3/Lib/idlelib/editor.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/editor.py	2018-03-28 11:19:31.000000000 +0200
@@ -99,10 +99,6 @@ class EditorWindow(object):
         self.flist = flist
         root = root or flist.root
         self.root = root
-        try:
-            sys.ps1
-        except AttributeError:
-            sys.ps1 = '>>> '
         self.menubar = Menu(root)
         self.top = top = windows.ListedToplevel(root, menu=self.menubar)
         if flist:
@@ -116,6 +112,8 @@ class EditorWindow(object):
             self.top.instance_dict = {}
         self.recent_files_path = os.path.join(
                 idleConf.userdir, 'recent-files.lst')
+
+        self.prompt_last_line = ''  # Override in PyShell
         self.text_frame = text_frame = Frame(top)
         self.vbar = vbar = Scrollbar(text_frame, name='vbar')
         self.width = idleConf.GetOption('main', 'EditorWindow',
@@ -190,7 +188,7 @@ class EditorWindow(object):
                 flist.dict[key] = self
             text.bind("<<open-new-window>>", self.new_callback)
             text.bind("<<close-all-windows>>", self.flist.close_all_callback)
-            text.bind("<<open-class-browser>>", self.open_class_browser)
+            text.bind("<<open-class-browser>>", self.open_module_browser)
             text.bind("<<open-path-browser>>", self.open_path_browser)
             text.bind("<<open-turtle-demo>>", self.open_turtle_demo)
 
@@ -632,10 +630,10 @@ class EditorWindow(object):
     def open_module(self):
         """Get module name from user and open it.
 
-        Return module path or None for calls by open_class_browser
+        Return module path or None for calls by open_module_browser
         when latter is not invoked in named editor window.
         """
-        # XXX This, open_class_browser, and open_path_browser
+        # XXX This, open_module_browser, and open_path_browser
         # would fit better in iomenu.IOBinding.
         try:
             name = self.text.get("sel.first", "sel.last").strip()
@@ -657,22 +655,20 @@ class EditorWindow(object):
         self.open_module()
         return "break"
 
-    def open_class_browser(self, event=None):
+    def open_module_browser(self, event=None):
         filename = self.io.filename
         if not (self.__class__.__name__ == 'PyShellEditorWindow'
                 and filename):
             filename = self.open_module()
             if filename is None:
                 return "break"
-        head, tail = os.path.split(filename)
-        base, ext = os.path.splitext(tail)
         from idlelib import browser
-        browser.ClassBrowser(self.flist, base, [head])
+        browser.ModuleBrowser(self.root, filename)
         return "break"
 
     def open_path_browser(self, event=None):
         from idlelib import pathbrowser
-        pathbrowser.PathBrowser(self.flist)
+        pathbrowser.PathBrowser(self.root)
         return "break"
 
     def open_turtle_demo(self, event = None):
@@ -1215,13 +1211,9 @@ class EditorWindow(object):
         assert have > 0
         want = ((have - 1) // self.indentwidth) * self.indentwidth
         # Debug prompt is multilined....
-        if self.context_use_ps1:
-            last_line_of_prompt = sys.ps1.split('\n')[-1]
-        else:
-            last_line_of_prompt = ''
         ncharsdeleted = 0
         while 1:
-            if chars == last_line_of_prompt:
+            if chars == self.prompt_last_line:  # '' unless PyShell
                 break
             chars = chars[:-1]
             ncharsdeleted = ncharsdeleted + 1
@@ -1290,8 +1282,7 @@ class EditorWindow(object):
             indent = line[:i]
             # strip whitespace before insert point unless it's in the prompt
             i = 0
-            last_line_of_prompt = sys.ps1.split('\n')[-1]
-            while line and line[-1] in " \t" and line != last_line_of_prompt:
+            while line and line[-1] in " \t" and line != self.prompt_last_line:
                 line = line[:-1]
                 i = i+1
             if i:
@@ -1311,7 +1302,7 @@ class EditorWindow(object):
                     startat = max(lno - context, 1)
                     startatindex = repr(startat) + ".0"
                     rawtext = text.get(startatindex, "insert")
-                    y.set_str(rawtext)
+                    y.set_code(rawtext)
                     bod = y.find_good_parse_start(
                               self.context_use_ps1,
                               self._build_char_in_string_func(startatindex))
@@ -1325,7 +1316,7 @@ class EditorWindow(object):
                 else:
                     startatindex = "1.0"
                 rawtext = text.get(startatindex, "insert")
-                y.set_str(rawtext)
+                y.set_code(rawtext)
                 y.set_lo(0)
 
             c = y.get_continuation_type()
diff -urpN Python-3.6.3/Lib/idlelib/filelist.py Python-3.6.5/Lib/idlelib/filelist.py
--- Python-3.6.3/Lib/idlelib/filelist.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/filelist.py	2018-03-28 11:19:31.000000000 +0200
@@ -113,8 +113,10 @@ class FileList:
 
 def _test():
     from idlelib.editor import fixwordbreaks
+    from idlelib.run import fix_scaling
     import sys
     root = Tk()
+    fix_scaling(root)
     fixwordbreaks(root)
     root.withdraw()
     flist = FileList(root)
diff -urpN Python-3.6.3/Lib/idlelib/help_about.py Python-3.6.5/Lib/idlelib/help_about.py
--- Python-3.6.3/Lib/idlelib/help_about.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/help_about.py	2018-03-28 11:19:31.000000000 +0200
@@ -23,7 +23,7 @@ class AboutDialog(Toplevel):
     """Modal about dialog for idle
 
     """
-    def __init__(self, parent, title=None, _htest=False, _utest=False):
+    def __init__(self, parent, title=None, *, _htest=False, _utest=False):
         """Create popup, do not return until tk widget destroyed.
 
         parent - parent of this dialog
diff -urpN Python-3.6.3/Lib/idlelib/hyperparser.py Python-3.6.5/Lib/idlelib/hyperparser.py
--- Python-3.6.3/Lib/idlelib/hyperparser.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/hyperparser.py	2018-03-28 11:19:31.000000000 +0200
@@ -44,7 +44,7 @@ class HyperParser:
                 # at end. We add a space so that index won't be at end
                 # of line, so that its status will be the same as the
                 # char before it, if should.
-                parser.set_str(text.get(startatindex, stopatindex)+' \n')
+                parser.set_code(text.get(startatindex, stopatindex)+' \n')
                 bod = parser.find_good_parse_start(
                           editwin._build_char_in_string_func(startatindex))
                 if bod is not None or startat == 1:
@@ -60,12 +60,12 @@ class HyperParser:
             # We add the newline because PyParse requires it. We add a
             # space so that index won't be at end of line, so that its
             # status will be the same as the char before it, if should.
-            parser.set_str(text.get(startatindex, stopatindex)+' \n')
+            parser.set_code(text.get(startatindex, stopatindex)+' \n')
             parser.set_lo(0)
 
         # We want what the parser has, minus the last newline and space.
-        self.rawtext = parser.str[:-2]
-        # Parser.str apparently preserves the statement we are in, so
+        self.rawtext = parser.code[:-2]
+        # Parser.code apparently preserves the statement we are in, so
         # that stopatindex can be used to synchronize the string with
         # the text box indices.
         self.stopatindex = stopatindex
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/README.txt Python-3.6.5/Lib/idlelib/idle_test/README.txt
--- Python-3.6.3/Lib/idlelib/idle_test/README.txt	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/idle_test/README.txt	2018-03-28 11:19:31.000000000 +0200
@@ -144,9 +144,18 @@ green. Idle tests must not disturb the e
 other tests fail (issue 18081).
 
 To run an individual Testcase or test method, extend the dotted name
-given to unittest on the command line.
+given to unittest on the command line or use the test -m option.  The
+latter allows use of other regrtest options.  When using the latter,
+all components of the pattern must be present, but any can be replaced
+by '*'.
 
 python -m unittest -v idlelib.idle_test.test_xyz.Test_case.test_meth
+python -m test -m idlelib.idle_test.text_xyz.Test_case.test_meth test_idle
+
+The test suite can be run in an IDLE user process from Shell.
+>>> import test.autotest  # Issue 25588, 2017/10/13, 3.6.4, 3.7.0a2.
+There are currently failures not usually present, and this does not
+work when run from the editor.
 
 
 4. Human-mediated Tests
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/htest.py Python-3.6.5/Lib/idlelib/idle_test/htest.py
--- Python-3.6.3/Lib/idlelib/idle_test/htest.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/idle_test/htest.py	2018-03-28 11:19:31.000000000 +0200
@@ -86,7 +86,7 @@ _calltip_window_spec = {
            "Typing ') should hide the calltip.\n"
     }
 
-_class_browser_spec = {
+_module_browser_spec = {
     'file': 'browser',
     'kwds': {},
     'msg': "Inspect names of module, class(with superclass if "
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/test_browser.py Python-3.6.5/Lib/idlelib/idle_test/test_browser.py
--- Python-3.6.3/Lib/idlelib/idle_test/test_browser.py	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/Lib/idlelib/idle_test/test_browser.py	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,253 @@
+""" Test idlelib.browser.
+
+Coverage: 88%
+(Higher, because should exclude 3 lines that .coveragerc won't exclude.)
+"""
+
+from collections import deque
+import os.path
+from idlelib import _pyclbr as pyclbr
+from tkinter import Tk
+
+from test.support import requires
+import unittest
+from unittest import mock
+from idlelib.idle_test.mock_idle import Func
+
+from idlelib import browser
+from idlelib import filelist
+from idlelib.tree import TreeNode
+
+
+class ModuleBrowserTest(unittest.TestCase):
+
+    @classmethod
+    def setUpClass(cls):
+        requires('gui')
+        cls.root = Tk()
+        cls.root.withdraw()
+        cls.mb = browser.ModuleBrowser(cls.root, __file__, _utest=True)
+
+    @classmethod
+    def tearDownClass(cls):
+        cls.mb.close()
+        cls.root.update_idletasks()
+        cls.root.destroy()
+        del cls.root, cls.mb
+
+    def test_init(self):
+        mb = self.mb
+        eq = self.assertEqual
+        eq(mb.path, __file__)
+        eq(pyclbr._modules, {})
+        self.assertIsInstance(mb.node, TreeNode)
+        self.assertIsNotNone(browser.file_open)
+
+    def test_settitle(self):
+        mb = self.mb
+        self.assertIn(os.path.basename(__file__), mb.top.title())
+        self.assertEqual(mb.top.iconname(), 'Module Browser')
+
+    def test_rootnode(self):
+        mb = self.mb
+        rn = mb.rootnode()
+        self.assertIsInstance(rn, browser.ModuleBrowserTreeItem)
+
+    def test_close(self):
+        mb = self.mb
+        mb.top.destroy = Func()
+        mb.node.destroy = Func()
+        mb.close()
+        self.assertTrue(mb.top.destroy.called)
+        self.assertTrue(mb.node.destroy.called)
+        del mb.top.destroy, mb.node.destroy
+
+
+# Nested tree same as in test_pyclbr.py except for supers on C0. C1.
+mb = pyclbr
+module, fname = 'test', 'test.py'
+f0 = mb.Function(module, 'f0', fname, 1)
+f1 = mb._nest_function(f0, 'f1', 2)
+f2 = mb._nest_function(f1, 'f2', 3)
+c1 = mb._nest_class(f0, 'c1', 5)
+C0 = mb.Class(module, 'C0', ['base'], fname, 6)
+F1 = mb._nest_function(C0, 'F1', 8)
+C1 = mb._nest_class(C0, 'C1', 11, [''])
+C2 = mb._nest_class(C1, 'C2', 12)
+F3 = mb._nest_function(C2, 'F3', 14)
+mock_pyclbr_tree = {'f0': f0, 'C0': C0}
+
+# Adjust C0.name, C1.name so tests do not depend on order.
+browser.transform_children(mock_pyclbr_tree, 'test')  # C0(base)
+browser.transform_children(C0.children)  # C1()
+
+# The class below checks that the calls above are correct
+# and that duplicate calls have no effect.
+
+
+class TransformChildrenTest(unittest.TestCase):
+
+    def test_transform_module_children(self):
+        eq = self.assertEqual
+        transform = browser.transform_children
+        # Parameter matches tree module.
+        tcl = list(transform(mock_pyclbr_tree, 'test'))
+        eq(tcl, [f0, C0])
+        eq(tcl[0].name, 'f0')
+        eq(tcl[1].name, 'C0(base)')
+        # Check that second call does not change suffix.
+        tcl = list(transform(mock_pyclbr_tree, 'test'))
+        eq(tcl[1].name, 'C0(base)')
+        # Nothing to traverse if parameter name isn't same as tree module.
+        tcl = list(transform(mock_pyclbr_tree, 'different name'))
+        eq(tcl, [])
+
+    def test_transform_node_children(self):
+        eq = self.assertEqual
+        transform = browser.transform_children
+        # Class with two children, one name altered.
+        tcl = list(transform(C0.children))
+        eq(tcl, [F1, C1])
+        eq(tcl[0].name, 'F1')
+        eq(tcl[1].name, 'C1()')
+        tcl = list(transform(C0.children))
+        eq(tcl[1].name, 'C1()')
+        # Function with two children.
+        eq(list(transform(f0.children)), [f1, c1])
+
+
+class ModuleBrowserTreeItemTest(unittest.TestCase):
+
+    @classmethod
+    def setUpClass(cls):
+        cls.mbt = browser.ModuleBrowserTreeItem(fname)
+
+    def test_init(self):
+        self.assertEqual(self.mbt.file, fname)
+
+    def test_gettext(self):
+        self.assertEqual(self.mbt.GetText(), fname)
+
+    def test_geticonname(self):
+        self.assertEqual(self.mbt.GetIconName(), 'python')
+
+    def test_isexpandable(self):
+        self.assertTrue(self.mbt.IsExpandable())
+
+    def test_listchildren(self):
+        save_rex = browser.pyclbr.readmodule_ex
+        save_tc = browser.transform_children
+        browser.pyclbr.readmodule_ex = Func(result=mock_pyclbr_tree)
+        browser.transform_children = Func(result=[f0, C0])
+        try:
+            self.assertEqual(self.mbt.listchildren(), [f0, C0])
+        finally:
+            browser.pyclbr.readmodule_ex = save_rex
+            browser.transform_children = save_tc
+
+    def test_getsublist(self):
+        mbt = self.mbt
+        mbt.listchildren = Func(result=[f0, C0])
+        sub0, sub1 = mbt.GetSubList()
+        del mbt.listchildren
+        self.assertIsInstance(sub0, browser.ChildBrowserTreeItem)
+        self.assertIsInstance(sub1, browser.ChildBrowserTreeItem)
+        self.assertEqual(sub0.name, 'f0')
+        self.assertEqual(sub1.name, 'C0(base)')
+
+    @mock.patch('idlelib.browser.file_open')
+    def test_ondoubleclick(self, fopen):
+        mbt = self.mbt
+
+        with mock.patch('os.path.exists', return_value=False):
+            mbt.OnDoubleClick()
+            fopen.assert_not_called()
+
+        with mock.patch('os.path.exists', return_value=True):
+            mbt.OnDoubleClick()
+            fopen.assert_called()
+            fopen.called_with(fname)
+
+
+class ChildBrowserTreeItemTest(unittest.TestCase):
+
+    @classmethod
+    def setUpClass(cls):
+        CBT = browser.ChildBrowserTreeItem
+        cls.cbt_f1 = CBT(f1)
+        cls.cbt_C1 = CBT(C1)
+        cls.cbt_F1 = CBT(F1)
+
+    @classmethod
+    def tearDownClass(cls):
+        del cls.cbt_C1, cls.cbt_f1, cls.cbt_F1
+
+    def test_init(self):
+        eq = self.assertEqual
+        eq(self.cbt_C1.name, 'C1()')
+        self.assertFalse(self.cbt_C1.isfunction)
+        eq(self.cbt_f1.name, 'f1')
+        self.assertTrue(self.cbt_f1.isfunction)
+
+    def test_gettext(self):
+        self.assertEqual(self.cbt_C1.GetText(), 'class C1()')
+        self.assertEqual(self.cbt_f1.GetText(), 'def f1(...)')
+
+    def test_geticonname(self):
+        self.assertEqual(self.cbt_C1.GetIconName(), 'folder')
+        self.assertEqual(self.cbt_f1.GetIconName(), 'python')
+
+    def test_isexpandable(self):
+        self.assertTrue(self.cbt_C1.IsExpandable())
+        self.assertTrue(self.cbt_f1.IsExpandable())
+        self.assertFalse(self.cbt_F1.IsExpandable())
+
+    def test_getsublist(self):
+        eq = self.assertEqual
+        CBT = browser.ChildBrowserTreeItem
+
+        f1sublist = self.cbt_f1.GetSubList()
+        self.assertIsInstance(f1sublist[0], CBT)
+        eq(len(f1sublist), 1)
+        eq(f1sublist[0].name, 'f2')
+
+        eq(self.cbt_F1.GetSubList(), [])
+
+    @mock.patch('idlelib.browser.file_open')
+    def test_ondoubleclick(self, fopen):
+        goto = fopen.return_value.gotoline = mock.Mock()
+        self.cbt_F1.OnDoubleClick()
+        fopen.assert_called()
+        goto.assert_called()
+        goto.assert_called_with(self.cbt_F1.obj.lineno)
+        # Failure test would have to raise OSError or AttributeError.
+
+
+class NestedChildrenTest(unittest.TestCase):
+    "Test that all the nodes in a nested tree are added to the BrowserTree."
+
+    def test_nested(self):
+        queue = deque()
+        actual_names = []
+        # The tree items are processed in breadth first order.
+        # Verify that processing each sublist hits every node and
+        # in the right order.
+        expected_names = ['f0', 'C0(base)',
+                          'f1', 'c1', 'F1', 'C1()',
+                          'f2', 'C2',
+                          'F3']
+        CBT = browser.ChildBrowserTreeItem
+        queue.extend((CBT(f0), CBT(C0)))
+        while queue:
+            cb = queue.popleft()
+            sublist = cb.GetSubList()
+            queue.extend(sublist)
+            self.assertIn(cb.name, cb.GetText())
+            self.assertIn(cb.GetIconName(), ('python', 'folder'))
+            self.assertIs(cb.IsExpandable(), sublist != [])
+            actual_names.append(cb.name)
+        self.assertEqual(actual_names, expected_names)
+
+
+if __name__ == '__main__':
+    unittest.main(verbosity=2)
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/test_configdialog.py Python-3.6.5/Lib/idlelib/idle_test/test_configdialog.py
--- Python-3.6.3/Lib/idlelib/idle_test/test_configdialog.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/idle_test/test_configdialog.py	2018-03-28 11:19:31.000000000 +0200
@@ -44,10 +44,9 @@ def tearDownModule():
     tracers.detach()
     tracers.clear()
     changes.clear()
-    del dialog
     root.update_idletasks()
     root.destroy()
-    del root
+    root = dialog = None
 
 
 class FontPageTest(unittest.TestCase):
@@ -192,6 +191,7 @@ class FontPageTest(unittest.TestCase):
     def test_set_samples(self):
         d = self.page
         del d.set_samples  # Unmask method for test
+        orig_samples = d.font_sample, d.highlight_sample
         d.font_sample, d.highlight_sample = {}, {}
         d.font_name.set('test')
         d.font_size.set('5')
@@ -202,7 +202,7 @@ class FontPageTest(unittest.TestCase):
         d.set_samples()
         self.assertTrue(d.font_sample == d.highlight_sample == expected)
 
-        del d.font_sample, d.highlight_sample
+        d.font_sample, d.highlight_sample = orig_samples
         d.set_samples = Func()  # Re-mask for other tests.
 
 
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/test_help_about.py Python-3.6.5/Lib/idlelib/idle_test/test_help_about.py
--- Python-3.6.3/Lib/idlelib/idle_test/test_help_about.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/idle_test/test_help_about.py	2018-03-28 11:19:31.000000000 +0200
@@ -50,35 +50,37 @@ class LiveDialogTest(unittest.TestCase):
     def test_printer_buttons(self):
         """Test buttons whose commands use printer function."""
         dialog = self.dialog
-        button_sources = [(dialog.py_license, license),
-                          (dialog.py_copyright, copyright),
-                          (dialog.py_credits, credits)]
+        button_sources = [(dialog.py_license, license, 'license'),
+                          (dialog.py_copyright, copyright, 'copyright'),
+                          (dialog.py_credits, credits, 'credits')]
 
-        for button, printer in button_sources:
-            printer._Printer__setup()
-            button.invoke()
-            get = dialog._current_textview.viewframe.textframe.text.get
-            self.assertEqual(printer._Printer__lines[0], get('1.0', '1.end'))
-            self.assertEqual(
-                    printer._Printer__lines[1], get('2.0', '2.end'))
-            dialog._current_textview.destroy()
+        for button, printer, name in button_sources:
+            with self.subTest(name=name):
+                printer._Printer__setup()
+                button.invoke()
+                get = dialog._current_textview.viewframe.textframe.text.get
+                lines = printer._Printer__lines
+                self.assertEqual(lines[0], get('1.0', '1.end'))
+                self.assertEqual(lines[1], get('2.0', '2.end'))
+                dialog._current_textview.destroy()
 
     def test_file_buttons(self):
         """Test buttons that display files."""
         dialog = self.dialog
-        button_sources = [(self.dialog.readme, 'README.txt'),
-                          (self.dialog.idle_news, 'NEWS.txt'),
-                          (self.dialog.idle_credits, 'CREDITS.txt')]
+        button_sources = [(self.dialog.readme, 'README.txt', 'readme'),
+                          (self.dialog.idle_news, 'NEWS.txt', 'news'),
+                          (self.dialog.idle_credits, 'CREDITS.txt', 'credits')]
 
-        for button, filename in button_sources:
-            button.invoke()
-            fn = findfile(filename, subdir='idlelib')
-            get = dialog._current_textview.viewframe.textframe.text.get
-            with open(fn) as f:
-                self.assertEqual(f.readline().strip(), get('1.0', '1.end'))
-                f.readline()
-                self.assertEqual(f.readline().strip(), get('3.0', '3.end'))
-            dialog._current_textview.destroy()
+        for button, filename, name in button_sources:
+            with  self.subTest(name=name):
+                button.invoke()
+                fn = findfile(filename, subdir='idlelib')
+                get = dialog._current_textview.viewframe.textframe.text.get
+                with open(fn, encoding='utf-8') as f:
+                    self.assertEqual(f.readline().strip(), get('1.0', '1.end'))
+                    f.readline()
+                    self.assertEqual(f.readline().strip(), get('3.0', '3.end'))
+                dialog._current_textview.destroy()
 
 
 class DefaultTitleTest(unittest.TestCase):
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/test_pathbrowser.py Python-3.6.5/Lib/idlelib/idle_test/test_pathbrowser.py
--- Python-3.6.3/Lib/idlelib/idle_test/test_pathbrowser.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/idle_test/test_pathbrowser.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,11 +1,68 @@
+""" Test idlelib.pathbrowser.
+"""
+
+
+import os.path
+import pyclbr  # for _modules
+import sys  # for sys.path
+from tkinter import Tk
+
+from test.support import requires
 import unittest
-import os
-import sys
-import idlelib
+from idlelib.idle_test.mock_idle import Func
+
+import idlelib  # for __file__
+from idlelib import browser
 from idlelib import pathbrowser
+from idlelib.tree import TreeNode
+
 
 class PathBrowserTest(unittest.TestCase):
 
+    @classmethod
+    def setUpClass(cls):
+        requires('gui')
+        cls.root = Tk()
+        cls.root.withdraw()
+        cls.pb = pathbrowser.PathBrowser(cls.root, _utest=True)
+
+    @classmethod
+    def tearDownClass(cls):
+        cls.pb.close()
+        cls.root.update_idletasks()
+        cls.root.destroy()
+        del cls.root, cls.pb
+
+    def test_init(self):
+        pb = self.pb
+        eq = self.assertEqual
+        eq(pb.master, self.root)
+        eq(pyclbr._modules, {})
+        self.assertIsInstance(pb.node, TreeNode)
+        self.assertIsNotNone(browser.file_open)
+
+    def test_settitle(self):
+        pb = self.pb
+        self.assertEqual(pb.top.title(), 'Path Browser')
+        self.assertEqual(pb.top.iconname(), 'Path Browser')
+
+    def test_rootnode(self):
+        pb = self.pb
+        rn = pb.rootnode()
+        self.assertIsInstance(rn, pathbrowser.PathBrowserTreeItem)
+
+    def test_close(self):
+        pb = self.pb
+        pb.top.destroy = Func()
+        pb.node.destroy = Func()
+        pb.close()
+        self.assertTrue(pb.top.destroy.called)
+        self.assertTrue(pb.node.destroy.called)
+        del pb.top.destroy, pb.node.destroy
+
+
+class DirBrowserTreeItemTest(unittest.TestCase):
+
     def test_DirBrowserTreeItem(self):
         # Issue16226 - make sure that getting a sublist works
         d = pathbrowser.DirBrowserTreeItem('')
@@ -16,6 +73,9 @@ class PathBrowserTest(unittest.TestCase)
         self.assertEqual(d.ispackagedir(dir), True)
         self.assertEqual(d.ispackagedir(dir + '/Icons'), False)
 
+
+class PathBrowserTreeItemTest(unittest.TestCase):
+
     def test_PathBrowserTreeItem(self):
         p = pathbrowser.PathBrowserTreeItem()
         self.assertEqual(p.GetText(), 'sys.path')
@@ -23,5 +83,6 @@ class PathBrowserTest(unittest.TestCase)
         self.assertEqual(len(sub), len(sys.path))
         self.assertEqual(type(sub[0]), pathbrowser.DirBrowserTreeItem)
 
+
 if __name__ == '__main__':
     unittest.main(verbosity=2, exit=False)
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/test_pyparse.py Python-3.6.5/Lib/idlelib/idle_test/test_pyparse.py
--- Python-3.6.3/Lib/idlelib/idle_test/test_pyparse.py	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/Lib/idlelib/idle_test/test_pyparse.py	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,469 @@
+"""Unittest for idlelib.pyparse.py.
+
+Coverage: 97%
+"""
+
+from collections import namedtuple
+import unittest
+from idlelib import pyparse
+
+
+class ParseMapTest(unittest.TestCase):
+
+    def test_parsemap(self):
+        keepwhite = {ord(c): ord(c) for c in ' \t\n\r'}
+        mapping = pyparse.ParseMap(keepwhite)
+        self.assertEqual(mapping[ord('\t')], ord('\t'))
+        self.assertEqual(mapping[ord('a')], ord('x'))
+        self.assertEqual(mapping[1000], ord('x'))
+
+    def test_trans(self):
+        # trans is the production instance of ParseMap, used in _study1
+        parser = pyparse.Parser(4, 4)
+        self.assertEqual('\t a([{b}])b"c\'d\n'.translate(pyparse.trans),
+                          'xxx(((x)))x"x\'x\n')
+
+
+class PyParseTest(unittest.TestCase):
+
+    @classmethod
+    def setUpClass(cls):
+        cls.parser = pyparse.Parser(indentwidth=4, tabwidth=4)
+
+    @classmethod
+    def tearDownClass(cls):
+        del cls.parser
+
+    def test_init(self):
+        self.assertEqual(self.parser.indentwidth, 4)
+        self.assertEqual(self.parser.tabwidth, 4)
+
+    def test_set_code(self):
+        eq = self.assertEqual
+        p = self.parser
+        setcode = p.set_code
+
+        # Not empty and doesn't end with newline.
+        with self.assertRaises(AssertionError):
+            setcode('a')
+
+        tests = ('',
+                 'a\n')
+
+        for string in tests:
+            with self.subTest(string=string):
+                setcode(string)
+                eq(p.code, string)
+                eq(p.study_level, 0)
+
+    def test_find_good_parse_start(self):
+        eq = self.assertEqual
+        p = self.parser
+        setcode = p.set_code
+        start = p.find_good_parse_start
+
+        # Split def across lines.
+        setcode('"""This is a module docstring"""\n'
+               'class C():\n'
+               '    def __init__(self, a,\n'
+               '                 b=True):\n'
+               '        pass\n'
+               )
+
+        # No value sent for is_char_in_string().
+        self.assertIsNone(start())
+
+        # Make text look like a string.  This returns pos as the start
+        # position, but it's set to None.
+        self.assertIsNone(start(is_char_in_string=lambda index: True))
+
+        # Make all text look like it's not in a string.  This means that it
+        # found a good start position.
+        eq(start(is_char_in_string=lambda index: False), 44)
+
+        # If the beginning of the def line is not in a string, then it
+        # returns that as the index.
+        eq(start(is_char_in_string=lambda index: index > 44), 44)
+        # If the beginning of the def line is in a string, then it
+        # looks for a previous index.
+        eq(start(is_char_in_string=lambda index: index >= 44), 33)
+        # If everything before the 'def' is in a string, then returns None.
+        # The non-continuation def line returns 44 (see below).
+        eq(start(is_char_in_string=lambda index: index < 44), None)
+
+        # Code without extra line break in def line - mostly returns the same
+        # values.
+        setcode('"""This is a module docstring"""\n'
+               'class C():\n'
+               '    def __init__(self, a, b=True):\n'
+               '        pass\n'
+               )
+        eq(start(is_char_in_string=lambda index: False), 44)
+        eq(start(is_char_in_string=lambda index: index > 44), 44)
+        eq(start(is_char_in_string=lambda index: index >= 44), 33)
+        # When the def line isn't split, this returns which doesn't match the
+        # split line test.
+        eq(start(is_char_in_string=lambda index: index < 44), 44)
+
+    def test_set_lo(self):
+        code = (
+                '"""This is a module docstring"""\n'
+                'class C():\n'
+                '    def __init__(self, a,\n'
+                '                 b=True):\n'
+                '        pass\n'
+                )
+        p = self.parser
+        p.set_code(code)
+
+        # Previous character is not a newline.
+        with self.assertRaises(AssertionError):
+            p.set_lo(5)
+
+        # A value of 0 doesn't change self.code.
+        p.set_lo(0)
+        self.assertEqual(p.code, code)
+
+        # An index that is preceded by a newline.
+        p.set_lo(44)
+        self.assertEqual(p.code, code[44:])
+
+    def test_study1(self):
+        eq = self.assertEqual
+        p = self.parser
+        setcode = p.set_code
+        study = p._study1
+
+        (NONE, BACKSLASH, FIRST, NEXT, BRACKET) = range(5)
+        TestInfo = namedtuple('TestInfo', ['string', 'goodlines',
+                                           'continuation'])
+        tests = (
+            TestInfo('', [0], NONE),
+            # Docstrings.
+            TestInfo('"""This is a complete docstring."""\n', [0, 1], NONE),
+            TestInfo("'''This is a complete docstring.'''\n", [0, 1], NONE),
+            TestInfo('"""This is a continued docstring.\n', [0, 1], FIRST),
+            TestInfo("'''This is a continued docstring.\n", [0, 1], FIRST),
+            TestInfo('"""Closing quote does not match."\n', [0, 1], FIRST),
+            TestInfo('"""Bracket in docstring [\n', [0, 1], FIRST),
+            TestInfo("'''Incomplete two line docstring.\n\n", [0, 2], NEXT),
+            # Single-quoted strings.
+            TestInfo('"This is a complete string."\n', [0, 1], NONE),
+            TestInfo('"This is an incomplete string.\n', [0, 1], NONE),
+            TestInfo("'This is more incomplete.\n\n", [0, 1, 2], NONE),
+            # Comment (backslash does not continue comments).
+            TestInfo('# Comment\\\n', [0, 1], NONE),
+            # Brackets.
+            TestInfo('("""Complete string in bracket"""\n', [0, 1], BRACKET),
+            TestInfo('("""Open string in bracket\n', [0, 1], FIRST),
+            TestInfo('a = (1 + 2) - 5 *\\\n', [0, 1], BACKSLASH),  # No bracket.
+            TestInfo('\n   def function1(self, a,\n                 b):\n',
+                     [0, 1, 3], NONE),
+            TestInfo('\n   def function1(self, a,\\\n', [0, 1, 2], BRACKET),
+            TestInfo('\n   def function1(self, a,\n', [0, 1, 2], BRACKET),
+            TestInfo('())\n', [0, 1], NONE),                    # Extra closer.
+            TestInfo(')(\n', [0, 1], BRACKET),                  # Extra closer.
+            # For the mismatched example, it doesn't look like contination.
+            TestInfo('{)(]\n', [0, 1], NONE),                   # Mismatched.
+            )
+
+        for test in tests:
+            with self.subTest(string=test.string):
+                setcode(test.string)  # resets study_level
+                study()
+                eq(p.study_level, 1)
+                eq(p.goodlines, test.goodlines)
+                eq(p.continuation, test.continuation)
+
+        # Called again, just returns without reprocessing.
+        self.assertIsNone(study())
+
+    def test_get_continuation_type(self):
+        eq = self.assertEqual
+        p = self.parser
+        setcode = p.set_code
+        gettype = p.get_continuation_type
+
+        (NONE, BACKSLASH, FIRST, NEXT, BRACKET) = range(5)
+        TestInfo = namedtuple('TestInfo', ['string', 'continuation'])
+        tests = (
+            TestInfo('', NONE),
+            TestInfo('"""This is a continuation docstring.\n', FIRST),
+            TestInfo("'''This is a multiline-continued docstring.\n\n", NEXT),
+            TestInfo('a = (1 + 2) - 5 *\\\n', BACKSLASH),
+            TestInfo('\n   def function1(self, a,\\\n', BRACKET)
+            )
+
+        for test in tests:
+            with self.subTest(string=test.string):
+                setcode(test.string)
+                eq(gettype(), test.continuation)
+
+    def test_study2(self):
+        eq = self.assertEqual
+        p = self.parser
+        setcode = p.set_code
+        study = p._study2
+
+        TestInfo = namedtuple('TestInfo', ['string', 'start', 'end', 'lastch',
+                                           'openbracket', 'bracketing'])
+        tests = (
+            TestInfo('', 0, 0, '', None, ((0, 0),)),
+            TestInfo("'''This is a multiline continutation docstring.\n\n",
+                     0, 49, "'", None, ((0, 0), (0, 1), (49, 0))),
+            TestInfo(' # Comment\\\n',
+                     0, 12, '', None, ((0, 0), (1, 1), (12, 0))),
+            # A comment without a space is a special case
+            TestInfo(' #Comment\\\n',
+                     0, 0, '', None, ((0, 0),)),
+            # Backslash continuation.
+            TestInfo('a = (1 + 2) - 5 *\\\n',
+                     0, 19, '*', None, ((0, 0), (4, 1), (11, 0))),
+            # Bracket continuation with close.
+            TestInfo('\n   def function1(self, a,\n                 b):\n',
+                     1, 48, ':', None, ((1, 0), (17, 1), (46, 0))),
+            # Bracket continuation with unneeded backslash.
+            TestInfo('\n   def function1(self, a,\\\n',
+                     1, 28, ',', 17, ((1, 0), (17, 1))),
+            # Bracket continuation.
+            TestInfo('\n   def function1(self, a,\n',
+                     1, 27, ',', 17, ((1, 0), (17, 1))),
+            # Bracket continuation with comment at end of line with text.
+            TestInfo('\n   def function1(self, a,  # End of line comment.\n',
+                     1, 51, ',', 17, ((1, 0), (17, 1), (28, 2), (51, 1))),
+            # Multi-line statement with comment line in between code lines.
+            TestInfo('  a = ["first item",\n  # Comment line\n    "next item",\n',
+                     0, 55, ',', 6, ((0, 0), (6, 1), (7, 2), (19, 1),
+                                     (23, 2), (38, 1), (42, 2), (53, 1))),
+            TestInfo('())\n',
+                     0, 4, ')', None, ((0, 0), (0, 1), (2, 0), (3, 0))),
+            TestInfo(')(\n', 0, 3, '(', 1, ((0, 0), (1, 0), (1, 1))),
+            # Wrong closers still decrement stack level.
+            TestInfo('{)(]\n',
+                     0, 5, ']', None, ((0, 0), (0, 1), (2, 0), (2, 1), (4, 0))),
+            # Character after backslash.
+            TestInfo(':\\a\n', 0, 4, '\\a', None, ((0, 0),)),
+            TestInfo('\n', 0, 0, '', None, ((0, 0),)),
+            )
+
+        for test in tests:
+            with self.subTest(string=test.string):
+                setcode(test.string)
+                study()
+                eq(p.study_level, 2)
+                eq(p.stmt_start, test.start)
+                eq(p.stmt_end, test.end)
+                eq(p.lastch, test.lastch)
+                eq(p.lastopenbracketpos, test.openbracket)
+                eq(p.stmt_bracketing, test.bracketing)
+
+        # Called again, just returns without reprocessing.
+        self.assertIsNone(study())
+
+    def test_get_num_lines_in_stmt(self):
+        eq = self.assertEqual
+        p = self.parser
+        setcode = p.set_code
+        getlines = p.get_num_lines_in_stmt
+
+        TestInfo = namedtuple('TestInfo', ['string', 'lines'])
+        tests = (
+            TestInfo('[x for x in a]\n', 1),      # Closed on one line.
+            TestInfo('[x\nfor x in a\n', 2),      # Not closed.
+            TestInfo('[x\\\nfor x in a\\\n', 2),  # "", uneeded backslashes.
+            TestInfo('[x\nfor x in a\n]\n', 3),   # Closed on multi-line.
+            TestInfo('\n"""Docstring comment L1"""\nL2\nL3\nL4\n', 1),
+            TestInfo('\n"""Docstring comment L1\nL2"""\nL3\nL4\n', 1),
+            TestInfo('\n"""Docstring comment L1\\\nL2\\\nL3\\\nL4\\\n', 4),
+            TestInfo('\n\n"""Docstring comment L1\\\nL2\\\nL3\\\nL4\\\n"""\n', 5)
+            )
+
+        # Blank string doesn't have enough elements in goodlines.
+        setcode('')
+        with self.assertRaises(IndexError):
+            getlines()
+
+        for test in tests:
+            with self.subTest(string=test.string):
+                setcode(test.string)
+                eq(getlines(), test.lines)
+
+    def test_compute_bracket_indent(self):
+        eq = self.assertEqual
+        p = self.parser
+        setcode = p.set_code
+        indent = p.compute_bracket_indent
+
+        TestInfo = namedtuple('TestInfo', ['string', 'spaces'])
+        tests = (
+            TestInfo('def function1(self, a,\n', 14),
+            # Characters after bracket.
+            TestInfo('\n    def function1(self, a,\n', 18),
+            TestInfo('\n\tdef function1(self, a,\n', 18),
+            # No characters after bracket.
+            TestInfo('\n    def function1(\n', 8),
+            TestInfo('\n\tdef function1(\n', 8),
+            TestInfo('\n    def function1(  \n', 8),  # Ignore extra spaces.
+            TestInfo('[\n"first item",\n  # Comment line\n    "next item",\n', 0),
+            TestInfo('[\n  "first item",\n  # Comment line\n    "next item",\n', 2),
+            TestInfo('["first item",\n  # Comment line\n    "next item",\n', 1),
+            TestInfo('(\n', 4),
+            TestInfo('(a\n', 1),
+             )
+
+        # Must be C_BRACKET continuation type.
+        setcode('def function1(self, a, b):\n')
+        with self.assertRaises(AssertionError):
+            indent()
+
+        for test in tests:
+            setcode(test.string)
+            eq(indent(), test.spaces)
+
+    def test_compute_backslash_indent(self):
+        eq = self.assertEqual
+        p = self.parser
+        setcode = p.set_code
+        indent = p.compute_backslash_indent
+
+        # Must be C_BACKSLASH continuation type.
+        errors = (('def function1(self, a, b\\\n'),  # Bracket.
+                  ('    """ (\\\n'),                 # Docstring.
+                  ('a = #\\\n'),                     # Inline comment.
+                  )
+        for string in errors:
+            with self.subTest(string=string):
+                setcode(string)
+                with self.assertRaises(AssertionError):
+                    indent()
+
+        TestInfo = namedtuple('TestInfo', ('string', 'spaces'))
+        tests = (TestInfo('a = (1 + 2) - 5 *\\\n', 4),
+                 TestInfo('a = 1 + 2 - 5 *\\\n', 4),
+                 TestInfo('    a = 1 + 2 - 5 *\\\n', 8),
+                 TestInfo('  a = "spam"\\\n', 6),
+                 TestInfo('  a = \\\n"a"\\\n', 4),
+                 TestInfo('  a = #\\\n"a"\\\n', 5),
+                 TestInfo('a == \\\n', 2),
+                 TestInfo('a != \\\n', 2),
+                 # Difference between containing = and those not.
+                 TestInfo('\\\n', 2),
+                 TestInfo('    \\\n', 6),
+                 TestInfo('\t\\\n', 6),
+                 TestInfo('a\\\n', 3),
+                 TestInfo('{}\\\n', 4),
+                 TestInfo('(1 + 2) - 5 *\\\n', 3),
+                 )
+        for test in tests:
+            with self.subTest(string=test.string):
+                setcode(test.string)
+                eq(indent(), test.spaces)
+
+    def test_get_base_indent_string(self):
+        eq = self.assertEqual
+        p = self.parser
+        setcode = p.set_code
+        baseindent = p.get_base_indent_string
+
+        TestInfo = namedtuple('TestInfo', ['string', 'indent'])
+        tests = (TestInfo('', ''),
+                 TestInfo('def a():\n', ''),
+                 TestInfo('\tdef a():\n', '\t'),
+                 TestInfo('    def a():\n', '    '),
+                 TestInfo('    def a(\n', '    '),
+                 TestInfo('\t\n    def a(\n', '    '),
+                 TestInfo('\t\n    # Comment.\n', '    '),
+                 )
+
+        for test in tests:
+            with self.subTest(string=test.string):
+                setcode(test.string)
+                eq(baseindent(), test.indent)
+
+    def test_is_block_opener(self):
+        yes = self.assertTrue
+        no = self.assertFalse
+        p = self.parser
+        setcode = p.set_code
+        opener = p.is_block_opener
+
+        TestInfo = namedtuple('TestInfo', ['string', 'assert_'])
+        tests = (
+            TestInfo('def a():\n', yes),
+            TestInfo('\n   def function1(self, a,\n                 b):\n', yes),
+            TestInfo(':\n', yes),
+            TestInfo('a:\n', yes),
+            TestInfo('):\n', yes),
+            TestInfo('(:\n', yes),
+            TestInfo('":\n', no),
+            TestInfo('\n   def function1(self, a,\n', no),
+            TestInfo('def function1(self, a):\n    pass\n', no),
+            TestInfo('# A comment:\n', no),
+            TestInfo('"""A docstring:\n', no),
+            TestInfo('"""A docstring:\n', no),
+            )
+
+        for test in tests:
+            with self.subTest(string=test.string):
+                setcode(test.string)
+                test.assert_(opener())
+
+    def test_is_block_closer(self):
+        yes = self.assertTrue
+        no = self.assertFalse
+        p = self.parser
+        setcode = p.set_code
+        closer = p.is_block_closer
+
+        TestInfo = namedtuple('TestInfo', ['string', 'assert_'])
+        tests = (
+            TestInfo('return\n', yes),
+            TestInfo('\tbreak\n', yes),
+            TestInfo('  continue\n', yes),
+            TestInfo('     raise\n', yes),
+            TestInfo('pass    \n', yes),
+            TestInfo('pass\t\n', yes),
+            TestInfo('return #\n', yes),
+            TestInfo('raised\n', no),
+            TestInfo('returning\n', no),
+            TestInfo('# return\n', no),
+            TestInfo('"""break\n', no),
+            TestInfo('"continue\n', no),
+            TestInfo('def function1(self, a):\n    pass\n', yes),
+            )
+
+        for test in tests:
+            with self.subTest(string=test.string):
+                setcode(test.string)
+                test.assert_(closer())
+
+    def test_get_last_stmt_bracketing(self):
+        eq = self.assertEqual
+        p = self.parser
+        setcode = p.set_code
+        bracketing = p.get_last_stmt_bracketing
+
+        TestInfo = namedtuple('TestInfo', ['string', 'bracket'])
+        tests = (
+            TestInfo('', ((0, 0),)),
+            TestInfo('a\n', ((0, 0),)),
+            TestInfo('()()\n', ((0, 0), (0, 1), (2, 0), (2, 1), (4, 0))),
+            TestInfo('(\n)()\n', ((0, 0), (0, 1), (3, 0), (3, 1), (5, 0))),
+            TestInfo('()\n()\n', ((3, 0), (3, 1), (5, 0))),
+            TestInfo('()(\n)\n', ((0, 0), (0, 1), (2, 0), (2, 1), (5, 0))),
+            TestInfo('(())\n', ((0, 0), (0, 1), (1, 2), (3, 1), (4, 0))),
+            TestInfo('(\n())\n', ((0, 0), (0, 1), (2, 2), (4, 1), (5, 0))),
+            # Same as matched test.
+            TestInfo('{)(]\n', ((0, 0), (0, 1), (2, 0), (2, 1), (4, 0))),
+            TestInfo('(((())\n',
+                     ((0, 0), (0, 1), (1, 2), (2, 3), (3, 4), (5, 3), (6, 2))),
+            )
+
+        for test in tests:
+            with self.subTest(string=test.string):
+                setcode(test.string)
+                eq(bracketing(), test.bracket)
+
+
+if __name__ == '__main__':
+    unittest.main(verbosity=2)
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/test_query.py Python-3.6.5/Lib/idlelib/idle_test/test_query.py
--- Python-3.6.3/Lib/idlelib/idle_test/test_query.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/idle_test/test_query.py	2018-03-28 11:19:31.000000000 +0200
@@ -162,7 +162,7 @@ class HelpsourceBrowsefileTest(unittest.
         # Path is widget entry, either '' or something.
         # Func return is file dialog return, either '' or something.
         # Func return should override widget entry.
-        # We need all 4 combination to test all (most) code paths.
+        # We need all 4 combinations to test all (most) code paths.
         for path, func, result in (
                 ('', lambda a,b,c:'', ''),
                 ('', lambda a,b,c: __file__, __file__),
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/test_replace.py Python-3.6.5/Lib/idlelib/idle_test/test_replace.py
--- Python-3.6.3/Lib/idlelib/idle_test/test_replace.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/idle_test/test_replace.py	2018-03-28 11:19:31.000000000 +0200
@@ -74,14 +74,14 @@ class ReplaceDialogTest(unittest.TestCas
         replace()
         equal(text.get('1.8', '1.12'), 'asdf')
 
-        # dont "match word" case
+        # don't "match word" case
         text.mark_set('insert', '1.0')
         pv.set('is')
         rv.set('hello')
         replace()
         equal(text.get('1.2', '1.7'), 'hello')
 
-        # dont "match case" case
+        # don't "match case" case
         pv.set('string')
         rv.set('world')
         replace()
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/test_run.py Python-3.6.5/Lib/idlelib/idle_test/test_run.py
--- Python-3.6.3/Lib/idlelib/idle_test/test_run.py	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/Lib/idlelib/idle_test/test_run.py	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,35 @@
+import unittest
+from unittest import mock
+
+from test.support import captured_stderr
+import idlelib.run as idlerun
+
+
+class RunTest(unittest.TestCase):
+    def test_print_exception_unhashable(self):
+        class UnhashableException(Exception):
+            def __eq__(self, other):
+                return True
+
+        ex1 = UnhashableException('ex1')
+        ex2 = UnhashableException('ex2')
+        try:
+            raise ex2 from ex1
+        except UnhashableException:
+            try:
+                raise ex1
+            except UnhashableException:
+                with captured_stderr() as output:
+                    with mock.patch.object(idlerun,
+                                           'cleanup_traceback') as ct:
+                        ct.side_effect = lambda t, e: t
+                        idlerun.print_exception()
+
+        tb = output.getvalue().strip().splitlines()
+        self.assertEqual(11, len(tb))
+        self.assertIn('UnhashableException: ex2', tb[3])
+        self.assertIn('UnhashableException: ex1', tb[10])
+
+
+if __name__ == '__main__':
+    unittest.main(verbosity=2)
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/test_search.py Python-3.6.5/Lib/idlelib/idle_test/test_search.py
--- Python-3.6.3/Lib/idlelib/idle_test/test_search.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/idle_test/test_search.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,7 +1,7 @@
 """Test SearchDialog class in idlelib.search.py"""
 
 # Does not currently test the event handler wrappers.
-# A usage test should simulate clicks and check hilighting.
+# A usage test should simulate clicks and check highlighting.
 # Tests need to be coordinated with SearchDialogBase tests
 # to avoid duplication.
 
diff -urpN Python-3.6.3/Lib/idlelib/idle_test/test_textview.py Python-3.6.5/Lib/idlelib/idle_test/test_textview.py
--- Python-3.6.3/Lib/idlelib/idle_test/test_textview.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/idle_test/test_textview.py	2018-03-28 11:19:31.000000000 +0200
@@ -112,7 +112,7 @@ class ViewFunctionTest(unittest.TestCase
         view.ok()
 
     def test_view_file(self):
-        view = tv.view_file(root, 'Title', __file__, modal=False)
+        view = tv.view_file(root, 'Title', __file__, 'ascii', modal=False)
         self.assertIsInstance(view, tv.ViewWindow)
         self.assertIsInstance(view.viewframe, tv.ViewFrame)
         get = view.viewframe.textframe.text.get
@@ -121,7 +121,7 @@ class ViewFunctionTest(unittest.TestCase
 
     def test_bad_file(self):
         # Mock showerror will be used; view_file will return None.
-        view = tv.view_file(root, 'Title', 'abc.xyz', modal=False)
+        view = tv.view_file(root, 'Title', 'abc.xyz', 'ascii', modal=False)
         self.assertIsNone(view)
         self.assertEqual(tv.showerror.title, 'File Load Error')
 
@@ -161,7 +161,8 @@ class ButtonClickTest(unittest.TestCase)
     def test_view_file_bind_with_button(self):
         def _command():
             self.called = True
-            self.view = tv.view_file(root, 'TITLE_FILE', __file__, _utest=True)
+            self.view = tv.view_file(root, 'TITLE_FILE', __file__,
+                                     encoding='ascii', _utest=True)
         button = Button(root, text='BUTTON', command=_command)
         button.invoke()
         self.addCleanup(button.destroy)
diff -urpN Python-3.6.3/Lib/idlelib/iomenu.py Python-3.6.5/Lib/idlelib/iomenu.py
--- Python-3.6.3/Lib/idlelib/iomenu.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/iomenu.py	2018-03-28 11:19:31.000000000 +0200
@@ -487,11 +487,11 @@ class IOBinding:
     opendialog = None
     savedialog = None
 
-    filetypes = [
+    filetypes = (
         ("Python files", "*.py *.pyw", "TEXT"),
         ("Text files", "*.txt", "TEXT"),
         ("All files", "*"),
-        ]
+        )
 
     defaultextension = '.py' if sys.platform == 'darwin' else ''
 
diff -urpN Python-3.6.3/Lib/idlelib/mainmenu.py Python-3.6.5/Lib/idlelib/mainmenu.py
--- Python-3.6.3/Lib/idlelib/mainmenu.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/mainmenu.py	2018-03-28 11:19:31.000000000 +0200
@@ -25,7 +25,7 @@ menudefs = [
    ('_New File', '<<open-new-window>>'),
    ('_Open...', '<<open-window-from-file>>'),
    ('Open _Module...', '<<open-module>>'),
-   ('Class _Browser', '<<open-class-browser>>'),
+   ('Module _Browser', '<<open-class-browser>>'),
    ('_Path Browser', '<<open-path-browser>>'),
    None,
    ('_Save', '<<save-window>>'),
diff -urpN Python-3.6.3/Lib/idlelib/paragraph.py Python-3.6.5/Lib/idlelib/paragraph.py
--- Python-3.6.3/Lib/idlelib/paragraph.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/paragraph.py	2018-03-28 11:19:31.000000000 +0200
@@ -158,7 +158,7 @@ def reformat_comment(data, limit, commen
     newdata = reformat_paragraph(data, format_width)
     # re-split and re-insert the comment header.
     newdata = newdata.split("\n")
-    # If the block ends in a \n, we dont want the comment prefix
+    # If the block ends in a \n, we don't want the comment prefix
     # inserted after it. (Im not sure it makes sense to reformat a
     # comment block that is not made of complete lines, but whatever!)
     # Can't think of a clean solution, so we hack away
diff -urpN Python-3.6.3/Lib/idlelib/pathbrowser.py Python-3.6.5/Lib/idlelib/pathbrowser.py
--- Python-3.6.3/Lib/idlelib/pathbrowser.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/pathbrowser.py	2018-03-28 11:19:31.000000000 +0200
@@ -2,19 +2,20 @@ import importlib.machinery
 import os
 import sys
 
-from idlelib.browser import ClassBrowser, ModuleBrowserTreeItem
-from idlelib.pyshell import PyShellFileList
+from idlelib.browser import ModuleBrowser, ModuleBrowserTreeItem
 from idlelib.tree import TreeItem
 
 
-class PathBrowser(ClassBrowser):
+class PathBrowser(ModuleBrowser):
 
-    def __init__(self, flist, _htest=False):
+    def __init__(self, master, *, _htest=False, _utest=False):
         """
         _htest - bool, change box location when running htest
         """
+        self.master = master
         self._htest = _htest
-        self.init(flist)
+        self._utest = _utest
+        self.init()
 
     def settitle(self):
         "Set window titles."
@@ -99,8 +100,7 @@ class DirBrowserTreeItem(TreeItem):
 
 
 def _path_browser(parent):  # htest #
-    flist = PyShellFileList(parent)
-    PathBrowser(flist, _htest=True)
+    PathBrowser(parent, _htest=True)
     parent.mainloop()
 
 if __name__ == "__main__":
diff -urpN Python-3.6.3/Lib/idlelib/pyparse.py Python-3.6.5/Lib/idlelib/pyparse.py
--- Python-3.6.3/Lib/idlelib/pyparse.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/pyparse.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,16 +1,23 @@
-from collections.abc import Mapping
+"""Define partial Python code Parser used by editor and hyperparser.
+
+Instances of ParseMap are used with str.translate.
+
+The following bound search and match functions are defined:
+_synchre - start of popular statement;
+_junkre - whitespace or comment line;
+_match_stringre: string, possibly without closer;
+_itemre - line that may have bracket structure start;
+_closere - line that must be followed by dedent.
+_chew_ordinaryre - non-special characters.
+"""
 import re
 import sys
 
-# Reason last stmt is continued (or C_NONE if it's not).
+# Reason last statement is continued (or C_NONE if it's not).
 (C_NONE, C_BACKSLASH, C_STRING_FIRST_LINE,
  C_STRING_NEXT_LINES, C_BRACKET) = range(5)
 
-if 0:   # for throwaway debugging output
-    def dump(*stuff):
-        sys.__stdout__.write(" ".join(map(str, stuff)) + "\n")
-
-# Find what looks like the start of a popular stmt.
+# Find what looks like the start of a popular statement.
 
 _synchre = re.compile(r"""
     ^
@@ -70,7 +77,7 @@ _itemre = re.compile(r"""
     [^\s#\\]    # if we match, m.end()-1 is the interesting char
 """, re.VERBOSE).match
 
-# Match start of stmts that should be followed by a dedent.
+# Match start of statements that should be followed by a dedent.
 
 _closere = re.compile(r"""
     \s*
@@ -93,46 +100,27 @@ _chew_ordinaryre = re.compile(r"""
 """, re.VERBOSE).match
 
 
-class StringTranslatePseudoMapping(Mapping):
-    r"""Utility class to be used with str.translate()
+class ParseMap(dict):
+    r"""Dict subclass that maps anything not in dict to 'x'.
+
+    This is designed to be used with str.translate in study1.
+    Anything not specifically mapped otherwise becomes 'x'.
+    Example: replace everything except whitespace with 'x'.
 
-    This Mapping class wraps a given dict. When a value for a key is
-    requested via __getitem__() or get(), the key is looked up in the
-    given dict. If found there, the value from the dict is returned.
-    Otherwise, the default value given upon initialization is returned.
-
-    This allows using str.translate() to make some replacements, and to
-    replace all characters for which no replacement was specified with
-    a given character instead of leaving them as-is.
-
-    For example, to replace everything except whitespace with 'x':
-
-    >>> whitespace_chars = ' \t\n\r'
-    >>> preserve_dict = {ord(c): ord(c) for c in whitespace_chars}
-    >>> mapping = StringTranslatePseudoMapping(preserve_dict, ord('x'))
-    >>> text = "a + b\tc\nd"
-    >>> text.translate(mapping)
+    >>> keepwhite = ParseMap((ord(c), ord(c)) for c in ' \t\n\r')
+    >>> "a + b\tc\nd".translate(keepwhite)
     'x x x\tx\nx'
     """
-    def __init__(self, non_defaults, default_value):
-        self._non_defaults = non_defaults
-        self._default_value = default_value
-
-        def _get(key, _get=non_defaults.get, _default=default_value):
-            return _get(key, _default)
-        self._get = _get
-
-    def __getitem__(self, item):
-        return self._get(item)
-
-    def __len__(self):
-        return len(self._non_defaults)
+    # Calling this triples access time; see bpo-32940
+    def __missing__(self, key):
+        return 120  # ord('x')
 
-    def __iter__(self):
-        return iter(self._non_defaults)
 
-    def get(self, key, default=None):
-        return self._get(key)
+# Map all ascii to 120 to avoid __missing__ call, then replace some.
+trans = ParseMap.fromkeys(range(128), 120)
+trans.update((ord(c), ord('(')) for c in "({[")  # open brackets => '(';
+trans.update((ord(c), ord(')')) for c in ")}]")  # close brackets => ')'.
+trans.update((ord(c), ord(c)) for c in "\"'\\\n#")  # Keep these.
 
 
 class Parser:
@@ -141,25 +129,26 @@ class Parser:
         self.indentwidth = indentwidth
         self.tabwidth = tabwidth
 
-    def set_str(self, s):
+    def set_code(self, s):
         assert len(s) == 0 or s[-1] == '\n'
-        self.str = s
+        self.code = s
         self.study_level = 0
 
-    # Return index of a good place to begin parsing, as close to the
-    # end of the string as possible.  This will be the start of some
-    # popular stmt like "if" or "def".  Return None if none found:
-    # the caller should pass more prior context then, if possible, or
-    # if not (the entire program text up until the point of interest
-    # has already been tried) pass 0 to set_lo.
-    #
-    # This will be reliable iff given a reliable is_char_in_string
-    # function, meaning that when it says "no", it's absolutely
-    # guaranteed that the char is not in a string.
-
     def find_good_parse_start(self, is_char_in_string=None,
                               _synchre=_synchre):
-        str, pos = self.str, None
+        """
+        Return index of a good place to begin parsing, as close to the
+        end of the string as possible.  This will be the start of some
+        popular stmt like "if" or "def".  Return None if none found:
+        the caller should pass more prior context then, if possible, or
+        if not (the entire program text up until the point of interest
+        has already been tried) pass 0 to set_lo().
+
+        This will be reliable iff given a reliable is_char_in_string()
+        function, meaning that when it says "no", it's absolutely
+        guaranteed that the char is not in a string.
+        """
+        code, pos = self.code, None
 
         if not is_char_in_string:
             # no clue -- make the caller pass everything
@@ -168,13 +157,13 @@ class Parser:
         # Peek back from the end for a good place to start,
         # but don't try too often; pos will be left None, or
         # bumped to a legitimate synch point.
-        limit = len(str)
+        limit = len(code)
         for tries in range(5):
-            i = str.rfind(":\n", 0, limit)
+            i = code.rfind(":\n", 0, limit)
             if i < 0:
                 break
-            i = str.rfind('\n', 0, i) + 1  # start of colon line
-            m = _synchre(str, i, limit)
+            i = code.rfind('\n', 0, i) + 1  # start of colon line (-1+1=0)
+            m = _synchre(code, i, limit)
             if m and not is_char_in_string(m.start()):
                 pos = m.start()
                 break
@@ -188,7 +177,7 @@ class Parser:
             # going to have to parse the whole thing to be sure, so
             # give it one last try from the start, but stop wasting
             # time here regardless of the outcome.
-            m = _synchre(str)
+            m = _synchre(code)
             if m and not is_char_in_string(m.start()):
                 pos = m.start()
             return pos
@@ -197,7 +186,7 @@ class Parser:
         # matches.
         i = pos + 1
         while 1:
-            m = _synchre(str, i)
+            m = _synchre(code, i)
             if m:
                 s, i = m.span()
                 if not is_char_in_string(s):
@@ -206,29 +195,22 @@ class Parser:
                 break
         return pos
 
-    # Throw away the start of the string.  Intended to be called with
-    # find_good_parse_start's result.
-
     def set_lo(self, lo):
-        assert lo == 0 or self.str[lo-1] == '\n'
-        if lo > 0:
-            self.str = self.str[lo:]
+        """ Throw away the start of the string.
 
-    # Build a translation table to map uninteresting chars to 'x', open
-    # brackets to '(', close brackets to ')' while preserving quotes,
-    # backslashes, newlines and hashes. This is to be passed to
-    # str.translate() in _study1().
-    _tran = {}
-    _tran.update((ord(c), ord('(')) for c in "({[")
-    _tran.update((ord(c), ord(')')) for c in ")}]")
-    _tran.update((ord(c), ord(c)) for c in "\"'\\\n#")
-    _tran = StringTranslatePseudoMapping(_tran, default_value=ord('x'))
-
-    # As quickly as humanly possible <wink>, find the line numbers (0-
-    # based) of the non-continuation lines.
-    # Creates self.{goodlines, continuation}.
+        Intended to be called with the result of find_good_parse_start().
+        """
+        assert lo == 0 or self.code[lo-1] == '\n'
+        if lo > 0:
+            self.code = self.code[lo:]
 
     def _study1(self):
+        """Find the line numbers of non-continuation lines.
+
+        As quickly as humanly possible <wink>, find the line numbers (0-
+        based) of the non-continuation lines.
+        Creates self.{goodlines, continuation}.
+        """
         if self.study_level >= 1:
             return
         self.study_level = 1
@@ -237,15 +219,15 @@ class Parser:
         # to "(", all close brackets to ")", then collapse runs of
         # uninteresting characters.  This can cut the number of chars
         # by a factor of 10-40, and so greatly speed the following loop.
-        str = self.str
-        str = str.translate(self._tran)
-        str = str.replace('xxxxxxxx', 'x')
-        str = str.replace('xxxx', 'x')
-        str = str.replace('xx', 'x')
-        str = str.replace('xx', 'x')
-        str = str.replace('\nx', '\n')
-        # note that replacing x\n with \n would be incorrect, because
-        # x may be preceded by a backslash
+        code = self.code
+        code = code.translate(trans)
+        code = code.replace('xxxxxxxx', 'x')
+        code = code.replace('xxxx', 'x')
+        code = code.replace('xx', 'x')
+        code = code.replace('xx', 'x')
+        code = code.replace('\nx', '\n')
+        # Replacing x\n with \n would be incorrect because
+        # x may be preceded by a backslash.
 
         # March over the squashed version of the program, accumulating
         # the line numbers of non-continued stmts, and determining
@@ -254,9 +236,9 @@ class Parser:
         level = lno = 0     # level is nesting level; lno is line number
         self.goodlines = goodlines = [0]
         push_good = goodlines.append
-        i, n = 0, len(str)
+        i, n = 0, len(code)
         while i < n:
-            ch = str[i]
+            ch = code[i]
             i = i+1
 
             # cases are checked in decreasing order of frequency
@@ -283,19 +265,19 @@ class Parser:
             if ch == '"' or ch == "'":
                 # consume the string
                 quote = ch
-                if str[i-1:i+2] == quote * 3:
+                if code[i-1:i+2] == quote * 3:
                     quote = quote * 3
                 firstlno = lno
                 w = len(quote) - 1
                 i = i+w
                 while i < n:
-                    ch = str[i]
+                    ch = code[i]
                     i = i+1
 
                     if ch == 'x':
                         continue
 
-                    if str[i-1:i+w] == quote:
+                    if code[i-1:i+w] == quote:
                         i = i+w
                         break
 
@@ -310,7 +292,7 @@ class Parser:
 
                     if ch == '\\':
                         assert i < n
-                        if str[i] == '\n':
+                        if code[i] == '\n':
                             lno = lno + 1
                         i = i+1
                         continue
@@ -321,7 +303,7 @@ class Parser:
                     # didn't break out of the loop, so we're still
                     # inside a string
                     if (lno - 1) == firstlno:
-                        # before the previous \n in str, we were in the first
+                        # before the previous \n in code, we were in the first
                         # line of the string
                         continuation = C_STRING_FIRST_LINE
                     else:
@@ -330,13 +312,13 @@ class Parser:
 
             if ch == '#':
                 # consume the comment
-                i = str.find('\n', i)
+                i = code.find('\n', i)
                 assert i >= 0
                 continue
 
             assert ch == '\\'
             assert i < n
-            if str[i] == '\n':
+            if code[i] == '\n':
                 lno = lno + 1
                 if i+1 == n:
                     continuation = C_BACKSLASH
@@ -360,44 +342,45 @@ class Parser:
         self._study1()
         return self.continuation
 
-    # study1 was sufficient to determine the continuation status,
-    # but doing more requires looking at every character.  study2
-    # does this for the last interesting statement in the block.
-    # Creates:
-    #     self.stmt_start, stmt_end
-    #         slice indices of last interesting stmt
-    #     self.stmt_bracketing
-    #         the bracketing structure of the last interesting stmt;
-    #         for example, for the statement "say(boo) or die", stmt_bracketing
-    #         will be [(0, 0), (3, 1), (8, 0)]. Strings and comments are
-    #         treated as brackets, for the matter.
-    #     self.lastch
-    #         last non-whitespace character before optional trailing
-    #         comment
-    #     self.lastopenbracketpos
-    #         if continuation is C_BRACKET, index of last open bracket
-
     def _study2(self):
+        """
+        study1 was sufficient to determine the continuation status,
+        but doing more requires looking at every character.  study2
+        does this for the last interesting statement in the block.
+        Creates:
+            self.stmt_start, stmt_end
+                slice indices of last interesting stmt
+            self.stmt_bracketing
+                the bracketing structure of the last interesting stmt; for
+                example, for the statement "say(boo) or die",
+                stmt_bracketing will be ((0, 0), (0, 1), (2, 0), (2, 1),
+                (4, 0)). Strings and comments are treated as brackets, for
+                the matter.
+            self.lastch
+                last interesting character before optional trailing comment
+            self.lastopenbracketpos
+                if continuation is C_BRACKET, index of last open bracket
+        """
         if self.study_level >= 2:
             return
         self._study1()
         self.study_level = 2
 
         # Set p and q to slice indices of last interesting stmt.
-        str, goodlines = self.str, self.goodlines
-        i = len(goodlines) - 1
-        p = len(str)    # index of newest line
+        code, goodlines = self.code, self.goodlines
+        i = len(goodlines) - 1  # Index of newest line.
+        p = len(code)  # End of goodlines[i]
         while i:
             assert p
-            # p is the index of the stmt at line number goodlines[i].
+            # Make p be the index of the stmt at line number goodlines[i].
             # Move p back to the stmt at line number goodlines[i-1].
             q = p
             for nothing in range(goodlines[i-1], goodlines[i]):
                 # tricky: sets p to 0 if no preceding newline
-                p = str.rfind('\n', 0, p-1) + 1
-            # The stmt str[p:q] isn't a continuation, but may be blank
+                p = code.rfind('\n', 0, p-1) + 1
+            # The stmt code[p:q] isn't a continuation, but may be blank
             # or a non-indenting comment line.
-            if  _junkre(str, p):
+            if  _junkre(code, p):
                 i = i-1
             else:
                 break
@@ -415,21 +398,21 @@ class Parser:
         bracketing = [(p, 0)]
         while p < q:
             # suck up all except ()[]{}'"#\\
-            m = _chew_ordinaryre(str, p, q)
+            m = _chew_ordinaryre(code, p, q)
             if m:
                 # we skipped at least one boring char
                 newp = m.end()
                 # back up over totally boring whitespace
                 i = newp - 1    # index of last boring char
-                while i >= p and str[i] in " \t\n":
+                while i >= p and code[i] in " \t\n":
                     i = i-1
                 if i >= p:
-                    lastch = str[i]
+                    lastch = code[i]
                 p = newp
                 if p >= q:
                     break
 
-            ch = str[p]
+            ch = code[p]
 
             if ch in "([{":
                 push_stack(p)
@@ -456,14 +439,14 @@ class Parser:
                 # have to.
                 bracketing.append((p, len(stack)+1))
                 lastch = ch
-                p = _match_stringre(str, p, q).end()
+                p = _match_stringre(code, p, q).end()
                 bracketing.append((p, len(stack)))
                 continue
 
             if ch == '#':
                 # consume comment and trailing newline
                 bracketing.append((p, len(stack)+1))
-                p = str.find('\n', p, q) + 1
+                p = code.find('\n', p, q) + 1
                 assert p > 0
                 bracketing.append((p, len(stack)))
                 continue
@@ -471,76 +454,78 @@ class Parser:
             assert ch == '\\'
             p = p+1     # beyond backslash
             assert p < q
-            if str[p] != '\n':
+            if code[p] != '\n':
                 # the program is invalid, but can't complain
-                lastch = ch + str[p]
+                lastch = ch + code[p]
             p = p+1     # beyond escaped char
 
         # end while p < q:
 
         self.lastch = lastch
-        if stack:
-            self.lastopenbracketpos = stack[-1]
+        self.lastopenbracketpos = stack[-1] if stack else None
         self.stmt_bracketing = tuple(bracketing)
 
-    # Assuming continuation is C_BRACKET, return the number
-    # of spaces the next line should be indented.
-
     def compute_bracket_indent(self):
+        """Return number of spaces the next line should be indented.
+
+        Line continuation must be C_BRACKET.
+        """
         self._study2()
         assert self.continuation == C_BRACKET
         j = self.lastopenbracketpos
-        str = self.str
-        n = len(str)
-        origi = i = str.rfind('\n', 0, j) + 1
+        code = self.code
+        n = len(code)
+        origi = i = code.rfind('\n', 0, j) + 1
         j = j+1     # one beyond open bracket
         # find first list item; set i to start of its line
         while j < n:
-            m = _itemre(str, j)
+            m = _itemre(code, j)
             if m:
                 j = m.end() - 1     # index of first interesting char
                 extra = 0
                 break
             else:
                 # this line is junk; advance to next line
-                i = j = str.find('\n', j) + 1
+                i = j = code.find('\n', j) + 1
         else:
             # nothing interesting follows the bracket;
             # reproduce the bracket line's indentation + a level
             j = i = origi
-            while str[j] in " \t":
+            while code[j] in " \t":
                 j = j+1
             extra = self.indentwidth
-        return len(str[i:j].expandtabs(self.tabwidth)) + extra
-
-    # Return number of physical lines in last stmt (whether or not
-    # it's an interesting stmt!  this is intended to be called when
-    # continuation is C_BACKSLASH).
+        return len(code[i:j].expandtabs(self.tabwidth)) + extra
 
     def get_num_lines_in_stmt(self):
+        """Return number of physical lines in last stmt.
+
+        The statement doesn't have to be an interesting statement.  This is
+        intended to be called when continuation is C_BACKSLASH.
+        """
         self._study1()
         goodlines = self.goodlines
         return goodlines[-1] - goodlines[-2]
 
-    # Assuming continuation is C_BACKSLASH, return the number of spaces
-    # the next line should be indented.  Also assuming the new line is
-    # the first one following the initial line of the stmt.
-
     def compute_backslash_indent(self):
+        """Return number of spaces the next line should be indented.
+
+        Line continuation must be C_BACKSLASH.  Also assume that the new
+        line is the first one following the initial line of the stmt.
+        """
         self._study2()
         assert self.continuation == C_BACKSLASH
-        str = self.str
+        code = self.code
         i = self.stmt_start
-        while str[i] in " \t":
+        while code[i] in " \t":
             i = i+1
         startpos = i
 
         # See whether the initial line starts an assignment stmt; i.e.,
         # look for an = operator
-        endpos = str.find('\n', startpos) + 1
+        endpos = code.find('\n', startpos) + 1
         found = level = 0
         while i < endpos:
-            ch = str[i]
+            ch = code[i]
             if ch in "([{":
                 level = level + 1
                 i = i+1
@@ -549,12 +534,14 @@ class Parser:
                     level = level - 1
                 i = i+1
             elif ch == '"' or ch == "'":
-                i = _match_stringre(str, i, endpos).end()
+                i = _match_stringre(code, i, endpos).end()
             elif ch == '#':
+                # This line is unreachable because the # makes a comment of
+                # everything after it.
                 break
             elif level == 0 and ch == '=' and \
-                   (i == 0 or str[i-1] not in "=<>!") and \
-                   str[i+1] != '=':
+                   (i == 0 or code[i-1] not in "=<>!") and \
+                   code[i+1] != '=':
                 found = 1
                 break
             else:
@@ -564,54 +551,49 @@ class Parser:
             # found a legit =, but it may be the last interesting
             # thing on the line
             i = i+1     # move beyond the =
-            found = re.match(r"\s*\\", str[i:endpos]) is None
+            found = re.match(r"\s*\\", code[i:endpos]) is None
 
         if not found:
             # oh well ... settle for moving beyond the first chunk
             # of non-whitespace chars
             i = startpos
-            while str[i] not in " \t\n":
+            while code[i] not in " \t\n":
                 i = i+1
 
-        return len(str[self.stmt_start:i].expandtabs(\
+        return len(code[self.stmt_start:i].expandtabs(\
                                      self.tabwidth)) + 1
 
-    # Return the leading whitespace on the initial line of the last
-    # interesting stmt.
-
     def get_base_indent_string(self):
+        """Return the leading whitespace on the initial line of the last
+        interesting stmt.
+        """
         self._study2()
         i, n = self.stmt_start, self.stmt_end
         j = i
-        str = self.str
-        while j < n and str[j] in " \t":
+        code = self.code
+        while j < n and code[j] in " \t":
             j = j + 1
-        return str[i:j]
-
-    # Did the last interesting stmt open a block?
+        return code[i:j]
 
     def is_block_opener(self):
+        "Return True if the last interesting statemtent opens a block."
         self._study2()
         return self.lastch == ':'
 
-    # Did the last interesting stmt close a block?
-
     def is_block_closer(self):
+        "Return True if the last interesting statement closes a block."
         self._study2()
-        return _closere(self.str, self.stmt_start) is not None
+        return _closere(self.code, self.stmt_start) is not None
 
-    # index of last open bracket ({[, or None if none
-    lastopenbracketpos = None
+    def get_last_stmt_bracketing(self):
+        """Return bracketing structure of the last interesting statement.
 
-    def get_last_open_bracket_pos(self):
+        The returned tuple is in the format defined in _study2().
+        """
         self._study2()
-        return self.lastopenbracketpos
+        return self.stmt_bracketing
 
-    # the structure of the bracketing of the last interesting statement,
-    # in the format defined in _study2, or None if the text didn't contain
-    # anything
-    stmt_bracketing = None
 
-    def get_last_stmt_bracketing(self):
-        self._study2()
-        return self.stmt_bracketing
+if __name__ == '__main__':  #pragma: nocover
+    import unittest
+    unittest.main('idlelib.idle_test.test_pyparse', verbosity=2)
diff -urpN Python-3.6.3/Lib/idlelib/pyshell.py Python-3.6.5/Lib/idlelib/pyshell.py
--- Python-3.6.3/Lib/idlelib/pyshell.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/pyshell.py	2018-03-28 11:19:31.000000000 +0200
@@ -12,6 +12,8 @@ import tkinter.messagebox as tkMessageBo
 if TkVersion < 8.5:
     root = Tk()  # otherwise create root in main
     root.withdraw()
+    from idlelib.run import fix_scaling
+    fix_scaling(root)
     tkMessageBox.showerror("Idle Cannot Start",
             "Idle requires tcl/tk 8.5+, not %s." % TkVersion,
             parent=root)
@@ -633,6 +635,9 @@ class ModifiedInterpreter(InteractiveInt
         if source is None:
             with tokenize.open(filename) as fp:
                 source = fp.read()
+                if use_subprocess:
+                    source = (f"__file__ = r'''{os.path.abspath(filename)}'''\n"
+                              + source + "\ndel __file__")
         try:
             code = compile(source, filename, "exec")
         except (OverflowError, SyntaxError):
@@ -855,15 +860,17 @@ class PyShell(OutputWindow):
             fixwordbreaks(root)
             root.withdraw()
             flist = PyShellFileList(root)
-        #
+
         OutputWindow.__init__(self, flist, None, None)
-        #
-##        self.config(usetabs=1, indentwidth=8, context_use_ps1=1)
+
         self.usetabs = True
         # indentwidth must be 8 when using tabs.  See note in EditorWindow:
         self.indentwidth = 8
-        self.context_use_ps1 = True
-        #
+
+        self.sys_ps1 = sys.ps1 if hasattr(sys, 'ps1') else '>>> '
+        self.prompt_last_line = self.sys_ps1.split('\n')[-1]
+        self.prompt = self.sys_ps1  # Changes when debug active
+
         text = self.text
         text.configure(wrap="char")
         text.bind("<<newline-and-indent>>", self.enter_callback)
@@ -876,7 +883,7 @@ class PyShell(OutputWindow):
         if use_subprocess:
             text.bind("<<view-restart>>", self.view_restart_mark)
             text.bind("<<restart-shell>>", self.restart_shell)
-        #
+
         self.save_stdout = sys.stdout
         self.save_stderr = sys.stderr
         self.save_stdin = sys.stdin
@@ -949,7 +956,7 @@ class PyShell(OutputWindow):
                 debugger_r.close_remote_debugger(self.interp.rpcclt)
             self.resetoutput()
             self.console.write("[DEBUG OFF]\n")
-            sys.ps1 = ">>> "
+            self.prompt = self.sys_ps1
             self.showprompt()
         self.set_debugger_indicator()
 
@@ -961,7 +968,7 @@ class PyShell(OutputWindow):
             dbg_gui = debugger.Debugger(self)
         self.interp.setdebugger(dbg_gui)
         dbg_gui.load_breakpoints()
-        sys.ps1 = "[DEBUG ON]\n>>> "
+        self.prompt = "[DEBUG ON]\n" + self.sys_ps1
         self.showprompt()
         self.set_debugger_indicator()
 
@@ -1246,11 +1253,7 @@ class PyShell(OutputWindow):
 
     def showprompt(self):
         self.resetoutput()
-        try:
-            s = str(sys.ps1)
-        except:
-            s = ""
-        self.console.write(s)
+        self.console.write(self.prompt)
         self.text.mark_set("insert", "end-1c")
         self.set_line_and_column()
         self.io.reset_undo()
@@ -1457,6 +1460,8 @@ def main():
         NoDefaultRoot()
     root = Tk(className="Idle")
     root.withdraw()
+    from idlelib.run import fix_scaling
+    fix_scaling(root)
 
     # set application icon
     icondir = os.path.join(os.path.dirname(__file__), 'Icons')
diff -urpN Python-3.6.3/Lib/idlelib/run.py Python-3.6.5/Lib/idlelib/run.py
--- Python-3.6.3/Lib/idlelib/run.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/run.py	2018-03-28 11:19:31.000000000 +0200
@@ -134,13 +134,17 @@ def main(del_exitfunc=False):
                     # exiting but got an extra KBI? Try again!
                     continue
             try:
-                seq, request = rpc.request_queue.get(block=True, timeout=0.05)
+                request = rpc.request_queue.get(block=True, timeout=0.05)
             except queue.Empty:
+                request = None
+                # Issue 32207: calling handle_tk_events here adds spurious
+                # queue.Empty traceback to event handling exceptions.
+            if request:
+                seq, (method, args, kwargs) = request
+                ret = method(*args, **kwargs)
+                rpc.response_queue.put((seq, ret))
+            else:
                 handle_tk_events()
-                continue
-            method, args, kwargs = request
-            ret = method(*args, **kwargs)
-            rpc.response_queue.put((seq, ret))
         except KeyboardInterrupt:
             if quitting:
                 exit_now = True
@@ -184,6 +188,7 @@ def show_socket_error(err, address):
     import tkinter
     from tkinter.messagebox import showerror
     root = tkinter.Tk()
+    fix_scaling(root)
     root.withdraw()
     msg = f"IDLE's subprocess can't connect to {address[0]}:{address[1]}.\n"\
           f"Fatal OSError #{err.errno}: {err.strerror}.\n"\
@@ -202,16 +207,16 @@ def print_exception():
     seen = set()
 
     def print_exc(typ, exc, tb):
-        seen.add(exc)
+        seen.add(id(exc))
         context = exc.__context__
         cause = exc.__cause__
-        if cause is not None and cause not in seen:
+        if cause is not None and id(cause) not in seen:
             print_exc(type(cause), cause, cause.__traceback__)
             print("\nThe above exception was the direct cause "
                   "of the following exception:\n", file=efile)
         elif (context is not None and
               not exc.__suppress_context__ and
-              context not in seen):
+              id(context) not in seen):
             print_exc(type(context), context, context.__traceback__)
             print("\nDuring handling of the above exception, "
                   "another exception occurred:\n", file=efile)
@@ -277,6 +282,18 @@ def exit():
     sys.exit(0)
 
 
+def fix_scaling(root):
+    """Scale fonts on HiDPI displays."""
+    import tkinter.font
+    scaling = float(root.tk.call('tk', 'scaling'))
+    if scaling > 1.4:
+        for name in tkinter.font.names(root):
+            font = tkinter.font.Font(root=root, name=name, exists=True)
+            size = int(font['size'])
+            if size < 0:
+                font['size'] = round(-0.75*size)
+
+
 class MyRPCServer(rpc.RPCServer):
 
     def handle_error(self, request, client_address):
diff -urpN Python-3.6.3/Lib/idlelib/tabbedpages.py Python-3.6.5/Lib/idlelib/tabbedpages.py
--- Python-3.6.3/Lib/idlelib/tabbedpages.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/tabbedpages.py	1970-01-01 01:00:00.000000000 +0100
@@ -1,498 +0,0 @@
-"""An implementation of tabbed pages using only standard Tkinter.
-
-Originally developed for use in IDLE. Based on tabpage.py.
-
-Classes exported:
-TabbedPageSet -- A Tkinter implementation of a tabbed-page widget.
-TabSet -- A widget containing tabs (buttons) in one or more rows.
-
-"""
-from tkinter import *
-
-class InvalidNameError(Exception): pass
-class AlreadyExistsError(Exception): pass
-
-
-class TabSet(Frame):
-    """A widget containing tabs (buttons) in one or more rows.
-
-    Only one tab may be selected at a time.
-
-    """
-    def __init__(self, page_set, select_command,
-                 tabs=None, n_rows=1, max_tabs_per_row=5,
-                 expand_tabs=False, **kw):
-        """Constructor arguments:
-
-        select_command -- A callable which will be called when a tab is
-        selected. It is called with the name of the selected tab as an
-        argument.
-
-        tabs -- A list of strings, the names of the tabs. Should be specified in
-        the desired tab order. The first tab will be the default and first
-        active tab. If tabs is None or empty, the TabSet will be initialized
-        empty.
-
-        n_rows -- Number of rows of tabs to be shown. If n_rows <= 0 or is
-        None, then the number of rows will be decided by TabSet. See
-        _arrange_tabs() for details.
-
-        max_tabs_per_row -- Used for deciding how many rows of tabs are needed,
-        when the number of rows is not constant. See _arrange_tabs() for
-        details.
-
-        """
-        Frame.__init__(self, page_set, **kw)
-        self.select_command = select_command
-        self.n_rows = n_rows
-        self.max_tabs_per_row = max_tabs_per_row
-        self.expand_tabs = expand_tabs
-        self.page_set = page_set
-
-        self._tabs = {}
-        self._tab2row = {}
-        if tabs:
-            self._tab_names = list(tabs)
-        else:
-            self._tab_names = []
-        self._selected_tab = None
-        self._tab_rows = []
-
-        self.padding_frame = Frame(self, height=2,
-                                   borderwidth=0, relief=FLAT,
-                                   background=self.cget('background'))
-        self.padding_frame.pack(side=TOP, fill=X, expand=False)
-
-        self._arrange_tabs()
-
-    def add_tab(self, tab_name):
-        """Add a new tab with the name given in tab_name."""
-        if not tab_name:
-            raise InvalidNameError("Invalid Tab name: '%s'" % tab_name)
-        if tab_name in self._tab_names:
-            raise AlreadyExistsError("Tab named '%s' already exists" %tab_name)
-
-        self._tab_names.append(tab_name)
-        self._arrange_tabs()
-
-    def remove_tab(self, tab_name):
-        """Remove the tab named <tab_name>"""
-        if not tab_name in self._tab_names:
-            raise KeyError("No such Tab: '%s" % tab_name)
-
-        self._tab_names.remove(tab_name)
-        self._arrange_tabs()
-
-    def set_selected_tab(self, tab_name):
-        """Show the tab named <tab_name> as the selected one"""
-        if tab_name == self._selected_tab:
-            return
-        if tab_name is not None and tab_name not in self._tabs:
-            raise KeyError("No such Tab: '%s" % tab_name)
-
-        # deselect the current selected tab
-        if self._selected_tab is not None:
-            self._tabs[self._selected_tab].set_normal()
-        self._selected_tab = None
-
-        if tab_name is not None:
-            # activate the tab named tab_name
-            self._selected_tab = tab_name
-            tab = self._tabs[tab_name]
-            tab.set_selected()
-            # move the tab row with the selected tab to the bottom
-            tab_row = self._tab2row[tab]
-            tab_row.pack_forget()
-            tab_row.pack(side=TOP, fill=X, expand=0)
-
-    def _add_tab_row(self, tab_names, expand_tabs):
-        if not tab_names:
-            return
-
-        tab_row = Frame(self)
-        tab_row.pack(side=TOP, fill=X, expand=0)
-        self._tab_rows.append(tab_row)
-
-        for tab_name in tab_names:
-            tab = TabSet.TabButton(tab_name, self.select_command,
-                                   tab_row, self)
-            if expand_tabs:
-                tab.pack(side=LEFT, fill=X, expand=True)
-            else:
-                tab.pack(side=LEFT)
-            self._tabs[tab_name] = tab
-            self._tab2row[tab] = tab_row
-
-        # tab is the last one created in the above loop
-        tab.is_last_in_row = True
-
-    def _reset_tab_rows(self):
-        while self._tab_rows:
-            tab_row = self._tab_rows.pop()
-            tab_row.destroy()
-        self._tab2row = {}
-
-    def _arrange_tabs(self):
-        """
-        Arrange the tabs in rows, in the order in which they were added.
-
-        If n_rows >= 1, this will be the number of rows used. Otherwise the
-        number of rows will be calculated according to the number of tabs and
-        max_tabs_per_row. In this case, the number of rows may change when
-        adding/removing tabs.
-
-        """
-        # remove all tabs and rows
-        while self._tabs:
-            self._tabs.popitem()[1].destroy()
-        self._reset_tab_rows()
-
-        if not self._tab_names:
-            return
-
-        if self.n_rows is not None and self.n_rows > 0:
-            n_rows = self.n_rows
-        else:
-            # calculate the required number of rows
-            n_rows = (len(self._tab_names) - 1) // self.max_tabs_per_row + 1
-
-        # not expanding the tabs with more than one row is very ugly
-        expand_tabs = self.expand_tabs or n_rows > 1
-        i = 0 # index in self._tab_names
-        for row_index in range(n_rows):
-            # calculate required number of tabs in this row
-            n_tabs = (len(self._tab_names) - i - 1) // (n_rows - row_index) + 1
-            tab_names = self._tab_names[i:i + n_tabs]
-            i += n_tabs
-            self._add_tab_row(tab_names, expand_tabs)
-
-        # re-select selected tab so it is properly displayed
-        selected = self._selected_tab
-        self.set_selected_tab(None)
-        if selected in self._tab_names:
-            self.set_selected_tab(selected)
-
-    class TabButton(Frame):
-        """A simple tab-like widget."""
-
-        bw = 2 # borderwidth
-
-        def __init__(self, name, select_command, tab_row, tab_set):
-            """Constructor arguments:
-
-            name -- The tab's name, which will appear in its button.
-
-            select_command -- The command to be called upon selection of the
-            tab. It is called with the tab's name as an argument.
-
-            """
-            Frame.__init__(self, tab_row, borderwidth=self.bw, relief=RAISED)
-
-            self.name = name
-            self.select_command = select_command
-            self.tab_set = tab_set
-            self.is_last_in_row = False
-
-            self.button = Radiobutton(
-                self, text=name, command=self._select_event,
-                padx=5, pady=1, takefocus=FALSE, indicatoron=FALSE,
-                highlightthickness=0, selectcolor='', borderwidth=0)
-            self.button.pack(side=LEFT, fill=X, expand=True)
-
-            self._init_masks()
-            self.set_normal()
-
-        def _select_event(self, *args):
-            """Event handler for tab selection.
-
-            With TabbedPageSet, this calls TabbedPageSet.change_page, so that
-            selecting a tab changes the page.
-
-            Note that this does -not- call set_selected -- it will be called by
-            TabSet.set_selected_tab, which should be called when whatever the
-            tabs are related to changes.
-
-            """
-            self.select_command(self.name)
-            return
-
-        def set_selected(self):
-            """Assume selected look"""
-            self._place_masks(selected=True)
-
-        def set_normal(self):
-            """Assume normal look"""
-            self._place_masks(selected=False)
-
-        def _init_masks(self):
-            page_set = self.tab_set.page_set
-            background = page_set.pages_frame.cget('background')
-            # mask replaces the middle of the border with the background color
-            self.mask = Frame(page_set, borderwidth=0, relief=FLAT,
-                              background=background)
-            # mskl replaces the bottom-left corner of the border with a normal
-            # left border
-            self.mskl = Frame(page_set, borderwidth=0, relief=FLAT,
-                              background=background)
-            self.mskl.ml = Frame(self.mskl, borderwidth=self.bw,
-                                 relief=RAISED)
-            self.mskl.ml.place(x=0, y=-self.bw,
-                               width=2*self.bw, height=self.bw*4)
-            # mskr replaces the bottom-right corner of the border with a normal
-            # right border
-            self.mskr = Frame(page_set, borderwidth=0, relief=FLAT,
-                              background=background)
-            self.mskr.mr = Frame(self.mskr, borderwidth=self.bw,
-                                 relief=RAISED)
-
-        def _place_masks(self, selected=False):
-            height = self.bw
-            if selected:
-                height += self.bw
-
-            self.mask.place(in_=self,
-                            relx=0.0, x=0,
-                            rely=1.0, y=0,
-                            relwidth=1.0, width=0,
-                            relheight=0.0, height=height)
-
-            self.mskl.place(in_=self,
-                            relx=0.0, x=-self.bw,
-                            rely=1.0, y=0,
-                            relwidth=0.0, width=self.bw,
-                            relheight=0.0, height=height)
-
-            page_set = self.tab_set.page_set
-            if selected and ((not self.is_last_in_row) or
-                             (self.winfo_rootx() + self.winfo_width() <
-                              page_set.winfo_rootx() + page_set.winfo_width())
-                             ):
-                # for a selected tab, if its rightmost edge isn't on the
-                # rightmost edge of the page set, the right mask should be one
-                # borderwidth shorter (vertically)
-                height -= self.bw
-
-            self.mskr.place(in_=self,
-                            relx=1.0, x=0,
-                            rely=1.0, y=0,
-                            relwidth=0.0, width=self.bw,
-                            relheight=0.0, height=height)
-
-            self.mskr.mr.place(x=-self.bw, y=-self.bw,
-                               width=2*self.bw, height=height + self.bw*2)
-
-            # finally, lower the tab set so that all of the frames we just
-            # placed hide it
-            self.tab_set.lower()
-
-
-class TabbedPageSet(Frame):
-    """A Tkinter tabbed-pane widget.
-
-    Constains set of 'pages' (or 'panes') with tabs above for selecting which
-    page is displayed. Only one page will be displayed at a time.
-
-    Pages may be accessed through the 'pages' attribute, which is a dictionary
-    of pages, using the name given as the key. A page is an instance of a
-    subclass of Tk's Frame widget.
-
-    The page widgets will be created (and destroyed when required) by the
-    TabbedPageSet. Do not call the page's pack/place/grid/destroy methods.
-
-    Pages may be added or removed at any time using the add_page() and
-    remove_page() methods.
-
-    """
-
-    class Page(object):
-        """Abstract base class for TabbedPageSet's pages.
-
-        Subclasses must override the _show() and _hide() methods.
-
-        """
-        uses_grid = False
-
-        def __init__(self, page_set):
-            self.frame = Frame(page_set, borderwidth=2, relief=RAISED)
-
-        def _show(self):
-            raise NotImplementedError
-
-        def _hide(self):
-            raise NotImplementedError
-
-    class PageRemove(Page):
-        """Page class using the grid placement manager's "remove" mechanism."""
-        uses_grid = True
-
-        def _show(self):
-            self.frame.grid(row=0, column=0, sticky=NSEW)
-
-        def _hide(self):
-            self.frame.grid_remove()
-
-    class PageLift(Page):
-        """Page class using the grid placement manager's "lift" mechanism."""
-        uses_grid = True
-
-        def __init__(self, page_set):
-            super(TabbedPageSet.PageLift, self).__init__(page_set)
-            self.frame.grid(row=0, column=0, sticky=NSEW)
-            self.frame.lower()
-
-        def _show(self):
-            self.frame.lift()
-
-        def _hide(self):
-            self.frame.lower()
-
-    class PagePackForget(Page):
-        """Page class using the pack placement manager's "forget" mechanism."""
-        def _show(self):
-            self.frame.pack(fill=BOTH, expand=True)
-
-        def _hide(self):
-            self.frame.pack_forget()
-
-    def __init__(self, parent, page_names=None, page_class=PageLift,
-                 n_rows=1, max_tabs_per_row=5, expand_tabs=False,
-                 **kw):
-        """Constructor arguments:
-
-        page_names -- A list of strings, each will be the dictionary key to a
-        page's widget, and the name displayed on the page's tab. Should be
-        specified in the desired page order. The first page will be the default
-        and first active page. If page_names is None or empty, the
-        TabbedPageSet will be initialized empty.
-
-        n_rows, max_tabs_per_row -- Parameters for the TabSet which will
-        manage the tabs. See TabSet's docs for details.
-
-        page_class -- Pages can be shown/hidden using three mechanisms:
-
-        * PageLift - All pages will be rendered one on top of the other. When
-          a page is selected, it will be brought to the top, thus hiding all
-          other pages. Using this method, the TabbedPageSet will not be resized
-          when pages are switched. (It may still be resized when pages are
-          added/removed.)
-
-        * PageRemove - When a page is selected, the currently showing page is
-          hidden, and the new page shown in its place. Using this method, the
-          TabbedPageSet may resize when pages are changed.
-
-        * PagePackForget - This mechanism uses the pack placement manager.
-          When a page is shown it is packed, and when it is hidden it is
-          unpacked (i.e. pack_forget). This mechanism may also cause the
-          TabbedPageSet to resize when the page is changed.
-
-        """
-        Frame.__init__(self, parent, **kw)
-
-        self.page_class = page_class
-        self.pages = {}
-        self._pages_order = []
-        self._current_page = None
-        self._default_page = None
-
-        self.columnconfigure(0, weight=1)
-        self.rowconfigure(1, weight=1)
-
-        self.pages_frame = Frame(self)
-        self.pages_frame.grid(row=1, column=0, sticky=NSEW)
-        if self.page_class.uses_grid:
-            self.pages_frame.columnconfigure(0, weight=1)
-            self.pages_frame.rowconfigure(0, weight=1)
-
-        # the order of the following commands is important
-        self._tab_set = TabSet(self, self.change_page, n_rows=n_rows,
-                               max_tabs_per_row=max_tabs_per_row,
-                               expand_tabs=expand_tabs)
-        if page_names:
-            for name in page_names:
-                self.add_page(name)
-        self._tab_set.grid(row=0, column=0, sticky=NSEW)
-
-        self.change_page(self._default_page)
-
-    def add_page(self, page_name):
-        """Add a new page with the name given in page_name."""
-        if not page_name:
-            raise InvalidNameError("Invalid TabPage name: '%s'" % page_name)
-        if page_name in self.pages:
-            raise AlreadyExistsError(
-                "TabPage named '%s' already exists" % page_name)
-
-        self.pages[page_name] = self.page_class(self.pages_frame)
-        self._pages_order.append(page_name)
-        self._tab_set.add_tab(page_name)
-
-        if len(self.pages) == 1: # adding first page
-            self._default_page = page_name
-            self.change_page(page_name)
-
-    def remove_page(self, page_name):
-        """Destroy the page whose name is given in page_name."""
-        if not page_name in self.pages:
-            raise KeyError("No such TabPage: '%s" % page_name)
-
-        self._pages_order.remove(page_name)
-
-        # handle removing last remaining, default, or currently shown page
-        if len(self._pages_order) > 0:
-            if page_name == self._default_page:
-                # set a new default page
-                self._default_page = self._pages_order[0]
-        else:
-            self._default_page = None
-
-        if page_name == self._current_page:
-            self.change_page(self._default_page)
-
-        self._tab_set.remove_tab(page_name)
-        page = self.pages.pop(page_name)
-        page.frame.destroy()
-
-    def change_page(self, page_name):
-        """Show the page whose name is given in page_name."""
-        if self._current_page == page_name:
-            return
-        if page_name is not None and page_name not in self.pages:
-            raise KeyError("No such TabPage: '%s'" % page_name)
-
-        if self._current_page is not None:
-            self.pages[self._current_page]._hide()
-        self._current_page = None
-
-        if page_name is not None:
-            self._current_page = page_name
-            self.pages[page_name]._show()
-
-        self._tab_set.set_selected_tab(page_name)
-
-
-def _tabbed_pages(parent):  # htest #
-    top=Toplevel(parent)
-    x, y = map(int, parent.geometry().split('+')[1:])
-    top.geometry("+%d+%d" % (x, y + 175))
-    top.title("Test tabbed pages")
-    tabPage=TabbedPageSet(top, page_names=['Foobar','Baz'], n_rows=0,
-                          expand_tabs=False,
-                          )
-    tabPage.pack(side=TOP, expand=TRUE, fill=BOTH)
-    Label(tabPage.pages['Foobar'].frame, text='Foo', pady=20).pack()
-    Label(tabPage.pages['Foobar'].frame, text='Bar', pady=20).pack()
-    Label(tabPage.pages['Baz'].frame, text='Baz').pack()
-    entryPgName=Entry(top)
-    buttonAdd=Button(top, text='Add Page',
-            command=lambda:tabPage.add_page(entryPgName.get()))
-    buttonRemove=Button(top, text='Remove Page',
-            command=lambda:tabPage.remove_page(entryPgName.get()))
-    labelPgName=Label(top, text='name of page to add/remove:')
-    buttonAdd.pack(padx=5, pady=5)
-    buttonRemove.pack(padx=5, pady=5)
-    labelPgName.pack(padx=5)
-    entryPgName.pack(padx=5)
-
-if __name__ == '__main__':
-    from idlelib.idle_test.htest import run
-    run(_tabbed_pages)
diff -urpN Python-3.6.3/Lib/idlelib/textview.py Python-3.6.5/Lib/idlelib/textview.py
--- Python-3.6.3/Lib/idlelib/textview.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/idlelib/textview.py	2018-03-28 11:19:31.000000000 +0200
@@ -57,7 +57,7 @@ class ViewWindow(Toplevel):
     "A simple text viewer dialog for IDLE."
 
     def __init__(self, parent, title, text, modal=True,
-                 _htest=False, _utest=False):
+                 *, _htest=False, _utest=False):
         """Show the given text in a scrollable window with a 'close' button.
 
         If modal is left True, users cannot interact with other windows
@@ -107,7 +107,7 @@ def view_text(parent, title, text, modal
     return ViewWindow(parent, title, text, modal, _utest=_utest)
 
 
-def view_file(parent, title, filename, encoding=None, modal=True, _utest=False):
+def view_file(parent, title, filename, encoding, modal=True, _utest=False):
     """Create text viewer for text in filename.
 
     Return error message if file cannot be read.  Otherwise calls view_text
diff -urpN Python-3.6.3/Lib/importlib/_bootstrap.py Python-3.6.5/Lib/importlib/_bootstrap.py
--- Python-3.6.3/Lib/importlib/_bootstrap.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/importlib/_bootstrap.py	2018-03-28 11:19:31.000000000 +0200
@@ -994,7 +994,7 @@ def _gcd_import(name, package=None, leve
     return _find_and_load(name, _gcd_import)
 
 
-def _handle_fromlist(module, fromlist, import_):
+def _handle_fromlist(module, fromlist, import_, *, recursive=False):
     """Figure out what __import__ should return.
 
     The import_ parameter is a callable which takes the name of module to
@@ -1005,13 +1005,19 @@ def _handle_fromlist(module, fromlist, i
     # The hell that is fromlist ...
     # If a package was imported, try to import stuff from fromlist.
     if hasattr(module, '__path__'):
-        if '*' in fromlist:
-            fromlist = list(fromlist)
-            fromlist.remove('*')
-            if hasattr(module, '__all__'):
-                fromlist.extend(module.__all__)
         for x in fromlist:
-            if not hasattr(module, x):
+            if not isinstance(x, str):
+                if recursive:
+                    where = module.__name__ + '.__all__'
+                else:
+                    where = "``from list''"
+                raise TypeError(f"Item in {where} must be str, "
+                                f"not {type(x).__name__}")
+            elif x == '*':
+                if not recursive and hasattr(module, '__all__'):
+                    _handle_fromlist(module, module.__all__, import_,
+                                     recursive=True)
+            elif not hasattr(module, x):
                 from_name = '{}.{}'.format(module.__name__, x)
                 try:
                     _call_with_frames_removed(import_, from_name)
@@ -1019,7 +1025,8 @@ def _handle_fromlist(module, fromlist, i
                     # Backwards-compatibility dictates we ignore failed
                     # imports triggered by fromlist for modules that don't
                     # exist.
-                    if exc.name == from_name:
+                    if (exc.name == from_name and
+                        sys.modules.get(from_name, _NEEDS_LOADING) is not None):
                         continue
                     raise
     return module
diff -urpN Python-3.6.3/Lib/inspect.py Python-3.6.5/Lib/inspect.py
--- Python-3.6.3/Lib/inspect.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/inspect.py	2018-03-28 11:19:31.000000000 +0200
@@ -505,13 +505,16 @@ def unwrap(func, *, stop=None):
         def _is_wrapper(f):
             return hasattr(f, '__wrapped__') and not stop(f)
     f = func  # remember the original func for error reporting
-    memo = {id(f)} # Memoise by id to tolerate non-hashable objects
+    # Memoise by id to tolerate non-hashable objects, but store objects to
+    # ensure they aren't destroyed, which would allow their IDs to be reused.
+    memo = {id(f): f}
+    recursion_limit = sys.getrecursionlimit()
     while _is_wrapper(func):
         func = func.__wrapped__
         id_func = id(func)
-        if id_func in memo:
+        if (id_func in memo) or (len(memo) >= recursion_limit):
             raise ValueError('wrapper loop when unwrapping {!r}'.format(f))
-        memo.add(id_func)
+        memo[id_func] = func
     return func
 
 # -------------------------------------------------- source code extraction
@@ -2248,7 +2251,8 @@ def _signature_from_callable(obj, *,
                 return sig
             else:
                 sig_params = tuple(sig.parameters.values())
-                assert first_wrapped_param is not sig_params[0]
+                assert (not sig_params or
+                        first_wrapped_param is not sig_params[0])
                 new_params = (first_wrapped_param,) + sig_params
                 return sig.replace(parameters=new_params)
 
diff -urpN Python-3.6.3/Lib/lib2to3/Grammar.txt Python-3.6.5/Lib/lib2to3/Grammar.txt
--- Python-3.6.3/Lib/lib2to3/Grammar.txt	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/lib2to3/Grammar.txt	2018-03-28 11:19:31.000000000 +0200
@@ -1,26 +1,7 @@
 # Grammar for 2to3. This grammar supports Python 2.x and 3.x.
 
-# Note:  Changing the grammar specified in this file will most likely
-#        require corresponding changes in the parser module
-#        (../Modules/parsermodule.c).  If you can't make the changes to
-#        that module yourself, please co-ordinate the required changes
-#        with someone who can; ask around on python-dev for help.  Fred
-#        Drake <fdrake@acm.org> will probably be listening there.
-
-# NOTE WELL: You should also follow all the steps listed in PEP 306,
-# "How to Change Python's Grammar"
-
-# Commands for Kees Blom's railroad program
-#diagram:token NAME
-#diagram:token NUMBER
-#diagram:token STRING
-#diagram:token NEWLINE
-#diagram:token ENDMARKER
-#diagram:token INDENT
-#diagram:output\input python.bla
-#diagram:token DEDENT
-#diagram:output\textwidth 20.04cm\oddsidemargin  0.0cm\evensidemargin 0.0cm
-#diagram:rules
+# NOTE WELL: You should also follow all the steps listed at
+# https://devguide.python.org/grammar/
 
 # Start symbols for the grammar:
 #	file_input is a module or sequence of commands read from an input file;
@@ -38,13 +19,13 @@ async_funcdef: ASYNC funcdef
 funcdef: 'def' NAME parameters ['->' test] ':' suite
 parameters: '(' [typedargslist] ')'
 typedargslist: ((tfpdef ['=' test] ',')*
-                ('*' [tname] (',' tname ['=' test])* [',' '**' tname] | '**' tname)
+                ('*' [tname] (',' tname ['=' test])* [',' ['**' tname [',']]] | '**' tname [','])
                 | tfpdef ['=' test] (',' tfpdef ['=' test])* [','])
 tname: NAME [':' test]
 tfpdef: tname | '(' tfplist ')'
 tfplist: tfpdef (',' tfpdef)* [',']
 varargslist: ((vfpdef ['=' test] ',')*
-              ('*' [vname] (',' vname ['=' test])*  [',' '**' vname] | '**' vname)
+              ('*' [vname] (',' vname ['=' test])*  [',' ['**' vname [',']]] | '**' vname [','])
               | vfpdef ['=' test] (',' vfpdef ['=' test])* [','])
 vname: NAME
 vfpdef: vname | '(' vfplist ')'
diff -urpN Python-3.6.3/Lib/lib2to3/patcomp.py Python-3.6.5/Lib/lib2to3/patcomp.py
--- Python-3.6.3/Lib/lib2to3/patcomp.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/lib2to3/patcomp.py	2018-03-28 11:19:31.000000000 +0200
@@ -12,7 +12,6 @@ __author__ = "Guido van Rossum <guido@py
 
 # Python imports
 import io
-import os
 
 # Fairly local imports
 from .pgen2 import driver, literals, token, tokenize, parse, grammar
@@ -21,10 +20,6 @@ from .pgen2 import driver, literals, tok
 from . import pytree
 from . import pygram
 
-# The pattern grammar file
-_PATTERN_GRAMMAR_FILE = os.path.join(os.path.dirname(__file__),
-                                     "PatternGrammar.txt")
-
 
 class PatternSyntaxError(Exception):
     pass
@@ -42,13 +37,17 @@ def tokenize_wrapper(input):
 
 class PatternCompiler(object):
 
-    def __init__(self, grammar_file=_PATTERN_GRAMMAR_FILE):
+    def __init__(self, grammar_file=None):
         """Initializer.
 
         Takes an optional alternative filename for the pattern grammar.
         """
-        self.grammar = driver.load_grammar(grammar_file)
-        self.syms = pygram.Symbols(self.grammar)
+        if grammar_file is None:
+            self.grammar = pygram.pattern_grammar
+            self.syms = pygram.pattern_symbols
+        else:
+            self.grammar = driver.load_grammar(grammar_file)
+            self.syms = pygram.Symbols(self.grammar)
         self.pygrammar = pygram.python_grammar
         self.pysyms = pygram.python_symbols
         self.driver = driver.Driver(self.grammar, convert=pattern_convert)
diff -urpN Python-3.6.3/Lib/lib2to3/pgen2/driver.py Python-3.6.5/Lib/lib2to3/pgen2/driver.py
--- Python-3.6.3/Lib/lib2to3/pgen2/driver.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/lib2to3/pgen2/driver.py	2018-03-28 11:19:31.000000000 +0200
@@ -20,6 +20,7 @@ import codecs
 import io
 import os
 import logging
+import pkgutil
 import sys
 
 # Pgen imports
@@ -143,6 +144,26 @@ def _newer(a, b):
     return os.path.getmtime(a) >= os.path.getmtime(b)
 
 
+def load_packaged_grammar(package, grammar_source):
+    """Normally, loads a pickled grammar by doing
+        pkgutil.get_data(package, pickled_grammar)
+    where *pickled_grammar* is computed from *grammar_source* by adding the
+    Python version and using a ``.pickle`` extension.
+
+    However, if *grammar_source* is an extant file, load_grammar(grammar_source)
+    is called instead. This facilitates using a packaged grammar file when needed
+    but preserves load_grammar's automatic regeneration behavior when possible.
+
+    """
+    if os.path.isfile(grammar_source):
+        return load_grammar(grammar_source)
+    pickled_name = _generate_pickle_name(os.path.basename(grammar_source))
+    data = pkgutil.get_data(package, pickled_name)
+    g = grammar.Grammar()
+    g.loads(data)
+    return g
+
+
 def main(*args):
     """Main program, when run as a script: produce grammar pickle files.
 
diff -urpN Python-3.6.3/Lib/lib2to3/pgen2/grammar.py Python-3.6.5/Lib/lib2to3/pgen2/grammar.py
--- Python-3.6.3/Lib/lib2to3/pgen2/grammar.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/lib2to3/pgen2/grammar.py	2018-03-28 11:19:31.000000000 +0200
@@ -108,6 +108,10 @@ class Grammar(object):
             d = pickle.load(f)
         self.__dict__.update(d)
 
+    def loads(self, pkl):
+        """Load the grammar tables from a pickle bytes object."""
+        self.__dict__.update(pickle.loads(pkl))
+
     def copy(self):
         """
         Copy the grammar.
diff -urpN Python-3.6.3/Lib/lib2to3/pygram.py Python-3.6.5/Lib/lib2to3/pygram.py
--- Python-3.6.3/Lib/lib2to3/pygram.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/lib2to3/pygram.py	2018-03-28 11:19:31.000000000 +0200
@@ -29,12 +29,12 @@ class Symbols(object):
             setattr(self, name, symbol)
 
 
-python_grammar = driver.load_grammar(_GRAMMAR_FILE)
+python_grammar = driver.load_packaged_grammar("lib2to3", _GRAMMAR_FILE)
 
 python_symbols = Symbols(python_grammar)
 
 python_grammar_no_print_statement = python_grammar.copy()
 del python_grammar_no_print_statement.keywords["print"]
 
-pattern_grammar = driver.load_grammar(_PATTERN_GRAMMAR_FILE)
+pattern_grammar = driver.load_packaged_grammar("lib2to3", _PATTERN_GRAMMAR_FILE)
 pattern_symbols = Symbols(pattern_grammar)
diff -urpN Python-3.6.3/Lib/lib2to3/tests/support.py Python-3.6.5/Lib/lib2to3/tests/support.py
--- Python-3.6.3/Lib/lib2to3/tests/support.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/lib2to3/tests/support.py	2018-03-28 11:19:31.000000000 +0200
@@ -15,7 +15,13 @@ test_dir = os.path.dirname(__file__)
 proj_dir = os.path.normpath(os.path.join(test_dir, ".."))
 grammar_path = os.path.join(test_dir, "..", "Grammar.txt")
 grammar = pgen2_driver.load_grammar(grammar_path)
+grammar_no_print_statement = pgen2_driver.load_grammar(grammar_path)
+del grammar_no_print_statement.keywords["print"]
 driver = pgen2_driver.Driver(grammar, convert=pytree.convert)
+driver_no_print_statement = pgen2_driver.Driver(
+    grammar_no_print_statement,
+    convert=pytree.convert
+)
 
 def parse_string(string):
     return driver.parse_string(reformat(string), debug=True)
diff -urpN Python-3.6.3/Lib/lib2to3/tests/test_parser.py Python-3.6.5/Lib/lib2to3/tests/test_parser.py
--- Python-3.6.3/Lib/lib2to3/tests/test_parser.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/lib2to3/tests/test_parser.py	2018-03-28 11:19:31.000000000 +0200
@@ -8,17 +8,19 @@ test_grammar.py files from both Python 2
 
 # Testing imports
 from . import support
-from .support import driver
-from test.support import verbose
+from .support import driver, driver_no_print_statement
 
 # Python imports
+import difflib
+import importlib
+import operator
 import os
+import pickle
 import shutil
 import subprocess
 import sys
 import tempfile
 import unittest
-import warnings
 
 # Local imports
 from lib2to3.pgen2 import driver as pgen2_driver
@@ -99,6 +101,18 @@ pgen2_driver.load_grammar(%r, save=True,
         finally:
             shutil.rmtree(tmpdir)
 
+    def test_load_packaged_grammar(self):
+        modname = __name__ + '.load_test'
+        class MyLoader:
+            def get_data(self, where):
+                return pickle.dumps({'elephant': 19})
+        class MyModule:
+            __file__ = 'parsertestmodule'
+            __spec__ = importlib.util.spec_from_loader(modname, MyLoader())
+        sys.modules[modname] = MyModule()
+        self.addCleanup(operator.delitem, sys.modules, modname)
+        g = pgen2_driver.load_packaged_grammar(modname, 'Grammar.txt')
+        self.assertEqual(g.elephant, 19)
 
 
 class GrammarTest(support.TestCase):
@@ -260,6 +274,78 @@ class TestUnpackingGeneralizations(Gramm
     def test_argument_unpacking_3(self):
         self.validate("""f(2, *a, *b, **b, **c, **d)""")
 
+    def test_trailing_commas_1(self):
+        self.validate("def f(a, b): call(a, b)")
+        self.validate("def f(a, b,): call(a, b,)")
+
+    def test_trailing_commas_2(self):
+        self.validate("def f(a, *b): call(a, *b)")
+        self.validate("def f(a, *b,): call(a, *b,)")
+
+    def test_trailing_commas_3(self):
+        self.validate("def f(a, b=1): call(a, b=1)")
+        self.validate("def f(a, b=1,): call(a, b=1,)")
+
+    def test_trailing_commas_4(self):
+        self.validate("def f(a, **b): call(a, **b)")
+        self.validate("def f(a, **b,): call(a, **b,)")
+
+    def test_trailing_commas_5(self):
+        self.validate("def f(*a, b=1): call(*a, b=1)")
+        self.validate("def f(*a, b=1,): call(*a, b=1,)")
+
+    def test_trailing_commas_6(self):
+        self.validate("def f(*a, **b): call(*a, **b)")
+        self.validate("def f(*a, **b,): call(*a, **b,)")
+
+    def test_trailing_commas_7(self):
+        self.validate("def f(*, b=1): call(*b)")
+        self.validate("def f(*, b=1,): call(*b,)")
+
+    def test_trailing_commas_8(self):
+        self.validate("def f(a=1, b=2): call(a=1, b=2)")
+        self.validate("def f(a=1, b=2,): call(a=1, b=2,)")
+
+    def test_trailing_commas_9(self):
+        self.validate("def f(a=1, **b): call(a=1, **b)")
+        self.validate("def f(a=1, **b,): call(a=1, **b,)")
+
+    def test_trailing_commas_lambda_1(self):
+        self.validate("f = lambda a, b: call(a, b)")
+        self.validate("f = lambda a, b,: call(a, b,)")
+
+    def test_trailing_commas_lambda_2(self):
+        self.validate("f = lambda a, *b: call(a, *b)")
+        self.validate("f = lambda a, *b,: call(a, *b,)")
+
+    def test_trailing_commas_lambda_3(self):
+        self.validate("f = lambda a, b=1: call(a, b=1)")
+        self.validate("f = lambda a, b=1,: call(a, b=1,)")
+
+    def test_trailing_commas_lambda_4(self):
+        self.validate("f = lambda a, **b: call(a, **b)")
+        self.validate("f = lambda a, **b,: call(a, **b,)")
+
+    def test_trailing_commas_lambda_5(self):
+        self.validate("f = lambda *a, b=1: call(*a, b=1)")
+        self.validate("f = lambda *a, b=1,: call(*a, b=1,)")
+
+    def test_trailing_commas_lambda_6(self):
+        self.validate("f = lambda *a, **b: call(*a, **b)")
+        self.validate("f = lambda *a, **b,: call(*a, **b,)")
+
+    def test_trailing_commas_lambda_7(self):
+        self.validate("f = lambda *, b=1: call(*b)")
+        self.validate("f = lambda *, b=1,: call(*b,)")
+
+    def test_trailing_commas_lambda_8(self):
+        self.validate("f = lambda a=1, b=2: call(a=1, b=2)")
+        self.validate("f = lambda a=1, b=2,: call(a=1, b=2,)")
+
+    def test_trailing_commas_lambda_9(self):
+        self.validate("f = lambda a=1, **b: call(a=1, **b)")
+        self.validate("f = lambda a=1, **b,: call(a=1, **b,)")
+
 
 # Adapted from Python 3's Lib/test/test_grammar.py:GrammarTests.testFuncdef
 class TestFunctionAnnotations(GrammarTest):
@@ -289,6 +375,74 @@ class TestFunctionAnnotations(GrammarTes
                         *g:6, h:7, i=8, j:9=10, **k:11) -> 12: pass"""
         self.validate(s)
 
+    def test_9(self):
+        s = """def f(
+          a: str,
+          b: int,
+          *,
+          c: bool = False,
+          **kwargs,
+        ) -> None:
+            call(c=c, **kwargs,)"""
+        self.validate(s)
+
+    def test_10(self):
+        s = """def f(
+          a: str,
+        ) -> None:
+            call(a,)"""
+        self.validate(s)
+
+    def test_11(self):
+        s = """def f(
+          a: str = '',
+        ) -> None:
+            call(a=a,)"""
+        self.validate(s)
+
+    def test_12(self):
+        s = """def f(
+          *args: str,
+        ) -> None:
+            call(*args,)"""
+        self.validate(s)
+
+    def test_13(self):
+        self.validate("def f(a: str, b: int) -> None: call(a, b)")
+        self.validate("def f(a: str, b: int,) -> None: call(a, b,)")
+
+    def test_14(self):
+        self.validate("def f(a: str, *b: int) -> None: call(a, *b)")
+        self.validate("def f(a: str, *b: int,) -> None: call(a, *b,)")
+
+    def test_15(self):
+        self.validate("def f(a: str, b: int=1) -> None: call(a, b=1)")
+        self.validate("def f(a: str, b: int=1,) -> None: call(a, b=1,)")
+
+    def test_16(self):
+        self.validate("def f(a: str, **b: int) -> None: call(a, **b)")
+        self.validate("def f(a: str, **b: int,) -> None: call(a, **b,)")
+
+    def test_17(self):
+        self.validate("def f(*a: str, b: int=1) -> None: call(*a, b=1)")
+        self.validate("def f(*a: str, b: int=1,) -> None: call(*a, b=1,)")
+
+    def test_18(self):
+        self.validate("def f(*a: str, **b: int) -> None: call(*a, **b)")
+        self.validate("def f(*a: str, **b: int,) -> None: call(*a, **b,)")
+
+    def test_19(self):
+        self.validate("def f(*, b: int=1) -> None: call(*b)")
+        self.validate("def f(*, b: int=1,) -> None: call(*b,)")
+
+    def test_20(self):
+        self.validate("def f(a: str='', b: int=2) -> None: call(a=a, b=2)")
+        self.validate("def f(a: str='', b: int=2,) -> None: call(a=a, b=2,)")
+
+    def test_21(self):
+        self.validate("def f(a: str='', **b: int) -> None: call(a=a, **b)")
+        self.validate("def f(a: str='', **b: int,) -> None: call(a=a, **b,)")
+
 
 # Adapted from Python 3's Lib/test/test_grammar.py:GrammarTests.test_var_annot
 class TestVarAnnotations(GrammarTest):
@@ -391,15 +545,13 @@ class TestClassDef(GrammarTest):
         self.validate("class B(t, *args): pass")
         self.validate("class B(t, **kwargs): pass")
         self.validate("class B(t, *args, **kwargs): pass")
-        self.validate("class B(t, y=9, *args, **kwargs): pass")
+        self.validate("class B(t, y=9, *args, **kwargs,): pass")
 
 
 class TestParserIdempotency(support.TestCase):
 
     """A cut-down version of pytree_idempotency.py."""
 
-    # Issue 13125
-    @unittest.expectedFailure
     def test_all_project_files(self):
         for filepath in support.all_project_files():
             with open(filepath, "rb") as fp:
@@ -410,13 +562,14 @@ class TestParserIdempotency(support.Test
                 source = fp.read()
             try:
                 tree = driver.parse_string(source)
-            except ParseError as err:
-                if verbose > 0:
-                    warnings.warn('ParseError on file %s (%s)' % (filepath, err))
-                continue
+            except ParseError:
+                try:
+                    tree = driver_no_print_statement.parse_string(source)
+                except ParseError as err:
+                    self.fail('ParseError on file %s (%s)' % (filepath, err))
             new = str(tree)
-            x = diff(filepath, new)
-            if x:
+            if new != source:
+                print(diff_texts(source, new, filepath))
                 self.fail("Idempotency failed: %s" % filepath)
 
     def test_extended_unpacking(self):
@@ -459,14 +612,9 @@ class TestLiterals(GrammarTest):
         self.validate(s)
 
 
-def diff(fn, result):
-    try:
-        with open('@', 'w') as f:
-            f.write(str(result))
-        fn = fn.replace('"', '\\"')
-        return subprocess.call(['diff', '-u', fn, '@'], stdout=(subprocess.DEVNULL if verbose < 1 else None))
-    finally:
-        try:
-            os.remove("@")
-        except OSError:
-            pass
+def diff_texts(a, b, filename):
+    a = a.splitlines()
+    b = b.splitlines()
+    return difflib.unified_diff(a, b, filename, filename,
+                                "(original)", "(reserialized)",
+                                lineterm="")
diff -urpN Python-3.6.3/Lib/logging/__init__.py Python-3.6.5/Lib/logging/__init__.py
--- Python-3.6.3/Lib/logging/__init__.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/logging/__init__.py	2018-03-28 11:19:31.000000000 +0200
@@ -1669,7 +1669,7 @@ class LoggerAdapter(object):
         """
         if self.isEnabledFor(level):
             msg, kwargs = self.process(msg, kwargs)
-            self.logger._log(level, msg, args, **kwargs)
+            self.logger.log(level, msg, *args, **kwargs)
 
     def isEnabledFor(self, level):
         """
@@ -1715,9 +1715,13 @@ class LoggerAdapter(object):
         return self.logger.manager
 
     @manager.setter
-    def set_manager(self, value):
+    def manager(self, value):
         self.logger.manager = value
 
+    @property
+    def name(self):
+        return self.logger.name
+
     def __repr__(self):
         logger = self.logger
         level = getLevelName(logger.getEffectiveLevel())
diff -urpN Python-3.6.3/Lib/logging/handlers.py Python-3.6.5/Lib/logging/handlers.py
--- Python-3.6.3/Lib/logging/handlers.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/logging/handlers.py	2018-03-28 11:19:31.000000000 +0200
@@ -356,10 +356,10 @@ class TimedRotatingFileHandler(BaseRotat
                 suffix = fileName[plen:]
                 if self.extMatch.match(suffix):
                     result.append(os.path.join(dirName, fileName))
-        result.sort()
         if len(result) < self.backupCount:
             result = []
         else:
+            result.sort()
             result = result[:len(result) - self.backupCount]
         return result
 
@@ -1183,7 +1183,9 @@ class HTTPHandler(logging.Handler):
             i = host.find(":")
             if i >= 0:
                 host = host[:i]
-            h.putheader("Host", host)
+            # See issue #30904: putrequest call above already adds this header
+            # on Python 3.x.
+            # h.putheader("Host", host)
             if self.method == "POST":
                 h.putheader("Content-type",
                             "application/x-www-form-urlencoded")
diff -urpN Python-3.6.3/Lib/macpath.py Python-3.6.5/Lib/macpath.py
--- Python-3.6.3/Lib/macpath.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/macpath.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,5 +1,17 @@
 """Pathname and path-related operations for the Macintosh."""
 
+# strings representing various path-related bits and pieces
+# These are primarily for export; internally, they are hardcoded.
+# Should be set before imports for resolving cyclic dependency.
+curdir = ':'
+pardir = '::'
+extsep = '.'
+sep = ':'
+pathsep = '\n'
+defpath = ':'
+altsep = None
+devnull = 'Dev:Null'
+
 import os
 from stat import *
 import genericpath
@@ -12,17 +24,6 @@ __all__ = ["normcase","isabs","join","sp
            "curdir","pardir","sep","pathsep","defpath","altsep","extsep",
            "devnull","realpath","supports_unicode_filenames"]
 
-# strings representing various path-related bits and pieces
-# These are primarily for export; internally, they are hardcoded.
-curdir = ':'
-pardir = '::'
-extsep = '.'
-sep = ':'
-pathsep = '\n'
-defpath = ':'
-altsep = None
-devnull = 'Dev:Null'
-
 def _get_colon(path):
     if isinstance(path, bytes):
         return b':'
diff -urpN Python-3.6.3/Lib/multiprocessing/forkserver.py Python-3.6.5/Lib/multiprocessing/forkserver.py
--- Python-3.6.3/Lib/multiprocessing/forkserver.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/multiprocessing/forkserver.py	2018-03-28 11:19:31.000000000 +0200
@@ -33,6 +33,7 @@ class ForkServer(object):
     def __init__(self):
         self._forkserver_address = None
         self._forkserver_alive_fd = None
+        self._forkserver_pid = None
         self._inherited_fds = None
         self._lock = threading.Lock()
         self._preload_modules = ['__main__']
@@ -89,8 +90,17 @@ class ForkServer(object):
         '''
         with self._lock:
             semaphore_tracker.ensure_running()
-            if self._forkserver_alive_fd is not None:
-                return
+            if self._forkserver_pid is not None:
+                # forkserver was launched before, is it still running?
+                pid, status = os.waitpid(self._forkserver_pid, os.WNOHANG)
+                if not pid:
+                    # still alive
+                    return
+                # dead, launch it again
+                os.close(self._forkserver_alive_fd)
+                self._forkserver_address = None
+                self._forkserver_alive_fd = None
+                self._forkserver_pid = None
 
             cmd = ('from multiprocessing.forkserver import main; ' +
                    'main(%d, %d, %r, **%r)')
@@ -127,6 +137,7 @@ class ForkServer(object):
                     os.close(alive_r)
                 self._forkserver_address = address
                 self._forkserver_alive_fd = alive_w
+                self._forkserver_pid = pid
 
 #
 #
@@ -149,11 +160,11 @@ def main(listener_fd, alive_r, preload,
 
     util._close_stdin()
 
-    # ignoring SIGCHLD means no need to reap zombie processes;
-    # letting SIGINT through avoids KeyboardInterrupt tracebacks
     handlers = {
+        # no need to reap zombie processes;
         signal.SIGCHLD: signal.SIG_IGN,
-        signal.SIGINT: signal.SIG_DFL,
+        # protect the process from ^C
+        signal.SIGINT: signal.SIG_IGN,
         }
     old_handlers = {sig: signal.signal(sig, val)
                     for (sig, val) in handlers.items()}
diff -urpN Python-3.6.3/Lib/multiprocessing/popen_fork.py Python-3.6.5/Lib/multiprocessing/popen_fork.py
--- Python-3.6.3/Lib/multiprocessing/popen_fork.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/multiprocessing/popen_fork.py	2018-03-28 11:19:31.000000000 +0200
@@ -14,8 +14,7 @@ class Popen(object):
     method = 'fork'
 
     def __init__(self, process_obj):
-        sys.stdout.flush()
-        sys.stderr.flush()
+        util._flush_std_streams()
         self.returncode = None
         self._launch(process_obj)
 
diff -urpN Python-3.6.3/Lib/multiprocessing/process.py Python-3.6.5/Lib/multiprocessing/process.py
--- Python-3.6.3/Lib/multiprocessing/process.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/multiprocessing/process.py	2018-03-28 11:19:31.000000000 +0200
@@ -274,8 +274,7 @@ class BaseProcess(object):
             traceback.print_exc()
         finally:
             util.info('process exiting with exitcode %d' % exitcode)
-            sys.stdout.flush()
-            sys.stderr.flush()
+            util._flush_std_streams()
 
         return exitcode
 
diff -urpN Python-3.6.3/Lib/multiprocessing/semaphore_tracker.py Python-3.6.5/Lib/multiprocessing/semaphore_tracker.py
--- Python-3.6.3/Lib/multiprocessing/semaphore_tracker.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/multiprocessing/semaphore_tracker.py	2018-03-28 11:19:31.000000000 +0200
@@ -29,6 +29,7 @@ class SemaphoreTracker(object):
     def __init__(self):
         self._lock = threading.Lock()
         self._fd = None
+        self._pid = None
 
     def getfd(self):
         self.ensure_running()
@@ -40,8 +41,20 @@ class SemaphoreTracker(object):
         This can be run from any process.  Usually a child process will use
         the semaphore created by its parent.'''
         with self._lock:
-            if self._fd is not None:
-                return
+            if self._pid is not None:
+                # semaphore tracker was launched before, is it still running?
+                pid, status = os.waitpid(self._pid, os.WNOHANG)
+                if not pid:
+                    # => still alive
+                    return
+                # => dead, launch it again
+                os.close(self._fd)
+                self._fd = None
+                self._pid = None
+
+                warnings.warn('semaphore_tracker: process died unexpectedly, '
+                              'relaunching.  Some semaphores might leak.')
+
             fds_to_pass = []
             try:
                 fds_to_pass.append(sys.stderr.fileno())
@@ -55,12 +68,13 @@ class SemaphoreTracker(object):
                 exe = spawn.get_executable()
                 args = [exe] + util._args_from_interpreter_flags()
                 args += ['-c', cmd % r]
-                util.spawnv_passfds(exe, args, fds_to_pass)
+                pid = util.spawnv_passfds(exe, args, fds_to_pass)
             except:
                 os.close(w)
                 raise
             else:
                 self._fd = w
+                self._pid = pid
             finally:
                 os.close(r)
 
diff -urpN Python-3.6.3/Lib/multiprocessing/util.py Python-3.6.5/Lib/multiprocessing/util.py
--- Python-3.6.3/Lib/multiprocessing/util.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/multiprocessing/util.py	2018-03-28 11:19:31.000000000 +0200
@@ -389,6 +389,20 @@ def _close_stdin():
         pass
 
 #
+# Flush standard streams, if any
+#
+
+def _flush_std_streams():
+    try:
+        sys.stdout.flush()
+    except (AttributeError, ValueError):
+        pass
+    try:
+        sys.stderr.flush()
+    except (AttributeError, ValueError):
+        pass
+
+#
 # Start a program with only specified fds kept open
 #
 
diff -urpN Python-3.6.3/Lib/netrc.py Python-3.6.5/Lib/netrc.py
--- Python-3.6.3/Lib/netrc.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/netrc.py	2018-03-28 11:19:31.000000000 +0200
@@ -127,15 +127,15 @@ class netrc:
         rep = ""
         for host in self.hosts.keys():
             attrs = self.hosts[host]
-            rep = rep + "machine "+ host + "\n\tlogin " + repr(attrs[0]) + "\n"
+            rep += f"machine {host}\n\tlogin {attrs[0]}\n"
             if attrs[1]:
-                rep = rep + "account " + repr(attrs[1])
-            rep = rep + "\tpassword " + repr(attrs[2]) + "\n"
+                rep += f"\taccount {attrs[1]}\n"
+            rep += f"\tpassword {attrs[2]}\n"
         for macro in self.macros.keys():
-            rep = rep + "macdef " + macro + "\n"
+            rep += f"macdef {macro}\n"
             for line in self.macros[macro]:
-                rep = rep + line
-            rep = rep + "\n"
+                rep += line
+            rep += "\n"
         return rep
 
 if __name__ == '__main__':
diff -urpN Python-3.6.3/Lib/ntpath.py Python-3.6.5/Lib/ntpath.py
--- Python-3.6.3/Lib/ntpath.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/ntpath.py	2018-03-28 11:19:31.000000000 +0200
@@ -5,6 +5,18 @@ Instead of importing this module directl
 module as os.path.
 """
 
+# strings representing various path-related bits and pieces
+# These are primarily for export; internally, they are hardcoded.
+# Should be set before imports for resolving cyclic dependency.
+curdir = '.'
+pardir = '..'
+extsep = '.'
+sep = '\\'
+pathsep = ';'
+altsep = '/'
+defpath = '.;C:\\bin'
+devnull = 'nul'
+
 import os
 import sys
 import stat
@@ -19,17 +31,6 @@ __all__ = ["normcase","isabs","join","sp
            "extsep","devnull","realpath","supports_unicode_filenames","relpath",
            "samefile", "sameopenfile", "samestat", "commonpath"]
 
-# strings representing various path-related bits and pieces
-# These are primarily for export; internally, they are hardcoded.
-curdir = '.'
-pardir = '..'
-extsep = '.'
-sep = '\\'
-pathsep = ';'
-altsep = '/'
-defpath = '.;C:\\bin'
-devnull = 'nul'
-
 def _get_bothseps(path):
     if isinstance(path, bytes):
         return b'\\/'
diff -urpN Python-3.6.3/Lib/opcode.py Python-3.6.5/Lib/opcode.py
--- Python-3.6.3/Lib/opcode.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/opcode.py	2018-03-28 11:19:31.000000000 +0200
@@ -142,7 +142,7 @@ name_op('LOAD_NAME', 101)       # Index
 def_op('BUILD_TUPLE', 102)      # Number of tuple items
 def_op('BUILD_LIST', 103)       # Number of list items
 def_op('BUILD_SET', 104)        # Number of set items
-def_op('BUILD_MAP', 105)        # Number of dict entries (upto 255)
+def_op('BUILD_MAP', 105)        # Number of dict entries
 name_op('LOAD_ATTR', 106)       # Index in name list
 def_op('COMPARE_OP', 107)       # Comparison operator
 hascompare.append(107)
diff -urpN Python-3.6.3/Lib/os.py Python-3.6.5/Lib/os.py
--- Python-3.6.3/Lib/os.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/os.py	2018-03-28 11:19:31.000000000 +0200
@@ -882,7 +882,7 @@ If mode == P_WAIT return the process's e
 otherwise return -SIG, where SIG is the signal that killed it. """
         return _spawnvef(mode, file, args, env, execve)
 
-    # Note: spawnvp[e] is't currently supported on Windows
+    # Note: spawnvp[e] isn't currently supported on Windows
 
     def spawnvp(mode, file, args):
         """spawnvp(mode, file, args) -> integer
diff -urpN Python-3.6.3/Lib/pathlib.py Python-3.6.5/Lib/pathlib.py
--- Python-3.6.3/Lib/pathlib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/pathlib.py	2018-03-28 11:19:31.000000000 +0200
@@ -600,7 +600,9 @@ class _PathParents(Sequence):
 
 
 class PurePath(object):
-    """PurePath represents a filesystem path and offers operations which
+    """Base class for manipulating paths without I/O.
+
+    PurePath represents a filesystem path and offers operations which
     don't imply any actual filesystem I/O.  Depending on your system,
     instantiating a PurePath will return either a PurePosixPath or a
     PureWindowsPath object.  You can also instantiate either of these classes
@@ -955,11 +957,21 @@ os.PathLike.register(PurePath)
 
 
 class PurePosixPath(PurePath):
+    """PurePath subclass for non-Windows systems.
+
+    On a POSIX system, instantiating a PurePath should return this object.
+    However, you can also instantiate it directly on any system.
+    """
     _flavour = _posix_flavour
     __slots__ = ()
 
 
 class PureWindowsPath(PurePath):
+    """PurePath subclass for Windows systems.
+
+    On a Windows system, instantiating a PurePath should return this object.
+    However, you can also instantiate it directly on any system.
+    """
     _flavour = _windows_flavour
     __slots__ = ()
 
@@ -968,6 +980,14 @@ class PureWindowsPath(PurePath):
 
 
 class Path(PurePath):
+    """PurePath subclass that can make system calls.
+
+    Path represents a filesystem path but unlike PurePath, also offers
+    methods to do system calls on path objects. Depending on your system,
+    instantiating a Path will return either a PosixPath or a WindowsPath
+    object. You can also instantiate a PosixPath or WindowsPath directly,
+    but cannot instantiate a WindowsPath on a POSIX system or vice versa.
+    """
     __slots__ = (
         '_accessor',
         '_closed',
@@ -1422,9 +1442,17 @@ class Path(PurePath):
 
 
 class PosixPath(Path, PurePosixPath):
+    """Path subclass for non-Windows systems.
+
+    On a POSIX system, instantiating a Path should return this object.
+    """
     __slots__ = ()
 
 class WindowsPath(Path, PureWindowsPath):
+    """Path subclass for Windows systems.
+
+    On a Windows system, instantiating a Path should return this object.
+    """
     __slots__ = ()
 
     def owner(self):
diff -urpN Python-3.6.3/Lib/plistlib.py Python-3.6.5/Lib/plistlib.py
--- Python-3.6.3/Lib/plistlib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/plistlib.py	2018-03-28 11:19:31.000000000 +0200
@@ -590,6 +590,8 @@ class InvalidFileException (ValueError):
 
 _BINARY_FORMAT = {1: 'B', 2: 'H', 4: 'L', 8: 'Q'}
 
+_undefined = object()
+
 class _BinaryPlistParser:
     """
     Read or write a binary plist file, following the description of the binary
@@ -620,9 +622,11 @@ class _BinaryPlistParser:
             ) = struct.unpack('>6xBBQQQ', trailer)
             self._fp.seek(offset_table_offset)
             self._object_offsets = self._read_ints(num_objects, offset_size)
-            return self._read_object(self._object_offsets[top_object])
+            self._objects = [_undefined] * num_objects
+            return self._read_object(top_object)
 
-        except (OSError, IndexError, struct.error):
+        except (OSError, IndexError, struct.error, OverflowError,
+                UnicodeDecodeError):
             raise InvalidFileException()
 
     def _get_size(self, tokenL):
@@ -640,68 +644,76 @@ class _BinaryPlistParser:
         if size in _BINARY_FORMAT:
             return struct.unpack('>' + _BINARY_FORMAT[size] * n, data)
         else:
+            if not size or len(data) != size * n:
+                raise InvalidFileException()
             return tuple(int.from_bytes(data[i: i + size], 'big')
                          for i in range(0, size * n, size))
 
     def _read_refs(self, n):
         return self._read_ints(n, self._ref_size)
 
-    def _read_object(self, offset):
+    def _read_object(self, ref):
         """
-        read the object at offset.
+        read the object by reference.
 
         May recursively read sub-objects (content of an array/dict/set)
         """
+        result = self._objects[ref]
+        if result is not _undefined:
+            return result
+
+        offset = self._object_offsets[ref]
         self._fp.seek(offset)
         token = self._fp.read(1)[0]
         tokenH, tokenL = token & 0xF0, token & 0x0F
 
         if token == 0x00:
-            return None
+            result = None
 
         elif token == 0x08:
-            return False
+            result = False
 
         elif token == 0x09:
-            return True
+            result = True
 
         # The referenced source code also mentions URL (0x0c, 0x0d) and
         # UUID (0x0e), but neither can be generated using the Cocoa libraries.
 
         elif token == 0x0f:
-            return b''
+            result = b''
 
         elif tokenH == 0x10:  # int
-            return int.from_bytes(self._fp.read(1 << tokenL),
-                                  'big', signed=tokenL >= 3)
+            result = int.from_bytes(self._fp.read(1 << tokenL),
+                                    'big', signed=tokenL >= 3)
 
         elif token == 0x22: # real
-            return struct.unpack('>f', self._fp.read(4))[0]
+            result = struct.unpack('>f', self._fp.read(4))[0]
 
         elif token == 0x23: # real
-            return struct.unpack('>d', self._fp.read(8))[0]
+            result = struct.unpack('>d', self._fp.read(8))[0]
 
         elif token == 0x33:  # date
             f = struct.unpack('>d', self._fp.read(8))[0]
             # timestamp 0 of binary plists corresponds to 1/1/2001
             # (year of Mac OS X 10.0), instead of 1/1/1970.
-            return datetime.datetime(2001, 1, 1) + datetime.timedelta(seconds=f)
+            result = (datetime.datetime(2001, 1, 1) +
+                      datetime.timedelta(seconds=f))
 
         elif tokenH == 0x40:  # data
             s = self._get_size(tokenL)
             if self._use_builtin_types:
-                return self._fp.read(s)
+                result = self._fp.read(s)
             else:
-                return Data(self._fp.read(s))
+                result = Data(self._fp.read(s))
 
         elif tokenH == 0x50:  # ascii string
             s = self._get_size(tokenL)
             result =  self._fp.read(s).decode('ascii')
-            return result
+            result = result
 
         elif tokenH == 0x60:  # unicode string
             s = self._get_size(tokenL)
-            return self._fp.read(s * 2).decode('utf-16be')
+            result = self._fp.read(s * 2).decode('utf-16be')
 
         # tokenH == 0x80 is documented as 'UID' and appears to be used for
         # keyed-archiving, not in plists.
@@ -709,8 +721,9 @@ class _BinaryPlistParser:
         elif tokenH == 0xA0:  # array
             s = self._get_size(tokenL)
             obj_refs = self._read_refs(s)
-            return [self._read_object(self._object_offsets[x])
-                for x in obj_refs]
+            result = []
+            self._objects[ref] = result
+            result.extend(self._read_object(x) for x in obj_refs)
 
         # tokenH == 0xB0 is documented as 'ordset', but is not actually
         # implemented in the Apple reference code.
@@ -723,12 +736,15 @@ class _BinaryPlistParser:
             key_refs = self._read_refs(s)
             obj_refs = self._read_refs(s)
             result = self._dict_type()
+            self._objects[ref] = result
             for k, o in zip(key_refs, obj_refs):
-                result[self._read_object(self._object_offsets[k])
-                    ] = self._read_object(self._object_offsets[o])
-            return result
+                result[self._read_object(k)] = self._read_object(o)
 
-        raise InvalidFileException()
+        else:
+            raise InvalidFileException()
+
+        self._objects[ref] = result
+        return result
 
 def _count_to_size(count):
     if count < 1 << 8:
@@ -743,6 +759,8 @@ def _count_to_size(count):
     else:
         return 8
 
+_scalars = (str, int, float, datetime.datetime, bytes)
+
 class _BinaryPlistWriter (object):
     def __init__(self, fp, sort_keys, skipkeys):
         self._fp = fp
@@ -798,8 +816,7 @@ class _BinaryPlistWriter (object):
         # First check if the object is in the object table, not used for
         # containers to ensure that two subcontainers with the same contents
         # will be serialized as distinct values.
-        if isinstance(value, (
-                str, int, float, datetime.datetime, bytes, bytearray)):
+        if isinstance(value, _scalars):
             if (type(value), value) in self._objtable:
                 return
 
@@ -807,15 +824,17 @@ class _BinaryPlistWriter (object):
             if (type(value.data), value.data) in self._objtable:
                 return
 
+        elif id(value) in self._objidtable:
+            return
+
         # Add to objectreference map
         refnum = len(self._objlist)
         self._objlist.append(value)
-        try:
-            if isinstance(value, Data):
-                self._objtable[(type(value.data), value.data)] = refnum
-            else:
-                self._objtable[(type(value), value)] = refnum
-        except TypeError:
+        if isinstance(value, _scalars):
+            self._objtable[(type(value), value)] = refnum
+        elif isinstance(value, Data):
+            self._objtable[(type(value.data), value.data)] = refnum
+        else:
             self._objidtable[id(value)] = refnum
 
         # And finally recurse into containers
@@ -842,12 +861,11 @@ class _BinaryPlistWriter (object):
                 self._flatten(o)
 
     def _getrefnum(self, value):
-        try:
-            if isinstance(value, Data):
-                return self._objtable[(type(value.data), value.data)]
-            else:
-                return self._objtable[(type(value), value)]
-        except TypeError:
+        if isinstance(value, _scalars):
+            return self._objtable[(type(value), value)]
+        elif isinstance(value, Data):
+            return self._objtable[(type(value.data), value.data)]
+        else:
             return self._objidtable[id(value)]
 
     def _write_size(self, token, size):
diff -urpN Python-3.6.3/Lib/poplib.py Python-3.6.5/Lib/poplib.py
--- Python-3.6.3/Lib/poplib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/poplib.py	2018-03-28 11:19:31.000000000 +0200
@@ -308,7 +308,7 @@ class POP3:
         return self._shortcmd('RPOP %s' % user)
 
 
-    timestamp = re.compile(br'\+OK.*(<[^>]+>)')
+    timestamp = re.compile(br'\+OK.[^<]*(<.*>)')
 
     def apop(self, user, password):
         """Authorisation
diff -urpN Python-3.6.3/Lib/posixpath.py Python-3.6.5/Lib/posixpath.py
--- Python-3.6.3/Lib/posixpath.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/posixpath.py	2018-03-28 11:19:31.000000000 +0200
@@ -10,6 +10,18 @@ Some of this can actually be useful on n
 for manipulation of the pathname component of URLs.
 """
 
+# Strings representing various path-related bits and pieces.
+# These are primarily for export; internally, they are hardcoded.
+# Should be set before imports for resolving cyclic dependency.
+curdir = '.'
+pardir = '..'
+extsep = '.'
+sep = '/'
+pathsep = ':'
+defpath = ':/bin:/usr/bin'
+altsep = None
+devnull = '/dev/null'
+
 import os
 import sys
 import stat
@@ -25,16 +37,6 @@ __all__ = ["normcase","isabs","join","sp
            "devnull","realpath","supports_unicode_filenames","relpath",
            "commonpath"]
 
-# Strings representing various path-related bits and pieces.
-# These are primarily for export; internally, they are hardcoded.
-curdir = '.'
-pardir = '..'
-extsep = '.'
-sep = '/'
-pathsep = ':'
-defpath = ':/bin:/usr/bin'
-altsep = None
-devnull = '/dev/null'
 
 def _get_sep(path):
     if isinstance(path, bytes):
diff -urpN Python-3.6.3/Lib/pydoc.py Python-3.6.5/Lib/pydoc.py
--- Python-3.6.3/Lib/pydoc.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/pydoc.py	2018-03-28 11:19:31.000000000 +0200
@@ -1916,7 +1916,7 @@ has the same effect as typing a particul
 Welcome to Python {0}'s help utility!
 
 If this is your first time using Python, you should definitely check out
-the tutorial on the Internet at http://docs.python.org/{0}/tutorial/.
+the tutorial on the Internet at https://docs.python.org/{0}/tutorial/.
 
 Enter the name of any module, keyword, or topic to get help on writing
 Python programs and using Python modules.  To quit this help utility and
diff -urpN Python-3.6.3/Lib/pydoc_data/topics.py Python-3.6.5/Lib/pydoc_data/topics.py
--- Python-3.6.3/Lib/pydoc_data/topics.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/pydoc_data/topics.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
-# Autogenerated by Sphinx on Mon Sep 18 23:00:11 2017
+# Autogenerated by Sphinx on Tue Mar 13 21:13:16 2018
 topics = {'assert': 'The "assert" statement\n'
            '**********************\n'
            '\n'
@@ -483,15 +483,19 @@ topics = {'assert': 'The "assert" statem
                      '\n'
                      'object.__getattr__(self, name)\n'
                      '\n'
-                     '   Called when an attribute lookup has not found the '
-                     'attribute in the\n'
-                     '   usual places (i.e. it is not an instance attribute '
-                     'nor is it found\n'
-                     '   in the class tree for "self").  "name" is the '
-                     'attribute name. This\n'
-                     '   method should return the (computed) attribute value '
-                     'or raise an\n'
-                     '   "AttributeError" exception.\n'
+                     '   Called when the default attribute access fails with '
+                     'an\n'
+                     '   "AttributeError" (either "__getattribute__()" raises '
+                     'an\n'
+                     '   "AttributeError" because *name* is not an instance '
+                     'attribute or an\n'
+                     '   attribute in the class tree for "self"; or '
+                     '"__get__()" of a *name*\n'
+                     '   property raises "AttributeError").  This method '
+                     'should either\n'
+                     '   return the (computed) attribute value or raise an '
+                     '"AttributeError"\n'
+                     '   exception.\n'
                      '\n'
                      '   Note that if the attribute is found through the '
                      'normal mechanism,\n'
@@ -571,6 +575,41 @@ topics = {'assert': 'The "assert" statem
                      '   sorts it.\n'
                      '\n'
                      '\n'
+                     'Customizing module attribute access\n'
+                     '===================================\n'
+                     '\n'
+                     'For a more fine grained customization of the module '
+                     'behavior (setting\n'
+                     'attributes, properties, etc.), one can set the '
+                     '"__class__" attribute\n'
+                     'of a module object to a subclass of "types.ModuleType". '
+                     'For example:\n'
+                     '\n'
+                     '   import sys\n'
+                     '   from types import ModuleType\n'
+                     '\n'
+                     '   class VerboseModule(ModuleType):\n'
+                     '       def __repr__(self):\n'
+                     "           return f'Verbose {self.__name__}'\n"
+                     '\n'
+                     '       def __setattr__(self, attr, value):\n'
+                     "           print(f'Setting {attr}...')\n"
+                     '           setattr(self, attr, value)\n'
+                     '\n'
+                     '   sys.modules[__name__].__class__ = VerboseModule\n'
+                     '\n'
+                     'Note: Setting module "__class__" only affects lookups '
+                     'made using the\n'
+                     '  attribute access syntax -- directly accessing the '
+                     'module globals\n'
+                     '  (whether by code within the module, or via a reference '
+                     'to the\n'
+                     "  module's globals dictionary) is unaffected.\n"
+                     '\n'
+                     'Changed in version 3.5: "__class__" module attribute is '
+                     'now writable.\n'
+                     '\n'
+                     '\n'
                      'Implementing Descriptors\n'
                      '========================\n'
                      '\n'
@@ -742,23 +781,15 @@ topics = {'assert': 'The "assert" statem
                      '__slots__\n'
                      '=========\n'
                      '\n'
-                     'By default, instances of classes have a dictionary for '
-                     'attribute\n'
-                     'storage.  This wastes space for objects having very few '
-                     'instance\n'
-                     'variables.  The space consumption can become acute when '
-                     'creating large\n'
-                     'numbers of instances.\n'
-                     '\n'
-                     'The default can be overridden by defining *__slots__* in '
-                     'a class\n'
-                     'definition. The *__slots__* declaration takes a sequence '
-                     'of instance\n'
-                     'variables and reserves just enough space in each '
-                     'instance to hold a\n'
-                     'value for each variable.  Space is saved because '
-                     '*__dict__* is not\n'
-                     'created for each instance.\n'
+                     '*__slots__* allow us to explicitly declare data members '
+                     '(like\n'
+                     'properties) and deny the creation of *__dict__* and '
+                     '*__weakref__*\n'
+                     '(unless explicitly declared in *__slots__* or available '
+                     'in a parent.)\n'
+                     '\n'
+                     'The space saved over using *__dict__* can be '
+                     'significant.\n'
                      '\n'
                      'object.__slots__\n'
                      '\n'
@@ -778,9 +809,9 @@ topics = {'assert': 'The "assert" statem
                      '\n'
                      '* When inheriting from a class without *__slots__*, the '
                      '*__dict__*\n'
-                     '  attribute of that class will always be accessible, so '
-                     'a *__slots__*\n'
-                     '  definition in the subclass is meaningless.\n'
+                     '  and *__weakref__* attribute of the instances will '
+                     'always be\n'
+                     '  accessible.\n'
                      '\n'
                      '* Without a *__dict__* variable, instances cannot be '
                      'assigned new\n'
@@ -814,13 +845,16 @@ topics = {'assert': 'The "assert" statem
                      'the class\n'
                      '  attribute would overwrite the descriptor assignment.\n'
                      '\n'
-                     '* The action of a *__slots__* declaration is limited to '
-                     'the class\n'
-                     '  where it is defined.  As a result, subclasses will '
-                     'have a *__dict__*\n'
-                     '  unless they also define *__slots__* (which must only '
-                     'contain names\n'
-                     '  of any *additional* slots).\n'
+                     '* The action of a *__slots__* declaration is not limited '
+                     'to the\n'
+                     '  class where it is defined.  *__slots__* declared in '
+                     'parents are\n'
+                     '  available in child classes. However, child subclasses '
+                     'will get a\n'
+                     '  *__dict__* and *__weakref__* unless they also define '
+                     '*__slots__*\n'
+                     '  (which should only contain names of any *additional* '
+                     'slots).\n'
                      '\n'
                      '* If a class defines a slot also defined in a base '
                      'class, the\n'
@@ -845,7 +879,15 @@ topics = {'assert': 'The "assert" statem
                      '\n'
                      '* *__class__* assignment works only if both classes have '
                      'the same\n'
-                     '  *__slots__*.\n',
+                     '  *__slots__*.\n'
+                     '\n'
+                     '* Multiple inheritance with multiple slotted parent '
+                     'classes can be\n'
+                     '  used, but only one parent is allowed to have '
+                     'attributes created by\n'
+                     '  slots (the other bases must have empty slot layouts) - '
+                     'violations\n'
+                     '  raise "TypeError".\n',
  'attribute-references': 'Attribute references\n'
                          '********************\n'
                          '\n'
@@ -2674,7 +2716,6 @@ topics = {'assert': 'The "assert" statem
              '   mgr = (EXPR)\n'
              '   aexit = type(mgr).__aexit__\n'
              '   aenter = type(mgr).__aenter__(mgr)\n'
-             '   exc = True\n'
              '\n'
              '   VAR = await aenter\n'
              '   try:\n'
@@ -2894,63 +2935,52 @@ topics = {'assert': 'The "assert" statem
                   '\n'
                   '   Called when the instance is about to be destroyed.  This '
                   'is also\n'
-                  '   called a destructor.  If a base class has a "__del__()" '
-                  'method, the\n'
-                  '   derived class\'s "__del__()" method, if any, must '
-                  'explicitly call it\n'
-                  '   to ensure proper deletion of the base class part of the '
-                  'instance.\n'
-                  '   Note that it is possible (though not recommended!) for '
+                  '   called a finalizer or (improperly) a destructor.  If a '
+                  'base class\n'
+                  '   has a "__del__()" method, the derived class\'s '
+                  '"__del__()" method,\n'
+                  '   if any, must explicitly call it to ensure proper '
+                  'deletion of the\n'
+                  '   base class part of the instance.\n'
+                  '\n'
+                  '   It is possible (though not recommended!) for the '
+                  '"__del__()" method\n'
+                  '   to postpone destruction of the instance by creating a '
+                  'new reference\n'
+                  '   to it.  This is called object *resurrection*.  It is\n'
+                  '   implementation-dependent whether "__del__()" is called a '
+                  'second\n'
+                  '   time when a resurrected object is about to be destroyed; '
                   'the\n'
-                  '   "__del__()" method to postpone destruction of the '
-                  'instance by\n'
-                  '   creating a new reference to it.  It may then be called '
-                  'at a later\n'
-                  '   time when this new reference is deleted.  It is not '
-                  'guaranteed that\n'
-                  '   "__del__()" methods are called for objects that still '
-                  'exist when\n'
-                  '   the interpreter exits.\n'
+                  '   current *CPython* implementation only calls it once.\n'
+                  '\n'
+                  '   It is not guaranteed that "__del__()" methods are called '
+                  'for\n'
+                  '   objects that still exist when the interpreter exits.\n'
                   '\n'
                   '   Note: "del x" doesn\'t directly call "x.__del__()" --- '
                   'the former\n'
                   '     decrements the reference count for "x" by one, and the '
                   'latter is\n'
-                  '     only called when "x"\'s reference count reaches zero.  '
-                  'Some common\n'
-                  '     situations that may prevent the reference count of an '
-                  'object from\n'
-                  '     going to zero include: circular references between '
-                  'objects (e.g.,\n'
-                  '     a doubly-linked list or a tree data structure with '
-                  'parent and\n'
-                  '     child pointers); a reference to the object on the '
-                  'stack frame of\n'
-                  '     a function that caught an exception (the traceback '
-                  'stored in\n'
-                  '     "sys.exc_info()[2]" keeps the stack frame alive); or a '
+                  '     only called when "x"\'s reference count reaches zero.\n'
+                  '\n'
+                  '   **CPython implementation detail:** It is possible for a '
                   'reference\n'
-                  '     to the object on the stack frame that raised an '
-                  'unhandled\n'
-                  '     exception in interactive mode (the traceback stored '
-                  'in\n'
-                  '     "sys.last_traceback" keeps the stack frame alive).  '
-                  'The first\n'
-                  '     situation can only be remedied by explicitly breaking '
-                  'the cycles;\n'
-                  '     the second can be resolved by freeing the reference to '
-                  'the\n'
-                  '     traceback object when it is no longer useful, and the '
-                  'third can\n'
-                  '     be resolved by storing "None" in "sys.last_traceback". '
-                  'Circular\n'
-                  '     references which are garbage are detected and cleaned '
-                  'up when the\n'
-                  "     cyclic garbage collector is enabled (it's on by "
-                  'default). Refer\n'
-                  '     to the documentation for the "gc" module for more '
-                  'information\n'
-                  '     about this topic.\n'
+                  '   cycle to prevent the reference count of an object from '
+                  'going to\n'
+                  '   zero.  In this case, the cycle will be later detected '
+                  'and deleted\n'
+                  '   by the *cyclic garbage collector*.  A common cause of '
+                  'reference\n'
+                  '   cycles is when an exception has been caught in a local '
+                  'variable.\n'
+                  "   The frame's locals then reference the exception, which "
+                  'references\n'
+                  '   its own traceback, which references the locals of all '
+                  'frames caught\n'
+                  '   in the traceback.\n'
+                  '\n'
+                  '   See also: Documentation for the "gc" module.\n'
                   '\n'
                   '   Warning: Due to the precarious circumstances under '
                   'which\n'
@@ -2958,29 +2988,35 @@ topics = {'assert': 'The "assert" statem
                   'during\n'
                   '     their execution are ignored, and a warning is printed '
                   'to\n'
-                  '     "sys.stderr" instead. Also, when "__del__()" is '
-                  'invoked in\n'
-                  '     response to a module being deleted (e.g., when '
-                  'execution of the\n'
-                  '     program is done), other globals referenced by the '
+                  '     "sys.stderr" instead. In particular:\n'
+                  '\n'
+                  '     * "__del__()" can be invoked when arbitrary code is '
+                  'being\n'
+                  '       executed, including from any arbitrary thread.  If '
                   '"__del__()"\n'
-                  '     method may already have been deleted or in the process '
-                  'of being\n'
-                  '     torn down (e.g. the import machinery shutting down).  '
-                  'For this\n'
-                  '     reason, "__del__()" methods should do the absolute '
-                  'minimum needed\n'
-                  '     to maintain external invariants.  Starting with '
-                  'version 1.5,\n'
-                  '     Python guarantees that globals whose name begins with '
-                  'a single\n'
-                  '     underscore are deleted from their module before other '
-                  'globals are\n'
-                  '     deleted; if no other references to such globals exist, '
-                  'this may\n'
-                  '     help in assuring that imported modules are still '
-                  'available at the\n'
-                  '     time when the "__del__()" method is called.\n'
+                  '       needs to take a lock or invoke any other blocking '
+                  'resource, it\n'
+                  '       may deadlock as the resource may already be taken by '
+                  'the code\n'
+                  '       that gets interrupted to execute "__del__()".\n'
+                  '\n'
+                  '     * "__del__()" can be executed during interpreter '
+                  'shutdown.  As\n'
+                  '       a consequence, the global variables it needs to '
+                  'access\n'
+                  '       (including other modules) may already have been '
+                  'deleted or set\n'
+                  '       to "None". Python guarantees that globals whose name '
+                  'begins\n'
+                  '       with a single underscore are deleted from their '
+                  'module before\n'
+                  '       other globals are deleted; if no other references to '
+                  'such\n'
+                  '       globals exist, this may help in assuring that '
+                  'imported modules\n'
+                  '       are still available at the time when the "__del__()" '
+                  'method is\n'
+                  '       called.\n'
                   '\n'
                   'object.__repr__(self)\n'
                   '\n'
@@ -4503,12 +4539,6 @@ topics = {'assert': 'The "assert" statem
              '   3.14    10.    .001    1e100    3.14e-10    0e0    '
              '3.14_15_93\n'
              '\n'
-             'Note that numeric literals do not include a sign; a phrase like '
-             '"-1"\n'
-             'is actually an expression composed of the unary operator "-" and '
-             'the\n'
-             'literal "1".\n'
-             '\n'
              'Changed in version 3.6: Underscores are now allowed for '
              'grouping\n'
              'purposes in literals.\n',
@@ -4613,9 +4643,9 @@ topics = {'assert': 'The "assert" statem
                   'conversion] [":" format_spec] "}"\n'
                   '      field_name        ::= arg_name ("." attribute_name | '
                   '"[" element_index "]")*\n'
-                  '      arg_name          ::= [identifier | integer]\n'
+                  '      arg_name          ::= [identifier | digit+]\n'
                   '      attribute_name    ::= identifier\n'
-                  '      element_index     ::= integer | index_string\n'
+                  '      element_index     ::= digit+ | index_string\n'
                   '      index_string      ::= <any source character except '
                   '"]"> +\n'
                   '      conversion        ::= "r" | "s" | "a"\n'
@@ -4774,9 +4804,9 @@ topics = {'assert': 'The "assert" statem
                   '   fill            ::= <any character>\n'
                   '   align           ::= "<" | ">" | "=" | "^"\n'
                   '   sign            ::= "+" | "-" | " "\n'
-                  '   width           ::= integer\n'
+                  '   width           ::= digit+\n'
                   '   grouping_option ::= "_" | ","\n'
-                  '   precision       ::= integer\n'
+                  '   precision       ::= digit+\n'
                   '   type            ::= "b" | "c" | "d" | "e" | "E" | "f" | '
                   '"F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"\n'
                   '\n'
@@ -5497,7 +5527,7 @@ topics = {'assert': 'The "assert" statem
            '\n'
            '**CPython implementation detail:** The current implementation does '
            'not\n'
-           'enforce some of these restriction, but programs should not abuse '
+           'enforce some of these restrictions, but programs should not abuse '
            'this\n'
            'freedom, as future implementations may enforce them or silently '
            'change\n'
@@ -6530,13 +6560,11 @@ topics = {'assert': 'The "assert" statem
                   'object.__complex__(self)\n'
                   'object.__int__(self)\n'
                   'object.__float__(self)\n'
-                  'object.__round__(self[, n])\n'
                   '\n'
                   '   Called to implement the built-in functions "complex()", '
-                  '"int()",\n'
-                  '   "float()" and "round()".  Should return a value of the '
-                  'appropriate\n'
-                  '   type.\n'
+                  '"int()" and\n'
+                  '   "float()".  Should return a value of the appropriate '
+                  'type.\n'
                   '\n'
                   'object.__index__(self)\n'
                   '\n'
@@ -6554,7 +6582,25 @@ topics = {'assert': 'The "assert" statem
                   'when\n'
                   '     "__index__()" is defined "__int__()" should also be '
                   'defined, and\n'
-                  '     both should return the same value.\n',
+                  '     both should return the same value.\n'
+                  '\n'
+                  'object.__round__(self[, ndigits])\n'
+                  'object.__trunc__(self)\n'
+                  'object.__floor__(self)\n'
+                  'object.__ceil__(self)\n'
+                  '\n'
+                  '   Called to implement the built-in function "round()" and '
+                  '"math"\n'
+                  '   functions "trunc()", "floor()" and "ceil()". Unless '
+                  '*ndigits* is\n'
+                  '   passed to "__round__()" all these methods should return '
+                  'the value\n'
+                  '   of the object truncated to an "Integral" (typically an '
+                  '"int").\n'
+                  '\n'
+                  '   If "__int__()" is not defined then the built-in function '
+                  '"int()"\n'
+                  '   falls back to "__trunc__()".\n',
  'objects': 'Objects, values and types\n'
             '*************************\n'
             '\n'
@@ -6744,7 +6790,9 @@ topics = {'assert': 'The "assert" statem
                      'Addition and subtraction              |\n'
                      '+-------------------------------------------------+---------------------------------------+\n'
                      '| "*", "@", "/", "//", "%"                        | '
-                     'Multiplication, matrix multiplication |\n'
+                     'Multiplication, matrix                |\n'
+                     '|                                                 | '
+                     'multiplication, division, floor       |\n'
                      '|                                                 | '
                      'division, remainder [5]               |\n'
                      '+-------------------------------------------------+---------------------------------------+\n'
@@ -7553,91 +7601,87 @@ topics = {'assert': 'The "assert" statem
                  '\n'
                  '   Called when the instance is about to be destroyed.  This '
                  'is also\n'
-                 '   called a destructor.  If a base class has a "__del__()" '
-                 'method, the\n'
-                 '   derived class\'s "__del__()" method, if any, must '
-                 'explicitly call it\n'
-                 '   to ensure proper deletion of the base class part of the '
-                 'instance.\n'
-                 '   Note that it is possible (though not recommended!) for '
+                 '   called a finalizer or (improperly) a destructor.  If a '
+                 'base class\n'
+                 '   has a "__del__()" method, the derived class\'s '
+                 '"__del__()" method,\n'
+                 '   if any, must explicitly call it to ensure proper deletion '
+                 'of the\n'
+                 '   base class part of the instance.\n'
+                 '\n'
+                 '   It is possible (though not recommended!) for the '
+                 '"__del__()" method\n'
+                 '   to postpone destruction of the instance by creating a new '
+                 'reference\n'
+                 '   to it.  This is called object *resurrection*.  It is\n'
+                 '   implementation-dependent whether "__del__()" is called a '
+                 'second\n'
+                 '   time when a resurrected object is about to be destroyed; '
                  'the\n'
-                 '   "__del__()" method to postpone destruction of the '
-                 'instance by\n'
-                 '   creating a new reference to it.  It may then be called at '
-                 'a later\n'
-                 '   time when this new reference is deleted.  It is not '
-                 'guaranteed that\n'
-                 '   "__del__()" methods are called for objects that still '
-                 'exist when\n'
-                 '   the interpreter exits.\n'
+                 '   current *CPython* implementation only calls it once.\n'
+                 '\n'
+                 '   It is not guaranteed that "__del__()" methods are called '
+                 'for\n'
+                 '   objects that still exist when the interpreter exits.\n'
                  '\n'
                  '   Note: "del x" doesn\'t directly call "x.__del__()" --- '
                  'the former\n'
                  '     decrements the reference count for "x" by one, and the '
                  'latter is\n'
-                 '     only called when "x"\'s reference count reaches zero.  '
-                 'Some common\n'
-                 '     situations that may prevent the reference count of an '
-                 'object from\n'
-                 '     going to zero include: circular references between '
-                 'objects (e.g.,\n'
-                 '     a doubly-linked list or a tree data structure with '
-                 'parent and\n'
-                 '     child pointers); a reference to the object on the stack '
-                 'frame of\n'
-                 '     a function that caught an exception (the traceback '
-                 'stored in\n'
-                 '     "sys.exc_info()[2]" keeps the stack frame alive); or a '
+                 '     only called when "x"\'s reference count reaches zero.\n'
+                 '\n'
+                 '   **CPython implementation detail:** It is possible for a '
                  'reference\n'
-                 '     to the object on the stack frame that raised an '
-                 'unhandled\n'
-                 '     exception in interactive mode (the traceback stored in\n'
-                 '     "sys.last_traceback" keeps the stack frame alive).  The '
-                 'first\n'
-                 '     situation can only be remedied by explicitly breaking '
-                 'the cycles;\n'
-                 '     the second can be resolved by freeing the reference to '
-                 'the\n'
-                 '     traceback object when it is no longer useful, and the '
-                 'third can\n'
-                 '     be resolved by storing "None" in "sys.last_traceback". '
-                 'Circular\n'
-                 '     references which are garbage are detected and cleaned '
-                 'up when the\n'
-                 "     cyclic garbage collector is enabled (it's on by "
-                 'default). Refer\n'
-                 '     to the documentation for the "gc" module for more '
-                 'information\n'
-                 '     about this topic.\n'
+                 '   cycle to prevent the reference count of an object from '
+                 'going to\n'
+                 '   zero.  In this case, the cycle will be later detected and '
+                 'deleted\n'
+                 '   by the *cyclic garbage collector*.  A common cause of '
+                 'reference\n'
+                 '   cycles is when an exception has been caught in a local '
+                 'variable.\n'
+                 "   The frame's locals then reference the exception, which "
+                 'references\n'
+                 '   its own traceback, which references the locals of all '
+                 'frames caught\n'
+                 '   in the traceback.\n'
+                 '\n'
+                 '   See also: Documentation for the "gc" module.\n'
                  '\n'
                  '   Warning: Due to the precarious circumstances under which\n'
                  '     "__del__()" methods are invoked, exceptions that occur '
                  'during\n'
                  '     their execution are ignored, and a warning is printed '
                  'to\n'
-                 '     "sys.stderr" instead. Also, when "__del__()" is invoked '
-                 'in\n'
-                 '     response to a module being deleted (e.g., when '
-                 'execution of the\n'
-                 '     program is done), other globals referenced by the '
+                 '     "sys.stderr" instead. In particular:\n'
+                 '\n'
+                 '     * "__del__()" can be invoked when arbitrary code is '
+                 'being\n'
+                 '       executed, including from any arbitrary thread.  If '
                  '"__del__()"\n'
-                 '     method may already have been deleted or in the process '
-                 'of being\n'
-                 '     torn down (e.g. the import machinery shutting down).  '
-                 'For this\n'
-                 '     reason, "__del__()" methods should do the absolute '
-                 'minimum needed\n'
-                 '     to maintain external invariants.  Starting with version '
-                 '1.5,\n'
-                 '     Python guarantees that globals whose name begins with a '
-                 'single\n'
-                 '     underscore are deleted from their module before other '
-                 'globals are\n'
-                 '     deleted; if no other references to such globals exist, '
-                 'this may\n'
-                 '     help in assuring that imported modules are still '
-                 'available at the\n'
-                 '     time when the "__del__()" method is called.\n'
+                 '       needs to take a lock or invoke any other blocking '
+                 'resource, it\n'
+                 '       may deadlock as the resource may already be taken by '
+                 'the code\n'
+                 '       that gets interrupted to execute "__del__()".\n'
+                 '\n'
+                 '     * "__del__()" can be executed during interpreter '
+                 'shutdown.  As\n'
+                 '       a consequence, the global variables it needs to '
+                 'access\n'
+                 '       (including other modules) may already have been '
+                 'deleted or set\n'
+                 '       to "None". Python guarantees that globals whose name '
+                 'begins\n'
+                 '       with a single underscore are deleted from their '
+                 'module before\n'
+                 '       other globals are deleted; if no other references to '
+                 'such\n'
+                 '       globals exist, this may help in assuring that '
+                 'imported modules\n'
+                 '       are still available at the time when the "__del__()" '
+                 'method is\n'
+                 '       called.\n'
                  '\n'
                  'object.__repr__(self)\n'
                  '\n'
@@ -7929,15 +7973,17 @@ topics = {'assert': 'The "assert" statem
                  '\n'
                  'object.__getattr__(self, name)\n'
                  '\n'
-                 '   Called when an attribute lookup has not found the '
-                 'attribute in the\n'
-                 '   usual places (i.e. it is not an instance attribute nor is '
-                 'it found\n'
-                 '   in the class tree for "self").  "name" is the attribute '
-                 'name. This\n'
-                 '   method should return the (computed) attribute value or '
-                 'raise an\n'
-                 '   "AttributeError" exception.\n'
+                 '   Called when the default attribute access fails with an\n'
+                 '   "AttributeError" (either "__getattribute__()" raises an\n'
+                 '   "AttributeError" because *name* is not an instance '
+                 'attribute or an\n'
+                 '   attribute in the class tree for "self"; or "__get__()" of '
+                 'a *name*\n'
+                 '   property raises "AttributeError").  This method should '
+                 'either\n'
+                 '   return the (computed) attribute value or raise an '
+                 '"AttributeError"\n'
+                 '   exception.\n'
                  '\n'
                  '   Note that if the attribute is found through the normal '
                  'mechanism,\n'
@@ -8016,6 +8062,41 @@ topics = {'assert': 'The "assert" statem
                  '   sorts it.\n'
                  '\n'
                  '\n'
+                 'Customizing module attribute access\n'
+                 '-----------------------------------\n'
+                 '\n'
+                 'For a more fine grained customization of the module behavior '
+                 '(setting\n'
+                 'attributes, properties, etc.), one can set the "__class__" '
+                 'attribute\n'
+                 'of a module object to a subclass of "types.ModuleType". For '
+                 'example:\n'
+                 '\n'
+                 '   import sys\n'
+                 '   from types import ModuleType\n'
+                 '\n'
+                 '   class VerboseModule(ModuleType):\n'
+                 '       def __repr__(self):\n'
+                 "           return f'Verbose {self.__name__}'\n"
+                 '\n'
+                 '       def __setattr__(self, attr, value):\n'
+                 "           print(f'Setting {attr}...')\n"
+                 '           setattr(self, attr, value)\n'
+                 '\n'
+                 '   sys.modules[__name__].__class__ = VerboseModule\n'
+                 '\n'
+                 'Note: Setting module "__class__" only affects lookups made '
+                 'using the\n'
+                 '  attribute access syntax -- directly accessing the module '
+                 'globals\n'
+                 '  (whether by code within the module, or via a reference to '
+                 'the\n'
+                 "  module's globals dictionary) is unaffected.\n"
+                 '\n'
+                 'Changed in version 3.5: "__class__" module attribute is now '
+                 'writable.\n'
+                 '\n'
+                 '\n'
                  'Implementing Descriptors\n'
                  '------------------------\n'
                  '\n'
@@ -8184,23 +8265,14 @@ topics = {'assert': 'The "assert" statem
                  '__slots__\n'
                  '---------\n'
                  '\n'
-                 'By default, instances of classes have a dictionary for '
-                 'attribute\n'
-                 'storage.  This wastes space for objects having very few '
-                 'instance\n'
-                 'variables.  The space consumption can become acute when '
-                 'creating large\n'
-                 'numbers of instances.\n'
+                 '*__slots__* allow us to explicitly declare data members '
+                 '(like\n'
+                 'properties) and deny the creation of *__dict__* and '
+                 '*__weakref__*\n'
+                 '(unless explicitly declared in *__slots__* or available in a '
+                 'parent.)\n'
                  '\n'
-                 'The default can be overridden by defining *__slots__* in a '
-                 'class\n'
-                 'definition. The *__slots__* declaration takes a sequence of '
-                 'instance\n'
-                 'variables and reserves just enough space in each instance to '
-                 'hold a\n'
-                 'value for each variable.  Space is saved because *__dict__* '
-                 'is not\n'
-                 'created for each instance.\n'
+                 'The space saved over using *__dict__* can be significant.\n'
                  '\n'
                  'object.__slots__\n'
                  '\n'
@@ -8220,9 +8292,9 @@ topics = {'assert': 'The "assert" statem
                  '\n'
                  '* When inheriting from a class without *__slots__*, the '
                  '*__dict__*\n'
-                 '  attribute of that class will always be accessible, so a '
-                 '*__slots__*\n'
-                 '  definition in the subclass is meaningless.\n'
+                 '  and *__weakref__* attribute of the instances will always '
+                 'be\n'
+                 '  accessible.\n'
                  '\n'
                  '* Without a *__dict__* variable, instances cannot be '
                  'assigned new\n'
@@ -8254,13 +8326,16 @@ topics = {'assert': 'The "assert" statem
                  'class\n'
                  '  attribute would overwrite the descriptor assignment.\n'
                  '\n'
-                 '* The action of a *__slots__* declaration is limited to the '
-                 'class\n'
-                 '  where it is defined.  As a result, subclasses will have a '
-                 '*__dict__*\n'
-                 '  unless they also define *__slots__* (which must only '
-                 'contain names\n'
-                 '  of any *additional* slots).\n'
+                 '* The action of a *__slots__* declaration is not limited to '
+                 'the\n'
+                 '  class where it is defined.  *__slots__* declared in '
+                 'parents are\n'
+                 '  available in child classes. However, child subclasses will '
+                 'get a\n'
+                 '  *__dict__* and *__weakref__* unless they also define '
+                 '*__slots__*\n'
+                 '  (which should only contain names of any *additional* '
+                 'slots).\n'
                  '\n'
                  '* If a class defines a slot also defined in a base class, '
                  'the\n'
@@ -8287,6 +8362,14 @@ topics = {'assert': 'The "assert" statem
                  'same\n'
                  '  *__slots__*.\n'
                  '\n'
+                 '* Multiple inheritance with multiple slotted parent classes '
+                 'can be\n'
+                 '  used, but only one parent is allowed to have attributes '
+                 'created by\n'
+                 '  slots (the other bases must have empty slot layouts) - '
+                 'violations\n'
+                 '  raise "TypeError".\n'
+                 '\n'
                  '\n'
                  'Customizing class creation\n'
                  '==========================\n'
@@ -9054,13 +9137,11 @@ topics = {'assert': 'The "assert" statem
                  'object.__complex__(self)\n'
                  'object.__int__(self)\n'
                  'object.__float__(self)\n'
-                 'object.__round__(self[, n])\n'
                  '\n'
                  '   Called to implement the built-in functions "complex()", '
-                 '"int()",\n'
-                 '   "float()" and "round()".  Should return a value of the '
-                 'appropriate\n'
-                 '   type.\n'
+                 '"int()" and\n'
+                 '   "float()".  Should return a value of the appropriate '
+                 'type.\n'
                  '\n'
                  'object.__index__(self)\n'
                  '\n'
@@ -9080,6 +9161,24 @@ topics = {'assert': 'The "assert" statem
                  'defined, and\n'
                  '     both should return the same value.\n'
                  '\n'
+                 'object.__round__(self[, ndigits])\n'
+                 'object.__trunc__(self)\n'
+                 'object.__floor__(self)\n'
+                 'object.__ceil__(self)\n'
+                 '\n'
+                 '   Called to implement the built-in function "round()" and '
+                 '"math"\n'
+                 '   functions "trunc()", "floor()" and "ceil()". Unless '
+                 '*ndigits* is\n'
+                 '   passed to "__round__()" all these methods should return '
+                 'the value\n'
+                 '   of the object truncated to an "Integral" (typically an '
+                 '"int").\n'
+                 '\n'
+                 '   If "__int__()" is not defined then the built-in function '
+                 '"int()"\n'
+                 '   falls back to "__trunc__()".\n'
+                 '\n'
                  '\n'
                  'With Statement Context Managers\n'
                  '===============================\n'
@@ -9414,6 +9513,27 @@ topics = {'assert': 'The "assert" statem
                    '   formatting options that can be specified in format '
                    'strings.\n'
                    '\n'
+                   '   Note: When formatting a number ("int", "float", "float" '
+                   'and\n'
+                   '     subclasses) with the "n" type (ex: '
+                   '"\'{:n}\'.format(1234)"), the\n'
+                   '     function sets temporarily the "LC_CTYPE" locale to '
+                   'the\n'
+                   '     "LC_NUMERIC" locale to decode "decimal_point" and '
+                   '"thousands_sep"\n'
+                   '     fields of "localeconv()" if they are non-ASCII or '
+                   'longer than 1\n'
+                   '     byte, and the "LC_NUMERIC" locale is different than '
+                   'the\n'
+                   '     "LC_CTYPE" locale. This temporary change affects '
+                   'other threads.\n'
+                   '\n'
+                   '   Changed in version 3.6.5: When formatting a number with '
+                   'the "n"\n'
+                   '   type, the function sets temporarily the "LC_CTYPE" '
+                   'locale to the\n'
+                   '   "LC_NUMERIC" locale in some cases.\n'
+                   '\n'
                    'str.format_map(mapping)\n'
                    '\n'
                    '   Similar to "str.format(**mapping)", except that '
@@ -10102,11 +10222,6 @@ topics = {'assert': 'The "assert" statem
             'or\n'
             'greater must be expressed with escapes.\n'
             '\n'
-            'As of Python 3.3 it is possible again to prefix string literals '
-            'with a\n'
-            '"u" prefix to simplify maintenance of dual 2.x and 3.x '
-            'codebases.\n'
-            '\n'
             'Both string and bytes literals may optionally be prefixed with a\n'
             'letter "\'r\'" or "\'R\'"; such strings are called *raw strings* '
             'and treat\n'
@@ -12183,18 +12298,18 @@ topics = {'assert': 'The "assert" statem
              '   sequence concatenation or repetition.\n'
              '\n'
              '8. "index" raises "ValueError" when *x* is not found in *s*. '
-             'When\n'
-             '   supported, the additional arguments to the index method '
-             'allow\n'
-             '   efficient searching of subsections of the sequence. Passing '
-             'the\n'
-             '   extra arguments is roughly equivalent to using '
-             '"s[i:j].index(x)",\n'
-             '   only without copying any data and with the returned index '
-             'being\n'
-             '   relative to the start of the sequence rather than the start '
-             'of the\n'
-             '   slice.\n'
+             'Not\n'
+             '   all implementations support passing the additional arguments '
+             '*i*\n'
+             '   and *j*. These arguments allow efficient searching of '
+             'subsections\n'
+             '   of the sequence. Passing the extra arguments is roughly '
+             'equivalent\n'
+             '   to using "s[i:j].index(x)", only without copying any data and '
+             'with\n'
+             '   the returned index being relative to the start of the '
+             'sequence\n'
+             '   rather than the start of the slice.\n'
              '\n'
              '\n'
              'Immutable Sequence Types\n'
diff -urpN Python-3.6.3/Lib/random.py Python-3.6.5/Lib/random.py
--- Python-3.6.3/Lib/random.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/random.py	2018-03-28 11:19:31.000000000 +0200
@@ -109,9 +109,10 @@ class Random(_random.Random):
         """
 
         if version == 1 and isinstance(a, (str, bytes)):
+            a = a.decode('latin-1') if isinstance(a, bytes) else a
             x = ord(a[0]) << 7 if a else 0
-            for c in a:
-                x = ((1000003 * x) ^ ord(c)) & 0xFFFFFFFFFFFFFFFF
+            for c in map(ord, a):
+                x = ((1000003 * x) ^ c) & 0xFFFFFFFFFFFFFFFF
             x ^= len(a)
             a = -2 if x == -1 else x
 
diff -urpN Python-3.6.3/Lib/smtplib.py Python-3.6.5/Lib/smtplib.py
--- Python-3.6.3/Lib/smtplib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/smtplib.py	2018-03-28 11:19:31.000000000 +0200
@@ -933,6 +933,7 @@ class SMTP:
             from_addr = (msg[header_prefix + 'Sender']
                            if (header_prefix + 'Sender') in msg
                            else msg[header_prefix + 'From'])
+            from_addr = email.utils.getaddresses([from_addr])[0][1]
         if to_addrs is None:
             addr_fields = [f for f in (msg[header_prefix + 'To'],
                                        msg[header_prefix + 'Bcc'],
diff -urpN Python-3.6.3/Lib/sqlite3/test/regression.py Python-3.6.5/Lib/sqlite3/test/regression.py
--- Python-3.6.3/Lib/sqlite3/test/regression.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/sqlite3/test/regression.py	2018-03-28 11:19:31.000000000 +0200
@@ -24,6 +24,8 @@
 import datetime
 import unittest
 import sqlite3 as sqlite
+import weakref
+from test import support
 
 class RegressionTests(unittest.TestCase):
     def setUp(self):
@@ -188,6 +190,9 @@ class RegressionTests(unittest.TestCase)
         cur = Cursor(con)
         with self.assertRaises(sqlite.ProgrammingError):
             cur.execute("select 4+5").fetchall()
+        with self.assertRaisesRegex(sqlite.ProgrammingError,
+                                    r'^Base Cursor\.__init__ not called\.$'):
+            cur.close()
 
     def CheckStrSubclass(self):
         """
@@ -376,6 +381,22 @@ class RegressionTests(unittest.TestCase)
                 counter += 1
         self.assertEqual(counter, 3, "should have returned exactly three rows")
 
+    def CheckBpo31770(self):
+        """
+        The interpreter shouldn't crash in case Cursor.__init__() is called
+        more than once.
+        """
+        def callback(*args):
+            pass
+        con = sqlite.connect(":memory:")
+        cur = sqlite.Cursor(con)
+        ref = weakref.ref(cur, callback)
+        cur.__init__(con)
+        del cur
+        # The interpreter shouldn't crash when ref is collected.
+        del ref
+        support.gc_collect()
+
 
 def suite():
     regression_suite = unittest.makeSuite(RegressionTests, "Check")
diff -urpN Python-3.6.3/Lib/string.py Python-3.6.5/Lib/string.py
--- Python-3.6.3/Lib/string.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/string.py	2018-03-28 11:19:31.000000000 +0200
@@ -78,7 +78,11 @@ class Template(metaclass=_TemplateMetacl
     """A string class for supporting $-substitutions."""
 
     delimiter = '$'
-    idpattern = r'[_a-z][_a-z0-9]*'
+    # r'[a-z]' matches to non-ASCII letters when used with IGNORECASE,
+    # but without ASCII flag.  We can't add re.ASCII to flags because of
+    # backward compatibility.  So we use local -i flag and [a-zA-Z] pattern.
+    # See https://bugs.python.org/issue31672
+    idpattern = r'(?-i:[_a-zA-Z][_a-zA-Z0-9]*)'
     flags = _re.IGNORECASE
 
     def __init__(self, template):
diff -urpN Python-3.6.3/Lib/tarfile.py Python-3.6.5/Lib/tarfile.py
--- Python-3.6.3/Lib/tarfile.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/tarfile.py	2018-03-28 11:19:31.000000000 +0200
@@ -202,8 +202,9 @@ def itn(n, digits=8, format=DEFAULT_FORM
     # base-256 representation. This allows values up to (256**(digits-1))-1.
     # A 0o200 byte indicates a positive number, a 0o377 byte a negative
     # number.
+    n = int(n)
     if 0 <= n < 8 ** (digits - 1):
-        s = bytes("%0*o" % (digits - 1, int(n)), "ascii") + NUL
+        s = bytes("%0*o" % (digits - 1, n), "ascii") + NUL
     elif format == GNU_FORMAT and -256 ** (digits - 1) <= n < 256 ** (digits - 1):
         if n >= 0:
             s = bytearray([0o200])
@@ -1056,7 +1057,7 @@ class TarInfo(object):
 
         # The old GNU sparse format occupies some of the unused
         # space in the buffer for up to 4 sparse structures.
-        # Save the them for later processing in _proc_sparse().
+        # Save them for later processing in _proc_sparse().
         if obj.type == GNUTYPE_SPARSE:
             pos = 386
             structs = []
diff -urpN Python-3.6.3/Lib/test/_test_multiprocessing.py Python-3.6.5/Lib/test/_test_multiprocessing.py
--- Python-3.6.3/Lib/test/_test_multiprocessing.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/_test_multiprocessing.py	2018-03-28 11:19:31.000000000 +0200
@@ -4,6 +4,7 @@
 
 import unittest
 import queue as pyqueue
+import contextlib
 import time
 import io
 import itertools
@@ -425,6 +426,102 @@ class _TestProcess(BaseTestCase):
         self.assertEqual(q.get(), 5)
         close_queue(q)
 
+    @classmethod
+    def _test_error_on_stdio_flush(self, evt, break_std_streams={}):
+        for stream_name, action in break_std_streams.items():
+            if action == 'close':
+                stream = io.StringIO()
+                stream.close()
+            else:
+                assert action == 'remove'
+                stream = None
+            setattr(sys, stream_name, None)
+        evt.set()
+
+    def test_error_on_stdio_flush_1(self):
+        # Check that Process works with broken standard streams
+        streams = [io.StringIO(), None]
+        streams[0].close()
+        for stream_name in ('stdout', 'stderr'):
+            for stream in streams:
+                old_stream = getattr(sys, stream_name)
+                setattr(sys, stream_name, stream)
+                try:
+                    evt = self.Event()
+                    proc = self.Process(target=self._test_error_on_stdio_flush,
+                                        args=(evt,))
+                    proc.start()
+                    proc.join()
+                    self.assertTrue(evt.is_set())
+                    self.assertEqual(proc.exitcode, 0)
+                finally:
+                    setattr(sys, stream_name, old_stream)
+
+    def test_error_on_stdio_flush_2(self):
+        # Same as test_error_on_stdio_flush_1(), but standard streams are
+        # broken by the child process
+        for stream_name in ('stdout', 'stderr'):
+            for action in ('close', 'remove'):
+                old_stream = getattr(sys, stream_name)
+                try:
+                    evt = self.Event()
+                    proc = self.Process(target=self._test_error_on_stdio_flush,
+                                        args=(evt, {stream_name: action}))
+                    proc.start()
+                    proc.join()
+                    self.assertTrue(evt.is_set())
+                    self.assertEqual(proc.exitcode, 0)
+                finally:
+                    setattr(sys, stream_name, old_stream)
+
+    @classmethod
+    def _sleep_and_set_event(self, evt, delay=0.0):
+        time.sleep(delay)
+        evt.set()
+
+    def check_forkserver_death(self, signum):
+        # bpo-31308: if the forkserver process has died, we should still
+        # be able to create and run new Process instances (the forkserver
+        # is implicitly restarted).
+        if self.TYPE == 'threads':
+            self.skipTest('test not appropriate for {}'.format(self.TYPE))
+        sm = multiprocessing.get_start_method()
+        if sm != 'forkserver':
+            # The fork method by design inherits all fds from the parent,
+            # trying to go against it is a lost battle
+            self.skipTest('test not appropriate for {}'.format(sm))
+
+        from multiprocessing.forkserver import _forkserver
+        _forkserver.ensure_running()
+
+        evt = self.Event()
+        proc = self.Process(target=self._sleep_and_set_event, args=(evt, 1.0))
+        proc.start()
+
+        pid = _forkserver._forkserver_pid
+        os.kill(pid, signum)
+        time.sleep(1.0)  # give it time to die
+
+        evt2 = self.Event()
+        proc2 = self.Process(target=self._sleep_and_set_event, args=(evt2,))
+        proc2.start()
+        proc2.join()
+        self.assertTrue(evt2.is_set())
+        self.assertEqual(proc2.exitcode, 0)
+
+        proc.join()
+        self.assertTrue(evt.is_set())
+        self.assertIn(proc.exitcode, (0, 255))
+
+    def test_forkserver_sigint(self):
+        # Catchable signal
+        self.check_forkserver_death(signal.SIGINT)
+
+    def test_forkserver_sigkill(self):
+        # Uncatchable signal
+        if os.name != 'nt':
+            self.check_forkserver_death(signal.SIGKILL)
+
 
 #
 #
@@ -3826,7 +3923,7 @@ class TestNoForkBomb(unittest.TestCase):
 #
 
 class TestForkAwareThreadLock(unittest.TestCase):
-    # We recurisvely start processes.  Issue #17555 meant that the
+    # We recursively start processes.  Issue #17555 meant that the
     # after fork registry would get duplicate entries for the same
     # lock.  The size of the registry at generation n was ~2**n.
 
@@ -4056,14 +4153,14 @@ class TestStartMethod(unittest.TestCase)
             self.fail("failed spawning forkserver or grandchild")
 
 
-#
-# Check that killing process does not leak named semaphores
-#
-
 @unittest.skipIf(sys.platform == "win32",
                  "test semantics don't make sense on Windows")
 class TestSemaphoreTracker(unittest.TestCase):
+
     def test_semaphore_tracker(self):
+        #
+        # Check that killing process does not leak named semaphores
+        #
         import subprocess
         cmd = '''if 1:
             import multiprocessing as mp, time, os
@@ -4076,7 +4173,7 @@ class TestSemaphoreTracker(unittest.Test
         '''
         r, w = os.pipe()
         p = subprocess.Popen([sys.executable,
-                             '-c', cmd % (w, w)],
+                             '-E', '-c', cmd % (w, w)],
                              pass_fds=[w],
                              stderr=subprocess.PIPE)
         os.close(w)
@@ -4097,6 +4194,40 @@ class TestSemaphoreTracker(unittest.Test
         self.assertRegex(err, expected)
         self.assertRegex(err, r'semaphore_tracker: %r: \[Errno' % name1)
 
+    def check_semaphore_tracker_death(self, signum, should_die):
+        # bpo-31310: if the semaphore tracker process has died, it should
+        # be restarted implicitly.
+        from multiprocessing.semaphore_tracker import _semaphore_tracker
+        _semaphore_tracker.ensure_running()
+        pid = _semaphore_tracker._pid
+        os.kill(pid, signum)
+        time.sleep(1.0)  # give it time to die
+
+        ctx = multiprocessing.get_context("spawn")
+        with contextlib.ExitStack() as stack:
+            if should_die:
+                stack.enter_context(self.assertWarnsRegex(
+                    UserWarning,
+                    "semaphore_tracker: process died"))
+            sem = ctx.Semaphore()
+            sem.acquire()
+            sem.release()
+            wr = weakref.ref(sem)
+            # ensure `sem` gets collected, which triggers communication with
+            # the semaphore tracker
+            del sem
+            gc.collect()
+            self.assertIsNone(wr())
+
+    def test_semaphore_tracker_sigint(self):
+        # Catchable signal (ignored by semaphore tracker)
+        self.check_semaphore_tracker_death(signal.SIGINT, False)
+
+    def test_semaphore_tracker_sigkill(self):
+        # Uncatchable signal.
+        self.check_semaphore_tracker_death(signal.SIGKILL, True)
+
+
 class TestSimpleQueue(unittest.TestCase):
 
     @classmethod
diff -urpN Python-3.6.3/Lib/test/datetimetester.py Python-3.6.5/Lib/test/datetimetester.py
--- Python-3.6.3/Lib/test/datetimetester.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/datetimetester.py	2018-03-28 11:19:31.000000000 +0200
@@ -846,6 +846,46 @@ class TestTimeDelta(HarmlessMixedCompari
 
         self.assertRaises(TypeError, divmod, t, 10)
 
+    def test_issue31293(self):
+        # The interpreter shouldn't crash in case a timedelta is divided or
+        # multiplied by a float with a bad as_integer_ratio() method.
+        def get_bad_float(bad_ratio):
+            class BadFloat(float):
+                def as_integer_ratio(self):
+                    return bad_ratio
+            return BadFloat()
+
+        with self.assertRaises(TypeError):
+            timedelta() / get_bad_float(1 << 1000)
+        with self.assertRaises(TypeError):
+            timedelta() * get_bad_float(1 << 1000)
+
+        for bad_ratio in [(), (42, ), (1, 2, 3)]:
+            with self.assertRaises(ValueError):
+                timedelta() / get_bad_float(bad_ratio)
+            with self.assertRaises(ValueError):
+                timedelta() * get_bad_float(bad_ratio)
+
+    def test_issue31752(self):
+        # The interpreter shouldn't crash because divmod() returns negative
+        # remainder.
+        class BadInt(int):
+            def __mul__(self, other):
+                return Prod()
+
+        class Prod:
+            def __radd__(self, other):
+                return Sum()
+
+        class Sum(int):
+            def __divmod__(self, other):
+                # negative remainder
+                return (0, -1)
+
+        timedelta(microseconds=BadInt(1))
+        timedelta(hours=BadInt(1))
+        timedelta(weeks=BadInt(1))
+
 
 #############################################################################
 # date tests
@@ -1460,6 +1500,13 @@ class TestDate(HarmlessMixedComparison,
         base = cls(2000, 2, 29)
         self.assertRaises(ValueError, base.replace, year=2001)
 
+    def test_subclass_replace(self):
+        class DateSubclass(self.theclass):
+            pass
+
+        dt = DateSubclass(2012, 1, 1)
+        self.assertIs(type(dt.replace(year=2013)), DateSubclass)
+
     def test_subclass_date(self):
 
         class C(self.theclass):
@@ -1662,7 +1709,7 @@ class TestDateTime(TestDate):
 
         # Make sure comparison doesn't forget microseconds, and isn't done
         # via comparing a float timestamp (an IEEE double doesn't have enough
-        # precision to span microsecond resolution across years 1 thru 9999,
+        # precision to span microsecond resolution across years 1 through 9999,
         # so comparing via timestamp necessarily calls some distinct values
         # equal).
         dt1 = self.theclass(MAXYEAR, 12, 31, 23, 59, 59, 999998)
@@ -2559,6 +2606,13 @@ class TestTime(HarmlessMixedComparison,
         self.assertRaises(ValueError, base.replace, second=100)
         self.assertRaises(ValueError, base.replace, microsecond=1000000)
 
+    def test_subclass_replace(self):
+        class TimeSubclass(self.theclass):
+            pass
+
+        ctime = TimeSubclass(12, 30)
+        self.assertIs(type(ctime.replace(hour=10)), TimeSubclass)
+
     def test_subclass_time(self):
 
         class C(self.theclass):
diff -urpN Python-3.6.3/Lib/test/eintrdata/eintr_tester.py Python-3.6.5/Lib/test/eintrdata/eintr_tester.py
--- Python-3.6.3/Lib/test/eintrdata/eintr_tester.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/eintrdata/eintr_tester.py	2018-03-28 11:19:31.000000000 +0200
@@ -20,7 +20,6 @@ import time
 import unittest
 
 from test import support
-android_not_root = support.android_not_root
 
 @contextlib.contextmanager
 def kill_on_error(proc):
@@ -312,14 +311,16 @@ class SocketEINTRTest(EINTRBaseTest):
     # https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=203162
     @support.requires_freebsd_version(10, 3)
     @unittest.skipUnless(hasattr(os, 'mkfifo'), 'needs mkfifo()')
-    @unittest.skipIf(android_not_root, "mkfifo not allowed, non root user")
     def _test_open(self, do_open_close_reader, do_open_close_writer):
         filename = support.TESTFN
 
         # Use a fifo: until the child opens it for reading, the parent will
         # block when trying to open it for writing.
         support.unlink(filename)
-        os.mkfifo(filename)
+        try:
+            os.mkfifo(filename)
+        except PermissionError as e:
+            self.skipTest('os.mkfifo(): %s' % e)
         self.addCleanup(support.unlink, filename)
 
         code = '\n'.join((
diff -urpN Python-3.6.3/Lib/test/exception_hierarchy.txt Python-3.6.5/Lib/test/exception_hierarchy.txt
--- Python-3.6.3/Lib/test/exception_hierarchy.txt	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/exception_hierarchy.txt	2018-03-28 11:19:31.000000000 +0200
@@ -14,7 +14,7 @@ BaseException
       +-- BufferError
       +-- EOFError
       +-- ImportError
-           +-- ModuleNotFoundError
+      |    +-- ModuleNotFoundError
       +-- LookupError
       |    +-- IndexError
       |    +-- KeyError
diff -urpN Python-3.6.3/Lib/test/libregrtest/main.py Python-3.6.5/Lib/test/libregrtest/main.py
--- Python-3.6.3/Lib/test/libregrtest/main.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/libregrtest/main.py	2018-03-28 11:19:31.000000000 +0200
@@ -256,12 +256,12 @@ class Regrtest:
             if isinstance(test, unittest.TestSuite):
                 self._list_cases(test)
             elif isinstance(test, unittest.TestCase):
-                if support._match_test(test):
+                if support.match_test(test):
                     print(test.id())
 
     def list_cases(self):
         support.verbose = False
-        support.match_tests = self.ns.match_tests
+        support.set_match_tests(self.ns.match_tests)
 
         for test in self.selected:
             abstest = get_abs_module(self.ns, test)
diff -urpN Python-3.6.3/Lib/test/libregrtest/runtest.py Python-3.6.5/Lib/test/libregrtest/runtest.py
--- Python-3.6.3/Lib/test/libregrtest/runtest.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/libregrtest/runtest.py	2018-03-28 11:19:31.000000000 +0200
@@ -102,7 +102,7 @@ def runtest(ns, test):
     if use_timeout:
         faulthandler.dump_traceback_later(ns.timeout, exit=True)
     try:
-        support.match_tests = ns.match_tests
+        support.set_match_tests(ns.match_tests)
         if ns.failfast:
             support.failfast = True
         if output_on_failure:
diff -urpN Python-3.6.3/Lib/test/libregrtest/setup.py Python-3.6.5/Lib/test/libregrtest/setup.py
--- Python-3.6.3/Lib/test/libregrtest/setup.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/libregrtest/setup.py	2018-03-28 11:19:31.000000000 +0200
@@ -14,17 +14,26 @@ from test.libregrtest.refleak import war
 
 
 def setup_tests(ns):
-    # Display the Python traceback on fatal errors (e.g. segfault)
-    faulthandler.enable(all_threads=True)
+    try:
+        stderr_fd = sys.__stderr__.fileno()
+    except (ValueError, AttributeError):
+        # Catch ValueError to catch io.UnsupportedOperation on TextIOBase
+        # and ValueError on a closed stream.
+        #
+        # Catch AttributeError for stderr being None.
+        stderr_fd = None
+    else:
+        # Display the Python traceback on fatal errors (e.g. segfault)
+        faulthandler.enable(all_threads=True, file=stderr_fd)
 
-    # Display the Python traceback on SIGALRM or SIGUSR1 signal
-    signals = []
-    if hasattr(signal, 'SIGALRM'):
-        signals.append(signal.SIGALRM)
-    if hasattr(signal, 'SIGUSR1'):
-        signals.append(signal.SIGUSR1)
-    for signum in signals:
-        faulthandler.register(signum, chain=True)
+        # Display the Python traceback on SIGALRM or SIGUSR1 signal
+        signals = []
+        if hasattr(signal, 'SIGALRM'):
+            signals.append(signal.SIGALRM)
+        if hasattr(signal, 'SIGUSR1'):
+            signals.append(signal.SIGUSR1)
+        for signum in signals:
+            faulthandler.register(signum, chain=True, file=stderr_fd)
 
     replace_stdout()
     support.record_original_stdout(sys.stdout)
@@ -48,7 +57,7 @@ def setup_tests(ns):
         if hasattr(module, '__path__'):
             for index, path in enumerate(module.__path__):
                 module.__path__[index] = os.path.abspath(path)
-        if hasattr(module, '__file__'):
+        if getattr(module, '__file__', None):
             module.__file__ = os.path.abspath(module.__file__)
 
     # MacOSX (a.k.a. Darwin) has a default stack size that is too small
@@ -109,7 +118,17 @@ def replace_stdout():
     """Set stdout encoder error handler to backslashreplace (as stderr error
     handler) to avoid UnicodeEncodeError when printing a traceback"""
     stdout = sys.stdout
-    sys.stdout = open(stdout.fileno(), 'w',
+    try:
+        fd = stdout.fileno()
+    except ValueError:
+        # On IDLE, sys.stdout has no file descriptor and is not a TextIOWrapper
+        # object. Leaving sys.stdout unchanged.
+        #
+        # Catch ValueError to catch io.UnsupportedOperation on TextIOBase
+        # and ValueError on a closed stream.
+        return
+
+    sys.stdout = open(fd, 'w',
         encoding=stdout.encoding,
         errors="backslashreplace",
         closefd=False,
diff -urpN Python-3.6.3/Lib/test/list_tests.py Python-3.6.5/Lib/test/list_tests.py
--- Python-3.6.3/Lib/test/list_tests.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/list_tests.py	2018-03-28 11:19:31.000000000 +0200
@@ -53,10 +53,11 @@ class CommonTest(seq_tests.CommonTest):
         self.assertEqual(str(a2), "[0, 1, 2, [...], 3]")
         self.assertEqual(repr(a2), "[0, 1, 2, [...], 3]")
 
-        l0 = []
+    def test_repr_deep(self):
+        a = self.type2test([])
         for i in range(sys.getrecursionlimit() + 100):
-            l0 = [l0]
-        self.assertRaises(RecursionError, repr, l0)
+            a = self.type2test([a])
+        self.assertRaises(RecursionError, repr, a)
 
     def test_print(self):
         d = self.type2test(range(200))
diff -urpN Python-3.6.3/Lib/test/lock_tests.py Python-3.6.5/Lib/test/lock_tests.py
--- Python-3.6.3/Lib/test/lock_tests.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/lock_tests.py	2018-03-28 11:19:31.000000000 +0200
@@ -619,13 +619,14 @@ class BaseSemaphoreTests(BaseTestCase):
         sem = self.semtype(7)
         sem.acquire()
         N = 10
+        sem_results = []
         results1 = []
         results2 = []
         phase_num = 0
         def f():
-            sem.acquire()
+            sem_results.append(sem.acquire())
             results1.append(phase_num)
-            sem.acquire()
+            sem_results.append(sem.acquire())
             results2.append(phase_num)
         b = Bunch(f, 10)
         b.wait_for_started()
@@ -649,6 +650,7 @@ class BaseSemaphoreTests(BaseTestCase):
         # Final release, to let the last thread finish
         sem.release()
         b.wait_for_finished()
+        self.assertEqual(sem_results, [True] * (6 + 7 + 6 + 1))
 
     def test_try_acquire(self):
         sem = self.semtype(2)
diff -urpN Python-3.6.3/Lib/test/mapping_tests.py Python-3.6.5/Lib/test/mapping_tests.py
--- Python-3.6.3/Lib/test/mapping_tests.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/mapping_tests.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,6 +1,7 @@
 # tests common to dict and UserDict
 import unittest
 import collections
+import sys
 
 
 class BasicTestMappingProtocol(unittest.TestCase):
@@ -619,6 +620,14 @@ class TestHashMappingProtocol(TestMappin
         d = self._full_mapping({1: BadRepr()})
         self.assertRaises(Exc, repr, d)
 
+    def test_repr_deep(self):
+        d = self._empty_mapping()
+        for i in range(sys.getrecursionlimit() + 100):
+            d0 = d
+            d = self._empty_mapping()
+            d[1] = d0
+        self.assertRaises(RecursionError, repr, d)
+
     def test_eq(self):
         self.assertEqual(self._empty_mapping(), self._empty_mapping())
         self.assertEqual(self._full_mapping({1: 2}),
diff -urpN Python-3.6.3/Lib/test/pickletester.py Python-3.6.5/Lib/test/pickletester.py
--- Python-3.6.3/Lib/test/pickletester.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/pickletester.py	2018-03-28 11:19:31.000000000 +0200
@@ -2534,7 +2534,7 @@ class AbstractPickleModuleTests(unittest
         f = open(TESTFN, "wb")
         try:
             f.close()
-            self.assertRaises(ValueError, pickle.dump, 123, f)
+            self.assertRaises(ValueError, self.dump, 123, f)
         finally:
             os.remove(TESTFN)
 
@@ -2543,16 +2543,16 @@ class AbstractPickleModuleTests(unittest
         f = open(TESTFN, "wb")
         try:
             f.close()
-            self.assertRaises(ValueError, pickle.dump, 123, f)
+            self.assertRaises(ValueError, self.dump, 123, f)
         finally:
             os.remove(TESTFN)
 
     def test_load_from_and_dump_to_file(self):
         stream = io.BytesIO()
         data = [123, {}, 124]
-        pickle.dump(data, stream)
+        self.dump(data, stream)
         stream.seek(0)
-        unpickled = pickle.load(stream)
+        unpickled = self.load(stream)
         self.assertEqual(unpickled, data)
 
     def test_highest_protocol(self):
@@ -2562,20 +2562,20 @@ class AbstractPickleModuleTests(unittest
     def test_callapi(self):
         f = io.BytesIO()
         # With and without keyword arguments
-        pickle.dump(123, f, -1)
-        pickle.dump(123, file=f, protocol=-1)
-        pickle.dumps(123, -1)
-        pickle.dumps(123, protocol=-1)
-        pickle.Pickler(f, -1)
-        pickle.Pickler(f, protocol=-1)
+        self.dump(123, f, -1)
+        self.dump(123, file=f, protocol=-1)
+        self.dumps(123, -1)
+        self.dumps(123, protocol=-1)
+        self.Pickler(f, -1)
+        self.Pickler(f, protocol=-1)
 
     def test_bad_init(self):
         # Test issue3664 (pickle can segfault from a badly initialized Pickler).
         # Override initialization without calling __init__() of the superclass.
-        class BadPickler(pickle.Pickler):
+        class BadPickler(self.Pickler):
             def __init__(self): pass
 
-        class BadUnpickler(pickle.Unpickler):
+        class BadUnpickler(self.Unpickler):
             def __init__(self): pass
 
         self.assertRaises(pickle.PicklingError, BadPickler().dump, 0)
diff -urpN Python-3.6.3/Lib/test/pythoninfo.py Python-3.6.5/Lib/test/pythoninfo.py
--- Python-3.6.3/Lib/test/pythoninfo.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/pythoninfo.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,7 +1,8 @@
 """
-Collect various informations about Python to help debugging test failures.
+Collect various information about Python to help debugging test failures.
 """
 from __future__ import print_function
+import errno
 import re
 import sys
 import traceback
@@ -39,7 +40,7 @@ class PythonInfo:
 
     def get_infos(self):
         """
-        Get informations as a key:value dictionary where values are strings.
+        Get information as a key:value dictionary where values are strings.
         """
         return {key: str(value) for key, value in self.info.items()}
 
@@ -55,6 +56,14 @@ def copy_attributes(info_add, obj, name_
         info_add(name, value)
 
 
+def copy_attr(info_add, name, mod, attr_name):
+    try:
+        value = getattr(mod, attr_name)
+    except AttributeError:
+        return
+    info_add(name, value)
+
+
 def call_func(info_add, name, mod, func_name, *, formatter=None):
     try:
         func = getattr(mod, func_name)
@@ -114,6 +123,14 @@ def collect_sys(info_add):
             encoding = '%s/%s' % (encoding, errors)
         info_add('sys.%s.encoding' % name, encoding)
 
+    # Were we compiled --with-pydebug or with #define Py_DEBUG?
+    Py_DEBUG = hasattr(sys, 'gettotalrefcount')
+    if Py_DEBUG:
+        text = 'Yes (sys.gettotalrefcount() present)'
+    else:
+        text = 'No (sys.gettotalrefcount() missing)'
+    info_add('Py_DEBUG', text)
+
 
 def collect_platform(info_add):
     import platform
@@ -134,6 +151,11 @@ def collect_locale(info_add):
     info_add('locale.encoding', locale.getpreferredencoding(False))
 
 
+def collect_builtins(info_add):
+    info_add('builtins.float.float_format', float.__getformat__("float"))
+    info_add('builtins.float.double_format', float.__getformat__("double"))
+
+
 def collect_os(info_add):
     import os
 
@@ -153,17 +175,16 @@ def collect_os(info_add):
     )
     copy_attributes(info_add, os, 'os.%s', attributes, formatter=format_attr)
 
-    info_add("os.cwd", os.getcwd())
+    call_func(info_add, 'os.cwd', os, 'getcwd')
 
     call_func(info_add, 'os.uid', os, 'getuid')
     call_func(info_add, 'os.gid', os, 'getgid')
     call_func(info_add, 'os.uname', os, 'uname')
 
-    if hasattr(os, 'getgroups'):
-        groups = os.getgroups()
-        groups = map(str, groups)
-        groups = ', '.join(groups)
-        info_add("os.groups", groups)
+    def format_groups(groups):
+        return ', '.join(map(str, groups))
+
+    call_func(info_add, 'os.groups', os, 'getgroups', formatter=format_groups)
 
     if hasattr(os, 'getlogin'):
         try:
@@ -175,11 +196,7 @@ def collect_os(info_add):
         else:
             info_add("os.login", login)
 
-    if hasattr(os, 'cpu_count'):
-        cpu_count = os.cpu_count()
-        if cpu_count:
-            info_add('os.cpu_count', cpu_count)
-
+    call_func(info_add, 'os.cpu_count', os, 'cpu_count')
     call_func(info_add, 'os.loadavg', os, 'getloadavg')
 
     # Get environment variables: filter to list
@@ -210,7 +227,9 @@ def collect_os(info_add):
     )
     for name, value in os.environ.items():
         uname = name.upper()
-        if (uname in ENV_VARS or uname.startswith(("PYTHON", "LC_"))
+        if (uname in ENV_VARS
+           # Copy PYTHON* and LC_* variables
+           or uname.startswith(("PYTHON", "LC_"))
            # Visual Studio: VS140COMNTOOLS
            or (uname.startswith("VS") and uname.endswith("COMNTOOLS"))):
             info_add('os.environ[%s]' % name, value)
@@ -223,11 +242,17 @@ def collect_os(info_add):
     if hasattr(os, 'getrandom'):
         # PEP 524: Check if system urandom is initialized
         try:
-            os.getrandom(1, os.GRND_NONBLOCK)
-            state = 'ready (initialized)'
-        except BlockingIOError as exc:
-            state = 'not seeded yet (%s)' % exc
-        info_add('os.getrandom', state)
+            try:
+                os.getrandom(1, os.GRND_NONBLOCK)
+                state = 'ready (initialized)'
+            except BlockingIOError as exc:
+                state = 'not seeded yet (%s)' % exc
+            info_add('os.getrandom', state)
+        except OSError as exc:
+            # Python was compiled on a more recent Linux version
+            # than the current Linux kernel: ignore OSError(ENOSYS)
+            if exc.errno != errno.ENOSYS:
+                raise
 
 
 def collect_readline(info_add):
@@ -290,6 +315,8 @@ def collect_tkinter(info_add):
 def collect_time(info_add):
     import time
 
+    info_add('time.time', time.time())
+
     attributes = (
         'altzone',
         'daylight',
@@ -298,12 +325,19 @@ def collect_time(info_add):
     )
     copy_attributes(info_add, time, 'time.%s', attributes)
 
-    if not hasattr(time, 'get_clock_info'):
+    if hasattr(time, 'get_clock_info'):
+        for clock in ('time', 'perf_counter'):
+            tinfo = time.get_clock_info(clock)
+            info_add('time.get_clock_info(%s)' % clock, tinfo)
+
+
+def collect_datetime(info_add):
+    try:
+        import datetime
+    except ImportError:
         return
 
-    for clock in ('time', 'perf_counter'):
-        tinfo = time.get_clock_info(clock)
-        info_add('time.%s' % clock, tinfo)
+    info_add('datetime.datetime.now', datetime.datetime.now())
 
 
 def collect_sysconfig(info_add):
@@ -316,7 +350,6 @@ def collect_sysconfig(info_add):
         'CCSHARED',
         'CFLAGS',
         'CFLAGSFORSHARED',
-        'PY_LDFLAGS',
         'CONFIG_ARGS',
         'HOST_GNU_TYPE',
         'MACHDEP',
@@ -324,6 +357,7 @@ def collect_sysconfig(info_add):
         'OPT',
         'PY_CFLAGS',
         'PY_CFLAGS_NODIST',
+        'PY_LDFLAGS',
         'Py_DEBUG',
         'Py_ENABLE_SHARED',
         'SHELL',
@@ -407,6 +441,54 @@ def collect_decimal(info_add):
     copy_attributes(info_add, _decimal, '_decimal.%s', attributes)
 
 
+def collect_testcapi(info_add):
+    try:
+        import _testcapi
+    except ImportError:
+        return
+
+    call_func(info_add, 'pymem.allocator', _testcapi, 'pymem_getallocatorsname')
+    copy_attr(info_add, 'pymem.with_pymalloc', _testcapi, 'WITH_PYMALLOC')
+
+
+def collect_resource(info_add):
+    try:
+        import resource
+    except ImportError:
+        return
+
+    limits = [attr for attr in dir(resource) if attr.startswith('RLIMIT_')]
+    for name in limits:
+        key = getattr(resource, name)
+        value = resource.getrlimit(key)
+        info_add('resource.%s' % name, value)
+
+
+def collect_test_socket(info_add):
+    try:
+        from test import test_socket
+    except ImportError:
+        return
+
+    # all check attributes like HAVE_SOCKET_CAN
+    attributes = [name for name in dir(test_socket)
+                  if name.startswith('HAVE_')]
+    copy_attributes(info_add, test_socket, 'test_socket.%s', attributes)
+
+
+def collect_test_support(info_add):
+    try:
+        from test import support
+    except ImportError:
+        return
+
+    attributes = ('IPV6_ENABLED',)
+    copy_attributes(info_add, support, 'test_support.%s', attributes)
+
+    call_func(info_add, 'test_support._is_gui_available', support, '_is_gui_available')
+    call_func(info_add, 'test_support.python_is_optimized', support, 'python_is_optimized')
+
+
 def collect_info(info):
     error = False
     info_add = info.add
@@ -415,6 +497,7 @@ def collect_info(info):
         # collect_os() should be the first, to check the getrandom() status
         collect_os,
 
+        collect_builtins,
         collect_gdb,
         collect_locale,
         collect_platform,
@@ -425,10 +508,17 @@ def collect_info(info):
         collect_sys,
         collect_sysconfig,
         collect_time,
+        collect_datetime,
         collect_tkinter,
         collect_zlib,
         collect_expat,
         collect_decimal,
+        collect_testcapi,
+        collect_resource,
+
+        # Collecting from tests should be last as they have side effects.
+        collect_test_socket,
+        collect_test_support,
     ):
         try:
             collect_func(info_add)
diff -urpN Python-3.6.3/Lib/test/support/__init__.py Python-3.6.5/Lib/test/support/__init__.py
--- Python-3.6.3/Lib/test/support/__init__.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/support/__init__.py	2018-03-28 11:19:31.000000000 +0200
@@ -93,7 +93,7 @@ __all__ = [
     "check__all__", "requires_android_level", "requires_multiprocessing_queue",
     # sys
     "is_jython", "is_android", "check_impl_detail", "unix_shell",
-    "setswitchinterval", "android_not_root",
+    "setswitchinterval",
     # network
     "HOST", "IPV6_ENABLED", "find_unused_port", "bind_port", "open_urlresource",
     "bind_unix_socket",
@@ -281,7 +281,6 @@ max_memuse = 0           # Disable bigme
                          # small sizes, to make sure they work.)
 real_max_memuse = 0
 failfast = False
-match_tests = None
 
 # _original_stdout is meant to hold stdout at the time regrtest began.
 # This may be "the real" stdout, or IDLE's emulation of stdout, or whatever.
@@ -779,7 +778,6 @@ is_jython = sys.platform.startswith('jav
 
 _ANDROID_API_LEVEL = sysconfig.get_config_var('ANDROID_API_LEVEL')
 is_android = (_ANDROID_API_LEVEL is not None and _ANDROID_API_LEVEL > 0)
-android_not_root = (is_android and os.geteuid() != 0)
 
 if sys.platform != 'win32':
     unix_shell = '/system/bin/sh' if is_android else '/bin/sh'
@@ -954,10 +952,14 @@ def temp_dir(path=None, quiet=False):
                 raise
             warnings.warn('tests may fail, unable to create temp dir: ' + path,
                           RuntimeWarning, stacklevel=3)
+    if dir_created:
+        pid = os.getpid()
     try:
         yield path
     finally:
-        if dir_created:
+        # In case the process forks, let only the parent remove the
+        # directory. The child has a diffent process id. (bpo-30028)
+        if dir_created and pid == os.getpid():
             rmtree(path)
 
 @contextlib.contextmanager
@@ -1898,21 +1900,67 @@ def _run_suite(suite):
         raise TestFailed(err)
 
 
-def _match_test(test):
-    global match_tests
+# By default, don't filter tests
+_match_test_func = None
+_match_test_patterns = None
 
-    if match_tests is None:
+
+def match_test(test):
+    # Function used by support.run_unittest() and regrtest --list-cases
+    if _match_test_func is None:
         return True
-    test_id = test.id()
+    else:
+        return _match_test_func(test.id())
 
-    for match_test in match_tests:
-        if fnmatch.fnmatchcase(test_id, match_test):
-            return True
 
-        for name in test_id.split("."):
-            if fnmatch.fnmatchcase(name, match_test):
+def _is_full_match_test(pattern):
+    # If a pattern contains at least one dot, it's considered
+    # as a full test identifier.
+    # Example: 'test.test_os.FileTests.test_access'.
+    #
+    # Reject patterns which contain fnmatch patterns: '*', '?', '[...]'
+    # or '[!...]'. For example, reject 'test_access*'.
+    return ('.' in pattern) and (not re.search(r'[?*\[\]]', pattern))
+
+
+def set_match_tests(patterns):
+    global _match_test_func, _match_test_patterns
+
+    if patterns == _match_test_patterns:
+        # No change: no need to recompile patterns.
+        return
+
+    if not patterns:
+        func = None
+        # set_match_tests(None) behaves as set_match_tests(())
+        patterns = ()
+    elif all(map(_is_full_match_test, patterns)):
+        # Simple case: all patterns are full test identifier.
+        # The test.bisect utility only uses such full test identifiers.
+        func = set(patterns).__contains__
+    else:
+        regex = '|'.join(map(fnmatch.translate, patterns))
+        # The search *is* case sensitive on purpose:
+        # don't use flags=re.IGNORECASE
+        regex_match = re.compile(regex).match
+
+        def match_test_regex(test_id):
+            if regex_match(test_id):
+                # The regex matchs the whole identifier like
+                # 'test.test_os.FileTests.test_access'
                 return True
-    return False
+            else:
+                # Try to match parts of the test identifier.
+                # For example, split 'test.test_os.FileTests.test_access'
+                # into: 'test', 'test_os', 'FileTests' and 'test_access'.
+                return any(map(regex_match, test_id.split(".")))
+
+        func = match_test_regex
+
+    # Create a copy since patterns can be mutable and so modified later
+    _match_test_patterns = tuple(patterns)
+    _match_test_func = func
+
 
 
 def run_unittest(*classes):
@@ -1929,7 +1977,7 @@ def run_unittest(*classes):
             suite.addTest(cls)
         else:
             suite.addTest(unittest.makeSuite(cls))
-    _filter_suite(suite, _match_test)
+    _filter_suite(suite, match_test)
     _run_suite(suite)
 
 #=======================================================================
@@ -2621,3 +2669,60 @@ def disable_faulthandler():
     finally:
         if is_enabled:
             faulthandler.enable(file=fd, all_threads=True)
+
+
+class SaveSignals:
+    """
+    Save an restore signal handlers.
+
+    This class is only able to save/restore signal handlers registered
+    by the Python signal module: see bpo-13285 for "external" signal
+    handlers.
+    """
+
+    def __init__(self):
+        import signal
+        self.signal = signal
+        self.signals = list(range(1, signal.NSIG))
+        # SIGKILL and SIGSTOP signals cannot be ignored nor catched
+        for signame in ('SIGKILL', 'SIGSTOP'):
+            try:
+                signum = getattr(signal, signame)
+            except AttributeError:
+                continue
+            self.signals.remove(signum)
+        self.handlers = {}
+
+    def save(self):
+        for signum in self.signals:
+            handler = self.signal.getsignal(signum)
+            if handler is None:
+                # getsignal() returns None if a signal handler was not
+                # registered by the Python signal module,
+                # and the handler is not SIG_DFL nor SIG_IGN.
+                #
+                # Ignore the signal: we cannot restore the handler.
+                continue
+            self.handlers[signum] = handler
+
+    def restore(self):
+        for signum, handler in self.handlers.items():
+            self.signal.signal(signum, handler)
+
+
+class FakePath:
+    """Simple implementing of the path protocol.
+    """
+    def __init__(self, path):
+        self.path = path
+
+    def __repr__(self):
+        return f'<FakePath {self.path!r}>'
+
+    def __fspath__(self):
+        if (isinstance(self.path, BaseException) or
+            isinstance(self.path, type) and
+                issubclass(self.path, BaseException)):
+            raise self.path
+        else:
+            return self.path
diff -urpN Python-3.6.3/Lib/test/support/script_helper.py Python-3.6.5/Lib/test/support/script_helper.py
--- Python-3.6.3/Lib/test/support/script_helper.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/support/script_helper.py	2018-03-28 11:19:31.000000000 +0200
@@ -39,6 +39,11 @@ def interpreter_requires_environment():
     """
     global __cached_interp_requires_environment
     if __cached_interp_requires_environment is None:
+        # If PYTHONHOME is set, assume that we need it
+        if 'PYTHONHOME' in os.environ:
+            __cached_interp_requires_environment = True
+            return True
+
         # Try running an interpreter with -E to see if it works or not.
         try:
             subprocess.check_call([sys.executable, '-E',
@@ -165,7 +170,9 @@ def spawn_python(*args, stdout=subproces
     kw is extra keyword args to pass to subprocess.Popen. Returns a Popen
     object.
     """
-    cmd_line = [sys.executable, '-E']
+    cmd_line = [sys.executable]
+    if not interpreter_requires_environment():
+        cmd_line.append('-E')
     cmd_line.extend(args)
     # Under Fedora (?), GNU readline can output junk on stderr when initialized,
     # depending on the TERM setting.  Setting TERM=vt100 is supposed to disable
diff -urpN Python-3.6.3/Lib/test/test_aifc.py Python-3.6.5/Lib/test/test_aifc.py
--- Python-3.6.3/Lib/test/test_aifc.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_aifc.py	2018-03-28 11:19:31.000000000 +0200
@@ -263,6 +263,14 @@ class AIFCLowLevelTest(unittest.TestCase
         b = io.BytesIO(b'FORM' + struct.pack('>L', 4) + b'AIFF')
         self.assertRaises(aifc.Error, aifc.open, b)
 
+    def test_read_no_ssnd_chunk(self):
+        b = b'FORM' + struct.pack('>L', 4) + b'AIFC'
+        b += b'COMM' + struct.pack('>LhlhhLL', 38, 0, 0, 0, 0, 0, 0)
+        b += b'NONE' + struct.pack('B', 14) + b'not compressed' + b'\x00'
+        with self.assertRaisesRegex(aifc.Error, 'COMM chunk and/or SSND chunk'
+                                                ' missing'):
+            aifc.open(io.BytesIO(b))
+
     def test_read_wrong_compression_type(self):
         b = b'FORM' + struct.pack('>L', 4) + b'AIFC'
         b += b'COMM' + struct.pack('>LhlhhLL', 23, 0, 0, 0, 0, 0, 0)
diff -urpN Python-3.6.3/Lib/test/test_ast.py Python-3.6.5/Lib/test/test_ast.py
--- Python-3.6.3/Lib/test/test_ast.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_ast.py	2018-03-28 11:19:31.000000000 +0200
@@ -421,6 +421,16 @@ class AST_Tests(unittest.TestCase):
             compile(empty_yield_from, "<test>", "exec")
         self.assertIn("field value is required", str(cm.exception))
 
+    @support.cpython_only
+    def test_issue31592(self):
+        # There shouldn't be an assertion failure in case of a bad
+        # unicodedata.normalize().
+        import unicodedata
+        def bad_normalize(*args):
+            return None
+        with support.swap_attr(unicodedata, 'normalize', bad_normalize):
+            self.assertRaises(TypeError, ast.parse, '\u03D5')
+
 
 class ASTHelpers_Test(unittest.TestCase):
 
diff -urpN Python-3.6.3/Lib/test/test_asyncio/test_base_events.py Python-3.6.5/Lib/test/test_asyncio/test_base_events.py
--- Python-3.6.3/Lib/test/test_asyncio/test_base_events.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_asyncio/test_base_events.py	2018-03-28 11:19:31.000000000 +0200
@@ -116,13 +116,6 @@ class BaseEventTests(test_utils.TestCase
         self.assertIsNone(
             base_events._ipaddr_info('::3%lo0', 1, INET6, STREAM, TCP))
 
-        if hasattr(socket, 'SOCK_NONBLOCK'):
-            self.assertEqual(
-                None,
-                base_events._ipaddr_info(
-                    '1.2.3.4', 1, INET, STREAM | socket.SOCK_NONBLOCK, TCP))
-
-
     def test_port_parameter_types(self):
         # Test obscure kinds of arguments for "port".
         INET = socket.AF_INET
diff -urpN Python-3.6.3/Lib/test/test_asyncio/test_events.py Python-3.6.5/Lib/test/test_asyncio/test_events.py
--- Python-3.6.3/Lib/test/test_asyncio/test_events.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_asyncio/test_events.py	2018-03-28 11:19:31.000000000 +0200
@@ -1533,6 +1533,7 @@ class EventLoopTestsMixin:
         self.assertEqual(5, proto.nbytes)
 
         os.close(slave)
+        proto.transport.close()
         self.loop.run_until_complete(proto.done)
         self.assertEqual(
             ['INITIAL', 'CONNECTED', 'EOF', 'CLOSED'], proto.state)
diff -urpN Python-3.6.3/Lib/test/test_asyncio/test_locks.py Python-3.6.5/Lib/test/test_asyncio/test_locks.py
--- Python-3.6.3/Lib/test/test_asyncio/test_locks.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_asyncio/test_locks.py	2018-03-28 11:19:31.000000000 +0200
@@ -176,6 +176,54 @@ class LockTests(test_utils.TestCase):
         self.assertTrue(tb.cancelled())
         self.assertTrue(tc.done())
 
+    def test_cancel_release_race(self):
+        # Issue 32734
+        # Acquire 4 locks, cancel second, release first
+        # and 2 locks are taken at once.
+        lock = asyncio.Lock(loop=self.loop)
+        lock_count = 0
+        call_count = 0
+
+        async def lockit():
+            nonlocal lock_count
+            nonlocal call_count
+            call_count += 1
+            await lock.acquire()
+            lock_count += 1
+
+        async def lockandtrigger():
+            await lock.acquire()
+            self.loop.call_soon(trigger)
+
+        def trigger():
+            t1.cancel()
+            lock.release()
+
+        t0 = self.loop.create_task(lockandtrigger())
+        t1 = self.loop.create_task(lockit())
+        t2 = self.loop.create_task(lockit())
+        t3 = self.loop.create_task(lockit())
+
+        # First loop acquires all
+        test_utils.run_briefly(self.loop)
+        self.assertTrue(t0.done())
+
+        # Second loop calls trigger
+        test_utils.run_briefly(self.loop)
+        # Third loop calls cancellation
+        test_utils.run_briefly(self.loop)
+
+        # Make sure only one lock was taken
+        self.assertEqual(lock_count, 1)
+        # While 3 calls were made to lockit()
+        self.assertEqual(call_count, 3)
+        self.assertTrue(t1.cancelled() and t2.done())
+
+        # Cleanup the task that is stuck on acquire.
+        t3.cancel()
+        test_utils.run_briefly(self.loop)
+        self.assertTrue(t3.cancelled())
+
     def test_finished_waiter_cancelled(self):
         lock = asyncio.Lock(loop=self.loop)
 
@@ -507,6 +555,31 @@ class ConditionTests(test_utils.TestCase
 
         self.assertTrue(cond.locked())
 
+    def test_wait_cancel_after_notify(self):
+        # See bpo-32841
+        cond = asyncio.Condition(loop=self.loop)
+        waited = False
+
+        async def wait_on_cond():
+            nonlocal waited
+            async with cond:
+                waited = True  # Make sure this area was reached
+                await cond.wait()
+
+        waiter = asyncio.ensure_future(wait_on_cond(), loop=self.loop)
+        test_utils.run_briefly(self.loop)  # Start waiting
+
+        self.loop.run_until_complete(cond.acquire())
+        cond.notify()
+        test_utils.run_briefly(self.loop)  # Get to acquire()
+        waiter.cancel()
+        test_utils.run_briefly(self.loop)  # Activate cancellation
+        cond.release()
+        test_utils.run_briefly(self.loop)  # Cancellation should occur
+
+        self.assertTrue(waiter.cancelled())
+        self.assertTrue(waited)
+
     def test_wait_unacquired(self):
         cond = asyncio.Condition(loop=self.loop)
         self.assertRaises(
diff -urpN Python-3.6.3/Lib/test/test_asyncio/test_queues.py Python-3.6.5/Lib/test/test_asyncio/test_queues.py
--- Python-3.6.3/Lib/test/test_asyncio/test_queues.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_asyncio/test_queues.py	2018-03-28 11:19:31.000000000 +0200
@@ -295,6 +295,23 @@ class QueueGetTests(_QueueTestBase):
                            loop=self.loop),
             )
 
+    def test_cancelled_getters_not_being_held_in_self_getters(self):
+        def a_generator():
+            yield 0.1
+            yield 0.2
+
+        self.loop = self.new_test_loop(a_generator)
+        @asyncio.coroutine
+        def consumer(queue):
+            try:
+                item = yield from asyncio.wait_for(queue.get(), 0.1, loop=self.loop)
+            except asyncio.TimeoutError:
+                pass
+
+        queue = asyncio.Queue(loop=self.loop, maxsize=5)
+        self.loop.run_until_complete(self.loop.create_task(consumer(queue)))
+        self.assertEqual(len(queue._getters), 0)
+
 
 class QueuePutTests(_QueueTestBase):
 
diff -urpN Python-3.6.3/Lib/test/test_asyncio/test_selector_events.py Python-3.6.5/Lib/test/test_asyncio/test_selector_events.py
--- Python-3.6.3/Lib/test/test_asyncio/test_selector_events.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_asyncio/test_selector_events.py	2018-03-28 11:19:31.000000000 +0200
@@ -17,6 +17,7 @@ from asyncio.selector_events import _Sel
 from asyncio.selector_events import _SelectorSslTransport
 from asyncio.selector_events import _SelectorSocketTransport
 from asyncio.selector_events import _SelectorDatagramTransport
+from asyncio.selector_events import _set_nodelay
 
 
 MOCK_ANY = mock.ANY
@@ -182,7 +183,28 @@ class BaseSelectorEventLoopTests(test_ut
 
         f = self.loop.sock_recv(sock, 1024)
         self.assertIsInstance(f, asyncio.Future)
-        self.loop._sock_recv.assert_called_with(f, False, sock, 1024)
+        self.loop._sock_recv.assert_called_with(f, None, sock, 1024)
+
+    def test_sock_recv_reconnection(self):
+        sock = mock.Mock()
+        sock.fileno.return_value = 10
+        sock.recv.side_effect = BlockingIOError
+        sock.gettimeout.return_value = 0.0
+
+        self.loop.add_reader = mock.Mock()
+        self.loop.remove_reader = mock.Mock()
+        fut = self.loop.sock_recv(sock, 1024)
+        callback = self.loop.add_reader.call_args[0][1]
+        params = self.loop.add_reader.call_args[0][2:]
+
+        # emulate the old socket has closed, but the new one has
+        # the same fileno, so callback is called with old (closed) socket
+        sock.fileno.return_value = -1
+        sock.recv.side_effect = OSError(9)
+        callback(*params)
+
+        self.assertIsInstance(fut.exception(), OSError)
+        self.assertEqual((10,), self.loop.remove_reader.call_args[0])
 
     def test__sock_recv_canceled_fut(self):
         sock = mock.Mock()
@@ -190,7 +212,7 @@ class BaseSelectorEventLoopTests(test_ut
         f = asyncio.Future(loop=self.loop)
         f.cancel()
 
-        self.loop._sock_recv(f, False, sock, 1024)
+        self.loop._sock_recv(f, None, sock, 1024)
         self.assertFalse(sock.recv.called)
 
     def test__sock_recv_unregister(self):
@@ -201,7 +223,7 @@ class BaseSelectorEventLoopTests(test_ut
         f.cancel()
 
         self.loop.remove_reader = mock.Mock()
-        self.loop._sock_recv(f, True, sock, 1024)
+        self.loop._sock_recv(f, 10, sock, 1024)
         self.assertEqual((10,), self.loop.remove_reader.call_args[0])
 
     def test__sock_recv_tryagain(self):
@@ -211,8 +233,8 @@ class BaseSelectorEventLoopTests(test_ut
         sock.recv.side_effect = BlockingIOError
 
         self.loop.add_reader = mock.Mock()
-        self.loop._sock_recv(f, False, sock, 1024)
-        self.assertEqual((10, self.loop._sock_recv, f, True, sock, 1024),
+        self.loop._sock_recv(f, None, sock, 1024)
+        self.assertEqual((10, self.loop._sock_recv, f, 10, sock, 1024),
                          self.loop.add_reader.call_args[0])
 
     def test__sock_recv_exception(self):
@@ -221,7 +243,7 @@ class BaseSelectorEventLoopTests(test_ut
         sock.fileno.return_value = 10
         err = sock.recv.side_effect = OSError()
 
-        self.loop._sock_recv(f, False, sock, 1024)
+        self.loop._sock_recv(f, None, sock, 1024)
         self.assertIs(err, f.exception())
 
     def test_sock_sendall(self):
@@ -231,7 +253,7 @@ class BaseSelectorEventLoopTests(test_ut
         f = self.loop.sock_sendall(sock, b'data')
         self.assertIsInstance(f, asyncio.Future)
         self.assertEqual(
-            (f, False, sock, b'data'),
+            (f, None, sock, b'data'),
             self.loop._sock_sendall.call_args[0])
 
     def test_sock_sendall_nodata(self):
@@ -244,13 +266,34 @@ class BaseSelectorEventLoopTests(test_ut
         self.assertIsNone(f.result())
         self.assertFalse(self.loop._sock_sendall.called)
 
+    def test_sock_sendall_reconnection(self):
+        sock = mock.Mock()
+        sock.fileno.return_value = 10
+        sock.send.side_effect = BlockingIOError
+        sock.gettimeout.return_value = 0.0
+
+        self.loop.add_writer = mock.Mock()
+        self.loop.remove_writer = mock.Mock()
+        fut = self.loop.sock_sendall(sock, b'data')
+        callback = self.loop.add_writer.call_args[0][1]
+        params = self.loop.add_writer.call_args[0][2:]
+
+        # emulate the old socket has closed, but the new one has
+        # the same fileno, so callback is called with old (closed) socket
+        sock.fileno.return_value = -1
+        sock.send.side_effect = OSError(9)
+        callback(*params)
+
+        self.assertIsInstance(fut.exception(), OSError)
+        self.assertEqual((10,), self.loop.remove_writer.call_args[0])
+
     def test__sock_sendall_canceled_fut(self):
         sock = mock.Mock()
 
         f = asyncio.Future(loop=self.loop)
         f.cancel()
 
-        self.loop._sock_sendall(f, False, sock, b'data')
+        self.loop._sock_sendall(f, None, sock, b'data')
         self.assertFalse(sock.send.called)
 
     def test__sock_sendall_unregister(self):
@@ -261,7 +304,7 @@ class BaseSelectorEventLoopTests(test_ut
         f.cancel()
 
         self.loop.remove_writer = mock.Mock()
-        self.loop._sock_sendall(f, True, sock, b'data')
+        self.loop._sock_sendall(f, 10, sock, b'data')
         self.assertEqual((10,), self.loop.remove_writer.call_args[0])
 
     def test__sock_sendall_tryagain(self):
@@ -271,9 +314,9 @@ class BaseSelectorEventLoopTests(test_ut
         sock.send.side_effect = BlockingIOError
 
         self.loop.add_writer = mock.Mock()
-        self.loop._sock_sendall(f, False, sock, b'data')
+        self.loop._sock_sendall(f, None, sock, b'data')
         self.assertEqual(
-            (10, self.loop._sock_sendall, f, True, sock, b'data'),
+            (10, self.loop._sock_sendall, f, 10, sock, b'data'),
             self.loop.add_writer.call_args[0])
 
     def test__sock_sendall_interrupted(self):
@@ -283,9 +326,9 @@ class BaseSelectorEventLoopTests(test_ut
         sock.send.side_effect = InterruptedError
 
         self.loop.add_writer = mock.Mock()
-        self.loop._sock_sendall(f, False, sock, b'data')
+        self.loop._sock_sendall(f, None, sock, b'data')
         self.assertEqual(
-            (10, self.loop._sock_sendall, f, True, sock, b'data'),
+            (10, self.loop._sock_sendall, f, 10, sock, b'data'),
             self.loop.add_writer.call_args[0])
 
     def test__sock_sendall_exception(self):
@@ -294,7 +337,7 @@ class BaseSelectorEventLoopTests(test_ut
         sock.fileno.return_value = 10
         err = sock.send.side_effect = OSError()
 
-        self.loop._sock_sendall(f, False, sock, b'data')
+        self.loop._sock_sendall(f, None, sock, b'data')
         self.assertIs(f.exception(), err)
 
     def test__sock_sendall(self):
@@ -304,7 +347,7 @@ class BaseSelectorEventLoopTests(test_ut
         sock.fileno.return_value = 10
         sock.send.return_value = 4
 
-        self.loop._sock_sendall(f, False, sock, b'data')
+        self.loop._sock_sendall(f, None, sock, b'data')
         self.assertTrue(f.done())
         self.assertIsNone(f.result())
 
@@ -316,10 +359,10 @@ class BaseSelectorEventLoopTests(test_ut
         sock.send.return_value = 2
 
         self.loop.add_writer = mock.Mock()
-        self.loop._sock_sendall(f, False, sock, b'data')
+        self.loop._sock_sendall(f, None, sock, b'data')
         self.assertFalse(f.done())
         self.assertEqual(
-            (10, self.loop._sock_sendall, f, True, sock, b'ta'),
+            (10, self.loop._sock_sendall, f, 10, sock, b'ta'),
             self.loop.add_writer.call_args[0])
 
     def test__sock_sendall_none(self):
@@ -330,10 +373,10 @@ class BaseSelectorEventLoopTests(test_ut
         sock.send.return_value = 0
 
         self.loop.add_writer = mock.Mock()
-        self.loop._sock_sendall(f, False, sock, b'data')
+        self.loop._sock_sendall(f, None, sock, b'data')
         self.assertFalse(f.done())
         self.assertEqual(
-            (10, self.loop._sock_sendall, f, True, sock, b'data'),
+            (10, self.loop._sock_sendall, f, 10, sock, b'data'),
             self.loop.add_writer.call_args[0])
 
     def test_sock_connect_timeout(self):
@@ -1787,5 +1830,31 @@ class SelectorDatagramTransportTests(tes
                 'Fatal error on transport\nprotocol:.*\ntransport:.*'),
             exc_info=(ConnectionRefusedError, MOCK_ANY, MOCK_ANY))
 
+
+class TestSelectorUtils(test_utils.TestCase):
+    def check_set_nodelay(self, sock):
+        opt = sock.getsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY)
+        self.assertFalse(opt)
+
+        _set_nodelay(sock)
+
+        opt = sock.getsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY)
+        self.assertTrue(opt)
+
+    @unittest.skipUnless(hasattr(socket, 'TCP_NODELAY'),
+                         'need socket.TCP_NODELAY')
+    def test_set_nodelay(self):
+        sock = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM,
+                             proto=socket.IPPROTO_TCP)
+        with sock:
+            self.check_set_nodelay(sock)
+
+        sock = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM,
+                             proto=socket.IPPROTO_TCP)
+        with sock:
+            sock.setblocking(False)
+            self.check_set_nodelay(sock)
+
+
 if __name__ == '__main__':
     unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_asyncio/test_sslproto.py Python-3.6.5/Lib/test/test_asyncio/test_sslproto.py
--- Python-3.6.3/Lib/test/test_asyncio/test_sslproto.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_asyncio/test_sslproto.py	2018-03-28 11:19:31.000000000 +0200
@@ -22,15 +22,16 @@ class SslProtoHandshakeTests(test_utils.
         self.loop = asyncio.new_event_loop()
         self.set_event_loop(self.loop)
 
-    def ssl_protocol(self, waiter=None):
+    def ssl_protocol(self, *, waiter=None, proto=None):
         sslcontext = test_utils.dummy_ssl_context()
-        app_proto = asyncio.Protocol()
-        proto = sslproto.SSLProtocol(self.loop, app_proto, sslcontext, waiter)
-        self.assertIs(proto._app_transport.get_protocol(), app_proto)
-        self.addCleanup(proto._app_transport.close)
-        return proto
+        if proto is None:  # app protocol
+            proto = asyncio.Protocol()
+        ssl_proto = sslproto.SSLProtocol(self.loop, proto, sslcontext, waiter)
+        self.assertIs(ssl_proto._app_transport.get_protocol(), proto)
+        self.addCleanup(ssl_proto._app_transport.close)
+        return ssl_proto
 
-    def connection_made(self, ssl_proto, do_handshake=None):
+    def connection_made(self, ssl_proto, *, do_handshake=None):
         transport = mock.Mock()
         sslpipe = mock.Mock()
         sslpipe.shutdown.return_value = b''
@@ -48,7 +49,7 @@ class SslProtoHandshakeTests(test_utils.
         # Python issue #23197: cancelling a handshake must not raise an
         # exception or log an error, even if the handshake failed
         waiter = asyncio.Future(loop=self.loop)
-        ssl_proto = self.ssl_protocol(waiter)
+        ssl_proto = self.ssl_protocol(waiter=waiter)
         handshake_fut = asyncio.Future(loop=self.loop)
 
         def do_handshake(callback):
@@ -58,14 +59,14 @@ class SslProtoHandshakeTests(test_utils.
             return []
 
         waiter.cancel()
-        self.connection_made(ssl_proto, do_handshake)
+        self.connection_made(ssl_proto, do_handshake=do_handshake)
 
         with test_utils.disable_logger():
             self.loop.run_until_complete(handshake_fut)
 
     def test_eof_received_waiter(self):
         waiter = asyncio.Future(loop=self.loop)
-        ssl_proto = self.ssl_protocol(waiter)
+        ssl_proto = self.ssl_protocol(waiter=waiter)
         self.connection_made(ssl_proto)
         ssl_proto.eof_received()
         test_utils.run_briefly(self.loop)
@@ -76,7 +77,7 @@ class SslProtoHandshakeTests(test_utils.
         # _fatal_error() generates a NameError if sslproto.py
         # does not import base_events.
         waiter = asyncio.Future(loop=self.loop)
-        ssl_proto = self.ssl_protocol(waiter)
+        ssl_proto = self.ssl_protocol(waiter=waiter)
         # Temporarily turn off error logging so as not to spoil test output.
         log_level = log.logger.getEffectiveLevel()
         log.logger.setLevel(logging.FATAL)
@@ -90,7 +91,7 @@ class SslProtoHandshakeTests(test_utils.
         # From issue #472.
         # yield from waiter hang if lost_connection was called.
         waiter = asyncio.Future(loop=self.loop)
-        ssl_proto = self.ssl_protocol(waiter)
+        ssl_proto = self.ssl_protocol(waiter=waiter)
         self.connection_made(ssl_proto)
         ssl_proto.connection_lost(ConnectionAbortedError)
         test_utils.run_briefly(self.loop)
@@ -99,10 +100,7 @@ class SslProtoHandshakeTests(test_utils.
     def test_close_during_handshake(self):
         # bpo-29743 Closing transport during handshake process leaks socket
         waiter = asyncio.Future(loop=self.loop)
-        ssl_proto = self.ssl_protocol(waiter)
-
-        def do_handshake(callback):
-            return []
+        ssl_proto = self.ssl_protocol(waiter=waiter)
 
         transport = self.connection_made(ssl_proto)
         test_utils.run_briefly(self.loop)
@@ -112,7 +110,7 @@ class SslProtoHandshakeTests(test_utils.
 
     def test_get_extra_info_on_closed_connection(self):
         waiter = asyncio.Future(loop=self.loop)
-        ssl_proto = self.ssl_protocol(waiter)
+        ssl_proto = self.ssl_protocol(waiter=waiter)
         self.assertIsNone(ssl_proto._get_extra_info('socket'))
         default = object()
         self.assertIs(ssl_proto._get_extra_info('socket', default), default)
@@ -121,6 +119,33 @@ class SslProtoHandshakeTests(test_utils.
         ssl_proto.connection_lost(None)
         self.assertIsNone(ssl_proto._get_extra_info('socket'))
 
+    def test_set_new_app_protocol(self):
+        waiter = asyncio.Future(loop=self.loop)
+        ssl_proto = self.ssl_protocol(waiter=waiter)
+        new_app_proto = asyncio.Protocol()
+        ssl_proto._app_transport.set_protocol(new_app_proto)
+        self.assertIs(ssl_proto._app_transport.get_protocol(), new_app_proto)
+        self.assertIs(ssl_proto._app_protocol, new_app_proto)
+
+    def test_data_received_after_closing(self):
+        ssl_proto = self.ssl_protocol()
+        self.connection_made(ssl_proto)
+        transp = ssl_proto._app_transport
+
+        transp.close()
+
+        # should not raise
+        self.assertIsNone(ssl_proto.data_received(b'data'))
+
+    def test_write_after_closing(self):
+        ssl_proto = self.ssl_protocol()
+        self.connection_made(ssl_proto)
+        transp = ssl_proto._app_transport
+        transp.close()
+
+        # should not raise
+        self.assertIsNone(transp.write(b'data'))
+
 
 if __name__ == '__main__':
     unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_asyncio/test_streams.py Python-3.6.5/Lib/test/test_asyncio/test_streams.py
--- Python-3.6.3/Lib/test/test_asyncio/test_streams.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_asyncio/test_streams.py	2018-03-28 11:19:31.000000000 +0200
@@ -3,6 +3,7 @@
 import gc
 import os
 import queue
+import pickle
 import socket
 import sys
 import threading
@@ -845,6 +846,23 @@ os.close(fd)
         stream._transport.__repr__.return_value = "<Transport>"
         self.assertEqual("<StreamReader t=<Transport>>", repr(stream))
 
+    def test_IncompleteReadError_pickleable(self):
+        e = asyncio.IncompleteReadError(b'abc', 10)
+        for proto in range(pickle.HIGHEST_PROTOCOL + 1):
+            with self.subTest(pickle_protocol=proto):
+                e2 = pickle.loads(pickle.dumps(e, protocol=proto))
+                self.assertEqual(str(e), str(e2))
+                self.assertEqual(e.partial, e2.partial)
+                self.assertEqual(e.expected, e2.expected)
+
+    def test_LimitOverrunError_pickleable(self):
+        e = asyncio.LimitOverrunError('message', 10)
+        for proto in range(pickle.HIGHEST_PROTOCOL + 1):
+            with self.subTest(pickle_protocol=proto):
+                e2 = pickle.loads(pickle.dumps(e, protocol=proto))
+                self.assertEqual(str(e), str(e2))
+                self.assertEqual(e.consumed, e2.consumed)
+
 
 if __name__ == '__main__':
     unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_asyncio/test_tasks.py Python-3.6.5/Lib/test/test_asyncio/test_tasks.py
--- Python-3.6.3/Lib/test/test_asyncio/test_tasks.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_asyncio/test_tasks.py	2018-03-28 11:19:31.000000000 +0200
@@ -1918,7 +1918,7 @@ class BaseTaskTests:
 
         regex = (r'^<CoroWrapper %s\(?\)? .* at %s:%s, .*> '
                     r'was never yielded from\n'
-                 r'Coroutine object created at \(most recent call last\):\n'
+                 r'Coroutine object created at \(most recent call last, truncated to \d+ last lines\):\n'
                  r'.*\n'
                  r'  File "%s", line %s, in test_coroutine_never_yielded\n'
                  r'    coro_noop\(\)$'
@@ -2133,6 +2133,20 @@ class CTask_CFuture_Tests(BaseTaskTests,
     Task = getattr(tasks, '_CTask', None)
     Future = getattr(futures, '_CFuture', None)
 
+    @support.refcount_test
+    def test_refleaks_in_task___init__(self):
+        gettotalrefcount = support.get_attribute(sys, 'gettotalrefcount')
+        @asyncio.coroutine
+        def coro():
+            pass
+        task = self.new_task(self.loop, coro())
+        self.loop.run_until_complete(task)
+        refs_before = gettotalrefcount()
+        for i in range(100):
+            task.__init__(coro(), loop=self.loop)
+            self.loop.run_until_complete(task)
+        self.assertAlmostEqual(gettotalrefcount() - refs_before, 0, delta=10)
+
 
 @unittest.skipUnless(hasattr(futures, '_CFuture'),
                      'requires the C _asyncio module')
diff -urpN Python-3.6.3/Lib/test/test_asyncio/test_unix_events.py Python-3.6.5/Lib/test/test_asyncio/test_unix_events.py
--- Python-3.6.3/Lib/test/test_asyncio/test_unix_events.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_asyncio/test_unix_events.py	2018-03-28 11:19:31.000000000 +0200
@@ -230,6 +230,23 @@ class SelectorEventLoopSignalTests(test_
         self.assertEqual(len(self.loop._signal_handlers), 0)
         m_signal.set_wakeup_fd.assert_called_once_with(-1)
 
+    @mock.patch('asyncio.unix_events.sys')
+    @mock.patch('asyncio.unix_events.signal')
+    def test_close_on_finalizing(self, m_signal, m_sys):
+        m_signal.NSIG = signal.NSIG
+        self.loop.add_signal_handler(signal.SIGHUP, lambda: True)
+
+        self.assertEqual(len(self.loop._signal_handlers), 1)
+        m_sys.is_finalizing.return_value = True
+        m_signal.signal.reset_mock()
+
+        with self.assertWarnsRegex(ResourceWarning,
+                                   "skipping signal handlers removal"):
+            self.loop.close()
+
+        self.assertEqual(len(self.loop._signal_handlers), 0)
+        self.assertFalse(m_signal.signal.called)
+
 
 @unittest.skipUnless(hasattr(socket, 'AF_UNIX'),
                      'UNIX Sockets are not supported')
diff -urpN Python-3.6.3/Lib/test/test_atexit.py Python-3.6.5/Lib/test/test_atexit.py
--- Python-3.6.3/Lib/test/test_atexit.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_atexit.py	2018-03-28 11:19:31.000000000 +0200
@@ -3,6 +3,7 @@ import unittest
 import io
 import atexit
 from test import support
+from test.support import script_helper
 
 ### helpers
 def h1():
@@ -152,6 +153,21 @@ class GeneralTest(unittest.TestCase):
         atexit._run_exitfuncs()
         self.assertEqual(l, [5])
 
+    def test_shutdown(self):
+        # Actually test the shutdown mechanism in a subprocess
+        code = """if 1:
+            import atexit
+
+            def f(msg):
+                print(msg)
+
+            atexit.register(f, "one")
+            atexit.register(f, "two")
+            """
+        res = script_helper.assert_python_ok("-c", code)
+        self.assertEqual(res.out.decode().splitlines(), ["two", "one"])
+        self.assertFalse(res.err)
+
 
 @support.cpython_only
 class SubinterpreterTest(unittest.TestCase):
diff -urpN Python-3.6.3/Lib/test/test_baseexception.py Python-3.6.5/Lib/test/test_baseexception.py
--- Python-3.6.3/Lib/test/test_baseexception.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_baseexception.py	2018-03-28 11:19:31.000000000 +0200
@@ -163,7 +163,7 @@ class UsageTests(unittest.TestCase):
         self.raise_fails("spam")
 
     def test_catch_non_BaseException(self):
-        # Tryinng to catch an object that does not inherit from BaseException
+        # Trying to catch an object that does not inherit from BaseException
         # is not allowed.
         class NonBaseException(object):
             pass
diff -urpN Python-3.6.3/Lib/test/test_buffer.py Python-3.6.5/Lib/test/test_buffer.py
--- Python-3.6.3/Lib/test/test_buffer.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_buffer.py	2018-03-28 11:19:31.000000000 +0200
@@ -17,7 +17,7 @@ from test import support
 from itertools import permutations, product
 from random import randrange, sample, choice
 import warnings
-import sys, array, io
+import sys, array, io, os
 from decimal import Decimal
 from fractions import Fraction
 
@@ -37,7 +37,8 @@ except ImportError:
     ctypes = None
 
 try:
-    with warnings.catch_warnings():
+    with support.EnvironmentVarGuard() as os.environ, \
+         warnings.catch_warnings():
         from numpy import ndarray as numpy_array
 except ImportError:
     numpy_array = None
diff -urpN Python-3.6.3/Lib/test/test_builtin.py Python-3.6.5/Lib/test/test_builtin.py
--- Python-3.6.3/Lib/test/test_builtin.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_builtin.py	2018-03-28 11:19:31.000000000 +0200
@@ -331,16 +331,16 @@ class BuiltinTest(unittest.TestCase):
         try:
             assert False
         except AssertionError:
-            return (True, f.__doc__)
+            return (True, f.__doc__, __debug__)
         else:
-            return (False, f.__doc__)
+            return (False, f.__doc__, __debug__)
         '''
         def f(): """doc"""
-        values = [(-1, __debug__, f.__doc__),
-                  (0, True, 'doc'),
-                  (1, False, 'doc'),
-                  (2, False, None)]
-        for optval, debugval, docstring in values:
+        values = [(-1, __debug__, f.__doc__, __debug__),
+                  (0, True, 'doc', True),
+                  (1, False, 'doc', False),
+                  (2, False, None, False)]
+        for optval, *expected in values:
             # test both direct compilation and compilation via AST
             codeobjs = []
             codeobjs.append(compile(codestr, "<test>", "exec", optimize=optval))
@@ -350,7 +350,7 @@ class BuiltinTest(unittest.TestCase):
                 ns = {}
                 exec(code, ns)
                 rv = ns['f']()
-                self.assertEqual(rv, (debugval, docstring))
+                self.assertEqual(rv, tuple(expected))
 
     def test_delattr(self):
         sys.spam = 1
diff -urpN Python-3.6.3/Lib/test/test_bytes.py Python-3.6.5/Lib/test/test_bytes.py
--- Python-3.6.3/Lib/test/test_bytes.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_bytes.py	2018-03-28 11:19:31.000000000 +0200
@@ -540,8 +540,16 @@ class BaseBytesTest:
         self.assertEqual(b.replace(b'i', b'a'), b'massassappa')
         self.assertEqual(b.replace(b'ss', b'x'), b'mixixippi')
 
+    def test_replace_int_error(self):
+        self.assertRaises(TypeError, self.type2test(b'a b').replace, 32, b'')
+
     def test_split_string_error(self):
         self.assertRaises(TypeError, self.type2test(b'a b').split, ' ')
+        self.assertRaises(TypeError, self.type2test(b'a b').rsplit, ' ')
+
+    def test_split_int_error(self):
+        self.assertRaises(TypeError, self.type2test(b'a b').split, 32)
+        self.assertRaises(TypeError, self.type2test(b'a b').rsplit, 32)
 
     def test_split_unicodewhitespace(self):
         for b in (b'a\x1Cb', b'a\x1Db', b'a\x1Eb', b'a\x1Fb'):
@@ -550,9 +558,6 @@ class BaseBytesTest:
         b = self.type2test(b"\x09\x0A\x0B\x0C\x0D\x1C\x1D\x1E\x1F")
         self.assertEqual(b.split(), [b'\x1c\x1d\x1e\x1f'])
 
-    def test_rsplit_string_error(self):
-        self.assertRaises(TypeError, self.type2test(b'a b').rsplit, ' ')
-
     def test_rsplit_unicodewhitespace(self):
         b = self.type2test(b"\x09\x0A\x0B\x0C\x0D\x1C\x1D\x1E\x1F")
         self.assertEqual(b.rsplit(), [b'\x1c\x1d\x1e\x1f'])
@@ -568,6 +573,14 @@ class BaseBytesTest:
         self.assertEqual(b.rpartition(b'i'), (b'mississipp', b'i', b''))
         self.assertEqual(b.rpartition(b'w'), (b'', b'', b'mississippi'))
 
+    def test_partition_string_error(self):
+        self.assertRaises(TypeError, self.type2test(b'a b').partition, ' ')
+        self.assertRaises(TypeError, self.type2test(b'a b').rpartition, ' ')
+
+    def test_partition_int_error(self):
+        self.assertRaises(TypeError, self.type2test(b'a b').partition, 32)
+        self.assertRaises(TypeError, self.type2test(b'a b').rpartition, 32)
+
     def test_pickling(self):
         for proto in range(pickle.HIGHEST_PROTOCOL + 1):
             for b in b"", b"a", b"abc", b"\xffab\x80", b"\0\0\377\0\0":
@@ -600,9 +613,14 @@ class BaseBytesTest:
         self.assertEqual(self.type2test(b'abc').rstrip(memoryview(b'ac')), b'ab')
 
     def test_strip_string_error(self):
-        self.assertRaises(TypeError, self.type2test(b'abc').strip, 'b')
-        self.assertRaises(TypeError, self.type2test(b'abc').lstrip, 'b')
-        self.assertRaises(TypeError, self.type2test(b'abc').rstrip, 'b')
+        self.assertRaises(TypeError, self.type2test(b'abc').strip, 'ac')
+        self.assertRaises(TypeError, self.type2test(b'abc').lstrip, 'ac')
+        self.assertRaises(TypeError, self.type2test(b'abc').rstrip, 'ac')
+
+    def test_strip_int_error(self):
+        self.assertRaises(TypeError, self.type2test(b' abc ').strip, 32)
+        self.assertRaises(TypeError, self.type2test(b' abc ').lstrip, 32)
+        self.assertRaises(TypeError, self.type2test(b' abc ').rstrip, 32)
 
     def test_center(self):
         # Fill character can be either bytes or bytearray (issue 12380)
@@ -625,6 +643,11 @@ class BaseBytesTest:
             self.assertEqual(b.rjust(7, fill_type(b'-')),
                              self.type2test(b'----abc'))
 
+    def test_xjust_int_error(self):
+        self.assertRaises(TypeError, self.type2test(b'abc').center, 7, 32)
+        self.assertRaises(TypeError, self.type2test(b'abc').ljust, 7, 32)
+        self.assertRaises(TypeError, self.type2test(b'abc').rjust, 7, 32)
+
     def test_ord(self):
         b = self.type2test(b'\0A\x7f\x80\xff')
         self.assertEqual([ord(b[i:i+1]) for i in range(len(b))],
diff -urpN Python-3.6.3/Lib/test/test_bz2.py Python-3.6.5/Lib/test/test_bz2.py
--- Python-3.6.3/Lib/test/test_bz2.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_bz2.py	2018-03-28 11:19:31.000000000 +0200
@@ -13,6 +13,7 @@ import subprocess
 import sys
 from test.support import unlink
 import _compression
+import sys
 
 try:
     import threading
@@ -828,6 +829,16 @@ class BZ2DecompressorTest(BaseTest):
         # Previously, a second call could crash due to internal inconsistency
         self.assertRaises(Exception, bzd.decompress, self.BAD_DATA * 30)
 
+    @support.refcount_test
+    def test_refleaks_in___init__(self):
+        gettotalrefcount = support.get_attribute(sys, 'gettotalrefcount')
+        bzd = BZ2Decompressor()
+        refs_before = gettotalrefcount()
+        for i in range(100):
+            bzd.__init__()
+        self.assertAlmostEqual(gettotalrefcount() - refs_before, 0, delta=10)
+
+
 class CompressDecompressTest(BaseTest):
     def testCompress(self):
         data = bz2.compress(self.TEXT)
diff -urpN Python-3.6.3/Lib/test/test_capi.py Python-3.6.5/Lib/test/test_capi.py
--- Python-3.6.3/Lib/test/test_capi.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_capi.py	2018-03-28 11:19:31.000000000 +0200
@@ -13,7 +13,7 @@ import time
 import unittest
 from test import support
 from test.support import MISSING_C_DOCSTRINGS
-from test.support.script_helper import assert_python_failure
+from test.support.script_helper import assert_python_failure, assert_python_ok
 try:
     import _posixsubprocess
 except ImportError:
@@ -241,6 +241,38 @@ class CAPITest(unittest.TestCase):
     def test_buildvalue_N(self):
         _testcapi.test_buildvalue_N()
 
+    def test_set_nomemory(self):
+        code = """if 1:
+            import _testcapi
+
+            class C(): pass
+
+            # The first loop tests both functions and that remove_mem_hooks()
+            # can be called twice in a row. The second loop checks a call to
+            # set_nomemory() after a call to remove_mem_hooks(). The third
+            # loop checks the start and stop arguments of set_nomemory().
+            for outer_cnt in range(1, 4):
+                start = 10 * outer_cnt
+                for j in range(100):
+                    if j == 0:
+                        if outer_cnt != 3:
+                            _testcapi.set_nomemory(start)
+                        else:
+                            _testcapi.set_nomemory(start, start + 1)
+                    try:
+                        C()
+                    except MemoryError as e:
+                        if outer_cnt != 3:
+                            _testcapi.remove_mem_hooks()
+                        print('MemoryError', outer_cnt, j)
+                        _testcapi.remove_mem_hooks()
+                        break
+        """
+        rc, out, err = assert_python_ok('-c', code)
+        self.assertIn(b'MemoryError 1 10', out)
+        self.assertIn(b'MemoryError 2 20', out)
+        self.assertIn(b'MemoryError 3 30', out)
+
 
 @unittest.skipUnless(threading, 'Threading required for this test.')
 class TestPendingCalls(unittest.TestCase):
@@ -369,23 +401,30 @@ class EmbeddingTests(unittest.TestCase):
     def tearDown(self):
         os.chdir(self.oldcwd)
 
-    def run_embedded_interpreter(self, *args):
+    def run_embedded_interpreter(self, *args, env=None):
         """Runs a test in the embedded interpreter"""
         cmd = [self.test_exe]
         cmd.extend(args)
+        if env is not None and sys.platform == 'win32':
+            # Windows requires at least the SYSTEMROOT environment variable to
+            # start Python.
+            env = env.copy()
+            env['SYSTEMROOT'] = os.environ['SYSTEMROOT']
+
         p = subprocess.Popen(cmd,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE,
-                             universal_newlines=True)
+                             universal_newlines=True,
+                             env=env)
         (out, err) = p.communicate()
         self.assertEqual(p.returncode, 0,
                          "bad returncode %d, stderr is %r" %
                          (p.returncode, err))
         return out, err
 
-    def test_subinterps(self):
+    def test_repeated_init_and_subinterpreters(self):
         # This is just a "don't crash" test
-        out, err = self.run_embedded_interpreter()
+        out, err = self.run_embedded_interpreter('repeated_init_and_subinterpreters')
         if support.verbose:
             print()
             print(out)
@@ -403,13 +442,14 @@ class EmbeddingTests(unittest.TestCase):
 
     def test_forced_io_encoding(self):
         # Checks forced configuration of embedded interpreter IO streams
-        out, err = self.run_embedded_interpreter("forced_io_encoding")
+        env = dict(os.environ, PYTHONIOENCODING="utf-8:surrogateescape")
+        out, err = self.run_embedded_interpreter("forced_io_encoding", env=env)
         if support.verbose:
             print()
             print(out)
             print(err)
-        expected_errors = sys.__stdout__.errors
-        expected_stdin_encoding = sys.__stdin__.encoding
+        expected_stream_encoding = "utf-8"
+        expected_errors = "surrogateescape"
         expected_pipe_encoding = self._get_default_pipe_encoding()
         expected_output = '\n'.join([
         "--- Use defaults ---",
@@ -437,13 +477,23 @@ class EmbeddingTests(unittest.TestCase):
         "stdout: latin-1:replace",
         "stderr: latin-1:backslashreplace"])
         expected_output = expected_output.format(
-                                in_encoding=expected_stdin_encoding,
-                                out_encoding=expected_pipe_encoding,
+                                in_encoding=expected_stream_encoding,
+                                out_encoding=expected_stream_encoding,
                                 errors=expected_errors)
         # This is useful if we ever trip over odd platform behaviour
         self.maxDiff = None
         self.assertEqual(out.strip(), expected_output)
 
+    def test_pre_initialization_api(self):
+        """
+        Checks the few parts of the C-API that work before the runtine
+        is initialized (via Py_Initialize()).
+        """
+        env = dict(os.environ, PYTHONPATH=os.pathsep.join(sys.path))
+        out, err = self.run_embedded_interpreter("pre_initialization_api", env=env)
+        self.assertEqual(out, '')
+        self.assertEqual(err, '')
+
 
 class SkipitemTest(unittest.TestCase):
 
diff -urpN Python-3.6.3/Lib/test/test_class.py Python-3.6.5/Lib/test/test_class.py
--- Python-3.6.3/Lib/test/test_class.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_class.py	2018-03-28 11:19:31.000000000 +0200
@@ -595,5 +595,6 @@ class ClassTests(unittest.TestCase):
         with self.assertRaises(TypeError):
             type.__setattr__(A, b'x', None)
 
+
 if __name__ == '__main__':
     unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_cmd.py Python-3.6.5/Lib/test/test_cmd.py
--- Python-3.6.3/Lib/test/test_cmd.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_cmd.py	2018-03-28 11:19:31.000000000 +0200
@@ -52,7 +52,7 @@ class samplecmdclass(cmd.Cmd):
 
     Test for the function completedefault():
     >>> mycmd.completedefault()
-    This is the completedefault methode
+    This is the completedefault method
     >>> mycmd.completenames("a")
     ['add']
 
@@ -141,7 +141,7 @@ class samplecmdclass(cmd.Cmd):
         print("Hello from postloop")
 
     def completedefault(self, *ignored):
-        print("This is the completedefault methode")
+        print("This is the completedefault method")
 
     def complete_command(self):
         print("complete command")
diff -urpN Python-3.6.3/Lib/test/test_cmd_line.py Python-3.6.5/Lib/test/test_cmd_line.py
--- Python-3.6.3/Lib/test/test_cmd_line.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_cmd_line.py	2018-03-28 11:19:31.000000000 +0200
@@ -10,7 +10,7 @@ import subprocess
 import tempfile
 from test.support import script_helper, is_android
 from test.support.script_helper import (spawn_python, kill_python, assert_python_ok,
-    assert_python_failure)
+    assert_python_failure, interpreter_requires_environment)
 
 
 # XXX (ncoghlan): Move to script_helper and make consistent with run_python
@@ -57,6 +57,8 @@ class CmdLineTest(unittest.TestCase):
         rc, out, err = assert_python_ok('-vv')
         self.assertNotIn(b'stack overflow', err)
 
+    @unittest.skipIf(interpreter_requires_environment(),
+                     'Cannot run -E tests when PYTHON env vars are required.')
     def test_xoptions(self):
         def get_xoptions(*args):
             # use subprocess module directly because test.support.script_helper adds
@@ -272,11 +274,7 @@ class CmdLineTest(unittest.TestCase):
 
     def test_displayhook_unencodable(self):
         for encoding in ('ascii', 'latin-1', 'utf-8'):
-            # We are testing a PYTHON environment variable here, so we can't
-            # use -E, -I, or script_helper (which uses them).  So instead we do
-            # poor-man's isolation by deleting the PYTHON vars from env.
-            env = {key:value for (key,value) in os.environ.copy().items()
-                   if not key.startswith('PYTHON')}
+            env = os.environ.copy()
             env['PYTHONIOENCODING'] = encoding
             p = subprocess.Popen(
                 [sys.executable, '-i'],
@@ -426,10 +424,15 @@ class CmdLineTest(unittest.TestCase):
 
         # Verify that sys.flags contains hash_randomization
         code = 'import sys; print("random is", sys.flags.hash_randomization)'
-        rc, out, err = assert_python_ok('-c', code)
-        self.assertEqual(rc, 0)
+        rc, out, err = assert_python_ok('-c', code, PYTHONHASHSEED='')
+        self.assertIn(b'random is 1', out)
+
+        rc, out, err = assert_python_ok('-c', code, PYTHONHASHSEED='random')
         self.assertIn(b'random is 1', out)
 
+        rc, out, err = assert_python_ok('-c', code, PYTHONHASHSEED='0')
+        self.assertIn(b'random is 0', out)
+
     def test_del___main__(self):
         # Issue #15001: PyRun_SimpleFileExFlags() did crash because it kept a
         # borrowed reference to the dict of __main__ module and later modify
@@ -486,6 +489,19 @@ class CmdLineTest(unittest.TestCase):
                                           cwd=tmpdir)
             self.assertEqual(out.strip(), b"ok")
 
+    @unittest.skipUnless(sys.platform == 'win32',
+                         'bpo-32457 only applies on Windows')
+    def test_argv0_normalization(self):
+        args = sys.executable, '-c', 'print(0)'
+        prefix, exe = os.path.split(sys.executable)
+        executable = prefix + '\\.\\.\\.\\' + exe
+
+        proc = subprocess.run(args, stdout=subprocess.PIPE,
+                              executable=executable)
+        self.assertEqual(proc.returncode, 0, proc)
+        self.assertEqual(proc.stdout.strip(), b'0')
+
+
 def test_main():
     test.support.run_unittest(CmdLineTest)
     test.support.reap_children()
diff -urpN Python-3.6.3/Lib/test/test_code.py Python-3.6.5/Lib/test/test_code.py
--- Python-3.6.3/Lib/test/test_code.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_code.py	2018-03-28 11:19:31.000000000 +0200
@@ -102,6 +102,7 @@ consts: ('None',)
 
 """
 
+import inspect
 import sys
 import threading
 import unittest
@@ -130,6 +131,10 @@ def dump(co):
         print("%s: %s" % (attr, getattr(co, "co_" + attr)))
     print("consts:", tuple(consts(co.co_consts)))
 
+# Needed for test_closure_injection below
+# Defined at global scope to avoid implicitly closing over __class__
+def external_getitem(self, i):
+    return f"Foreign getitem: {super().__getitem__(i)}"
 
 class CodeTest(unittest.TestCase):
 
@@ -141,6 +146,46 @@ class CodeTest(unittest.TestCase):
         self.assertEqual(co.co_name, "funcname")
         self.assertEqual(co.co_firstlineno, 15)
 
+    @cpython_only
+    def test_closure_injection(self):
+        # From https://bugs.python.org/issue32176
+        from types import FunctionType, CodeType
+
+        def create_closure(__class__):
+            return (lambda: __class__).__closure__
+
+        def new_code(c):
+            '''A new code object with a __class__ cell added to freevars'''
+            return CodeType(
+                c.co_argcount, c.co_kwonlyargcount, c.co_nlocals,
+                c.co_stacksize, c.co_flags, c.co_code, c.co_consts, c.co_names,
+                c.co_varnames, c.co_filename, c.co_name, c.co_firstlineno,
+                c.co_lnotab, c.co_freevars + ('__class__',), c.co_cellvars)
+
+        def add_foreign_method(cls, name, f):
+            code = new_code(f.__code__)
+            assert not f.__closure__
+            closure = create_closure(cls)
+            defaults = f.__defaults__
+            setattr(cls, name, FunctionType(code, globals(), name, defaults, closure))
+
+        class List(list):
+            pass
+
+        add_foreign_method(List, "__getitem__", external_getitem)
+
+        # Ensure the closure injection actually worked
+        function = List.__getitem__
+        class_ref = function.__closure__[0].cell_contents
+        self.assertIs(class_ref, List)
+
+        # Ensure the code correctly indicates it accesses a free variable
+        self.assertFalse(function.__code__.co_flags & inspect.CO_NOFREE,
+                         hex(function.__code__.co_flags))
+
+        # Ensure the zero-arg super() call in the injected method works
+        obj = List([1, 2, 3])
+        self.assertEqual(obj[0], "Foreign getitem: 1")
 
 def isinterned(s):
     return s is sys.intern(('_' + s + '_')[1:-1])
@@ -231,7 +276,7 @@ if check_impl_detail(cpython=True) and c
     SetExtra.restype = ctypes.c_int
 
     GetExtra = py._PyCode_GetExtra
-    GetExtra.argtypes = (ctypes.py_object, ctypes.c_ssize_t, 
+    GetExtra.argtypes = (ctypes.py_object, ctypes.c_ssize_t,
                          ctypes.POINTER(ctypes.c_voidp))
     GetExtra.restype = ctypes.c_int
 
diff -urpN Python-3.6.3/Lib/test/test_code_module.py Python-3.6.5/Lib/test/test_code_module.py
--- Python-3.6.3/Lib/test/test_code_module.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_code_module.py	2018-03-28 11:19:31.000000000 +0200
@@ -28,16 +28,24 @@ class TestInteractiveConsole(unittest.Te
         self.sysmod = stack.enter_context(prepatch)
         if sys.excepthook is sys.__excepthook__:
             self.sysmod.excepthook = self.sysmod.__excepthook__
+        del self.sysmod.ps1
+        del self.sysmod.ps2
 
     def test_ps1(self):
         self.infunc.side_effect = EOFError('Finished')
         self.console.interact()
         self.assertEqual(self.sysmod.ps1, '>>> ')
+        self.sysmod.ps1 = 'custom1> '
+        self.console.interact()
+        self.assertEqual(self.sysmod.ps1, 'custom1> ')
 
     def test_ps2(self):
         self.infunc.side_effect = EOFError('Finished')
         self.console.interact()
         self.assertEqual(self.sysmod.ps2, '... ')
+        self.sysmod.ps1 = 'custom2> '
+        self.console.interact()
+        self.assertEqual(self.sysmod.ps1, 'custom2> ')
 
     def test_console_stderr(self):
         self.infunc.side_effect = ["'antioch'", "", EOFError('Finished')]
diff -urpN Python-3.6.3/Lib/test/test_codeccallbacks.py Python-3.6.5/Lib/test/test_codeccallbacks.py
--- Python-3.6.3/Lib/test/test_codeccallbacks.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_codeccallbacks.py	2018-03-28 11:19:31.000000000 +0200
@@ -1032,7 +1032,7 @@ class CodecCallbackTest(unittest.TestCas
 
         def mutating(exc):
             if isinstance(exc, UnicodeDecodeError):
-                exc.object[:] = b""
+                exc.object = b""
                 return ("\u4242", 0)
             else:
                 raise TypeError("don't know how to handle %r" % exc)
@@ -1042,8 +1042,59 @@ class CodecCallbackTest(unittest.TestCas
         with test.support.check_warnings():
             # unicode-internal has been deprecated
             for (encoding, data) in baddata:
-                with self.assertRaises(TypeError):
-                    data.decode(encoding, "test.replacing")
+                self.assertEqual(data.decode(encoding, "test.mutating"), "\u4242")
+
+    # issue32583
+    def test_crashing_decode_handler(self):
+        # better generating one more character to fill the extra space slot
+        # so in debug build it can steadily fail
+        def forward_shorter_than_end(exc):
+            if isinstance(exc, UnicodeDecodeError):
+                # size one character, 0 < forward < exc.end
+                return ('\ufffd', exc.start+1)
+            else:
+                raise TypeError("don't know how to handle %r" % exc)
+        codecs.register_error(
+            "test.forward_shorter_than_end", forward_shorter_than_end)
+
+        self.assertEqual(
+            b'\xd8\xd8\xd8\xd8\xd8\x00\x00\x00'.decode(
+                'utf-16-le', 'test.forward_shorter_than_end'),
+            '\ufffd\ufffd\ufffd\ufffd\xd8\x00'
+        )
+        self.assertEqual(
+            b'\xd8\xd8\xd8\xd8\x00\xd8\x00\x00'.decode(
+                'utf-16-be', 'test.forward_shorter_than_end'),
+            '\ufffd\ufffd\ufffd\ufffd\xd8\x00'
+        )
+        self.assertEqual(
+            b'\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00'.decode(
+                'utf-32-le', 'test.forward_shorter_than_end'),
+            '\ufffd\ufffd\ufffd\u1111\x00'
+        )
+        self.assertEqual(
+            b'\x11\x11\x11\x00\x00\x11\x11\x00\x00\x00\x00'.decode(
+                'utf-32-be', 'test.forward_shorter_than_end'),
+            '\ufffd\ufffd\ufffd\u1111\x00'
+        )
+
+        def replace_with_long(exc):
+            if isinstance(exc, UnicodeDecodeError):
+                exc.object = b"\x00" * 8
+                return ('\ufffd', exc.start)
+            else:
+                raise TypeError("don't know how to handle %r" % exc)
+        codecs.register_error("test.replace_with_long", replace_with_long)
+
+        self.assertEqual(
+            b'\x00'.decode('utf-16', 'test.replace_with_long'),
+            '\ufffd\x00\x00\x00\x00'
+        )
+        self.assertEqual(
+            b'\x00'.decode('utf-32', 'test.replace_with_long'),
+            '\ufffd\x00\x00'
+        )
+
 
     def test_fake_error_class(self):
         handlers = [
diff -urpN Python-3.6.3/Lib/test/test_codecs.py Python-3.6.5/Lib/test/test_codecs.py
--- Python-3.6.3/Lib/test/test_codecs.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_codecs.py	2018-03-28 11:19:31.000000000 +0200
@@ -196,19 +196,33 @@ class ReadTest(MixInCheckStateHandling):
         self.assertEqual(f.read(), ''.join(lines[1:]))
         self.assertEqual(f.read(), '')
 
+        # Issue #32110: Test readline() followed by read(n)
+        f = getreader()
+        self.assertEqual(f.readline(), lines[0])
+        self.assertEqual(f.read(1), lines[1][0])
+        self.assertEqual(f.read(0), '')
+        self.assertEqual(f.read(100), data[len(lines[0]) + 1:][:100])
+
         # Issue #16636: Test readline() followed by readlines()
         f = getreader()
         self.assertEqual(f.readline(), lines[0])
         self.assertEqual(f.readlines(), lines[1:])
         self.assertEqual(f.read(), '')
 
-        # Test read() followed by read()
+        # Test read(n) followed by read()
         f = getreader()
         self.assertEqual(f.read(size=40, chars=5), data[:5])
         self.assertEqual(f.read(), data[5:])
         self.assertEqual(f.read(), '')
 
-        # Issue #12446: Test read() followed by readlines()
+        # Issue #32110: Test read(n) followed by read(n)
+        f = getreader()
+        self.assertEqual(f.read(size=40, chars=5), data[:5])
+        self.assertEqual(f.read(1), data[5])
+        self.assertEqual(f.read(0), '')
+        self.assertEqual(f.read(100), data[6:106])
+
+        # Issue #12446: Test read(n) followed by readlines()
         f = getreader()
         self.assertEqual(f.read(size=40, chars=5), data[:5])
         self.assertEqual(f.readlines(), [lines[0][5:]] + lines[1:])
@@ -1203,6 +1217,8 @@ class EscapeDecodeTest(unittest.TestCase
             check(br"\8", b"\\8")
         with self.assertWarns(DeprecationWarning):
             check(br"\9", b"\\9")
+        with self.assertWarns(DeprecationWarning):
+            check(b"\\\xfa", b"\\\xfa")
 
     def test_errors(self):
         decode = codecs.escape_decode
@@ -2474,6 +2490,8 @@ class UnicodeEscapeTest(unittest.TestCas
             check(br"\8", "\\8")
         with self.assertWarns(DeprecationWarning):
             check(br"\9", "\\9")
+        with self.assertWarns(DeprecationWarning):
+            check(b"\\\xfa", "\\\xfa")
 
     def test_decode_errors(self):
         decode = codecs.unicode_escape_decode
diff -urpN Python-3.6.3/Lib/test/test_collections.py Python-3.6.5/Lib/test/test_collections.py
--- Python-3.6.3/Lib/test/test_collections.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_collections.py	2018-03-28 11:19:31.000000000 +0200
@@ -550,7 +550,7 @@ class TestOneTrickPonyABCs(ABCTestCase):
 
         c = new_coro()
         self.assertIsInstance(c, Awaitable)
-        c.close() # awoid RuntimeWarning that coro() was not awaited
+        c.close() # avoid RuntimeWarning that coro() was not awaited
 
         class CoroLike: pass
         Coroutine.register(CoroLike)
@@ -600,7 +600,7 @@ class TestOneTrickPonyABCs(ABCTestCase):
 
         c = new_coro()
         self.assertIsInstance(c, Coroutine)
-        c.close() # awoid RuntimeWarning that coro() was not awaited
+        c.close() # avoid RuntimeWarning that coro() was not awaited
 
         class CoroLike:
             def send(self, value):
@@ -1607,7 +1607,7 @@ class TestCollectionABCs(ABCTestCase):
             '__len__', '__getitem__', '__setitem__', '__delitem__', 'insert')
 
     def test_MutableSequence_mixins(self):
-        # Test the mixins of MutableSequence by creating a miminal concrete
+        # Test the mixins of MutableSequence by creating a minimal concrete
         # class inherited from it.
         class MutableSequenceSubclass(MutableSequence):
             def __init__(self):
diff -urpN Python-3.6.3/Lib/test/test_compile.py Python-3.6.5/Lib/test/test_compile.py
--- Python-3.6.3/Lib/test/test_compile.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_compile.py	2018-03-28 11:19:31.000000000 +0200
@@ -6,7 +6,7 @@ import _ast
 import tempfile
 import types
 from test import support
-from test.support import script_helper
+from test.support import script_helper, FakePath
 
 class TestSpecifics(unittest.TestCase):
 
@@ -35,6 +35,7 @@ class TestSpecifics(unittest.TestCase):
         import builtins
         prev = builtins.__debug__
         setattr(builtins, '__debug__', 'sure')
+        self.assertEqual(__debug__, prev)
         setattr(builtins, '__debug__', prev)
 
     def test_argument_handling(self):
@@ -669,13 +670,7 @@ if 1:
 
     def test_path_like_objects(self):
         # An implicit test for PyUnicode_FSDecoder().
-        class PathLike:
-            def __init__(self, path):
-                self._path = path
-            def __fspath__(self):
-                return self._path
-
-        compile("42", PathLike("test_compile_pathlike"), "single")
+        compile("42", FakePath("test_compile_pathlike"), "single")
 
 
 class TestStackSize(unittest.TestCase):
diff -urpN Python-3.6.3/Lib/test/test_crypt.py Python-3.6.5/Lib/test/test_crypt.py
--- Python-3.6.3/Lib/test/test_crypt.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_crypt.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,33 +1,45 @@
+import sys
 from test import support
 import unittest
 
 crypt = support.import_module('crypt')
 
+if sys.platform.startswith('openbsd'):
+    raise unittest.SkipTest('The only supported method on OpenBSD is Blowfish')
+
 class CryptTestCase(unittest.TestCase):
 
     def test_crypt(self):
-        c = crypt.crypt('mypassword', 'ab')
-        if support.verbose:
-            print('Test encryption: ', c)
+        cr = crypt.crypt('mypassword')
+        cr2 = crypt.crypt('mypassword', cr)
+        self.assertEqual(cr2, cr)
+        cr = crypt.crypt('mypassword', 'ab')
+        if cr is not None:
+            cr2 = crypt.crypt('mypassword', cr)
+            self.assertEqual(cr2, cr)
 
     def test_salt(self):
         self.assertEqual(len(crypt._saltchars), 64)
         for method in crypt.methods:
             salt = crypt.mksalt(method)
-            self.assertEqual(len(salt),
-                    method.salt_chars + (3 if method.ident else 0))
+            self.assertIn(len(salt) - method.salt_chars, {0, 1, 3, 4, 6, 7})
+            if method.ident:
+                self.assertIn(method.ident, salt[:len(salt)-method.salt_chars])
 
     def test_saltedcrypt(self):
         for method in crypt.methods:
-            pw = crypt.crypt('assword', method)
-            self.assertEqual(len(pw), method.total_size)
-            pw = crypt.crypt('assword', crypt.mksalt(method))
-            self.assertEqual(len(pw), method.total_size)
+            cr = crypt.crypt('assword', method)
+            self.assertEqual(len(cr), method.total_size)
+            cr2 = crypt.crypt('assword', cr)
+            self.assertEqual(cr2, cr)
+            cr = crypt.crypt('assword', crypt.mksalt(method))
+            self.assertEqual(len(cr), method.total_size)
 
     def test_methods(self):
         # Guarantee that METHOD_CRYPT is the last method in crypt.methods.
         self.assertTrue(len(crypt.methods) >= 1)
         self.assertEqual(crypt.METHOD_CRYPT, crypt.methods[-1])
 
+
 if __name__ == "__main__":
     unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_csv.py Python-3.6.5/Lib/test/test_csv.py
--- Python-3.6.3/Lib/test/test_csv.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_csv.py	2018-03-28 11:19:31.000000000 +0200
@@ -207,10 +207,29 @@ class Test_Csv(unittest.TestCase):
         with TemporaryFile("w+", newline='') as fileobj:
             writer = csv.writer(fileobj)
             self.assertRaises(TypeError, writer.writerows, None)
-            writer.writerows([['a','b'],['c','d']])
+            writer.writerows([['a', 'b'], ['c', 'd']])
             fileobj.seek(0)
             self.assertEqual(fileobj.read(), "a,b\r\nc,d\r\n")
 
+    def test_writerows_with_none(self):
+        with TemporaryFile("w+", newline='') as fileobj:
+            writer = csv.writer(fileobj)
+            writer.writerows([['a', None], [None, 'd']])
+            fileobj.seek(0)
+            self.assertEqual(fileobj.read(), "a,\r\n,d\r\n")
+
+        with TemporaryFile("w+", newline='') as fileobj:
+            writer = csv.writer(fileobj)
+            writer.writerows([[None], ['a']])
+            fileobj.seek(0)
+            self.assertEqual(fileobj.read(), '""\r\na\r\n')
+
+        with TemporaryFile("w+", newline='') as fileobj:
+            writer = csv.writer(fileobj)
+            writer.writerows([['a'], [None]])
+            fileobj.seek(0)
+            self.assertEqual(fileobj.read(), 'a\r\n""\r\n')
+
     @support.cpython_only
     def test_writerows_legacy_strings(self):
         import _testcapi
@@ -967,6 +986,16 @@ Stonecutters Seafood and Chop House+ Lem
         self.assertEqual(sniffer.has_header(self.header2 + self.sample8),
                          True)
 
+    def test_guess_quote_and_delimiter(self):
+        sniffer = csv.Sniffer()
+        for header in (";'123;4';", "'123;4';", ";'123;4'", "'123;4'"):
+            with self.subTest(header):
+                dialect = sniffer.sniff(header, ",;")
+                self.assertEqual(dialect.delimiter, ';')
+                self.assertEqual(dialect.quotechar, "'")
+                self.assertIs(dialect.doublequote, False)
+                self.assertIs(dialect.skipinitialspace, False)
+
     def test_sniff(self):
         sniffer = csv.Sniffer()
         dialect = sniffer.sniff(self.sample1)
diff -urpN Python-3.6.3/Lib/test/test_curses.py Python-3.6.5/Lib/test/test_curses.py
--- Python-3.6.3/Lib/test/test_curses.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_curses.py	2018-03-28 11:19:31.000000000 +0200
@@ -15,7 +15,7 @@ import sys
 import tempfile
 import unittest
 
-from test.support import requires, import_module, verbose
+from test.support import requires, import_module, verbose, SaveSignals
 
 # Optionally test curses module.  This currently requires that the
 # 'curses' resource be given on the regrtest command line using the -u
@@ -25,9 +25,12 @@ requires('curses')
 
 # If either of these don't exist, skip the tests.
 curses = import_module('curses')
-import_module('curses.panel')
 import_module('curses.ascii')
 import_module('curses.textpad')
+try:
+    import curses.panel
+except ImportError:
+    pass
 
 def requires_curses_func(name):
     return unittest.skipUnless(hasattr(curses, name),
@@ -63,6 +66,8 @@ class TestCurses(unittest.TestCase):
             del cls.tmp
 
     def setUp(self):
+        self.save_signals = SaveSignals()
+        self.save_signals.save()
         if verbose:
             # just to make the test output a little more readable
             print()
@@ -72,6 +77,7 @@ class TestCurses(unittest.TestCase):
     def tearDown(self):
         curses.resetty()
         curses.endwin()
+        self.save_signals.restore()
 
     def test_window_funcs(self):
         "Test the methods of windows"
@@ -86,7 +92,7 @@ class TestCurses(unittest.TestCase):
                 with self.subTest(meth=meth.__qualname__, args=args):
                     meth(*args)
 
-        for meth in [stdscr.box, stdscr.clear, stdscr.clrtobot,
+        for meth in [stdscr.clear, stdscr.clrtobot,
                      stdscr.clrtoeol, stdscr.cursyncup, stdscr.delch,
                      stdscr.deleteln, stdscr.erase, stdscr.getbegyx,
                      stdscr.getbkgd, stdscr.getkey, stdscr.getmaxyx,
@@ -120,6 +126,13 @@ class TestCurses(unittest.TestCase):
             win.border(65, 66, 67, 68,
                        69, [], 71, 72)
 
+        win.box(65, 67)
+        win.box('!', '_')
+        win.box(b':', b'~')
+        self.assertRaises(TypeError, win.box, 65, 66, 67)
+        self.assertRaises(TypeError, win.box, 65)
+        win.box()
+
         stdscr.clearok(1)
 
         win4 = stdscr.derwin(2,2)
@@ -135,7 +148,9 @@ class TestCurses(unittest.TestCase):
 
         stdscr.idcok(1)
         stdscr.idlok(1)
-        stdscr.immedok(1)
+        if hasattr(stdscr, 'immedok'):
+            stdscr.immedok(1)
+            stdscr.immedok(0)
         stdscr.insch('c')
         stdscr.insdelln(1)
         stdscr.insnstr('abc', 3)
@@ -169,25 +184,27 @@ class TestCurses(unittest.TestCase):
         stdscr.setscrreg(10,15)
         win3 = stdscr.subwin(10,10)
         win3 = stdscr.subwin(10,10, 5,5)
-        stdscr.syncok(1)
+        if hasattr(stdscr, 'syncok') and not sys.platform.startswith("sunos"):
+            stdscr.syncok(1)
         stdscr.timeout(5)
         stdscr.touchline(5,5)
         stdscr.touchline(5,5,0)
         stdscr.vline('a', 3)
         stdscr.vline('a', 3, curses.A_STANDOUT)
-        stdscr.chgat(5, 2, 3, curses.A_BLINK)
-        stdscr.chgat(3, curses.A_BOLD)
-        stdscr.chgat(5, 8, curses.A_UNDERLINE)
-        stdscr.chgat(curses.A_BLINK)
+        if hasattr(stdscr, 'chgat'):
+            stdscr.chgat(5, 2, 3, curses.A_BLINK)
+            stdscr.chgat(3, curses.A_BOLD)
+            stdscr.chgat(5, 8, curses.A_UNDERLINE)
+            stdscr.chgat(curses.A_BLINK)
         stdscr.refresh()
 
         stdscr.vline(1,1, 'a', 3)
         stdscr.vline(1,1, 'a', 3, curses.A_STANDOUT)
 
-        if hasattr(curses, 'resize'):
-            stdscr.resize()
-        if hasattr(curses, 'enclose'):
-            stdscr.enclose()
+        if hasattr(stdscr, 'resize'):
+            stdscr.resize(25, 80)
+        if hasattr(stdscr, 'enclose'):
+            stdscr.enclose(10, 10)
 
         self.assertRaises(ValueError, stdscr.getstr, -400)
         self.assertRaises(ValueError, stdscr.getstr, 2, 3, -400)
@@ -208,15 +225,19 @@ class TestCurses(unittest.TestCase):
         "Test module-level functions"
         for func in [curses.baudrate, curses.beep, curses.can_change_color,
                      curses.cbreak, curses.def_prog_mode, curses.doupdate,
-                     curses.filter, curses.flash, curses.flushinp,
+                     curses.flash, curses.flushinp,
                      curses.has_colors, curses.has_ic, curses.has_il,
                      curses.isendwin, curses.killchar, curses.longname,
                      curses.nocbreak, curses.noecho, curses.nonl,
                      curses.noqiflush, curses.noraw,
                      curses.reset_prog_mode, curses.termattrs,
-                     curses.termname, curses.erasechar, curses.getsyx]:
+                     curses.termname, curses.erasechar]:
             with self.subTest(func=func.__qualname__):
                 func()
+        if hasattr(curses, 'filter'):
+            curses.filter()
+        if hasattr(curses, 'getsyx'):
+            curses.getsyx()
 
         # Functions that actually need arguments
         if curses.tigetstr("cnorm"):
@@ -240,15 +261,18 @@ class TestCurses(unittest.TestCase):
         curses.putp(b'abc')
         curses.qiflush()
         curses.raw() ; curses.raw(1)
-        curses.setsyx(5,5)
+        if hasattr(curses, 'setsyx'):
+            curses.setsyx(5,5)
         curses.tigetflag('hc')
         curses.tigetnum('co')
         curses.tigetstr('cr')
         curses.tparm(b'cr')
-        curses.typeahead(sys.__stdin__.fileno())
+        if hasattr(curses, 'typeahead'):
+            curses.typeahead(sys.__stdin__.fileno())
         curses.unctrl('a')
         curses.ungetch('a')
-        curses.use_env(1)
+        if hasattr(curses, 'use_env'):
+            curses.use_env(1)
 
     # Functions only available on a few platforms
     def test_colors_funcs(self):
@@ -282,6 +306,7 @@ class TestCurses(unittest.TestCase):
         curses.ungetmouse(0, 0, 0, 0, curses.BUTTON1_PRESSED)
         m = curses.getmouse()
 
+    @requires_curses_func('panel')
     def test_userptr_without_set(self):
         w = curses.newwin(10, 10)
         p = curses.panel.new_panel(w)
@@ -290,6 +315,7 @@ class TestCurses(unittest.TestCase):
                                msg='userptr should fail since not set'):
             p.userptr()
 
+    @requires_curses_func('panel')
     def test_userptr_memory_leak(self):
         w = curses.newwin(10, 10)
         p = curses.panel.new_panel(w)
@@ -302,16 +328,20 @@ class TestCurses(unittest.TestCase):
         self.assertEqual(sys.getrefcount(obj), nrefs,
                          "set_userptr leaked references")
 
+    @requires_curses_func('panel')
     def test_userptr_segfault(self):
-        panel = curses.panel.new_panel(self.stdscr)
+        w = curses.newwin(10, 10)
+        panel = curses.panel.new_panel(w)
         class A:
             def __del__(self):
                 panel.set_userptr(None)
         panel.set_userptr(A())
         panel.set_userptr(None)
 
+    @requires_curses_func('panel')
     def test_new_curses_panel(self):
-        panel = curses.panel.new_panel(self.stdscr)
+        w = curses.newwin(10, 10)
+        panel = curses.panel.new_panel(w)
         self.assertRaises(TypeError, type(panel))
 
     @requires_curses_func('is_term_resized')
@@ -338,6 +368,9 @@ class TestCurses(unittest.TestCase):
         self.stdscr.getkey()
 
     @requires_curses_func('unget_wch')
+    # XXX Remove the decorator when ncurses on OpenBSD be updated
+    @unittest.skipIf(sys.platform.startswith("openbsd"),
+                     "OpenBSD's curses (v.5.7) has bugs")
     def test_unget_wch(self):
         stdscr = self.stdscr
         encoding = stdscr.encoding
@@ -404,6 +437,8 @@ class TestCurses(unittest.TestCase):
 
     def test_issue13051(self):
         stdscr = self.stdscr
+        if not hasattr(stdscr, 'resize'):
+            raise unittest.SkipTest('requires curses.window.resize')
         box = curses.textpad.Textbox(stdscr, insert_mode=True)
         lines, cols = stdscr.getmaxyx()
         stdscr.resize(lines-2, cols-2)
diff -urpN Python-3.6.3/Lib/test/test_dbm_dumb.py Python-3.6.5/Lib/test/test_dbm_dumb.py
--- Python-3.6.3/Lib/test/test_dbm_dumb.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_dbm_dumb.py	2018-03-28 11:19:31.000000000 +0200
@@ -275,6 +275,21 @@ class DumbDBMTestCase(unittest.TestCase)
                 self.assertEqual(sorted(f.keys()), sorted(self._dict))
                 f.close()  # don't write
 
+    @unittest.skipUnless(support.TESTFN_NONASCII,
+                         'requires OS support of non-ASCII encodings')
+    def test_nonascii_filename(self):
+        filename = support.TESTFN_NONASCII
+        for suffix in ['.dir', '.dat', '.bak']:
+            self.addCleanup(support.unlink, filename + suffix)
+        with dumbdbm.open(filename, 'c') as db:
+            db[b'key'] = b'value'
+        self.assertTrue(os.path.exists(filename + '.dat'))
+        self.assertTrue(os.path.exists(filename + '.dir'))
+        with dumbdbm.open(filename, 'r') as db:
+            self.assertEqual(list(db.keys()), [b'key'])
+            self.assertTrue(b'key' in db)
+            self.assertEqual(db[b'key'], b'value')
+
     def tearDown(self):
         _delete_files()
 
diff -urpN Python-3.6.3/Lib/test/test_dbm_gnu.py Python-3.6.5/Lib/test/test_dbm_gnu.py
--- Python-3.6.3/Lib/test/test_dbm_gnu.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_dbm_gnu.py	2018-03-28 11:19:31.000000000 +0200
@@ -2,7 +2,7 @@ from test import support
 gdbm = support.import_module("dbm.gnu") #skip if not supported
 import unittest
 import os
-from test.support import TESTFN, unlink
+from test.support import TESTFN, TESTFN_NONASCII, unlink
 
 
 filename = TESTFN
@@ -93,5 +93,39 @@ class TestGdbm(unittest.TestCase):
         self.assertEqual(str(cm.exception),
                          "GDBM object has already been closed")
 
+    def test_bytes(self):
+        with gdbm.open(filename, 'c') as db:
+            db[b'bytes key \xbd'] = b'bytes value \xbd'
+        with gdbm.open(filename, 'r') as db:
+            self.assertEqual(list(db.keys()), [b'bytes key \xbd'])
+            self.assertTrue(b'bytes key \xbd' in db)
+            self.assertEqual(db[b'bytes key \xbd'], b'bytes value \xbd')
+
+    def test_unicode(self):
+        with gdbm.open(filename, 'c') as db:
+            db['Unicode key \U0001f40d'] = 'Unicode value \U0001f40d'
+        with gdbm.open(filename, 'r') as db:
+            self.assertEqual(list(db.keys()), ['Unicode key \U0001f40d'.encode()])
+            self.assertTrue('Unicode key \U0001f40d'.encode() in db)
+            self.assertTrue('Unicode key \U0001f40d' in db)
+            self.assertEqual(db['Unicode key \U0001f40d'.encode()],
+                             'Unicode value \U0001f40d'.encode())
+            self.assertEqual(db['Unicode key \U0001f40d'],
+                             'Unicode value \U0001f40d'.encode())
+
+    @unittest.skipUnless(TESTFN_NONASCII,
+                         'requires OS support of non-ASCII encodings')
+    def test_nonascii_filename(self):
+        filename = TESTFN_NONASCII
+        self.addCleanup(unlink, filename)
+        with gdbm.open(filename, 'c') as db:
+            db[b'key'] = b'value'
+        self.assertTrue(os.path.exists(filename))
+        with gdbm.open(filename, 'r') as db:
+            self.assertEqual(list(db.keys()), [b'key'])
+            self.assertTrue(b'key' in db)
+            self.assertEqual(db[b'key'], b'value')
+
+
 if __name__ == '__main__':
     unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_dbm_ndbm.py Python-3.6.5/Lib/test/test_dbm_ndbm.py
--- Python-3.6.3/Lib/test/test_dbm_ndbm.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_dbm_ndbm.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,5 +1,6 @@
 from test import support
 support.import_module("dbm.ndbm") #skip if not supported
+import os
 import unittest
 import dbm.ndbm
 from dbm.ndbm import error
@@ -47,6 +48,42 @@ class DbmTestCase(unittest.TestCase):
         self.assertEqual(str(cm.exception),
                          "DBM object has already been closed")
 
+    def test_bytes(self):
+        with dbm.ndbm.open(self.filename, 'c') as db:
+            db[b'bytes key \xbd'] = b'bytes value \xbd'
+        with dbm.ndbm.open(self.filename, 'r') as db:
+            self.assertEqual(list(db.keys()), [b'bytes key \xbd'])
+            self.assertTrue(b'bytes key \xbd' in db)
+            self.assertEqual(db[b'bytes key \xbd'], b'bytes value \xbd')
+
+    def test_unicode(self):
+        with dbm.ndbm.open(self.filename, 'c') as db:
+            db['Unicode key \U0001f40d'] = 'Unicode value \U0001f40d'
+        with dbm.ndbm.open(self.filename, 'r') as db:
+            self.assertEqual(list(db.keys()), ['Unicode key \U0001f40d'.encode()])
+            self.assertTrue('Unicode key \U0001f40d'.encode() in db)
+            self.assertTrue('Unicode key \U0001f40d' in db)
+            self.assertEqual(db['Unicode key \U0001f40d'.encode()],
+                             'Unicode value \U0001f40d'.encode())
+            self.assertEqual(db['Unicode key \U0001f40d'],
+                             'Unicode value \U0001f40d'.encode())
+
+    @unittest.skipUnless(support.TESTFN_NONASCII,
+                         'requires OS support of non-ASCII encodings')
+    def test_nonascii_filename(self):
+        filename = support.TESTFN_NONASCII
+        for suffix in ['', '.pag', '.dir', '.db']:
+            self.addCleanup(support.unlink, filename + suffix)
+        with dbm.ndbm.open(filename, 'c') as db:
+            db[b'key'] = b'value'
+        self.assertTrue(any(os.path.exists(filename + suffix)
+                            for suffix in ['', '.pag', '.dir', '.db']))
+        with dbm.ndbm.open(filename, 'r') as db:
+            self.assertEqual(list(db.keys()), [b'key'])
+            self.assertTrue(b'key' in db)
+            self.assertEqual(db[b'key'], b'value')
+
+
 
 if __name__ == '__main__':
     unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_descr.py Python-3.6.5/Lib/test/test_descr.py
--- Python-3.6.3/Lib/test/test_descr.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_descr.py	2018-03-28 11:19:31.000000000 +0200
@@ -1519,6 +1519,15 @@ order (MRO) for bases """
         del cm.x
         self.assertNotHasAttr(cm, "x")
 
+    @support.refcount_test
+    def test_refleaks_in_classmethod___init__(self):
+        gettotalrefcount = support.get_attribute(sys, 'gettotalrefcount')
+        cm = classmethod(None)
+        refs_before = gettotalrefcount()
+        for i in range(100):
+            cm.__init__(None)
+        self.assertAlmostEqual(gettotalrefcount() - refs_before, 0, delta=10)
+
     @support.impl_detail("the module 'xxsubtype' is internal")
     def test_classmethods_in_c(self):
         # Testing C-based class methods...
@@ -1574,6 +1583,15 @@ order (MRO) for bases """
         del sm.x
         self.assertNotHasAttr(sm, "x")
 
+    @support.refcount_test
+    def test_refleaks_in_staticmethod___init__(self):
+        gettotalrefcount = support.get_attribute(sys, 'gettotalrefcount')
+        sm = staticmethod(None)
+        refs_before = gettotalrefcount()
+        for i in range(100):
+            sm.__init__(None)
+        self.assertAlmostEqual(gettotalrefcount() - refs_before, 0, delta=10)
+
     @support.impl_detail("the module 'xxsubtype' is internal")
     def test_staticmethods_in_c(self):
         # Testing C-based static methods...
diff -urpN Python-3.6.3/Lib/test/test_dict.py Python-3.6.5/Lib/test/test_dict.py
--- Python-3.6.3/Lib/test/test_dict.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_dict.py	2018-03-28 11:19:31.000000000 +0200
@@ -468,6 +468,12 @@ class DictTest(unittest.TestCase):
         d = {1: BadRepr()}
         self.assertRaises(Exc, repr, d)
 
+    def test_repr_deep(self):
+        d = {}
+        for i in range(sys.getrecursionlimit() + 100):
+            d = {1: d}
+        self.assertRaises(RecursionError, repr, d)
+
     def test_eq(self):
         self.assertEqual({}, {})
         self.assertEqual({1: 2}, {1: 2})
diff -urpN Python-3.6.3/Lib/test/test_dictviews.py Python-3.6.5/Lib/test/test_dictviews.py
--- Python-3.6.3/Lib/test/test_dictviews.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_dictviews.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,6 +1,7 @@
 import collections
 import copy
 import pickle
+import sys
 import unittest
 
 class DictSetTest(unittest.TestCase):
@@ -202,6 +203,20 @@ class DictSetTest(unittest.TestCase):
     def test_recursive_repr(self):
         d = {}
         d[42] = d.values()
+        r = repr(d)
+        # Cannot perform a stronger test, as the contents of the repr
+        # are implementation-dependent.  All we can say is that we
+        # want a str result, not an exception of any sort.
+        self.assertIsInstance(r, str)
+        d[42] = d.items()
+        r = repr(d)
+        # Again.
+        self.assertIsInstance(r, str)
+
+    def test_deeply_nested_repr(self):
+        d = {}
+        for i in range(sys.getrecursionlimit() + 100):
+            d = {42: d.values()}
         self.assertRaises(RecursionError, repr, d)
 
     def test_copy(self):
diff -urpN Python-3.6.3/Lib/test/test_difflib.py Python-3.6.5/Lib/test/test_difflib.py
--- Python-3.6.3/Lib/test/test_difflib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_difflib.py	2018-03-28 11:19:31.000000000 +0200
@@ -466,13 +466,33 @@ class TestBytes(unittest.TestCase):
             list(generator(*args))
         self.assertEqual(msg, str(ctx.exception))
 
+class TestJunkAPIs(unittest.TestCase):
+    def test_is_line_junk_true(self):
+        for line in ['#', '  ', ' #', '# ', ' # ', '']:
+            self.assertTrue(difflib.IS_LINE_JUNK(line), repr(line))
+
+    def test_is_line_junk_false(self):
+        for line in ['##', ' ##', '## ', 'abc ', 'abc #', 'Mr. Moose is up!']:
+            self.assertFalse(difflib.IS_LINE_JUNK(line), repr(line))
+
+    def test_is_line_junk_REDOS(self):
+        evil_input = ('\t' * 1000000) + '##'
+        self.assertFalse(difflib.IS_LINE_JUNK(evil_input))
+
+    def test_is_character_junk_true(self):
+        for char in [' ', '\t']:
+            self.assertTrue(difflib.IS_CHARACTER_JUNK(char), repr(char))
+
+    def test_is_character_junk_false(self):
+        for char in ['a', '#', '\n', '\f', '\r', '\v']:
+            self.assertFalse(difflib.IS_CHARACTER_JUNK(char), repr(char))
 
 def test_main():
     difflib.HtmlDiff._default_prefix = 0
     Doctests = doctest.DocTestSuite(difflib)
     run_unittest(
         TestWithAscii, TestAutojunk, TestSFpatches, TestSFbugs,
-        TestOutputFormat, TestBytes, Doctests)
+        TestOutputFormat, TestBytes, TestJunkAPIs, Doctests)
 
 if __name__ == '__main__':
     test_main()
diff -urpN Python-3.6.3/Lib/test/test_dtrace.py Python-3.6.5/Lib/test/test_dtrace.py
--- Python-3.6.3/Lib/test/test_dtrace.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_dtrace.py	2018-03-28 11:19:31.000000000 +0200
@@ -79,7 +79,7 @@ class TraceBackend:
         try:
             output = self.trace(abspath("assert_usable" + self.EXTENSION))
             output = output.strip()
-        except (FileNotFoundError, PermissionError) as fnfe:
+        except (FileNotFoundError, NotADirectoryError, PermissionError) as fnfe:
             output = str(fnfe)
         if output != "probe: success":
             raise unittest.SkipTest(
diff -urpN Python-3.6.3/Lib/test/test_email/test__header_value_parser.py Python-3.6.5/Lib/test/test_email/test__header_value_parser.py
--- Python-3.6.3/Lib/test/test_email/test__header_value_parser.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_email/test__header_value_parser.py	2018-03-28 11:19:31.000000000 +0200
@@ -14,18 +14,7 @@ class TestTokens(TestEmailBase):
         self.assertEqual(x, ' \t')
         self.assertEqual(str(x), '')
         self.assertEqual(x.value, '')
-        self.assertEqual(x.encoded, ' \t')
-
-    # UnstructuredTokenList
-
-    def test_undecodable_bytes_error_preserved(self):
-        badstr = b"le pouf c\xaflebre".decode('ascii', 'surrogateescape')
-        unst = parser.get_unstructured(badstr)
-        self.assertDefectsEqual(unst.all_defects, [errors.UndecodableBytesDefect])
-        parts = list(unst.parts)
-        self.assertDefectsEqual(parts[0].all_defects, [])
-        self.assertDefectsEqual(parts[1].all_defects, [])
-        self.assertDefectsEqual(parts[2].all_defects, [errors.UndecodableBytesDefect])
+        self.assertEqual(x.token_type, 'fws')
 
 
 class TestParserMixin:
@@ -139,7 +128,6 @@ class TestParser(TestParserMixin, TestEm
                          'first second',
                          [],
                          '')
-        self.assertEqual(ew.encoded, '=?us-ascii*jive?q?first_second?=')
         self.assertEqual(ew.charset, 'us-ascii')
         self.assertEqual(ew.lang, 'jive')
 
@@ -150,7 +138,6 @@ class TestParser(TestParserMixin, TestEm
                          'first second',
                          [],
                          '')
-        self.assertEqual(ew.encoded, '=?us-ascii?q?first_second?=')
         self.assertEqual(ew.charset, 'us-ascii')
         self.assertEqual(ew.lang, '')
 
@@ -503,6 +490,10 @@ class TestParser(TestParserMixin, TestEm
         with self.assertRaises(errors.HeaderParseError):
             parser.get_bare_quoted_string('  "foo"')
 
+    def test_get_bare_quoted_string_only_quotes(self):
+        self._test_get_x(parser.get_bare_quoted_string,
+                         '""', '""', '', [], '')
+
     def test_get_bare_quoted_string_following_wsp_preserved(self):
         self._test_get_x(parser.get_bare_quoted_string,
              '"foo"\t bar', '"foo"', 'foo', [], '\t bar')
@@ -1480,6 +1471,19 @@ class TestParser(TestParserMixin, TestEm
         self.assertIsNone(angle_addr.route)
         self.assertEqual(angle_addr.addr_spec, '<>')
 
+    def test_get_angle_addr_qs_only_quotes(self):
+        angle_addr = self._test_get_x(parser.get_angle_addr,
+            '<""@example.com>',
+            '<""@example.com>',
+            '<""@example.com>',
+            [],
+            '')
+        self.assertEqual(angle_addr.token_type, 'angle-addr')
+        self.assertEqual(angle_addr.local_part, '')
+        self.assertEqual(angle_addr.domain, 'example.com')
+        self.assertIsNone(angle_addr.route)
+        self.assertEqual(angle_addr.addr_spec, '""@example.com')
+
     def test_get_angle_addr_with_cfws(self):
         angle_addr = self._test_get_x(parser.get_angle_addr,
             ' (foo) <dinsdale@example.com>(bar)',
@@ -2700,28 +2704,37 @@ class TestFolding(TestEmailBase):
     # and with unicode tokens in the comments.  Spaces inside the quotes
     # currently don't do the right thing.
 
-    def test_initial_whitespace_splitting(self):
+    def test_split_at_whitespace_after_header_before_long_token(self):
         body = parser.get_unstructured('   ' + 'x'*77)
         header = parser.Header([
             parser.HeaderLabel([parser.ValueTerminal('test:', 'atext')]),
             parser.CFWSList([parser.WhiteSpaceTerminal(' ', 'fws')]), body])
         self._test(header, 'test:   \n ' + 'x'*77 + '\n')
 
-    def test_whitespace_splitting(self):
+    def test_split_at_whitespace_before_long_token(self):
         self._test(parser.get_unstructured('xxx   ' + 'y'*77),
                    'xxx  \n ' + 'y'*77 + '\n')
 
+    def test_overlong_encodeable_is_wrapped(self):
+        first_token_with_whitespace = 'xxx   '
+        chrome_leader = '=?utf-8?q?'
+        len_chrome = len(chrome_leader) + 2
+        len_non_y = len_chrome + len(first_token_with_whitespace)
+        self._test(parser.get_unstructured(first_token_with_whitespace +
+                                           'y'*80),
+                   first_token_with_whitespace + chrome_leader +
+                       'y'*(78-len_non_y) + '?=\n' +
+                       ' ' + chrome_leader + 'y'*(80-(78-len_non_y)) + '?=\n')
+
     def test_long_filename_attachment(self):
-        folded = self.policy.fold('Content-Disposition', 'attachment; filename="TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TES.txt"')
-        self.assertEqual(
-            'Content-Disposition: attachment;\n filename="TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TES.txt"\n',
-            folded
-        )
-        folded = self.policy.fold('Content-Disposition', 'attachment; filename="TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_T.txt"')
-        self.assertEqual(
-            'Content-Disposition: attachment;\n filename="TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_T.txt"\n',
-            folded
-        )
+        self._test(parser.parse_content_disposition_header(
+            'attachment; filename="TEST_TEST_TEST_TEST'
+                '_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TEST_TES.txt"'),
+            "attachment;\n"
+            " filename*0*=us-ascii''TEST_TEST_TEST_TEST_TEST_TEST"
+                "_TEST_TEST_TEST_TEST_TEST;\n"
+            " filename*1*=_TEST_TES.txt\n",
+            )
 
 if __name__ == '__main__':
     unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_email/test_generator.py Python-3.6.5/Lib/test/test_email/test_generator.py
--- Python-3.6.3/Lib/test/test_email/test_generator.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_email/test_generator.py	2018-03-28 11:19:31.000000000 +0200
@@ -27,7 +27,6 @@ class TestGeneratorBase:
 
             None
             """),
-        # From is wrapped because wrapped it fits in 40.
         40: textwrap.dedent("""\
             To: whom_it_may_concern@example.com
             From:
@@ -40,11 +39,11 @@ class TestGeneratorBase:
 
             None
             """),
-        # Neither to nor from fit even if put on a new line,
-        # so we leave them sticking out on the first line.
         20: textwrap.dedent("""\
-            To: whom_it_may_concern@example.com
-            From: nobody_you_want_to_know@example.com
+            To:
+             whom_it_may_concern@example.com
+            From:
+             nobody_you_want_to_know@example.com
             Subject: We the
              willing led by the
              unknowing are doing
@@ -169,6 +168,53 @@ class TestGeneratorBase:
         g.flatten(msg)
         self.assertEqual(s.getvalue(), self.typ(self.refold_long_expected[0]))
 
+    def test_rfc2231_wrapping(self):
+        # This is pretty much just to make sure we don't have an infinite
+        # loop; I don't expect anyone to hit this in the field.
+        msg = self.msgmaker(self.typ(textwrap.dedent("""\
+            To: nobody
+            Content-Disposition: attachment;
+             filename="afilenamelongenoghtowraphere"
+
+            None
+            """)))
+        expected = textwrap.dedent("""\
+            To: nobody
+            Content-Disposition: attachment;
+             filename*0*=us-ascii''afilename;
+             filename*1*=longenoghtowraphere
+
+            None
+            """)
+        s = self.ioclass()
+        g = self.genclass(s, policy=self.policy.clone(max_line_length=33))
+        g.flatten(msg)
+        self.assertEqual(s.getvalue(), self.typ(expected))
+
+    def test_rfc2231_wrapping_switches_to_default_len_if_too_narrow(self):
+        # This is just to make sure we don't have an infinite loop; I don't
+        # expect anyone to hit this in the field, so I'm not bothering to make
+        # the result optimal (the encoding isn't needed).
+        msg = self.msgmaker(self.typ(textwrap.dedent("""\
+            To: nobody
+            Content-Disposition: attachment;
+             filename="afilenamelongenoghtowraphere"
+
+            None
+            """)))
+        expected = textwrap.dedent("""\
+            To: nobody
+            Content-Disposition:
+             attachment;
+             filename*0*=us-ascii''afilenamelongenoghtowraphere
+
+            None
+            """)
+        s = self.ioclass()
+        g = self.genclass(s, policy=self.policy.clone(max_line_length=20))
+        g.flatten(msg)
+        self.assertEqual(s.getvalue(), self.typ(expected))
+
 
 class TestGenerator(TestGeneratorBase, TestEmailBase):
 
diff -urpN Python-3.6.3/Lib/test/test_email/test_headerregistry.py Python-3.6.5/Lib/test/test_email/test_headerregistry.py
--- Python-3.6.3/Lib/test/test_email/test_headerregistry.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_email/test_headerregistry.py	2018-03-28 11:19:31.000000000 +0200
@@ -229,14 +229,14 @@ class TestContentTypeHeader(TestHeaderBa
         defects =  args[1] if l>1 else []
         decoded =  args[2] if l>2 and args[2] is not DITTO else source
         header = 'Content-Type:' + ' ' if source else ''
-        folded = args[3] if l>3 else header + source + '\n'
+        folded = args[3] if l>3 else header + decoded + '\n'
         h = self.make_header('Content-Type', source)
         self.assertEqual(h.content_type, content_type)
         self.assertEqual(h.maintype, maintype)
         self.assertEqual(h.subtype, subtype)
         self.assertEqual(h.params, parmdict)
         with self.assertRaises(TypeError):
-            h.params['abc'] = 'xyz'   # params is read-only.
+            h.params['abc'] = 'xyz'   # make sure params is read-only.
         self.assertDefectsEqual(h.defects, defects)
         self.assertEqual(h, decoded)
         self.assertEqual(h.fold(policy=policy.default), folded)
@@ -373,9 +373,10 @@ class TestContentTypeHeader(TestHeaderBa
             'text/plain; Charset="utf-8"'),
 
         # Since this is pretty much the ur-mimeheader, we'll put all the tests
-        # that exercise the parameter parsing and formatting here.
-        #
-        # XXX: question: is minimal quoting preferred?
+        # that exercise the parameter parsing and formatting here.  Note that
+        # when we refold we may canonicalize, so things like whitespace,
+        # quoting, and rfc2231 encoding may change from what was in the input
+        # header.
 
         'unquoted_param_value': (
             'text/plain; title=foo',
@@ -384,7 +385,8 @@ class TestContentTypeHeader(TestHeaderBa
             'plain',
             {'title': 'foo'},
             [],
-            'text/plain; title="foo"'),
+            'text/plain; title="foo"',
+            ),
 
         'param_value_with_tspecials': (
             'text/plain; title="(bar)foo blue"',
@@ -415,7 +417,8 @@ class TestContentTypeHeader(TestHeaderBa
             'mixed',
             {'boundary': 'CPIMSSMTPC06p5f3tG'},
             [],
-            'Multipart/mixed; boundary="CPIMSSMTPC06p5f3tG"'),
+            'Multipart/mixed; boundary="CPIMSSMTPC06p5f3tG"',
+            ),
 
         'spaces_around_semis': (
             ('image/jpeg; name="wibble.JPG" ; x-mac-type="4A504547" ; '
@@ -429,14 +432,31 @@ class TestContentTypeHeader(TestHeaderBa
             [],
             ('image/jpeg; name="wibble.JPG"; x-mac-type="4A504547"; '
                 'x-mac-creator="474B4F4E"'),
-            # XXX: it could be that we will eventually prefer to fold starting
-            # from the decoded value, in which case these spaces and similar
-            # spaces in other tests will be wrong.
-            ('Content-Type: image/jpeg; name="wibble.JPG" ; '
-                'x-mac-type="4A504547" ;\n'
+            ('Content-Type: image/jpeg; name="wibble.JPG";'
+                ' x-mac-type="4A504547";\n'
              ' x-mac-creator="474B4F4E"\n'),
             ),
 
+        'lots_of_mime_params': (
+            ('image/jpeg; name="wibble.JPG"; x-mac-type="4A504547"; '
+                'x-mac-creator="474B4F4E"; x-extrastuff="make it longer"'),
+            'image/jpeg',
+            'image',
+            'jpeg',
+            {'name': 'wibble.JPG',
+             'x-mac-type': '4A504547',
+             'x-mac-creator': '474B4F4E',
+             'x-extrastuff': 'make it longer'},
+            [],
+            ('image/jpeg; name="wibble.JPG"; x-mac-type="4A504547"; '
+                'x-mac-creator="474B4F4E"; x-extrastuff="make it longer"'),
+            # In this case the whole of the MimeParameters does *not* fit
+            # one one line, so we break at a lower syntactic level.
+            ('Content-Type: image/jpeg; name="wibble.JPG";'
+                ' x-mac-type="4A504547";\n'
+             ' x-mac-creator="474B4F4E"; x-extrastuff="make it longer"\n'),
+            ),
+
         'semis_inside_quotes': (
             'image/jpeg; name="Jim&amp;&amp;Jill"',
             'image/jpeg',
@@ -460,19 +480,25 @@ class TestContentTypeHeader(TestHeaderBa
             [],
             r'image/jpeg; name="Jim \"Bob\" Jill"'),
 
-        # XXX: This test works except for the refolding of the header.  I'll
-        # deal with that bug when I deal with the other folding bugs.
-        #'non_ascii_in_params': (
-        #    ('foo\xa7/bar; b\xa7r=two; '
-        #        'baz=thr\xa7e'.encode('latin-1').decode('us-ascii',
-        #                                                'surrogateescape')),
-        #    'foo\uFFFD/bar',
-        #    'foo\uFFFD',
-        #    'bar',
-        #    {'b\uFFFDr': 'two', 'baz': 'thr\uFFFDe'},
-        #    [errors.UndecodableBytesDefect]*3,
-        #    'foo�/bar; b�r="two"; baz="thr�e"',
-        #    ),
+        'non_ascii_in_params': (
+            ('foo\xa7/bar; b\xa7r=two; '
+                'baz=thr\xa7e'.encode('latin-1').decode('us-ascii',
+                                                        'surrogateescape')),
+            'foo\uFFFD/bar',
+            'foo\uFFFD',
+            'bar',
+            {'b\uFFFDr': 'two', 'baz': 'thr\uFFFDe'},
+            [errors.UndecodableBytesDefect]*3,
+            'foo�/bar; b�r="two"; baz="thr�e"',
+            # XXX Two bugs here: the mime type is not allowed to be an encoded
+            # word, and we shouldn't be emitting surrogates in the parameter
+            # names.  But I don't know what the behavior should be here, so I'm
+            # punting for now.  In practice this is unlikely to be encountered
+            # since headers with binary in them only come from a binary source
+            # and are almost certain to be re-emitted without refolding.
+            'Content-Type: =?unknown-8bit?q?foo=A7?=/bar; b\udca7r="two";\n'
+            " baz*=unknown-8bit''thr%A7e\n",
+            ),
 
         # RFC 2231 parameter tests.
 
@@ -494,19 +520,20 @@ class TestContentTypeHeader(TestHeaderBa
             [],
             r'image/jpeg; bar="baz\"foobar\"baz"'),
 
-        # XXX: This test works except for the refolding of the header.  I'll
-        # deal with that bug when I deal with the other folding bugs.
-        #'non_ascii_rfc2231_value': (
-        #    ('text/plain; charset=us-ascii; '
-        #     "title*=us-ascii'en'This%20is%20"
-        #     'not%20f\xa7n').encode('latin-1').decode('us-ascii',
-        #                                             'surrogateescape'),
-        #    'text/plain',
-        #    'text',
-        #    'plain',
-        #    {'charset': 'us-ascii', 'title': 'This is not f\uFFFDn'},
-        #     [errors.UndecodableBytesDefect],
-        #     'text/plain; charset="us-ascii"; title="This is not f�n"'),
+        'non_ascii_rfc2231_value': (
+            ('text/plain; charset=us-ascii; '
+             "title*=us-ascii'en'This%20is%20"
+             'not%20f\xa7n').encode('latin-1').decode('us-ascii',
+                                                     'surrogateescape'),
+            'text/plain',
+            'text',
+            'plain',
+            {'charset': 'us-ascii', 'title': 'This is not f\uFFFDn'},
+             [errors.UndecodableBytesDefect],
+             'text/plain; charset="us-ascii"; title="This is not f�n"',
+            'Content-Type: text/plain; charset="us-ascii";\n'
+            " title*=unknown-8bit''This%20is%20not%20f%A7n\n",
+            ),
 
         'rfc2231_encoded_charset': (
             'text/plain; charset*=ansi-x3.4-1968\'\'us-ascii',
@@ -529,8 +556,6 @@ class TestContentTypeHeader(TestHeaderBa
             {'name': 'This is ***fun*** is it not.pdf'},
             [],
             'text/plain; name="This is ***fun*** is it not.pdf"',
-            ('Content-Type: text/plain;\tname*0*=\'\'This%20is%20;\n'
-             '\tname*1*=%2A%2A%2Afun%2A%2A%2A%20;\tname*2="is it not.pdf"\n'),
             ),
 
         # Make sure we also handle it if there are spurious double quotes.
@@ -545,9 +570,6 @@ class TestContentTypeHeader(TestHeaderBa
             {'name': 'This is even more ***fun*** is it not.pdf'},
             [errors.InvalidHeaderDefect]*2,
             'text/plain; name="This is even more ***fun*** is it not.pdf"',
-            ('Content-Type: text/plain;\t'
-                'name*0*="us-ascii\'\'This%20is%20even%20more%20";\n'
-             '\tname*1*="%2A%2A%2Afun%2A%2A%2A%20";\tname*2="is it not.pdf"\n'),
             ),
 
         'rfc2231_single_quote_inside_double_quotes': (
@@ -562,9 +584,8 @@ class TestContentTypeHeader(TestHeaderBa
             [errors.InvalidHeaderDefect]*2,
             ('text/plain; charset="us-ascii"; '
                'title="This is really ***fun*** isn\'t it!"'),
-            ('Content-Type: text/plain; charset=us-ascii;\n'
-             '\ttitle*0*="us-ascii\'en\'This%20is%20really%20";\n'
-             '\ttitle*1*="%2A%2A%2Afun%2A%2A%2A%20";\ttitle*2="isn\'t it!"\n'),
+            ('Content-Type: text/plain; charset="us-ascii";\n'
+                ' title="This is really ***fun*** isn\'t it!"\n'),
             ),
 
         'rfc2231_single_quote_in_value_with_charset_and_lang': (
@@ -576,9 +597,6 @@ class TestContentTypeHeader(TestHeaderBa
             {'name': "Frank's Document"},
             [errors.InvalidHeaderDefect]*2,
             'application/x-foo; name="Frank\'s Document"',
-            ('Content-Type: application/x-foo;\t'
-                'name*0*="us-ascii\'en-us\'Frank\'s";\n'
-             ' name*1*=" Document"\n'),
             ),
 
         'rfc2231_single_quote_in_non_encoded_value': (
@@ -590,9 +608,6 @@ class TestContentTypeHeader(TestHeaderBa
             {'name': "us-ascii'en-us'Frank's Document"},
             [],
             'application/x-foo; name="us-ascii\'en-us\'Frank\'s Document"',
-            ('Content-Type: application/x-foo;\t'
-                'name*0="us-ascii\'en-us\'Frank\'s";\n'
-             ' name*1=" Document"\n'),
              ),
 
         'rfc2231_no_language_or_charset': (
@@ -615,12 +630,8 @@ class TestContentTypeHeader(TestHeaderBa
             {'name': 'This is even more ***fun*** is it.pdf'},
             [errors.InvalidHeaderDefect]*2,
             'text/plain; name="This is even more ***fun*** is it.pdf"',
-            ('Content-Type: text/plain;\t'
-                'name*0*="\'\'This%20is%20even%20more%20";\n'
-             '\tname*1*="%2A%2A%2Afun%2A%2A%2A%20";\tname*2="is it.pdf"\n'),
             ),
 
-        # XXX: see below...the first name line here should be *0 not *0*.
         'rfc2231_partly_encoded': (
             ("text/plain;"
                 '\tname*0*="\'\'This%20is%20even%20more%20";'
@@ -632,9 +643,6 @@ class TestContentTypeHeader(TestHeaderBa
             {'name': 'This is even more ***fun*** is it.pdf'},
             [errors.InvalidHeaderDefect]*2,
             'text/plain; name="This is even more ***fun*** is it.pdf"',
-            ('Content-Type: text/plain;\t'
-                'name*0*="\'\'This%20is%20even%20more%20";\n'
-             '\tname*1*="%2A%2A%2Afun%2A%2A%2A%20";\tname*2="is it.pdf"\n'),
             ),
 
         'rfc2231_partly_encoded_2': (
@@ -647,10 +655,11 @@ class TestContentTypeHeader(TestHeaderBa
             'plain',
             {'name': 'This is even more %2A%2A%2Afun%2A%2A%2A%20is it.pdf'},
             [errors.InvalidHeaderDefect],
-            'text/plain; name="This is even more %2A%2A%2Afun%2A%2A%2A%20is it.pdf"',
-            ('Content-Type: text/plain;\t'
-                'name*0*="\'\'This%20is%20even%20more%20";\n'
-             '\tname*1="%2A%2A%2Afun%2A%2A%2A%20";\tname*2="is it.pdf"\n'),
+            ('text/plain;'
+             ' name="This is even more %2A%2A%2Afun%2A%2A%2A%20is it.pdf"'),
+            ('Content-Type: text/plain;\n'
+             ' name="This is even more %2A%2A%2Afun%2A%2A%2A%20is'
+                ' it.pdf"\n'),
             ),
 
         'rfc2231_unknown_charset_treated_as_ascii': (
@@ -669,9 +678,12 @@ class TestContentTypeHeader(TestHeaderBa
             'plain',
             {'charset': 'utf-8\uFFFD\uFFFD\uFFFD'},
             [errors.UndecodableBytesDefect],
-            'text/plain; charset="utf-8\uFFFD\uFFFD\uFFFD"'),
+            'text/plain; charset="utf-8\uFFFD\uFFFD\uFFFD"',
+            "Content-Type: text/plain;"
+            " charset*=unknown-8bit''utf-8%F1%F2%F3\n",
+            ),
 
-        'rfc2231_utf_8_in_supposedly_ascii_charset_parameter_value': (
+        'rfc2231_utf8_in_supposedly_ascii_charset_parameter_value': (
             "text/plain; charset*=ascii''utf-8%E2%80%9D",
             'text/plain',
             'text',
@@ -679,9 +691,11 @@ class TestContentTypeHeader(TestHeaderBa
             {'charset': 'utf-8”'},
             [errors.UndecodableBytesDefect],
             'text/plain; charset="utf-8”"',
+            # XXX Should folding change the charset to utf8?  Currently it just
+            # reproduces the original, which is arguably fine.
+            "Content-Type: text/plain;"
+            " charset*=unknown-8bit''utf-8%E2%80%9D\n",
             ),
-            # XXX: if the above were *re*folded, it would get tagged as utf-8
-            # instead of ascii in the param, since it now contains non-ASCII.
 
         'rfc2231_encoded_then_unencoded_segments': (
             ('application/x-foo;'
@@ -694,9 +708,6 @@ class TestContentTypeHeader(TestHeaderBa
             {'name': 'My Document For You'},
             [errors.InvalidHeaderDefect],
             'application/x-foo; name="My Document For You"',
-            ('Content-Type: application/x-foo;\t'
-                'name*0*="us-ascii\'en-us\'My";\n'
-             '\tname*1=" Document";\tname*2=" For You"\n'),
             ),
 
         # My reading of the RFC is that this is an invalid header.  The RFC
@@ -713,11 +724,6 @@ class TestContentTypeHeader(TestHeaderBa
             {'name': 'My Document For You'},
             [errors.InvalidHeaderDefect]*3,
             'application/x-foo; name="My Document For You"',
-            ("Content-Type: application/x-foo;\tname*0=us-ascii'en-us'My;\t"
-                # XXX: the newline is in the wrong place, come back and fix
-                # this when the rest of tests pass.
-                'name*1*=" Document"\n;'
-             '\tname*2*=" For You"\n'),
             ),
 
         # XXX: I would say this one should default to ascii/en for the
@@ -730,8 +736,7 @@ class TestContentTypeHeader(TestHeaderBa
         # charset'lang'value pattern exactly *and* there is at least one
         # encoded segment.  Implementing that algorithm will require some
         # refactoring, so I haven't done it (yet).
-
-        'rfc2231_qouted_unencoded_then_encoded_segments': (
+        'rfc2231_quoted_unencoded_then_encoded_segments': (
             ('application/x-foo;'
                 '\tname*0="us-ascii\'en-us\'My";'
                 '\tname*1*=" Document";'
@@ -742,9 +747,25 @@ class TestContentTypeHeader(TestHeaderBa
             {'name': "us-ascii'en-us'My Document For You"},
             [errors.InvalidHeaderDefect]*2,
             'application/x-foo; name="us-ascii\'en-us\'My Document For You"',
-            ('Content-Type: application/x-foo;\t'
-                'name*0="us-ascii\'en-us\'My";\n'
-             '\tname*1*=" Document";\tname*2*=" For You"\n'),
+            ),
+
+        # Make sure our folding algorithm produces multiple sections correctly.
+        # We could mix encoded and non-encoded segments, but we don't, we just
+        # make them all encoded.  It might be worth fixing that, since the
+        # sections can get used for wrapping ascii text.
+        'rfc2231_folded_segments_correctly_formatted': (
+            ('application/x-foo;'
+                '\tname="' + "with spaces"*8 + '"'),
+            'application/x-foo',
+            'application',
+            'x-foo',
+            {'name': "with spaces"*8},
+            [],
+            'application/x-foo; name="' + "with spaces"*8 + '"',
+            "Content-Type: application/x-foo;\n"
+            " name*0*=us-ascii''with%20spaceswith%20spaceswith%20spaceswith"
+                "%20spaceswith;\n"
+            " name*1*=%20spaceswith%20spaceswith%20spaceswith%20spaces\n"
             ),
 
     }
@@ -827,8 +848,8 @@ class TestContentDisposition(TestHeaderB
             [],
             ('attachment; filename="genome.jpeg"; '
                  'modification-date="Wed, 12 Feb 1997 16:29:51 -0500"'),
-            ('Content-Disposition: attachment; filename=genome.jpeg;\n'
-             '  modification-date="Wed, 12 Feb 1997 16:29:51 -0500";\n'),
+            ('Content-Disposition: attachment; filename="genome.jpeg";\n'
+             ' modification-date="Wed, 12 Feb 1997 16:29:51 -0500"\n'),
             ),
 
         'no_value': (
@@ -873,7 +894,7 @@ class TestMIMEVersionHeader(TestHeaderBa
         if source:
             source = ' ' + source
         self.assertEqual(h.fold(policy=policy.default),
-                        'MIME-Version:' + source + '\n')
+                         'MIME-Version:' + source + '\n')
 
     version_string_params = {
 
@@ -1546,15 +1567,39 @@ class TestFolding(TestHeaderBase):
             'singlewordthatwontfit')
         self.assertEqual(
             h.fold(policy=policy.default.clone(max_line_length=20)),
-            'Subject: thisisaverylonglineconsistingofasinglewordthatwontfit\n')
+            'Subject: \n'
+            ' =?utf-8?q?thisisa?=\n'
+            ' =?utf-8?q?verylon?=\n'
+            ' =?utf-8?q?glineco?=\n'
+            ' =?utf-8?q?nsistin?=\n'
+            ' =?utf-8?q?gofasin?=\n'
+            ' =?utf-8?q?gleword?=\n'
+            ' =?utf-8?q?thatwon?=\n'
+            ' =?utf-8?q?tfit?=\n'
+            )
 
     def test_fold_unstructured_with_two_overlong_words(self):
         h = self.make_header('Subject', 'thisisaverylonglineconsistingofa'
             'singlewordthatwontfit plusanotherverylongwordthatwontfit')
         self.assertEqual(
             h.fold(policy=policy.default.clone(max_line_length=20)),
-            'Subject: thisisaverylonglineconsistingofasinglewordthatwontfit\n'
-                ' plusanotherverylongwordthatwontfit\n')
+            'Subject: \n'
+            ' =?utf-8?q?thisisa?=\n'
+            ' =?utf-8?q?verylon?=\n'
+            ' =?utf-8?q?glineco?=\n'
+            ' =?utf-8?q?nsistin?=\n'
+            ' =?utf-8?q?gofasin?=\n'
+            ' =?utf-8?q?gleword?=\n'
+            ' =?utf-8?q?thatwon?=\n'
+            ' =?utf-8?q?tfit_pl?=\n'
+            ' =?utf-8?q?usanoth?=\n'
+            ' =?utf-8?q?erveryl?=\n'
+            ' =?utf-8?q?ongword?=\n'
+            ' =?utf-8?q?thatwon?=\n'
+            ' =?utf-8?q?tfit?=\n'
+            )
+
+    # XXX Need test for when max_line_length is less than the chrome size.
 
     def test_fold_unstructured_with_slightly_long_word(self):
         h = self.make_header('Subject', 'thislongwordislessthanmaxlinelen')
@@ -1590,6 +1635,18 @@ class TestFolding(TestHeaderBase):
         self.assertEqual(h.fold(policy=policy.default),
                         'Date: Sat, 02 Feb 2002 17:00:06 -0800\n')
 
+    def test_fold_overlong_words_using_RFC2047(self):
+        h = self.make_header(
+            'X-Report-Abuse',
+            '<https://www.mailitapp.com/report_abuse.php?'
+              'mid=xxx-xxx-xxxxxxxxxxxxxxxxxxxxxxxx==-xxx-xx-xx>')
+        self.assertEqual(
+            h.fold(policy=policy.default),
+            'X-Report-Abuse: =?utf-8?q?=3Chttps=3A//www=2Emailitapp=2E'
+                'com/report=5F?=\n'
+            ' =?utf-8?q?abuse=2Ephp=3Fmid=3Dxxx-xxx-xxxx'
+                'xxxxxxxxxxxxxxxxxxxx=3D=3D-xxx-?=\n'
+            ' =?utf-8?q?xx-xx=3E?=\n')
 
 
 if __name__ == '__main__':
diff -urpN Python-3.6.3/Lib/test/test_ensurepip.py Python-3.6.5/Lib/test/test_ensurepip.py
--- Python-3.6.3/Lib/test/test_ensurepip.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_ensurepip.py	2018-03-28 11:19:31.000000000 +0200
@@ -20,6 +20,7 @@ class EnsurepipMixin:
     def setUp(self):
         run_pip_patch = unittest.mock.patch("ensurepip._run_pip")
         self.run_pip = run_pip_patch.start()
+        self.run_pip.return_value = 0
         self.addCleanup(run_pip_patch.stop)
 
         # Avoid side effects on the actual os module
@@ -255,7 +256,7 @@ class TestBootstrappingMainFunction(Ensu
         self.assertFalse(self.run_pip.called)
 
     def test_basic_bootstrapping(self):
-        ensurepip._main([])
+        exit_code = ensurepip._main([])
 
         self.run_pip.assert_called_once_with(
             [
@@ -267,6 +268,13 @@ class TestBootstrappingMainFunction(Ensu
 
         additional_paths = self.run_pip.call_args[0][1]
         self.assertEqual(len(additional_paths), 2)
+        self.assertEqual(exit_code, 0)
+
+    def test_bootstrapping_error_code(self):
+        self.run_pip.return_value = 2
+        exit_code = ensurepip._main([])
+        self.assertEqual(exit_code, 2)
+
 
 class TestUninstallationMainFunction(EnsurepipMixin, unittest.TestCase):
 
@@ -280,7 +288,7 @@ class TestUninstallationMainFunction(Ens
 
     def test_basic_uninstall(self):
         with fake_pip():
-            ensurepip._uninstall._main([])
+            exit_code = ensurepip._uninstall._main([])
 
         self.run_pip.assert_called_once_with(
             [
@@ -289,6 +297,13 @@ class TestUninstallationMainFunction(Ens
             ]
         )
 
+        self.assertEqual(exit_code, 0)
+
+    def test_uninstall_error_code(self):
+        with fake_pip():
+            self.run_pip.return_value = 2
+            exit_code = ensurepip._uninstall._main([])
+        self.assertEqual(exit_code, 2)
 
 
 if __name__ == "__main__":
diff -urpN Python-3.6.3/Lib/test/test_exceptions.py Python-3.6.5/Lib/test/test_exceptions.py
--- Python-3.6.3/Lib/test/test_exceptions.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_exceptions.py	2018-03-28 11:19:31.000000000 +0200
@@ -10,8 +10,8 @@ import errno
 
 from test.support import (TESTFN, captured_stderr, check_impl_detail,
                           check_warnings, cpython_only, gc_collect, run_unittest,
-                          no_tracing, unlink, import_module)
-
+                          no_tracing, unlink, import_module, script_helper,
+                          SuppressCrashReport)
 class NaiveException(Exception):
     def __init__(self, x):
         self.x = x
@@ -936,6 +936,105 @@ class ExceptionTests(unittest.TestCase):
         self.assertTrue(isinstance(v, RecursionError), type(v))
         self.assertIn("maximum recursion depth exceeded", str(v))
 
+    @cpython_only
+    def test_recursion_normalizing_exception(self):
+        # Issue #22898.
+        # Test that a RecursionError is raised when tstate->recursion_depth is
+        # equal to recursion_limit in PyErr_NormalizeException() and check
+        # that a ResourceWarning is printed.
+        # Prior to #22898, the recursivity of PyErr_NormalizeException() was
+        # controled by tstate->recursion_depth and a PyExc_RecursionErrorInst
+        # singleton was being used in that case, that held traceback data and
+        # locals indefinitely and would cause a segfault in _PyExc_Fini() upon
+        # finalization of these locals.
+        code = """if 1:
+            import sys
+            from _testcapi import get_recursion_depth
+
+            class MyException(Exception): pass
+
+            def setrecursionlimit(depth):
+                while 1:
+                    try:
+                        sys.setrecursionlimit(depth)
+                        return depth
+                    except RecursionError:
+                        # sys.setrecursionlimit() raises a RecursionError if
+                        # the new recursion limit is too low (issue #25274).
+                        depth += 1
+
+            def recurse(cnt):
+                cnt -= 1
+                if cnt:
+                    recurse(cnt)
+                else:
+                    generator.throw(MyException)
+
+            def gen():
+                f = open(%a, mode='rb', buffering=0)
+                yield
+
+            generator = gen()
+            next(generator)
+            recursionlimit = sys.getrecursionlimit()
+            depth = get_recursion_depth()
+            try:
+                # Upon the last recursive invocation of recurse(),
+                # tstate->recursion_depth is equal to (recursion_limit - 1)
+                # and is equal to recursion_limit when _gen_throw() calls
+                # PyErr_NormalizeException().
+                recurse(setrecursionlimit(depth + 2) - depth - 1)
+            finally:
+                sys.setrecursionlimit(recursionlimit)
+                print('Done.')
+        """ % __file__
+        rc, out, err = script_helper.assert_python_failure("-Wd", "-c", code)
+        # Check that the program does not fail with SIGABRT.
+        self.assertEqual(rc, 1)
+        self.assertIn(b'RecursionError', err)
+        self.assertIn(b'ResourceWarning', err)
+        self.assertIn(b'Done.', out)
+
+    @cpython_only
+    def test_recursion_normalizing_infinite_exception(self):
+        # Issue #30697. Test that a RecursionError is raised when
+        # PyErr_NormalizeException() maximum recursion depth has been
+        # exceeded.
+        code = """if 1:
+            import _testcapi
+            try:
+                raise _testcapi.RecursingInfinitelyError
+            finally:
+                print('Done.')
+        """
+        rc, out, err = script_helper.assert_python_failure("-c", code)
+        self.assertEqual(rc, 1)
+        self.assertIn(b'RecursionError: maximum recursion depth exceeded '
+                      b'while normalizing an exception', err)
+        self.assertIn(b'Done.', out)
+
+    @cpython_only
+    def test_recursion_normalizing_with_no_memory(self):
+        # Issue #30697. Test that in the abort that occurs when there is no
+        # memory left and the size of the Python frames stack is greater than
+        # the size of the list of preallocated MemoryError instances, the
+        # Fatal Python error message mentions MemoryError.
+        code = """if 1:
+            import _testcapi
+            class C(): pass
+            def recurse(cnt):
+                cnt -= 1
+                if cnt:
+                    recurse(cnt)
+                else:
+                    _testcapi.set_nomemory(0)
+                    C()
+            recurse(16)
+        """
+        with SuppressCrashReport():
+            rc, out, err = script_helper.assert_python_failure("-c", code)
+            self.assertIn(b'Fatal Python error: Cannot recover from '
+                          b'MemoryErrors while normalizing exceptions.', err)
 
     @cpython_only
     def test_MemoryError(self):
@@ -1104,6 +1203,23 @@ class ExceptionTests(unittest.TestCase):
                     self.assertIn("test message", report)
                 self.assertTrue(report.endswith("\n"))
 
+    @cpython_only
+    def test_memory_error_in_PyErr_PrintEx(self):
+        code = """if 1:
+            import _testcapi
+            class C(): pass
+            _testcapi.set_nomemory(0, %d)
+            C()
+        """
+
+        # Issue #30817: Abort in PyErr_PrintEx() when no memory.
+        # Span a large range of tests as the CPython code always evolves with
+        # changes that add or remove memory allocations.
+        for i in range(1, 20):
+            rc, out, err = script_helper.assert_python_failure("-c", code % i)
+            self.assertIn(rc, (1, 120))
+            self.assertIn(b'MemoryError', err)
+
 
 class ImportErrorTests(unittest.TestCase):
 
diff -urpN Python-3.6.3/Lib/test/test_faulthandler.py Python-3.6.5/Lib/test/test_faulthandler.py
--- Python-3.6.3/Lib/test/test_faulthandler.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_faulthandler.py	2018-03-28 11:19:31.000000000 +0200
@@ -756,6 +756,22 @@ class FaultHandlerTests(unittest.TestCas
                 name)
 
     @unittest.skipUnless(MS_WINDOWS, 'specific to Windows')
+    def test_ignore_exception(self):
+        for exc_code in (
+            0xE06D7363,   # MSC exception ("Emsc")
+            0xE0434352,   # COM Callable Runtime exception ("ECCR")
+        ):
+            code = f"""
+                    import faulthandler
+                    faulthandler.enable()
+                    faulthandler._raise_exception({exc_code})
+                    """
+            code = dedent(code)
+            output, exitcode = self.get_output(code)
+            self.assertEqual(output, [])
+            self.assertEqual(exitcode, exc_code)
+
+    @unittest.skipUnless(MS_WINDOWS, 'specific to Windows')
     def test_raise_nonfatal_exception(self):
         # These exceptions are not strictly errors. Letting
         # faulthandler display the traceback when they are
diff -urpN Python-3.6.3/Lib/test/test_ftplib.py Python-3.6.5/Lib/test/test_ftplib.py
--- Python-3.6.3/Lib/test/test_ftplib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_ftplib.py	2018-03-28 11:19:31.000000000 +0200
@@ -908,11 +908,11 @@ class TestTLS_FTPClass(TestCase):
             self.client.auth()
             self.assertRaises(ValueError, self.client.auth)
         finally:
-            self.client.ssl_version = ssl.PROTOCOL_TLSv1
+            self.client.ssl_version = ssl.PROTOCOL_TLS
 
     def test_context(self):
         self.client.quit()
-        ctx = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
+        ctx = ssl.SSLContext(ssl.PROTOCOL_TLS)
         self.assertRaises(ValueError, ftplib.FTP_TLS, keyfile=CERTFILE,
                           context=ctx)
         self.assertRaises(ValueError, ftplib.FTP_TLS, certfile=CERTFILE,
@@ -941,7 +941,7 @@ class TestTLS_FTPClass(TestCase):
 
     def test_check_hostname(self):
         self.client.quit()
-        ctx = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
+        ctx = ssl.SSLContext(ssl.PROTOCOL_TLS)
         ctx.verify_mode = ssl.CERT_REQUIRED
         ctx.check_hostname = True
         ctx.load_verify_locations(CAFILE)
diff -urpN Python-3.6.3/Lib/test/test_functools.py Python-3.6.5/Lib/test/test_functools.py
--- Python-3.6.3/Lib/test/test_functools.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_functools.py	2018-03-28 11:19:31.000000000 +0200
@@ -420,7 +420,7 @@ class TestPartialC(TestPartial, unittest
                 p.keywords[self] = ['sth2']
                 return 'astr'
 
-        # Raplacing the value during key formatting should keep the original
+        # Replacing the value during key formatting should keep the original
         # value alive (at least long enough).
         p.keywords[MutatesYourDict()] = ['sth']
         r = repr(p)
diff -urpN Python-3.6.3/Lib/test/test_generators.py Python-3.6.5/Lib/test/test_generators.py
--- Python-3.6.3/Lib/test/test_generators.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_generators.py	2018-03-28 11:19:31.000000000 +0200
@@ -1459,7 +1459,7 @@ class Knights:
             # If we create a square with one exit, we must visit it next;
             # else somebody else will have to visit it, and since there's
             # only one adjacent, there won't be a way to leave it again.
-            # Finelly, if we create more than one free square with a
+            # Finally, if we create more than one free square with a
             # single exit, we can only move to one of them next, leaving
             # the other one a dead end.
             ne0 = ne1 = 0
@@ -1517,7 +1517,7 @@ class Knights:
                 succs[final].remove(corner)
                 add_to_successors(this)
 
-        # Generate moves 3 thru m*n-1.
+        # Generate moves 3 through m*n-1.
         def advance(len=len):
             # If some successor has only one exit, must take it.
             # Else favor successors with fewer exits.
@@ -1539,7 +1539,7 @@ class Knights:
                         yield i
                     add_to_successors(i)
 
-        # Generate moves 3 thru m*n-1.  Alternative version using a
+        # Generate moves 3 through m*n-1.  Alternative version using a
         # stronger (but more expensive) heuristic to order successors.
         # Since the # of backtracking levels is m*n, a poor move early on
         # can take eons to undo.  Smallest square board for which this
diff -urpN Python-3.6.3/Lib/test/test_genericpath.py Python-3.6.5/Lib/test/test_genericpath.py
--- Python-3.6.3/Lib/test/test_genericpath.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_genericpath.py	2018-03-28 11:19:31.000000000 +0200
@@ -8,7 +8,8 @@ import sys
 import unittest
 import warnings
 from test import support
-android_not_root = support.android_not_root
+from test.support.script_helper import assert_python_ok
+from test.support import FakePath
 
 
 def create_file(filename, data=b'foo'):
@@ -213,9 +214,11 @@ class GenericTest:
     def test_samefile_on_symlink(self):
         self._test_samefile_on_link_func(os.symlink)
 
-    @unittest.skipIf(android_not_root, "hard links not allowed, non root user")
     def test_samefile_on_link(self):
-        self._test_samefile_on_link_func(os.link)
+        try:
+            self._test_samefile_on_link_func(os.link)
+        except PermissionError as e:
+            self.skipTest('os.link(): %s' % e)
 
     def test_samestat(self):
         test_fn1 = support.TESTFN
@@ -253,9 +256,11 @@ class GenericTest:
     def test_samestat_on_symlink(self):
         self._test_samestat_on_link_func(os.symlink)
 
-    @unittest.skipIf(android_not_root, "hard links not allowed, non root user")
     def test_samestat_on_link(self):
-        self._test_samestat_on_link_func(os.link)
+        try:
+            self._test_samestat_on_link_func(os.link)
+        except PermissionError as e:
+            self.skipTest('os.link(): %s' % e)
 
     def test_sameopenfile(self):
         filename = support.TESTFN
@@ -483,21 +488,15 @@ class CommonTest(GenericTest):
             with self.assertRaisesRegex(TypeError, 'bytearray'):
                 self.pathmodule.relpath(bytearray(b'foo'), bytearray(b'bar'))
 
+    def test_import(self):
+        assert_python_ok('-S', '-c', 'import ' + self.pathmodule.__name__)
 
-class PathLikeTests(unittest.TestCase):
 
-    class PathLike:
-        def __init__(self, path=''):
-            self.path = path
-        def __fspath__(self):
-            if isinstance(self.path, BaseException):
-                raise self.path
-            else:
-                return self.path
+class PathLikeTests(unittest.TestCase):
 
     def setUp(self):
         self.file_name = support.TESTFN.lower()
-        self.file_path = self.PathLike(support.TESTFN)
+        self.file_path = FakePath(support.TESTFN)
         self.addCleanup(support.unlink, self.file_name)
         create_file(self.file_name, b"test_genericpath.PathLikeTests")
 
diff -urpN Python-3.6.3/Lib/test/test_glob.py Python-3.6.5/Lib/test/test_glob.py
--- Python-3.6.3/Lib/test/test_glob.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_glob.py	2018-03-28 11:19:31.000000000 +0200
@@ -49,10 +49,10 @@ class GlobTests(unittest.TestCase):
             pattern = os.path.join(*parts)
         p = os.path.join(self.tempdir, pattern)
         res = glob.glob(p, **kwargs)
-        self.assertEqual(list(glob.iglob(p, **kwargs)), res)
+        self.assertCountEqual(glob.iglob(p, **kwargs), res)
         bres = [os.fsencode(x) for x in res]
-        self.assertEqual(glob.glob(os.fsencode(p), **kwargs), bres)
-        self.assertEqual(list(glob.iglob(os.fsencode(p), **kwargs)), bres)
+        self.assertCountEqual(glob.glob(os.fsencode(p), **kwargs), bres)
+        self.assertCountEqual(glob.iglob(os.fsencode(p), **kwargs), bres)
         return res
 
     def assertSequencesEqual_noorder(self, l1, l2):
diff -urpN Python-3.6.3/Lib/test/test_grammar.py Python-3.6.5/Lib/test/test_grammar.py
--- Python-3.6.3/Lib/test/test_grammar.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_grammar.py	2018-03-28 11:19:31.000000000 +0200
@@ -575,6 +575,10 @@ class GrammarTests(unittest.TestCase):
         self.assertEqual(f(spam='fried', **{'eggs':'scrambled'}),
                          ((), {'eggs':'scrambled', 'spam':'fried'}))
 
+        # Check ast errors in *args and *kwargs
+        check_syntax_error(self, "f(*g(1=2))")
+        check_syntax_error(self, "f(**g(1=2))")
+
         # argument annotation tests
         def f(x) -> list: pass
         self.assertEqual(f.__annotations__, {'return': list})
@@ -616,10 +620,6 @@ class GrammarTests(unittest.TestCase):
         def f(*, k=1): return closure
         def f() -> int: return closure
 
-        # Check ast errors in *args and *kwargs
-        check_syntax_error(self, "f(*g(1=2))")
-        check_syntax_error(self, "f(**g(1=2))")
-
         # Check trailing commas are permitted in funcdef argument list
         def f(a,): pass
         def f(*args,): pass
@@ -805,6 +805,80 @@ class GrammarTests(unittest.TestCase):
         x = g2()
         check_syntax_error(self, "class foo:return 1")
 
+    def test_break_in_finally(self):
+        count = 0
+        while count < 2:
+            count += 1
+            try:
+                pass
+            finally:
+                break
+        self.assertEqual(count, 1)
+
+        count = 0
+        while count < 2:
+            count += 1
+            try:
+                continue
+            finally:
+                break
+        self.assertEqual(count, 1)
+
+        count = 0
+        while count < 2:
+            count += 1
+            try:
+                1/0
+            finally:
+                break
+        self.assertEqual(count, 1)
+
+        for count in [0, 1]:
+            self.assertEqual(count, 0)
+            try:
+                pass
+            finally:
+                break
+        self.assertEqual(count, 0)
+
+        for count in [0, 1]:
+            self.assertEqual(count, 0)
+            try:
+                continue
+            finally:
+                break
+        self.assertEqual(count, 0)
+
+        for count in [0, 1]:
+            self.assertEqual(count, 0)
+            try:
+                1/0
+            finally:
+                break
+        self.assertEqual(count, 0)
+
+    def test_return_in_finally(self):
+        def g1():
+            try:
+                pass
+            finally:
+                return 1
+        self.assertEqual(g1(), 1)
+
+        def g2():
+            try:
+                return 2
+            finally:
+                return 3
+        self.assertEqual(g2(), 3)
+
+        def g3():
+            try:
+                1/0
+            finally:
+                return 4
+        self.assertEqual(g3(), 4)
+
     def test_yield(self):
         # Allowed as standalone statement
         def g(): yield 1
@@ -982,7 +1056,6 @@ class GrammarTests(unittest.TestCase):
         try: 1/0
         except EOFError: pass
         except TypeError as msg: pass
-        except RuntimeError as msg: pass
         except: pass
         else: pass
         try: 1/0
@@ -1091,7 +1164,7 @@ class GrammarTests(unittest.TestCase):
         d[1,2] = 3
         d[1,2,3] = 4
         L = list(d)
-        L.sort(key=lambda x: x if isinstance(x, tuple) else ())
+        L.sort(key=lambda x: (type(x).__name__, x))
         self.assertEqual(str(L), '[1, (1,), (1, 2), (1, 2, 3)]')
 
     def test_atoms(self):
diff -urpN Python-3.6.3/Lib/test/test_gzip.py Python-3.6.5/Lib/test/test_gzip.py
--- Python-3.6.3/Lib/test/test_gzip.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_gzip.py	2018-03-28 11:19:31.000000000 +0200
@@ -431,6 +431,30 @@ class TestGzip(BaseTest):
             with gzip.GzipFile(fileobj=f, mode="w") as g:
                 pass
 
+    def test_fileobj_mode(self):
+        gzip.GzipFile(self.filename, "wb").close()
+        with open(self.filename, "r+b") as f:
+            with gzip.GzipFile(fileobj=f, mode='r') as g:
+                self.assertEqual(g.mode, gzip.READ)
+            with gzip.GzipFile(fileobj=f, mode='w') as g:
+                self.assertEqual(g.mode, gzip.WRITE)
+            with gzip.GzipFile(fileobj=f, mode='a') as g:
+                self.assertEqual(g.mode, gzip.WRITE)
+            with gzip.GzipFile(fileobj=f, mode='x') as g:
+                self.assertEqual(g.mode, gzip.WRITE)
+            with self.assertRaises(ValueError):
+                gzip.GzipFile(fileobj=f, mode='z')
+        for mode in "rb", "r+b":
+            with open(self.filename, mode) as f:
+                with gzip.GzipFile(fileobj=f) as g:
+                    self.assertEqual(g.mode, gzip.READ)
+        for mode in "wb", "ab", "xb":
+            if "x" in mode:
+                support.unlink(self.filename)
+            with open(self.filename, mode) as f:
+                with gzip.GzipFile(fileobj=f) as g:
+                    self.assertEqual(g.mode, gzip.WRITE)
+
     def test_bytes_filename(self):
         str_filename = self.filename
         try:
diff -urpN Python-3.6.3/Lib/test/test_hashlib.py Python-3.6.5/Lib/test/test_hashlib.py
--- Python-3.6.3/Lib/test/test_hashlib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_hashlib.py	2018-03-28 11:19:31.000000000 +0200
@@ -9,6 +9,7 @@
 import array
 from binascii import unhexlify
 import hashlib
+import importlib
 import itertools
 import os
 import sys
@@ -86,11 +87,11 @@ class HashLibTestCase(unittest.TestCase)
     def _conditional_import_module(self, module_name):
         """Import a module and return a reference to it or None on failure."""
         try:
-            exec('import '+module_name)
-        except ImportError as error:
+            return importlib.import_module(module_name)
+        except ModuleNotFoundError as error:
             if self._warn_on_extension_import:
                 warnings.warn('Did a C extension fail to compile? %s' % error)
-        return locals().get(module_name)
+        return None
 
     def __init__(self, *args, **kwargs):
         algorithms = set()
@@ -164,6 +165,16 @@ class HashLibTestCase(unittest.TestCase)
         constructors = self.constructors_to_test.values()
         return itertools.chain.from_iterable(constructors)
 
+    @support.refcount_test
+    @unittest.skipIf(c_hashlib is None, 'Require _hashlib module')
+    def test_refleaks_in_hash___init__(self):
+        gettotalrefcount = support.get_attribute(sys, 'gettotalrefcount')
+        sha1_hash = c_hashlib.new('sha1')
+        refs_before = gettotalrefcount()
+        for i in range(100):
+            sha1_hash.__init__('sha1')
+        self.assertAlmostEqual(gettotalrefcount() - refs_before, 0, delta=10)
+
     def test_hash_array(self):
         a = array.array("b", range(10))
         for cons in self.hash_constructors:
@@ -195,7 +206,7 @@ class HashLibTestCase(unittest.TestCase)
         try:
             import _md5
         except ImportError:
-            pass
+            self.skipTest("_md5 module not available")
         # This forces an ImportError for "import _md5" statements
         sys.modules['_md5'] = None
         # clear the cache
@@ -619,6 +630,24 @@ class HashLibTestCase(unittest.TestCase)
           "7d87c5392aab792dc252d5de4533cc9518d38aa8dbf1925ab92386edd4009923")
 
     @requires_blake2
+    def test_case_blake2b_all_parameters(self):
+        # This checks that all the parameters work in general, and also that
+        # parameter byte order doesn't get confused on big endian platforms.
+        self.check('blake2b', b"foo",
+          "920568b0c5873b2f0ab67bedb6cf1b2b",
+          digest_size=16,
+          key=b"bar",
+          salt=b"baz",
+          person=b"bing",
+          fanout=2,
+          depth=3,
+          leaf_size=4,
+          node_offset=5,
+          node_depth=6,
+          inner_size=7,
+          last_node=True)
+
+    @requires_blake2
     def test_blake2b_vectors(self):
         for msg, key, md in read_vectors('blake2b'):
             key = bytes.fromhex(key)
@@ -644,6 +673,24 @@ class HashLibTestCase(unittest.TestCase)
           "508c5e8c327c14e2e1a72ba34eeb452f37458b209ed63a294d999b4c86675982")
 
     @requires_blake2
+    def test_case_blake2s_all_parameters(self):
+        # This checks that all the parameters work in general, and also that
+        # parameter byte order doesn't get confused on big endian platforms.
+        self.check('blake2s', b"foo",
+          "bf2a8f7fe3c555012a6f8046e646bc75",
+          digest_size=16,
+          key=b"bar",
+          salt=b"baz",
+          person=b"bing",
+          fanout=2,
+          depth=3,
+          leaf_size=4,
+          node_offset=5,
+          node_depth=6,
+          inner_size=7,
+          last_node=True)
+
+    @requires_blake2
     def test_blake2s_vectors(self):
         for msg, key, md in read_vectors('blake2s'):
             key = bytes.fromhex(key)
diff -urpN Python-3.6.3/Lib/test/test_httplib.py Python-3.6.5/Lib/test/test_httplib.py
--- Python-3.6.3/Lib/test/test_httplib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_httplib.py	2018-03-28 11:19:31.000000000 +0200
@@ -1583,7 +1583,7 @@ class HTTPSTest(TestCase):
         import ssl
         support.requires('network')
         with support.transient_internet('self-signed.pythontest.net'):
-            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
+            context = ssl.SSLContext(ssl.PROTOCOL_TLS)
             context.verify_mode = ssl.CERT_REQUIRED
             context.load_verify_locations(CERT_selfsigned_pythontestdotnet)
             h = client.HTTPSConnection('self-signed.pythontest.net', 443, context=context)
@@ -1599,7 +1599,7 @@ class HTTPSTest(TestCase):
         import ssl
         support.requires('network')
         with support.transient_internet('self-signed.pythontest.net'):
-            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
+            context = ssl.SSLContext(ssl.PROTOCOL_TLS)
             context.verify_mode = ssl.CERT_REQUIRED
             context.load_verify_locations(CERT_localhost)
             h = client.HTTPSConnection('self-signed.pythontest.net', 443, context=context)
@@ -1620,7 +1620,7 @@ class HTTPSTest(TestCase):
         # The (valid) cert validates the HTTP hostname
         import ssl
         server = self.make_server(CERT_localhost)
-        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
+        context = ssl.SSLContext(ssl.PROTOCOL_TLS)
         context.verify_mode = ssl.CERT_REQUIRED
         context.load_verify_locations(CERT_localhost)
         h = client.HTTPSConnection('localhost', server.port, context=context)
@@ -1634,7 +1634,7 @@ class HTTPSTest(TestCase):
         # The (valid) cert doesn't validate the HTTP hostname
         import ssl
         server = self.make_server(CERT_fakehostname)
-        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
+        context = ssl.SSLContext(ssl.PROTOCOL_TLS)
         context.verify_mode = ssl.CERT_REQUIRED
         context.check_hostname = True
         context.load_verify_locations(CERT_fakehostname)
diff -urpN Python-3.6.3/Lib/test/test_httpservers.py Python-3.6.5/Lib/test/test_httpservers.py
--- Python-3.6.3/Lib/test/test_httpservers.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_httpservers.py	2018-03-28 11:19:31.000000000 +0200
@@ -370,7 +370,8 @@ class SimpleHTTPServerTestCase(BaseTestC
         reader.close()
         return body
 
-    @support.requires_mac_ver(10, 5)
+    @unittest.skipIf(sys.platform == 'darwin',
+                     'undecodable name cannot always be decoded on macOS')
     @unittest.skipIf(sys.platform == 'win32',
                      'undecodable name cannot be decoded on win32')
     @unittest.skipUnless(support.TESTFN_UNDECODABLE,
diff -urpN Python-3.6.3/Lib/test/test_imp.py Python-3.6.5/Lib/test/test_imp.py
--- Python-3.6.3/Lib/test/test_imp.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_imp.py	2018-03-28 11:19:31.000000000 +0200
@@ -315,8 +315,24 @@ class ImportTests(unittest.TestCase):
         loader.get_data(imp.__file__)  # Will need to create a newly opened file
 
     def test_load_source(self):
-        with self.assertRaisesRegex(ValueError, 'embedded null'):
-            imp.load_source(__name__, __file__ + "\0")
+        # Create a temporary module since load_source(name) modifies
+        # sys.modules[name] attributes like __loader___
+        modname = f"tmp{__name__}"
+        mod = type(sys.modules[__name__])(modname)
+        with support.swap_item(sys.modules, modname, mod):
+            with self.assertRaisesRegex(ValueError, 'embedded null'):
+                imp.load_source(modname, __file__ + "\0")
+
+    @support.cpython_only
+    def test_issue31315(self):
+        # There shouldn't be an assertion failure in imp.create_dynamic(),
+        # when spec.name is not a string.
+        create_dynamic = support.get_attribute(imp, 'create_dynamic')
+        class BadSpec:
+            name = None
+            origin = 'foo'
+        with self.assertRaises(TypeError):
+            create_dynamic(BadSpec())
 
 
 class ReloadTests(unittest.TestCase):
diff -urpN Python-3.6.3/Lib/test/test_import/__init__.py Python-3.6.5/Lib/test/test_import/__init__.py
--- Python-3.6.3/Lib/test/test_import/__init__.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_import/__init__.py	2018-03-28 11:19:31.000000000 +0200
@@ -353,6 +353,18 @@ class ImportTests(unittest.TestCase):
         with self.assertRaises(ImportError):
             from test_from_import_AttributeError import does_not_exist
 
+    @cpython_only
+    def test_issue31492(self):
+        # There shouldn't be an assertion failure in case of failing to import
+        # from a module with a bad __name__ attribute, or in case of failing
+        # to access an attribute of such a module.
+        with swap_attr(os, '__name__', None):
+            with self.assertRaises(ImportError):
+                from os import does_not_exist
+
+            with self.assertRaises(AttributeError):
+                os.does_not_exist
+
     def test_concurrency(self):
         sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'data'))
         try:
diff -urpN Python-3.6.3/Lib/test/test_importlib/builtin/test_finder.py Python-3.6.5/Lib/test/test_importlib/builtin/test_finder.py
--- Python-3.6.3/Lib/test/test_importlib/builtin/test_finder.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_importlib/builtin/test_finder.py	2018-03-28 11:19:31.000000000 +0200
@@ -22,7 +22,7 @@ class FindSpecTests(abc.FinderTests):
     # Built-in modules cannot be a package.
     test_package = None
 
-    # Built-in modules cannobt be in a package.
+    # Built-in modules cannot be in a package.
     test_module_in_package = None
 
     # Built-in modules cannot be a package.
diff -urpN Python-3.6.3/Lib/test/test_importlib/import_/test_api.py Python-3.6.5/Lib/test/test_importlib/import_/test_api.py
--- Python-3.6.3/Lib/test/test_importlib/import_/test_api.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_importlib/import_/test_api.py	2018-03-28 11:19:31.000000000 +0200
@@ -82,6 +82,20 @@ class APITest:
                     self.__import__(PKG_NAME,
                                     fromlist=[SUBMOD_NAME.rpartition('.')[-1]])
 
+    def test_blocked_fromlist(self):
+        # If fromlist entry is None, let a ModuleNotFoundError propagate.
+        # issue31642
+        mod = types.ModuleType(PKG_NAME)
+        mod.__path__ = []
+        with util.import_state(meta_path=[self.bad_finder_loader]):
+            with util.uncache(PKG_NAME, SUBMOD_NAME):
+                sys.modules[PKG_NAME] = mod
+                sys.modules[SUBMOD_NAME] = None
+                with self.assertRaises(ModuleNotFoundError) as cm:
+                    self.__import__(PKG_NAME,
+                                    fromlist=[SUBMOD_NAME.rpartition('.')[-1]])
+                self.assertEqual(cm.exception.name, SUBMOD_NAME)
+
 
 class OldAPITests(APITest):
     bad_finder_loader = BadLoaderFinder
diff -urpN Python-3.6.3/Lib/test/test_importlib/import_/test_fromlist.py Python-3.6.5/Lib/test/test_importlib/import_/test_fromlist.py
--- Python-3.6.3/Lib/test/test_importlib/import_/test_fromlist.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_importlib/import_/test_fromlist.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,5 +1,6 @@
 """Test that the semantics relating to the 'fromlist' argument are correct."""
 from .. import util
+import warnings
 import unittest
 
 
@@ -73,6 +74,13 @@ class HandlingFromlist:
                 self.assertTrue(hasattr(module, 'module'))
                 self.assertEqual(module.module.__name__, 'pkg.module')
 
+    def test_nonexistent_from_package(self):
+        with util.mock_modules('pkg.__init__') as importer:
+            with util.import_state(meta_path=[importer]):
+                module = self.__import__('pkg', fromlist=['non_existent'])
+                self.assertEqual(module.__name__, 'pkg')
+                self.assertFalse(hasattr(module, 'non_existent'))
+
     def test_module_from_package_triggers_ModuleNotFoundError(self):
         # If a submodule causes an ModuleNotFoundError because it tries
         # to import a module which doesn't exist, that should let the
@@ -122,6 +130,41 @@ class HandlingFromlist:
                 self.assertEqual(module.module1.__name__, 'pkg.module1')
                 self.assertEqual(module.module2.__name__, 'pkg.module2')
 
+    def test_nonexistent_in_all(self):
+        with util.mock_modules('pkg.__init__') as importer:
+            with util.import_state(meta_path=[importer]):
+                importer['pkg'].__all__ = ['non_existent']
+                module = self.__import__('pkg', fromlist=['*'])
+                self.assertEqual(module.__name__, 'pkg')
+                self.assertFalse(hasattr(module, 'non_existent'))
+
+    def test_star_in_all(self):
+        with util.mock_modules('pkg.__init__') as importer:
+            with util.import_state(meta_path=[importer]):
+                importer['pkg'].__all__ = ['*']
+                module = self.__import__('pkg', fromlist=['*'])
+                self.assertEqual(module.__name__, 'pkg')
+                self.assertFalse(hasattr(module, '*'))
+
+    def test_invalid_type(self):
+        with util.mock_modules('pkg.__init__') as importer:
+            with util.import_state(meta_path=[importer]), \
+                 warnings.catch_warnings():
+                warnings.simplefilter('error', BytesWarning)
+                with self.assertRaisesRegex(TypeError, r'\bfrom\b'):
+                    self.__import__('pkg', fromlist=[b'attr'])
+                with self.assertRaisesRegex(TypeError, r'\bfrom\b'):
+                    self.__import__('pkg', fromlist=iter([b'attr']))
+
+    def test_invalid_type_in_all(self):
+        with util.mock_modules('pkg.__init__') as importer:
+            with util.import_state(meta_path=[importer]), \
+                 warnings.catch_warnings():
+                warnings.simplefilter('error', BytesWarning)
+                importer['pkg'].__all__ = [b'attr']
+                with self.assertRaisesRegex(TypeError, r'\bpkg\.__all__\b'):
+                    self.__import__('pkg', fromlist=['*'])
+
 
 (Frozen_FromList,
  Source_FromList
diff -urpN Python-3.6.3/Lib/test/test_inspect.py Python-3.6.5/Lib/test/test_inspect.py
--- Python-3.6.3/Lib/test/test_inspect.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_inspect.py	2018-03-28 11:19:31.000000000 +0200
@@ -1564,7 +1564,7 @@ class TestGetattrStatic(unittest.TestCas
         foo.__dict__['d'] = 1
         self.assertEqual(inspect.getattr_static(foo, 'd'), 1)
 
-        # if the descriptor is a data-desciptor we should return the
+        # if the descriptor is a data-descriptor we should return the
         # descriptor
         descriptor.__set__ = lambda s, i, v: None
         self.assertEqual(inspect.getattr_static(foo, 'd'), Foo.__dict__['d'])
@@ -2021,7 +2021,7 @@ class TestSignatureObject(unittest.TestC
                          ((('args', ..., ..., 'var_positional'),), ...))
         self.assertEqual(self.signature(A.f3),
                          ((('args', ..., ..., 'var_positional'),), ...))
-        self.assertEqual(self.signature(A.f4), 
+        self.assertEqual(self.signature(A.f4),
                          ((('args', ..., ..., 'var_positional'),
                             ('kwargs', ..., ..., 'var_keyword')), ...))
     @cpython_only
@@ -2526,6 +2526,16 @@ class TestSignatureObject(unittest.TestC
                            ('c', 1, ..., 'keyword_only')),
                           'spam'))
 
+        class Spam:
+            def test(self: 'anno', x):
+                pass
+
+            g = partialmethod(test, 1)
+
+        self.assertEqual(self.signature(Spam.g),
+                         ((('self', ..., 'anno', 'positional_or_keyword'),),
+                          ...))
+
     def test_signature_on_fake_partialmethod(self):
         def foo(a): pass
         foo._partialmethod = 'spam'
@@ -3557,6 +3567,19 @@ class TestSignatureDefinitions(unittest.
                 self.assertIsNone(obj.__text_signature__)
 
 
+class NTimesUnwrappable:
+    def __init__(self, n):
+        self.n = n
+        self._next = None
+
+    @property
+    def __wrapped__(self):
+        if self.n <= 0:
+            raise Exception("Unwrapped too many times")
+        if self._next is None:
+            self._next = NTimesUnwrappable(self.n - 1)
+        return self._next
+
 class TestUnwrap(unittest.TestCase):
 
     def test_unwrap_one(self):
@@ -3612,6 +3635,11 @@ class TestUnwrap(unittest.TestCase):
             __wrapped__ = func
         self.assertIsNone(inspect.unwrap(C()))
 
+    def test_recursion_limit(self):
+        obj = NTimesUnwrappable(sys.getrecursionlimit() + 1)
+        with self.assertRaisesRegex(ValueError, 'wrapper loop'):
+            inspect.unwrap(obj)
+
 class TestMain(unittest.TestCase):
     def test_only_source(self):
         module = importlib.import_module('unittest')
diff -urpN Python-3.6.3/Lib/test/test_int.py Python-3.6.5/Lib/test/test_int.py
--- Python-3.6.3/Lib/test/test_int.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_int.py	2018-03-28 11:19:31.000000000 +0200
@@ -506,5 +506,13 @@ class IntTestCases(unittest.TestCase):
         check('123\ud800')
         check('123\ud800', 10)
 
+    def test_issue31619(self):
+        self.assertEqual(int('1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1', 2),
+                         0b1010101010101010101010101010101)
+        self.assertEqual(int('1_2_3_4_5_6_7_0_1_2_3', 8), 0o12345670123)
+        self.assertEqual(int('1_2_3_4_5_6_7_8_9', 16), 0x123456789)
+        self.assertEqual(int('1_2_3_4_5_6_7', 32), 1144132807)
+
+
 if __name__ == "__main__":
     unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_io.py Python-3.6.5/Lib/test/test_io.py
--- Python-3.6.3/Lib/test/test_io.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_io.py	2018-03-28 11:19:31.000000000 +0200
@@ -36,6 +36,7 @@ from collections import deque, UserList
 from itertools import cycle, count
 from test import support
 from test.support.script_helper import assert_python_ok, run_python_until_end
+from test.support import FakePath
 
 import codecs
 import io  # C implementation of io
@@ -568,8 +569,8 @@ class IOTest(unittest.TestCase):
         self.read_ops(f, True)
 
     def test_large_file_ops(self):
-        # On Windows and Mac OSX this test comsumes large resources; It takes
-        # a long time to build the >2GB file and takes >2GB of disk space
+        # On Windows and Mac OSX this test consumes large resources; It takes
+        # a long time to build the >2 GiB file and takes >2 GiB of disk space
         # therefore the resource must be enabled to run this test.
         if sys.platform[:3] == 'win' or sys.platform == 'darwin':
             support.requires(
@@ -796,8 +797,8 @@ class IOTest(unittest.TestCase):
         self.assertRaises(ValueError, f.flush)
 
     def test_RawIOBase_read(self):
-        # Exercise the default RawIOBase.read() implementation (which calls
-        # readinto() internally).
+        # Exercise the default limited RawIOBase.read(n) implementation (which
+        # calls readinto() internally).
         rawio = self.MockRawIOWithoutRead((b"abc", b"d", None, b"efg", None))
         self.assertEqual(rawio.read(2), b"ab")
         self.assertEqual(rawio.read(2), b"c")
@@ -880,13 +881,6 @@ class IOTest(unittest.TestCase):
                 self.assertEqual(bytes(buffer), b"12345")
 
     def test_fspath_support(self):
-        class PathLike:
-            def __init__(self, path):
-                self.path = path
-
-            def __fspath__(self):
-                return self.path
-
         def check_path_succeeds(path):
             with self.open(path, "w") as f:
                 f.write("egg\n")
@@ -894,16 +888,74 @@ class IOTest(unittest.TestCase):
             with self.open(path, "r") as f:
                 self.assertEqual(f.read(), "egg\n")
 
-        check_path_succeeds(PathLike(support.TESTFN))
-        check_path_succeeds(PathLike(support.TESTFN.encode('utf-8')))
+        check_path_succeeds(FakePath(support.TESTFN))
+        check_path_succeeds(FakePath(support.TESTFN.encode('utf-8')))
+
+        with self.open(support.TESTFN, "w") as f:
+            bad_path = FakePath(f.fileno())
+            with self.assertRaises(TypeError):
+                self.open(bad_path, 'w')
 
-        bad_path = PathLike(TypeError)
+        bad_path = FakePath(None)
         with self.assertRaises(TypeError):
             self.open(bad_path, 'w')
 
+        bad_path = FakePath(FloatingPointError)
+        with self.assertRaises(FloatingPointError):
+            self.open(bad_path, 'w')
+
         # ensure that refcounting is correct with some error conditions
         with self.assertRaisesRegex(ValueError, 'read/write/append mode'):
-            self.open(PathLike(support.TESTFN), 'rwxa')
+            self.open(FakePath(support.TESTFN), 'rwxa')
+
+    def test_RawIOBase_readall(self):
+        # Exercise the default unlimited RawIOBase.read() and readall()
+        # implementations.
+        rawio = self.MockRawIOWithoutRead((b"abc", b"d", b"efg"))
+        self.assertEqual(rawio.read(), b"abcdefg")
+        rawio = self.MockRawIOWithoutRead((b"abc", b"d", b"efg"))
+        self.assertEqual(rawio.readall(), b"abcdefg")
+
+    def test_BufferedIOBase_readinto(self):
+        # Exercise the default BufferedIOBase.readinto() and readinto1()
+        # implementations (which call read() or read1() internally).
+        class Reader(self.BufferedIOBase):
+            def __init__(self, avail):
+                self.avail = avail
+            def read(self, size):
+                result = self.avail[:size]
+                self.avail = self.avail[size:]
+                return result
+            def read1(self, size):
+                """Returns no more than 5 bytes at once"""
+                return self.read(min(size, 5))
+        tests = (
+            # (test method, total data available, read buffer size, expected
+            #     read size)
+            ("readinto", 10, 5, 5),
+            ("readinto", 10, 6, 6),  # More than read1() can return
+            ("readinto", 5, 6, 5),  # Buffer larger than total available
+            ("readinto", 6, 7, 6),
+            ("readinto", 10, 0, 0),  # Empty buffer
+            ("readinto1", 10, 5, 5),  # Result limited to single read1() call
+            ("readinto1", 10, 6, 5),  # Buffer larger than read1() can return
+            ("readinto1", 5, 6, 5),  # Buffer larger than total available
+            ("readinto1", 6, 7, 5),
+            ("readinto1", 10, 0, 0),  # Empty buffer
+        )
+        UNUSED_BYTE = 0x81
+        for test in tests:
+            with self.subTest(test):
+                method, avail, request, result = test
+                reader = Reader(bytes(range(avail)))
+                buffer = bytearray((UNUSED_BYTE,) * request)
+                method = getattr(reader, method)
+                self.assertEqual(method(buffer), result)
+                self.assertEqual(len(buffer), request)
+                self.assertSequenceEqual(buffer[:result], range(result))
+                unused = (UNUSED_BYTE,) * (request - result)
+                self.assertSequenceEqual(buffer[result:], unused)
+                self.assertEqual(len(reader.avail), avail - result)
 
 
 class CIOTest(IOTest):
@@ -1654,6 +1706,23 @@ class BufferedWriterTest(unittest.TestCa
         with self.open(support.TESTFN, "rb", buffering=0) as f:
             self.assertEqual(f.read(), b"abc")
 
+    def test_truncate_after_write(self):
+        # Ensure that truncate preserves the file position after
+        # writes longer than the buffer size.
+        # Issue: https://bugs.python.org/issue32228
+        with self.open(support.TESTFN, "wb") as f:
+            # Fill with some buffer
+            f.write(b'\x00' * 10000)
+        buffer_sizes = [8192, 4096, 200]
+        for buffer_size in buffer_sizes:
+            with self.open(support.TESTFN, "r+b", buffering=buffer_size) as f:
+                f.write(b'\x00' * (buffer_size + 1))
+                # After write write_pos and write_end are set to 0
+                f.read(1)
+                # read operation makes sure that pos != raw_pos
+                f.truncate()
+                self.assertEqual(f.tell(), buffer_size + 2)
+
     @unittest.skipUnless(threading, 'Threading required for this test.')
     @support.requires_resource('cpu')
     def test_threads(self):
diff -urpN Python-3.6.3/Lib/test/test_itertools.py Python-3.6.5/Lib/test/test_itertools.py
--- Python-3.6.3/Lib/test/test_itertools.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_itertools.py	2018-03-28 11:19:31.000000000 +0200
@@ -1984,6 +1984,30 @@ class RegressionTests(unittest.TestCase)
         with self.assertRaises(StopIteration):
             next(it)
 
+    def test_issue30347_1(self):
+        def f(n):
+            if n == 5:
+                list(b)
+            return n != 6
+        for (k, b) in groupby(range(10), f):
+            list(b)  # shouldn't crash
+
+    def test_issue30347_2(self):
+        class K:
+            def __init__(self, v):
+                pass
+            def __eq__(self, other):
+                nonlocal i
+                i += 1
+                if i == 1:
+                    next(g, None)
+                return True
+        i = 0
+        g = next(groupby(range(10), K))[1]
+        for j in range(2):
+            next(g, None)  # shouldn't crash
+
+
 class SubclassWithKwargsTest(unittest.TestCase):
     def test_keywords_in_subclass(self):
         # count is not subclassable...
@@ -2205,6 +2229,30 @@ Samuele
 ...     # first_true([a,b], x, f) --> a if f(a) else b if f(b) else x
 ...     return next(filter(pred, iterable), default)
 
+>>> def nth_combination(iterable, r, index):
+...     'Equivalent to list(combinations(iterable, r))[index]'
+...     pool = tuple(iterable)
+...     n = len(pool)
+...     if r < 0 or r > n:
+...         raise ValueError
+...     c = 1
+...     k = min(r, n-r)
+...     for i in range(1, k+1):
+...         c = c * (n - k + i) // i
+...     if index < 0:
+...         index += c
+...     if index < 0 or index >= c:
+...         raise IndexError
+...     result = []
+...     while r:
+...         c, n, r = c*r//n, n-1, r-1
+...         while index >= c:
+...             index -= c
+...             c, n = c*(n-r)//n, n-1
+...         result.append(pool[-1-n])
+...     return tuple(result)
+
+
 This is not part of the examples but it tests to make sure the definitions
 perform as purported.
 
@@ -2288,6 +2336,15 @@ True
 >>> first_true('ABC0DEF1', '9', str.isdigit)
 '0'
 
+>>> population = 'ABCDEFGH'
+>>> for r in range(len(population) + 1):
+...     seq = list(combinations(population, r))
+...     for i in range(len(seq)):
+...         assert nth_combination(population, r, i) == seq[i]
+...     for i in range(-len(seq), 0):
+...         assert nth_combination(population, r, i) == seq[i]
+
+
 """
 
 __test__ = {'libreftest' : libreftest}
diff -urpN Python-3.6.3/Lib/test/test_json/test_speedups.py Python-3.6.5/Lib/test/test_json/test_speedups.py
--- Python-3.6.3/Lib/test/test_json/test_speedups.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_json/test_speedups.py	2018-03-28 11:19:31.000000000 +0200
@@ -36,6 +36,27 @@ class TestEncode(CTest):
             b"\xCD\x7D\x3D\x4E\x12\x4C\xF9\x79\xD7\x52\xBA\x82\xF2\x27\x4A\x7D\xA0\xCA\x75",
             None)
 
+    def test_bad_str_encoder(self):
+        # Issue #31505: There shouldn't be an assertion failure in case
+        # c_make_encoder() receives a bad encoder() argument.
+        def bad_encoder1(*args):
+            return None
+        enc = self.json.encoder.c_make_encoder(None, lambda obj: str(obj),
+                                               bad_encoder1, None, ': ', ', ',
+                                               False, False, False)
+        with self.assertRaises(TypeError):
+            enc('spam', 4)
+        with self.assertRaises(TypeError):
+            enc({'spam': 42}, 4)
+
+        def bad_encoder2(*args):
+            1/0
+        enc = self.json.encoder.c_make_encoder(None, lambda obj: str(obj),
+                                               bad_encoder2, None, ': ', ', ',
+                                               False, False, False)
+        with self.assertRaises(ZeroDivisionError):
+            enc('spam', 4)
+
     def test_bad_bool_args(self):
         def test(name):
             self.json.encoder.JSONEncoder(**{name: BadBool()}).encode({'a': 1})
diff -urpN Python-3.6.3/Lib/test/test_kqueue.py Python-3.6.5/Lib/test/test_kqueue.py
--- Python-3.6.3/Lib/test/test_kqueue.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_kqueue.py	2018-03-28 11:19:31.000000000 +0200
@@ -208,6 +208,30 @@ class TestKQueue(unittest.TestCase):
         b.close()
         kq.close()
 
+    def test_issue30058(self):
+        # changelist must be an iterable
+        kq = select.kqueue()
+        a, b = socket.socketpair()
+        ev = select.kevent(a, select.KQ_FILTER_READ, select.KQ_EV_ADD | select.KQ_EV_ENABLE)
+
+        kq.control([ev], 0)
+        # not a list
+        kq.control((ev,), 0)
+        # __len__ is not consistent with __iter__
+        class BadList:
+            def __len__(self):
+                return 0
+            def __iter__(self):
+                for i in range(100):
+                    yield ev
+        kq.control(BadList(), 0)
+        # doesn't have __len__
+        kq.control(iter([ev]), 0)
+
+        a.close()
+        b.close()
+        kq.close()
+
     def test_close(self):
         open_file = open(__file__, "rb")
         self.addCleanup(open_file.close)
diff -urpN Python-3.6.3/Lib/test/test_largefile.py Python-3.6.5/Lib/test/test_largefile.py
--- Python-3.6.3/Lib/test/test_largefile.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_largefile.py	2018-03-28 11:19:31.000000000 +0200
@@ -141,8 +141,8 @@ def setUpModule():
     except (ImportError, AttributeError):
         pass
 
-    # On Windows and Mac OSX this test comsumes large resources; It
-    # takes a long time to build the >2GB file and takes >2GB of disk
+    # On Windows and Mac OSX this test consumes large resources; It
+    # takes a long time to build the >2 GiB file and takes >2 GiB of disk
     # space therefore the resource must be enabled to run this test.
     # If not, nothing after this line stanza will be executed.
     if sys.platform[:3] == 'win' or sys.platform == 'darwin':
diff -urpN Python-3.6.3/Lib/test/test_logging.py Python-3.6.5/Lib/test/test_logging.py
--- Python-3.6.3/Lib/test/test_logging.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_logging.py	2018-03-28 11:19:31.000000000 +0200
@@ -174,7 +174,7 @@ class BuiltinLevelsTest(BaseTest):
     """Test builtin levels and their inheritance."""
 
     def test_flat(self):
-        #Logging levels in a flat logger namespace.
+        # Logging levels in a flat logger namespace.
         m = self.next_message
 
         ERR = logging.getLogger("ERR")
@@ -244,7 +244,7 @@ class BuiltinLevelsTest(BaseTest):
         ])
 
     def test_nested_inherited(self):
-        #Logging levels in a nested namespace, inherited from parent loggers.
+        # Logging levels in a nested namespace, inherited from parent loggers.
         m = self.next_message
 
         INF = logging.getLogger("INF")
@@ -1901,9 +1901,9 @@ class EncodingTest(BaseTest):
 
     def test_encoding_cyrillic_unicode(self):
         log = logging.getLogger("test")
-        #Get a message in Unicode: Do svidanya in Cyrillic (meaning goodbye)
+        # Get a message in Unicode: Do svidanya in Cyrillic (meaning goodbye)
         message = '\u0434\u043e \u0441\u0432\u0438\u0434\u0430\u043d\u0438\u044f'
-        #Ensure it's written in a Cyrillic encoding
+        # Ensure it's written in a Cyrillic encoding
         writer_class = codecs.getwriter('cp1251')
         writer_class.encoding = 'cp1251'
         stream = io.BytesIO()
@@ -1917,7 +1917,7 @@ class EncodingTest(BaseTest):
             handler.close()
         # check we wrote exactly those bytes, ignoring trailing \n etc
         s = stream.getvalue()
-        #Compare against what the data should be when encoded in CP-1251
+        # Compare against what the data should be when encoded in CP-1251
         self.assertEqual(s, b'\xe4\xee \xf1\xe2\xe8\xe4\xe0\xed\xe8\xff\n')
 
 
@@ -1938,7 +1938,7 @@ class WarningsTest(BaseTest):
             h.close()
             self.assertGreater(s.find("UserWarning: I'm warning you...\n"), 0)
 
-            #See if an explicit file uses the original implementation
+            # See if an explicit file uses the original implementation
             a_file = io.StringIO()
             warnings.showwarning("Explicit", UserWarning, "dummy.py", 42,
                                  a_file, "Dummy line")
@@ -2079,7 +2079,7 @@ class ConfigDictTest(BaseTest):
         },
     }
 
-    #As config1 but with a misspelt level on a handler
+    # As config1 but with a misspelt level on a handler
     config2a = {
         'version': 1,
         'formatters': {
@@ -2107,7 +2107,7 @@ class ConfigDictTest(BaseTest):
     }
 
 
-    #As config1 but with a misspelt level on a logger
+    # As config1 but with a misspelt level on a logger
     config2b = {
         'version': 1,
         'formatters': {
@@ -2274,8 +2274,8 @@ class ConfigDictTest(BaseTest):
         },
     }
 
-    #config 7 does not define compiler.parser but defines compiler.lexer
-    #so compiler.parser should be disabled after applying it
+    # config 7 does not define compiler.parser but defines compiler.lexer
+    # so compiler.parser should be disabled after applying it
     config7 = {
         'version': 1,
         'formatters': {
@@ -2420,7 +2420,7 @@ class ConfigDictTest(BaseTest):
         },
     }
 
-    #As config1 but with a filter added
+    # As config1 but with a filter added
     config10 = {
         'version': 1,
         'formatters': {
@@ -2454,7 +2454,7 @@ class ConfigDictTest(BaseTest):
         },
     }
 
-    #As config1 but using cfg:// references
+    # As config1 but using cfg:// references
     config11 = {
         'version': 1,
         'true_formatters': {
@@ -2485,7 +2485,7 @@ class ConfigDictTest(BaseTest):
         },
     }
 
-    #As config11 but missing the version key
+    # As config11 but missing the version key
     config12 = {
         'true_formatters': {
             'form1' : {
@@ -2515,7 +2515,7 @@ class ConfigDictTest(BaseTest):
         },
     }
 
-    #As config11 but using an unsupported version
+    # As config11 but using an unsupported version
     config13 = {
         'version': 2,
         'true_formatters': {
@@ -2716,7 +2716,7 @@ class ConfigDictTest(BaseTest):
             # Original logger output is empty.
             self.assert_log_lines([])
 
-    #Same as test_config_7_ok but don't disable old loggers.
+    # Same as test_config_7_ok but don't disable old loggers.
     def test_config_8_ok(self):
         with support.captured_stdout() as output:
             self.apply_config(self.config1)
@@ -2797,15 +2797,15 @@ class ConfigDictTest(BaseTest):
         with support.captured_stdout() as output:
             self.apply_config(self.config9)
             logger = logging.getLogger("compiler.parser")
-            #Nothing will be output since both handler and logger are set to WARNING
+            # Nothing will be output since both handler and logger are set to WARNING
             logger.info(self.next_message())
             self.assert_log_lines([], stream=output)
             self.apply_config(self.config9a)
-            #Nothing will be output since both handler is still set to WARNING
+            # Nothing will be output since handler is still set to WARNING
             logger.info(self.next_message())
             self.assert_log_lines([], stream=output)
             self.apply_config(self.config9b)
-            #Message should now be output
+            # Message should now be output
             logger.info(self.next_message())
             self.assert_log_lines([
                 ('INFO', '3'),
@@ -2817,13 +2817,13 @@ class ConfigDictTest(BaseTest):
             logger = logging.getLogger("compiler.parser")
             logger.warning(self.next_message())
             logger = logging.getLogger('compiler')
-            #Not output, because filtered
+            # Not output, because filtered
             logger.warning(self.next_message())
             logger = logging.getLogger('compiler.lexer')
-            #Not output, because filtered
+            # Not output, because filtered
             logger.warning(self.next_message())
             logger = logging.getLogger("compiler.parser.codegen")
-            #Output, as not filtered
+            # Output, as not filtered
             logger.error(self.next_message())
             self.assert_log_lines([
                 ('WARNING', '1'),
@@ -2884,13 +2884,13 @@ class ConfigDictTest(BaseTest):
             logger = logging.getLogger("compiler.parser")
             logger.warning(self.next_message())
             logger = logging.getLogger('compiler')
-            #Not output, because filtered
+            # Not output, because filtered
             logger.warning(self.next_message())
             logger = logging.getLogger('compiler.lexer')
-            #Not output, because filtered
+            # Not output, because filtered
             logger.warning(self.next_message())
             logger = logging.getLogger("compiler.parser.codegen")
-            #Output, as not filtered
+            # Output, as not filtered
             logger.error(self.next_message())
             self.assert_log_lines([
                 ('WARNING', '1'),
@@ -3881,7 +3881,6 @@ class BasicConfigTest(unittest.TestCase)
 
 
 class LoggerAdapterTest(unittest.TestCase):
-
     def setUp(self):
         super(LoggerAdapterTest, self).setUp()
         old_handler_list = logging._handlerList[:]
@@ -3956,15 +3955,37 @@ class LoggerAdapterTest(unittest.TestCas
         self.assertFalse(self.adapter.hasHandlers())
 
     def test_nested(self):
+        class Adapter(logging.LoggerAdapter):
+            prefix = 'Adapter'
+
+            def process(self, msg, kwargs):
+                return f"{self.prefix} {msg}", kwargs
+
         msg = 'Adapters can be nested, yo.'
-        adapter_adapter = logging.LoggerAdapter(logger=self.adapter, extra=None)
+        adapter = Adapter(logger=self.logger, extra=None)
+        adapter_adapter = Adapter(logger=adapter, extra=None)
+        adapter_adapter.prefix = 'AdapterAdapter'
+        self.assertEqual(repr(adapter), repr(adapter_adapter))
         adapter_adapter.log(logging.CRITICAL, msg, self.recording)
-
         self.assertEqual(len(self.recording.records), 1)
         record = self.recording.records[0]
         self.assertEqual(record.levelno, logging.CRITICAL)
-        self.assertEqual(record.msg, msg)
+        self.assertEqual(record.msg, f"Adapter AdapterAdapter {msg}")
         self.assertEqual(record.args, (self.recording,))
+        orig_manager = adapter_adapter.manager
+        self.assertIs(adapter.manager, orig_manager)
+        self.assertIs(self.logger.manager, orig_manager)
+        temp_manager = object()
+        try:
+            adapter_adapter.manager = temp_manager
+            self.assertIs(adapter_adapter.manager, temp_manager)
+            self.assertIs(adapter.manager, temp_manager)
+            self.assertIs(self.logger.manager, temp_manager)
+        finally:
+            adapter_adapter.manager = orig_manager
+        self.assertIs(adapter_adapter.manager, orig_manager)
+        self.assertIs(adapter.manager, orig_manager)
+        self.assertIs(self.logger.manager, orig_manager)
 
 
 class LoggerTest(BaseTest):
@@ -4223,7 +4244,7 @@ class TimedRotatingFileHandlerTest(BaseF
                 break
         msg = 'No rotated files found, went back %d seconds' % GO_BACK
         if not found:
-            #print additional diagnostics
+            # print additional diagnostics
             dn, fn = os.path.split(self.fn)
             files = [f for f in os.listdir(dn) if f.startswith(fn)]
             print('Test time: %s' % now.strftime("%Y-%m-%d %H-%M-%S"), file=sys.stderr)
diff -urpN Python-3.6.3/Lib/test/test_lzma.py Python-3.6.5/Lib/test/test_lzma.py
--- Python-3.6.3/Lib/test/test_lzma.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_lzma.py	2018-03-28 11:19:31.000000000 +0200
@@ -4,6 +4,8 @@ import os
 import pathlib
 import pickle
 import random
+import sys
+from test import support
 import unittest
 
 from test.support import (
@@ -364,6 +366,15 @@ class CompressorDecompressorTestCase(uni
             with self.assertRaises(TypeError):
                 pickle.dumps(LZMADecompressor(), proto)
 
+    @support.refcount_test
+    def test_refleaks_in_decompressor___init__(self):
+        gettotalrefcount = support.get_attribute(sys, 'gettotalrefcount')
+        lzd = LZMADecompressor()
+        refs_before = gettotalrefcount()
+        for i in range(100):
+            lzd.__init__()
+        self.assertAlmostEqual(gettotalrefcount() - refs_before, 0, delta=10)
+
 
 class CompressDecompressFunctionTestCase(unittest.TestCase):
 
diff -urpN Python-3.6.3/Lib/test/test_mailbox.py Python-3.6.5/Lib/test/test_mailbox.py
--- Python-3.6.3/Lib/test/test_mailbox.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_mailbox.py	2018-03-28 11:19:31.000000000 +0200
@@ -746,7 +746,7 @@ class TestMaildir(TestMailbox, unittest.
             hostname = hostname.replace(':', r'\072')
         pid = os.getpid()
         pattern = re.compile(r"(?P<time>\d+)\.M(?P<M>\d{1,6})P(?P<P>\d+)"
-                             r"Q(?P<Q>\d+)\.(?P<host>[^:/]+)")
+                             r"Q(?P<Q>\d+)\.(?P<host>[^:/]*)")
         previous_groups = None
         for x in range(repetitions):
             tmp_file = self._box._create_tmp()
diff -urpN Python-3.6.3/Lib/test/test_marshal.py Python-3.6.5/Lib/test/test_marshal.py
--- Python-3.6.3/Lib/test/test_marshal.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_marshal.py	2018-03-28 11:19:31.000000000 +0200
@@ -34,6 +34,29 @@ class IntTestCase(unittest.TestCase, Hel
                 self.helper(expected)
             n = n >> 1
 
+    def test_int64(self):
+        # Simulate int marshaling with TYPE_INT64.
+        maxint64 = (1 << 63) - 1
+        minint64 = -maxint64-1
+        for base in maxint64, minint64, -maxint64, -(minint64 >> 1):
+            while base:
+                s = b'I' + int.to_bytes(base, 8, 'little', signed=True)
+                got = marshal.loads(s)
+                self.assertEqual(base, got)
+                if base == -1:  # a fixed-point for shifting right 1
+                    base = 0
+                else:
+                    base >>= 1
+
+        got = marshal.loads(b'I\xfe\xdc\xba\x98\x76\x54\x32\x10')
+        self.assertEqual(got, 0x1032547698badcfe)
+        got = marshal.loads(b'I\x01\x23\x45\x67\x89\xab\xcd\xef')
+        self.assertEqual(got, -0x1032547698badcff)
+        got = marshal.loads(b'I\x08\x19\x2a\x3b\x4c\x5d\x6e\x7f')
+        self.assertEqual(got, 0x7f6e5d4c3b2a1908)
+        got = marshal.loads(b'I\xf7\xe6\xd5\xc4\xb3\xa2\x91\x80')
+        self.assertEqual(got, -0x7f6e5d4c3b2a1909)
+
     def test_bool(self):
         for b in (True, False):
             self.helper(b)
diff -urpN Python-3.6.3/Lib/test/test_math.py Python-3.6.5/Lib/test/test_math.py
--- Python-3.6.3/Lib/test/test_math.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_math.py	2018-03-28 11:19:31.000000000 +0200
@@ -1288,7 +1288,7 @@ class MathTests(unittest.TestCase):
 
 
 class IsCloseTests(unittest.TestCase):
-    isclose = math.isclose # sublcasses should override this
+    isclose = math.isclose  # subclasses should override this
 
     def assertIsClose(self, a, b, *args, **kwargs):
         self.assertTrue(self.isclose(a, b, *args, **kwargs),
diff -urpN Python-3.6.3/Lib/test/test_memoryio.py Python-3.6.5/Lib/test/test_memoryio.py
--- Python-3.6.3/Lib/test/test_memoryio.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_memoryio.py	2018-03-28 11:19:31.000000000 +0200
@@ -733,7 +733,8 @@ class CBytesIOTest(PyBytesIOTest):
         check = self.check_sizeof
         self.assertEqual(object.__sizeof__(io.BytesIO()), basesize)
         check(io.BytesIO(), basesize )
-        check(io.BytesIO(b'a' * 1000), basesize + sys.getsizeof(b'a' * 1000))
+        n = 1000  # use a variable to prevent constant folding
+        check(io.BytesIO(b'a' * n), basesize + sys.getsizeof(b'a' * n))
 
     # Various tests of copy-on-write behaviour for BytesIO.
 
diff -urpN Python-3.6.3/Lib/test/test_msilib.py Python-3.6.5/Lib/test/test_msilib.py
--- Python-3.6.3/Lib/test/test_msilib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_msilib.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,7 +1,64 @@
 """ Test suite for the code in msilib """
+import os.path
 import unittest
-from test.support import import_module
+from test.support import TESTFN, import_module, unlink
 msilib = import_module('msilib')
+import msilib.schema
+
+
+def init_database():
+    path = TESTFN + '.msi'
+    db = msilib.init_database(
+        path,
+        msilib.schema,
+        'Python Tests',
+        'product_code',
+        '1.0',
+        'PSF',
+    )
+    return db, path
+
+
+class MsiDatabaseTestCase(unittest.TestCase):
+
+    def test_view_fetch_returns_none(self):
+        db, db_path = init_database()
+        properties = []
+        view = db.OpenView('SELECT Property, Value FROM Property')
+        view.Execute(None)
+        while True:
+            record = view.Fetch()
+            if record is None:
+                break
+            properties.append(record.GetString(1))
+        view.Close()
+        self.assertEqual(
+            properties,
+            [
+                'ProductName', 'ProductCode', 'ProductVersion',
+                'Manufacturer', 'ProductLanguage',
+            ]
+        )
+        self.addCleanup(unlink, db_path)
+
+    def test_database_open_failed(self):
+        with self.assertRaises(msilib.MSIError) as cm:
+            msilib.OpenDatabase('non-existent.msi', msilib.MSIDBOPEN_READONLY)
+        self.assertEqual(str(cm.exception), 'open failed')
+
+    def test_database_create_failed(self):
+        db_path = os.path.join(TESTFN, 'test.msi')
+        with self.assertRaises(msilib.MSIError) as cm:
+            msilib.OpenDatabase(db_path, msilib.MSIDBOPEN_CREATE)
+        self.assertEqual(str(cm.exception), 'create failed')
+
+    def test_get_property_vt_empty(self):
+        db, db_path = init_database()
+        summary = db.GetSummaryInformation(0)
+        self.assertIsNone(summary.GetProperty(msilib.PID_SECURITY))
+        del db
+        self.addCleanup(unlink, db_path)
+
 
 class Test_make_id(unittest.TestCase):
     #http://msdn.microsoft.com/en-us/library/aa369212(v=vs.85).aspx
diff -urpN Python-3.6.3/Lib/test/test_netrc.py Python-3.6.5/Lib/test/test_netrc.py
--- Python-3.6.3/Lib/test/test_netrc.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_netrc.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,7 +1,6 @@
-import netrc, os, unittest, sys, textwrap
+import netrc, os, unittest, sys, tempfile, textwrap
 from test import support
 
-temp_filename = support.TESTFN
 
 class NetrcTestCase(unittest.TestCase):
 
@@ -10,7 +9,8 @@ class NetrcTestCase(unittest.TestCase):
         mode = 'w'
         if sys.platform != 'cygwin':
             mode += 't'
-        with open(temp_filename, mode) as fp:
+        temp_fd, temp_filename = tempfile.mkstemp()
+        with os.fdopen(temp_fd, mode=mode) as fp:
             fp.write(test_data)
         self.addCleanup(os.unlink, temp_filename)
         return netrc.netrc(temp_filename)
@@ -24,6 +24,9 @@ class NetrcTestCase(unittest.TestCase):
                          ('log1', 'acct1', 'pass1'))
         self.assertEqual(nrc.hosts['default'], ('log2', None, 'pass2'))
 
+        nrc2 = self.make_nrc(nrc.__repr__())
+        self.assertEqual(nrc.hosts, nrc2.hosts)
+
     def test_macros(self):
         nrc = self.make_nrc("""\
             macdef macro1
diff -urpN Python-3.6.3/Lib/test/test_nntplib.py Python-3.6.5/Lib/test/test_nntplib.py
--- Python-3.6.3/Lib/test/test_nntplib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_nntplib.py	2018-03-28 11:19:31.000000000 +0200
@@ -166,6 +166,7 @@ class NetworkedNNTPTestsMixin:
         # XXX this could exceptionally happen...
         self.assertNotIn(article.lines[-1], (b".", b".\n", b".\r\n"))
 
+    @unittest.skipIf(True, "FIXME: see bpo-32128")
     def test_article_head_body(self):
         resp, count, first, last, name = self.server.group(self.GROUP_NAME)
         # Try to find an available article
diff -urpN Python-3.6.3/Lib/test/test_ntpath.py Python-3.6.5/Lib/test/test_ntpath.py
--- Python-3.6.3/Lib/test/test_ntpath.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_ntpath.py	2018-03-28 11:19:31.000000000 +0200
@@ -3,7 +3,7 @@ import os
 import sys
 import unittest
 import warnings
-from test.support import TestFailed
+from test.support import TestFailed, FakePath
 from test import support, test_genericpath
 from tempfile import TemporaryFile
 
@@ -456,18 +456,9 @@ class PathLikeTests(unittest.TestCase):
 
     path = ntpath
 
-    class PathLike:
-        def __init__(self, path=''):
-            self.path = path
-        def __fspath__(self):
-            if isinstance(self.path, BaseException):
-                raise self.path
-            else:
-                return self.path
-
     def setUp(self):
         self.file_name = support.TESTFN.lower()
-        self.file_path = self.PathLike(support.TESTFN)
+        self.file_path = FakePath(support.TESTFN)
         self.addCleanup(support.unlink, self.file_name)
         with open(self.file_name, 'xb', 0) as file:
             file.write(b"test_ntpath.PathLikeTests")
@@ -482,7 +473,7 @@ class PathLikeTests(unittest.TestCase):
         self.assertPathEqual(self.path.isabs)
 
     def test_path_join(self):
-        self.assertEqual(self.path.join('a', self.PathLike('b'), 'c'),
+        self.assertEqual(self.path.join('a', FakePath('b'), 'c'),
                          self.path.join('a', 'b', 'c'))
 
     def test_path_split(self):
diff -urpN Python-3.6.3/Lib/test/test_ordered_dict.py Python-3.6.5/Lib/test/test_ordered_dict.py
--- Python-3.6.3/Lib/test/test_ordered_dict.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_ordered_dict.py	2018-03-28 11:19:31.000000000 +0200
@@ -355,6 +355,20 @@ class OrderedDictTests:
         self.assertEqual(repr(od),
             "OrderedDict([('a', None), ('b', None), ('c', None), ('x', ...)])")
 
+    def test_repr_recursive_values(self):
+        OrderedDict = self.OrderedDict
+        od = OrderedDict()
+        od[42] = od.values()
+        r = repr(od)
+        # Cannot perform a stronger test, as the contents of the repr
+        # are implementation-dependent.  All we can say is that we
+        # want a str result, not an exception of any sort.
+        self.assertIsInstance(r, str)
+        od[42] = od.items()
+        r = repr(od)
+        # Again.
+        self.assertIsInstance(r, str)
+
     def test_setdefault(self):
         OrderedDict = self.OrderedDict
         pairs = [('c', 1), ('b', 2), ('a', 3), ('d', 4), ('e', 5), ('f', 6)]
diff -urpN Python-3.6.3/Lib/test/test_os.py Python-3.6.5/Lib/test/test_os.py
--- Python-3.6.3/Lib/test/test_os.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_os.py	2018-03-28 11:19:31.000000000 +0200
@@ -64,7 +64,7 @@ except ImportError:
     INT_MAX = PY_SSIZE_T_MAX = sys.maxsize
 
 from test.support.script_helper import assert_python_ok
-from test.support import unix_shell
+from test.support import unix_shell, FakePath
 
 
 root_in_posix = False
@@ -94,21 +94,6 @@ def requires_os_func(name):
     return unittest.skipUnless(hasattr(os, name), 'requires os.%s' % name)
 
 
-class _PathLike(os.PathLike):
-
-    def __init__(self, path=""):
-        self.path = path
-
-    def __str__(self):
-        return str(self.path)
-
-    def __fspath__(self):
-        if isinstance(self.path, BaseException):
-            raise self.path
-        else:
-            return self.path
-
-
 def create_file(filename, content=b'content'):
     with open(filename, "xb", 0) as fp:
         fp.write(content)
@@ -970,15 +955,14 @@ class WalkTests(unittest.TestCase):
                 dirs.remove('SUB1')
 
         self.assertEqual(len(all), 2)
-        self.assertEqual(all[0],
-                         (str(walk_path), ["SUB2"], ["tmp1"]))
+        self.assertEqual(all[0], (self.walk_path, ["SUB2"], ["tmp1"]))
 
         all[1][-1].sort()
         all[1][1].sort()
         self.assertEqual(all[1], self.sub2_tree)
 
     def test_file_like_path(self):
-        self.test_walk_prune(_PathLike(self.walk_path))
+        self.test_walk_prune(FakePath(self.walk_path))
 
     def test_walk_bottom_up(self):
         # Walk bottom-up.
@@ -2171,6 +2155,56 @@ class Win32SymlinkTests(unittest.TestCas
         finally:
             os.chdir(orig_dir)
 
+    @unittest.skipUnless(os.path.lexists(r'C:\Users\All Users')
+                            and os.path.exists(r'C:\ProgramData'),
+                            'Test directories not found')
+    def test_29248(self):
+        # os.symlink() calls CreateSymbolicLink, which creates
+        # the reparse data buffer with the print name stored
+        # first, so the offset is always 0. CreateSymbolicLink
+        # stores the "PrintName" DOS path (e.g. "C:\") first,
+        # with an offset of 0, followed by the "SubstituteName"
+        # NT path (e.g. "\??\C:\"). The "All Users" link, on
+        # the other hand, seems to have been created manually
+        # with an inverted order.
+        target = os.readlink(r'C:\Users\All Users')
+        self.assertTrue(os.path.samefile(target, r'C:\ProgramData'))
+
+    def test_buffer_overflow(self):
+        # Older versions would have a buffer overflow when detecting
+        # whether a link source was a directory. This test ensures we
+        # no longer crash, but does not otherwise validate the behavior
+        segment = 'X' * 27
+        path = os.path.join(*[segment] * 10)
+        test_cases = [
+            # overflow with absolute src
+            ('\\' + path, segment),
+            # overflow dest with relative src
+            (segment, path),
+            # overflow when joining src
+            (path[:180], path[:180]),
+        ]
+        for src, dest in test_cases:
+            try:
+                os.symlink(src, dest)
+            except FileNotFoundError:
+                pass
+            else:
+                try:
+                    os.remove(dest)
+                except OSError:
+                    pass
+            # Also test with bytes, since that is a separate code path.
+            try:
+                os.symlink(os.fsencode(src), os.fsencode(dest))
+            except FileNotFoundError:
+                pass
+            else:
+                try:
+                    os.remove(dest)
+                except OSError:
+                    pass
+
 
 @unittest.skipUnless(sys.platform == "win32", "Win32 specific tests")
 class Win32JunctionTests(unittest.TestCase):
@@ -2279,7 +2313,7 @@ class PidTests(unittest.TestCase):
     def test_waitpid(self):
         args = [sys.executable, '-c', 'pass']
         # Add an implicit test for PyUnicode_FSConverter().
-        pid = os.spawnv(os.P_NOWAIT, _PathLike(args[0]), args)
+        pid = os.spawnv(os.P_NOWAIT, FakePath(args[0]), args)
         status = os.waitpid(pid, 0)
         self.assertEqual(status, (pid, 0))
 
@@ -3125,13 +3159,13 @@ class PathTConverterTests(unittest.TestC
             bytes_fspath = bytes_filename = None
         else:
             bytes_filename = support.TESTFN.encode('ascii')
-            bytes_fspath = _PathLike(bytes_filename)
-        fd = os.open(_PathLike(str_filename), os.O_WRONLY|os.O_CREAT)
+            bytes_fspath = FakePath(bytes_filename)
+        fd = os.open(FakePath(str_filename), os.O_WRONLY|os.O_CREAT)
         self.addCleanup(support.unlink, support.TESTFN)
         self.addCleanup(os.close, fd)
 
-        int_fspath = _PathLike(fd)
-        str_fspath = _PathLike(str_filename)
+        int_fspath = FakePath(fd)
+        str_fspath = FakePath(str_filename)
 
         for name, allow_fd, extra_args, cleanup_fn in self.functions:
             with self.subTest(name=name):
@@ -3504,16 +3538,16 @@ class TestPEP519(unittest.TestCase):
 
     def test_fsencode_fsdecode(self):
         for p in "path/like/object", b"path/like/object":
-            pathlike = _PathLike(p)
+            pathlike = FakePath(p)
 
             self.assertEqual(p, self.fspath(pathlike))
             self.assertEqual(b"path/like/object", os.fsencode(pathlike))
             self.assertEqual("path/like/object", os.fsdecode(pathlike))
 
     def test_pathlike(self):
-        self.assertEqual('#feelthegil', self.fspath(_PathLike('#feelthegil')))
-        self.assertTrue(issubclass(_PathLike, os.PathLike))
-        self.assertTrue(isinstance(_PathLike(), os.PathLike))
+        self.assertEqual('#feelthegil', self.fspath(FakePath('#feelthegil')))
+        self.assertTrue(issubclass(FakePath, os.PathLike))
+        self.assertTrue(isinstance(FakePath('x'), os.PathLike))
 
     def test_garbage_in_exception_out(self):
         vapor = type('blah', (), {})
@@ -3525,14 +3559,14 @@ class TestPEP519(unittest.TestCase):
 
     def test_bad_pathlike(self):
         # __fspath__ returns a value other than str or bytes.
-        self.assertRaises(TypeError, self.fspath, _PathLike(42))
+        self.assertRaises(TypeError, self.fspath, FakePath(42))
         # __fspath__ attribute that is not callable.
         c = type('foo', (), {})
         c.__fspath__ = 1
         self.assertRaises(TypeError, self.fspath, c())
         # __fspath__ raises an exception.
         self.assertRaises(ZeroDivisionError, self.fspath,
-                          _PathLike(ZeroDivisionError()))
+                          FakePath(ZeroDivisionError()))
 
 # Only test if the C version is provided, otherwise TestPEP519 already tested
 # the pure Python implementation.
diff -urpN Python-3.6.3/Lib/test/test_parser.py Python-3.6.5/Lib/test/test_parser.py
--- Python-3.6.3/Lib/test/test_parser.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_parser.py	2018-03-28 11:19:31.000000000 +0200
@@ -30,7 +30,7 @@ class RoundtripLegalSyntaxTestCase(unitt
         self.roundtrip(parser.expr, s)
 
     def test_flags_passed(self):
-        # The unicode literals flags has to be passed from the paser to AST
+        # The unicode literals flags has to be passed from the parser to AST
         # generation.
         suite = parser.suite("from __future__ import unicode_literals; x = ''")
         code = suite.compile()
diff -urpN Python-3.6.3/Lib/test/test_pathlib.py Python-3.6.5/Lib/test/test_pathlib.py
--- Python-3.6.3/Lib/test/test_pathlib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_pathlib.py	2018-03-28 11:19:31.000000000 +0200
@@ -11,8 +11,7 @@ import unittest
 from unittest import mock
 
 from test import support
-android_not_root = support.android_not_root
-TESTFN = support.TESTFN
+from test.support import TESTFN, FakePath
 
 try:
     import grp, pwd
@@ -192,18 +191,15 @@ class _BasePurePathTest(object):
         P = self.cls
         p = P('a')
         self.assertIsInstance(p, P)
-        class PathLike:
-            def __fspath__(self):
-                return "a/b/c"
         P('a', 'b', 'c')
         P('/a', 'b', 'c')
         P('a/b/c')
         P('/a/b/c')
-        P(PathLike())
+        P(FakePath("a/b/c"))
         self.assertEqual(P(P('a')), P('a'))
         self.assertEqual(P(P('a'), 'b'), P('a/b'))
         self.assertEqual(P(P('a'), P('b')), P('a/b'))
-        self.assertEqual(P(P('a'), P('b'), P('c')), P(PathLike()))
+        self.assertEqual(P(P('a'), P('b'), P('c')), P(FakePath("a/b/c")))
 
     def _check_str_subclass(self, *args):
         # Issue #21127: it should be possible to construct a PurePath object
@@ -1914,10 +1910,12 @@ class _BasePathTest(object):
         self.assertFalse((P / 'fileA' / 'bah').is_fifo())
 
     @unittest.skipUnless(hasattr(os, "mkfifo"), "os.mkfifo() required")
-    @unittest.skipIf(android_not_root, "mkfifo not allowed, non root user")
     def test_is_fifo_true(self):
         P = self.cls(BASE, 'myfifo')
-        os.mkfifo(str(P))
+        try:
+            os.mkfifo(str(P))
+        except PermissionError as e:
+            self.skipTest('os.mkfifo(): %s' % e)
         self.assertTrue(P.is_fifo())
         self.assertFalse(P.is_socket())
         self.assertFalse(P.is_file())
diff -urpN Python-3.6.3/Lib/test/test_pdb.py Python-3.6.5/Lib/test/test_pdb.py
--- Python-3.6.3/Lib/test/test_pdb.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_pdb.py	2018-03-28 11:19:31.000000000 +0200
@@ -724,6 +724,121 @@ def test_pdb_next_command_for_generator(
     finished
     """
 
+def test_pdb_next_command_for_coroutine():
+    """Testing skip unwindng stack on yield for coroutines for "next" command
+
+    >>> import asyncio
+
+    >>> async def test_coro():
+    ...     await asyncio.sleep(0)
+    ...     await asyncio.sleep(0)
+    ...     await asyncio.sleep(0)
+
+    >>> async def test_main():
+    ...     import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()
+    ...     await test_coro()
+
+    >>> def test_function():
+    ...     loop = asyncio.new_event_loop()
+    ...     loop.run_until_complete(test_main())
+    ...     loop.close()
+    ...     print("finished")
+
+    >>> with PdbTestInput(['step',
+    ...                    'step',
+    ...                    'next',
+    ...                    'next',
+    ...                    'next',
+    ...                    'step',
+    ...                    'continue']):
+    ...     test_function()
+    > <doctest test.test_pdb.test_pdb_next_command_for_coroutine[2]>(3)test_main()
+    -> await test_coro()
+    (Pdb) step
+    --Call--
+    > <doctest test.test_pdb.test_pdb_next_command_for_coroutine[1]>(1)test_coro()
+    -> async def test_coro():
+    (Pdb) step
+    > <doctest test.test_pdb.test_pdb_next_command_for_coroutine[1]>(2)test_coro()
+    -> await asyncio.sleep(0)
+    (Pdb) next
+    > <doctest test.test_pdb.test_pdb_next_command_for_coroutine[1]>(3)test_coro()
+    -> await asyncio.sleep(0)
+    (Pdb) next
+    > <doctest test.test_pdb.test_pdb_next_command_for_coroutine[1]>(4)test_coro()
+    -> await asyncio.sleep(0)
+    (Pdb) next
+    Internal StopIteration
+    > <doctest test.test_pdb.test_pdb_next_command_for_coroutine[2]>(3)test_main()
+    -> await test_coro()
+    (Pdb) step
+    --Return--
+    > <doctest test.test_pdb.test_pdb_next_command_for_coroutine[2]>(3)test_main()->None
+    -> await test_coro()
+    (Pdb) continue
+    finished
+    """
+
+def test_pdb_next_command_for_asyncgen():
+    """Testing skip unwindng stack on yield for coroutines for "next" command
+
+    >>> import asyncio
+
+    >>> async def agen():
+    ...     yield 1
+    ...     await asyncio.sleep(0)
+    ...     yield 2
+
+    >>> async def test_coro():
+    ...     async for x in agen():
+    ...         print(x)
+
+    >>> async def test_main():
+    ...     import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()
+    ...     await test_coro()
+
+    >>> def test_function():
+    ...     loop = asyncio.new_event_loop()
+    ...     loop.run_until_complete(test_main())
+    ...     loop.close()
+    ...     print("finished")
+
+    >>> with PdbTestInput(['step',
+    ...                    'step',
+    ...                    'next',
+    ...                    'next',
+    ...                    'step',
+    ...                    'next',
+    ...                    'continue']):
+    ...     test_function()
+    > <doctest test.test_pdb.test_pdb_next_command_for_asyncgen[3]>(3)test_main()
+    -> await test_coro()
+    (Pdb) step
+    --Call--
+    > <doctest test.test_pdb.test_pdb_next_command_for_asyncgen[2]>(1)test_coro()
+    -> async def test_coro():
+    (Pdb) step
+    > <doctest test.test_pdb.test_pdb_next_command_for_asyncgen[2]>(2)test_coro()
+    -> async for x in agen():
+    (Pdb) next
+    > <doctest test.test_pdb.test_pdb_next_command_for_asyncgen[2]>(3)test_coro()
+    -> print(x)
+    (Pdb) next
+    1
+    > <doctest test.test_pdb.test_pdb_next_command_for_asyncgen[2]>(2)test_coro()
+    -> async for x in agen():
+    (Pdb) step
+    --Call--
+    > <doctest test.test_pdb.test_pdb_next_command_for_asyncgen[1]>(2)agen()
+    -> yield 1
+    (Pdb) next
+    > <doctest test.test_pdb.test_pdb_next_command_for_asyncgen[1]>(3)agen()
+    -> await asyncio.sleep(0)
+    (Pdb) continue
+    2
+    finished
+    """
+
 def test_pdb_return_command_for_generator():
     """Testing no unwindng stack on yield for generators
        for "return" command
@@ -779,6 +894,47 @@ def test_pdb_return_command_for_generato
     finished
     """
 
+def test_pdb_return_command_for_coroutine():
+    """Testing no unwindng stack on yield for coroutines for "return" command
+
+    >>> import asyncio
+
+    >>> async def test_coro():
+    ...     await asyncio.sleep(0)
+    ...     await asyncio.sleep(0)
+    ...     await asyncio.sleep(0)
+
+    >>> async def test_main():
+    ...     import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()
+    ...     await test_coro()
+
+    >>> def test_function():
+    ...     loop = asyncio.new_event_loop()
+    ...     loop.run_until_complete(test_main())
+    ...     loop.close()
+    ...     print("finished")
+
+    >>> with PdbTestInput(['step',
+    ...                    'step',
+    ...                    'next',
+    ...                    'continue']):
+    ...     test_function()
+    > <doctest test.test_pdb.test_pdb_return_command_for_coroutine[2]>(3)test_main()
+    -> await test_coro()
+    (Pdb) step
+    --Call--
+    > <doctest test.test_pdb.test_pdb_return_command_for_coroutine[1]>(1)test_coro()
+    -> async def test_coro():
+    (Pdb) step
+    > <doctest test.test_pdb.test_pdb_return_command_for_coroutine[1]>(2)test_coro()
+    -> await asyncio.sleep(0)
+    (Pdb) next
+    > <doctest test.test_pdb.test_pdb_return_command_for_coroutine[1]>(3)test_coro()
+    -> await asyncio.sleep(0)
+    (Pdb) continue
+    finished
+    """
+
 def test_pdb_until_command_for_generator():
     """Testing no unwindng stack on yield for generators
        for "until" command if target breakpoing is not reached
@@ -823,6 +979,52 @@ def test_pdb_until_command_for_generator
     finished
     """
 
+def test_pdb_until_command_for_coroutine():
+    """Testing no unwindng stack for coroutines
+       for "until" command if target breakpoing is not reached
+
+    >>> import asyncio
+
+    >>> async def test_coro():
+    ...     print(0)
+    ...     await asyncio.sleep(0)
+    ...     print(1)
+    ...     await asyncio.sleep(0)
+    ...     print(2)
+    ...     await asyncio.sleep(0)
+    ...     print(3)
+
+    >>> async def test_main():
+    ...     import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()
+    ...     await test_coro()
+
+    >>> def test_function():
+    ...     loop = asyncio.new_event_loop()
+    ...     loop.run_until_complete(test_main())
+    ...     loop.close()
+    ...     print("finished")
+
+    >>> with PdbTestInput(['step',
+    ...                    'until 8',
+    ...                    'continue']):
+    ...     test_function()
+    > <doctest test.test_pdb.test_pdb_until_command_for_coroutine[2]>(3)test_main()
+    -> await test_coro()
+    (Pdb) step
+    --Call--
+    > <doctest test.test_pdb.test_pdb_until_command_for_coroutine[1]>(1)test_coro()
+    -> async def test_coro():
+    (Pdb) until 8
+    0
+    1
+    2
+    > <doctest test.test_pdb.test_pdb_until_command_for_coroutine[1]>(8)test_coro()
+    -> print(3)
+    (Pdb) continue
+    3
+    finished
+    """
+
 def test_pdb_next_command_in_generator_for_loop():
     """The next command on returning from a generator controlled by a for loop.
 
diff -urpN Python-3.6.3/Lib/test/test_peepholer.py Python-3.6.5/Lib/test/test_peepholer.py
--- Python-3.6.3/Lib/test/test_peepholer.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_peepholer.py	2018-03-28 11:19:31.000000000 +0200
@@ -178,8 +178,15 @@ class TestTranforms(BytecodeTestCase):
         self.assertInBytecode(code, 'LOAD_CONST', 'b')
 
         # Verify that large sequences do not result from folding
-        code = compile('a="x"*1000', '', 'single')
+        code = compile('a="x"*10000', '', 'single')
+        self.assertInBytecode(code, 'LOAD_CONST', 10000)
+        self.assertNotIn("x"*10000, code.co_consts)
+        code = compile('a=1<<1000', '', 'single')
         self.assertInBytecode(code, 'LOAD_CONST', 1000)
+        self.assertNotIn(1<<1000, code.co_consts)
+        code = compile('a=2**1000', '', 'single')
+        self.assertInBytecode(code, 'LOAD_CONST', 1000)
+        self.assertNotIn(2**1000, code.co_consts)
 
     def test_binary_subscr_on_unicode(self):
         # valid code get optimized
diff -urpN Python-3.6.3/Lib/test/test_pickle.py Python-3.6.5/Lib/test/test_pickle.py
--- Python-3.6.3/Lib/test/test_pickle.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_pickle.py	2018-03-28 11:19:31.000000000 +0200
@@ -6,6 +6,7 @@ import io
 import collections
 import struct
 import sys
+import weakref
 
 import unittest
 from test import support
@@ -26,8 +27,13 @@ except ImportError:
     has_c_implementation = False
 
 
-class PickleTests(AbstractPickleModuleTests):
-    pass
+class PyPickleTests(AbstractPickleModuleTests):
+    dump = staticmethod(pickle._dump)
+    dumps = staticmethod(pickle._dumps)
+    load = staticmethod(pickle._load)
+    loads = staticmethod(pickle._loads)
+    Pickler = pickle._Pickler
+    Unpickler = pickle._Unpickler
 
 
 class PyUnpicklerTests(AbstractUnpickleTests):
@@ -112,6 +118,66 @@ class PyIdPersPicklerTests(AbstractIdent
     pickler = pickle._Pickler
     unpickler = pickle._Unpickler
 
+    @support.cpython_only
+    def test_pickler_reference_cycle(self):
+        def check(Pickler):
+            for proto in range(pickle.HIGHEST_PROTOCOL + 1):
+                f = io.BytesIO()
+                pickler = Pickler(f, proto)
+                pickler.dump('abc')
+                self.assertEqual(self.loads(f.getvalue()), 'abc')
+            pickler = Pickler(io.BytesIO())
+            self.assertEqual(pickler.persistent_id('def'), 'def')
+            r = weakref.ref(pickler)
+            del pickler
+            self.assertIsNone(r())
+
+        class PersPickler(self.pickler):
+            def persistent_id(subself, obj):
+                return obj
+        check(PersPickler)
+
+        class PersPickler(self.pickler):
+            @classmethod
+            def persistent_id(cls, obj):
+                return obj
+        check(PersPickler)
+
+        class PersPickler(self.pickler):
+            @staticmethod
+            def persistent_id(obj):
+                return obj
+        check(PersPickler)
+
+    @support.cpython_only
+    def test_unpickler_reference_cycle(self):
+        def check(Unpickler):
+            for proto in range(pickle.HIGHEST_PROTOCOL + 1):
+                unpickler = Unpickler(io.BytesIO(self.dumps('abc', proto)))
+                self.assertEqual(unpickler.load(), 'abc')
+            unpickler = Unpickler(io.BytesIO())
+            self.assertEqual(unpickler.persistent_load('def'), 'def')
+            r = weakref.ref(unpickler)
+            del unpickler
+            self.assertIsNone(r())
+
+        class PersUnpickler(self.unpickler):
+            def persistent_load(subself, pid):
+                return pid
+        check(PersUnpickler)
+
+        class PersUnpickler(self.unpickler):
+            @classmethod
+            def persistent_load(cls, pid):
+                return pid
+        check(PersUnpickler)
+
+        class PersUnpickler(self.unpickler):
+            @staticmethod
+            def persistent_load(pid):
+                return pid
+        check(PersUnpickler)
+
 
 class PyPicklerUnpicklerObjectTests(AbstractPicklerUnpicklerObjectTests):
 
@@ -136,6 +202,9 @@ class PyChainDispatchTableTests(Abstract
 
 
 if has_c_implementation:
+    class CPickleTests(AbstractPickleModuleTests):
+        from _pickle import dump, dumps, load, loads, Pickler, Unpickler
+
     class CUnpicklerTests(PyUnpicklerTests):
         unpickler = _pickle.Unpickler
         bad_stack_errors = (pickle.UnpicklingError,)
@@ -189,7 +258,7 @@ if has_c_implementation:
         check_sizeof = support.check_sizeof
 
         def test_pickler(self):
-            basesize = support.calcobjsize('5P2n3i2n3iP')
+            basesize = support.calcobjsize('6P2n3i2n3iP')
             p = _pickle.Pickler(io.BytesIO())
             self.assertEqual(object.__sizeof__(p), basesize)
             MT_size = struct.calcsize('3nP0n')
@@ -206,7 +275,7 @@ if has_c_implementation:
                 0)  # Write buffer is cleared after every dump().
 
         def test_unpickler(self):
-            basesize = support.calcobjsize('2Pn2P 2P2n2i5P 2P3n6P2n2i')
+            basesize = support.calcobjsize('2P2n2P 2P2n2i5P 2P3n6P2n2i')
             unpickler = _pickle.Unpickler
             P = struct.calcsize('P')  # Size of memo table entry.
             n = struct.calcsize('n')  # Size of mark table entry.
@@ -426,12 +495,12 @@ class CompatPickleTests(unittest.TestCas
 
 
 def test_main():
-    tests = [PickleTests, PyUnpicklerTests, PyPicklerTests,
+    tests = [PyPickleTests, PyUnpicklerTests, PyPicklerTests,
              PyPersPicklerTests, PyIdPersPicklerTests,
              PyDispatchTableTests, PyChainDispatchTableTests,
              CompatPickleTests]
     if has_c_implementation:
-        tests.extend([CUnpicklerTests, CPicklerTests,
+        tests.extend([CPickleTests, CUnpicklerTests, CPicklerTests,
                       CPersPicklerTests, CIdPersPicklerTests,
                       CDumpPickle_LoadPickle, DumpPickle_CLoadPickle,
                       PyPicklerUnpicklerObjectTests,
diff -urpN Python-3.6.3/Lib/test/test_pickletools.py Python-3.6.5/Lib/test/test_pickletools.py
--- Python-3.6.3/Lib/test/test_pickletools.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_pickletools.py	2018-03-28 11:19:31.000000000 +0200
@@ -2,10 +2,9 @@ import pickle
 import pickletools
 from test import support
 from test.pickletester import AbstractPickleTests
-from test.pickletester import AbstractPickleModuleTests
 import unittest
 
-class OptimizedPickleTests(AbstractPickleTests, AbstractPickleModuleTests):
+class OptimizedPickleTests(AbstractPickleTests):
 
     def dumps(self, arg, proto=None):
         return pickletools.optimize(pickle.dumps(arg, proto))
diff -urpN Python-3.6.3/Lib/test/test_plistlib.py Python-3.6.5/Lib/test/test_plistlib.py
--- Python-3.6.3/Lib/test/test_plistlib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_plistlib.py	2018-03-28 11:19:31.000000000 +0200
@@ -169,6 +169,17 @@ class TestPlistlib(unittest.TestCase):
                     self.assertRaises(OverflowError, plistlib.dumps,
                                       pl, fmt=fmt)
 
+    def test_bytearray(self):
+        for pl in (b'<binary gunk>', b"<lots of binary gunk>\0\1\2\3" * 10):
+            for fmt in ALL_FORMATS:
+                with self.subTest(pl=pl, fmt=fmt):
+                    data = plistlib.dumps(bytearray(pl), fmt=fmt)
+                    pl2 = plistlib.loads(data)
+                    self.assertIsInstance(pl2, bytes)
+                    self.assertEqual(pl2, pl)
+                    data2 = plistlib.dumps(pl2, fmt=fmt)
+                    self.assertEqual(data, data2)
+
     def test_bytes(self):
         pl = self._create()
         data = plistlib.dumps(pl)
@@ -310,7 +321,8 @@ class TestPlistlib(unittest.TestCase):
                     'second': [1, 2],
                     'third': [3, 4],
                 })
-                self.assertIsNot(pl2['first'], pl2['second'])
+                if fmt != plistlib.FMT_BINARY:
+                    self.assertIsNot(pl2['first'], pl2['second'])
 
     def test_list_members(self):
         pl = {
@@ -354,11 +366,13 @@ class TestPlistlib(unittest.TestCase):
             testString = "string containing %s" % c
             if i >= 32 or c in "\r\n\t":
                 # \r, \n and \t are the only legal control chars in XML
-                plistlib.dumps(testString, fmt=plistlib.FMT_XML)
+                data = plistlib.dumps(testString, fmt=plistlib.FMT_XML)
+                if c != "\r":
+                    self.assertEqual(plistlib.loads(data), testString)
             else:
-                self.assertRaises(ValueError,
-                                  plistlib.dumps,
-                                  testString)
+                with self.assertRaises(ValueError):
+                    plistlib.dumps(testString, fmt=plistlib.FMT_XML)
+            plistlib.dumps(testString, fmt=plistlib.FMT_BINARY)
 
     def test_non_bmp_characters(self):
         pl = {'python': '\U0001f40d'}
@@ -367,6 +381,14 @@ class TestPlistlib(unittest.TestCase):
                 data = plistlib.dumps(pl, fmt=fmt)
                 self.assertEqual(plistlib.loads(data), pl)
 
+    def test_lone_surrogates(self):
+        for fmt in ALL_FORMATS:
+            with self.subTest(fmt=fmt):
+                with self.assertRaises(UnicodeEncodeError):
+                    plistlib.dumps('\ud8ff', fmt=fmt)
+                with self.assertRaises(UnicodeEncodeError):
+                    plistlib.dumps('\udcff', fmt=fmt)
+
     def test_nondictroot(self):
         for fmt in ALL_FORMATS:
             with self.subTest(fmt=fmt):
@@ -422,6 +444,9 @@ class TestPlistlib(unittest.TestCase):
                 pl2 = plistlib.loads(data)
                 self.assertEqual(dict(pl), dict(pl2))
 
+
+class TestBinaryPlistlib(unittest.TestCase):
+
     def test_nonstandard_refs_size(self):
         # Issue #21538: Refs and offsets are 24-bit integers
         data = (b'bplist00'
@@ -434,6 +459,47 @@ class TestPlistlib(unittest.TestCase):
                 b'\x00\x00\x00\x00\x00\x00\x00\x13')
         self.assertEqual(plistlib.loads(data), {'a': 'b'})
 
+    def test_dump_duplicates(self):
+        # Test effectiveness of saving duplicated objects
+        for x in (None, False, True, 12345, 123.45, 'abcde', b'abcde',
+                  datetime.datetime(2004, 10, 26, 10, 33, 33),
+                  plistlib.Data(b'abcde'), bytearray(b'abcde'),
+                  [12, 345], (12, 345), {'12': 345}):
+            with self.subTest(x=x):
+                data = plistlib.dumps([x]*1000, fmt=plistlib.FMT_BINARY)
+                self.assertLess(len(data), 1100, repr(data))
+
+    def test_identity(self):
+        for x in (None, False, True, 12345, 123.45, 'abcde', b'abcde',
+                  datetime.datetime(2004, 10, 26, 10, 33, 33),
+                  plistlib.Data(b'abcde'), bytearray(b'abcde'),
+                  [12, 345], (12, 345), {'12': 345}):
+            with self.subTest(x=x):
+                data = plistlib.dumps([x]*2, fmt=plistlib.FMT_BINARY)
+                a, b = plistlib.loads(data)
+                if isinstance(x, tuple):
+                    x = list(x)
+                self.assertEqual(a, x)
+                self.assertEqual(b, x)
+                self.assertIs(a, b)
+
+    def test_cycles(self):
+        # recursive list
+        a = []
+        a.append(a)
+        b = plistlib.loads(plistlib.dumps(a, fmt=plistlib.FMT_BINARY))
+        self.assertIs(b[0], b)
+        # recursive tuple
+        a = ([],)
+        a[0].append(a)
+        b = plistlib.loads(plistlib.dumps(a, fmt=plistlib.FMT_BINARY))
+        self.assertIs(b[0][0], b)
+        # recursive dict
+        a = {}
+        a['x'] = a
+        b = plistlib.loads(plistlib.dumps(a, fmt=plistlib.FMT_BINARY))
+        self.assertIs(b['x'], b)
+
     def test_large_timestamp(self):
         # Issue #26709: 32-bit timestamp out of range
         for ts in -2**31-1, 2**31:
@@ -443,6 +509,56 @@ class TestPlistlib(unittest.TestCase):
                 data = plistlib.dumps(d, fmt=plistlib.FMT_BINARY)
                 self.assertEqual(plistlib.loads(data), d)
 
+    def test_invalid_binary(self):
+        for data in [
+                # too short data
+                b'',
+                # too large offset_table_offset and nonstandard offset_size
+                b'\x00\x08'
+                b'\x00\x00\x00\x00\x00\x00\x03\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x00'
+                b'\x00\x00\x00\x00\x00\x00\x00\x2a',
+                # integer overflow in offset_table_offset
+                b'\x00\x08'
+                b'\x00\x00\x00\x00\x00\x00\x01\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x00'
+                b'\xff\xff\xff\xff\xff\xff\xff\xff',
+                # offset_size = 0
+                b'\x00\x08'
+                b'\x00\x00\x00\x00\x00\x00\x00\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x00'
+                b'\x00\x00\x00\x00\x00\x00\x00\x09',
+                # ref_size = 0
+                b'\xa1\x01\x00\x08\x0a'
+                b'\x00\x00\x00\x00\x00\x00\x01\x00'
+                b'\x00\x00\x00\x00\x00\x00\x00\x02'
+                b'\x00\x00\x00\x00\x00\x00\x00\x00'
+                b'\x00\x00\x00\x00\x00\x00\x00\x0b',
+                # integer overflow in offset
+                b'\x00\xff\xff\xff\xff\xff\xff\xff\xff'
+                b'\x00\x00\x00\x00\x00\x00\x08\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x00'
+                b'\x00\x00\x00\x00\x00\x00\x00\x09',
+                # invalid ASCII
+                b'\x51\xff\x08'
+                b'\x00\x00\x00\x00\x00\x00\x01\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x00'
+                b'\x00\x00\x00\x00\x00\x00\x00\x0a',
+                # invalid UTF-16
+                b'\x61\xd8\x00\x08'
+                b'\x00\x00\x00\x00\x00\x00\x01\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x01'
+                b'\x00\x00\x00\x00\x00\x00\x00\x00'
+                b'\x00\x00\x00\x00\x00\x00\x00\x0b',
+                ]:
+            with self.assertRaises(plistlib.InvalidFileException):
+                plistlib.loads(b'bplist00' + data, fmt=plistlib.FMT_BINARY)
+
 
 class TestPlistlibDeprecated(unittest.TestCase):
     def test_io_deprecated(self):
diff -urpN Python-3.6.3/Lib/test/test_poll.py Python-3.6.5/Lib/test/test_poll.py
--- Python-3.6.3/Lib/test/test_poll.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_poll.py	2018-03-28 11:19:31.000000000 +0200
@@ -208,6 +208,28 @@ class PollTests(unittest.TestCase):
             os.write(w, b'spam')
             t.join()
 
+    @unittest.skipUnless(threading, 'Threading required for this test.')
+    @reap_threads
+    def test_poll_blocks_with_negative_ms(self):
+        for timeout_ms in [None, -1000, -1, -1.0, -0.1, -1e-100]:
+            # Create two file descriptors. This will be used to unlock
+            # the blocking call to poll.poll inside the thread
+            r, w = os.pipe()
+            pollster = select.poll()
+            pollster.register(r, select.POLLIN)
+
+            poll_thread = threading.Thread(target=pollster.poll, args=(timeout_ms,))
+            poll_thread.start()
+            poll_thread.join(timeout=0.1)
+            self.assertTrue(poll_thread.is_alive())
+
+            # Write to the pipe so pollster.poll unblocks and the thread ends.
+            os.write(w, b'spam')
+            poll_thread.join()
+            self.assertFalse(poll_thread.is_alive())
+            os.close(r)
+            os.close(w)
+
 
 def test_main():
     run_unittest(PollTests)
diff -urpN Python-3.6.3/Lib/test/test_poplib.py Python-3.6.5/Lib/test/test_poplib.py
--- Python-3.6.3/Lib/test/test_poplib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_poplib.py	2018-03-28 11:19:31.000000000 +0200
@@ -303,9 +303,19 @@ class TestPOP3Class(TestCase):
     def test_rpop(self):
         self.assertOK(self.client.rpop('foo'))
 
-    def test_apop(self):
+    def test_apop_normal(self):
         self.assertOK(self.client.apop('foo', 'dummypassword'))
 
+    def test_apop_REDOS(self):
+        # Replace welcome with very long evil welcome.
+        # NB The upper bound on welcome length is currently 2048.
+        # At this length, evil input makes each apop call take
+        # on the order of milliseconds instead of microseconds.
+        evil_welcome = b'+OK' + (b'<' * 1000000)
+        with test_support.swap_attr(self.client, 'welcome', evil_welcome):
+            # The evil welcome is invalid, so apop should throw.
+            self.assertRaises(poplib.error_proto, self.client.apop, 'a', 'kb')
+
     def test_top(self):
         expected =  (b'+OK 116 bytes',
                      [b'From: postmaster@python.org', b'Content-Type: text/plain',
@@ -352,7 +362,7 @@ class TestPOP3Class(TestCase):
     @requires_ssl
     def test_stls_context(self):
         expected = b'+OK Begin TLS negotiation'
-        ctx = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
+        ctx = ssl.SSLContext(ssl.PROTOCOL_TLS)
         ctx.load_verify_locations(CAFILE)
         ctx.verify_mode = ssl.CERT_REQUIRED
         ctx.check_hostname = True
@@ -392,7 +402,7 @@ class TestPOP3_SSLClass(TestPOP3Class):
         self.assertIn('POP3_SSL', poplib.__all__)
 
     def test_context(self):
-        ctx = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
+        ctx = ssl.SSLContext(ssl.PROTOCOL_TLS)
         self.assertRaises(ValueError, poplib.POP3_SSL, self.server.host,
                             self.server.port, keyfile=CERTFILE, context=ctx)
         self.assertRaises(ValueError, poplib.POP3_SSL, self.server.host,
diff -urpN Python-3.6.3/Lib/test/test_posix.py Python-3.6.5/Lib/test/test_posix.py
--- Python-3.6.3/Lib/test/test_posix.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_posix.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,7 +1,6 @@
 "Test posix functions"
 
 from test import support
-android_not_root = support.android_not_root
 
 # Skip these tests if there is no posix module.
 posix = support.import_module('posix')
@@ -236,6 +235,16 @@ class PosixTester(unittest.TestCase):
         finally:
             os.close(fd)
 
+    # issue31106 - posix_fallocate() does not set error in errno.
+    @unittest.skipUnless(hasattr(posix, 'posix_fallocate'),
+        "test needs posix.posix_fallocate()")
+    def test_posix_fallocate_errno(self):
+        try:
+            posix.posix_fallocate(-42, 0, 10)
+        except OSError as inst:
+            if inst.errno != errno.EBADF:
+                raise
+
     @unittest.skipUnless(hasattr(posix, 'posix_fadvise'),
         "test needs posix.posix_fadvise()")
     def test_posix_fadvise(self):
@@ -245,6 +254,15 @@ class PosixTester(unittest.TestCase):
         finally:
             os.close(fd)
 
+    @unittest.skipUnless(hasattr(posix, 'posix_fadvise'),
+        "test needs posix.posix_fadvise()")
+    def test_posix_fadvise_errno(self):
+        try:
+            posix.posix_fadvise(-42, 0, 0, posix.POSIX_FADV_WILLNEED)
+        except OSError as inst:
+            if inst.errno != errno.EBADF:
+                raise
+
     @unittest.skipUnless(os.utime in os.supports_fd, "test needs fd support in os.utime")
     def test_utime_with_fd(self):
         now = time.time()
@@ -423,15 +441,16 @@ class PosixTester(unittest.TestCase):
                 posix.stat, list(os.fsencode(support.TESTFN)))
 
     @unittest.skipUnless(hasattr(posix, 'mkfifo'), "don't have mkfifo()")
-    @unittest.skipIf(android_not_root, "mkfifo not allowed, non root user")
     def test_mkfifo(self):
         support.unlink(support.TESTFN)
-        posix.mkfifo(support.TESTFN, stat.S_IRUSR | stat.S_IWUSR)
+        try:
+            posix.mkfifo(support.TESTFN, stat.S_IRUSR | stat.S_IWUSR)
+        except PermissionError as e:
+            self.skipTest('posix.mkfifo(): %s' % e)
         self.assertTrue(stat.S_ISFIFO(posix.stat(support.TESTFN).st_mode))
 
     @unittest.skipUnless(hasattr(posix, 'mknod') and hasattr(stat, 'S_IFIFO'),
                          "don't have mknod()/S_IFIFO")
-    @unittest.skipIf(android_not_root, "mknod not allowed, non root user")
     def test_mknod(self):
         # Test using mknod() to create a FIFO (the only use specified
         # by POSIX).
@@ -442,7 +461,7 @@ class PosixTester(unittest.TestCase):
         except OSError as e:
             # Some old systems don't allow unprivileged users to use
             # mknod(), or only support creating device nodes.
-            self.assertIn(e.errno, (errno.EPERM, errno.EINVAL))
+            self.assertIn(e.errno, (errno.EPERM, errno.EINVAL, errno.EACCES))
         else:
             self.assertTrue(stat.S_ISFIFO(posix.stat(support.TESTFN).st_mode))
 
@@ -452,7 +471,7 @@ class PosixTester(unittest.TestCase):
             posix.mknod(path=support.TESTFN, mode=mode, device=0,
                 dir_fd=None)
         except OSError as e:
-            self.assertIn(e.errno, (errno.EPERM, errno.EINVAL))
+            self.assertIn(e.errno, (errno.EPERM, errno.EINVAL, errno.EACCES))
 
     @unittest.skipUnless(hasattr(posix, 'stat'), 'test needs posix.stat()')
     @unittest.skipUnless(hasattr(posix, 'makedev'), 'test needs posix.makedev()')
@@ -937,11 +956,13 @@ class PosixTester(unittest.TestCase):
             posix.close(f)
 
     @unittest.skipUnless(os.link in os.supports_dir_fd, "test needs dir_fd support in os.link()")
-    @unittest.skipIf(android_not_root, "hard link not allowed, non root user")
     def test_link_dir_fd(self):
         f = posix.open(posix.getcwd(), posix.O_RDONLY)
         try:
             posix.link(support.TESTFN, support.TESTFN + 'link', src_dir_fd=f, dst_dir_fd=f)
+        except PermissionError as e:
+            self.skipTest('posix.link(): %s' % e)
+        else:
             # should have same inodes
             self.assertEqual(posix.stat(support.TESTFN)[1],
                 posix.stat(support.TESTFN + 'link')[1])
@@ -961,7 +982,6 @@ class PosixTester(unittest.TestCase):
 
     @unittest.skipUnless((os.mknod in os.supports_dir_fd) and hasattr(stat, 'S_IFIFO'),
                          "test requires both stat.S_IFIFO and dir_fd support for os.mknod()")
-    @unittest.skipIf(android_not_root, "mknod not allowed, non root user")
     def test_mknod_dir_fd(self):
         # Test using mknodat() to create a FIFO (the only use specified
         # by POSIX).
@@ -973,7 +993,7 @@ class PosixTester(unittest.TestCase):
         except OSError as e:
             # Some old systems don't allow unprivileged users to use
             # mknod(), or only support creating device nodes.
-            self.assertIn(e.errno, (errno.EPERM, errno.EINVAL))
+            self.assertIn(e.errno, (errno.EPERM, errno.EINVAL, errno.EACCES))
         else:
             self.assertTrue(stat.S_ISFIFO(posix.stat(support.TESTFN).st_mode))
         finally:
@@ -1045,12 +1065,15 @@ class PosixTester(unittest.TestCase):
             posix.close(f)
 
     @unittest.skipUnless(os.mkfifo in os.supports_dir_fd, "test needs dir_fd support in os.mkfifo()")
-    @unittest.skipIf(android_not_root, "mkfifo not allowed, non root user")
     def test_mkfifo_dir_fd(self):
         support.unlink(support.TESTFN)
         f = posix.open(posix.getcwd(), posix.O_RDONLY)
         try:
-            posix.mkfifo(support.TESTFN, stat.S_IRUSR | stat.S_IWUSR, dir_fd=f)
+            try:
+                posix.mkfifo(support.TESTFN,
+                             stat.S_IRUSR | stat.S_IWUSR, dir_fd=f)
+            except PermissionError as e:
+                self.skipTest('posix.mkfifo(): %s' % e)
             self.assertTrue(stat.S_ISFIFO(posix.stat(support.TESTFN).st_mode))
         finally:
             posix.close(f)
diff -urpN Python-3.6.3/Lib/test/test_posixpath.py Python-3.6.5/Lib/test/test_posixpath.py
--- Python-3.6.3/Lib/test/test_posixpath.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_posixpath.py	2018-03-28 11:19:31.000000000 +0200
@@ -4,6 +4,7 @@ import unittest
 import warnings
 from posixpath import realpath, abspath, dirname, basename
 from test import support, test_genericpath
+from test.support import FakePath
 
 try:
     import posix
@@ -600,18 +601,9 @@ class PathLikeTests(unittest.TestCase):
 
     path = posixpath
 
-    class PathLike:
-        def __init__(self, path=''):
-            self.path = path
-        def __fspath__(self):
-            if isinstance(self.path, BaseException):
-                raise self.path
-            else:
-                return self.path
-
     def setUp(self):
         self.file_name = support.TESTFN.lower()
-        self.file_path = self.PathLike(support.TESTFN)
+        self.file_path = FakePath(support.TESTFN)
         self.addCleanup(support.unlink, self.file_name)
         with open(self.file_name, 'xb', 0) as file:
             file.write(b"test_posixpath.PathLikeTests")
@@ -626,7 +618,7 @@ class PathLikeTests(unittest.TestCase):
         self.assertPathEqual(self.path.isabs)
 
     def test_path_join(self):
-        self.assertEqual(self.path.join('a', self.PathLike('b'), 'c'),
+        self.assertEqual(self.path.join('a', FakePath('b'), 'c'),
                          self.path.join('a', 'b', 'c'))
 
     def test_path_split(self):
diff -urpN Python-3.6.3/Lib/test/test_print.py Python-3.6.5/Lib/test/test_print.py
--- Python-3.6.3/Lib/test/test_print.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_print.py	2018-03-28 11:19:31.000000000 +0200
@@ -156,6 +156,32 @@ class TestPy2MigrationHint(unittest.Test
 
         self.assertIn('print("Hello World", end=" ")', str(context.exception))
 
+    def test_string_with_leading_whitespace(self):
+        python2_print_str = '''if 1:
+            print "Hello World"
+        '''
+        with self.assertRaises(SyntaxError) as context:
+            exec(python2_print_str)
+
+        self.assertIn('print("Hello World")', str(context.exception))
+
+    # bpo-32685: Suggestions for print statement should be proper when
+    # it is in the same line as the header of a compound statement
+    # and/or followed by a semicolon
+    def test_string_with_semicolon(self):
+        python2_print_str = 'print p;'
+        with self.assertRaises(SyntaxError) as context:
+            exec(python2_print_str)
+
+        self.assertIn('print(p)', str(context.exception))
+
+    def test_string_in_loop_on_same_line(self):
+        python2_print_str = 'for i in s: print i'
+        with self.assertRaises(SyntaxError) as context:
+            exec(python2_print_str)
+
+        self.assertIn('print(i)', str(context.exception))
+
     def test_stream_redirection_hint_for_py2_migration(self):
         # Test correct hint produced for Py2 redirection syntax
         with self.assertRaises(TypeError) as context:
diff -urpN Python-3.6.3/Lib/test/test_property.py Python-3.6.5/Lib/test/test_property.py
--- Python-3.6.3/Lib/test/test_property.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_property.py	2018-03-28 11:19:31.000000000 +0200
@@ -3,6 +3,7 @@
 
 import sys
 import unittest
+from test import support
 
 class PropertyBase(Exception):
     pass
@@ -173,6 +174,16 @@ class PropertyTests(unittest.TestCase):
         sub.__class__.spam.__doc__ = 'Spam'
         self.assertEqual(sub.__class__.spam.__doc__, 'Spam')
 
+    @support.refcount_test
+    def test_refleaks_in___init__(self):
+        gettotalrefcount = support.get_attribute(sys, 'gettotalrefcount')
+        fake_prop = property('fget', 'fset', 'fdel', 'doc')
+        refs_before = gettotalrefcount()
+        for i in range(100):
+            fake_prop.__init__('fget', 'fset', 'fdel', 'doc')
+        self.assertAlmostEqual(gettotalrefcount() - refs_before, 0, delta=10)
+
+
 # Issue 5890: subclasses of property do not preserve method __doc__ strings
 class PropertySub(property):
     """This is a subclass of property"""
diff -urpN Python-3.6.3/Lib/test/test_pty.py Python-3.6.5/Lib/test/test_pty.py
--- Python-3.6.3/Lib/test/test_pty.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_pty.py	2018-03-28 11:19:31.000000000 +0200
@@ -10,6 +10,7 @@ import sys
 import select
 import signal
 import socket
+import io # readline
 import unittest
 
 TEST_STRING_1 = b"I wish to buy a fish license.\n"
@@ -23,6 +24,16 @@ else:
         pass
 
 
+# Note that os.read() is nondeterministic so we need to be very careful
+# to make the test suite deterministic.  A normal call to os.read() may
+# give us less than expected.
+#
+# Beware, on my Linux system, if I put 'foo\n' into a terminal fd, I get
+# back 'foo\r\n' at the other end.  The behavior depends on the termios
+# setting.  The newline translation may be OS-specific.  To make the
+# test suite deterministic and OS-independent, the functions _readline
+# and normalize_output can be used.
+
 def normalize_output(data):
     # Some operating systems do conversions on newline.  We could possibly
     # fix that by doing the appropriate termios.tcsetattr()s.  I couldn't
@@ -44,6 +55,12 @@ def normalize_output(data):
 
     return data
 
+def _readline(fd):
+    """Read one line.  May block forever if no newline is read."""
+    reader = io.FileIO(fd, mode='rb', closefd=False)
+    return reader.readline()
+
+
 
 # Marginal testing of pty suite. Cannot do extensive 'do or fail' testing
 # because pty code is not too portable.
@@ -98,14 +115,14 @@ class PtyTest(unittest.TestCase):
 
         debug("Writing to slave_fd")
         os.write(slave_fd, TEST_STRING_1)
-        s1 = os.read(master_fd, 1024)
+        s1 = _readline(master_fd)
         self.assertEqual(b'I wish to buy a fish license.\n',
                          normalize_output(s1))
 
         debug("Writing chunked output")
         os.write(slave_fd, TEST_STRING_2[:5])
         os.write(slave_fd, TEST_STRING_2[5:])
-        s2 = os.read(master_fd, 1024)
+        s2 = _readline(master_fd)
         self.assertEqual(b'For my pet fish, Eric.\n', normalize_output(s2))
 
         os.close(slave_fd)
diff -urpN Python-3.6.3/Lib/test/test_random.py Python-3.6.5/Lib/test/test_random.py
--- Python-3.6.3/Lib/test/test_random.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_random.py	2018-03-28 11:19:31.000000000 +0200
@@ -22,7 +22,7 @@ class TestBasicOps:
         self.gen.seed()
         state1 = self.gen.getstate()
         time.sleep(0.1)
-        self.gen.seed()      # diffent seeds at different times
+        self.gen.seed()      # different seeds at different times
         state2 = self.gen.getstate()
         self.assertNotEqual(state1, state2)
 
@@ -423,6 +423,44 @@ class MersenneTwister_TestBasicOps(TestB
             ['0x1.b0580f98a7dbep-1', '0x1.84129978f9c1ap-1',
              '0x1.aeaa51052e978p-2', '0x1.092178fb945a6p-2'])
 
+    def test_bug_31478(self):
+        # There shouldn't be an assertion failure in _random.Random.seed() in
+        # case the argument has a bad __abs__() method.
+        class BadInt(int):
+            def __abs__(self):
+                return None
+        try:
+            self.gen.seed(BadInt())
+        except TypeError:
+            pass
+
+    def test_bug_31482(self):
+        # Verify that version 1 seeds are unaffected by hash randomization
+        # when the seeds are expressed as bytes rather than strings.
+        # The hash(b) values listed are the Python2.7 hash() values
+        # which were used for seeding.
+
+        self.gen.seed(b'nofar', version=1)   # hash('nofar') == 5990528763808513177
+        self.assertEqual([self.gen.random().hex() for i in range(4)],
+            ['0x1.8645314505ad7p-1', '0x1.afb1f82e40a40p-5',
+             '0x1.2a59d2285e971p-1', '0x1.56977142a7880p-6'])
+
+        self.gen.seed(b'rachel', version=1)  # hash('rachel') == -9091735575445484789
+        self.assertEqual([self.gen.random().hex() for i in range(4)],
+            ['0x1.0b294cc856fcdp-1', '0x1.2ad22d79e77b8p-3',
+             '0x1.3052b9c072678p-2', '0x1.578f332106574p-3'])
+
+        self.gen.seed(b'', version=1)        # hash('') == 0
+        self.assertEqual([self.gen.random().hex() for i in range(4)],
+            ['0x1.b0580f98a7dbep-1', '0x1.84129978f9c1ap-1',
+             '0x1.aeaa51052e978p-2', '0x1.092178fb945a6p-2'])
+
+        b = b'\x00\x20\x40\x60\x80\xA0\xC0\xE0\xF0'
+        self.gen.seed(b, version=1)         # hash(b) == 5015594239749365497
+        self.assertEqual([self.gen.random().hex() for i in range(4)],
+            ['0x1.52c2fde444d23p-1', '0x1.875174f0daea4p-2',
+             '0x1.9e9b2c50e5cd2p-1', '0x1.fa57768bd321cp-2'])
+
     def test_setstate_first_arg(self):
         self.assertRaises(ValueError, self.gen.setstate, (1, None, None))
 
diff -urpN Python-3.6.3/Lib/test/test_re.py Python-3.6.5/Lib/test/test_re.py
--- Python-3.6.3/Lib/test/test_re.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_re.py	2018-03-28 11:19:31.000000000 +0200
@@ -112,7 +112,7 @@ class ReTests(unittest.TestCase):
 
         s = r"\1\1"
         self.assertEqual(re.sub('(.)', s, 'x'), 'xx')
-        self.assertEqual(re.sub('(.)', re.escape(s), 'x'), s)
+        self.assertEqual(re.sub('(.)', s.replace('\\', r'\\'), 'x'), s)
         self.assertEqual(re.sub('(.)', lambda m: s, 'x'), s)
 
         self.assertEqual(re.sub('(?P<a>x)', r'\g<a>\g<a>', 'xx'), 'xxxx')
diff -urpN Python-3.6.3/Lib/test/test_readline.py Python-3.6.5/Lib/test/test_readline.py
--- Python-3.6.3/Lib/test/test_readline.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_readline.py	2018-03-28 11:19:31.000000000 +0200
@@ -3,6 +3,7 @@ Very minimal unittests for parts of the
 """
 from contextlib import ExitStack
 from errno import EIO
+import locale
 import os
 import selectors
 import subprocess
@@ -137,6 +138,13 @@ print("History length:", readline.get_cu
         self.assertIn(b"History length: 0\r\n", output)
 
     def test_nonascii(self):
+        loc = locale.setlocale(locale.LC_CTYPE, None)
+        if loc in ('C', 'POSIX'):
+            # bpo-29240: On FreeBSD, if the LC_CTYPE locale is C or POSIX,
+            # writing and reading non-ASCII bytes into/from a TTY works, but
+            # readline or ncurses ignores non-ASCII bytes on read.
+            self.skipTest(f"the LC_CTYPE locale is {loc!r}")
+
         try:
             readline.add_history("\xEB\xEF")
         except UnicodeEncodeError as err:
diff -urpN Python-3.6.3/Lib/test/test_repl.py Python-3.6.5/Lib/test/test_repl.py
--- Python-3.6.3/Lib/test/test_repl.py	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/Lib/test/test_repl.py	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,62 @@
+"""Test the interactive interpreter."""
+
+import sys
+import os
+import unittest
+import subprocess
+from textwrap import dedent
+from test.support import cpython_only, SuppressCrashReport
+from test.support.script_helper import kill_python
+
+def spawn_repl(*args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, **kw):
+    """Run the Python REPL with the given arguments.
+
+    kw is extra keyword args to pass to subprocess.Popen. Returns a Popen
+    object.
+    """
+
+    # To run the REPL without using a terminal, spawn python with the command
+    # line option '-i' and the process name set to '<stdin>'.
+    # The directory of argv[0] must match the directory of the Python
+    # executable for the Popen() call to python to succeed as the directory
+    # path may be used by Py_GetPath() to build the default module search
+    # path.
+    stdin_fname = os.path.join(os.path.dirname(sys.executable), "<stdin>")
+    cmd_line = [stdin_fname, '-E', '-i']
+    cmd_line.extend(args)
+
+    # Set TERM=vt100, for the rationale see the comments in spawn_python() of
+    # test.support.script_helper.
+    env = kw.setdefault('env', dict(os.environ))
+    env['TERM'] = 'vt100'
+    return subprocess.Popen(cmd_line, executable=sys.executable,
+                            stdin=subprocess.PIPE,
+                            stdout=stdout, stderr=stderr,
+                            **kw)
+
+class TestInteractiveInterpreter(unittest.TestCase):
+
+    @cpython_only
+    def test_no_memory(self):
+        # Issue #30696: Fix the interactive interpreter looping endlessly when
+        # no memory. Check also that the fix does not break the interactive
+        # loop when an exception is raised.
+        user_input = """
+            import sys, _testcapi
+            1/0
+            print('After the exception.')
+            _testcapi.set_nomemory(0)
+            sys.exit(0)
+        """
+        user_input = dedent(user_input)
+        user_input = user_input.encode()
+        p = spawn_repl()
+        with SuppressCrashReport():
+            p.stdin.write(user_input)
+        output = kill_python(p)
+        self.assertIn(b'After the exception.', output)
+        # Exit code 120: Py_FinalizeEx() failed to flush stdout and stderr.
+        self.assertIn(p.returncode, (1, 120))
+
+if __name__ == "__main__":
+    unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_robotparser.py Python-3.6.5/Lib/test/test_robotparser.py
--- Python-3.6.3/Lib/test/test_robotparser.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_robotparser.py	2018-03-28 11:19:31.000000000 +0200
@@ -2,7 +2,6 @@ import io
 import os
 import unittest
 import urllib.robotparser
-from collections import namedtuple
 from test import support
 from http.server import BaseHTTPRequestHandler, HTTPServer
 try:
@@ -90,6 +89,10 @@ class BaseRequestRateTest(BaseRobotTest)
                         self.parser.crawl_delay(agent), self.crawl_delay
                     )
                 if self.request_rate:
+                    self.assertIsInstance(
+                        self.parser.request_rate(agent),
+                        urllib.robotparser.RequestRate
+                    )
                     self.assertEqual(
                         self.parser.request_rate(agent).requests,
                         self.request_rate.requests
@@ -111,7 +114,7 @@ Disallow: /a%2fb.html
 Disallow: /%7ejoe/index.html
     """
     agent = 'figtree'
-    request_rate = namedtuple('req_rate', 'requests seconds')(9, 30)
+    request_rate = urllib.robotparser.RequestRate(9, 30)
     crawl_delay = 3
     good = [('figtree', '/foo.html')]
     bad = ['/tmp', '/tmp.html', '/tmp/a.html', '/a%3cd.html', '/a%3Cd.html',
@@ -240,7 +243,7 @@ Crawl-delay: 1
 Request-rate: 3/15
 Disallow: /cyberworld/map/
     """
-    request_rate = namedtuple('req_rate', 'requests seconds')(3, 15)
+    request_rate = urllib.robotparser.RequestRate(3, 15)
     crawl_delay = 1
     good = ['/', '/test.html']
     bad = ['/cyberworld/map/index.html']
diff -urpN Python-3.6.3/Lib/test/test_shutil.py Python-3.6.5/Lib/test/test_shutil.py
--- Python-3.6.3/Lib/test/test_shutil.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_shutil.py	2018-03-28 11:19:31.000000000 +0200
@@ -10,6 +10,7 @@ import os
 import os.path
 import errno
 import functools
+import pathlib
 import subprocess
 from contextlib import ExitStack
 from shutil import (make_archive,
@@ -21,10 +22,10 @@ from shutil import (make_archive,
 import tarfile
 import zipfile
 import warnings
+import pathlib
 
 from test import support
-from test.support import (TESTFN, check_warnings, captured_stdout,
-                          android_not_root)
+from test.support import TESTFN, FakePath
 
 TESTFN2 = TESTFN + "2"
 
@@ -771,7 +772,6 @@ class TestShutil(unittest.TestCase):
 
     @unittest.skipIf(os.name == 'nt', 'temporarily disabled on Windows')
     @unittest.skipUnless(hasattr(os, 'link'), 'requires os.link')
-    @unittest.skipIf(android_not_root, "hard links not allowed, non root user")
     def test_dont_copy_file_onto_link_to_itself(self):
         # bug 851123.
         os.mkdir(TESTFN)
@@ -780,7 +780,10 @@ class TestShutil(unittest.TestCase):
         try:
             with open(src, 'w') as f:
                 f.write('cheddar')
-            os.link(src, dst)
+            try:
+                os.link(src, dst)
+            except PermissionError as e:
+                self.skipTest('os.link(): %s' % e)
             self.assertRaises(shutil.SameFileError, shutil.copyfile, src, dst)
             with open(src, 'r') as f:
                 self.assertEqual(f.read(), 'cheddar')
@@ -824,9 +827,11 @@ class TestShutil(unittest.TestCase):
 
     # Issue #3002: copyfile and copytree block indefinitely on named pipes
     @unittest.skipUnless(hasattr(os, "mkfifo"), 'requires os.mkfifo()')
-    @unittest.skipIf(android_not_root, "mkfifo not allowed, non root user")
     def test_copyfile_named_pipe(self):
-        os.mkfifo(TESTFN)
+        try:
+            os.mkfifo(TESTFN)
+        except PermissionError as e:
+            self.skipTest('os.mkfifo(): %s' % e)
         try:
             self.assertRaises(shutil.SpecialFileError,
                                 shutil.copyfile, TESTFN, TESTFN2)
@@ -835,7 +840,6 @@ class TestShutil(unittest.TestCase):
         finally:
             os.remove(TESTFN)
 
-    @unittest.skipIf(android_not_root, "mkfifo not allowed, non root user")
     @unittest.skipUnless(hasattr(os, "mkfifo"), 'requires os.mkfifo()')
     @support.skip_unless_symlink
     def test_copytree_named_pipe(self):
@@ -844,7 +848,10 @@ class TestShutil(unittest.TestCase):
             subdir = os.path.join(TESTFN, "subdir")
             os.mkdir(subdir)
             pipe = os.path.join(subdir, "mypipe")
-            os.mkfifo(pipe)
+            try:
+                os.mkfifo(pipe)
+            except PermissionError as e:
+                self.skipTest('os.mkfifo(): %s' % e)
             try:
                 shutil.copytree(TESTFN, TESTFN2)
             except shutil.Error as e:
@@ -1226,6 +1233,11 @@ class TestShutil(unittest.TestCase):
         self.assertNotIn('xxx', formats)
 
     def check_unpack_archive(self, format):
+        self.check_unpack_archive_with_converter(format, lambda path: path)
+        self.check_unpack_archive_with_converter(format, pathlib.Path)
+        self.check_unpack_archive_with_converter(format, FakePath)
+
+    def check_unpack_archive_with_converter(self, format, converter):
         root_dir, base_dir = self._create_files()
         expected = rlistdir(root_dir)
         expected.remove('outer')
diff -urpN Python-3.6.3/Lib/test/test_site.py Python-3.6.5/Lib/test/test_site.py
--- Python-3.6.3/Lib/test/test_site.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_site.py	2018-03-28 11:19:31.000000000 +0200
@@ -259,7 +259,7 @@ class HelperFunctionsTests(unittest.Test
                                   'site-packages')
             self.assertEqual(dirs[1], wanted)
         elif os.sep == '/':
-            # OS X non-framwework builds, Linux, FreeBSD, etc
+            # OS X non-framework builds, Linux, FreeBSD, etc
             self.assertEqual(len(dirs), 1)
             wanted = os.path.join('xoxo', 'lib',
                                   'python%d.%d' % sys.version_info[:2],
diff -urpN Python-3.6.3/Lib/test/test_smtplib.py Python-3.6.5/Lib/test/test_smtplib.py
--- Python-3.6.3/Lib/test/test_smtplib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_smtplib.py	2018-03-28 11:19:31.000000000 +0200
@@ -818,6 +818,7 @@ class SimSMTPServer(smtpd.SMTPServer):
 
     def __init__(self, *args, **kw):
         self._extra_features = []
+        self._addresses = {}
         smtpd.SMTPServer.__init__(self, *args, **kw)
 
     def handle_accepted(self, conn, addr):
@@ -826,7 +827,8 @@ class SimSMTPServer(smtpd.SMTPServer):
             decode_data=self._decode_data)
 
     def process_message(self, peer, mailfrom, rcpttos, data):
-        pass
+        self._addresses['from'] = mailfrom
+        self._addresses['tos'] = rcpttos
 
     def add_feature(self, feature):
         self._extra_features.append(feature)
@@ -1066,6 +1068,21 @@ class SMTPSimTests(unittest.TestCase):
         self.assertRaises(UnicodeEncodeError, smtp.sendmail, 'Alice', 'Böb', '')
         self.assertRaises(UnicodeEncodeError, smtp.mail, 'Älice')
 
+    def test_name_field_not_included_in_envelop_addresses(self):
+        smtp = smtplib.SMTP(
+            HOST, self.port, local_hostname='localhost', timeout=3
+        )
+        self.addCleanup(smtp.close)
+
+        message = EmailMessage()
+        message['From'] = email.utils.formataddr(('Michaël', 'michael@example.com'))
+        message['To'] = email.utils.formataddr(('René', 'rene@example.com'))
+
+        self.assertDictEqual(smtp.send_message(message), {})
+
+        self.assertEqual(self.serv._addresses['from'], 'michael@example.com')
+        self.assertEqual(self.serv._addresses['tos'], ['rene@example.com'])
+
 
 class SimSMTPUTF8Server(SimSMTPServer):
 
diff -urpN Python-3.6.3/Lib/test/test_socket.py Python-3.6.5/Lib/test/test_socket.py
--- Python-3.6.3/Lib/test/test_socket.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_socket.py	2018-03-28 11:19:31.000000000 +0200
@@ -1357,7 +1357,7 @@ class GeneralModuleTests(unittest.TestCa
         socket.gethostbyname(domain)
         socket.gethostbyname_ex(domain)
         socket.getaddrinfo(domain,0,socket.AF_UNSPEC,socket.SOCK_STREAM)
-        # this may not work if the forward lookup choses the IPv6 address, as that doesn't
+        # this may not work if the forward lookup chooses the IPv6 address, as that doesn't
         # have a reverse entry yet
         # socket.gethostbyaddr('испытание.python.org')
 
@@ -4239,7 +4239,7 @@ class UnbufferedFileObjectClassTestCase(
         self.write_file.write(self.write_msg)
         self.write_file.flush()
         self.evt2.set()
-        # Avoid cloding the socket before the server test has finished,
+        # Avoid closing the socket before the server test has finished,
         # otherwise system recv() will return 0 instead of EWOULDBLOCK.
         self.serv_finished.wait(5.0)
 
@@ -4373,6 +4373,10 @@ class NetworkConnectionNoServer(unittest
         expected_errnos = [ errno.ECONNREFUSED, ]
         if hasattr(errno, 'ENETUNREACH'):
             expected_errnos.append(errno.ENETUNREACH)
+        if hasattr(errno, 'EADDRNOTAVAIL'):
+            # bpo-31910: socket.create_connection() fails randomly
+            # with EADDRNOTAVAIL on Travis CI
+            expected_errnos.append(errno.EADDRNOTAVAIL)
 
         self.assertIn(cm.exception.errno, expected_errnos)
 
@@ -5415,6 +5419,9 @@ class LinuxKernelCryptoAPI(unittest.Test
         else:
             return sock
 
+    # bpo-31705: On kernel older than 4.5, sendto() failed with ENOKEY,
+    # at least on ppc64le architecture
+    @support.requires_linux_version(4, 5)
     def test_sha256(self):
         expected = bytes.fromhex("ba7816bf8f01cfea414140de5dae2223b00361a396"
                                  "177a9cb410ff61f20015ad")
@@ -5576,6 +5583,24 @@ class LinuxKernelCryptoAPI(unittest.Test
             with self.assertRaises(TypeError):
                 sock.sendmsg_afalg(op=socket.ALG_OP_ENCRYPT, assoclen=-1)
 
+@unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
+class TestMSWindowsTCPFlags(unittest.TestCase):
+    knownTCPFlags = {
+                       # avaliable since long time ago
+                       'TCP_MAXSEG',
+                       'TCP_NODELAY',
+                       # available starting with Windows 10 1607
+                       'TCP_FASTOPEN',
+                       # available starting with Windows 10 1703
+                       'TCP_KEEPCNT',
+                       }
+
+    def test_new_tcp_flags(self):
+        provided = [s for s in dir(socket) if s.startswith('TCP')]
+        unknown = [s for s in provided if s not in self.knownTCPFlags]
+
+        self.assertEqual([], unknown,
+            "New TCP flags were discovered. See bpo-32394 for more information")
 
 def test_main():
     tests = [GeneralModuleTests, BasicTCPTest, TCPCloserTest, TCPTimeoutTest,
@@ -5632,6 +5657,7 @@ def test_main():
         SendfileUsingSendTest,
         SendfileUsingSendfileTest,
     ])
+    tests.append(TestMSWindowsTCPFlags)
 
     thread_info = support.threading_setup()
     support.run_unittest(*tests)
diff -urpN Python-3.6.3/Lib/test/test_socketserver.py Python-3.6.5/Lib/test/test_socketserver.py
--- Python-3.6.3/Lib/test/test_socketserver.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_socketserver.py	2018-03-28 11:19:31.000000000 +0200
@@ -68,6 +68,20 @@ def simple_subprocess(testcase):
     testcase.assertEqual(72 << 8, status)
 
 
+def close_server(server):
+    server.server_close()
+
+    if hasattr(server, 'active_children'):
+        # ForkingMixIn: Manually reap all child processes, since server_close()
+        # calls waitpid() in non-blocking mode using the WNOHANG flag.
+        for pid in server.active_children.copy():
+            try:
+                os.waitpid(pid, 0)
+            except ChildProcessError:
+                pass
+        server.active_children.clear()
+
+
 @unittest.skipUnless(threading, 'Threading required for this test.')
 class SocketServerTest(unittest.TestCase):
     """Test all socket servers."""
@@ -142,7 +156,7 @@ class SocketServerTest(unittest.TestCase
         if verbose: print("waiting for server")
         server.shutdown()
         t.join()
-        server.server_close()
+        close_server(server)
         self.assertEqual(-1, server.socket.fileno())
         if verbose: print("done")
 
@@ -266,7 +280,7 @@ class SocketServerTest(unittest.TestCase
             s.shutdown()
         for t, s in threads:
             t.join()
-            s.server_close()
+            close_server(s)
 
     def test_tcpserver_bind_leak(self):
         # Issue #22435: the server socket wouldn't be closed if bind()/listen()
@@ -292,6 +306,7 @@ class ErrorHandlerTest(unittest.TestCase
 
     def tearDown(self):
         test.support.unlink(test.support.TESTFN)
+        reap_children()
 
     def test_sync_handled(self):
         BaseErrorTestServer(ValueError)
@@ -337,7 +352,7 @@ class BaseErrorTestServer(socketserver.T
         try:
             self.handle_request()
         finally:
-            self.server_close()
+            close_server(self)
         self.wait_done()
 
     def handle_error(self, request, client_address):
@@ -371,10 +386,7 @@ class ThreadingErrorTestServer(socketser
 
 if HAVE_FORKING:
     class ForkingErrorTestServer(socketserver.ForkingMixIn, BaseErrorTestServer):
-        def wait_done(self):
-            [child] = self.active_children
-            os.waitpid(child, 0)
-            self.active_children.clear()
+        pass
 
 
 class SocketWriterTest(unittest.TestCase):
@@ -386,7 +398,7 @@ class SocketWriterTest(unittest.TestCase
                 self.server.request_fileno = self.request.fileno()
 
         server = socketserver.TCPServer((HOST, 0), Handler)
-        self.addCleanup(server.server_close)
+        self.addCleanup(close_server, server)
         s = socket.socket(
             server.address_family, socket.SOCK_STREAM, socket.IPPROTO_TCP)
         with s:
@@ -410,7 +422,7 @@ class SocketWriterTest(unittest.TestCase
                 self.server.sent2 = self.wfile.write(big_chunk)
 
         server = socketserver.TCPServer((HOST, 0), Handler)
-        self.addCleanup(server.server_close)
+        self.addCleanup(close_server, server)
         interrupted = threading.Event()
 
         def signal_handler(signum, frame):
@@ -486,7 +498,7 @@ class MiscTestCase(unittest.TestCase):
         s.close()
         server.handle_request()
         self.assertEqual(server.shutdown_called, 1)
-        server.server_close()
+        close_server(server)
 
 
 if __name__ == "__main__":
diff -urpN Python-3.6.3/Lib/test/test_ssl.py Python-3.6.5/Lib/test/test_ssl.py
--- Python-3.6.3/Lib/test/test_ssl.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_ssl.py	2018-03-28 11:19:31.000000000 +0200
@@ -829,7 +829,7 @@ class BasicSocketTests(unittest.TestCase
         self.cert_time_ok("Jan  5 09:34:61 2018 GMT", 1515144901)
         self.cert_time_fail("Jan  5 09:34:62 2018 GMT")  # invalid seconds
 
-        # no special treatement for the special value:
+        # no special treatment for the special value:
         #   99991231235959Z (rfc 5280)
         self.cert_time_ok("Dec 31 23:59:59 9999 GMT", 253402300799.0)
 
@@ -1689,7 +1689,7 @@ class SimpleBackgroundTests(unittest.Tes
     @needs_sni
     def test_context_setget(self):
         # Check that the context of a connected socket can be replaced.
-        ctx1 = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
+        ctx1 = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
         ctx2 = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
         s = socket.socket(socket.AF_INET)
         with ctx1.wrap_socket(s) as ss:
@@ -1986,7 +1986,7 @@ if _have_threads:
             else:
                 self.context = ssl.SSLContext(ssl_version
                                               if ssl_version is not None
-                                              else ssl.PROTOCOL_TLSv1)
+                                              else ssl.PROTOCOL_TLS)
                 self.context.verify_mode = (certreqs if certreqs is not None
                                             else ssl.CERT_NONE)
                 if cacerts:
diff -urpN Python-3.6.3/Lib/test/test_stat.py Python-3.6.5/Lib/test/test_stat.py
--- Python-3.6.3/Lib/test/test_stat.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_stat.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,7 +1,7 @@
 import unittest
 import os
 import sys
-from test.support import TESTFN, import_fresh_module, android_not_root
+from test.support import TESTFN, import_fresh_module
 
 c_stat = import_fresh_module('stat', fresh=['_stat'])
 py_stat = import_fresh_module('stat', blocked=['_stat'])
@@ -168,9 +168,11 @@ class TestFilemode:
             self.assertS_IS("LNK", st_mode)
 
     @unittest.skipUnless(hasattr(os, 'mkfifo'), 'os.mkfifo not available')
-    @unittest.skipIf(android_not_root, "mkfifo not allowed, non root user")
     def test_fifo(self):
-        os.mkfifo(TESTFN, 0o700)
+        try:
+            os.mkfifo(TESTFN, 0o700)
+        except PermissionError as e:
+            self.skipTest('os.mkfifo(): %s' % e)
         st_mode, modestr = self.get_mode()
         self.assertEqual(modestr, 'prwx------')
         self.assertS_IS("FIFO", st_mode)
diff -urpN Python-3.6.3/Lib/test/test_strftime.py Python-3.6.5/Lib/test/test_strftime.py
--- Python-3.6.3/Lib/test/test_strftime.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_strftime.py	2018-03-28 11:19:31.000000000 +0200
@@ -58,8 +58,10 @@ class StrftimeTest(unittest.TestCase):
             import java
             java.util.Locale.setDefault(java.util.Locale.US)
         except ImportError:
-            import locale
-            locale.setlocale(locale.LC_TIME, 'C')
+            from locale import setlocale, LC_TIME
+            saved_locale = setlocale(LC_TIME)
+            setlocale(LC_TIME, 'C')
+            self.addCleanup(setlocale, LC_TIME, saved_locale)
 
     def test_strftime(self):
         now = time.time()
diff -urpN Python-3.6.3/Lib/test/test_string.py Python-3.6.5/Lib/test/test_string.py
--- Python-3.6.3/Lib/test/test_string.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_string.py	2018-03-28 11:19:31.000000000 +0200
@@ -271,6 +271,12 @@ class TestTemplate(unittest.TestCase):
         raises(ValueError, s.substitute, dict(who='tim'))
         s = Template('$who likes $100')
         raises(ValueError, s.substitute, dict(who='tim'))
+        # Template.idpattern should match to only ASCII characters.
+        # https://bugs.python.org/issue31672
+        s = Template("$who likes $\u0131")  # (DOTLESS I)
+        raises(ValueError, s.substitute, dict(who='tim'))
+        s = Template("$who likes $\u0130")  # (LATIN CAPITAL LETTER I WITH DOT ABOVE)
+        raises(ValueError, s.substitute, dict(who='tim'))
 
     def test_idpattern_override(self):
         class PathPattern(Template):
diff -urpN Python-3.6.3/Lib/test/test_subprocess.py Python-3.6.5/Lib/test/test_subprocess.py
--- Python-3.6.3/Lib/test/test_subprocess.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_subprocess.py	2018-03-28 11:19:31.000000000 +0200
@@ -16,6 +16,7 @@ import select
 import shutil
 import gc
 import textwrap
+from test.support import FakePath
 
 try:
     import ctypes
@@ -50,6 +51,8 @@ else:
     SETBINARY = ''
 
 NONEXISTING_CMD = ('nonexisting_i_hope',)
+# Ignore errors that indicate the command was not found
+NONEXISTING_ERRORS = (FileNotFoundError, NotADirectoryError, PermissionError)
 
 
 class BaseTestCase(unittest.TestCase):
@@ -310,9 +313,9 @@ class ProcessTestCase(BaseTestCase):
         # Verify first that the call succeeds without the executable arg.
         pre_args = [sys.executable, "-c"]
         self._assert_python(pre_args)
-        self.assertRaises((FileNotFoundError, PermissionError),
+        self.assertRaises(NONEXISTING_ERRORS,
                           self._assert_python, pre_args,
-                          executable="doesnotexist")
+                          executable=NONEXISTING_CMD[0])
 
     @unittest.skipIf(mswindows, "executable argument replaces shell")
     def test_executable_replaces_shell(self):
@@ -361,12 +364,7 @@ class ProcessTestCase(BaseTestCase):
     def test_cwd_with_pathlike(self):
         temp_dir = tempfile.gettempdir()
         temp_dir = self._normalize_cwd(temp_dir)
-
-        class _PathLikeObj:
-            def __fspath__(self):
-                return temp_dir
-
-        self._assert_cwd(temp_dir, sys.executable, cwd=_PathLikeObj())
+        self._assert_cwd(temp_dir, sys.executable, cwd=FakePath(temp_dir))
 
     @unittest.skipIf(mswindows, "pending resolution of issue #15533")
     def test_cwd_with_relative_arg(self):
@@ -1150,13 +1148,10 @@ class ProcessTestCase(BaseTestCase):
         # value for that limit, but Windows has 2048, so we loop
         # 1024 times (each call leaked two fds).
         for i in range(1024):
-            with self.assertRaises(OSError) as c:
+            with self.assertRaises(NONEXISTING_ERRORS):
                 subprocess.Popen(NONEXISTING_CMD,
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE)
-            # ignore errors that indicate the command was not found
-            if c.exception.errno not in (errno.ENOENT, errno.EACCES):
-                raise c.exception
 
     def test_nonexisting_with_pipes(self):
         # bpo-30121: Popen with pipes must close properly pipes on error.
@@ -1184,7 +1179,7 @@ class ProcessTestCase(BaseTestCase):
                 msvcrt.CrtSetReportFile(report_type, msvcrt.CRTDBG_FILE_STDERR)
 
             try:
-                subprocess.Popen([cmd],
+                subprocess.Popen(cmd,
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.PIPE)
             except OSError:
@@ -1568,8 +1563,10 @@ class POSIXProcessTestCase(BaseTestCase)
 
         fork_exec.side_effect = proper_error
 
-        with self.assertRaises(IsADirectoryError):
-            self.PopenNoDestructor(["non_existent_command"])
+        with mock.patch("subprocess.os.waitpid",
+                        side_effect=ChildProcessError):
+            with self.assertRaises(IsADirectoryError):
+                self.PopenNoDestructor(["non_existent_command"])
 
     @mock.patch("subprocess._posixsubprocess.fork_exec")
     def test_exception_errpipe_bad_data(self, fork_exec):
@@ -1586,8 +1583,10 @@ class POSIXProcessTestCase(BaseTestCase)
 
         fork_exec.side_effect = bad_error
 
-        with self.assertRaises(subprocess.SubprocessError) as e:
-            self.PopenNoDestructor(["non_existent_command"])
+        with mock.patch("subprocess.os.waitpid",
+                        side_effect=ChildProcessError):
+            with self.assertRaises(subprocess.SubprocessError) as e:
+                self.PopenNoDestructor(["non_existent_command"])
 
         self.assertIn(repr(error_data), str(e.exception))
 
@@ -2535,7 +2534,7 @@ class POSIXProcessTestCase(BaseTestCase)
         # let some time for the process to exit, and create a new Popen: this
         # should trigger the wait() of p
         time.sleep(0.2)
-        with self.assertRaises(OSError) as c:
+        with self.assertRaises(OSError):
             with subprocess.Popen(NONEXISTING_CMD,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE) as proc:
@@ -2974,7 +2973,7 @@ class ContextManagerTests(BaseTestCase):
             self.assertEqual(proc.returncode, 1)
 
     def test_invalid_args(self):
-        with self.assertRaises((FileNotFoundError, PermissionError)) as c:
+        with self.assertRaises(NONEXISTING_ERRORS):
             with subprocess.Popen(NONEXISTING_CMD,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE) as proc:
diff -urpN Python-3.6.3/Lib/test/test_support.py Python-3.6.5/Lib/test/test_support.py
--- Python-3.6.3/Lib/test/test_support.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_support.py	2018-03-28 11:19:31.000000000 +0200
@@ -6,8 +6,10 @@ import os
 import unittest
 import socket
 import tempfile
+import textwrap
 import errno
 from test import support
+from test.support import script_helper
 
 TESTFN = support.TESTFN
 
@@ -158,6 +160,33 @@ class TestSupport(unittest.TestCase):
         expected = ['tests may fail, unable to create temp dir: ' + path]
         self.assertEqual(warnings, expected)
 
+    @unittest.skipUnless(hasattr(os, "fork"), "test requires os.fork")
+    def test_temp_dir__forked_child(self):
+        """Test that a forked child process does not remove the directory."""
+        # See bpo-30028 for details.
+        # Run the test as an external script, because it uses fork.
+        script_helper.assert_python_ok("-c", textwrap.dedent("""
+            import os
+            from test import support
+            with support.temp_cwd() as temp_path:
+                pid = os.fork()
+                if pid != 0:
+                    # parent process (child has pid == 0)
+
+                    # wait for the child to terminate
+                    (pid, status) = os.waitpid(pid, 0)
+                    if status != 0:
+                        raise AssertionError(f"Child process failed with exit "
+                                             f"status indication 0x{status:x}.")
+
+                    # Make sure that temp_path is still present. When the child
+                    # process leaves the 'temp_cwd'-context, the __exit__()-
+                    # method of the context must not remove the temporary
+                    # directory.
+                    if not os.path.isdir(temp_path):
+                        raise AssertionError("Child removed temp_path.")
+        """))
+
     # Tests for change_cwd()
 
     def test_change_cwd(self):
@@ -365,6 +394,64 @@ class TestSupport(unittest.TestCase):
 
         self.assertRaises(AssertionError, support.check__all__, self, unittest)
 
+    def test_match_test(self):
+        class Test:
+            def __init__(self, test_id):
+                self.test_id = test_id
+
+            def id(self):
+                return self.test_id
+
+        test_access = Test('test.test_os.FileTests.test_access')
+        test_chdir = Test('test.test_os.Win32ErrorTests.test_chdir')
+
+        with support.swap_attr(support, '_match_test_func', None):
+            # match all
+            support.set_match_tests([])
+            self.assertTrue(support.match_test(test_access))
+            self.assertTrue(support.match_test(test_chdir))
+
+            # match all using None
+            support.set_match_tests(None)
+            self.assertTrue(support.match_test(test_access))
+            self.assertTrue(support.match_test(test_chdir))
+
+            # match the full test identifier
+            support.set_match_tests([test_access.id()])
+            self.assertTrue(support.match_test(test_access))
+            self.assertFalse(support.match_test(test_chdir))
+
+            # match the module name
+            support.set_match_tests(['test_os'])
+            self.assertTrue(support.match_test(test_access))
+            self.assertTrue(support.match_test(test_chdir))
+
+            # Test '*' pattern
+            support.set_match_tests(['test_*'])
+            self.assertTrue(support.match_test(test_access))
+            self.assertTrue(support.match_test(test_chdir))
+
+            # Test case sensitivity
+            support.set_match_tests(['filetests'])
+            self.assertFalse(support.match_test(test_access))
+            support.set_match_tests(['FileTests'])
+            self.assertTrue(support.match_test(test_access))
+
+            # Test pattern containing '.' and a '*' metacharacter
+            support.set_match_tests(['*test_os.*.test_*'])
+            self.assertTrue(support.match_test(test_access))
+            self.assertTrue(support.match_test(test_chdir))
+
+            # Multiple patterns
+            support.set_match_tests([test_access.id(), test_chdir.id()])
+            self.assertTrue(support.match_test(test_access))
+            self.assertTrue(support.match_test(test_chdir))
+
+            support.set_match_tests(['test_access', 'DONTMATCH'])
+            self.assertTrue(support.match_test(test_access))
+            self.assertFalse(support.match_test(test_chdir))
+
+
     # XXX -follows a list of untested API
     # make_legacy_pyc
     # is_resource_enabled
diff -urpN Python-3.6.3/Lib/test/test_syntax.py Python-3.6.5/Lib/test/test_syntax.py
--- Python-3.6.3/Lib/test/test_syntax.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_syntax.py	2018-03-28 11:19:31.000000000 +0200
@@ -384,6 +384,15 @@ Misuse of the nonlocal and global statem
      ...
    SyntaxError: name 'x' is used prior to nonlocal declaration
 
+   >>> def f():
+   ...     x = 1
+   ...     def g():
+   ...         x = 2
+   ...         nonlocal x
+   Traceback (most recent call last):
+     ...
+   SyntaxError: name 'x' is assigned to before nonlocal declaration
+
    >>> def f(x):
    ...     nonlocal x
    Traceback (most recent call last):
@@ -409,24 +418,7 @@ From SF bug #1705365
      ...
    SyntaxError: nonlocal declaration not allowed at module level
 
-TODO(jhylton): Figure out how to test SyntaxWarning with doctest.
-
-##   >>> def f(x):
-##   ...     def f():
-##   ...         print(x)
-##   ...         nonlocal x
-##   Traceback (most recent call last):
-##     ...
-##   SyntaxWarning: name 'x' is assigned to before nonlocal declaration
-
-##   >>> def f():
-##   ...     x = 1
-##   ...     nonlocal x
-##   Traceback (most recent call last):
-##     ...
-##   SyntaxWarning: name 'x' is assigned to before nonlocal declaration
-
- From https://bugs.python.org/issue25973
+From https://bugs.python.org/issue25973
    >>> class A:
    ...     def f(self):
    ...         nonlocal __x
@@ -608,12 +600,12 @@ class SyntaxTestCase(unittest.TestCase):
                           "positional argument follows keyword argument")
 
     def test_kwargs_last2(self):
-        self._check_error("int(**{base: 10}, '2')",
+        self._check_error("int(**{'base': 10}, '2')",
                           "positional argument follows "
                           "keyword argument unpacking")
 
     def test_kwargs_last3(self):
-        self._check_error("int(**{base: 10}, *['2'])",
+        self._check_error("int(**{'base': 10}, *['2'])",
                           "iterable argument unpacking follows "
                           "keyword argument unpacking")
 
diff -urpN Python-3.6.3/Lib/test/test_sys.py Python-3.6.5/Lib/test/test_sys.py
--- Python-3.6.3/Lib/test/test_sys.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_sys.py	2018-03-28 11:19:31.000000000 +0200
@@ -778,6 +778,10 @@ class SysModuleTest(unittest.TestCase):
     @unittest.skipUnless(hasattr(sys, "getallocatedblocks"),
                          "sys.getallocatedblocks unavailable on this build")
     def test_getallocatedblocks(self):
+        if (os.environ.get('PYTHONMALLOC', None)
+           and not sys.flags.ignore_environment):
+            self.skipTest("cannot test if PYTHONMALLOC env var is set")
+
         # Some sanity checks
         with_pymalloc = sysconfig.get_config_var('WITH_PYMALLOC')
         a = sys.getallocatedblocks()
@@ -826,6 +830,39 @@ class SysModuleTest(unittest.TestCase):
         rc, stdout, stderr = assert_python_ok('-c', code)
         self.assertEqual(stdout.rstrip(), b'True')
 
+    def test_sys_tracebacklimit(self):
+        code = """if 1:
+            import sys
+            def f1():
+                1 / 0
+            def f2():
+                f1()
+            sys.tracebacklimit = %r
+            f2()
+        """
+        def check(tracebacklimit, expected):
+            p = subprocess.Popen([sys.executable, '-c', code % tracebacklimit],
+                                 stderr=subprocess.PIPE)
+            out = p.communicate()[1]
+            self.assertEqual(out.splitlines(), expected)
+
+        traceback = [
+            b'Traceback (most recent call last):',
+            b'  File "<string>", line 8, in <module>',
+            b'  File "<string>", line 6, in f2',
+            b'  File "<string>", line 4, in f1',
+            b'ZeroDivisionError: division by zero'
+        ]
+        check(10, traceback)
+        check(3, traceback)
+        check(2, traceback[:1] + traceback[2:])
+        check(1, traceback[:1] + traceback[3:])
+        check(0, [traceback[-1]])
+        check(-1, [traceback[-1]])
+        check(1<<1000, traceback)
+        check(-1<<1000, [traceback[-1]])
+        check(None, traceback)
+
 
 @test.support.cpython_only
 class SizeofTest(unittest.TestCase):
@@ -1092,6 +1129,7 @@ class SizeofTest(unittest.TestCase):
             fmt += '3n2P'
         s = vsize(fmt)
         check(int, s)
+        # class
         s = vsize(fmt +                 # PyTypeObject
                   '3P'                  # PyAsyncMethods
                   '36P'                 # PyNumberMethods
@@ -1099,13 +1137,17 @@ class SizeofTest(unittest.TestCase):
                   '10P'                 # PySequenceMethods
                   '2P'                  # PyBufferProcs
                   '4P')
-        # Separate block for PyDictKeysObject with 8 keys and 5 entries
-        s += calcsize("2nP2n") + 8 + 5*calcsize("n2P")
-        # class
         class newstyleclass(object): pass
-        check(newstyleclass, s)
+        # Separate block for PyDictKeysObject with 8 keys and 5 entries
+        check(newstyleclass, s + calcsize("2nP2n0P") + 8 + 5*calcsize("n2P"))
+        # dict with shared keys
+        check(newstyleclass().__dict__, size('nQ2P') + 5*self.P)
+        o = newstyleclass()
+        o.a = o.b = o.c = o.d = o.e = o.f = o.g = o.h = 1
+        # Separate block for PyDictKeysObject with 16 keys and 10 entries
+        check(newstyleclass, s + calcsize("2nP2n0P") + 16 + 10*calcsize("n2P"))
         # dict with shared keys
-        check(newstyleclass().__dict__, size('nQ2P' + '2nP2n'))
+        check(newstyleclass().__dict__, size('nQ2P') + 10*self.P)
         # unicode
         # each tuple contains a string and its expected character size
         # don't put any static strings here, as they may contain
diff -urpN Python-3.6.3/Lib/test/test_sys_settrace.py Python-3.6.5/Lib/test/test_sys_settrace.py
--- Python-3.6.3/Lib/test/test_sys_settrace.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_sys_settrace.py	2018-03-28 11:19:31.000000000 +0200
@@ -5,6 +5,19 @@ import unittest
 import sys
 import difflib
 import gc
+from functools import wraps
+
+class tracecontext:
+    """Contex manager that traces its enter and exit."""
+    def __init__(self, output, value):
+        self.output = output
+        self.value = value
+
+    def __enter__(self):
+        self.output.append(self.value)
+
+    def __exit__(self, *exc_info):
+        self.output.append(-self.value)
 
 # A very basic example.  If this fails, we're in deep trouble.
 def basic():
@@ -16,7 +29,7 @@ basic.events = [(0, 'call'),
 
 # Many of the tests below are tricky because they involve pass statements.
 # If there is implicit control flow around a pass statement (in an except
-# clause or else caluse) under what conditions do you set a line number
+# clause or else clause) under what conditions do you set a line number
 # following that clause?
 
 
@@ -495,317 +508,540 @@ class RaisingTraceFuncTestCase(unittest.
 # command (aka. "Set next statement").
 
 class JumpTracer:
-    """Defines a trace function that jumps from one place to another,
-    with the source and destination lines of the jump being defined by
-    the 'jump' property of the function under test."""
-
-    def __init__(self, function):
-        self.function = function
-        self.jumpFrom = function.jump[0]
-        self.jumpTo = function.jump[1]
+    """Defines a trace function that jumps from one place to another."""
+
+    def __init__(self, function, jumpFrom, jumpTo, event='line',
+                 decorated=False):
+        self.code = function.__code__
+        self.jumpFrom = jumpFrom
+        self.jumpTo = jumpTo
+        self.event = event
+        self.firstLine = None if decorated else self.code.co_firstlineno
         self.done = False
 
     def trace(self, frame, event, arg):
-        if not self.done and frame.f_code == self.function.__code__:
-            firstLine = frame.f_code.co_firstlineno
-            if event == 'line' and frame.f_lineno == firstLine + self.jumpFrom:
+        if self.done:
+            return
+        # frame.f_code.co_firstlineno is the first line of the decorator when
+        # 'function' is decorated and the decorator may be written using
+        # multiple physical lines when it is too long. Use the first line
+        # trace event in 'function' to find the first line of 'function'.
+        if (self.firstLine is None and frame.f_code == self.code and
+                event == 'line'):
+            self.firstLine = frame.f_lineno - 1
+        if (event == self.event and self.firstLine and
+                frame.f_lineno == self.firstLine + self.jumpFrom):
+            f = frame
+            while f is not None and f.f_code != self.code:
+                f = f.f_back
+            if f is not None:
                 # Cope with non-integer self.jumpTo (because of
                 # no_jump_to_non_integers below).
                 try:
-                    frame.f_lineno = firstLine + self.jumpTo
+                    frame.f_lineno = self.firstLine + self.jumpTo
                 except TypeError:
                     frame.f_lineno = self.jumpTo
                 self.done = True
         return self.trace
 
-# The first set of 'jump' tests are for things that are allowed:
+# This verifies the line-numbers-must-be-integers rule.
+def no_jump_to_non_integers(output):
+    try:
+        output.append(2)
+    except ValueError as e:
+        output.append('integer' in str(e))
+
+# This verifies that you can't set f_lineno via _getframe or similar
+# trickery.
+def no_jump_without_trace_function():
+    try:
+        previous_frame = sys._getframe().f_back
+        previous_frame.f_lineno = previous_frame.f_lineno
+    except ValueError as e:
+        # This is the exception we wanted; make sure the error message
+        # talks about trace functions.
+        if 'trace' not in str(e):
+            raise
+    else:
+        # Something's wrong - the expected exception wasn't raised.
+        raise AssertionError("Trace-function-less jump failed to fail")
+
+
+class JumpTestCase(unittest.TestCase):
+    def setUp(self):
+        self.addCleanup(sys.settrace, sys.gettrace())
+        sys.settrace(None)
+
+    def compare_jump_output(self, expected, received):
+        if received != expected:
+            self.fail( "Outputs don't match:\n" +
+                       "Expected: " + repr(expected) + "\n" +
+                       "Received: " + repr(received))
 
-def jump_simple_forwards(output):
-    output.append(1)
-    output.append(2)
-    output.append(3)
+    def run_test(self, func, jumpFrom, jumpTo, expected, error=None,
+                 event='line', decorated=False):
+        tracer = JumpTracer(func, jumpFrom, jumpTo, event, decorated)
+        sys.settrace(tracer.trace)
+        output = []
+        if error is None:
+            func(output)
+        else:
+            with self.assertRaisesRegex(*error):
+                func(output)
+        sys.settrace(None)
+        self.compare_jump_output(expected, output)
 
-jump_simple_forwards.jump = (1, 3)
-jump_simple_forwards.output = [3]
+    def jump_test(jumpFrom, jumpTo, expected, error=None, event='line'):
+        """Decorator that creates a test that makes a jump
+        from one place to another in the following code.
+        """
+        def decorator(func):
+            @wraps(func)
+            def test(self):
+                self.run_test(func, jumpFrom, jumpTo, expected,
+                              error=error, event=event, decorated=True)
+            return test
+        return decorator
+
+    ## The first set of 'jump' tests are for things that are allowed:
+
+    @jump_test(1, 3, [3])
+    def test_jump_simple_forwards(output):
+        output.append(1)
+        output.append(2)
+        output.append(3)
 
-def jump_simple_backwards(output):
-    output.append(1)
-    output.append(2)
+    @jump_test(2, 1, [1, 1, 2])
+    def test_jump_simple_backwards(output):
+        output.append(1)
+        output.append(2)
 
-jump_simple_backwards.jump = (2, 1)
-jump_simple_backwards.output = [1, 1, 2]
+    @jump_test(3, 5, [2, 5])
+    def test_jump_out_of_block_forwards(output):
+        for i in 1, 2:
+            output.append(2)
+            for j in [3]:  # Also tests jumping over a block
+                output.append(4)
+        output.append(5)
+
+    @jump_test(6, 1, [1, 3, 5, 1, 3, 5, 6, 7])
+    def test_jump_out_of_block_backwards(output):
+        output.append(1)
+        for i in [1]:
+            output.append(3)
+            for j in [2]:  # Also tests jumping over a block
+                output.append(5)
+            output.append(6)
+        output.append(7)
+
+    @jump_test(1, 2, [3])
+    def test_jump_to_codeless_line(output):
+        output.append(1)
+        # Jumping to this line should skip to the next one.
+        output.append(3)
 
-def jump_out_of_block_forwards(output):
-    for i in 1, 2:
+    @jump_test(2, 2, [1, 2, 3])
+    def test_jump_to_same_line(output):
+        output.append(1)
         output.append(2)
-        for j in [3]:  # Also tests jumping over a block
+        output.append(3)
+
+    # Tests jumping within a finally block, and over one.
+    @jump_test(4, 9, [2, 9])
+    def test_jump_in_nested_finally(output):
+        try:
+            output.append(2)
+        finally:
             output.append(4)
-    output.append(5)
+            try:
+                output.append(6)
+            finally:
+                output.append(8)
+            output.append(9)
 
-jump_out_of_block_forwards.jump = (3, 5)
-jump_out_of_block_forwards.output = [2, 5]
+    @jump_test(6, 7, [2, 7], (ZeroDivisionError, ''))
+    def test_jump_in_nested_finally_2(output):
+        try:
+            output.append(2)
+            1/0
+            return
+        finally:
+            output.append(6)
+            output.append(7)
+        output.append(8)
 
-def jump_out_of_block_backwards(output):
-    output.append(1)
-    for i in [1]:
+    @jump_test(6, 11, [2, 11], (ZeroDivisionError, ''))
+    def test_jump_in_nested_finally_3(output):
+        try:
+            output.append(2)
+            1/0
+            return
+        finally:
+            output.append(6)
+            try:
+                output.append(8)
+            finally:
+                output.append(10)
+            output.append(11)
+        output.append(12)
+
+    @jump_test(3, 4, [1, 4])
+    def test_jump_infinite_while_loop(output):
+        output.append(1)
+        while True:
+            output.append(3)
+        output.append(4)
+
+    @jump_test(2, 3, [1, 3])
+    def test_jump_forwards_out_of_with_block(output):
+        with tracecontext(output, 1):
+            output.append(2)
         output.append(3)
-        for j in [2]:  # Also tests jumping over a block
-            output.append(5)
-        output.append(6)
-    output.append(7)
 
-jump_out_of_block_backwards.jump = (6, 1)
-jump_out_of_block_backwards.output = [1, 3, 5, 1, 3, 5, 6, 7]
+    @jump_test(3, 1, [1, 2, 1, 2, 3, -2])
+    def test_jump_backwards_out_of_with_block(output):
+        output.append(1)
+        with tracecontext(output, 2):
+            output.append(3)
 
-def jump_to_codeless_line(output):
-    output.append(1)
-    # Jumping to this line should skip to the next one.
-    output.append(3)
+    @jump_test(2, 5, [5])
+    def test_jump_forwards_out_of_try_finally_block(output):
+        try:
+            output.append(2)
+        finally:
+            output.append(4)
+        output.append(5)
 
-jump_to_codeless_line.jump = (1, 2)
-jump_to_codeless_line.output = [3]
+    @jump_test(3, 1, [1, 1, 3, 5])
+    def test_jump_backwards_out_of_try_finally_block(output):
+        output.append(1)
+        try:
+            output.append(3)
+        finally:
+            output.append(5)
 
-def jump_to_same_line(output):
-    output.append(1)
-    output.append(2)
-    output.append(3)
+    @jump_test(2, 6, [6])
+    def test_jump_forwards_out_of_try_except_block(output):
+        try:
+            output.append(2)
+        except:
+            output.append(4)
+            raise
+        output.append(6)
 
-jump_to_same_line.jump = (2, 2)
-jump_to_same_line.output = [1, 2, 3]
+    @jump_test(3, 1, [1, 1, 3])
+    def test_jump_backwards_out_of_try_except_block(output):
+        output.append(1)
+        try:
+            output.append(3)
+        except:
+            output.append(5)
+            raise
 
-# Tests jumping within a finally block, and over one.
-def jump_in_nested_finally(output):
-    try:
-        output.append(2)
-    finally:
-        output.append(4)
+    @jump_test(5, 7, [4, 7, 8])
+    def test_jump_between_except_blocks(output):
         try:
+            1/0
+        except ZeroDivisionError:
+            output.append(4)
+            output.append(5)
+        except FloatingPointError:
+            output.append(7)
+        output.append(8)
+
+    @jump_test(5, 6, [4, 6, 7])
+    def test_jump_within_except_block(output):
+        try:
+            1/0
+        except:
+            output.append(4)
+            output.append(5)
             output.append(6)
-        finally:
-            output.append(8)
-        output.append(9)
+        output.append(7)
 
-jump_in_nested_finally.jump = (4, 9)
-jump_in_nested_finally.output = [2, 9]
+    @jump_test(2, 4, [1, 4, 5, -4])
+    def test_jump_across_with(output):
+        output.append(1)
+        with tracecontext(output, 2):
+            output.append(3)
+        with tracecontext(output, 4):
+            output.append(5)
 
-def jump_infinite_while_loop(output):
-    output.append(1)
-    while 1:
-        output.append(2)
-    output.append(3)
+    @jump_test(4, 5, [1, 3, 5, 6])
+    def test_jump_out_of_with_block_within_for_block(output):
+        output.append(1)
+        for i in [1]:
+            with tracecontext(output, 3):
+                output.append(4)
+            output.append(5)
+        output.append(6)
 
-jump_infinite_while_loop.jump = (3, 4)
-jump_infinite_while_loop.output = [1, 3]
+    @jump_test(4, 5, [1, 2, 3, 5, -2, 6])
+    def test_jump_out_of_with_block_within_with_block(output):
+        output.append(1)
+        with tracecontext(output, 2):
+            with tracecontext(output, 3):
+                output.append(4)
+            output.append(5)
+        output.append(6)
 
-# The second set of 'jump' tests are for things that are not allowed:
+    @jump_test(5, 6, [2, 4, 6, 7])
+    def test_jump_out_of_with_block_within_finally_block(output):
+        try:
+            output.append(2)
+        finally:
+            with tracecontext(output, 4):
+                output.append(5)
+            output.append(6)
+        output.append(7)
 
-def no_jump_too_far_forwards(output):
-    try:
-        output.append(2)
-        output.append(3)
-    except ValueError as e:
-        output.append('after' in str(e))
+    @jump_test(8, 11, [1, 3, 5, 11, 12])
+    def test_jump_out_of_complex_nested_blocks(output):
+        output.append(1)
+        for i in [1]:
+            output.append(3)
+            for j in [1, 2]:
+                output.append(5)
+                try:
+                    for k in [1, 2]:
+                        output.append(8)
+                finally:
+                    output.append(10)
+            output.append(11)
+        output.append(12)
+
+    @jump_test(3, 5, [1, 2, 5])
+    def test_jump_out_of_with_assignment(output):
+        output.append(1)
+        with tracecontext(output, 2) \
+                as x:
+            output.append(4)
+        output.append(5)
 
-no_jump_too_far_forwards.jump = (3, 6)
-no_jump_too_far_forwards.output = [2, True]
+    @jump_test(3, 6, [1, 6, 8, 9])
+    def test_jump_over_return_in_try_finally_block(output):
+        output.append(1)
+        try:
+            output.append(3)
+            if not output: # always false
+                return
+            output.append(6)
+        finally:
+            output.append(8)
+        output.append(9)
 
-def no_jump_too_far_backwards(output):
-    try:
-        output.append(2)
-        output.append(3)
-    except ValueError as e:
-        output.append('before' in str(e))
+    @jump_test(5, 8, [1, 3, 8, 10, 11, 13])
+    def test_jump_over_break_in_try_finally_block(output):
+        output.append(1)
+        while True:
+            output.append(3)
+            try:
+                output.append(5)
+                if not output: # always false
+                    break
+                output.append(8)
+            finally:
+                output.append(10)
+            output.append(11)
+            break
+        output.append(13)
+
+    @jump_test(1, 7, [7, 8])
+    def test_jump_over_for_block_before_else(output):
+        output.append(1)
+        if not output:  # always false
+            for i in [3]:
+                output.append(4)
+        else:
+            output.append(6)
+            output.append(7)
+        output.append(8)
 
-no_jump_too_far_backwards.jump = (3, -1)
-no_jump_too_far_backwards.output = [2, True]
+    # The second set of 'jump' tests are for things that are not allowed:
 
-# Test each kind of 'except' line.
-def no_jump_to_except_1(output):
-    try:
+    @jump_test(2, 3, [1], (ValueError, 'after'))
+    def test_no_jump_too_far_forwards(output):
+        output.append(1)
         output.append(2)
-    except:
-        e = sys.exc_info()[1]
-        output.append('except' in str(e))
-
-no_jump_to_except_1.jump = (2, 3)
-no_jump_to_except_1.output = [True]
 
-def no_jump_to_except_2(output):
-    try:
+    @jump_test(2, -2, [1], (ValueError, 'before'))
+    def test_no_jump_too_far_backwards(output):
+        output.append(1)
         output.append(2)
-    except ValueError:
-        e = sys.exc_info()[1]
-        output.append('except' in str(e))
 
-no_jump_to_except_2.jump = (2, 3)
-no_jump_to_except_2.output = [True]
+    # Test each kind of 'except' line.
+    @jump_test(2, 3, [4], (ValueError, 'except'))
+    def test_no_jump_to_except_1(output):
+        try:
+            output.append(2)
+        except:
+            output.append(4)
+            raise
 
-def no_jump_to_except_3(output):
-    try:
-        output.append(2)
-    except ValueError as e:
-        output.append('except' in str(e))
+    @jump_test(2, 3, [4], (ValueError, 'except'))
+    def test_no_jump_to_except_2(output):
+        try:
+            output.append(2)
+        except ValueError:
+            output.append(4)
+            raise
 
-no_jump_to_except_3.jump = (2, 3)
-no_jump_to_except_3.output = [True]
+    @jump_test(2, 3, [4], (ValueError, 'except'))
+    def test_no_jump_to_except_3(output):
+        try:
+            output.append(2)
+        except ValueError as e:
+            output.append(4)
+            raise e
 
-def no_jump_to_except_4(output):
-    try:
-        output.append(2)
-    except (ValueError, RuntimeError) as e:
-        output.append('except' in str(e))
+    @jump_test(2, 3, [4], (ValueError, 'except'))
+    def test_no_jump_to_except_4(output):
+        try:
+            output.append(2)
+        except (ValueError, RuntimeError) as e:
+            output.append(4)
+            raise e
+
+    @jump_test(1, 3, [], (ValueError, 'into'))
+    def test_no_jump_forwards_into_for_block(output):
+        output.append(1)
+        for i in 1, 2:
+            output.append(3)
 
-no_jump_to_except_4.jump = (2, 3)
-no_jump_to_except_4.output = [True]
+    @jump_test(3, 2, [2, 2], (ValueError, 'into'))
+    def test_no_jump_backwards_into_for_block(output):
+        for i in 1, 2:
+            output.append(2)
+        output.append(3)
 
-def no_jump_forwards_into_block(output):
-    try:
+    @jump_test(2, 4, [], (ValueError, 'into'))
+    def test_no_jump_forwards_into_while_block(output):
+        i = 1
         output.append(2)
-        for i in 1, 2:
+        while i <= 2:
             output.append(4)
-    except ValueError as e:
-        output.append('into' in str(e))
+            i += 1
 
-no_jump_forwards_into_block.jump = (2, 4)
-no_jump_forwards_into_block.output = [True]
+    @jump_test(5, 3, [3, 3], (ValueError, 'into'))
+    def test_no_jump_backwards_into_while_block(output):
+        i = 1
+        while i <= 2:
+            output.append(3)
+            i += 1
+        output.append(5)
 
-def no_jump_backwards_into_block(output):
-    try:
-        for i in 1, 2:
+    @jump_test(1, 3, [], (ValueError, 'into'))
+    def test_no_jump_forwards_into_with_block(output):
+        output.append(1)
+        with tracecontext(output, 2):
             output.append(3)
-        output.append(4)
-    except ValueError as e:
-        output.append('into' in str(e))
 
-no_jump_backwards_into_block.jump = (4, 3)
-no_jump_backwards_into_block.output = [3, 3, True]
+    @jump_test(3, 2, [1, 2, -1], (ValueError, 'into'))
+    def test_no_jump_backwards_into_with_block(output):
+        with tracecontext(output, 1):
+            output.append(2)
+        output.append(3)
 
-def no_jump_into_finally_block(output):
-    try:
+    @jump_test(1, 3, [], (ValueError, 'into'))
+    def test_no_jump_forwards_into_try_finally_block(output):
+        output.append(1)
         try:
             output.append(3)
-            x = 1
         finally:
-            output.append(6)
-    except ValueError as e:
-        output.append('finally' in str(e))
+            output.append(5)
 
-no_jump_into_finally_block.jump = (4, 6)
-no_jump_into_finally_block.output = [3, 6, True]  # The 'finally' still runs
+    @jump_test(5, 2, [2, 4], (ValueError, 'into'))
+    def test_no_jump_backwards_into_try_finally_block(output):
+        try:
+            output.append(2)
+        finally:
+            output.append(4)
+        output.append(5)
 
-def no_jump_out_of_finally_block(output):
-    try:
+    @jump_test(1, 3, [], (ValueError, 'into'))
+    def test_no_jump_forwards_into_try_except_block(output):
+        output.append(1)
         try:
             output.append(3)
-        finally:
+        except:
             output.append(5)
-            output.append(6)
-    except ValueError as e:
-        output.append('finally' in str(e))
-
-no_jump_out_of_finally_block.jump = (5, 1)
-no_jump_out_of_finally_block.output = [3, True]
+            raise
 
-# This verifies the line-numbers-must-be-integers rule.
-def no_jump_to_non_integers(output):
-    try:
-        output.append(2)
-    except ValueError as e:
-        output.append('integer' in str(e))
+    @jump_test(6, 2, [2], (ValueError, 'into'))
+    def test_no_jump_backwards_into_try_except_block(output):
+        try:
+            output.append(2)
+        except:
+            output.append(4)
+            raise
+        output.append(6)
 
-no_jump_to_non_integers.jump = (2, "Spam")
-no_jump_to_non_integers.output = [True]
+    # 'except' with a variable creates an implicit finally block
+    @jump_test(5, 7, [4], (ValueError, 'into'))
+    def test_no_jump_between_except_blocks_2(output):
+        try:
+            1/0
+        except ZeroDivisionError:
+            output.append(4)
+            output.append(5)
+        except FloatingPointError as e:
+            output.append(7)
+        output.append(8)
 
-def jump_across_with(output):
-    with open(support.TESTFN, "wb") as fp:
-        pass
-    with open(support.TESTFN, "wb") as fp:
-        pass
-jump_across_with.jump = (1, 3)
-jump_across_with.output = []
+    @jump_test(3, 6, [2, 5, 6], (ValueError, 'finally'))
+    def test_no_jump_into_finally_block(output):
+        try:
+            output.append(2)
+            output.append(3)
+        finally:  # still executed if the jump is failed
+            output.append(5)
+            output.append(6)
+        output.append(7)
 
-# This verifies that you can't set f_lineno via _getframe or similar
-# trickery.
-def no_jump_without_trace_function():
-    try:
-        previous_frame = sys._getframe().f_back
-        previous_frame.f_lineno = previous_frame.f_lineno
-    except ValueError as e:
-        # This is the exception we wanted; make sure the error message
-        # talks about trace functions.
-        if 'trace' not in str(e):
-            raise
-    else:
-        # Something's wrong - the expected exception wasn't raised.
-        raise RuntimeError("Trace-function-less jump failed to fail")
+    @jump_test(1, 5, [], (ValueError, 'finally'))
+    def test_no_jump_into_finally_block_2(output):
+        output.append(1)
+        try:
+            output.append(3)
+        finally:
+            output.append(5)
 
+    @jump_test(5, 1, [1, 3], (ValueError, 'finally'))
+    def test_no_jump_out_of_finally_block(output):
+        output.append(1)
+        try:
+            output.append(3)
+        finally:
+            output.append(5)
 
-class JumpTestCase(unittest.TestCase):
-    def setUp(self):
-        self.addCleanup(sys.settrace, sys.gettrace())
-        sys.settrace(None)
+    @jump_test(3, 5, [1, 2, -2], (ValueError, 'into'))
+    def test_no_jump_between_with_blocks(output):
+        output.append(1)
+        with tracecontext(output, 2):
+            output.append(3)
+        with tracecontext(output, 4):
+            output.append(5)
 
-    def compare_jump_output(self, expected, received):
-        if received != expected:
-            self.fail( "Outputs don't match:\n" +
-                       "Expected: " + repr(expected) + "\n" +
-                       "Received: " + repr(received))
+    @jump_test(7, 4, [1, 6], (ValueError, 'into'))
+    def test_no_jump_into_for_block_before_else(output):
+        output.append(1)
+        if not output:  # always false
+            for i in [3]:
+                output.append(4)
+        else:
+            output.append(6)
+            output.append(7)
+        output.append(8)
 
-    def run_test(self, func):
-        tracer = JumpTracer(func)
-        sys.settrace(tracer.trace)
-        output = []
-        func(output)
-        sys.settrace(None)
-        self.compare_jump_output(func.output, output)
+    def test_no_jump_to_non_integers(self):
+        self.run_test(no_jump_to_non_integers, 2, "Spam", [True])
 
-    def test_01_jump_simple_forwards(self):
-        self.run_test(jump_simple_forwards)
-    def test_02_jump_simple_backwards(self):
-        self.run_test(jump_simple_backwards)
-    def test_03_jump_out_of_block_forwards(self):
-        self.run_test(jump_out_of_block_forwards)
-    def test_04_jump_out_of_block_backwards(self):
-        self.run_test(jump_out_of_block_backwards)
-    def test_05_jump_to_codeless_line(self):
-        self.run_test(jump_to_codeless_line)
-    def test_06_jump_to_same_line(self):
-        self.run_test(jump_to_same_line)
-    def test_07_jump_in_nested_finally(self):
-        self.run_test(jump_in_nested_finally)
-    def test_jump_infinite_while_loop(self):
-        self.run_test(jump_infinite_while_loop)
-    def test_08_no_jump_too_far_forwards(self):
-        self.run_test(no_jump_too_far_forwards)
-    def test_09_no_jump_too_far_backwards(self):
-        self.run_test(no_jump_too_far_backwards)
-    def test_10_no_jump_to_except_1(self):
-        self.run_test(no_jump_to_except_1)
-    def test_11_no_jump_to_except_2(self):
-        self.run_test(no_jump_to_except_2)
-    def test_12_no_jump_to_except_3(self):
-        self.run_test(no_jump_to_except_3)
-    def test_13_no_jump_to_except_4(self):
-        self.run_test(no_jump_to_except_4)
-    def test_14_no_jump_forwards_into_block(self):
-        self.run_test(no_jump_forwards_into_block)
-    def test_15_no_jump_backwards_into_block(self):
-        self.run_test(no_jump_backwards_into_block)
-    def test_16_no_jump_into_finally_block(self):
-        self.run_test(no_jump_into_finally_block)
-    def test_17_no_jump_out_of_finally_block(self):
-        self.run_test(no_jump_out_of_finally_block)
-    def test_18_no_jump_to_non_integers(self):
-        self.run_test(no_jump_to_non_integers)
-    def test_19_no_jump_without_trace_function(self):
+    def test_no_jump_without_trace_function(self):
         # Must set sys.settrace(None) in setUp(), else condition is not
         # triggered.
         no_jump_without_trace_function()
-    def test_jump_across_with(self):
-        self.addCleanup(support.unlink, support.TESTFN)
-        self.run_test(jump_across_with)
 
-    def test_20_large_function(self):
+    def test_large_function(self):
         d = {}
         exec("""def f(output):        # line 0
             x = 0                     # line 1
@@ -817,10 +1053,7 @@ class JumpTestCase(unittest.TestCase):
             output.append(x)          # line 1007
             return""" % ('\n' * 1000,), d)
         f = d['f']
-
-        f.jump = (2, 1007)
-        f.output = [0]
-        self.run_test(f)
+        self.run_test(f, 2, 1007, [0])
 
     def test_jump_to_firstlineno(self):
         # This tests that PDB can jump back to the first line in a
@@ -834,21 +1067,43 @@ output.append(4)
 """, "<fake module>", "exec")
         class fake_function:
             __code__ = code
-            jump = (2, 0)
-        tracer = JumpTracer(fake_function)
+        tracer = JumpTracer(fake_function, 2, 0)
         sys.settrace(tracer.trace)
         namespace = {"output": []}
         exec(code, namespace)
         sys.settrace(None)
         self.compare_jump_output([2, 3, 2, 3, 4], namespace["output"])
 
+    @jump_test(2, 3, [1], event='call', error=(ValueError, "can't jump from"
+               " the 'call' trace event of a new frame"))
+    def test_no_jump_from_call(output):
+        output.append(1)
+        def nested():
+            output.append(3)
+        nested()
+        output.append(5)
+
+    @jump_test(2, 1, [1], event='return', error=(ValueError,
+               "can only jump from a 'line' trace event"))
+    def test_no_jump_from_return_event(output):
+        output.append(1)
+        return
+
+    @jump_test(2, 1, [1], event='exception', error=(ValueError,
+               "can only jump from a 'line' trace event"))
+    def test_no_jump_from_exception_event(output):
+        output.append(1)
+        1 / 0
+
+    @jump_test(3, 2, [2], event='return', error=(ValueError,
+               "can't jump from a yield statement"))
+    def test_no_jump_from_yield(output):
+        def gen():
+            output.append(2)
+            yield 3
+        next(gen())
+        output.append(5)
 
-def test_main():
-    support.run_unittest(
-        TraceTestCase,
-        RaisingTraceFuncTestCase,
-        JumpTestCase
-    )
 
 if __name__ == "__main__":
-    test_main()
+    unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_tarfile.py Python-3.6.5/Lib/test/test_tarfile.py
--- Python-3.6.3/Lib/test/test_tarfile.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_tarfile.py	2018-03-28 11:19:31.000000000 +0200
@@ -2146,6 +2146,14 @@ class MiscTest(unittest.TestCase):
         self.assertEqual(tarfile.itn(-0x100000000000000),
                          b"\xff\x00\x00\x00\x00\x00\x00\x00")
 
+        # Issue 32713: Test if itn() supports float values outside the
+        # non-GNU format range
+        self.assertEqual(tarfile.itn(-100.0, format=tarfile.GNU_FORMAT),
+                         b"\xff\xff\xff\xff\xff\xff\xff\x9c")
+        self.assertEqual(tarfile.itn(8 ** 12 + 0.0, format=tarfile.GNU_FORMAT),
+                         b"\x80\x00\x00\x10\x00\x00\x00\x00")
+        self.assertEqual(tarfile.nti(tarfile.itn(-0.1, format=tarfile.GNU_FORMAT)), 0)
+
     def test_number_field_limits(self):
         with self.assertRaises(ValueError):
             tarfile.itn(-1, 8, tarfile.USTAR_FORMAT)
diff -urpN Python-3.6.3/Lib/test/test_tcl.py Python-3.6.5/Lib/test/test_tcl.py
--- Python-3.6.3/Lib/test/test_tcl.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_tcl.py	2018-03-28 11:19:31.000000000 +0200
@@ -662,32 +662,44 @@ class BigmemTclTest(unittest.TestCase):
     @support.bigmemtest(size=INT_MAX + 1, memuse=5, dry_run=False)
     def test_huge_string_call(self, size):
         value = ' ' * size
-        self.assertRaises(OverflowError, self.interp.call, 'set', '_', value)
+        self.assertRaises(OverflowError, self.interp.call, 'string', 'index', value, 0)
 
     @support.cpython_only
     @unittest.skipUnless(INT_MAX < PY_SSIZE_T_MAX, "needs UINT_MAX < SIZE_MAX")
-    @support.bigmemtest(size=INT_MAX + 1, memuse=9, dry_run=False)
+    @support.bigmemtest(size=INT_MAX + 1, memuse=2, dry_run=False)
     def test_huge_string_builtins(self, size):
+        tk = self.interp.tk
         value = '1' + ' ' * size
-        self.assertRaises(OverflowError, self.interp.tk.getint, value)
-        self.assertRaises(OverflowError, self.interp.tk.getdouble, value)
-        self.assertRaises(OverflowError, self.interp.tk.getboolean, value)
-        self.assertRaises(OverflowError, self.interp.eval, value)
-        self.assertRaises(OverflowError, self.interp.evalfile, value)
-        self.assertRaises(OverflowError, self.interp.record, value)
-        self.assertRaises(OverflowError, self.interp.adderrorinfo, value)
-        self.assertRaises(OverflowError, self.interp.setvar, value, 'x', 'a')
-        self.assertRaises(OverflowError, self.interp.setvar, 'x', value, 'a')
-        self.assertRaises(OverflowError, self.interp.unsetvar, value)
-        self.assertRaises(OverflowError, self.interp.unsetvar, 'x', value)
-        self.assertRaises(OverflowError, self.interp.adderrorinfo, value)
-        self.assertRaises(OverflowError, self.interp.exprstring, value)
-        self.assertRaises(OverflowError, self.interp.exprlong, value)
-        self.assertRaises(OverflowError, self.interp.exprboolean, value)
-        self.assertRaises(OverflowError, self.interp.splitlist, value)
-        self.assertRaises(OverflowError, self.interp.split, value)
-        self.assertRaises(OverflowError, self.interp.createcommand, value, max)
-        self.assertRaises(OverflowError, self.interp.deletecommand, value)
+        self.assertRaises(OverflowError, tk.getint, value)
+        self.assertRaises(OverflowError, tk.getdouble, value)
+        self.assertRaises(OverflowError, tk.getboolean, value)
+        self.assertRaises(OverflowError, tk.eval, value)
+        self.assertRaises(OverflowError, tk.evalfile, value)
+        self.assertRaises(OverflowError, tk.record, value)
+        self.assertRaises(OverflowError, tk.adderrorinfo, value)
+        self.assertRaises(OverflowError, tk.setvar, value, 'x', 'a')
+        self.assertRaises(OverflowError, tk.setvar, 'x', value, 'a')
+        self.assertRaises(OverflowError, tk.unsetvar, value)
+        self.assertRaises(OverflowError, tk.unsetvar, 'x', value)
+        self.assertRaises(OverflowError, tk.adderrorinfo, value)
+        self.assertRaises(OverflowError, tk.exprstring, value)
+        self.assertRaises(OverflowError, tk.exprlong, value)
+        self.assertRaises(OverflowError, tk.exprboolean, value)
+        self.assertRaises(OverflowError, tk.splitlist, value)
+        self.assertRaises(OverflowError, tk.split, value)
+        self.assertRaises(OverflowError, tk.createcommand, value, max)
+        self.assertRaises(OverflowError, tk.deletecommand, value)
+
+    @support.cpython_only
+    @unittest.skipUnless(INT_MAX < PY_SSIZE_T_MAX, "needs UINT_MAX < SIZE_MAX")
+    @support.bigmemtest(size=INT_MAX + 1, memuse=6, dry_run=False)
+    def test_huge_string_builtins2(self, size):
+        # These commands require larger memory for possible error messages
+        tk = self.interp.tk
+        value = '1' + ' ' * size
+        self.assertRaises(OverflowError, tk.evalfile, value)
+        self.assertRaises(OverflowError, tk.unsetvar, value)
+        self.assertRaises(OverflowError, tk.unsetvar, 'x', value)
 
 
 def setUpModule():
diff -urpN Python-3.6.3/Lib/test/test_threading.py Python-3.6.5/Lib/test/test_threading.py
--- Python-3.6.3/Lib/test/test_threading.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_threading.py	2018-03-28 11:19:31.000000000 +0200
@@ -542,6 +542,35 @@ class ThreadTests(BaseTestCase):
         self.assertEqual(err, b"")
         self.assertEqual(data, "Thread-1\nTrue\nTrue\n")
 
+    def test_main_thread_during_shutdown(self):
+        # bpo-31516: current_thread() should still point to the main thread
+        # at shutdown
+        code = """if 1:
+            import gc, threading
+
+            main_thread = threading.current_thread()
+            assert main_thread is threading.main_thread()  # sanity check
+
+            class RefCycle:
+                def __init__(self):
+                    self.cycle = self
+
+                def __del__(self):
+                    print("GC:",
+                          threading.current_thread() is main_thread,
+                          threading.main_thread() is main_thread,
+                          threading.enumerate() == [main_thread])
+
+            RefCycle()
+            gc.collect()  # sanity check
+            x = RefCycle()
+        """
+        _, out, err = assert_python_ok("-c", code)
+        data = out.decode()
+        self.assertEqual(err, b"")
+        self.assertEqual(data.splitlines(),
+                         ["GC: True True True"] * 2)
+
     def test_tstate_lock(self):
         # Test an implementation detail of Thread objects.
         started = _thread.allocate_lock()
diff -urpN Python-3.6.3/Lib/test/test_time.py Python-3.6.5/Lib/test/test_time.py
--- Python-3.6.3/Lib/test/test_time.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_time.py	2018-03-28 11:19:31.000000000 +0200
@@ -36,6 +36,8 @@ class _PyTime(enum.IntEnum):
     ROUND_CEILING = 1
     # Round to nearest with ties going to nearest even integer
     ROUND_HALF_EVEN = 2
+    # Round away from zero
+    ROUND_UP = 3
 
 # Rounding modes supported by PyTime
 ROUNDING_MODES = (
@@ -43,6 +45,7 @@ ROUNDING_MODES = (
     (_PyTime.ROUND_FLOOR, decimal.ROUND_FLOOR),
     (_PyTime.ROUND_CEILING, decimal.ROUND_CEILING),
     (_PyTime.ROUND_HALF_EVEN, decimal.ROUND_HALF_EVEN),
+    (_PyTime.ROUND_UP, decimal.ROUND_UP),
 )
 
 
diff -urpN Python-3.6.3/Lib/test/test_tokenize.py Python-3.6.5/Lib/test/test_tokenize.py
--- Python-3.6.3/Lib/test/test_tokenize.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_tokenize.py	2018-03-28 11:19:31.000000000 +0200
@@ -632,6 +632,11 @@ def"', """\
     NUMBER     '1'           (1, 8) (1, 9)
     """)
 
+        self.check_tokenize("async\\", """\
+    ERRORTOKEN '\\\\'          (1, 5) (1, 6)
+    NAME       'async'       (1, 0) (1, 5)
+    """)
+
         self.check_tokenize("a = (async = 1)", """\
     NAME       'a'           (1, 0) (1, 1)
     OP         '='           (1, 2) (1, 3)
diff -urpN Python-3.6.3/Lib/test/test_tools/test_i18n.py Python-3.6.5/Lib/test/test_tools/test_i18n.py
--- Python-3.6.3/Lib/test/test_tools/test_i18n.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_tools/test_i18n.py	2018-03-28 11:19:31.000000000 +0200
@@ -2,6 +2,7 @@
 
 import os
 import unittest
+import textwrap
 
 from test.support.script_helper import assert_python_ok
 from test.test_tools import skip_if_missing, toolsdir
@@ -27,6 +28,41 @@ class Test_pygettext(unittest.TestCase):
             headers[key] = val.strip()
         return headers
 
+    def get_msgids(self, data):
+        """ utility: return all msgids in .po file as a list of strings """
+        msgids = []
+        reading_msgid = False
+        cur_msgid = []
+        for line in data.split('\n'):
+            if reading_msgid:
+                if line.startswith('"'):
+                    cur_msgid.append(line.strip('"'))
+                else:
+                    msgids.append('\n'.join(cur_msgid))
+                    cur_msgid = []
+                    reading_msgid = False
+                    continue
+            if line.startswith('msgid '):
+                line = line[len('msgid '):]
+                cur_msgid.append(line.strip('"'))
+                reading_msgid = True
+        else:
+            if reading_msgid:
+                msgids.append('\n'.join(cur_msgid))
+
+        return msgids
+
+    def extract_docstrings_from_str(self, module_content):
+        """ utility: return all msgids extracted from module_content """
+        filename = 'test_docstrings.py'
+        with temp_cwd(None) as cwd:
+            with open(filename, 'w') as fp:
+                fp.write(module_content)
+            assert_python_ok(self.script, '-D', filename)
+            with open('messages.pot') as fp:
+                data = fp.read()
+        return self.get_msgids(data)
+
     def test_header(self):
         """Make sure the required fields are in the header, according to:
            http://www.gnu.org/software/gettext/manual/gettext.html#Header-Entry
@@ -70,3 +106,55 @@ class Test_pygettext(unittest.TestCase):
 
             # This will raise if the date format does not exactly match.
             datetime.strptime(creationDate, '%Y-%m-%d %H:%M%z')
+
+    def test_funcdocstring_annotated_args(self):
+        """ Test docstrings for functions with annotated args """
+        msgids = self.extract_docstrings_from_str(textwrap.dedent('''\
+        def foo(bar: str):
+            """doc"""
+        '''))
+        self.assertIn('doc', msgids)
+
+    def test_funcdocstring_annotated_return(self):
+        """ Test docstrings for functions with annotated return type """
+        msgids = self.extract_docstrings_from_str(textwrap.dedent('''\
+        def foo(bar) -> str:
+            """doc"""
+        '''))
+        self.assertIn('doc', msgids)
+
+    def test_funcdocstring_defvalue_args(self):
+        """ Test docstring for functions with default arg values """
+        msgids = self.extract_docstrings_from_str(textwrap.dedent('''\
+        def foo(bar=()):
+            """doc"""
+        '''))
+        self.assertIn('doc', msgids)
+
+    def test_funcdocstring_multiple_funcs(self):
+        """ Test docstring extraction for multiple functions combining
+        annotated args, annotated return types and default arg values
+        """
+        msgids = self.extract_docstrings_from_str(textwrap.dedent('''\
+        def foo1(bar: tuple=()) -> str:
+            """doc1"""
+
+        def foo2(bar: List[1:2]) -> (lambda x: x):
+            """doc2"""
+
+        def foo3(bar: 'func'=lambda x: x) -> {1: 2}:
+            """doc3"""
+        '''))
+        self.assertIn('doc1', msgids)
+        self.assertIn('doc2', msgids)
+        self.assertIn('doc3', msgids)
+
+    def test_classdocstring_early_colon(self):
+        """ Test docstring extraction for a class with colons occuring within
+        the parentheses.
+        """
+        msgids = self.extract_docstrings_from_str(textwrap.dedent('''\
+        class D(L[1:2], F({1: 2}), metaclass=M(lambda x: x)):
+            """doc"""
+        '''))
+        self.assertIn('doc', msgids)
diff -urpN Python-3.6.3/Lib/test/test_tools/test_unparse.py Python-3.6.5/Lib/test/test_tools/test_unparse.py
--- Python-3.6.3/Lib/test/test_tools/test_unparse.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_tools/test_unparse.py	2018-03-28 11:19:31.000000000 +0200
@@ -263,15 +263,18 @@ class UnparseTestCase(ASTTestCase):
 
 class DirectoryTestCase(ASTTestCase):
     """Test roundtrip behaviour on all files in Lib and Lib/test."""
+    NAMES = None
 
     # test directories, relative to the root of the distribution
     test_directories = 'Lib', os.path.join('Lib', 'test')
 
-    def test_files(self):
-        # get names of files to test
+    @classmethod
+    def get_names(cls):
+        if cls.NAMES is not None:
+            return cls.NAMES
 
         names = []
-        for d in self.test_directories:
+        for d in cls.test_directories:
             test_dir = os.path.join(basepath, d)
             for n in os.listdir(test_dir):
                 if n.endswith('.py') and not n.startswith('bad'):
@@ -280,6 +283,14 @@ class DirectoryTestCase(ASTTestCase):
         # Test limited subset of files unless the 'cpu' resource is specified.
         if not test.support.is_resource_enabled("cpu"):
             names = random.sample(names, 10)
+        # bpo-31174: Store the names sample to always test the same files.
+        # It prevents false alarms when hunting reference leaks.
+        cls.NAMES = names
+        return names
+
+    def test_files(self):
+        # get names of files to test
+        names = self.get_names()
 
         for filename in names:
             if test.support.verbose:
diff -urpN Python-3.6.3/Lib/test/test_trace.py Python-3.6.5/Lib/test/test_trace.py
--- Python-3.6.3/Lib/test/test_trace.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_trace.py	2018-03-28 11:19:31.000000000 +0200
@@ -387,5 +387,15 @@ class TestCommandLine(unittest.TestCase)
             status, stdout, stderr = assert_python_ok('-m', 'trace', '-l', TESTFN)
             self.assertIn(b'functions called:', stdout)
 
+    def test_sys_argv_list(self):
+        with open(TESTFN, 'w') as fd:
+            self.addCleanup(unlink, TESTFN)
+            fd.write("import sys\n")
+            fd.write("print(type(sys.argv))\n")
+
+        status, direct_stdout, stderr = assert_python_ok(TESTFN)
+        status, trace_stdout, stderr = assert_python_ok('-m', 'trace', '-l', TESTFN)
+        self.assertIn(direct_stdout.strip(), trace_stdout)
+
 if __name__ == '__main__':
     unittest.main()
diff -urpN Python-3.6.3/Lib/test/test_traceback.py Python-3.6.5/Lib/test/test_traceback.py
--- Python-3.6.3/Lib/test/test_traceback.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_traceback.py	2018-03-28 11:19:31.000000000 +0200
@@ -443,6 +443,33 @@ class TracebackFormatTests(unittest.Test
             '    return traceback.format_stack()\n' % (__file__, lineno+1),
         ])
 
+    @cpython_only
+    def test_unhashable(self):
+        from _testcapi import exception_print
+
+        class UnhashableException(Exception):
+            def __eq__(self, other):
+                return True
+
+        ex1 = UnhashableException('ex1')
+        ex2 = UnhashableException('ex2')
+        try:
+            raise ex2 from ex1
+        except UnhashableException:
+            try:
+                raise ex1
+            except UnhashableException:
+                exc_type, exc_val, exc_tb = sys.exc_info()
+
+        with captured_output("stderr") as stderr_f:
+            exception_print(exc_val)
+
+        tb = stderr_f.getvalue().strip().splitlines()
+        self.assertEqual(11, len(tb))
+        self.assertEqual(context_message.strip(), tb[5])
+        self.assertIn('UnhashableException: ex2', tb[3])
+        self.assertIn('UnhashableException: ex1', tb[10])
+
 
 cause_message = (
     "\nThe above exception was the direct cause "
@@ -994,6 +1021,25 @@ class TestTracebackException(unittest.Te
         self.assertEqual(exc_info[0], exc.exc_type)
         self.assertEqual(str(exc_info[1]), str(exc))
 
+    def test_unhashable(self):
+        class UnhashableException(Exception):
+            def __eq__(self, other):
+                return True
+
+        ex1 = UnhashableException('ex1')
+        ex2 = UnhashableException('ex2')
+        try:
+            raise ex2 from ex1
+        except UnhashableException:
+            try:
+                raise ex1
+            except UnhashableException:
+                exc_info = sys.exc_info()
+        exc = traceback.TracebackException(*exc_info)
+        formatted = list(exc.format())
+        self.assertIn('UnhashableException: ex2\n', formatted[2])
+        self.assertIn('UnhashableException: ex1\n', formatted[6])
+
     def test_limit(self):
         def recurse(n):
             if n:
diff -urpN Python-3.6.3/Lib/test/test_types.py Python-3.6.5/Lib/test/test_types.py
--- Python-3.6.3/Lib/test/test_types.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_types.py	2018-03-28 11:19:31.000000000 +0200
@@ -846,6 +846,28 @@ class ClassCreationTests(unittest.TestCa
         self.assertIs(ns, expected_ns)
         self.assertEqual(len(kwds), 0)
 
+    def test_bad___prepare__(self):
+        # __prepare__() must return a mapping.
+        class BadMeta(type):
+            @classmethod
+            def __prepare__(*args):
+                return None
+        with self.assertRaisesRegex(TypeError,
+                                    r'^BadMeta\.__prepare__\(\) must '
+                                    r'return a mapping, not NoneType$'):
+            class Foo(metaclass=BadMeta):
+                pass
+        # Also test the case in which the metaclass is not a type.
+        class BadMeta:
+            @classmethod
+            def __prepare__(*args):
+                return None
+        with self.assertRaisesRegex(TypeError,
+                                    r'^<metaclass>\.__prepare__\(\) must '
+                                    r'return a mapping, not NoneType$'):
+            class Bar(metaclass=BadMeta()):
+                pass
+
     def test_metaclass_derivation(self):
         # issue1294232: correct metaclass calculation
         new_calls = []  # to check the order of __new__ calls
@@ -1029,6 +1051,8 @@ class SimpleNamespaceTests(unittest.Test
 
         with self.assertRaises(TypeError):
             types.SimpleNamespace(1, 2, 3)
+        with self.assertRaises(TypeError):
+            types.SimpleNamespace(**{1: 2})
 
         self.assertEqual(len(ns1.__dict__), 0)
         self.assertEqual(vars(ns1), {})
diff -urpN Python-3.6.3/Lib/test/test_typing.py Python-3.6.5/Lib/test/test_typing.py
--- Python-3.6.3/Lib/test/test_typing.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_typing.py	2018-03-28 11:19:31.000000000 +0200
@@ -37,6 +37,9 @@ except ImportError:
     from test import mod_generics_cache
 
 
+PY36 = sys.version_info[:2] >= (3, 6)
+
+
 class BaseTestCase(TestCase):
 
     def assertIsSubclass(self, cls, class_or_tuple, msg=None):
@@ -633,6 +636,27 @@ class GenericTests(BaseTestCase):
         with self.assertRaises(TypeError):
             Generic[T, S, T]
 
+    @skipUnless(PY36, "__init_subclass__ support required")
+    def test_init_subclass(self):
+        class X(typing.Generic[T]):
+            def __init_subclass__(cls, **kwargs):
+                super().__init_subclass__(**kwargs)
+                cls.attr = 42
+        class Y(X):
+            pass
+        self.assertEqual(Y.attr, 42)
+        with self.assertRaises(AttributeError):
+            X.attr
+        X.attr = 1
+        Y.attr = 2
+        class Z(Y):
+            pass
+        class W(X[int]):
+            pass
+        self.assertEqual(Y.attr, 2)
+        self.assertEqual(Z.attr, 42)
+        self.assertEqual(W.attr, 42)
+
     def test_repr(self):
         self.assertEqual(repr(SimpleMapping),
                          __name__ + '.' + 'SimpleMapping')
@@ -1080,6 +1104,30 @@ class GenericTests(BaseTestCase):
                 self.assertTrue(t is copy(t))
                 self.assertTrue(t is deepcopy(t))
 
+    def test_copy_generic_instances(self):
+        T = TypeVar('T')
+        class C(Generic[T]):
+            def __init__(self, attr: T) -> None:
+                self.attr = attr
+
+        c = C(42)
+        self.assertEqual(copy(c).attr, 42)
+        self.assertEqual(deepcopy(c).attr, 42)
+        self.assertIsNot(copy(c), c)
+        self.assertIsNot(deepcopy(c), c)
+        c.attr = 1
+        self.assertEqual(copy(c).attr, 1)
+        self.assertEqual(deepcopy(c).attr, 1)
+        ci = C[int](42)
+        self.assertEqual(copy(ci).attr, 42)
+        self.assertEqual(deepcopy(ci).attr, 42)
+        self.assertIsNot(copy(ci), ci)
+        self.assertIsNot(deepcopy(ci), ci)
+        ci.attr = 1
+        self.assertEqual(copy(ci).attr, 1)
+        self.assertEqual(deepcopy(ci).attr, 1)
+        self.assertEqual(ci.__orig_class__, C[int])
+
     def test_weakref_all(self):
         T = TypeVar('T')
         things = [Any, Union[T, int], Callable[..., T], Tuple[Any, Any],
@@ -1471,8 +1519,8 @@ class ForwardRefTests(BaseTestCase):
     def test_meta_no_type_check(self):
 
         @no_type_check_decorator
-        def magic_decorator(deco):
-            return deco
+        def magic_decorator(func):
+            return func
 
         self.assertEqual(magic_decorator.__name__, 'magic_decorator')
 
@@ -1580,8 +1628,6 @@ else:
     asyncio = None
     AwaitableWrapper = AsyncIteratorWrapper = ACM = object
 
-PY36 = sys.version_info[:2] >= (3, 6)
-
 PY36_TESTS = """
 from test import ann_module, ann_module2, ann_module3
 from typing import AsyncContextManager
diff -urpN Python-3.6.3/Lib/test/test_urllib2_localnet.py Python-3.6.5/Lib/test/test_urllib2_localnet.py
--- Python-3.6.3/Lib/test/test_urllib2_localnet.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_urllib2_localnet.py	2018-03-28 11:19:31.000000000 +0200
@@ -598,7 +598,7 @@ class TestUrlopen(unittest.TestCase):
         def cb_sni(ssl_sock, server_name, initial_context):
             nonlocal sni_name
             sni_name = server_name
-        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
+        context = ssl.SSLContext(ssl.PROTOCOL_TLS)
         context.set_servername_callback(cb_sni)
         handler = self.start_https_server(context=context, certfile=CERT_localhost)
         context = ssl.create_default_context(cafile=CERT_localhost)
diff -urpN Python-3.6.3/Lib/test/test_urlparse.py Python-3.6.5/Lib/test/test_urlparse.py
--- Python-3.6.3/Lib/test/test_urlparse.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_urlparse.py	2018-03-28 11:19:31.000000000 +0200
@@ -520,6 +520,15 @@ class UrlParseTestCase(unittest.TestCase
             self.assertEqual(result.url, defrag)
             self.assertEqual(result.fragment, frag)
 
+    def test_urlsplit_scoped_IPv6(self):
+        p = urllib.parse.urlsplit('http://[FE80::822a:a8ff:fe49:470c%tESt]:1234')
+        self.assertEqual(p.hostname, "fe80::822a:a8ff:fe49:470c%tESt")
+        self.assertEqual(p.netloc, '[FE80::822a:a8ff:fe49:470c%tESt]:1234')
+
+        p = urllib.parse.urlsplit(b'http://[FE80::822a:a8ff:fe49:470c%tESt]:1234')
+        self.assertEqual(p.hostname, b"fe80::822a:a8ff:fe49:470c%tESt")
+        self.assertEqual(p.netloc, b'[FE80::822a:a8ff:fe49:470c%tESt]:1234')
+
     def test_urlsplit_attributes(self):
         url = "HTTP://WWW.PYTHON.ORG/doc/#frag"
         p = urllib.parse.urlsplit(url)
diff -urpN Python-3.6.3/Lib/test/test_uuid.py Python-3.6.5/Lib/test/test_uuid.py
--- Python-3.6.3/Lib/test/test_uuid.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_uuid.py	2018-03-28 11:19:31.000000000 +0200
@@ -304,6 +304,32 @@ class TestUUID(unittest.TestCase):
         node2 = uuid.getnode()
         self.assertEqual(node1, node2, '%012x != %012x' % (node1, node2))
 
+    # bpo-32502: UUID1 requires a 48-bit identifier, but hardware identifiers
+    # need not necessarily be 48 bits (e.g., EUI-64).
+    def test_uuid1_eui64(self):
+        # Confirm that uuid.getnode ignores hardware addresses larger than 48
+        # bits. Mock out each platform's *_getnode helper functions to return
+        # something just larger than 48 bits to test. This will cause
+        # uuid.getnode to fall back on uuid._random_getnode, which will
+        # generate a valid value.
+        too_large_getter = lambda: 1 << 48
+        with unittest.mock.patch.multiple(
+            uuid,
+            _node=None,  # Ignore any cached node value.
+            _NODE_GETTERS_WIN32=[too_large_getter],
+            _NODE_GETTERS_UNIX=[too_large_getter],
+        ):
+            node = uuid.getnode()
+        self.assertTrue(0 < node < (1 << 48), '%012x' % node)
+
+        # Confirm that uuid1 can use the generated node, i.e., the that
+        # uuid.getnode fell back on uuid._random_getnode() rather than using
+        # the value from too_large_getter above.
+        try:
+            uuid.uuid1(node=node)
+        except ValueError as e:
+            self.fail('uuid1 was given an invalid node ID')
+
     @unittest.skipUnless(importable('ctypes'), 'requires ctypes')
     def test_uuid1(self):
         equal = self.assertEqual
@@ -438,59 +464,57 @@ eth0      Link encap:Ethernet  HWaddr 12
 
         self.assertEqual(mac, 0x1234567890ab)
 
-    def check_node(self, node, requires=None, network=False):
+    def check_node(self, node, requires=None):
         if requires and node is None:
             self.skipTest('requires ' + requires)
         hex = '%012x' % node
         if support.verbose >= 2:
             print(hex, end=' ')
-        if network:
-            # 47 bit will never be set in IEEE 802 addresses obtained
-            # from network cards.
-            self.assertFalse(node & 0x010000000000, hex)
         self.assertTrue(0 < node < (1 << 48),
                         "%s is not an RFC 4122 node ID" % hex)
 
     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
     def test_ifconfig_getnode(self):
         node = uuid._ifconfig_getnode()
-        self.check_node(node, 'ifconfig', True)
+        self.check_node(node, 'ifconfig')
 
     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
     def test_ip_getnode(self):
         node = uuid._ip_getnode()
-        self.check_node(node, 'ip', True)
+        self.check_node(node, 'ip')
 
     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
     def test_arp_getnode(self):
         node = uuid._arp_getnode()
-        self.check_node(node, 'arp', True)
+        self.check_node(node, 'arp')
 
     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
     def test_lanscan_getnode(self):
         node = uuid._lanscan_getnode()
-        self.check_node(node, 'lanscan', True)
+        self.check_node(node, 'lanscan')
 
     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
     def test_netstat_getnode(self):
         node = uuid._netstat_getnode()
-        self.check_node(node, 'netstat', True)
+        self.check_node(node, 'netstat')
 
     @unittest.skipUnless(os.name == 'nt', 'requires Windows')
     def test_ipconfig_getnode(self):
         node = uuid._ipconfig_getnode()
-        self.check_node(node, 'ipconfig', True)
+        self.check_node(node, 'ipconfig')
 
     @unittest.skipUnless(importable('win32wnet'), 'requires win32wnet')
     @unittest.skipUnless(importable('netbios'), 'requires netbios')
     def test_netbios_getnode(self):
         node = uuid._netbios_getnode()
-        self.check_node(node, network=True)
+        self.check_node(node)
 
     def test_random_getnode(self):
         node = uuid._random_getnode()
-        # Least significant bit of first octet must be set.
-        self.assertTrue(node & 0x010000000000, '%012x' % node)
+        # The multicast bit, i.e. the least significant bit of first octet,
+        # must be set for randomly generated MAC addresses.  See RFC 4122,
+        # $4.1.6.
+        self.assertTrue(node & (1 << 40), '%012x' % node)
         self.check_node(node)
 
     @unittest.skipUnless(os.name == 'posix', 'requires Posix')
diff -urpN Python-3.6.3/Lib/test/test_venv.py Python-3.6.5/Lib/test/test_venv.py
--- Python-3.6.3/Lib/test/test_venv.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_venv.py	2018-03-28 11:19:31.000000000 +0200
@@ -13,7 +13,7 @@ import struct
 import subprocess
 import sys
 import tempfile
-from test.support import (captured_stdout, captured_stderr,
+from test.support import (captured_stdout, captured_stderr, requires_zlib,
                           can_symlink, EnvironmentVarGuard, rmtree)
 import unittest
 import venv
@@ -286,6 +286,24 @@ class BasicTest(BaseTest):
         out, err = p.communicate()
         self.assertEqual(out.strip(), envpy.encode())
 
+    @unittest.skipUnless(os.name == 'nt', 'only relevant on Windows')
+    def test_unicode_in_batch_file(self):
+        """
+        Test isolation from system site-packages
+        """
+        rmtree(self.env_dir)
+        env_dir = os.path.join(os.path.realpath(self.env_dir), 'ϼўТλФЙ')
+        builder = venv.EnvBuilder(clear=True)
+        builder.create(env_dir)
+        activate = os.path.join(env_dir, self.bindir, 'activate.bat')
+        envpy = os.path.join(env_dir, self.bindir, self.exe)
+        cmd = [activate, '&', self.exe, '-c', 'print(0)']
+        p = subprocess.Popen(cmd, stdout=subprocess.PIPE,
+                             stderr=subprocess.PIPE, encoding='oem',
+                             shell=True)
+        out, err = p.communicate()
+        print(err)
+        self.assertEqual(out.strip(), '0')
 
 @skipInVenv
 class EnsurePipTest(BaseTest):
@@ -424,6 +442,7 @@ class EnsurePipTest(BaseTest):
                                     ' module unconditionally')
     # Issue #26610: pip/pep425tags.py requires ctypes
     @unittest.skipUnless(ctypes, 'pip requires ctypes')
+    @requires_zlib
     def test_with_pip(self):
         self.do_test_with_pip(False)
         self.do_test_with_pip(True)
diff -urpN Python-3.6.3/Lib/test/test_warnings/__init__.py Python-3.6.5/Lib/test/test_warnings/__init__.py
--- Python-3.6.3/Lib/test/test_warnings/__init__.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_warnings/__init__.py	2018-03-28 11:19:31.000000000 +0200
@@ -794,6 +794,42 @@ class _WarningsTests(BaseTest, unittest.
         self.assertNotIn(b'Warning!', stderr)
         self.assertNotIn(b'Error', stderr)
 
+    def test_issue31285(self):
+        # warn_explicit() should neither raise a SystemError nor cause an
+        # assertion failure, in case the return value of get_source() has a
+        # bad splitlines() method.
+        def get_bad_loader(splitlines_ret_val):
+            class BadLoader:
+                def get_source(self, fullname):
+                    class BadSource(str):
+                        def splitlines(self):
+                            return splitlines_ret_val
+                    return BadSource('spam')
+            return BadLoader()
+
+        wmod = self.module
+        with original_warnings.catch_warnings(module=wmod):
+            wmod.filterwarnings('default', category=UserWarning)
+
+            with support.captured_stderr() as stderr:
+                wmod.warn_explicit(
+                    'foo', UserWarning, 'bar', 1,
+                    module_globals={'__loader__': get_bad_loader(42),
+                                    '__name__': 'foobar'})
+            self.assertIn('UserWarning: foo', stderr.getvalue())
+
+            show = wmod._showwarnmsg
+            try:
+                del wmod._showwarnmsg
+                with support.captured_stderr() as stderr:
+                    wmod.warn_explicit(
+                        'eggs', UserWarning, 'bar', 1,
+                        module_globals={'__loader__': get_bad_loader([42]),
+                                        '__name__': 'foobar'})
+                self.assertIn('UserWarning: eggs', stderr.getvalue())
+            finally:
+                wmod._showwarnmsg = show
+
     @support.cpython_only
     def test_issue31411(self):
         # warn_explicit() shouldn't raise a SystemError in case
@@ -820,6 +856,16 @@ class _WarningsTests(BaseTest, unittest.
                  self.assertRaises(TypeError):
                 wmod.warn_explicit('foo', Warning, 'bar', 1)
 
+    @support.cpython_only
+    def test_issue31566(self):
+        # warn() shouldn't cause an assertion failure in case of a bad
+        # __name__ global.
+        with original_warnings.catch_warnings(module=self.module):
+            self.module.filterwarnings('error', category=UserWarning)
+            with support.swap_item(globals(), '__name__', b'foo'), \
+                 support.swap_item(globals(), '__file__', None):
+                self.assertRaises(UserWarning, self.module.warn, 'bar')
+
 
 class WarningsDisplayTests(BaseTest):
 
diff -urpN Python-3.6.3/Lib/test/test_weakref.py Python-3.6.5/Lib/test/test_weakref.py
--- Python-3.6.3/Lib/test/test_weakref.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_weakref.py	2018-03-28 11:19:31.000000000 +0200
@@ -1637,7 +1637,7 @@ class MappingTestCase(TestBase):
         # has to keep looping to find the first object we delete.
         objs.reverse()
 
-        # Turn on mutation in C.__eq__.  The first time thru the loop,
+        # Turn on mutation in C.__eq__.  The first time through the loop,
         # under the iterkeys() business the first comparison will delete
         # the last item iterkeys() would see, and that causes a
         #     RuntimeError: dictionary changed size during iteration
diff -urpN Python-3.6.3/Lib/test/test_winconsoleio.py Python-3.6.5/Lib/test/test_winconsoleio.py
--- Python-3.6.3/Lib/test/test_winconsoleio.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_winconsoleio.py	2018-03-28 11:19:31.000000000 +0200
@@ -121,6 +121,10 @@ class WindowsConsoleIOTests(unittest.Tes
             else:
                 self.assertNotIsInstance(f, ConIO)
 
+    def test_write_empty_data(self):
+        with ConIO('CONOUT$', 'w') as f:
+            self.assertEqual(f.write(b''), 0)
+
     def assertStdinRoundTrip(self, text):
         stdin = open('CONIN$', 'r')
         old_stdin = sys.stdin
diff -urpN Python-3.6.3/Lib/test/test_xml_etree.py Python-3.6.5/Lib/test/test_xml_etree.py
--- Python-3.6.3/Lib/test/test_xml_etree.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_xml_etree.py	2018-03-28 11:19:31.000000000 +0200
@@ -33,6 +33,7 @@ try:
 except UnicodeEncodeError:
     raise unittest.SkipTest("filename is not encodable to utf8")
 SIMPLE_NS_XMLFILE = findfile("simple-ns.xml", subdir="xmltestdata")
+UTF8_BUG_XMLFILE = findfile("expat224_utf8_bug.xml", subdir="xmltestdata")
 
 SAMPLE_XML = """\
 <body>
@@ -1724,6 +1725,37 @@ class BugsTest(unittest.TestCase):
         self.assertIsInstance(e[0].tag, str)
         self.assertEqual(e[0].tag, 'changed')
 
+    def check_expat224_utf8_bug(self, text):
+        xml = b'<a b="%s"/>' % text
+        root = ET.XML(xml)
+        self.assertEqual(root.get('b'), text.decode('utf-8'))
+
+    def test_expat224_utf8_bug(self):
+        # bpo-31170: Expat 2.2.3 had a bug in its UTF-8 decoder.
+        # Check that Expat 2.2.4 fixed the bug.
+        #
+        # Test buffer bounds at odd and even positions.
+
+        text = b'\xc3\xa0' * 1024
+        self.check_expat224_utf8_bug(text)
+
+        text = b'x' + b'\xc3\xa0' * 1024
+        self.check_expat224_utf8_bug(text)
+
+    def test_expat224_utf8_bug_file(self):
+        with open(UTF8_BUG_XMLFILE, 'rb') as fp:
+            raw = fp.read()
+        root = ET.fromstring(raw)
+        xmlattr = root.get('b')
+
+        # "Parse" manually the XML file to extract the value of the 'b'
+        # attribute of the <a b='xxx' /> XML element
+        text = raw.decode('utf-8').strip()
+        text = text.replace('\r\n', ' ')
+        text = text[6:-4]
+        self.assertEqual(root.get('b'), text)
+
+
 
 # --------------------------------------------------------------------
 
@@ -2248,7 +2280,7 @@ class ElementIterTest(unittest.TestCase)
         sourcefile = serialize(doc, to_string=False)
         self.assertEqual(next(ET.iterparse(sourcefile))[0], 'end')
 
-        # With an explitit parser too (issue #9708)
+        # With an explicit parser too (issue #9708)
         sourcefile = serialize(doc, to_string=False)
         parser = ET.XMLParser(target=ET.TreeBuilder())
         self.assertEqual(next(ET.iterparse(sourcefile, parser=parser))[0],
diff -urpN Python-3.6.3/Lib/test/test_xml_etree_c.py Python-3.6.5/Lib/test/test_xml_etree_c.py
--- Python-3.6.3/Lib/test/test_xml_etree_c.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_xml_etree_c.py	2018-03-28 11:19:31.000000000 +0200
@@ -84,6 +84,38 @@ class MiscTests(unittest.TestCase):
         # and so destroy the parser
         support.gc_collect()
 
+    def test_bpo_31728(self):
+        # A crash or an assertion failure shouldn't happen, in case garbage
+        # collection triggers a call to clear() or a reading of text or tail,
+        # while a setter or clear() or __setstate__() is already running.
+        elem = cET.Element('elem')
+        class X:
+            def __del__(self):
+                elem.text
+                elem.tail
+                elem.clear()
+
+        elem.text = X()
+        elem.clear()  # shouldn't crash
+
+        elem.tail = X()
+        elem.clear()  # shouldn't crash
+
+        elem.text = X()
+        elem.text = X()  # shouldn't crash
+        elem.clear()
+
+        elem.tail = X()
+        elem.tail = X()  # shouldn't crash
+        elem.clear()
+
+        elem.text = X()
+        elem.__setstate__({'tag': 42})  # shouldn't cause an assertion failure
+        elem.clear()
+
+        elem.tail = X()
+        elem.__setstate__({'tag': 42})  # shouldn't cause an assertion failure
+
 
 @unittest.skipUnless(cET, 'requires _elementtree')
 class TestAliasWorking(unittest.TestCase):
diff -urpN Python-3.6.3/Lib/test/test_xmlrpc_net.py Python-3.6.5/Lib/test/test_xmlrpc_net.py
--- Python-3.6.3/Lib/test/test_xmlrpc_net.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_xmlrpc_net.py	2018-03-28 11:19:31.000000000 +0200
@@ -4,6 +4,8 @@ from test import support
 
 import xmlrpc.client as xmlrpclib
 
+
+@unittest.skip('XXX: buildbot.python.org/all/xmlrpc/ is gone')
 class PythonBuildersTest(unittest.TestCase):
 
     def test_python_builders(self):
diff -urpN Python-3.6.3/Lib/test/test_zipapp.py Python-3.6.5/Lib/test/test_zipapp.py
--- Python-3.6.3/Lib/test/test_zipapp.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_zipapp.py	2018-03-28 11:19:31.000000000 +0200
@@ -311,7 +311,7 @@ class ZipAppCmdlineTest(unittest.TestCas
         args = [str(original), '-o', str(original)]
         with self.assertRaises(SystemExit) as cm:
             zipapp.main(args)
-        # Program should exit with a non-zero returm code.
+        # Program should exit with a non-zero return code.
         self.assertTrue(cm.exception.code)
 
     def test_cmdline_copy_change_main(self):
@@ -321,7 +321,7 @@ class ZipAppCmdlineTest(unittest.TestCas
         args = [str(original), '-o', str(target), '-m', 'foo:bar']
         with self.assertRaises(SystemExit) as cm:
             zipapp.main(args)
-        # Program should exit with a non-zero returm code.
+        # Program should exit with a non-zero return code.
         self.assertTrue(cm.exception.code)
 
     @patch('sys.stdout', new_callable=io.StringIO)
@@ -331,7 +331,7 @@ class ZipAppCmdlineTest(unittest.TestCas
         args = [str(target), '--info']
         with self.assertRaises(SystemExit) as cm:
             zipapp.main(args)
-        # Program should exit with a zero returm code.
+        # Program should exit with a zero return code.
         self.assertEqual(cm.exception.code, 0)
         self.assertEqual(mock_stdout.getvalue(), "Interpreter: <none>\n")
 
@@ -341,7 +341,7 @@ class ZipAppCmdlineTest(unittest.TestCas
         args = [str(target), '--info']
         with self.assertRaises(SystemExit) as cm:
             zipapp.main(args)
-        # Program should exit with a non-zero returm code.
+        # Program should exit with a non-zero return code.
         self.assertTrue(cm.exception.code)
 
 
diff -urpN Python-3.6.3/Lib/test/test_zlib.py Python-3.6.5/Lib/test/test_zlib.py
--- Python-3.6.3/Lib/test/test_zlib.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/test/test_zlib.py	2018-03-28 11:19:31.000000000 +0200
@@ -434,7 +434,8 @@ class CompressObjectTestCase(BaseCompres
     def test_flushes(self):
         # Test flush() with the various options, using all the
         # different levels in order to provide more variations.
-        sync_opt = ['Z_NO_FLUSH', 'Z_SYNC_FLUSH', 'Z_FULL_FLUSH']
+        sync_opt = ['Z_NO_FLUSH', 'Z_SYNC_FLUSH', 'Z_FULL_FLUSH',
+                    'Z_PARTIAL_FLUSH', 'Z_BLOCK']
         sync_opt = [getattr(zlib, opt) for opt in sync_opt
                     if hasattr(zlib, opt)]
         data = HAMLET_SCENE * 8
@@ -751,10 +752,15 @@ class CompressObjectTestCase(BaseCompres
     def test_wbits(self):
         # wbits=0 only supported since zlib v1.2.3.5
         # Register "1.2.3" as "1.2.3.0"
-        v = (zlib.ZLIB_RUNTIME_VERSION + ".0").split(".", 4)
-        supports_wbits_0 = int(v[0]) > 1 or int(v[0]) == 1 \
-            and (int(v[1]) > 2 or int(v[1]) == 2
-            and (int(v[2]) > 3 or int(v[2]) == 3 and int(v[3]) >= 5))
+        # or "1.2.0-linux","1.2.0.f","1.2.0.f-linux"
+        v = zlib.ZLIB_RUNTIME_VERSION.split('-', 1)[0].split('.')
+        if len(v) < 4:
+            v.append('0')
+        elif not v[-1].isnumeric():
+            v[-1] = '0'
+
+        v = tuple(map(int, v))
+        supports_wbits_0 = v >= (1, 2, 3, 5)
 
         co = zlib.compressobj(level=1, wbits=15)
         zlib15 = co.compress(HAMLET_SCENE) + co.flush()
diff -urpN Python-3.6.3/Lib/test/xmltestdata/expat224_utf8_bug.xml Python-3.6.5/Lib/test/xmltestdata/expat224_utf8_bug.xml
--- Python-3.6.3/Lib/test/xmltestdata/expat224_utf8_bug.xml	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/Lib/test/xmltestdata/expat224_utf8_bug.xml	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,2 @@
+<a b='01234567890123456古人咏雪抽幽思骋妍辞竞险韵偶得一编奇绝辄擅美当时流声后代是以北门之风南山之雅梁园之简黄台之赋至今为作家称述尚矣及至洛阳之卧剡溪之兴灞桥之思亦皆传为故事钱塘沈履德先生隐居西湖两峰间孤高贞洁与雪同调方大雪满天皴肤粟背之际先生乃鹿中豹舄端居闭门或扶童曳杖踏遍六桥三竺时取古人诗讽咏之合唐宋元诸名家集句成诗得二百四十章联络通穿如出一人如呵一气气立于言表格备于篇中略无掇拾补凑之形非胸次包罗壮阔笔底驱走鲍谢欧苏诸公不能为此世称王荆公为集句擅长观其在钟山对雪仅题数篇未见有此噫嘻奇矣哉亦富矣哉予慕先生有袁安之节愧不能为慧可之立乃取新集命工传写使海内同好者知先生为博古传述之士而一新世人之耳目他日必有慕潜德阐幽光而剞劂以传者余实为之执殳矣
+弘治戊午仲冬望日慈溪杨子器衵于海虞官舍序毕诗部' />
diff -urpN Python-3.6.3/Lib/threading.py Python-3.6.5/Lib/threading.py
--- Python-3.6.3/Lib/threading.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/threading.py	2018-03-28 11:19:31.000000000 +0200
@@ -1182,8 +1182,8 @@ class Timer(Thread):
             self.function(*self.args, **self.kwargs)
         self.finished.set()
 
+
 # Special thread class to represent the main thread
-# This is garbage collected through an exit handler
 
 class _MainThread(Thread):
 
@@ -1293,7 +1293,6 @@ def _shutdown():
     while t:
         t.join()
         t = _pickSomeNonDaemonThread()
-    _main_thread._delete()
 
 def _pickSomeNonDaemonThread():
     for t in enumerate():
diff -urpN Python-3.6.3/Lib/tkinter/__init__.py Python-3.6.5/Lib/tkinter/__init__.py
--- Python-3.6.3/Lib/tkinter/__init__.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/tkinter/__init__.py	2018-03-28 11:19:31.000000000 +0200
@@ -739,6 +739,7 @@ class Misc:
         if not func:
             # I'd rather use time.sleep(ms*0.001)
             self.tk.call('after', ms)
+            return None
         else:
             def callit():
                 try:
@@ -762,11 +763,13 @@ class Misc:
         """Cancel scheduling of function identified with ID.
 
         Identifier returned by after or after_idle must be
-        given as first parameter."""
+        given as first parameter.
+        """
+        if not id:
+            raise ValueError('id must be a valid identifier returned from '
+                             'after or after_idle')
         try:
             data = self.tk.call('after', 'info', id)
-            # In Tk 8.3, splitlist returns: (script, type)
-            # In Tk 8.4, splitlist may return (script, type) or (script,)
             script = self.tk.splitlist(data)[0]
             self.deletecommand(script)
         except TclError:
diff -urpN Python-3.6.3/Lib/tkinter/test/test_tkinter/test_misc.py Python-3.6.5/Lib/tkinter/test/test_tkinter/test_misc.py
--- Python-3.6.3/Lib/tkinter/test/test_tkinter/test_misc.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/tkinter/test/test_tkinter/test_misc.py	2018-03-28 11:19:31.000000000 +0200
@@ -48,6 +48,114 @@ class MiscTest(AbstractTkTest, unittest.
                 '^must specify a background color$',
                 root.tk_setPalette, highlightColor='blue')
 
+    def test_after(self):
+        root = self.root
+
+        def callback(start=0, step=1):
+            nonlocal count
+            count = start + step
+
+        # Without function, sleeps for ms.
+        self.assertIsNone(root.after(1))
+
+        # Set up with callback with no args.
+        count = 0
+        timer1 = root.after(0, callback)
+        self.assertIn(timer1, root.tk.call('after', 'info'))
+        (script, _) = root.tk.splitlist(root.tk.call('after', 'info', timer1))
+        root.update()  # Process all pending events.
+        self.assertEqual(count, 1)
+        with self.assertRaises(tkinter.TclError):
+            root.tk.call(script)
+
+        # Set up with callback with args.
+        count = 0
+        timer1 = root.after(0, callback, 42, 11)
+        root.update()  # Process all pending events.
+        self.assertEqual(count, 53)
+
+        # Cancel before called.
+        timer1 = root.after(1000, callback)
+        self.assertIn(timer1, root.tk.call('after', 'info'))
+        (script, _) = root.tk.splitlist(root.tk.call('after', 'info', timer1))
+        root.after_cancel(timer1)  # Cancel this event.
+        self.assertEqual(count, 53)
+        with self.assertRaises(tkinter.TclError):
+            root.tk.call(script)
+
+    def test_after_idle(self):
+        root = self.root
+
+        def callback(start=0, step=1):
+            nonlocal count
+            count = start + step
+
+        # Set up with callback with no args.
+        count = 0
+        idle1 = root.after_idle(callback)
+        self.assertIn(idle1, root.tk.call('after', 'info'))
+        (script, _) = root.tk.splitlist(root.tk.call('after', 'info', idle1))
+        root.update_idletasks()  # Process all pending events.
+        self.assertEqual(count, 1)
+        with self.assertRaises(tkinter.TclError):
+            root.tk.call(script)
+
+        # Set up with callback with args.
+        count = 0
+        idle1 = root.after_idle(callback, 42, 11)
+        root.update_idletasks()  # Process all pending events.
+        self.assertEqual(count, 53)
+
+        # Cancel before called.
+        idle1 = root.after_idle(callback)
+        self.assertIn(idle1, root.tk.call('after', 'info'))
+        (script, _) = root.tk.splitlist(root.tk.call('after', 'info', idle1))
+        root.after_cancel(idle1)  # Cancel this event.
+        self.assertEqual(count, 53)
+        with self.assertRaises(tkinter.TclError):
+            root.tk.call(script)
+
+    def test_after_cancel(self):
+        root = self.root
+
+        def callback():
+            nonlocal count
+            count += 1
+
+        timer1 = root.after(5000, callback)
+        idle1 = root.after_idle(callback)
+
+        # No value for id raises a ValueError.
+        with self.assertRaises(ValueError):
+            root.after_cancel(None)
+
+        # Cancel timer event.
+        count = 0
+        (script, _) = root.tk.splitlist(root.tk.call('after', 'info', timer1))
+        root.tk.call(script)
+        self.assertEqual(count, 1)
+        root.after_cancel(timer1)
+        with self.assertRaises(tkinter.TclError):
+            root.tk.call(script)
+        self.assertEqual(count, 1)
+        with self.assertRaises(tkinter.TclError):
+            root.tk.call('after', 'info', timer1)
+
+        # Cancel same event - nothing happens.
+        root.after_cancel(timer1)
+
+        # Cancel idle event.
+        count = 0
+        (script, _) = root.tk.splitlist(root.tk.call('after', 'info', idle1))
+        root.tk.call(script)
+        self.assertEqual(count, 1)
+        root.after_cancel(idle1)
+        with self.assertRaises(tkinter.TclError):
+            root.tk.call(script)
+        self.assertEqual(count, 1)
+        with self.assertRaises(tkinter.TclError):
+            root.tk.call('after', 'info', idle1)
+
 
 tests_gui = (MiscTest, )
 
diff -urpN Python-3.6.3/Lib/tkinter/test/test_ttk/test_functions.py Python-3.6.5/Lib/tkinter/test/test_ttk/test_functions.py
--- Python-3.6.3/Lib/tkinter/test/test_ttk/test_functions.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/tkinter/test/test_ttk/test_functions.py	2018-03-28 11:19:31.000000000 +0200
@@ -149,7 +149,7 @@ class InternalFunctionsTest(unittest.Tes
         # but when passing a single state, it can be anything
         valid = {'opt': [[1, 'value']]}
         self.assertEqual(ttk._format_mapdict(valid), ('-opt', '1 value'))
-        # special attention to single states which evalute to False
+        # special attention to single states which evaluate to False
         for stateval in (None, 0, False, '', set()): # just some samples
             valid = {'opt': [(stateval, 'value')]}
             self.assertEqual(ttk._format_mapdict(valid),
@@ -251,7 +251,7 @@ class InternalFunctionsTest(unittest.Tes
         self.assertEqual(ttk._format_layoutlist([])[0], '')
 
         # _format_layoutlist always expects the second item (in every item)
-        # to act like a dict (except when the value evalutes to False).
+        # to act like a dict (except when the value evaluates to False).
         self.assertRaises(AttributeError,
             ttk._format_layoutlist, [('a', 'b')])
 
diff -urpN Python-3.6.3/Lib/tkinter/test/test_ttk/test_widgets.py Python-3.6.5/Lib/tkinter/test/test_ttk/test_widgets.py
--- Python-3.6.3/Lib/tkinter/test/test_ttk/test_widgets.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/tkinter/test/test_ttk/test_widgets.py	2018-03-28 11:19:31.000000000 +0200
@@ -1556,7 +1556,7 @@ class TreeviewTest(AbstractWidgetTest, u
         self.tv.selection_toggle((c1, c3))
         self.assertEqual(self.tv.selection(), (c3, item2))
 
-        if sys.version_info >= (3, 7):
+        if sys.version_info >= (3, 8):
             import warnings
             warnings.warn(
                 'Deprecated API of Treeview.selection() should be removed')
diff -urpN Python-3.6.3/Lib/tkinter/ttk.py Python-3.6.5/Lib/tkinter/ttk.py
--- Python-3.6.3/Lib/tkinter/ttk.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/tkinter/ttk.py	2018-03-28 11:19:31.000000000 +0200
@@ -83,7 +83,7 @@ def _mapdict_values(items):
     #   ['active selected', 'grey', 'focus', [1, 2, 3, 4]]
     opt_val = []
     for *state, val in items:
-        # hacks for bakward compatibility
+        # hacks for backward compatibility
         state[0] # raise IndexError if empty
         if len(state) == 1:
             # if it is empty (something that evaluates to False), then
@@ -1404,13 +1404,13 @@ class Treeview(Widget, tkinter.XView, tk
             import warnings
             warnings.warn(
                 "The selop=None argument of selection() is deprecated "
-                "and will be removed in Python 3.7",
+                "and will be removed in Python 3.8",
                 DeprecationWarning, 3)
         elif selop in ('set', 'add', 'remove', 'toggle'):
             import warnings
             warnings.warn(
                 "The selop argument of selection() is deprecated "
-                "and will be removed in Python 3.7, "
+                "and will be removed in Python 3.8, "
                 "use selection_%s() instead" % (selop,),
                 DeprecationWarning, 3)
         else:
diff -urpN Python-3.6.3/Lib/trace.py Python-3.6.5/Lib/trace.py
--- Python-3.6.3/Lib/trace.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/trace.py	2018-03-28 11:19:31.000000000 +0200
@@ -710,7 +710,7 @@ def main():
     if opts.filename is None:
         parser.error('filename is missing: required with the main options')
 
-    sys.argv = opts.filename, *opts.arguments
+    sys.argv = [opts.filename, *opts.arguments]
     sys.path[0] = os.path.dirname(opts.filename)
 
     t = Trace(opts.count, opts.trace, countfuncs=opts.listfuncs,
diff -urpN Python-3.6.3/Lib/traceback.py Python-3.6.5/Lib/traceback.py
--- Python-3.6.3/Lib/traceback.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/traceback.py	2018-03-28 11:19:31.000000000 +0200
@@ -459,11 +459,11 @@ class TracebackException:
         # Handle loops in __cause__ or __context__.
         if _seen is None:
             _seen = set()
-        _seen.add(exc_value)
+        _seen.add(id(exc_value))
         # Gracefully handle (the way Python 2.4 and earlier did) the case of
         # being called with no type or value (None, None, None).
         if (exc_value and exc_value.__cause__ is not None
-            and exc_value.__cause__ not in _seen):
+            and id(exc_value.__cause__) not in _seen):
             cause = TracebackException(
                 type(exc_value.__cause__),
                 exc_value.__cause__,
@@ -475,7 +475,7 @@ class TracebackException:
         else:
             cause = None
         if (exc_value and exc_value.__context__ is not None
-            and exc_value.__context__ not in _seen):
+            and id(exc_value.__context__) not in _seen):
             context = TracebackException(
                 type(exc_value.__context__),
                 exc_value.__context__,
diff -urpN Python-3.6.3/Lib/turtledemo/__main__.py Python-3.6.5/Lib/turtledemo/__main__.py
--- Python-3.6.3/Lib/turtledemo/__main__.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/turtledemo/__main__.py	2018-03-28 11:19:31.000000000 +0200
@@ -136,7 +136,7 @@ class DemoWindow(object):
             import subprocess
             # Make sure we are the currently activated OS X application
             # so that our menu bar appears.
-            p = subprocess.Popen(
+            subprocess.run(
                     [
                         'osascript',
                         '-e', 'tell application "System Events"',
@@ -259,7 +259,7 @@ class DemoWindow(object):
         return 'break'
 
     def update_mousewheel(self, event):
-        # For wheel up, event.delte = 120 on Windows, -1 on darwin.
+        # For wheel up, event.delta = 120 on Windows, -1 on darwin.
         # X-11 sends Control-Button-4 event instead.
         if (event.delta < 0) == (not darwin):
             return self.decrease_size()
diff -urpN Python-3.6.3/Lib/typing.py Python-3.6.5/Lib/typing.py
--- Python-3.6.3/Lib/typing.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/typing.py	2018-03-28 11:19:31.000000000 +0200
@@ -973,7 +973,8 @@ class GenericMeta(TypingMeta, abc.ABCMet
         # remove bare Generic from bases if there are other generic bases
         if any(isinstance(b, GenericMeta) and b is not Generic for b in bases):
             bases = tuple(b for b in bases if b is not Generic)
-        namespace.update({'__origin__': origin, '__extra__': extra})
+        namespace.update({'__origin__': origin, '__extra__': extra,
+                          '_gorg': None if not origin else origin._gorg})
         self = super().__new__(cls, name, bases, namespace, _root=True)
         super(GenericMeta, self).__setattr__('_gorg',
                                              self if not origin else origin._gorg)
@@ -1160,17 +1161,12 @@ class GenericMeta(TypingMeta, abc.ABCMet
         # classes are supposed to be rare anyways.
         return issubclass(instance.__class__, self)
 
-    def __copy__(self):
-        return self.__class__(self.__name__, self.__bases__,
-                              _no_slots_copy(self.__dict__),
-                              self.__parameters__, self.__args__, self.__origin__,
-                              self.__extra__, self.__orig_bases__)
-
     def __setattr__(self, attr, value):
         # We consider all the subscripted generics as proxies for original class
         if (
             attr.startswith('__') and attr.endswith('__') or
-            attr.startswith('_abc_')
+            attr.startswith('_abc_') or
+            self._gorg is None  # The class is not fully created, see #typing/506
         ):
             super(GenericMeta, self).__setattr__(attr, value)
         else:
diff -urpN Python-3.6.3/Lib/unittest/case.py Python-3.6.5/Lib/unittest/case.py
--- Python-3.6.3/Lib/unittest/case.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/unittest/case.py	2018-03-28 11:19:31.000000000 +0200
@@ -842,7 +842,8 @@ class TestCase(object):
         """Fail if the two objects are unequal as determined by their
            difference rounded to the given number of decimal places
            (default 7) and comparing to zero, or by comparing that the
-           between the two objects is more than the given delta.
+           difference between the two objects is more than the given
+           delta.
 
            Note that decimal places (from zero) are usually not the same
            as significant digits (measured from the most significant digit).
@@ -881,7 +882,7 @@ class TestCase(object):
         """Fail if the two objects are equal as determined by their
            difference rounded to the given number of decimal places
            (default 7) and comparing to zero, or by comparing that the
-           between the two objects is less than the given delta.
+           difference between the two objects is less than the given delta.
 
            Note that decimal places (from zero) are usually not the same
            as significant digits (measured from the most significant digit).
diff -urpN Python-3.6.3/Lib/unittest/test/test_discovery.py Python-3.6.5/Lib/unittest/test/test_discovery.py
--- Python-3.6.3/Lib/unittest/test/test_discovery.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/unittest/test/test_discovery.py	2018-03-28 11:19:31.000000000 +0200
@@ -199,8 +199,8 @@ class TestDiscovery(unittest.TestCase):
                          ['a_directory', 'test_directory', 'test_directory2'])
 
         # load_tests should have been called once with loader, tests and pattern
-        # (but there are no tests in our stub module itself, so thats [] at the
-        # time of call.
+        # (but there are no tests in our stub module itself, so that is [] at
+        # the time of call).
         self.assertEqual(Module.load_tests_args,
                          [(loader, [], 'test*')])
 
diff -urpN Python-3.6.3/Lib/unittest/test/testmock/testmagicmethods.py Python-3.6.5/Lib/unittest/test/testmock/testmagicmethods.py
--- Python-3.6.3/Lib/unittest/test/testmock/testmagicmethods.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/unittest/test/testmock/testmagicmethods.py	2018-03-28 11:19:31.000000000 +0200
@@ -450,7 +450,7 @@ class TestMockingMagicMethods(unittest.T
         self.assertIsInstance(bar_direct, MagicMock)
 
     # http://bugs.python.org/issue23310
-    # Check if you can change behaviour of magic methds in MagicMock init
+    # Check if you can change behaviour of magic methods in MagicMock init
     def test_magic_in_initialization(self):
         m = MagicMock(**{'__str__.return_value': "12"})
         self.assertEqual(str(m), "12")
diff -urpN Python-3.6.3/Lib/urllib/parse.py Python-3.6.5/Lib/urllib/parse.py
--- Python-3.6.3/Lib/urllib/parse.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/urllib/parse.py	2018-03-28 11:19:31.000000000 +0200
@@ -155,10 +155,12 @@ class _NetlocResultMixinBase(object):
     def hostname(self):
         hostname = self._hostinfo[0]
         if not hostname:
-            hostname = None
-        elif hostname is not None:
-            hostname = hostname.lower()
-        return hostname
+            return None
+        # Scoped IPv6 address may have zone info, which must not be lowercased
+        # like http://[fe80::822a:a8ff:fe49:470c%tESt]:1234/keys
+        separator = '%' if isinstance(hostname, str) else b'%'
+        hostname, percent, zone = hostname.partition(separator)
+        return hostname.lower() + percent + zone
 
     @property
     def port(self):
diff -urpN Python-3.6.3/Lib/urllib/robotparser.py Python-3.6.5/Lib/urllib/robotparser.py
--- Python-3.6.3/Lib/urllib/robotparser.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/urllib/robotparser.py	2018-03-28 11:19:31.000000000 +0200
@@ -16,6 +16,9 @@ import urllib.request
 
 __all__ = ["RobotFileParser"]
 
+RequestRate = collections.namedtuple("RequestRate", "requests seconds")
+
+
 class RobotFileParser:
     """ This class provides a set of methods to read, parse and answer
     questions about a single robots.txt file.
@@ -136,11 +139,7 @@ class RobotFileParser:
                         # check if all values are sane
                         if (len(numbers) == 2 and numbers[0].strip().isdigit()
                             and numbers[1].strip().isdigit()):
-                            req_rate = collections.namedtuple('req_rate',
-                                                              'requests seconds')
-                            entry.req_rate = req_rate
-                            entry.req_rate.requests = int(numbers[0])
-                            entry.req_rate.seconds = int(numbers[1])
+                            entry.req_rate = RequestRate(int(numbers[0]), int(numbers[1]))
                         state = 2
         if state == 2:
             self._add_entry(entry)
diff -urpN Python-3.6.3/Lib/uuid.py Python-3.6.5/Lib/uuid.py
--- Python-3.6.3/Lib/uuid.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/uuid.py	2018-03-28 11:19:31.000000000 +0200
@@ -349,15 +349,16 @@ def _find_mac(command, args, hw_identifi
 def _ifconfig_getnode():
     """Get the hardware address on Unix by running ifconfig."""
     # This works on Linux ('' or '-a'), Tru64 ('-av'), but not all Unixes.
+    keywords = (b'hwaddr', b'ether', b'address:', b'lladdr')
     for args in ('', '-a', '-av'):
-        mac = _find_mac('ifconfig', args, [b'hwaddr', b'ether'], lambda i: i+1)
+        mac = _find_mac('ifconfig', args, keywords, lambda i: i+1)
         if mac:
             return mac
 
 def _ip_getnode():
     """Get the hardware address on Unix by running ip."""
     # This works on Linux with iproute2.
-    mac = _find_mac('ip', 'link list', [b'link/ether'], lambda i: i+1)
+    mac = _find_mac('ip', 'link', [b'link/ether'], lambda i: i+1)
     if mac:
         return mac
 
@@ -370,7 +371,20 @@ def _arp_getnode():
         return None
 
     # Try getting the MAC addr from arp based on our IP address (Solaris).
-    return _find_mac('arp', '-an', [os.fsencode(ip_addr)], lambda i: -1)
+    mac = _find_mac('arp', '-an', [os.fsencode(ip_addr)], lambda i: -1)
+    if mac:
+        return mac
+
+    # This works on OpenBSD
+    mac = _find_mac('arp', '-an', [os.fsencode(ip_addr)], lambda i: i+1)
+    if mac:
+        return mac
+
+    # This works on Linux, FreeBSD and NetBSD
+    mac = _find_mac('arp', '-an', [os.fsencode('(%s)' % ip_addr)],
+                    lambda i: i+2)
+    if mac:
+        return mac
 
 def _lanscan_getnode():
     """Get the hardware address on Unix by running lanscan."""
@@ -405,7 +419,7 @@ def _netstat_getnode():
 
 def _ipconfig_getnode():
     """Get the hardware address on Windows by running ipconfig.exe."""
-    import os, re
+    import os, re, subprocess
     dirs = ['', r'c:\windows\system32', r'c:\winnt\system32']
     try:
         import ctypes
@@ -416,11 +430,13 @@ def _ipconfig_getnode():
         pass
     for dir in dirs:
         try:
-            pipe = os.popen(os.path.join(dir, 'ipconfig') + ' /all')
+            proc = subprocess.Popen([os.path.join(dir, 'ipconfig'), '/all'],
+                                    stdout=subprocess.PIPE,
+                                    encoding="oem")
         except OSError:
             continue
-        with pipe:
-            for line in pipe:
+        with proc:
+            for line in proc.stdout:
                 value = line.split(':')[-1].strip().lower()
                 if re.match('([0-9a-f][0-9a-f]-){5}[0-9a-f][0-9a-f]', value):
                     return int(value.replace('-', ''), 16)
@@ -526,6 +542,11 @@ def _random_getnode():
 
 _node = None
 
+_NODE_GETTERS_WIN32 = [_windll_getnode, _netbios_getnode, _ipconfig_getnode]
+
+_NODE_GETTERS_UNIX = [_unixdll_getnode, _ifconfig_getnode, _ip_getnode,
+                      _arp_getnode, _lanscan_getnode, _netstat_getnode]
+
 def getnode():
     """Get the hardware address as a 48-bit positive integer.
 
@@ -541,18 +562,18 @@ def getnode():
 
     import sys
     if sys.platform == 'win32':
-        getters = [_windll_getnode, _netbios_getnode, _ipconfig_getnode]
+        getters = _NODE_GETTERS_WIN32
     else:
-        getters = [_unixdll_getnode, _ifconfig_getnode, _ip_getnode,
-                   _arp_getnode, _lanscan_getnode, _netstat_getnode]
+        getters = _NODE_GETTERS_UNIX
 
     for getter in getters + [_random_getnode]:
         try:
             _node = getter()
         except:
             continue
-        if _node is not None:
+        if (_node is not None) and (0 <= _node < (1 << 48)):
             return _node
+    assert False, '_random_getnode() returned invalid value: {}'.format(_node)
 
 _last_timestamp = None
 
diff -urpN Python-3.6.3/Lib/venv/scripts/common/activate Python-3.6.5/Lib/venv/scripts/common/activate
--- Python-3.6.3/Lib/venv/scripts/common/activate	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/venv/scripts/common/activate	2018-03-28 11:19:31.000000000 +0200
@@ -3,13 +3,13 @@
 
 deactivate () {
     # reset old environment variables
-    if [ -n "$_OLD_VIRTUAL_PATH" ] ; then
-        PATH="$_OLD_VIRTUAL_PATH"
+    if [ -n "${_OLD_VIRTUAL_PATH:-}" ] ; then
+        PATH="${_OLD_VIRTUAL_PATH:-}"
         export PATH
         unset _OLD_VIRTUAL_PATH
     fi
-    if [ -n "$_OLD_VIRTUAL_PYTHONHOME" ] ; then
-        PYTHONHOME="$_OLD_VIRTUAL_PYTHONHOME"
+    if [ -n "${_OLD_VIRTUAL_PYTHONHOME:-}" ] ; then
+        PYTHONHOME="${_OLD_VIRTUAL_PYTHONHOME:-}"
         export PYTHONHOME
         unset _OLD_VIRTUAL_PYTHONHOME
     fi
@@ -17,12 +17,12 @@ deactivate () {
     # This should detect bash and zsh, which have a hash command that must
     # be called to get it to forget past commands.  Without forgetting
     # past commands the $PATH changes we made may not be respected
-    if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
+    if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ] ; then
         hash -r
     fi
 
-    if [ -n "$_OLD_VIRTUAL_PS1" ] ; then
-        PS1="$_OLD_VIRTUAL_PS1"
+    if [ -n "${_OLD_VIRTUAL_PS1:-}" ] ; then
+        PS1="${_OLD_VIRTUAL_PS1:-}"
         export PS1
         unset _OLD_VIRTUAL_PS1
     fi
@@ -47,15 +47,15 @@ export PATH
 # unset PYTHONHOME if set
 # this will fail if PYTHONHOME is set to the empty string (which is bad anyway)
 # could use `if (set -u; : $PYTHONHOME) ;` in bash
-if [ -n "$PYTHONHOME" ] ; then
-    _OLD_VIRTUAL_PYTHONHOME="$PYTHONHOME"
+if [ -n "${PYTHONHOME:-}" ] ; then
+    _OLD_VIRTUAL_PYTHONHOME="${PYTHONHOME:-}"
     unset PYTHONHOME
 fi
 
-if [ -z "$VIRTUAL_ENV_DISABLE_PROMPT" ] ; then
-    _OLD_VIRTUAL_PS1="$PS1"
+if [ -z "${VIRTUAL_ENV_DISABLE_PROMPT:-}" ] ; then
+    _OLD_VIRTUAL_PS1="${PS1:-}"
     if [ "x__VENV_PROMPT__" != x ] ; then
-	PS1="__VENV_PROMPT__$PS1"
+	PS1="__VENV_PROMPT__${PS1:-}"
     else
     if [ "`basename \"$VIRTUAL_ENV\"`" = "__" ] ; then
         # special case for Aspen magic directories
@@ -71,6 +71,6 @@ fi
 # This should detect bash and zsh, which have a hash command that must
 # be called to get it to forget past commands.  Without forgetting
 # past commands the $PATH changes we made may not be respected
-if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
+if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ] ; then
     hash -r
 fi
diff -urpN Python-3.6.3/Lib/venv/scripts/nt/activate.bat Python-3.6.5/Lib/venv/scripts/nt/activate.bat
--- Python-3.6.3/Lib/venv/scripts/nt/activate.bat	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/venv/scripts/nt/activate.bat	2018-03-28 11:19:31.000000000 +0200
@@ -1,4 +1,13 @@
 @echo off
+
+rem This file is UTF-8 encoded, so we need to update the current code page while executing it
+for /f "tokens=2 delims=:" %%a in ('"%SystemRoot%\System32\chcp.com"') do (
+    set "_OLD_CODEPAGE=%%a"
+)
+if defined _OLD_CODEPAGE (
+    "%SystemRoot%\System32\chcp.com" 65001 > nul
+)
+
 set "VIRTUAL_ENV=__VENV_DIR__"
 
 if not defined PROMPT (
@@ -30,3 +39,7 @@ if defined _OLD_VIRTUAL_PATH (
 set "PATH=%VIRTUAL_ENV%\__VENV_BIN_NAME__;%PATH%"
 
 :END
+if defined _OLD_CODEPAGE (
+    "%SystemRoot%\System32\chcp.com" %_OLD_CODEPAGE% > nul
+    set "_OLD_CODEPAGE="
+)
diff -urpN Python-3.6.3/Lib/xml/etree/ElementTree.py Python-3.6.5/Lib/xml/etree/ElementTree.py
--- Python-3.6.3/Lib/xml/etree/ElementTree.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/xml/etree/ElementTree.py	2018-03-28 11:19:31.000000000 +0200
@@ -1061,7 +1061,7 @@ def _escape_cdata(text):
     # escape character data
     try:
         # it's worth avoiding do-nothing calls for strings that are
-        # shorter than 500 character, or so.  assume that's, by far,
+        # shorter than 500 characters, or so.  assume that's, by far,
         # the most common case in most applications.
         if "&" in text:
             text = text.replace("&", "&amp;")
diff -urpN Python-3.6.3/Lib/xmlrpc/client.py Python-3.6.5/Lib/xmlrpc/client.py
--- Python-3.6.3/Lib/xmlrpc/client.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Lib/xmlrpc/client.py	2018-03-28 11:19:31.000000000 +0200
@@ -1127,7 +1127,7 @@ class Transport:
     accept_gzip_encoding = True
 
     # if positive, encode request using gzip if it exceeds this threshold
-    # note that many server will get confused, so only use it if you know
+    # note that many servers will get confused, so only use it if you know
     # that they can decode such a request
     encode_threshold = None #None = don't encode
 
@@ -1258,7 +1258,7 @@ class Transport:
     # Send HTTP request.
     #
     # @param host Host descriptor (URL or (URL, x509 info) tuple).
-    # @param handler Targer RPC handler (a path relative to host)
+    # @param handler Target RPC handler (a path relative to host)
     # @param request_body The XML-RPC request body
     # @param debug Enable debugging if debug is true.
     # @return An HTTPConnection.
diff -urpN Python-3.6.3/Mac/BuildScript/build-installer.py Python-3.6.5/Mac/BuildScript/build-installer.py
--- Python-3.6.3/Mac/BuildScript/build-installer.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Mac/BuildScript/build-installer.py	2018-03-28 11:19:31.000000000 +0200
@@ -1,30 +1,36 @@
 #!/usr/bin/env python
 """
-This script is used to build "official" universal installers on Mac OS X.
-It requires at least Mac OS X 10.5, Xcode 3, and the 10.4u SDK for
-32-bit builds.  64-bit or four-way universal builds require at least
-OS X 10.5 and the 10.5 SDK.
+This script is used to build "official" universal installers on macOS.
+
+NEW for 3.6.5:
+- support Intel 64-bit-only () and 32-bit-only installer builds
+- build and link with private Tcl/Tk 8.6 for 10.9+ builds
+- deprecate use of explicit SDK (--sdk-path=) since all but the oldest
+  versions of Xcode support implicit setting of an SDK via environment
+  variables (SDKROOT and friends, see the xcrun man page for more info).
+  The SDK stuff was primarily needed for building universal installers
+  for 10.4; so as of 3.6.5, building installers for 10.4 is no longer
+  supported with build-installer.
+- use generic "gcc" as compiler (CC env var) rather than "gcc-4.2"
 
 Please ensure that this script keeps working with Python 2.5, to avoid
-bootstrap issues (/usr/bin/python is Python 2.5 on OSX 10.5).  Sphinx,
-which is used to build the documentation, currently requires at least
-Python 2.4.  However, as of Python 3.4.1, Doc builds require an external
-sphinx-build and the current versions of Sphinx now require at least
-Python 2.6.
-
-In addition to what is supplied with OS X 10.5+ and Xcode 3+, the script
-requires an installed third-party version of
-Tcl/Tk 8.4 (for OS X 10.4 and 10.5 deployment targets) or Tcl/TK 8.5
+bootstrap issues (/usr/bin/python is Python 2.5 on OSX 10.5).  Doc builds
+use current versions of Sphinx and require a reasonably current python3.
+Sphinx and dependencies are installed into a venv using the python3's pip
+so will fetch them from PyPI if necessary.  Since python3 is now used for
+Sphinx, build-installer.py should also be converted to use python3!
+
+For 10.9 or greater deployment targets, build-installer builds and links
+with its own copy of Tcl/Tk 8.5 and the rest of this paragraph does not
+apply.  Otherwise, build-installer requires an installed third-party version
+of Tcl/Tk 8.4 (for OS X 10.4 and 10.5 deployment targets) or Tcl/TK 8.5
 (for 10.6 or later) installed in /Library/Frameworks.  When installed,
 the Python built by this script will attempt to dynamically link first to
 Tcl and Tk frameworks in /Library/Frameworks if available otherwise fall
 back to the ones in /System/Library/Framework.  For the build, we recommend
-installing the most recent ActiveTcl 8.4 or 8.5 version.
-
-32-bit-only installer builds are still possible on OS X 10.4 with Xcode 2.5
-and the installation of additional components, such as a newer Python
-(2.5 is needed for Python parser updates) and for the documentation
-build either svn (pre-3.4.1) or sphinx-build (3.4.1 and later).
+installing the most recent ActiveTcl 8.5 or 8.4 version, depending
+on the deployment target.  The actual version linked to depends on the
+path of /Library/Frameworks/{Tcl,Tk}.framework/Versions/Current.
 
 Usage: see USAGE variable in the script.
 """
@@ -111,32 +117,19 @@ WORKDIR = "/tmp/_py"
 DEPSRC = os.path.join(WORKDIR, 'third-party')
 DEPSRC = os.path.expanduser('~/Universal/other-sources')
 
-# Location of the preferred SDK
-
-### There are some issues with the SDK selection below here,
-### The resulting binary doesn't work on all platforms that
-### it should. Always default to the 10.4u SDK until that
-### issue is resolved.
-###
-##if int(os.uname()[2].split('.')[0]) == 8:
-##    # Explicitly use the 10.4u (universal) SDK when
-##    # building on 10.4, the system headers are not
-##    # useable for a universal build
-##    SDKPATH = "/Developer/SDKs/MacOSX10.4u.sdk"
-##else:
-##    SDKPATH = "/"
-
-SDKPATH = "/Developer/SDKs/MacOSX10.4u.sdk"
-
 universal_opts_map = { '32-bit': ('i386', 'ppc',),
                        '64-bit': ('x86_64', 'ppc64',),
                        'intel':  ('i386', 'x86_64'),
+                       'intel-32':  ('i386',),
+                       'intel-64':  ('x86_64',),
                        '3-way':  ('ppc', 'i386', 'x86_64'),
                        'all':    ('i386', 'ppc', 'x86_64', 'ppc64',) }
 default_target_map = {
         '64-bit': '10.5',
         '3-way': '10.5',
         'intel': '10.5',
+        'intel-32': '10.4',
+        'intel-64': '10.5',
         'all': '10.5',
 }
 
@@ -154,19 +147,18 @@ SRCDIR = os.path.dirname(
         ))))
 
 # $MACOSX_DEPLOYMENT_TARGET -> minimum OS X level
-DEPTARGET = '10.3'
+DEPTARGET = '10.5'
 
 def getDeptargetTuple():
     return tuple([int(n) for n in DEPTARGET.split('.')[0:2]])
 
 def getTargetCompilers():
     target_cc_map = {
-        '10.3': ('gcc-4.0', 'g++-4.0'),
         '10.4': ('gcc-4.0', 'g++-4.0'),
-        '10.5': ('gcc-4.2', 'g++-4.2'),
-        '10.6': ('gcc-4.2', 'g++-4.2'),
+        '10.5': ('gcc', 'g++'),
+        '10.6': ('gcc', 'g++'),
     }
-    return target_cc_map.get(DEPTARGET, ('clang', 'clang++') )
+    return target_cc_map.get(DEPTARGET, ('gcc', 'g++') )
 
 CC, CXX = getTargetCompilers()
 
@@ -180,9 +172,9 @@ USAGE = textwrap.dedent("""\
     -b DIR
     --build-dir=DIR:     Create build here (default: %(WORKDIR)r)
     --third-party=DIR:   Store third-party sources here (default: %(DEPSRC)r)
-    --sdk-path=DIR:      Location of the SDK (default: %(SDKPATH)r)
+    --sdk-path=DIR:      Location of the SDK (deprecated, use SDKROOT env variable)
     --src-dir=DIR:       Location of the Python sources (default: %(SRCDIR)r)
-    --dep-target=10.n    OS X deployment target (default: %(DEPTARGET)r)
+    --dep-target=10.n    macOS deployment target (default: %(DEPTARGET)r)
     --universal-archs=x  universal architectures (options: %(UNIVERSALOPTS)r, default: %(UNIVERSALARCHS)r)
 """)% globals()
 
@@ -194,6 +186,11 @@ USAGE = textwrap.dedent("""\
 #                       '/Library/Frameworks/Tk.framework/Versions/8.5/Tk']
 EXPECTED_SHARED_LIBS = {}
 
+# Are we building and linking with our own copy of Tcl/TK?
+#   For now, do so if deployment target is 10.9+.
+def internalTk():
+    return getDeptargetTuple() >= (10, 9)
+
 # List of names of third party software built with this installer.
 # The names will be inserted into the rtf version of the License.
 THIRD_PARTY_LIBS = []
@@ -213,25 +210,21 @@ def library_recipes():
 
     result.extend([
           dict(
-              name="OpenSSL 1.0.2k",
-              url="https://www.openssl.org/source/openssl-1.0.2k.tar.gz",
-              checksum='f965fc0bf01bf882b31314b61391ae65',
-              patches=[
-                  "openssl_sdk_makedepend.patch",
-                   ],
+              name="OpenSSL 1.0.2n",
+              url="https://www.openssl.org/source/openssl-1.0.2n.tar.gz",
+              checksum='13bdc1b1d1ff39b6fd42a255e74676a4',
               buildrecipe=build_universal_openssl,
               configure=None,
               install=None,
           ),
     ])
 
-#   Disable for now
-    if False:   # if getDeptargetTuple() > (10, 5):
+    if internalTk():
         result.extend([
           dict(
-              name="Tcl 8.5.15",
-              url="ftp://ftp.tcl.tk/pub/tcl//tcl8_5/tcl8.5.15-src.tar.gz",
-              checksum='f3df162f92c69b254079c4d0af7a690f',
+              name="Tcl 8.6.8",
+              url="ftp://ftp.tcl.tk/pub/tcl//tcl8_6/tcl8.6.8-src.tar.gz",
+              checksum='81656d3367af032e0ae6157eff134f89',
               buildDir="unix",
               configure_pre=[
                     '--enable-shared',
@@ -241,15 +234,15 @@ def library_recipes():
               useLDFlags=False,
               install='make TCL_LIBRARY=%(TCL_LIBRARY)s && make install TCL_LIBRARY=%(TCL_LIBRARY)s DESTDIR=%(DESTDIR)s'%{
                   "DESTDIR": shellQuote(os.path.join(WORKDIR, 'libraries')),
-                  "TCL_LIBRARY": shellQuote('/Library/Frameworks/Python.framework/Versions/%s/lib/tcl8.5'%(getVersion())),
+                  "TCL_LIBRARY": shellQuote('/Library/Frameworks/Python.framework/Versions/%s/lib/tcl8.6'%(getVersion())),
                   },
               ),
           dict(
-              name="Tk 8.5.15",
-              url="ftp://ftp.tcl.tk/pub/tcl//tcl8_5/tk8.5.15-src.tar.gz",
-              checksum='55b8e33f903210a4e1c8bce0f820657f',
+              name="Tk 8.6.8",
+              url="ftp://ftp.tcl.tk/pub/tcl//tcl8_6/tk8.6.8-src.tar.gz",
+              checksum='5e0faecba458ee1386078fb228d008ba',
               patches=[
-                  "issue19373_tk_8_5_15_source.patch",
+                  "tk868_on_10_8_10_9.patch",
                    ],
               buildDir="unix",
               configure_pre=[
@@ -261,8 +254,8 @@ def library_recipes():
               useLDFlags=False,
               install='make TCL_LIBRARY=%(TCL_LIBRARY)s TK_LIBRARY=%(TK_LIBRARY)s && make install TCL_LIBRARY=%(TCL_LIBRARY)s TK_LIBRARY=%(TK_LIBRARY)s DESTDIR=%(DESTDIR)s'%{
                   "DESTDIR": shellQuote(os.path.join(WORKDIR, 'libraries')),
-                  "TCL_LIBRARY": shellQuote('/Library/Frameworks/Python.framework/Versions/%s/lib/tcl8.5'%(getVersion())),
-                  "TK_LIBRARY": shellQuote('/Library/Frameworks/Python.framework/Versions/%s/lib/tk8.5'%(getVersion())),
+                  "TCL_LIBRARY": shellQuote('/Library/Frameworks/Python.framework/Versions/%s/lib/tcl8.6'%(getVersion())),
+                  "TK_LIBRARY": shellQuote('/Library/Frameworks/Python.framework/Versions/%s/lib/tk8.6'%(getVersion())),
                   },
                 ),
         ])
@@ -270,9 +263,9 @@ def library_recipes():
     if PYTHON_3:
         result.extend([
           dict(
-              name="XZ 5.2.2",
-              url="http://tukaani.org/xz/xz-5.2.2.tar.gz",
-              checksum='7cf6a8544a7dae8e8106fdf7addfa28c',
+              name="XZ 5.2.3",
+              url="http://tukaani.org/xz/xz-5.2.3.tar.gz",
+              checksum='ef68674fb47a8b8e741b34e429d86e9d',
               configure_pre=[
                     '--disable-dependency-tracking',
               ]
@@ -315,13 +308,14 @@ def library_recipes():
                   ),
           ),
           dict(
-              name="SQLite 3.14.2",
-              url="https://www.sqlite.org/2016/sqlite-autoconf-3140200.tar.gz",
-              checksum='90c53cacb811db27f990b8292bd96159',
+              name="SQLite 3.22.0",
+              url="https://www.sqlite.org/2018/sqlite-autoconf-3220000.tar.gz",
+              checksum='96b5648d542e8afa6ab7ffb8db8ddc3d',
               extra_cflags=('-Os '
                             '-DSQLITE_ENABLE_FTS5 '
                             '-DSQLITE_ENABLE_FTS4 '
                             '-DSQLITE_ENABLE_FTS3_PARENTHESIS '
+                            '-DSQLITE_ENABLE_JSON1 '
                             '-DSQLITE_ENABLE_RTREE '
                             '-DSQLITE_TCL=0 '
                  '%s' % ('','-DSQLITE_WITHOUT_ZONEMALLOC ')[LT_10_5]),
@@ -342,11 +336,10 @@ def library_recipes():
               url="http://bzip.org/1.0.6/bzip2-1.0.6.tar.gz",
               checksum='00b516f4704d4a7cb50a1d97e6e8e15b',
               configure=None,
-              install='make install CC=%s CXX=%s, PREFIX=%s/usr/local/ CFLAGS="-arch %s -isysroot %s"'%(
+              install='make install CC=%s CXX=%s, PREFIX=%s/usr/local/ CFLAGS="-arch %s"'%(
                   CC, CXX,
                   shellQuote(os.path.join(WORKDIR, 'libraries')),
                   ' -arch '.join(ARCHLIST),
-                  SDKPATH,
               ),
           ),
           dict(
@@ -354,11 +347,10 @@ def library_recipes():
               url="http://www.gzip.org/zlib/zlib-1.2.3.tar.gz",
               checksum='debc62758716a169df9f62e6ab2bc634',
               configure=None,
-              install='make install CC=%s CXX=%s, prefix=%s/usr/local/ CFLAGS="-arch %s -isysroot %s"'%(
+              install='make install CC=%s CXX=%s, prefix=%s/usr/local/ CFLAGS="-arch %s"'%(
                   CC, CXX,
                   shellQuote(os.path.join(WORKDIR, 'libraries')),
                   ' -arch '.join(ARCHLIST),
-                  SDKPATH,
               ),
           ),
           dict(
@@ -405,8 +397,7 @@ def pkg_recipes():
             source="/Library/Frameworks/Python.framework",
             readme="""\
                 This package installs Python.framework, that is the python
-                interpreter and the standard library. This also includes Python
-                wrappers for lots of Mac OS X API's.
+                interpreter and the standard library.
             """,
             postflight="scripts/postflight.framework",
             selected='selected',
@@ -483,24 +474,6 @@ def pkg_recipes():
         ),
     ]
 
-    if getDeptargetTuple() < (10, 4) and not PYTHON_3:
-        result.append(
-            dict(
-                name="PythonSystemFixes",
-                long_name="Fix system Python",
-                readme="""\
-                    This package updates the system python installation on
-                    Mac OS X 10.3 to ensure that you can build new python extensions
-                    using that copy of python after installing this version.
-                    """,
-                postflight="../Tools/fixapplepython23.py",
-                topdir="/Library/Frameworks/Python.framework",
-                source="/empty-dir",
-                required=False,
-                selected=unselected_for_python3,
-            )
-        )
-
     return result
 
 def fatal(msg):
@@ -565,55 +538,54 @@ def checkEnvironment():
     Check that we're running on a supported system.
     """
 
-    if sys.version_info[0:2] < (2, 4):
-        fatal("This script must be run with Python 2.4 or later")
+    if sys.version_info[0:2] < (2, 5):
+        fatal("This script must be run with Python 2.5 (or later)")
 
     if platform.system() != 'Darwin':
-        fatal("This script should be run on a Mac OS X 10.4 (or later) system")
+        fatal("This script should be run on a macOS 10.5 (or later) system")
 
     if int(platform.release().split('.')[0]) < 8:
-        fatal("This script should be run on a Mac OS X 10.4 (or later) system")
-
-    if not os.path.exists(SDKPATH):
-        fatal("Please install the latest version of Xcode and the %s SDK"%(
-            os.path.basename(SDKPATH[:-4])))
+        fatal("This script should be run on a macOS 10.5 (or later) system")
 
     # Because we only support dynamic load of only one major/minor version of
+    # Tcl/Tk, if we are not using building and using our own private copy of
     # Tcl/Tk, ensure:
-    # 1. there are no user-installed frameworks of Tcl/Tk with version
-    #       higher than the Apple-supplied system version in
-    #       SDKROOT/System/Library/Frameworks
-    # 2. there is a user-installed framework (usually ActiveTcl) in (or linked
-    #       in) SDKROOT/Library/Frameworks with the same version as the system
-    #       version. This allows users to choose to install a newer patch level.
-
-    frameworks = {}
-    for framework in ['Tcl', 'Tk']:
-        fwpth = 'Library/Frameworks/%s.framework/Versions/Current' % framework
-        sysfw = os.path.join(SDKPATH, 'System', fwpth)
-        libfw = os.path.join(SDKPATH, fwpth)
-        usrfw = os.path.join(os.getenv('HOME'), fwpth)
-        frameworks[framework] = os.readlink(sysfw)
-        if not os.path.exists(libfw):
-            fatal("Please install a link to a current %s %s as %s so "
-                    "the user can override the system framework."
-                    % (framework, frameworks[framework], libfw))
-        if os.readlink(libfw) != os.readlink(sysfw):
-            fatal("Version of %s must match %s" % (libfw, sysfw) )
-        if os.path.exists(usrfw):
-            fatal("Please rename %s to avoid possible dynamic load issues."
-                    % usrfw)
-
-    if frameworks['Tcl'] != frameworks['Tk']:
-        fatal("The Tcl and Tk frameworks are not the same version.")
-
-    # add files to check after build
-    EXPECTED_SHARED_LIBS['_tkinter.so'] = [
-            "/Library/Frameworks/Tcl.framework/Versions/%s/Tcl"
-                % frameworks['Tcl'],
-            "/Library/Frameworks/Tk.framework/Versions/%s/Tk"
-                % frameworks['Tk'],
-            ]
+    # 1. there is a user-installed framework (usually ActiveTcl) in (or linked
+    #       in) SDKROOT/Library/Frameworks.  As of Python 3.6.5, we no longer
+    #       enforce that the version of the user-installed framework also
+    #       exists in the system-supplied Tcl/Tk frameworks.  Time to support
+    #       Tcl/Tk 8.6 even if Apple does not.
+    if not internalTk():
+        frameworks = {}
+        for framework in ['Tcl', 'Tk']:
+            fwpth = 'Library/Frameworks/%s.framework/Versions/Current' % framework
+            libfw = os.path.join('/', fwpth)
+            usrfw = os.path.join(os.getenv('HOME'), fwpth)
+            frameworks[framework] = os.readlink(libfw)
+            if not os.path.exists(libfw):
+                fatal("Please install a link to a current %s %s as %s so "
+                        "the user can override the system framework."
+                        % (framework, frameworks[framework], libfw))
+            if os.path.exists(usrfw):
+                fatal("Please rename %s to avoid possible dynamic load issues."
+                        % usrfw)
+
+        if frameworks['Tcl'] != frameworks['Tk']:
+            fatal("The Tcl and Tk frameworks are not the same version.")
+
+        print(" -- Building with external Tcl/Tk %s frameworks"
+                    % frameworks['Tk'])
+
+        # add files to check after build
+        EXPECTED_SHARED_LIBS['_tkinter.so'] = [
+                "/Library/Frameworks/Tcl.framework/Versions/%s/Tcl"
+                    % frameworks['Tcl'],
+                "/Library/Frameworks/Tk.framework/Versions/%s/Tk"
+                    % frameworks['Tk'],
+                ]
+    else:
+        print(" -- Building private copy of Tcl/Tk")
+    print("")
 
     # Remove inherited environment variables which might influence build
     environ_var_prefixes = ['CPATH', 'C_INCLUDE_', 'DYLD_', 'LANG', 'LC_',
@@ -643,7 +615,7 @@ def parseOptions(args=None):
     """
     Parse arguments and update global settings.
     """
-    global WORKDIR, DEPSRC, SDKPATH, SRCDIR, DEPTARGET
+    global WORKDIR, DEPSRC, SRCDIR, DEPTARGET
     global UNIVERSALOPTS, UNIVERSALARCHS, ARCHLIST, CC, CXX
     global FW_VERSION_PREFIX
     global FW_SSL_DIRECTORY
@@ -676,7 +648,7 @@ def parseOptions(args=None):
             DEPSRC=v
 
         elif k in ('--sdk-path',):
-            SDKPATH=v
+            print(" WARNING: --sdk-path is no longer supported")
 
         elif k in ('--src-dir',):
             SRCDIR=v
@@ -692,7 +664,7 @@ def parseOptions(args=None):
                 if deptarget is None:
                     # Select alternate default deployment
                     # target
-                    DEPTARGET = default_target_map.get(v, '10.3')
+                    DEPTARGET = default_target_map.get(v, '10.5')
             else:
                 raise NotImplementedError(v)
 
@@ -701,7 +673,6 @@ def parseOptions(args=None):
 
     SRCDIR=os.path.abspath(SRCDIR)
     WORKDIR=os.path.abspath(WORKDIR)
-    SDKPATH=os.path.abspath(SDKPATH)
     DEPSRC=os.path.abspath(DEPSRC)
 
     CC, CXX = getTargetCompilers()
@@ -712,7 +683,6 @@ def parseOptions(args=None):
     print("-- Settings:")
     print("   * Source directory:    %s" % SRCDIR)
     print("   * Build directory:     %s" % WORKDIR)
-    print("   * SDK location:        %s" % SDKPATH)
     print("   * Third-party source:  %s" % DEPSRC)
     print("   * Deployment target:   %s" % DEPTARGET)
     print("   * Universal archs:     %s" % str(ARCHLIST))
@@ -844,7 +814,6 @@ def build_universal_openssl(basedir, arc
             "enable-tlsext",
             "no-ssl2",
             "no-ssl3",
-            "no-ssl3-method",
             # "enable-unit-test",
             "shared",
             "--install_prefix=%s"%shellQuote(archbase),
@@ -855,9 +824,9 @@ def build_universal_openssl(basedir, arc
             configure_opts.append("no-asm")
         runCommand(" ".join(["perl", "Configure"]
                         + arch_opts[arch] + configure_opts))
-        runCommand("make depend OSX_SDK=%s" % SDKPATH)
-        runCommand("make all OSX_SDK=%s" % SDKPATH)
-        runCommand("make install_sw OSX_SDK=%s" % SDKPATH)
+        runCommand("make depend")
+        runCommand("make all")
+        runCommand("make install_sw")
         # runCommand("make test")
         return
 
@@ -1016,27 +985,24 @@ def buildRecipe(recipe, basedir, archLis
 
         if recipe.get('useLDFlags', 1):
             configure_args.extend([
-                "CFLAGS=%s-mmacosx-version-min=%s -arch %s -isysroot %s "
+                "CFLAGS=%s-mmacosx-version-min=%s -arch %s "
                             "-I%s/usr/local/include"%(
                         recipe.get('extra_cflags', ''),
                         DEPTARGET,
                         ' -arch '.join(archList),
-                        shellQuote(SDKPATH)[1:-1],
                         shellQuote(basedir)[1:-1],),
-                "LDFLAGS=-mmacosx-version-min=%s -isysroot %s -L%s/usr/local/lib -arch %s"%(
+                "LDFLAGS=-mmacosx-version-min=%s -L%s/usr/local/lib -arch %s"%(
                     DEPTARGET,
-                    shellQuote(SDKPATH)[1:-1],
                     shellQuote(basedir)[1:-1],
                     ' -arch '.join(archList)),
             ])
         else:
             configure_args.extend([
-                "CFLAGS=%s-mmacosx-version-min=%s -arch %s -isysroot %s "
+                "CFLAGS=%s-mmacosx-version-min=%s -arch %s "
                             "-I%s/usr/local/include"%(
                         recipe.get('extra_cflags', ''),
                         DEPTARGET,
                         ' -arch '.join(archList),
-                        shellQuote(SDKPATH)[1:-1],
                         shellQuote(basedir)[1:-1],),
             ])
 
@@ -1081,7 +1047,7 @@ def buildLibraries():
 
 def buildPythonDocs():
     # This stores the documentation as Resources/English.lproj/Documentation
-    # inside the framwork. pydoc and IDLE will pick it up there.
+    # inside the framework. pydoc and IDLE will pick it up there.
     print("Install python documentation")
     rootDir = os.path.join(WORKDIR, '_root')
     buildDir = os.path.join('../../Doc')
@@ -1114,10 +1080,6 @@ def buildPython():
     curdir = os.getcwd()
     os.chdir(buildDir)
 
-    # Not sure if this is still needed, the original build script
-    # claims that parts of the install assume python.exe exists.
-    os.symlink('python', os.path.join(buildDir, 'python.exe'))
-
     # Extract the version from the configure file, needed to calculate
     # several paths.
     version = getVersion()
@@ -1128,16 +1090,22 @@ def buildPython():
     os.environ['DYLD_LIBRARY_PATH'] = os.path.join(WORKDIR,
                                         'libraries', 'usr', 'local', 'lib')
     print("Running configure...")
-    runCommand("%s -C --enable-framework --enable-universalsdk=%s "
+    runCommand("%s -C --enable-framework --enable-universalsdk=/ "
                "--with-universal-archs=%s "
                "%s "
                "%s "
+               "%s "
+               "%s "
                "LDFLAGS='-g -L%s/libraries/usr/local/lib' "
                "CFLAGS='-g -I%s/libraries/usr/local/include' 2>&1"%(
-        shellQuote(os.path.join(SRCDIR, 'configure')), shellQuote(SDKPATH),
+        shellQuote(os.path.join(SRCDIR, 'configure')),
         UNIVERSALARCHS,
         (' ', '--with-computed-gotos ')[PYTHON_3],
         (' ', '--without-ensurepip ')[PYTHON_3],
+        (' ', "--with-tcltk-includes='-I%s/libraries/usr/local/include'"%(
+                            shellQuote(WORKDIR)[1:-1],))[internalTk()],
+        (' ', "--with-tcltk-libs='-L%s/libraries/usr/local/lib -ltcl8.6 -ltk8.6'"%(
+                            shellQuote(WORKDIR)[1:-1],))[internalTk()],
         shellQuote(WORKDIR)[1:-1],
         shellQuote(WORKDIR)[1:-1]))
 
@@ -1172,14 +1140,22 @@ def buildPython():
     del os.environ['DYLD_LIBRARY_PATH']
     print("Copying required shared libraries")
     if os.path.exists(os.path.join(WORKDIR, 'libraries', 'Library')):
-        runCommand("mv %s/* %s"%(
-            shellQuote(os.path.join(
+        build_lib_dir = os.path.join(
                 WORKDIR, 'libraries', 'Library', 'Frameworks',
-                'Python.framework', 'Versions', getVersion(),
-                'lib')),
-            shellQuote(os.path.join(WORKDIR, '_root', 'Library', 'Frameworks',
-                'Python.framework', 'Versions', getVersion(),
-                'lib'))))
+                'Python.framework', 'Versions', getVersion(), 'lib')
+        fw_lib_dir = os.path.join(
+                WORKDIR, '_root', 'Library', 'Frameworks',
+                'Python.framework', 'Versions', getVersion(), 'lib')
+        if internalTk():
+            # move Tcl and Tk pkgconfig files
+            runCommand("mv %s/pkgconfig/* %s/pkgconfig"%(
+                        shellQuote(build_lib_dir),
+                        shellQuote(fw_lib_dir) ))
+            runCommand("rm -r %s/pkgconfig"%(
+                        shellQuote(build_lib_dir), ))
+        runCommand("mv %s/* %s"%(
+                    shellQuote(build_lib_dir),
+                    shellQuote(fw_lib_dir) ))
 
     frmDir = os.path.join(rootDir, 'Library', 'Frameworks', 'Python.framework')
     frmDirVersioned = os.path.join(frmDir, 'Versions', version)
diff -urpN Python-3.6.3/Mac/BuildScript/issue19373_tk_8_5_15_source.patch Python-3.6.5/Mac/BuildScript/issue19373_tk_8_5_15_source.patch
--- Python-3.6.3/Mac/BuildScript/issue19373_tk_8_5_15_source.patch	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Mac/BuildScript/issue19373_tk_8_5_15_source.patch	1970-01-01 01:00:00.000000000 +0100
@@ -1,13 +0,0 @@
-Issue #19373: Patch to Tk 8.5.15 to correct refresh problem on OS x 10.9.
-From upstream checkin https://core.tcl.tk/tk/info/5a5abf71f9
-
---- tk8.5.15/macosx/tkMacOSXDraw.c	2013-09-16 09:41:21.000000000 -0700
-+++ Tk_Source_Code-5a5abf71f9fdb0da/macosx/tkMacOSXDraw.c	2013-10-27 13:27:00.000000000 -0700
-@@ -1688,6 +1688,7 @@
- {
-     if (dcPtr->context) {
- 	CGContextSynchronize(dcPtr->context);
-+	[[dcPtr->view window] setViewsNeedDisplay:YES];
- 	[[dcPtr->view window] enableFlushWindow];
- 	if (dcPtr->focusLocked) {
- 	    [dcPtr->view unlockFocus];
diff -urpN Python-3.6.3/Mac/BuildScript/openssl_sdk_makedepend.patch Python-3.6.5/Mac/BuildScript/openssl_sdk_makedepend.patch
--- Python-3.6.3/Mac/BuildScript/openssl_sdk_makedepend.patch	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Mac/BuildScript/openssl_sdk_makedepend.patch	1970-01-01 01:00:00.000000000 +0100
@@ -1,40 +0,0 @@
-# HG changeset patch
-#
-# 	using openssl 1.0.2k
-#
-# - support building with an OS X SDK
-
-diff Configure
-
-diff --git a/Configure b/Configure
---- a/Configure
-+++ b/Configure
-@@ -642,12 +642,12 @@
- 
- ##### MacOS X (a.k.a. Rhapsody or Darwin) setup
- "rhapsody-ppc-cc","cc:-O3 -DB_ENDIAN::(unknown):MACOSX_RHAPSODY::BN_LLONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${no_asm}::",
--"darwin-ppc-cc","cc:-arch ppc -O3 -DB_ENDIAN -Wa,-force_cpusubtype_ALL::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:BN_LLONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${ppc32_asm}:osx32:dlfcn:darwin-shared:-fPIC -fno-common:-arch ppc -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
--"darwin64-ppc-cc","cc:-arch ppc64 -O3 -DB_ENDIAN::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:SIXTY_FOUR_BIT_LONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${ppc64_asm}:osx64:dlfcn:darwin-shared:-fPIC -fno-common:-arch ppc64 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
--"darwin-i386-cc","cc:-arch i386 -O3 -fomit-frame-pointer -DL_ENDIAN::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:BN_LLONG RC4_INT RC4_CHUNK DES_UNROLL BF_PTR:".eval{my $asm=$x86_asm;$asm=~s/cast\-586\.o//;$asm}.":macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch i386 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
--"debug-darwin-i386-cc","cc:-arch i386 -g3 -DL_ENDIAN::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:BN_LLONG RC4_INT RC4_CHUNK DES_UNROLL BF_PTR:${x86_asm}:macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch i386 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
--"darwin64-x86_64-cc","cc:-arch x86_64 -O3 -DL_ENDIAN -Wall::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL:".eval{my $asm=$x86_64_asm;$asm=~s/rc4\-[^:]+//;$asm}.":macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch x86_64 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
--"debug-darwin64-x86_64-cc","cc:-arch x86_64 -ggdb -g2 -O0 -DL_ENDIAN -Wall::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL:".eval{my $asm=$x86_64_asm;$asm=~s/rc4\-[^:]+//;$asm}.":macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch x86_64 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
-+"darwin-ppc-cc","cc:-arch ppc -isysroot \$(OSX_SDK) -O3 -DB_ENDIAN -Wa,-force_cpusubtype_ALL::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:BN_LLONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${ppc32_asm}:osx32:dlfcn:darwin-shared:-fPIC -fno-common:-arch ppc -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
-+"darwin64-ppc-cc","cc:-arch ppc64 -isysroot \$(OSX_SDK) -O3 -DB_ENDIAN::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:SIXTY_FOUR_BIT_LONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${ppc64_asm}:osx64:dlfcn:darwin-shared:-fPIC -fno-common:-arch ppc64 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
-+"darwin-i386-cc","cc:-arch i386 -isysroot \$(OSX_SDK) -O3 -fomit-frame-pointer -DL_ENDIAN::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:BN_LLONG RC4_INT RC4_CHUNK DES_UNROLL BF_PTR:".eval{my $asm=$x86_asm;$asm=~s/cast\-586\.o//;$asm}.":macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch i386 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
-+"debug-darwin-i386-cc","cc:-arch i386 -isysroot \$(OSX_SDK) -g3 -DL_ENDIAN::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:BN_LLONG RC4_INT RC4_CHUNK DES_UNROLL BF_PTR:${x86_asm}:macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch i386 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
-+"darwin64-x86_64-cc","cc:-arch x86_64 -isysroot \$(OSX_SDK) -O3 -DL_ENDIAN -Wall::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL:".eval{my $asm=$x86_64_asm;$asm=~s/rc4\-[^:]+//;$asm}.":macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch x86_64 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
-+"debug-darwin64-x86_64-cc","cc:-arch x86_64 -isysroot \$(OSX_SDK) -ggdb -g2 -O0 -DL_ENDIAN -Wall::-D_REENTRANT:MACOSX:-Wl,-search_paths_first%:SIXTY_FOUR_BIT_LONG RC4_CHUNK DES_INT DES_UNROLL:".eval{my $asm=$x86_64_asm;$asm=~s/rc4\-[^:]+//;$asm}.":macosx:dlfcn:darwin-shared:-fPIC -fno-common:-arch x86_64 -dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
- "debug-darwin-ppc-cc","cc:-DBN_DEBUG -DREF_CHECK -DCONF_DEBUG -DCRYPTO_MDEBUG -DB_ENDIAN -g -Wall -O::-D_REENTRANT:MACOSX::BN_LLONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${ppc32_asm}:osx32:dlfcn:darwin-shared:-fPIC:-dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
- # iPhoneOS/iOS
- "iphoneos-cross","llvm-gcc:-O3 -isysroot \$(CROSS_TOP)/SDKs/\$(CROSS_SDK) -fomit-frame-pointer -fno-common::-D_REENTRANT:iOS:-Wl,-search_paths_first%:BN_LLONG RC4_CHAR RC4_CHUNK DES_UNROLL BF_PTR:${no_asm}:dlfcn:darwin-shared:-fPIC -fno-common:-dynamiclib:.\$(SHLIB_MAJOR).\$(SHLIB_MINOR).dylib",
-@@ -1728,8 +1728,7 @@
- 		s/^AR=\s*ar/AR= $ar/;
- 		s/^RANLIB=.*/RANLIB= $ranlib/;
- 		s/^RC=.*/RC= $windres/;
--		s/^MAKEDEPPROG=.*$/MAKEDEPPROG= $cc/ if $cc eq "gcc";
--		s/^MAKEDEPPROG=.*$/MAKEDEPPROG= $cc/ if $ecc eq "gcc" || $ecc eq "clang";
-+		s/^MAKEDEPPROG=.*$/MAKEDEPPROG= $cc/;
- 		}
- 	s/^CFLAG=.*$/CFLAG= $cflags/;
- 	s/^DEPFLAG=.*$/DEPFLAG=$depflags/;
diff -urpN Python-3.6.3/Mac/BuildScript/resources/Conclusion.rtf Python-3.6.5/Mac/BuildScript/resources/Conclusion.rtf
--- Python-3.6.3/Mac/BuildScript/resources/Conclusion.rtf	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/Mac/BuildScript/resources/Conclusion.rtf	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,20 @@
+{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
+{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande-Bold;\f2\fnil\fcharset0 LucidaGrande;
+\f3\fnil\fcharset0 Monaco;}
+{\colortbl;\red255\green255\blue255;}
+{\*\expandedcolortbl;;}
+\margl1440\margr1440\vieww10540\viewh8400\viewkind0
+\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
+
+\f0\fs28 \cf0 Congratulations!
+\fs24   
+\f1\b\fs28 Python $FULL_VERSION for macOS $MACOSX_DEPLOYMENT_TARGET
+\f2\b0  was successfully installed.
+\fs24 \
+\
+One more thing: to verify the identity of secure network connections, this Python needs a set of SSL root certificates.  You can download and install a current curated set from {\field{\*\fldinst{HYPERLINK "https://pypi.org/project/certifi/"}}{\fldrslt the Certifi project}} by double-clicking on the 
+\f3 Install Certificates
+\f2  icon in {\field{\*\fldinst{HYPERLINK "file://localhost/Applications/Python%20$VERSION/"}}{\fldrslt the Finder window}}.  See {\field{\*\fldinst{HYPERLINK "file://localhost/Applications/Python%20$VERSION/ReadMe.rtf"}}{\fldrslt the 
+\f3 ReadMe
+\f2  file}} for more information.\
+}
\ No newline at end of file
diff -urpN Python-3.6.3/Mac/BuildScript/resources/ReadMe.rtf Python-3.6.5/Mac/BuildScript/resources/ReadMe.rtf
--- Python-3.6.3/Mac/BuildScript/resources/ReadMe.rtf	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Mac/BuildScript/resources/ReadMe.rtf	2018-03-28 11:19:31.000000000 +0200
@@ -1,43 +1,44 @@
-{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf750
+{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
 {\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 CourierNewPSMT;}
 {\colortbl;\red255\green255\blue255;}
 {\*\expandedcolortbl;;}
 \margl1440\margr1440\vieww13380\viewh14600\viewkind0
 \pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
 
-\f0\fs24 \cf0 This package will install Python $FULL_VERSION for Mac OS X $MACOSX_DEPLOYMENT_TARGET for the following architecture(s): $ARCHITECTURES.\
+\f0\fs24 \cf0 This package will install Python $FULL_VERSION for macOS $MACOSX_DEPLOYMENT_TARGET for the following architecture(s): $ARCHITECTURES.\
 \
 \pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
 
-\b \cf0 \ul \ulc0 Which installer variant should I use?
+\b \cf0 \ul \ulc0 Which installer variant should I use? [CHANGED in 3.6.5]
 \b0 \ulnone \
 \
 \pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
 
 \b \cf0 **NEW**
-\b0  For Python 3.6, the python.org website now provides only one installer variant for download: one that installs a 
+\b0  With Python 3.6.5, the python.org website now provides two installer variants for download: one that installs a 
+\i 64-bit-only 
+\i0 Python capable of running on 
+\i macOS 10.9 (Mavericks)
+\i0  or later; and one that installs a 
 \i 64-bit/32-bit Intel
 \i0  Python capable of running on 
-\i Mac OS X 10.6 (Snow Leopard)
-\i0  or later.  This ReadMe was installed with the 
+\i macOS 10.6 (Snow Leopard)
+\i0  or later.  (This ReadMe was installed with the 
 \i $MACOSX_DEPLOYMENT_TARGET
-\i0  variant.  By default, Python will automatically run in 64-bit mode if your system supports it.  The Python installed by this installer is built with private copies of some third-party libraries not included with or newer than those in OS X itself.  The list of these libraries is included at the end of the License.rtf file.
-\b \ul \
-\
-Certificate verification and OpenSSL\
+\i0  variant.)  Previous Python 3.6.x releases only provided the 10.6 or later installer. If you are running on macOS 10.9 or later and if you have no need for compatibility with older systems, use the 10.9 variant.  Use the 10.6 variant if you are running on macOS 10.6 through 10.8, if you need to maintain compatibility with previous 3.6.x releases, or if you want to produce standalone applications that can run on systems from 10.6.  The Pythons installed by these installers are built with private copies of some third-party libraries not included with or newer than those in macOS itself.  The list of these libraries varies by installer variant and is included at the end of the License.rtf file.\
 \pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
 
-\b0 \cf0 \ulnone \
-\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
+\b \cf0 \ul \ulc0 \
+Certificate verification and OpenSSL\
 
-\b \cf0 **NEW**
-\b0  This variant of Python 3.6 now includes its own private copy of OpenSSL 1.0.2.  Unlike previous releases, the deprecated Apple-supplied OpenSSL libraries are no longer used.  This also means that the trust certificates in system and user keychains managed by the 
+\b0 \ulnone \
+This variant of Python 3.6 now includes its own private copy of OpenSSL 1.0.2.  Unlike previous releases, the deprecated Apple-supplied OpenSSL libraries are no longer used.  This also means that the trust certificates in system and user keychains managed by the 
 \i Keychain Access 
 \i0 application and the 
 \i security
 \i0  command line utility are no longer used as defaults by the Python 
 \f1 ssl
-\f0  module.  For 3.6.0, a sample command script is included in 
+\f0  module.  A sample command script is included in 
 \f1 /Applications/Python 3.6
 \f0  to install a curated bundle of default root certificates from the third-party 
 \f1 certifi
@@ -49,16 +50,17 @@ The bundled
 \f1 pip
 \f0  included with the Python 3.6 installer has its own default certificate store for verifying download connections.\
 \
-\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
 
-\b \cf0 \ul Update your version of Tcl/Tk to use IDLE or other Tk applications
+\b \ul Using IDLE or other Tk applications [NEW/CHANGED in 3.6.5] 
 \b0 \ulnone \
 \
-To use IDLE or other programs that use the Tkinter graphical user interface toolkit, you need to install a newer third-party version of the 
+The 10.9+ installer variant comes with its own private version of Tcl/Tk 8.6. It does not use system-supplied or third-party supplied versions of Tcl/Tk.\
+\
+For the 10.6+ variant, you continue to need to install a newer third-party version of the 
 \i Tcl/Tk
-\i0  frameworks.  Visit {\field{\*\fldinst{HYPERLINK "https://www.python.org/download/mac/tcltk/"}}{\fldrslt https://www.python.org/download/mac/tcltk/}} for current information about supported and recommended versions of 
+\i0  8.5 (not 8.6) frameworks to use IDLE or other programs that use the Tkinter graphical user interface toolkit.  Visit {\field{\*\fldinst{HYPERLINK "https://www.python.org/download/mac/tcltk/"}}{\fldrslt https://www.python.org/download/mac/tcltk/}} for current information about supported and recommended versions of 
 \i Tcl/Tk
-\i0  for this version of Python and of Mac OS X.  For the initial release of Python 3.6, the installer is still linked with Tcl/Tk 8.5.\
+\i0  for this version of Python and of macOS.\
 
 \b \ul \
 Other changes\
diff -urpN Python-3.6.3/Mac/BuildScript/resources/Welcome.rtf Python-3.6.5/Mac/BuildScript/resources/Welcome.rtf
--- Python-3.6.3/Mac/BuildScript/resources/Welcome.rtf	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Mac/BuildScript/resources/Welcome.rtf	2018-03-28 11:19:31.000000000 +0200
@@ -1,34 +1,24 @@
-{\rtf1\ansi\ansicpg1252\cocoartf1504
+{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
 \cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
 {\colortbl;\red255\green255\blue255;}
-{\*\expandedcolortbl;\csgray\c100000;}
+{\*\expandedcolortbl;;}
 \paperw11905\paperh16837\margl1440\margr1440\vieww12200\viewh10880\viewkind0
-\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\partightenfactor0
+\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
 
 \f0\fs24 \cf0 This package will install 
 \b Python $FULL_VERSION
 \b0  for 
-\b Mac OS X $MACOSX_DEPLOYMENT_TARGET
+\b macOS $MACOSX_DEPLOYMENT_TARGET
 \b0 .\
-\
+\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\partightenfactor0
+\cf0 \
 
-\b Python for Mac OS X
-\b0  consists of the Python programming language interpreter, plus a set of programs to allow easy access to it for Mac OS X users including an integrated development environment 
+\b Python for macOS
+\b0  consists of the Python programming language interpreter, plus a set of programs to allow easy access to it for macOS users including an integrated development environment 
 \b IDLE
 \b0 .\
 \
-\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\partightenfactor0
-
-\b \cf0 NEW:
-\b0   There are important changes in this release regarding network security and trust certificates.  Please see the ReadMe for more details.\
-\
-\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\partightenfactor0
 
-\b \cf0 IMPORTANT:
-\b0  
-\b IDLE
-\b0  and other programs using the 
-\b tkinter
-\b0  graphical user interface toolkit require specific versions of the 
-\b Tcl/Tk
-\b0  platform independent windowing toolkit.  Visit {\field{\*\fldinst{HYPERLINK "https://www.python.org/download/mac/tcltk/"}}{\fldrslt https://www.python.org/download/mac/tcltk/}} for current information on supported and recommended versions of Tcl/Tk for this version of Python and Mac OS X.}
\ No newline at end of file
+\b NEW in 3.6.5: 
+\b0 two installer variants (10.9+ 64-bit-only, 10.6+ 64-/32-bit), built-in Tcl/Tk 8.6 support in the 10.9+ variant (no additional third-party downloads!)\
+}
\ No newline at end of file
diff -urpN Python-3.6.3/Mac/BuildScript/scripts/postflight.documentation Python-3.6.5/Mac/BuildScript/scripts/postflight.documentation
--- Python-3.6.3/Mac/BuildScript/scripts/postflight.documentation	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Mac/BuildScript/scripts/postflight.documentation	2018-03-28 11:19:31.000000000 +0200
@@ -12,6 +12,7 @@ SHARE_DOCDIR_TO_FWK="../../.."
 # make link in /Applications/Python m.n/ for Finder users
 if [ -d "${APPDIR}" ]; then
     ln -fhs "${FWK_DOCDIR}/index.html" "${APPDIR}/Python Documentation.html"
+    open "${APPDIR}" || true  # open the applications folder
 fi
 
 # make share/doc link in framework for command line users
diff -urpN Python-3.6.3/Mac/BuildScript/tk868_on_10_8_10_9.patch Python-3.6.5/Mac/BuildScript/tk868_on_10_8_10_9.patch
--- Python-3.6.3/Mac/BuildScript/tk868_on_10_8_10_9.patch	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/Mac/BuildScript/tk868_on_10_8_10_9.patch	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,18 @@
+Fix build failure with +quartz variant on OS X 10.8 and 10.9.
+Even though Gestalt was deprecated in OS X 10.8, it should work fine
+through OS X 10.9, and its replacement NSOperatingSystemVersion was
+not introduced until OS X 10.10.
+
+Patch from MacPorts project and reported upstream:
+https://trac.macports.org/ticket/55649
+--- tk8.6.8/macosx/tkMacOSXXStubs.c.orig	2017-12-06 09:25:08.000000000 -0600
++++ tk8.6.8-patched/macosx/tkMacOSXXStubs.c	2018-01-06 19:34:17.000000000 -0600
+@@ -175,7 +175,7 @@
+     {
+ 	int major, minor, patch;
+ 
+-#if MAC_OS_X_VERSION_MIN_REQUIRED < 1080
++#if MAC_OS_X_VERSION_MIN_REQUIRED < 101000
+ 	Gestalt(gestaltSystemVersionMajor, (SInt32*)&major);
+ 	Gestalt(gestaltSystemVersionMinor, (SInt32*)&minor);
+ 	Gestalt(gestaltSystemVersionBugFix, (SInt32*)&patch);
diff -urpN Python-3.6.3/Mac/IDLE/IDLE.app/Contents/Info.plist Python-3.6.5/Mac/IDLE/IDLE.app/Contents/Info.plist
--- Python-3.6.3/Mac/IDLE/IDLE.app/Contents/Info.plist	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Mac/IDLE/IDLE.app/Contents/Info.plist	2018-03-28 11:19:31.000000000 +0200
@@ -36,7 +36,7 @@
 	<key>CFBundleExecutable</key>
 	<string>IDLE</string>
 	<key>CFBundleGetInfoString</key>
-	<string>%version%, © 2001-2017 Python Software Foundation</string>
+	<string>%version%, © 2001-2018 Python Software Foundation</string>
 	<key>CFBundleIconFile</key>
 	<string>IDLE.icns</string>
 	<key>CFBundleIdentifier</key>
diff -urpN Python-3.6.3/Mac/PythonLauncher/Info.plist.in Python-3.6.5/Mac/PythonLauncher/Info.plist.in
--- Python-3.6.3/Mac/PythonLauncher/Info.plist.in	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Mac/PythonLauncher/Info.plist.in	2018-03-28 11:19:31.000000000 +0200
@@ -40,7 +40,7 @@
 	<key>CFBundleExecutable</key>
 	<string>Python Launcher</string>
 	<key>CFBundleGetInfoString</key>
-	<string>%VERSION%, © 2001-2017 Python Software Foundation</string>
+	<string>%VERSION%, © 2001-2018 Python Software Foundation</string>
 	<key>CFBundleIconFile</key>
 	<string>PythonLauncher.icns</string>
 	<key>CFBundleIdentifier</key>
diff -urpN Python-3.6.3/Mac/Resources/app/Info.plist.in Python-3.6.5/Mac/Resources/app/Info.plist.in
--- Python-3.6.3/Mac/Resources/app/Info.plist.in	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Mac/Resources/app/Info.plist.in	2018-03-28 11:19:31.000000000 +0200
@@ -37,7 +37,7 @@
 	<key>CFBundleInfoDictionaryVersion</key>
 	<string>6.0</string>
 	<key>CFBundleLongVersionString</key>
-	<string>%version%, (c) 2001-2017 Python Software Foundation.</string>
+	<string>%version%, (c) 2001-2018 Python Software Foundation.</string>
 	<key>CFBundleName</key>
 	<string>Python</string>
 	<key>CFBundlePackageType</key>
diff -urpN Python-3.6.3/Mac/Resources/framework/Info.plist.in Python-3.6.5/Mac/Resources/framework/Info.plist.in
--- Python-3.6.3/Mac/Resources/framework/Info.plist.in	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Mac/Resources/framework/Info.plist.in	2018-03-28 11:19:31.000000000 +0200
@@ -17,9 +17,9 @@
 	<key>CFBundlePackageType</key>
 	<string>FMWK</string>
 	<key>CFBundleShortVersionString</key>
-	<string>%VERSION%, (c) 2001-2017 Python Software Foundation.</string>
+	<string>%VERSION%, (c) 2001-2018 Python Software Foundation.</string>
 	<key>CFBundleLongVersionString</key>
-	<string>%VERSION%, (c) 2001-2017 Python Software Foundation.</string>
+	<string>%VERSION%, (c) 2001-2018 Python Software Foundation.</string>
 	<key>CFBundleSignature</key>
 	<string>????</string>
 	<key>CFBundleVersion</key>
diff -urpN Python-3.6.3/Makefile.pre.in Python-3.6.5/Makefile.pre.in
--- Python-3.6.3/Makefile.pre.in	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Makefile.pre.in	2018-03-28 11:19:31.000000000 +0200
@@ -230,6 +230,7 @@ PYTHON=		python$(EXE)
 BUILDPYTHON=	python$(BUILDEXE)
 
 PYTHON_FOR_REGEN=@PYTHON_FOR_REGEN@
+UPDATE_FILE=@PYTHON_FOR_REGEN@ $(srcdir)/Tools/scripts/update_file.py
 PYTHON_FOR_BUILD=@PYTHON_FOR_BUILD@
 _PYTHON_HOST_PLATFORM=@_PYTHON_HOST_PLATFORM@
 BUILD_GNU_TYPE=	@build@
@@ -439,7 +440,17 @@ DTRACE_DEPS = \
 
 # Default target
 all:		@DEF_MAKE_ALL_RULE@
-build_all:	$(BUILDPYTHON) oldsharedmods sharedmods gdbhooks Programs/_testembed python-config
+build_all:	check-clean-src $(BUILDPYTHON) oldsharedmods sharedmods gdbhooks \
+		Programs/_testembed python-config
+
+# Check that the source is clean when building out of source.
+check-clean-src:
+	@if test -n "$(VPATH)" -a -f "$(srcdir)/Programs/python.o"; then \
+		echo "Error: The source directory ($(srcdir)) is not clean" ; \
+		echo "Building Python out of the source tree (in $(abs_builddir)) requires a clean source tree ($(abs_srcdir))" ; \
+		echo "Try to run: make -C \"$(srcdir)\" clean" ; \
+		exit 1; \
+	fi
 
 # Compile a binary with profile guided optimization.
 profile-opt:
@@ -527,10 +538,9 @@ coverage-report: regen-grammar regen-imp
 	$(MAKE) coverage-lcov
 
 # Run "Argument Clinic" over all source files
-# (depends on python having already been built)
 .PHONY=clinic
-clinic: $(BUILDPYTHON) $(srcdir)/Modules/_blake2/blake2s_impl.c
-	$(RUNSHARED) $(PYTHON_FOR_BUILD) ./Tools/clinic/clinic.py --make
+clinic: check-clean-src $(srcdir)/Modules/_blake2/blake2s_impl.c
+	$(PYTHON_FOR_REGEN) ./Tools/clinic/clinic.py --make
 
 # Build the interpreter
 $(BUILDPYTHON):	Programs/python.o $(LIBRARY) $(LDLIBRARY) $(PY3LIBRARY)
@@ -560,9 +570,9 @@ Modules/_math.o: Modules/_math.c Modules
 	$(CC) -c $(CCSHARED) $(PY_CORE_CFLAGS) -o $@ $<
 
 # blake2s is auto-generated from blake2b
-$(srcdir)/Modules/_blake2/blake2s_impl.c: $(BUILDPYTHON) $(srcdir)/Modules/_blake2/blake2b_impl.c $(srcdir)/Modules/_blake2/blake2b2s.py
-	$(RUNSHARED) $(PYTHON_FOR_BUILD) $(srcdir)/Modules/_blake2/blake2b2s.py
-	$(RUNSHARED) $(PYTHON_FOR_BUILD) $(srcdir)/Tools/clinic/clinic.py -f $@
+$(srcdir)/Modules/_blake2/blake2s_impl.c: $(srcdir)/Modules/_blake2/blake2b_impl.c $(srcdir)/Modules/_blake2/blake2b2s.py
+	$(PYTHON_FOR_REGEN) $(srcdir)/Modules/_blake2/blake2b2s.py
+	$(PYTHON_FOR_REGEN) $(srcdir)/Tools/clinic/clinic.py -f $@
 
 # Build the shared modules
 # Under GNU make, MAKEFLAGS are sorted and normalized; the 's' for
@@ -696,18 +706,21 @@ regen-importlib: Programs/_freeze_import
 	# from Lib/importlib/_bootstrap_external.py using _freeze_importlib
 	./Programs/_freeze_importlib \
 	    $(srcdir)/Lib/importlib/_bootstrap_external.py \
-	    $(srcdir)/Python/importlib_external.h
+	    $(srcdir)/Python/importlib_external.h.new
+	$(UPDATE_FILE) $(srcdir)/Python/importlib_external.h $(srcdir)/Python/importlib_external.h.new
 	# Regenerate Python/importlib.h from Lib/importlib/_bootstrap.py
 	# using _freeze_importlib
 	./Programs/_freeze_importlib \
 	    $(srcdir)/Lib/importlib/_bootstrap.py \
-	    $(srcdir)/Python/importlib.h
+	    $(srcdir)/Python/importlib.h.new
+	$(UPDATE_FILE) $(srcdir)/Python/importlib.h $(srcdir)/Python/importlib.h.new
 
 
 ############################################################################
 # Regenerate all generated files
 
-regen-all: regen-opcode regen-opcode-targets regen-typeslots regen-grammar regen-ast regen-importlib
+regen-all: regen-opcode regen-opcode-targets regen-typeslots regen-grammar \
+	regen-ast regen-importlib clinic
 
 ############################################################################
 # Special rules for object files
@@ -775,8 +788,10 @@ regen-grammar: $(PGEN)
 	# from Grammar/Grammar using pgen
 	@$(MKDIR_P) Include
 	$(PGEN) $(srcdir)/Grammar/Grammar \
-		$(srcdir)/Include/graminit.h \
-		$(srcdir)/Python/graminit.c
+		$(srcdir)/Include/graminit.h.new \
+		$(srcdir)/Python/graminit.c.new
+	$(UPDATE_FILE) $(srcdir)/Include/graminit.h $(srcdir)/Include/graminit.h.new
+	$(UPDATE_FILE) $(srcdir)/Python/graminit.c $(srcdir)/Python/graminit.c.new
 
 Parser/grammar.o:	$(srcdir)/Parser/grammar.c \
 				$(srcdir)/Include/token.h \
@@ -794,13 +809,15 @@ regen-ast:
 	# Regenerate Include/Python-ast.h using Parser/asdl_c.py -h
 	$(MKDIR_P) $(srcdir)/Include
 	$(PYTHON_FOR_REGEN) $(srcdir)/Parser/asdl_c.py \
-		-h $(srcdir)/Include \
+		-h $(srcdir)/Include/Python-ast.h.new \
 		$(srcdir)/Parser/Python.asdl
+	$(UPDATE_FILE) $(srcdir)/Include/Python-ast.h $(srcdir)/Include/Python-ast.h.new
 	# Regenerate Python/Python-ast.c using Parser/asdl_c.py -c
 	$(MKDIR_P) $(srcdir)/Python
 	$(PYTHON_FOR_REGEN) $(srcdir)/Parser/asdl_c.py \
-		-c $(srcdir)/Python \
+		-c $(srcdir)/Python/Python-ast.c.new \
 		$(srcdir)/Parser/Python.asdl
+	$(UPDATE_FILE) $(srcdir)/Python/Python-ast.c $(srcdir)/Python/Python-ast.c.new
 
 .PHONY: regen-opcode
 regen-opcode:
@@ -808,7 +825,8 @@ regen-opcode:
 	# using Tools/scripts/generate_opcode_h.py
 	$(PYTHON_FOR_REGEN) $(srcdir)/Tools/scripts/generate_opcode_h.py \
 		$(srcdir)/Lib/opcode.py \
-		$(srcdir)/Include/opcode.h
+		$(srcdir)/Include/opcode.h.new
+	$(UPDATE_FILE) $(srcdir)/Include/opcode.h $(srcdir)/Include/opcode.h.new
 
 Python/compile.o Python/symtable.o Python/ast.o: $(srcdir)/Include/graminit.h $(srcdir)/Include/Python-ast.h
 
@@ -865,7 +883,8 @@ regen-opcode-targets:
 	# Regenerate Python/opcode_targets.h from Lib/opcode.py
 	# using Python/makeopcodetargets.py
 	$(PYTHON_FOR_REGEN) $(srcdir)/Python/makeopcodetargets.py \
-		$(srcdir)/Python/opcode_targets.h
+		$(srcdir)/Python/opcode_targets.h.new
+	$(UPDATE_FILE) $(srcdir)/Python/opcode_targets.h $(srcdir)/Python/opcode_targets.h.new
 
 Python/ceval.o: $(srcdir)/Python/opcode_targets.h $(srcdir)/Python/ceval_gil.h
 
@@ -892,7 +911,8 @@ regen-typeslots:
 	# using Objects/typeslots.py
 	$(PYTHON_FOR_REGEN) $(srcdir)/Objects/typeslots.py \
 		< $(srcdir)/Include/typeslots.h \
-		$(srcdir)/Objects/typeslots.inc
+		$(srcdir)/Objects/typeslots.inc.new
+	$(UPDATE_FILE) $(srcdir)/Objects/typeslots.inc $(srcdir)/Objects/typeslots.inc.new
 
 ############################################################################
 # Header files
@@ -1081,7 +1101,7 @@ altinstall: commoninstall
 			$$ensurepip --root=$(DESTDIR)/ ; \
 	fi
 
-commoninstall:  @FRAMEWORKALTINSTALLFIRST@ \
+commoninstall:  check-clean-src @FRAMEWORKALTINSTALLFIRST@ \
 		altbininstall libinstall inclinstall libainstall \
 		sharedinstall oldsharedinstall altmaninstall \
 		@FRAMEWORKALTINSTALLLAST@
@@ -1579,10 +1599,9 @@ autoconf:
 
 # Create a tags file for vi
 tags::
-	cd $(srcdir); \
-	ctags -w Include/*.h; \
-	for i in $(SRCDIRS); do ctags -w -a $$i/*.[ch]; \
-	done; \
+	ctags -w $(srcdir)/Include/*.h
+	for i in $(SRCDIRS); do ctags -f tags -w -a $(srcdir)/$$i/*.[ch]; done
+	ctags -f tags -w -a $(srcdir)/Modules/_ctypes/*.[ch]
 	LC_ALL=C sort -o tags tags
 
 # Create a tags file for GNU Emacs
@@ -1704,7 +1723,7 @@ patchcheck: @DEF_MAKE_RULE@
 Python/thread.o: @THREADHEADERS@
 
 # Declare targets that aren't real files
-.PHONY: all build_all sharedmods oldsharedmods test quicktest
+.PHONY: all build_all sharedmods check-clean-src oldsharedmods test quicktest
 .PHONY: install altinstall oldsharedinstall bininstall altbininstall
 .PHONY: maninstall libinstall inclinstall libainstall sharedinstall
 .PHONY: frameworkinstall frameworkinstallframework frameworkinstallstructure
diff -urpN Python-3.6.3/Misc/ACKS Python-3.6.5/Misc/ACKS
--- Python-3.6.3/Misc/ACKS	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Misc/ACKS	2018-03-28 11:19:31.000000000 +0200
@@ -145,6 +145,7 @@ Dominic Binks
 Philippe Biondi
 Michael Birtwell
 Stuart Bishop
+Zane Bitter
 Roy Bixler
 Daniel Black
 Jonathan Black
@@ -289,6 +290,7 @@ Brad Clements
 Robbie Clemons
 Steve Clift
 Hervé Coatanhay
+Riccardo Coccioli
 Nick Coghlan
 Josh Cogliati
 Dave Cole
@@ -348,6 +350,8 @@ Kushal Das
 Jonathan Dasteel
 Pierre-Yves David
 A. Jesse Jiryu Davis
+Jake Davis
+Jamie (James C.) Davis
 Merlijn van Deen
 John DeGood
 Ned Deily
@@ -356,6 +360,7 @@ Vincent Delft
 Arnaud Delobelle
 Konrad Delong
 Erik Demaine
+Jeroen Demeyer
 Martin Dengler
 John Dennis
 L. Peter Deutsch
@@ -586,6 +591,7 @@ Milton L. Hankins
 Stephen Hansen
 Barry Hantman
 Lynda Hardman
+Bar Harel
 Derek Harland
 Jason Harper
 David Harrigan
@@ -608,6 +614,7 @@ Thomas Heller
 Malte Helmert
 Lance Finn Helsten
 Jonathan Hendry
+Nathan Henrie
 Michael Henry
 James Henstridge
 Kasun Herath
@@ -836,6 +843,7 @@ Pedro Kroger
 Hannu Krosing
 Andrej Krpic
 Ivan Krstić
+Anselm Kruis
 Steven Kryskalla
 Andrew Kuchling
 Dave Kuhlman
@@ -847,6 +855,7 @@ Vladimir Kushnir
 Erno Kuusela
 Ross Lagerwall
 Cameron Laird
+Loïc Lajeanne
 David Lam
 Thomas Lamb
 Valerie Lambert
@@ -1472,6 +1481,7 @@ Nicholas Spies
 Per Spilling
 Joshua Spoerri
 Noah Spurrier
+Zackery Spytz
 Nathan Srebro
 RajGopal Srinivasan
 Tage Stabell-Kulo
@@ -1521,6 +1531,7 @@ Joel Taddei
 Arfrever Frehtes Taifersar Arahesis
 Hideaki Takahashi
 Takase Arihiro
+Licht Takeuchi
 Indra Talip
 Neil Tallim
 Geoff Talvola
diff -urpN Python-3.6.3/Misc/NEWS Python-3.6.5/Misc/NEWS
--- Python-3.6.3/Misc/NEWS	2017-10-03 09:47:49.000000000 +0200
+++ Python-3.6.5/Misc/NEWS	2018-03-28 12:24:30.000000000 +0200
@@ -2,6 +2,789 @@
 Python News
 +++++++++++
 
+What's New in Python 3.6.5 final?
+=================================
+
+*Release date: 2018-03-28*
+
+Tests
+-----
+
+- bpo-32872: Avoid regrtest compatibility issue with namespace packages.
+
+Build
+-----
+
+- bpo-33163: Upgrade pip to 9.0.3 and setuptools to v39.0.1.
+
+
+What's New in Python 3.6.5 release candidate 1?
+===============================================
+
+*Release date: 2018-03-13*
+
+Security
+--------
+
+- bpo-33001: Minimal fix to prevent buffer overrun in os.symlink on Windows
+
+- bpo-32981: Regexes in difflib and poplib were vulnerable to catastrophic
+  backtracking. These regexes formed potential DOS vectors (REDOS). They
+  have been refactored. This resolves CVE-2018-1060 and CVE-2018-1061. Patch
+  by Jamie Davis.
+
+Core and Builtins
+-----------------
+
+- bpo-33026: Fixed jumping out of "with" block by setting f_lineno.
+
+- bpo-17288: Prevent jumps from 'return' and 'exception' trace events.
+
+- bpo-32889: Update Valgrind suppression list to account for the rename of
+  ``Py_ADDRESS_IN_RANG`` to ``address_in_range``.
+
+- bpo-32650: Pdb and other debuggers dependent on bdb.py will correctly step
+  over (next command) native coroutines. Patch by Pablo Galindo.
+
+- bpo-32685: Improve suggestion when the Python 2 form of print statement is
+  either present on the same line as the header of a compound statement or
+  else terminated by a semi-colon instead of a newline. Patch by Nitish
+  Chandra.
+
+- bpo-32583: Fix possible crashing in builtin Unicode decoders caused by
+  write out-of- bound errors when using customized decode error handlers.
+
+- bpo-26163: Improved frozenset() hash to create more distinct hash values
+  when faced with datasets containing many similar values.
+
+- bpo-27169: The ``__debug__`` constant is now optimized out at compile
+  time. This fixes also bpo-22091.
+
+- bpo-32329: ``sys.flags.hash_randomization`` is now properly set to 0 when
+  hash randomization is turned off by ``PYTHONHASHSEED=0``.
+
+- bpo-30416: The optimizer is now protected from spending much time doing
+  complex calculations and consuming much memory for creating large
+  constants in constant folding.
+
+- bpo-18533: ``repr()`` on a dict containing its own ``values()`` or
+  ``items()`` no longer raises ``RecursionError``; OrderedDict similarly.
+  Instead, use ``...``, as for other recursive structures.  Patch by Ben
+  North.
+
+- bpo-32028: Leading whitespace is now correctly ignored when generating
+  suggestions for converting Py2 print statements to Py3 builtin print
+  function calls. Patch by Sanyam Khurana.
+
+- bpo-32137: The repr of deeply nested dict now raises a RecursionError
+  instead of crashing due to a stack overflow.
+
+Library
+-------
+
+- bpo-33064: lib2to3 now properly supports trailing commas after ``*args``
+  and ``**kwargs`` in function signatures.
+
+- bpo-31804: Avoid failing in multiprocessing.Process if the standard
+  streams are closed or None at exit.
+
+- bpo-33037: Skip sending/receiving data after SSL transport closing.
+
+- bpo-30353: Fix ctypes pass-by-value for structs on 64-bit Cygwin/MinGW.
+
+- bpo-33009: Fix inspect.signature() for single-parameter partialmethods.
+
+- bpo-32969: Expose several missing constants in zlib and fix corresponding
+  documentation.
+
+- bpo-32713: Fixed tarfile.itn handling of out-of-bounds float values. Patch
+  by Joffrey Fuhrer.
+
+- bpo-30622: The ssl module now detects missing NPN support in LibreSSL.
+
+- bpo-32922: dbm.open() now encodes filename with the filesystem encoding
+  rather than default encoding.
+
+- bpo-32859: In ``os.dup2``, don't check every call whether the ``dup3``
+  syscall exists or not.
+
+- bpo-21060: Rewrite confusing message from setup.py upload from "No dist
+  file created in earlier command" to the more helpful "Must create and
+  upload files in one command".
+
+- bpo-32857: In :mod:`tkinter`, ``after_cancel(None)`` now raises a
+  :exc:`ValueError` instead of canceling the first scheduled function.
+  Patch by Cheryl Sabella.
+
+- bpo-32852: Make sure sys.argv remains as a list when running trace.
+
+- bpo-32841: Fixed `asyncio.Condition` issue which silently ignored
+  cancellation after notifying and cancelling a conditional lock. Patch by
+  Bar Harel.
+
+- bpo-31787: Fixed refleaks of ``__init__()`` methods in various modules.
+  (Contributed by Oren Milman)
+
+- bpo-30157: Fixed guessing quote and delimiter in csv.Sniffer.sniff() when
+  only the last field is quoted.  Patch by Jake Davis.
+
+- bpo-32394: socket: Remove TCP_FASTOPEN, TCP_KEEPCNT flags on older version
+  Windows during run-time.
+
+- bpo-32777: Fix a rare but potential pre-exec child process deadlock in
+  subprocess on POSIX systems when marking file descriptors inheritable on
+  exec in the child process.  This bug appears to have been introduced in
+  3.4.
+
+- bpo-32647: The ctypes module used to depend on indirect linking for
+  dlopen. The shared extension is now explicitly linked against libdl on
+  platforms with dl.
+
+- bpo-32734: Fixed ``asyncio.Lock()`` safety issue which allowed acquiring
+  and locking the same lock multiple times, without it being free. Patch by
+  Bar Harel.
+
+- bpo-32727: Do not include name field in SMTP envelope from address. Patch
+  by Stéphane Wirtel
+
+- bpo-27931: Fix email address header parsing error when the username is an
+  empty quoted string. Patch by Xiang Zhang.
+
+- bpo-32304: distutils' upload command no longer corrupts tar files ending
+  with a CR byte, and no longer tries to convert CR to CRLF in any of the
+  upload text fields.
+
+- bpo-32502: uuid.uuid1 no longer raises an exception if a 64-bit hardware
+  address is encountered.
+
+- bpo-31848: Fix the error handling in Aifc_read.initfp() when the SSND
+  chunk is not found. Patch by Zackery Spytz.
+
+- bpo-32555: On FreeBSD and Solaris, os.strerror() now always decode the
+  byte string from the current locale encoding, rather than using
+  ASCII/surrogateescape in some cases.
+
+- bpo-32521: The nis module is now compatible with new libnsl and headers
+  location.
+
+- bpo-32473: Improve ABCMeta._dump_registry() output readability
+
+- bpo-32521: glibc has removed Sun RPC. Use replacement libtirpc headers and
+  library in nis module.
+
+- bpo-32228: Ensure that ``truncate()`` preserves the file position (as
+  reported by ``tell()``) after writes longer than the buffer size.
+
+- bpo-26133: Don't unsubscribe signals in asyncio UNIX event loop on
+  interpreter shutdown.
+
+- bpo-32185: The SSL module no longer sends IP addresses in SNI TLS
+  extension on platforms with OpenSSL 1.0.2+ or inet_pton.
+
+- bpo-32323: :func:`urllib.parse.urlsplit()` does not convert zone-id
+  (scope) to lower case for scoped IPv6 addresses in hostnames now.
+
+- bpo-32302: Fix bdist_wininst of distutils for CRT v142: it binary
+  compatible with CRT v140.
+
+- bpo-32255: A single empty field is now always quoted when written into a
+  CSV file. This allows to distinguish an empty row from a row consisting of
+  a single empty field. Patch by Licht Takeuchi.
+
+- bpo-32277: Raise ``NotImplementedError`` instead of ``SystemError`` on
+  platforms where ``chmod(..., follow_symlinks=False)`` is not supported.
+  Patch by Anthony Sottile.
+
+- bpo-32199: The getnode() ip getter now uses 'ip link' instead of 'ip link
+  list'.
+
+- bpo-27456: Ensure TCP_NODELAY is set on Linux. Tests by Victor Stinner.
+
+- bpo-31900: The :func:`locale.localeconv` function now sets temporarily the
+  ``LC_CTYPE`` locale to the ``LC_NUMERIC`` locale to decode
+  ``decimal_point`` and ``thousands_sep`` byte strings if they are non-ASCII
+  or longer than 1 byte, and the ``LC_NUMERIC`` locale is different than the
+  ``LC_CTYPE`` locale. This temporary change affects other threads.
+
+  Same change for the :meth:`str.format` method when formatting a number
+  (:class:`int`, :class:`float`, :class:`float` and subclasses) with the
+  ``n`` type (ex: ``'{:n}'.format(1234)``).
+
+- bpo-31802: Importing native path module (``posixpath``, ``ntpath``) now
+  works even if the ``os`` module still is not imported.
+
+Documentation
+-------------
+
+- bpo-17232: Clarify docs for -O and -OO.  Patch by Terry Reedy.
+
+- bpo-32800: Update link to w3c doc for xml default namespaces.
+
+- bpo-8722: Document :meth:`__getattr__` behavior when property :meth:`get`
+  method raises :exc:`AttributeError`.
+
+- bpo-32614: Modify RE examples in documentation to use raw strings to
+  prevent :exc:`DeprecationWarning` and add text to REGEX HOWTO to highlight
+  the deprecation.
+
+- bpo-31972: Improve docstrings for `pathlib.PurePath` subclasses.
+
+- bpo-17799: Explain real behaviour of sys.settrace and sys.setprofile and
+  their C-API counterparts regarding which type of events are received in
+  each function. Patch by Pablo Galindo Salgado.
+
+Tests
+-----
+
+- bpo-32517: Fix failing ``test_asyncio`` on macOS 10.12.2+ due to transport
+  of ``KqueueSelector`` loop was not being closed.
+
+- bpo-32721: Fix test_hashlib to not fail if the _md5 module is not built.
+
+- bpo-32252: Fix faulthandler_suppress_crash_report() used to prevent core
+  dump files when testing crashes. getrlimit() returns zero on success.
+
+- bpo-31518: Debian Unstable has disabled TLS 1.0 and 1.1 for
+  SSLv23_METHOD(). Change TLS/SSL protocol of some tests to PROTOCOL_TLS or
+  PROTOCOL_TLSv1_2 to make them pass on Debian.
+
+Build
+-----
+
+- bpo-32635: Fix segfault of the crypt module when libxcrypt is provided
+  instead of libcrypt at the system.
+
+Windows
+-------
+
+- bpo-33016: Fix potential use of uninitialized memory in
+  nt._getfinalpathname
+
+- bpo-32903: Fix a memory leak in os.chdir() on Windows if the current
+  directory is set to a UNC path.
+
+- bpo-31966: Fixed WindowsConsoleIO.write() for writing empty data.
+
+- bpo-32409: Ensures activate.bat can handle Unicode contents.
+
+- bpo-32457: Improves handling of denormalized executable path when
+  launching Python.
+
+- bpo-32370: Use the correct encoding for ipconfig output in the uuid
+  module. Patch by Segev Finer.
+
+- bpo-29248: Fix :func:`os.readlink` on Windows, which was mistakenly
+  treating the ``PrintNameOffset`` field of the reparse data buffer as a
+  number of characters instead of bytes. Patch by Craig Holmquist and SSE4.
+
+- bpo-32588: Create standalone _distutils_findvs module.
+
+macOS
+-----
+
+- bpo-32726: Provide an additional, more modern macOS installer variant that
+  supports macOS 10.9+ systems in 64-bit mode only. Upgrade the supplied
+  third-party libraries to OpenSSL 1.0.2n, XZ 5.2.3, and SQLite 3.22.0. The
+  10.9+ installer now links with and supplies its own copy of Tcl/Tk 8.6.8.
+
+IDLE
+----
+
+- bpo-32984: Set ``__file__`` while running a startup file.  Like Python,
+  IDLE optionally runs one startup file in the Shell window before
+  presenting the first interactive input prompt.  For IDLE, ``-s`` runs a
+  file named in environmental variable  :envvar:`IDLESTARTUP` or
+  :envvar:`PYTHONSTARTUP`; ``-r file`` runs ``file``.  Python sets
+  ``__file__`` to the startup file name before running the file and unsets
+  it before the first prompt.  IDLE now does the same when run normally,
+  without the ``-n`` option.
+
+- bpo-32940: Simplify and rename StringTranslatePseudoMapping in pyparse.
+
+- bpo-32916: Change ``str`` to ``code`` in pyparse.
+
+- bpo-32905: Remove unused code in pyparse module.
+
+- bpo-32874: Add tests for pyparse.
+
+- bpo-32837: Using the system and place-dependent default encoding for
+  open() is a bad idea for IDLE's system and location-independent files.
+
+- bpo-32826: Add "encoding=utf-8" to open() in IDLE's test_help_about. GUI
+  test test_file_buttons() only looks at initial ascii-only lines, but
+  failed on systems where open() defaults to 'ascii' because readline()
+  internally reads and decodes far enough ahead to encounter a non-ascii
+  character in CREDITS.txt.
+
+- bpo-32765: Update configdialog General tab docstring to add new widgets to
+  the widget list.
+
+Tools/Demos
+-----------
+
+- bpo-24960: 2to3 and lib2to3 can now read pickled grammar files using
+  pkgutil.get_data() rather than probing the filesystem. This lets 2to3 and
+  lib2to3 work when run from a zipfile.
+
+- bpo-32222: Fix pygettext not extracting docstrings for functions with type
+  annotated arguments. Patch by Toby Harradine.
+
+C API
+-----
+
+- bpo-29084: Undocumented C API for OrderedDict has been excluded from the
+  limited C API. It was added by mistake and actually never worked in the
+  limited C API.
+
+
+What's New in Python 3.6.4 final?
+=================================
+
+*Release date: 2017-12-18*
+
+There were no new code changes in version 3.6.4 since v3.6.4rc1.
+
+
+
+What's New in Python 3.6.4 release candidate 1?
+===============================================
+
+*Release date: 2017-12-05*
+
+Core and Builtins
+-----------------
+
+- bpo-32176: co_flags.CO_NOFREE is now always set correctly by the code
+  object constructor based on freevars and cellvars, rather than needing to
+  be set correctly by the caller. This ensures it will be cleared
+  automatically when additional cell references are injected into a modified
+  code object and function.
+
+- bpo-31949: Fixed several issues in printing tracebacks
+  (PyTraceBack_Print()).
+
+  * Setting sys.tracebacklimit to 0 or less now suppresses printing tracebacks.
+  * Setting sys.tracebacklimit to None now causes using the default limit.
+  * Setting sys.tracebacklimit to an integer larger than LONG_MAX now means using
+    the limit LONG_MAX rather than the default limit.
+  * Fixed integer overflows in the case of more than 2**31 traceback items on
+    Windows.
+  * Fixed output errors handling.
+
+- bpo-30696: Fix the interactive interpreter looping endlessly when no
+  memory.
+
+- bpo-20047: Bytearray methods partition() and rpartition() now accept only
+  bytes-like objects as separator, as documented.  In particular they now
+  raise TypeError rather of returning a bogus result when an integer is
+  passed as a separator.
+
+- bpo-31852: Fix a segmentation fault caused by a combination of the async
+  soft keyword and continuation lines.
+
+- bpo-21720: BytesWarning no longer emitted when the *fromlist* argument of
+  ``__import__()`` or the ``__all__`` attribute of the module contain bytes
+  instances.
+
+- bpo-31825: Fixed OverflowError in the 'unicode-escape' codec and in
+  codecs.escape_decode() when decode an escaped non-ascii byte.
+
+- bpo-28603: Print the full context/cause chain of exceptions on interpreter
+  exit, even if an exception in the chain is unhashable or compares equal to
+  later ones. Patch by Zane Bitter.
+
+- bpo-31786: Fix timeout rounding in the select module to round correctly
+  negative timeouts between -1.0 and 0.0. The functions now block waiting
+  for events as expected. Previously, the call was incorrectly non-blocking.
+  Patch by Pablo Galindo.
+
+- bpo-31642: Restored blocking "from package import module" by setting
+  sys.modules["package.module"] to None.
+
+- bpo-31626: Fixed a bug in debug memory allocator.  There was a write to
+  freed memory after shrinking a memory block.
+
+- bpo-31619: Fixed a ValueError when convert a string with large number of
+  underscores to integer with binary base.
+
+- bpo-31592: Fixed an assertion failure in Python parser in case of a bad
+  `unicodedata.normalize()`. Patch by Oren Milman.
+
+- bpo-31588: Raise a `TypeError` with a helpful error message when class
+  creation fails due to a metaclass with a bad ``__prepare__()`` method.
+  Patch by Oren Milman.
+
+- bpo-31566: Fix an assertion failure in `_warnings.warn()` in case of a bad
+  ``__name__`` global. Patch by Oren Milman.
+
+- bpo-31505: Fix an assertion failure in `json`, in case
+  `_json.make_encoder()` received a bad `encoder()` argument. Patch by Oren
+  Milman.
+
+- bpo-31492: Fix assertion failures in case of failing to import from a
+  module with a bad ``__name__`` attribute, and in case of failing to access
+  an attribute of such a module. Patch by Oren Milman.
+
+- bpo-31490: Fix an assertion failure in `ctypes` class definition, in case
+  the class has an attribute whose name is specified in ``_anonymous_`` but
+  not in ``_fields_``. Patch by Oren Milman.
+
+- bpo-31478: Fix an assertion failure in `_random.Random.seed()` in case the
+  argument has a bad ``__abs__()`` method. Patch by Oren Milman.
+
+- bpo-31315: Fix an assertion failure in imp.create_dynamic(), when
+  spec.name is not a string. Patch by Oren Milman.
+
+- bpo-31311: Fix a crash in the ``__setstate__()`` method of
+  `ctypes._CData`, in case of a bad ``__dict__``. Patch by Oren Milman.
+
+- bpo-31293: Fix crashes in true division and multiplication of a timedelta
+  object by a float with a bad as_integer_ratio() method. Patch by Oren
+  Milman.
+
+- bpo-31285: Fix an assertion failure in `warnings.warn_explicit`, when the
+  return value of the received loader's get_source() has a bad splitlines()
+  method. Patch by Oren Milman.
+
+- bpo-30817: `PyErr_PrintEx()` clears now the ignored exception that may be
+  raised by `_PySys_SetObjectId()`, for example when no memory.
+
+Library
+-------
+
+- bpo-28556: Two minor fixes for ``typing`` module: allow shallow copying
+  instances of generic classes, improve interaction of ``__init_subclass__``
+  with generics. Original PRs by Ivan Levkivskyi.
+
+- bpo-27240: The header folding algorithm for the new email policies has
+  been rewritten, which also fixes bpo-30788, bpo-31831, and bpo-32182.  In
+  particular, RFC2231 folding is now done correctly.
+
+- bpo-32186: io.FileIO.readall() and io.FileIO.read() now release the GIL
+  when getting the file size. Fixed hang of all threads with inaccessible
+  NFS server. Patch by Nir Soffer.
+
+- bpo-12239: Make :meth:`msilib.SummaryInformation.GetProperty` return
+  ``None`` when the value of property is ``VT_EMPTY``.  Initial patch by
+  Mark Mc Mahon.
+
+- bpo-31325: Fix wrong usage of :func:`collections.namedtuple` in the
+  :meth:`RobotFileParser.parse() <urllib.robotparser.RobotFileParser.parse>`
+  method.
+
+  Initial patch by Robin Wellner.
+
+- bpo-12382: :func:`msilib.OpenDatabase` now raises a better exception
+  message when it couldn't open or create an MSI file.  Initial patch by
+  William Tisäter.
+
+- bpo-32110: ``codecs.StreamReader.read(n)`` now returns not more than *n*
+  characters/bytes for non-negative *n*. This makes it compatible with
+  ``read()`` methods of other file-like objects.
+
+- bpo-32072: Fixed issues with binary plists:
+
+  * Fixed saving bytearrays.
+  * Identical objects will be saved only once.
+  * Equal references will be load as identical objects.
+  * Added support for saving and loading recursive data structures.
+
+- bpo-32034: Make asyncio.IncompleteReadError and LimitOverrunError
+  pickleable.
+
+- bpo-32015: Fixed the looping of asyncio in the case of reconnection the
+  socket during waiting async read/write from/to the socket.
+
+- bpo-32011: Restored support of loading marshal files with the TYPE_INT64
+  code. These files can be produced in Python 2.7.
+
+- bpo-31970: Reduce performance overhead of asyncio debug mode.
+
+- bpo-9678: Fixed determining the MAC address in the uuid module:
+
+  * Using ifconfig on NetBSD and OpenBSD.
+  * Using arp on Linux, FreeBSD, NetBSD and OpenBSD.
+
+  Based on patch by Takayuki Shimizukawa.
+
+- bpo-30057: Fix potential missed signal in signal.signal().
+
+- bpo-31933: Fix Blake2 params leaf_size and node_offset on big endian
+  platforms. Patch by Jack O'Connor.
+
+- bpo-31927: Fixed compilation of the socket module on NetBSD 8.  Fixed
+  assertion failure or reading arbitrary data when parse a AF_BLUETOOTH
+  address on NetBSD and DragonFly BSD.
+
+- bpo-27666: Fixed stack corruption in curses.box() and curses.ungetmouse()
+  when the size of types chtype or mmask_t is less than the size of C long.
+  curses.box() now accepts characters as arguments.  Based on patch by Steve
+  Fink.
+
+- bpo-31897: plistlib now catches more errors when read binary plists and
+  raises InvalidFileException instead of unexpected exceptions.
+
+- bpo-25720: Fix the method for checking pad state of curses WINDOW. Patch
+  by Masayuki Yamamoto.
+
+- bpo-31893: Fixed the layout of the kqueue_event structure on OpenBSD and
+  NetBSD. Fixed the comparison of the kqueue_event objects.
+
+- bpo-31891: Fixed building the curses module on NetBSD.
+
+- bpo-28416: Instances of pickle.Pickler subclass with the persistent_id()
+  method and pickle.Unpickler subclass with the persistent_load() method no
+  longer create reference cycles.
+
+- bpo-28326: Fix multiprocessing.Process when stdout and/or stderr is closed
+  or None.
+
+- bpo-31457: If nested log adapters are used, the inner ``process()``
+  methods are no longer omitted.
+
+- bpo-31457: The ``manager`` property on LoggerAdapter objects is now
+  properly settable.
+
+- bpo-31806: Fix timeout rounding in time.sleep(), threading.Lock.acquire()
+  and socket.socket.settimeout() to round correctly negative timeouts
+  between -1.0 and 0.0. The functions now block waiting for events as
+  expected. Previously, the call was incorrectly non-blocking. Patch by
+  Pablo Galindo.
+
+- bpo-28603: traceback: Fix a TypeError that occurred during printing of
+  exception tracebacks when either the current exception or an exception in
+  its context/cause chain is unhashable. Patch by Zane Bitter.
+
+- bpo-30058: Fixed buffer overflow in select.kqueue.control().
+
+- bpo-31770: Prevent a crash when calling the ``__init__()`` method of a
+  ``sqlite3.Cursor`` object more than once. Patch by Oren Milman.
+
+- bpo-31672: ``idpattern`` in ``string.Template`` matched some non-ASCII
+  characters. Now it uses ``-i`` regular expression local flag to avoid non-
+  ASCII characters.
+
+- bpo-31764: Prevent a crash in ``sqlite3.Cursor.close()`` in case the
+  ``Cursor`` object is uninitialized. Patch by Oren Milman.
+
+- bpo-31752: Fix possible crash in timedelta constructor called with custom
+  integers.
+
+- bpo-31701: On Windows, faulthandler.enable() now ignores MSC and COM
+  exceptions.
+
+- bpo-31728: Prevent crashes in `_elementtree` due to unsafe cleanup of
+  `Element.text` and `Element.tail`. Patch by Oren Milman.
+
+- bpo-31620: an empty asyncio.Queue now doesn't leak memory when queue.get
+  pollers timeout
+
+- bpo-31632: Fix method set_protocol() of class _SSLProtocolTransport in
+  asyncio module. This method was previously modifying a wrong reference to
+  the protocol.
+
+- bpo-31675: Fixed memory leaks in Tkinter's methods splitlist() and split()
+  when pass a string larger than 2 GiB.
+
+- bpo-31673: Fixed typo in the name of Tkinter's method adderrorinfo().
+
+- bpo-30806: Fix the string representation of a netrc object.
+
+- bpo-15037: Added a workaround for getkey() in curses for ncurses 5.7 and
+  earlier.
+
+- bpo-25351: Avoid venv activate failures with undefined variables
+
+- bpo-25532: inspect.unwrap() will now only try to unwrap an object
+  sys.getrecursionlimit() times, to protect against objects which create a
+  new object on every attribute access.
+
+- bpo-30347: Stop crashes when concurrently iterate over itertools.groupby()
+  iterators.
+
+- bpo-31516: ``threading.current_thread()`` should not return a dummy thread
+  at shutdown.
+
+- bpo-31351: python -m ensurepip now exits with non-zero exit code if pip
+  bootstrapping has failed.
+
+- bpo-31482: ``random.seed()`` now works with bytes in version=1
+
+- bpo-31334: Fix ``poll.poll([timeout])`` in the ``select`` module for
+  arbitrary negative timeouts on all OSes where it can only be a non-
+  negative integer or -1. Patch by Riccardo Coccioli.
+
+- bpo-31310: multiprocessing's semaphore tracker should be launched again if
+  crashed.
+
+- bpo-31308: Make multiprocessing's forkserver process immune to Ctrl-C and
+  other user interruptions. If it crashes, restart it when necessary.
+
+Documentation
+-------------
+
+- bpo-32105: Added asyncio.BaseEventLoop.connect_accepted_socket
+  versionaddded marker.
+
+- bpo-31537: Fix incorrect usage of ``get_history_length`` in readline
+  documentation example code. Patch by Brad Smith.
+
+- bpo-30085: The operator functions without double underscores are preferred
+  for clarity. The one with underscores are only kept for back-
+  compatibility.
+
+Tests
+-----
+
+- bpo-31380: Skip test_httpservers test_undecodable_file on macOS: fails on
+  APFS.
+
+- bpo-31705: Skip test_socket.test_sha256() on Linux kernel older than 4.5.
+  The test fails with ENOKEY on kernel 3.10 (on ppc64le). A fix was merged
+  into the kernel 4.5.
+
+- bpo-31174: Fix test_tools.test_unparse: DirectoryTestCase now stores the
+  names sample to always test the same files. It prevents false alarms when
+  hunting reference leaks.
+
+- bpo-30695: Add the `set_nomemory(start, stop)` and `remove_mem_hooks()`
+  functions to the _testcapi module.
+
+Build
+-----
+
+- bpo-32059: ``detect_modules()`` in ``setup.py`` now also searches the
+  sysroot paths when cross-compiling.
+
+- bpo-31957: Fixes Windows SDK version detection when building for Windows.
+
+- bpo-31609: Fixes quotes in PCbuild/clean.bat
+
+- bpo-31934: Abort the build when building out of a not clean source tree.
+
+- bpo-31926: Fixed Argument Clinic sometimes causing compilation errors when
+  there was more than one function and/or method in a .c file with the same
+  name.
+
+- bpo-28791: Update Windows builds to use SQLite 3.21.0.
+
+- bpo-28791: Update OS X installer to use SQLite 3.21.0.
+
+- bpo-22140: Prevent double substitution of prefix in python-config.sh.
+
+- bpo-31536: Avoid wholesale rebuild after `make regen-all` if nothing
+  changed.
+
+Windows
+-------
+
+- bpo-1102: Return ``None`` when ``View.Fetch()`` returns
+  ``ERROR_NO_MORE_ITEMS`` instead of raising ``MSIError``.
+
+  Initial patch by Anthony Tuininga.
+
+- bpo-31944: Fixes Modify button in Apps and Features dialog.
+
+macOS
+-----
+
+- bpo-31392: Update macOS installer to use OpenSSL 1.0.2m
+
+IDLE
+----
+
+- bpo-32207: Improve tk event exception tracebacks in IDLE. When tk event
+  handling is driven by IDLE's run loop, a confusing and distracting
+  queue.EMPTY traceback context is no longer added to tk event exception
+  tracebacks.  The traceback is now the same as when event handling is
+  driven by user code.  Patch based on a suggestion by Serhiy Storchaka.
+
+- bpo-32164: Delete unused file idlelib/tabbedpages.py. Use of TabbedPageSet
+  in configdialog was replaced by ttk.Notebook.
+
+- bpo-32100: IDLE: Fix old and new bugs in pathbrowser; improve tests. Patch
+  mostly by Cheryl Sabella.
+
+- bpo-31858: IDLE -- Restrict shell prompt manipulaton to the shell. Editor
+  and output windows only see an empty last prompt line.  This simplifies
+  the code and fixes a minor bug when newline is inserted. Sys.ps1, if
+  present, is read on Shell start-up, but is not set or changed.
+
+- bpo-31860: The font sample in the IDLE configuration dialog is now
+  editable. Changes persist while IDLE remains open
+
+- bpo-31836: Test_code_module now passes if run after test_idle, which sets
+  ps1.
+
+  The code module uses sys.ps1 if present or sets it to '>>> ' if not.
+  Test_code_module now properly tests both behaviors.  Ditto for ps2.
+
+- bpo-28603: Fix a TypeError that caused a shell restart when printing a
+  traceback that includes an exception that is unhashable. Patch by Zane
+  Bitter.
+
+- bpo-13802: Use non-Latin characters in the IDLE's Font settings sample.
+  Even if one selects a font that defines a limited subset of the unicode
+  Basic Multilingual Plane, tcl/tk will use other fonts that define a
+  character. The expanded example give users of non-Latin characters a
+  better idea of what they might see in IDLE's shell and editors. To make
+  room for the expanded sample, frames on the Font tab are re-arranged. The
+  Font/Tabs help explains a bit about the additions.
+
+- bpo-31460: Simplify the API of IDLE's Module Browser.
+
+  Passing a widget instead of an flist with a root widget opens the option
+  of creating a browser frame that is only part of a window.  Passing a full
+  file name instead of pieces assumed to come from a .py file opens the
+  possibility of browsing python files that do not end in .py.
+
+- bpo-31649: IDLE - Make _htest, _utest parameters keyword only.
+
+- bpo-31559: Remove test order dependence in idle_test.test_browser.
+
+- bpo-31459: Rename IDLE's module browser from Class Browser to Module
+  Browser. The original module-level class and method browser became a
+  module browser, with the addition of module-level functions, years ago.
+  Nested classes and functions were added yesterday.  For back-
+  compatibility, the virtual event <<open-class-browser>>, which appears on
+  the Keys tab of the Settings dialog, is not changed. Patch by Cheryl
+  Sabella.
+
+- bpo-31500: Default fonts now are scaled on HiDPI displays.
+
+- bpo-1612262: IDLE module browser now shows nested classes and functions.
+  Original patches for code and tests by Guilherme Polo and Cheryl Sabella,
+  respectively.
+
+Tools/Demos
+-----------
+
+- bpo-30722: Make redemo work with Python 3.6 and newer versions.
+
+  In Python 3.6, flags like re.DOTALL became members of an enum.IntFlag so
+  usages like ``getattr(re, 'DOTALL')`` are invalid.
+
+  Also, remove the ``LOCALE`` option since it doesn't work with string
+  patterns in Python 3.
+
+  Patch by Christoph Sarnowski.
+
+C API
+-----
+
+- bpo-20891: Fix PyGILState_Ensure(). When PyGILState_Ensure() is called in
+  a non-Python thread before PyEval_InitThreads(), only call
+  PyEval_InitThreads() after calling PyThreadState_New() to fix a crash.
+
+- bpo-31532: Fix memory corruption due to allocator mix in getpath.c between
+  Py_GetPath() and Py_SetPath()
+
+- bpo-30697: The `PyExc_RecursionErrorInst` singleton is removed and
+  `PyErr_NormalizeException()` does not use it anymore. This singleton is
+  persistent and its members being never cleared may cause a segfault during
+  finalization of the interpreter. See also issue #22898.
+
+
 What's New in Python 3.6.3 final?
 =================================
 
@@ -5282,12 +6065,11 @@ Library
   correctly.  Initial patch by ingrid.
 
 - A new version of typing.py provides several new classes and features:
-  @overload outside stubs, Reversible, DefaultDict, Text, ContextManager,
-  Type[], NewType(), TYPE_CHECKING, and numerous bug fixes (note that some
-  of the new features are not yet implemented in mypy or other static
-  analyzers). Also classes for PEP 492 (Awaitable, AsyncIterable,
-  AsyncIterator) have been added (in fact they made it into 3.5.1 but were
-  never mentioned).
+  @overload outside stubs, DefaultDict, Text, ContextManager, Type[],
+  NewType(), TYPE_CHECKING, and numerous bug fixes (note that some of the
+  new features are not yet implemented in mypy or other static analyzers).
+  Also classes for PEP 492 (Awaitable, AsyncIterable, AsyncIterator) have
+  been added (in fact they made it into 3.5.1 but were never mentioned).
 
 - bpo-25738: Stop http.server.BaseHTTPRequestHandler.send_error() from
   sending a message body for 205 Reset Content.  Also, don't send Content
diff -urpN Python-3.6.3/Misc/python-config.sh.in Python-3.6.5/Misc/python-config.sh.in
--- Python-3.6.3/Misc/python-config.sh.in	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Misc/python-config.sh.in	2018-03-28 11:19:31.000000000 +0200
@@ -24,17 +24,18 @@ installed_prefix ()
     echo $RESULT
 }
 
-prefix_build="@prefix@"
 prefix_real=$(installed_prefix "$0")
 
 # Use sed to fix paths from their built-to locations to their installed-to
-# locations.
-prefix=$(echo "$prefix_build" | sed "s#$prefix_build#$prefix_real#")
-exec_prefix_build="@exec_prefix@"
-exec_prefix=$(echo "$exec_prefix_build" | sed "s#$exec_prefix_build#$prefix_real#")
-includedir=$(echo "@includedir@" | sed "s#$prefix_build#$prefix_real#")
-libdir=$(echo "@libdir@" | sed "s#$prefix_build#$prefix_real#")
-CFLAGS=$(echo "@CFLAGS@" | sed "s#$prefix_build#$prefix_real#")
+# locations. Keep prefix & exec_prefix using their original values in case
+# they are referenced in other configure variables, to prevent double
+# substitution, issue #22140.
+prefix="@prefix@"
+exec_prefix="@exec_prefix@"
+exec_prefix_real=${prefix_real}
+includedir=$(echo "@includedir@" | sed "s#$prefix#$prefix_real#")
+libdir=$(echo "@libdir@" | sed "s#$prefix#$prefix_real#")
+CFLAGS=$(echo "@CFLAGS@" | sed "s#$prefix#$prefix_real#")
 VERSION="@VERSION@"
 LIBM="@LIBM@"
 LIBC="@LIBC@"
@@ -47,8 +48,8 @@ LINKFORSHARED="@LINKFORSHARED@"
 OPT="@OPT@"
 PY_ENABLE_SHARED="@PY_ENABLE_SHARED@"
 LDVERSION="@LDVERSION@"
-LIBDEST=${prefix}/lib/python${VERSION}
-LIBPL=$(echo "@LIBPL@" | sed "s#$prefix_build#$prefix_real#")
+LIBDEST=${prefix_real}/lib/python${VERSION}
+LIBPL=$(echo "@LIBPL@" | sed "s#$prefix#$prefix_real#")
 SO="@EXT_SUFFIX@"
 PYTHONFRAMEWORK="@PYTHONFRAMEWORK@"
 INCDIR="-I$includedir/python${VERSION}${ABIFLAGS}"
@@ -73,10 +74,10 @@ for ARG in "$@"
 do
     case "$ARG" in
         --prefix)
-            echo "$prefix"
+            echo "$prefix_real"
         ;;
         --exec-prefix)
-            echo "$exec_prefix"
+            echo "$exec_prefix_real"
         ;;
         --includes)
             echo "$INCDIR $PLATINCDIR"
diff -urpN Python-3.6.3/Misc/python.man Python-3.6.5/Misc/python.man
--- Python-3.6.3/Misc/python.man	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Misc/python.man	2018-03-28 11:19:31.000000000 +0200
@@ -156,10 +156,13 @@ for the named module and runs the corres
 file as a script.
 .TP
 .B \-O
-Turn on basic optimizations.  Given twice, causes docstrings to be discarded.
+Remove assert statements and any code conditional on the value of
+__debug__; augment the filename for compiled (bytecode) files by
+adding .opt-1 before the .pyc extension.
 .TP
 .B \-OO
-Discard docstrings in addition to the \fB-O\fP optimizations.
+Do \fB-O\fP and also discard docstrings; change the filename for
+compiled (bytecode) files by adding .opt-2 before the .pyc extension.
 .TP
 .B \-q
 Do not print the version and copyright messages. These messages are
diff -urpN Python-3.6.3/Misc/valgrind-python.supp Python-3.6.5/Misc/valgrind-python.supp
--- Python-3.6.3/Misc/valgrind-python.supp	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Misc/valgrind-python.supp	2018-03-28 11:19:31.000000000 +0200
@@ -8,7 +8,7 @@
 #		./python -E ./Lib/test/regrtest.py -u gui,network
 #
 # You must edit Objects/obmalloc.c and uncomment Py_USING_MEMORY_DEBUGGER
-# to use the preferred suppressions with Py_ADDRESS_IN_RANGE.
+# to use the preferred suppressions with address_in_range.
 #
 # If you do not want to recompile Python, you can uncomment
 # suppressions for PyObject_Free and PyObject_Realloc.
@@ -19,25 +19,25 @@
 {
    ADDRESS_IN_RANGE/Invalid read of size 4
    Memcheck:Addr4
-   fun:Py_ADDRESS_IN_RANGE
+   fun:address_in_range
 }
 
 {
    ADDRESS_IN_RANGE/Invalid read of size 4
    Memcheck:Value4
-   fun:Py_ADDRESS_IN_RANGE
+   fun:address_in_range
 }
 
 {
    ADDRESS_IN_RANGE/Invalid read of size 8 (x86_64 aka amd64)
    Memcheck:Value8
-   fun:Py_ADDRESS_IN_RANGE
+   fun:address_in_range
 }
 
 {
    ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
    Memcheck:Cond
-   fun:Py_ADDRESS_IN_RANGE
+   fun:address_in_range
 }
 
 #
diff -urpN Python-3.6.3/Modules/_asynciomodule.c Python-3.6.5/Modules/_asynciomodule.c
--- Python-3.6.3/Modules/_asynciomodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_asynciomodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -132,6 +132,7 @@ future_schedule_callbacks(FutureObj *fut
     return 0;
 }
 
+
 static int
 future_init(FutureObj *fut, PyObject *loop)
 {
@@ -139,6 +140,17 @@ future_init(FutureObj *fut, PyObject *lo
     int is_true;
     _Py_IDENTIFIER(get_debug);
 
+    // Same to FutureObj_clear() but not clearing fut->dict
+    Py_CLEAR(fut->fut_loop);
+    Py_CLEAR(fut->fut_callbacks);
+    Py_CLEAR(fut->fut_result);
+    Py_CLEAR(fut->fut_exception);
+    Py_CLEAR(fut->fut_source_tb);
+
+    fut->fut_state = STATE_PENDING;
+    fut->fut_log_tb = 0;
+    fut->fut_blocking = 0;
+
     if (loop == Py_None) {
         loop = _PyObject_CallNoArg(asyncio_get_event_loop);
         if (loop == NULL) {
@@ -148,7 +160,7 @@ future_init(FutureObj *fut, PyObject *lo
     else {
         Py_INCREF(loop);
     }
-    Py_XSETREF(fut->fut_loop, loop);
+    fut->fut_loop = loop;
 
     res = _PyObject_CallMethodId(fut->fut_loop, &PyId_get_debug, NULL);
     if (res == NULL) {
@@ -160,13 +172,13 @@ future_init(FutureObj *fut, PyObject *lo
         return -1;
     }
     if (is_true) {
-        Py_XSETREF(fut->fut_source_tb, _PyObject_CallNoArg(traceback_extract_stack));
+        fut->fut_source_tb = _PyObject_CallNoArg(traceback_extract_stack);
         if (fut->fut_source_tb == NULL) {
             return -1;
         }
     }
 
-    Py_XSETREF(fut->fut_callbacks, PyList_New(0));
+    fut->fut_callbacks = PyList_New(0);
     if (fut->fut_callbacks == NULL) {
         return -1;
     }
@@ -1336,12 +1348,12 @@ _asyncio_Task___init___impl(TaskObj *sel
         return -1;
     }
 
-    self->task_fut_waiter = NULL;
+    Py_CLEAR(self->task_fut_waiter);
     self->task_must_cancel = 0;
     self->task_log_destroy_pending = 1;
 
     Py_INCREF(coro);
-    self->task_coro = coro;
+    Py_XSETREF(self->task_coro, coro);
 
     if (task_call_step_soon(self, NULL)) {
         return -1;
diff -urpN Python-3.6.3/Modules/_blake2/blake2b_impl.c Python-3.6.5/Modules/_blake2/blake2b_impl.c
--- Python-3.6.3/Modules/_blake2/blake2b_impl.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_blake2/blake2b_impl.c	2018-03-28 11:19:31.000000000 +0200
@@ -166,7 +166,8 @@ py_blake2b_new_impl(PyTypeObject *type,
             goto error;
         }
     }
-    self->param.leaf_length = (unsigned int)leaf_size;
+    // NB: Simple assignment here would be incorrect on big endian platforms.
+    store32(&(self->param.leaf_length), leaf_size);
 
     if (node_offset_obj != NULL) {
         node_offset = PyLong_AsUnsignedLongLong(node_offset_obj);
@@ -182,7 +183,8 @@ py_blake2b_new_impl(PyTypeObject *type,
      }
     store48(&(self->param.node_offset), node_offset);
 #else
-    self->param.node_offset = node_offset;
+    // NB: Simple assignment here would be incorrect on big endian platforms.
+    store64(&(self->param.node_offset), node_offset);
 #endif
 
     if (node_depth < 0 || node_depth > 255) {
diff -urpN Python-3.6.3/Modules/_blake2/blake2s_impl.c Python-3.6.5/Modules/_blake2/blake2s_impl.c
--- Python-3.6.3/Modules/_blake2/blake2s_impl.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_blake2/blake2s_impl.c	2018-03-28 11:19:31.000000000 +0200
@@ -166,7 +166,8 @@ py_blake2s_new_impl(PyTypeObject *type,
             goto error;
         }
     }
-    self->param.leaf_length = (unsigned int)leaf_size;
+    // NB: Simple assignment here would be incorrect on big endian platforms.
+    store32(&(self->param.leaf_length), leaf_size);
 
     if (node_offset_obj != NULL) {
         node_offset = PyLong_AsUnsignedLongLong(node_offset_obj);
@@ -182,7 +183,8 @@ py_blake2s_new_impl(PyTypeObject *type,
      }
     store48(&(self->param.node_offset), node_offset);
 #else
-    self->param.node_offset = node_offset;
+    // NB: Simple assignment here would be incorrect on big endian platforms.
+    store64(&(self->param.node_offset), node_offset);
 #endif
 
     if (node_depth < 0 || node_depth > 255) {
diff -urpN Python-3.6.3/Modules/_blake2/impl/blake2s-load-xop.h Python-3.6.5/Modules/_blake2/impl/blake2s-load-xop.h
--- Python-3.6.3/Modules/_blake2/impl/blake2s-load-xop.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_blake2/impl/blake2s-load-xop.h	2018-03-28 11:19:31.000000000 +0200
@@ -18,8 +18,9 @@
 
 #define TOB(x) ((x)*4*0x01010101 + 0x03020100) /* ..or not TOB */
 
+#if 0
 /* Basic VPPERM emulation, for testing purposes */
-/*static __m128i _mm_perm_epi8(const __m128i src1, const __m128i src2, const __m128i sel)
+static __m128i _mm_perm_epi8(const __m128i src1, const __m128i src2, const __m128i sel)
 {
    const __m128i sixteen = _mm_set1_epi8(16);
    const __m128i t0 = _mm_shuffle_epi8(src1, sel);
@@ -27,7 +28,8 @@
    const __m128i mask = _mm_or_si128(_mm_cmpeq_epi8(sel, sixteen),
                                      _mm_cmpgt_epi8(sel, sixteen)); /* (>=16) = 0xff : 00 */
    return _mm_blendv_epi8(t0, s1, mask);
-}*/
+}
+#endif
 
 #define LOAD_MSG_0_1(buf) \
 buf = _mm_perm_epi8(m0, m1, _mm_set_epi32(TOB(6),TOB(4),TOB(2),TOB(0)) );
diff -urpN Python-3.6.3/Modules/_bz2module.c Python-3.6.5/Modules/_bz2module.c
--- Python-3.6.3/Modules/_bz2module.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_bz2module.c	2018-03-28 11:19:31.000000000 +0200
@@ -663,7 +663,7 @@ _bz2_BZ2Decompressor___init___impl(BZ2De
     self->bzs_avail_in_real = 0;
     self->input_buffer = NULL;
     self->input_buffer_size = 0;
-    self->unused_data = PyBytes_FromStringAndSize(NULL, 0);
+    Py_XSETREF(self->unused_data, PyBytes_FromStringAndSize(NULL, 0));
     if (self->unused_data == NULL)
         goto error;
 
diff -urpN Python-3.6.3/Modules/_collectionsmodule.c Python-3.6.5/Modules/_collectionsmodule.c
--- Python-3.6.3/Modules/_collectionsmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_collectionsmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -2276,7 +2276,9 @@ _count_elements(PyObject *self, PyObject
     dict_setitem = _PyType_LookupId(&PyDict_Type, &PyId___setitem__);
 
     if (mapping_get != NULL && mapping_get == dict_get &&
-        mapping_setitem != NULL && mapping_setitem == dict_setitem) {
+        mapping_setitem != NULL && mapping_setitem == dict_setitem &&
+        PyDict_Check(mapping))
+    {
         while (1) {
             /* Fast path advantages:
                    1. Eliminate double hashing
diff -urpN Python-3.6.3/Modules/_csv.c Python-3.6.5/Modules/_csv.c
--- Python-3.6.3/Modules/_csv.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_csv.c	2018-03-28 11:19:31.000000000 +0200
@@ -1245,7 +1245,7 @@ csv_writerow(WriterObj *self, PyObject *
     if (PyErr_Occurred())
         return NULL;
 
-    if (self->num_fields > 0 && self->rec_size == 0) {
+    if (self->num_fields > 0 && self->rec_len == 0) {
         if (dialect->quoting == QUOTE_NONE) {
             PyErr_Format(_csvstate_global->error_obj,
                 "single empty field record must be quoted");
diff -urpN Python-3.6.3/Modules/_ctypes/_ctypes.c Python-3.6.5/Modules/_ctypes/_ctypes.c
--- Python-3.6.3/Modules/_ctypes/_ctypes.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_ctypes/_ctypes.c	2018-03-28 11:19:31.000000000 +0200
@@ -990,6 +990,7 @@ PyCPointerType_new(PyTypeObject *type, P
     if (proto) {
         StgDictObject *itemdict = PyType_stgdict(proto);
         const char *current_format;
+        /* PyCPointerType_SetProto has verified proto has a stgdict. */
         assert(itemdict);
         /* If itemdict->format is NULL, then this is a pointer to an
            incomplete type.  We create a generic format string
@@ -1036,7 +1037,11 @@ PyCPointerType_set_type(PyTypeObject *se
     StgDictObject *dict;
 
     dict = PyType_stgdict((PyObject *)self);
-    assert(dict);
+    if (!dict) {
+        PyErr_SetString(PyExc_TypeError,
+                        "abstract class");
+        return NULL;
+    }
 
     if (-1 == PyCPointerType_SetProto(dict, type))
         return NULL;
@@ -1062,7 +1067,11 @@ PyCPointerType_from_param(PyObject *type
     }
 
     typedict = PyType_stgdict(type);
-    assert(typedict); /* Cannot be NULL for pointer types */
+    if (!typedict) {
+        PyErr_SetString(PyExc_TypeError,
+                        "abstract class");
+        return NULL;
+    }
 
     /* If we expect POINTER(<type>), but receive a <type> instance, accept
        it by calling byref(<type>).
@@ -2127,7 +2136,11 @@ PyCSimpleType_from_param(PyObject *type,
     }
 
     dict = PyType_stgdict(type);
-    assert(dict);
+    if (!dict) {
+        PyErr_SetString(PyExc_TypeError,
+                        "abstract class");
+        return NULL;
+    }
 
     /* I think we can rely on this being a one-character string */
     fmt = PyUnicode_AsUTF8(dict->proto);
@@ -2663,6 +2676,16 @@ PyCData_setstate(PyObject *myself, PyObj
         len = self->b_size;
     memmove(self->b_ptr, data, len);
     mydict = PyObject_GetAttrString(myself, "__dict__");
+    if (mydict == NULL) {
+        return NULL;
+    }
+    if (!PyDict_Check(mydict)) {
+        PyErr_Format(PyExc_TypeError,
+                     "%.200s.__dict__ must be a dictionary, not %.200s",
+                     Py_TYPE(myself)->tp_name, Py_TYPE(mydict)->tp_name);
+        Py_DECREF(mydict);
+        return NULL;
+    }
     res = PyDict_Update(mydict, dict);
     Py_DECREF(mydict);
     if (res == -1)
@@ -3221,7 +3244,11 @@ _validate_paramflags(PyTypeObject *type,
     PyObject *argtypes;
 
     dict = PyType_stgdict((PyObject *)type);
-    assert(dict); /* Cannot be NULL. 'type' is a PyCFuncPtr type. */
+    if (!dict) {
+        PyErr_SetString(PyExc_TypeError,
+                        "abstract class");
+        return 0;
+    }
     argtypes = dict->argtypes;
 
     if (paramflags == NULL || dict->argtypes == NULL)
@@ -4852,7 +4879,7 @@ Pointer_ass_item(PyObject *myself, Py_ss
     }
 
     stgdict = PyObject_stgdict((PyObject *)self);
-    assert(stgdict); /* Cannot be NULL fr pointer instances */
+    assert(stgdict); /* Cannot be NULL for pointer instances */
 
     proto = stgdict->proto;
     assert(proto);
@@ -4880,7 +4907,7 @@ Pointer_get_contents(CDataObject *self,
     }
 
     stgdict = PyObject_stgdict((PyObject *)self);
-    assert(stgdict); /* Cannot be NULL fr pointer instances */
+    assert(stgdict); /* Cannot be NULL for pointer instances */
     return PyCData_FromBaseObj(stgdict->proto,
                              (PyObject *)self, 0,
                              *(void **)self->b_ptr);
@@ -4899,7 +4926,7 @@ Pointer_set_contents(CDataObject *self,
         return -1;
     }
     stgdict = PyObject_stgdict((PyObject *)self);
-    assert(stgdict); /* Cannot be NULL fr pointer instances */
+    assert(stgdict); /* Cannot be NULL for pointer instances */
     assert(stgdict->proto);
     if (!CDataObject_Check(value)) {
         int res = PyObject_IsInstance(value, stgdict->proto);
diff -urpN Python-3.6.3/Modules/_ctypes/_ctypes_test.c Python-3.6.5/Modules/_ctypes/_ctypes_test.c
--- Python-3.6.3/Modules/_ctypes/_ctypes_test.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_ctypes/_ctypes_test.c	2018-03-28 11:19:31.000000000 +0200
@@ -57,6 +57,24 @@ _testfunc_large_struct_update_value(Test
     ((volatile Test *)&in)->third = 0x0badf00d;
 }
 
+typedef struct {
+    unsigned int first;
+    unsigned int second;
+} TestReg;
+
+
+EXPORT(TestReg) last_tfrsuv_arg;
+
+
+EXPORT(void)
+_testfunc_reg_struct_update_value(TestReg in)
+{
+    last_tfrsuv_arg = in;
+    ((volatile TestReg *)&in)->first = 0x0badf00d;
+    ((volatile TestReg *)&in)->second = 0x0badf00d;
+}
+
+
 EXPORT(void)testfunc_array(int values[4])
 {
     printf("testfunc_array %d %d %d %d\n",
diff -urpN Python-3.6.3/Modules/_ctypes/callproc.c Python-3.6.5/Modules/_ctypes/callproc.c
--- Python-3.6.3/Modules/_ctypes/callproc.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_ctypes/callproc.c	2018-03-28 11:19:31.000000000 +0200
@@ -1040,6 +1040,13 @@ GetComError(HRESULT errcode, GUID *riid,
 }
 #endif
 
+#if (defined(__x86_64__) && (defined(__MINGW64__) || defined(__CYGWIN__))) || \
+    defined(__aarch64__)
+#define CTYPES_PASS_BY_REF_HACK
+#define POW2(x) (((x & ~(x - 1)) == x) ? x : 0)
+#define IS_PASS_BY_REF(x) (x > 8 || !POW2(x))
+#endif
+
 /*
  * Requirements, must be ensured by the caller:
  * - argtuple is tuple of arguments
@@ -1137,8 +1144,20 @@ PyObject *_ctypes_callproc(PPROC pProc,
     }
     for (i = 0; i < argcount; ++i) {
         atypes[i] = args[i].ffi_type;
-        if (atypes[i]->type == FFI_TYPE_STRUCT
-            )
+#ifdef CTYPES_PASS_BY_REF_HACK
+        size_t size = atypes[i]->size;
+        if (IS_PASS_BY_REF(size)) {
+            void *tmp = alloca(size);
+            if (atypes[i]->type == FFI_TYPE_STRUCT)
+                memcpy(tmp, args[i].value.p, size);
+            else
+                memcpy(tmp, (void*)&args[i].value, size);
+
+            avalues[i] = tmp;
+        }
+        else
+#endif
+        if (atypes[i]->type == FFI_TYPE_STRUCT)
             avalues[i] = (void *)args[i].value.p;
         else
             avalues[i] = (void *)&args[i].value;
diff -urpN Python-3.6.3/Modules/_ctypes/cfield.c Python-3.6.5/Modules/_ctypes/cfield.c
--- Python-3.6.3/Modules/_ctypes/cfield.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_ctypes/cfield.c	2018-03-28 11:19:31.000000000 +0200
@@ -205,7 +205,11 @@ PyCField_set(CFieldObject *self, PyObjec
 {
     CDataObject *dst;
     char *ptr;
-    assert(CDataObject_Check(inst));
+    if (!CDataObject_Check(inst)) {
+        PyErr_SetString(PyExc_TypeError,
+                        "not a ctype instance");
+        return -1;
+    }
     dst = (CDataObject *)inst;
     ptr = dst->b_ptr + self->offset;
     if (value == NULL) {
@@ -225,7 +229,11 @@ PyCField_get(CFieldObject *self, PyObjec
         Py_INCREF(self);
         return (PyObject *)self;
     }
-    assert(CDataObject_Check(inst));
+    if (!CDataObject_Check(inst)) {
+        PyErr_SetString(PyExc_TypeError,
+                        "not a ctype instance");
+        return NULL;
+    }
     src = (CDataObject *)inst;
     return PyCData_get(self->proto, self->getfunc, inst,
                      self->index, self->size, src->b_ptr + self->offset);
diff -urpN Python-3.6.3/Modules/_ctypes/stgdict.c Python-3.6.5/Modules/_ctypes/stgdict.c
--- Python-3.6.3/Modules/_ctypes/stgdict.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_ctypes/stgdict.c	2018-03-28 11:19:31.000000000 +0200
@@ -282,7 +282,15 @@ MakeAnonFields(PyObject *type)
             Py_DECREF(anon_names);
             return -1;
         }
-        assert(Py_TYPE(descr) == &PyCField_Type);
+        if (Py_TYPE(descr) != &PyCField_Type) {
+            PyErr_Format(PyExc_AttributeError,
+                         "'%U' is specified in _anonymous_ but not in "
+                         "_fields_",
+                         fname);
+            Py_DECREF(anon_names);
+            Py_DECREF(descr);
+            return -1;
+        }
         descr->anonymous = 1;
 
         /* descr is in the field descriptor. */
diff -urpN Python-3.6.3/Modules/_cursesmodule.c Python-3.6.5/Modules/_cursesmodule.c
--- Python-3.6.3/Modules/_cursesmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_cursesmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -112,13 +112,13 @@ char *PyCursesVersion = "2.2";
 #define CURSES_MODULE
 #include "py_curses.h"
 
-/*  These prototypes are in <term.h>, but including this header
-    #defines many common symbols (such as "lines") which breaks the
-    curses module in other ways.  So the code will just specify
-    explicit prototypes here. */
-extern int setupterm(char *,int,int *);
-#ifdef __sgi
+#if defined(HAVE_TERM_H) || defined(__sgi)
+/* For termname, longname, putp, tigetflag, tigetnum, tigetstr, tparm
+   which are not declared in SysV curses and for setupterm. */
 #include <term.h>
+/* Including <term.h> #defines many common symbols. */
+#undef lines
+#undef columns
 #endif
 
 #ifdef HAVE_LANGINFO_H
@@ -484,7 +484,9 @@ Window_NoArgNoReturnVoidFunction(wclrtob
 Window_NoArgNoReturnVoidFunction(wclear)
 
 Window_OneArgNoReturnVoidFunction(idcok, int, "i;True(1) or False(0)")
+#ifdef HAVE_CURSES_IMMEDOK
 Window_OneArgNoReturnVoidFunction(immedok, int, "i;True(1) or False(0)")
+#endif
 Window_OneArgNoReturnVoidFunction(wtimeout, int, "i;delay")
 
 Window_NoArg2TupleReturnFunction(getyx, int, "ii")
@@ -494,21 +496,15 @@ Window_NoArg2TupleReturnFunction(getpary
 
 Window_OneArgNoReturnFunction(clearok, int, "i;True(1) or False(0)")
 Window_OneArgNoReturnFunction(idlok, int, "i;True(1) or False(0)")
-#if defined(__NetBSD__)
-Window_OneArgNoReturnVoidFunction(keypad, int, "i;True(1) or False(0)")
-#else
 Window_OneArgNoReturnFunction(keypad, int, "i;True(1) or False(0)")
-#endif
 Window_OneArgNoReturnFunction(leaveok, int, "i;True(1) or False(0)")
-#if defined(__NetBSD__)
-Window_OneArgNoReturnVoidFunction(nodelay, int, "i;True(1) or False(0)")
-#else
 Window_OneArgNoReturnFunction(nodelay, int, "i;True(1) or False(0)")
-#endif
 Window_OneArgNoReturnFunction(notimeout, int, "i;True(1) or False(0)")
 Window_OneArgNoReturnFunction(scrollok, int, "i;True(1) or False(0)")
 Window_OneArgNoReturnFunction(winsdelln, int, "i;nlines")
+#ifdef HAVE_CURSES_SYNCOK
 Window_OneArgNoReturnFunction(syncok, int, "i;True(1) or False(0)")
+#endif
 
 Window_TwoArgNoReturnFunction(mvwin, int, "ii;y,x")
 Window_TwoArgNoReturnFunction(mvderwin, int, "ii;y,x")
@@ -916,12 +912,19 @@ PyCursesWindow_Border(PyCursesWindowObje
 static PyObject *
 PyCursesWindow_Box(PyCursesWindowObject *self, PyObject *args)
 {
+    PyObject *temp1, *temp2;
     chtype ch1=0,ch2=0;
     switch(PyTuple_Size(args)){
     case 0: break;
     default:
-        if (!PyArg_ParseTuple(args,"ll;vertint,horint", &ch1, &ch2))
+        if (!PyArg_ParseTuple(args,"OO;verch,horch", &temp1, &temp2))
             return NULL;
+        if (!PyCurses_ConvertToChtype(self, temp1, &ch1)) {
+            return NULL;
+        }
+        if (!PyCurses_ConvertToChtype(self, temp2, &ch2)) {
+            return NULL;
+        }
     }
     box(self->win,ch1,ch2);
     Py_INCREF(Py_None);
@@ -940,8 +943,14 @@ int py_mvwdelch(WINDOW *w, int y, int x)
 }
 #endif
 
-/* chgat, added by Fabian Kreutz <fabian.kreutz at gmx.net> */
+#if defined(HAVE_CURSES_IS_PAD)
+#define py_is_pad(win)      is_pad(win)
+#elif defined(WINDOW_HAS_FLAGS)
+#define py_is_pad(win)      ((win) ? ((win)->_flags & _ISPAD) != 0 : FALSE)
+#endif
 
+/* chgat, added by Fabian Kreutz <fabian.kreutz at gmx.net> */
+#ifdef HAVE_CURSES_WCHGAT
 static PyObject *
 PyCursesWindow_ChgAt(PyCursesWindowObject *self, PyObject *args)
 {
@@ -994,7 +1003,7 @@ PyCursesWindow_ChgAt(PyCursesWindowObjec
     }
     return PyCursesCheckERR(rtn, "chgat");
 }
-
+#endif
 
 static PyObject *
 PyCursesWindow_DelCh(PyCursesWindowObject *self, PyObject *args)
@@ -1079,10 +1088,11 @@ PyCursesWindow_EchoChar(PyCursesWindowOb
     if (!PyCurses_ConvertToChtype(self, temp, &ch))
         return NULL;
 
-#ifdef WINDOW_HAS_FLAGS
-    if (self->win->_flags & _ISPAD)
+#ifdef py_is_pad
+    if (py_is_pad(self->win)) {
         return PyCursesCheckERR(pechochar(self->win, ch | attr),
                                 "echochar");
+    }
     else
 #endif
         return PyCursesCheckERR(wechochar(self->win, ch | attr),
@@ -1162,15 +1172,18 @@ PyCursesWindow_GetKey(PyCursesWindowObje
         if (!PyErr_Occurred())
             PyErr_SetString(PyCursesError, "no input");
         return NULL;
-    } else if (rtn<=255) {
-        return Py_BuildValue("C", rtn);
-    } else {
-        const char *knp;
-#if defined(__NetBSD__)
-        knp = unctrl(rtn);
-#else
-        knp = keyname(rtn);
+    } else if (rtn <= 255) {
+#ifdef NCURSES_VERSION_MAJOR
+#if NCURSES_VERSION_MAJOR*100+NCURSES_VERSION_MINOR <= 507
+        /* Work around a bug in ncurses 5.7 and earlier */
+        if (rtn < 0) {
+            rtn += 256;
+        }
+#endif
 #endif
+        return PyUnicode_FromOrdinal(rtn);
+    } else {
+        const char *knp = keyname(rtn);
         return PyUnicode_FromString((knp == NULL) ? "" : knp);
     }
 }
@@ -1352,7 +1365,7 @@ PyCursesWindow_InsCh(PyCursesWindowObjec
         use_xy = TRUE;
         break;
     default:
-        PyErr_SetString(PyExc_TypeError, "insch requires 1 or 4 arguments");
+        PyErr_SetString(PyExc_TypeError, "insch requires 1 to 4 arguments");
         return NULL;
     }
 
@@ -1383,7 +1396,7 @@ PyCursesWindow_InCh(PyCursesWindowObject
         rtn = mvwinch(self->win,y,x);
         break;
     default:
-        PyErr_SetString(PyExc_TypeError, "inch requires 0 or 2 arguments");
+        PyErr_SetString(PyExc_TypeError, "inch requires 0 to 2 arguments");
         return NULL;
     }
     return PyLong_FromUnsignedLong(rtn);
@@ -1616,10 +1629,10 @@ PyCursesWindow_NoOutRefresh(PyCursesWind
     int pminrow,pmincol,sminrow,smincol,smaxrow,smaxcol;
     int rtn;
 
-#ifndef WINDOW_HAS_FLAGS
+#ifndef py_is_pad
     if (0)
 #else
-        if (self->win->_flags & _ISPAD)
+        if (py_is_pad(self->win))
 #endif
         {
             switch(PyTuple_Size(args)) {
@@ -1791,10 +1804,10 @@ PyCursesWindow_Refresh(PyCursesWindowObj
     int pminrow,pmincol,sminrow,smincol,smaxrow,smaxcol;
     int rtn;
 
-#ifndef WINDOW_HAS_FLAGS
+#ifndef py_is_pad
     if (0)
 #else
-        if (self->win->_flags & _ISPAD)
+        if (py_is_pad(self->win))
 #endif
         {
             switch(PyTuple_Size(args)) {
@@ -1860,9 +1873,10 @@ PyCursesWindow_SubWin(PyCursesWindowObje
     }
 
     /* printf("Subwin: %i %i %i %i   \n", nlines, ncols, begin_y, begin_x); */
-#ifdef WINDOW_HAS_FLAGS
-    if (self->win->_flags & _ISPAD)
+#ifdef py_is_pad
+    if (py_is_pad(self->win)) {
         win = subpad(self->win, nlines, ncols, begin_y, begin_x);
+    }
     else
 #endif
         win = subwin(self->win, nlines, ncols, begin_y, begin_x);
@@ -2002,7 +2016,9 @@ static PyMethodDef PyCursesWindow_Method
     {"attron",          (PyCFunction)PyCursesWindow_AttrOn, METH_VARARGS},
     {"attrset",         (PyCFunction)PyCursesWindow_AttrSet, METH_VARARGS},
     {"bkgd",            (PyCFunction)PyCursesWindow_Bkgd, METH_VARARGS},
+#ifdef HAVE_CURSES_WCHGAT
     {"chgat",           (PyCFunction)PyCursesWindow_ChgAt, METH_VARARGS},
+#endif
     {"bkgdset",         (PyCFunction)PyCursesWindow_BkgdSet, METH_VARARGS},
     {"border",          (PyCFunction)PyCursesWindow_Border, METH_VARARGS},
     {"box",             (PyCFunction)PyCursesWindow_Box, METH_VARARGS},
@@ -2033,7 +2049,9 @@ static PyMethodDef PyCursesWindow_Method
     {"hline",           (PyCFunction)PyCursesWindow_Hline, METH_VARARGS},
     {"idcok",           (PyCFunction)PyCursesWindow_idcok, METH_VARARGS},
     {"idlok",           (PyCFunction)PyCursesWindow_idlok, METH_VARARGS},
+#ifdef HAVE_CURSES_IMMEDOK
     {"immedok",         (PyCFunction)PyCursesWindow_immedok, METH_VARARGS},
+#endif
     {"inch",            (PyCFunction)PyCursesWindow_InCh, METH_VARARGS},
     {"insch",           (PyCFunction)PyCursesWindow_InsCh, METH_VARARGS},
     {"insdelln",        (PyCFunction)PyCursesWindow_winsdelln, METH_VARARGS},
@@ -2069,7 +2087,9 @@ static PyMethodDef PyCursesWindow_Method
     {"subpad",          (PyCFunction)PyCursesWindow_SubWin, METH_VARARGS},
     {"subwin",          (PyCFunction)PyCursesWindow_SubWin, METH_VARARGS},
     {"syncdown",        (PyCFunction)PyCursesWindow_wsyncdown, METH_NOARGS},
+#ifdef HAVE_CURSES_SYNCOK
     {"syncok",          (PyCFunction)PyCursesWindow_syncok, METH_VARARGS},
+#endif
     {"syncup",          (PyCFunction)PyCursesWindow_wsyncup, METH_NOARGS},
     {"timeout",         (PyCFunction)PyCursesWindow_wtimeout, METH_VARARGS},
     {"touchline",       (PyCFunction)PyCursesWindow_TouchLine, METH_VARARGS},
@@ -2161,6 +2181,7 @@ NoArgTrueFalseFunction(isendwin)
 NoArgNoReturnVoidFunction(flushinp)
 NoArgNoReturnVoidFunction(noqiflush)
 
+#ifdef HAVE_CURSES_FILTER
 static PyObject *
 PyCurses_filter(PyObject *self)
 {
@@ -2170,6 +2191,7 @@ PyCurses_filter(PyObject *self)
     Py_INCREF(Py_None);
     return Py_None;
 }
+#endif
 
 static PyObject *
 PyCurses_Color_Content(PyObject *self, PyObject *args)
@@ -2241,6 +2263,7 @@ PyCurses_EraseChar(PyObject *self)
     return PyBytes_FromStringAndSize(&ch, 1);
 }
 
+#ifdef getsyx
 static PyObject *
 PyCurses_getsyx(PyObject *self)
 {
@@ -2253,6 +2276,7 @@ PyCurses_getsyx(PyObject *self)
 
     return Py_BuildValue("(ii)", y, x);
 }
+#endif
 
 #ifdef NCURSES_MOUSE_VERSION
 static PyObject *
@@ -2268,24 +2292,30 @@ PyCurses_GetMouse(PyObject *self)
         PyErr_SetString(PyCursesError, "getmouse() returned ERR");
         return NULL;
     }
-    return Py_BuildValue("(hiiil)",
+    return Py_BuildValue("(hiiik)",
                          (short)event.id,
-                         event.x, event.y, event.z,
-                         (long) event.bstate);
+                         (int)event.x, (int)event.y, (int)event.z,
+                         (unsigned long) event.bstate);
 }
 
 static PyObject *
 PyCurses_UngetMouse(PyObject *self, PyObject *args)
 {
     MEVENT event;
+    short id;
+    int x, y, z;
+    unsigned long bstate;
 
     PyCursesInitialised;
-    if (!PyArg_ParseTuple(args, "hiiil",
-                          &event.id,
-                          &event.x, &event.y, &event.z,
-                          (int *) &event.bstate))
+    if (!PyArg_ParseTuple(args, "hiiik",
+                          &id, &x, &y, &z, &bstate))
         return NULL;
 
+    event.id = id;
+    event.x = x;
+    event.y = y;
+    event.z = z;
+    event.bstate = bstate;
     return PyCursesCheckERR(ungetmouse(&event), "ungetmouse");
 }
 #endif
@@ -2363,9 +2393,9 @@ PyCurses_HalfDelay(PyObject *self, PyObj
     return PyCursesCheckERR(halfdelay(tenths), "halfdelay");
 }
 
-#ifndef STRICT_SYSV_CURSES
-/* No has_key! */
-static PyObject * PyCurses_has_key(PyObject *self, PyObject *args)
+#ifdef HAVE_CURSES_HAS_KEY
+static PyObject *
+PyCurses_has_key(PyObject *self, PyObject *args)
 {
     int ch;
 
@@ -2380,7 +2410,7 @@ static PyObject * PyCurses_has_key(PyObj
     Py_INCREF(Py_True);
     return Py_True;
 }
-#endif /* STRICT_SYSV_CURSES */
+#endif
 
 static PyObject *
 PyCurses_Init_Color(PyObject *self, PyObject *args)
@@ -2621,7 +2651,6 @@ PyCurses_Is_Term_Resized(PyObject *self,
 }
 #endif /* HAVE_CURSES_IS_TERM_RESIZED */
 
-#if !defined(__NetBSD__)
 static PyObject *
 PyCurses_KeyName(PyObject *self, PyObject *args)
 {
@@ -2640,7 +2669,6 @@ PyCurses_KeyName(PyObject *self, PyObjec
 
     return PyBytes_FromString((knp == NULL) ? "" : knp);
 }
-#endif
 
 static PyObject *
 PyCurses_KillChar(PyObject *self)
@@ -2686,14 +2714,15 @@ PyCurses_MouseInterval(PyObject *self, P
 static PyObject *
 PyCurses_MouseMask(PyObject *self, PyObject *args)
 {
-    int newmask;
+    unsigned long newmask;
     mmask_t oldmask, availmask;
 
     PyCursesInitialised;
-    if (!PyArg_ParseTuple(args,"i;mousemask",&newmask))
+    if (!PyArg_ParseTuple(args,"k;mousemask",&newmask))
         return NULL;
-    availmask = mousemask(newmask, &oldmask);
-    return Py_BuildValue("(ll)", (long)availmask, (long)oldmask);
+    availmask = mousemask((mmask_t)newmask, &oldmask);
+    return Py_BuildValue("(kk)",
+                         (unsigned long)availmask, (unsigned long)oldmask);
 }
 #endif
 
@@ -2947,6 +2976,7 @@ PyCurses_Resize_Term(PyObject *self, PyO
 }
 #endif /* HAVE_CURSES_RESIZE_TERM */
 
+#ifdef getsyx
 static PyObject *
 PyCurses_setsyx(PyObject *self, PyObject *args)
 {
@@ -2966,6 +2996,7 @@ PyCurses_setsyx(PyObject *self, PyObject
     Py_INCREF(Py_None);
     return Py_None;
 }
+#endif
 
 static PyObject *
 PyCurses_Start_Color(PyObject *self)
@@ -3064,6 +3095,7 @@ PyCurses_tparm(PyObject *self, PyObject
     return PyBytes_FromString(result);
 }
 
+#ifdef HAVE_CURSES_TYPEAHEAD
 static PyObject *
 PyCurses_TypeAhead(PyObject *self, PyObject *args)
 {
@@ -3075,6 +3107,7 @@ PyCurses_TypeAhead(PyObject *self, PyObj
 
     return PyCursesCheckERR(typeahead( fd ), "typeahead");
 }
+#endif
 
 static PyObject *
 PyCurses_UnCtrl(PyObject *self, PyObject *args)
@@ -3174,6 +3207,7 @@ PyCurses_Unget_Wch(PyObject *self, PyObj
 }
 #endif
 
+#ifdef HAVE_CURSES_TYPEAHEAD
 static PyObject *
 PyCurses_Use_Env(PyObject *self, PyObject *args)
 {
@@ -3192,6 +3226,7 @@ PyCurses_Use_Env(PyObject *self, PyObjec
     Py_INCREF(Py_None);
     return Py_None;
 }
+#endif
 
 #ifndef STRICT_SYSV_CURSES
 static PyObject *
@@ -3230,19 +3265,23 @@ static PyMethodDef PyCurses_methods[] =
     {"echo",                (PyCFunction)PyCurses_echo, METH_VARARGS},
     {"endwin",              (PyCFunction)PyCurses_endwin, METH_NOARGS},
     {"erasechar",           (PyCFunction)PyCurses_EraseChar, METH_NOARGS},
+#ifdef HAVE_CURSES_FILTER
     {"filter",              (PyCFunction)PyCurses_filter, METH_NOARGS},
+#endif
     {"flash",               (PyCFunction)PyCurses_flash, METH_NOARGS},
     {"flushinp",            (PyCFunction)PyCurses_flushinp, METH_NOARGS},
 #ifdef NCURSES_MOUSE_VERSION
     {"getmouse",            (PyCFunction)PyCurses_GetMouse, METH_NOARGS},
     {"ungetmouse",          (PyCFunction)PyCurses_UngetMouse, METH_VARARGS},
 #endif
+#ifdef getsyx
     {"getsyx",              (PyCFunction)PyCurses_getsyx, METH_NOARGS},
+#endif
     {"getwin",              (PyCFunction)PyCurses_GetWin, METH_O},
     {"has_colors",          (PyCFunction)PyCurses_has_colors, METH_NOARGS},
     {"has_ic",              (PyCFunction)PyCurses_has_ic, METH_NOARGS},
     {"has_il",              (PyCFunction)PyCurses_has_il, METH_NOARGS},
-#ifndef STRICT_SYSV_CURSES
+#ifdef HAVE_CURSES_HAS_KEY
     {"has_key",             (PyCFunction)PyCurses_has_key, METH_VARARGS},
 #endif
     {"halfdelay",           (PyCFunction)PyCurses_HalfDelay, METH_VARARGS},
@@ -3254,9 +3293,7 @@ static PyMethodDef PyCurses_methods[] =
 #ifdef HAVE_CURSES_IS_TERM_RESIZED
     {"is_term_resized",     (PyCFunction)PyCurses_Is_Term_Resized, METH_VARARGS},
 #endif
-#if !defined(__NetBSD__)
     {"keyname",             (PyCFunction)PyCurses_KeyName, METH_VARARGS},
-#endif
     {"killchar",            (PyCFunction)PyCurses_KillChar, METH_NOARGS},
     {"longname",            (PyCFunction)PyCurses_longname, METH_NOARGS},
     {"meta",                (PyCFunction)PyCurses_Meta, METH_VARARGS},
@@ -3288,7 +3325,9 @@ static PyMethodDef PyCurses_methods[] =
     {"resize_term",         (PyCFunction)PyCurses_Resize_Term, METH_VARARGS},
 #endif
     {"savetty",             (PyCFunction)PyCurses_savetty, METH_NOARGS},
+#ifdef getsyx
     {"setsyx",              (PyCFunction)PyCurses_setsyx, METH_VARARGS},
+#endif
     {"setupterm",           (PyCFunction)PyCurses_setupterm,
      METH_VARARGS|METH_KEYWORDS},
     {"start_color",         (PyCFunction)PyCurses_Start_Color, METH_NOARGS},
@@ -3298,7 +3337,9 @@ static PyMethodDef PyCurses_methods[] =
     {"tigetnum",            (PyCFunction)PyCurses_tigetnum, METH_VARARGS},
     {"tigetstr",            (PyCFunction)PyCurses_tigetstr, METH_VARARGS},
     {"tparm",               (PyCFunction)PyCurses_tparm, METH_VARARGS},
+#ifdef HAVE_CURSES_TYPEAHEAD
     {"typeahead",           (PyCFunction)PyCurses_TypeAhead, METH_VARARGS},
+#endif
     {"unctrl",              (PyCFunction)PyCurses_UnCtrl, METH_VARARGS},
     {"ungetch",             (PyCFunction)PyCurses_UngetCh, METH_VARARGS},
 #if defined(HAVE_CURSES_RESIZETERM) || defined(HAVE_CURSES_RESIZE_TERM)
@@ -3307,7 +3348,9 @@ static PyMethodDef PyCurses_methods[] =
 #ifdef HAVE_NCURSESW
     {"unget_wch",           (PyCFunction)PyCurses_Unget_Wch, METH_VARARGS},
 #endif
+#ifdef HAVE_CURSES_USE_ENV
     {"use_env",             (PyCFunction)PyCurses_Use_Env, METH_VARARGS},
+#endif
 #ifndef STRICT_SYSV_CURSES
     {"use_default_colors",  (PyCFunction)PyCurses_Use_Default_Colors, METH_NOARGS},
 #endif
@@ -3385,9 +3428,7 @@ PyInit__curses(void)
     SetDictInt("A_DIM",                 A_DIM);
     SetDictInt("A_BOLD",                A_BOLD);
     SetDictInt("A_ALTCHARSET",          A_ALTCHARSET);
-#if !defined(__NetBSD__)
     SetDictInt("A_INVIS",           A_INVIS);
-#endif
     SetDictInt("A_PROTECT",         A_PROTECT);
     SetDictInt("A_CHARTEXT",        A_CHARTEXT);
     SetDictInt("A_COLOR",           A_COLOR);
@@ -3459,7 +3500,6 @@ PyInit__curses(void)
         int key;
         char *key_n;
         char *key_n2;
-#if !defined(__NetBSD__)
         for (key=KEY_MIN;key < KEY_MAX; key++) {
             key_n = (char *)keyname(key);
             if (key_n == NULL || strcmp(key_n,"UNKNOWN KEY")==0)
@@ -3487,7 +3527,6 @@ PyInit__curses(void)
             if (key_n2 != key_n)
                 PyMem_Free(key_n2);
         }
-#endif
         SetDictInt("KEY_MIN", KEY_MIN);
         SetDictInt("KEY_MAX", KEY_MAX);
     }
diff -urpN Python-3.6.3/Modules/_datetimemodule.c Python-3.6.5/Modules/_datetimemodule.c
--- Python-3.6.3/Modules/_datetimemodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_datetimemodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -1533,6 +1533,7 @@ delta_to_microseconds(PyDateTime_Delta *
     if (x2 == NULL)
         goto Done;
     result = PyNumber_Add(x1, x2);
+    assert(result == NULL || PyLong_CheckExact(result));
 
 Done:
     Py_XDECREF(x1);
@@ -1555,6 +1556,7 @@ microseconds_to_delta_ex(PyObject *pyus,
     PyObject *num = NULL;
     PyObject *result = NULL;
 
+    assert(PyLong_CheckExact(pyus));
     tuple = PyNumber_Divmod(pyus, us_per_second);
     if (tuple == NULL)
         goto Done;
@@ -1647,6 +1649,33 @@ multiply_int_timedelta(PyObject *intobj,
 }
 
 static PyObject *
+get_float_as_integer_ratio(PyObject *floatobj)
+{
+    PyObject *ratio;
+
+    assert(floatobj && PyFloat_Check(floatobj));
+    ratio = _PyObject_CallMethodId(floatobj, &PyId_as_integer_ratio, NULL);
+    if (ratio == NULL) {
+        return NULL;
+    }
+    if (!PyTuple_Check(ratio)) {
+        PyErr_Format(PyExc_TypeError,
+                     "unexpected return type from as_integer_ratio(): "
+                     "expected tuple, got '%.200s'",
+                     Py_TYPE(ratio)->tp_name);
+        Py_DECREF(ratio);
+        return NULL;
+    }
+    if (PyTuple_Size(ratio) != 2) {
+        PyErr_SetString(PyExc_ValueError,
+                        "as_integer_ratio() must return a 2-tuple");
+        Py_DECREF(ratio);
+        return NULL;
+    }
+    return ratio;
+}
+
+static PyObject *
 multiply_float_timedelta(PyObject *floatobj, PyDateTime_Delta *delta)
 {
     PyObject *result = NULL;
@@ -1656,9 +1685,10 @@ multiply_float_timedelta(PyObject *float
     pyus_in = delta_to_microseconds(delta);
     if (pyus_in == NULL)
         return NULL;
-    ratio = _PyObject_CallMethodId(floatobj, &PyId_as_integer_ratio, NULL);
-    if (ratio == NULL)
+    ratio = get_float_as_integer_ratio(floatobj);
+    if (ratio == NULL) {
         goto error;
+    }
     temp = PyNumber_Multiply(pyus_in, PyTuple_GET_ITEM(ratio, 0));
     Py_DECREF(pyus_in);
     pyus_in = NULL;
@@ -1754,9 +1784,10 @@ truedivide_timedelta_float(PyDateTime_De
     pyus_in = delta_to_microseconds(delta);
     if (pyus_in == NULL)
         return NULL;
-    ratio = _PyObject_CallMethodId(f, &PyId_as_integer_ratio, NULL);
-    if (ratio == NULL)
+    ratio = get_float_as_integer_ratio(f);
+    if (ratio == NULL) {
         goto error;
+    }
     temp = PyNumber_Multiply(pyus_in, PyTuple_GET_ITEM(ratio, 1));
     Py_DECREF(pyus_in);
     pyus_in = NULL;
@@ -2079,11 +2110,13 @@ accum(const char* tag, PyObject *sofar,
     assert(num != NULL);
 
     if (PyLong_Check(num)) {
-        prod = PyNumber_Multiply(num, factor);
+        prod = PyNumber_Multiply(factor, num);
         if (prod == NULL)
             return NULL;
+        assert(PyLong_CheckExact(prod));
         sum = PyNumber_Add(sofar, prod);
         Py_DECREF(prod);
+        assert(sum == NULL || PyLong_CheckExact(sum));
         return sum;
     }
 
@@ -2126,7 +2159,7 @@ accum(const char* tag, PyObject *sofar,
          * fractional part requires float arithmetic, and may
          * lose a little info.
          */
-        assert(PyLong_Check(factor));
+        assert(PyLong_CheckExact(factor));
         dnum = PyLong_AsDouble(factor);
 
         dnum *= fracpart;
@@ -2141,6 +2174,7 @@ accum(const char* tag, PyObject *sofar,
         Py_DECREF(sum);
         Py_DECREF(x);
         *leftover += fracpart;
+        assert(y == NULL || PyLong_CheckExact(y));
         return y;
     }
 
@@ -3123,7 +3157,7 @@ Inconsistent:
     PyErr_SetString(PyExc_ValueError, "fromutc: tz.dst() gave"
                     "inconsistent results; cannot convert");
 
-    /* fall thru to failure */
+    /* fall through to failure */
 Fail:
     Py_XDECREF(off);
     Py_XDECREF(dst);
diff -urpN Python-3.6.3/Modules/_dbmmodule.c Python-3.6.5/Modules/_dbmmodule.c
--- Python-3.6.3/Modules/_dbmmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_dbmmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -413,7 +413,7 @@ static PyTypeObject Dbmtype = {
 
 _dbm.open as dbmopen
 
-    filename: str
+    filename: unicode
         The filename to open.
 
     flags: str="r"
@@ -430,9 +430,9 @@ Return a database object.
 [clinic start generated code]*/
 
 static PyObject *
-dbmopen_impl(PyObject *module, const char *filename, const char *flags,
+dbmopen_impl(PyObject *module, PyObject *filename, const char *flags,
              int mode)
-/*[clinic end generated code: output=5fade8cf16e0755f input=226334bade5764e6]*/
+/*[clinic end generated code: output=9527750f5df90764 input=376a9d903a50df59]*/
 {
     int iflags;
 
@@ -451,7 +451,20 @@ dbmopen_impl(PyObject *module, const cha
                         "arg 2 to open should be 'r', 'w', 'c', or 'n'");
         return NULL;
     }
-    return newdbmobject(filename, iflags, mode);
+
+    PyObject *filenamebytes = PyUnicode_EncodeFSDefault(filename);
+    if (filenamebytes == NULL) {
+        return NULL;
+    }
+    const char *name = PyBytes_AS_STRING(filenamebytes);
+    if (strlen(name) != (size_t)PyBytes_GET_SIZE(filenamebytes)) {
+        Py_DECREF(filenamebytes);
+        PyErr_SetString(PyExc_ValueError, "embedded null character");
+        return NULL;
+    }
+    PyObject *self = newdbmobject(name, iflags, mode);
+    Py_DECREF(filenamebytes);
+    return self;
 }
 
 static PyMethodDef dbmmodule_methods[] = {
diff -urpN Python-3.6.3/Modules/_elementtree.c Python-3.6.5/Modules/_elementtree.c
--- Python-3.6.3/Modules/_elementtree.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_elementtree.c	2018-03-28 11:19:31.000000000 +0200
@@ -61,15 +61,22 @@ do { memory -= size; printf("%8d - %s\n"
 #define JOIN_SET(p, flag) ((void*) ((uintptr_t) (JOIN_OBJ(p)) | (flag)))
 #define JOIN_OBJ(p) ((PyObject*) ((uintptr_t) (p) & ~(uintptr_t)1))
 
+/* Py_SETREF for a PyObject* that uses a join flag. */
+Py_LOCAL_INLINE(void)
+_set_joined_ptr(PyObject **p, PyObject *new_joined_ptr)
+{
+    PyObject *tmp = JOIN_OBJ(*p);
+    *p = new_joined_ptr;
+    Py_DECREF(tmp);
+}
+
 /* Py_CLEAR for a PyObject* that uses a join flag. Pass the pointer by
  * reference since this function sets it to NULL.
 */
 static void _clear_joined_ptr(PyObject **p)
 {
     if (*p) {
-        PyObject *tmp = JOIN_OBJ(*p);
-        *p = NULL;
-        Py_DECREF(tmp);
+        _set_joined_ptr(p, NULL);
     }
 }
 
@@ -356,7 +363,6 @@ static int
 element_init(PyObject *self, PyObject *args, PyObject *kwds)
 {
     PyObject *tag;
-    PyObject *tmp;
     PyObject *attrib = NULL;
     ElementObject *self_elem;
 
@@ -397,15 +403,11 @@ element_init(PyObject *self, PyObject *a
     Py_INCREF(tag);
     Py_XSETREF(self_elem->tag, tag);
 
-    tmp = self_elem->text;
     Py_INCREF(Py_None);
-    self_elem->text = Py_None;
-    Py_DECREF(JOIN_OBJ(tmp));
+    _set_joined_ptr(&self_elem->text, Py_None);
 
-    tmp = self_elem->tail;
     Py_INCREF(Py_None);
-    self_elem->tail = Py_None;
-    Py_DECREF(JOIN_OBJ(tmp));
+    _set_joined_ptr(&self_elem->tail, Py_None);
 
     return 0;
 }
@@ -675,12 +677,10 @@ _elementtree_Element_clear_impl(ElementO
     dealloc_extra(self);
 
     Py_INCREF(Py_None);
-    Py_DECREF(JOIN_OBJ(self->text));
-    self->text = Py_None;
+    _set_joined_ptr(&self->text, Py_None);
 
     Py_INCREF(Py_None);
-    Py_DECREF(JOIN_OBJ(self->tail));
-    self->tail = Py_None;
+    _set_joined_ptr(&self->tail, Py_None);
 
     Py_RETURN_NONE;
 }
@@ -702,13 +702,11 @@ _elementtree_Element___copy___impl(Eleme
     if (!element)
         return NULL;
 
-    Py_DECREF(JOIN_OBJ(element->text));
-    element->text = self->text;
-    Py_INCREF(JOIN_OBJ(element->text));
-
-    Py_DECREF(JOIN_OBJ(element->tail));
-    element->tail = self->tail;
-    Py_INCREF(JOIN_OBJ(element->tail));
+    Py_INCREF(JOIN_OBJ(self->text));
+    _set_joined_ptr(&element->text, self->text);
+
+    Py_INCREF(JOIN_OBJ(self->tail));
+    _set_joined_ptr(&element->tail, self->tail);
 
     if (self->extra) {
         if (element_resize(element, self->extra->length) < 0) {
@@ -776,14 +774,12 @@ _elementtree_Element___deepcopy__(Elemen
     text = deepcopy(JOIN_OBJ(self->text), memo);
     if (!text)
         goto error;
-    Py_DECREF(element->text);
-    element->text = JOIN_SET(text, JOIN_GET(self->text));
+    _set_joined_ptr(&element->text, JOIN_SET(text, JOIN_GET(self->text)));
 
     tail = deepcopy(JOIN_OBJ(self->tail), memo);
     if (!tail)
         goto error;
-    Py_DECREF(element->tail);
-    element->tail = JOIN_SET(tail, JOIN_GET(self->tail));
+    _set_joined_ptr(&element->tail, JOIN_SET(tail, JOIN_GET(self->tail)));
 
     if (self->extra) {
         if (element_resize(element, self->extra->length) < 0)
@@ -967,13 +963,13 @@ element_setstate_from_attributes(Element
     Py_INCREF(tag);
     Py_XSETREF(self->tag, tag);
 
-    _clear_joined_ptr(&self->text);
-    self->text = text ? JOIN_SET(text, PyList_CheckExact(text)) : Py_None;
-    Py_INCREF(JOIN_OBJ(self->text));
-
-    _clear_joined_ptr(&self->tail);
-    self->tail = tail ? JOIN_SET(tail, PyList_CheckExact(tail)) : Py_None;
-    Py_INCREF(JOIN_OBJ(self->tail));
+    text = text ? JOIN_SET(text, PyList_CheckExact(text)) : Py_None;
+    Py_INCREF(JOIN_OBJ(text));
+    _set_joined_ptr(&self->text, text);
+
+    tail = tail ? JOIN_SET(tail, PyList_CheckExact(tail)) : Py_None;
+    Py_INCREF(JOIN_OBJ(tail));
+    _set_joined_ptr(&self->tail, tail);
 
     /* Handle ATTRIB and CHILDREN. */
     if (!children && !attrib)
@@ -1980,8 +1976,7 @@ element_text_setter(ElementObject *self,
 {
     _VALIDATE_ATTR_VALUE(value);
     Py_INCREF(value);
-    Py_DECREF(JOIN_OBJ(self->text));
-    self->text = value;
+    _set_joined_ptr(&self->text, value);
     return 0;
 }
 
@@ -1990,8 +1985,7 @@ element_tail_setter(ElementObject *self,
 {
     _VALIDATE_ATTR_VALUE(value);
     Py_INCREF(value);
-    Py_DECREF(JOIN_OBJ(self->tail));
-    self->tail = value;
+    _set_joined_ptr(&self->tail, value);
     return 0;
 }
 
diff -urpN Python-3.6.3/Modules/_gdbmmodule.c Python-3.6.5/Modules/_gdbmmodule.c
--- Python-3.6.3/Modules/_gdbmmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_gdbmmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -532,7 +532,7 @@ static PyTypeObject Dbmtype = {
 
 /*[clinic input]
 _gdbm.open as dbmopen
-    filename as name: str
+    filename: unicode
     flags: str="r"
     mode: int(py_default="0o666") = 0o666
     /
@@ -562,8 +562,9 @@ when the database has to be created.  It
 [clinic start generated code]*/
 
 static PyObject *
-dbmopen_impl(PyObject *module, const char *name, const char *flags, int mode)
-/*[clinic end generated code: output=31aa1bafdf5da688 input=55563cd60e51984a]*/
+dbmopen_impl(PyObject *module, PyObject *filename, const char *flags,
+             int mode)
+/*[clinic end generated code: output=9527750f5df90764 input=3be0b0875974b928]*/
 {
     int iflags;
 
@@ -611,7 +612,19 @@ dbmopen_impl(PyObject *module, const cha
         }
     }
 
-    return newdbmobject(name, iflags, mode);
+    PyObject *filenamebytes = PyUnicode_EncodeFSDefault(filename);
+    if (filenamebytes == NULL) {
+        return NULL;
+    }
+    const char *name = PyBytes_AS_STRING(filenamebytes);
+    if (strlen(name) != (size_t)PyBytes_GET_SIZE(filenamebytes)) {
+        Py_DECREF(filenamebytes);
+        PyErr_SetString(PyExc_ValueError, "embedded null character");
+        return NULL;
+    }
+    PyObject *self = newdbmobject(name, iflags, mode);
+    Py_DECREF(filenamebytes);
+    return self;
 }
 
 static const char dbmmodule_open_flags[] = "rwcn"
diff -urpN Python-3.6.3/Modules/_hashopenssl.c Python-3.6.5/Modules/_hashopenssl.c
--- Python-3.6.3/Modules/_hashopenssl.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_hashopenssl.c	2018-03-28 11:19:31.000000000 +0200
@@ -378,8 +378,8 @@ EVP_tp_init(EVPobject *self, PyObject *a
         return -1;
     }
 
-    self->name = name_obj;
-    Py_INCREF(self->name);
+    Py_INCREF(name_obj);
+    Py_XSETREF(self->name, name_obj);
 
     if (data_obj) {
         if (view.len >= HASHLIB_GIL_MINSIZE) {
@@ -918,7 +918,7 @@ generate_hash_name_list(void)
  *  This macro generates constructor function definitions for specific
  *  hash algorithms.  These constructors are much faster than calling
  *  the generic one passing it a python string and are noticeably
- *  faster than calling a python new() wrapper.  Thats important for
+ *  faster than calling a python new() wrapper.  That is important for
  *  code that wants to make hashes of a bunch of small strings.
  *  The first call will lazy-initialize, which reports an exception
  *  if initialization fails.
diff -urpN Python-3.6.3/Modules/_io/bufferedio.c Python-3.6.5/Modules/_io/bufferedio.c
--- Python-3.6.3/Modules/_io/bufferedio.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_io/bufferedio.c	2018-03-28 11:19:31.000000000 +0200
@@ -1311,7 +1311,6 @@ _io__Buffered_seek_impl(buffered *self,
         if (res == NULL)
             goto end;
         Py_CLEAR(res);
-        _bufferedwriter_reset_buf(self);
     }
 
     /* TODO: align on block boundary and read buffer if needed? */
@@ -1878,8 +1877,6 @@ _bufferedwriter_raw_write(buffered *self
     return n;
 }
 
-/* `restore_pos` is 1 if we need to restore the raw stream position at
-   the end, 0 otherwise. */
 static PyObject *
 _bufferedwriter_flush_unlocked(buffered *self)
 {
@@ -1920,9 +1917,18 @@ _bufferedwriter_flush_unlocked(buffered
             goto error;
     }
 
-    _bufferedwriter_reset_buf(self);
 
 end:
+    /* This ensures that after return from this function,
+       VALID_WRITE_BUFFER(self) returns false.
+
+       This is a required condition because when a tell() is called
+       after flushing and if VALID_READ_BUFFER(self) is false, we need
+       VALID_WRITE_BUFFER(self) to be false to have
+       RAW_OFFSET(self) == 0.
+
+       Issue: https://bugs.python.org/issue32228 */
+    _bufferedwriter_reset_buf(self);
     Py_RETURN_NONE;
 
 error:
diff -urpN Python-3.6.3/Modules/_io/fileio.c Python-3.6.5/Modules/_io/fileio.c
--- Python-3.6.3/Modules/_io/fileio.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_io/fileio.c	2018-03-28 11:19:31.000000000 +0200
@@ -691,10 +691,12 @@ _io_FileIO_readall_impl(fileio *self)
     Py_ssize_t bytes_read = 0;
     Py_ssize_t n;
     size_t bufsize;
+    int fstat_result;
 
     if (self->fd < 0)
         return err_closed();
 
+    Py_BEGIN_ALLOW_THREADS
     _Py_BEGIN_SUPPRESS_IPH
 #ifdef MS_WINDOWS
     pos = _lseeki64(self->fd, 0L, SEEK_CUR);
@@ -702,8 +704,10 @@ _io_FileIO_readall_impl(fileio *self)
     pos = lseek(self->fd, 0L, SEEK_CUR);
 #endif
     _Py_END_SUPPRESS_IPH
+    fstat_result = _Py_fstat_noraise(self->fd, &status);
+    Py_END_ALLOW_THREADS
 
-    if (_Py_fstat_noraise(self->fd, &status) == 0)
+    if (fstat_result == 0)
         end = status.st_size;
     else
         end = (Py_off_t)-1;
diff -urpN Python-3.6.3/Modules/_io/textio.c Python-3.6.5/Modules/_io/textio.c
--- Python-3.6.3/Modules/_io/textio.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_io/textio.c	2018-03-28 11:19:31.000000000 +0200
@@ -943,6 +943,7 @@ _io_TextIOWrapper___init___impl(textio *
     else {
         PyErr_SetString(PyExc_IOError,
                         "could not determine default encoding");
+        goto error;
     }
 
     /* Check we have been asked for a real text encoding */
diff -urpN Python-3.6.3/Modules/_io/winconsoleio.c Python-3.6.5/Modules/_io/winconsoleio.c
--- Python-3.6.3/Modules/_io/winconsoleio.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_io/winconsoleio.c	2018-03-28 11:19:31.000000000 +0200
@@ -981,6 +981,9 @@ _io__WindowsConsoleIO_write_impl(wincons
     if (!self->writable)
         return err_mode("writing");
 
+    if (!b->len) {
+        return PyLong_FromLong(0);
+    }
     if (b->len > BUFMAX)
         len = BUFMAX;
     else
diff -urpN Python-3.6.3/Modules/_json.c Python-3.6.5/Modules/_json.c
--- Python-3.6.3/Modules/_json.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_json.c	2018-03-28 11:19:31.000000000 +0200
@@ -1431,10 +1431,20 @@ static PyObject *
 encoder_encode_string(PyEncoderObject *s, PyObject *obj)
 {
     /* Return the JSON representation of a string */
-    if (s->fast_encode)
+    PyObject *encoded;
+
+    if (s->fast_encode) {
         return s->fast_encode(NULL, obj);
-    else
-        return PyObject_CallFunctionObjArgs(s->encoder, obj, NULL);
+    }
+    encoded = PyObject_CallFunctionObjArgs(s->encoder, obj, NULL);
+    if (encoded != NULL && !PyUnicode_Check(encoded)) {
+        PyErr_Format(PyExc_TypeError,
+                     "encoder() must return a string, not %.80s",
+                     Py_TYPE(encoded)->tp_name);
+        Py_DECREF(encoded);
+        return NULL;
+    }
+    return encoded;
 }
 
 static int
diff -urpN Python-3.6.3/Modules/_localemodule.c Python-3.6.5/Modules/_localemodule.c
--- Python-3.6.3/Modules/_localemodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_localemodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -171,12 +171,6 @@ PyLocale_localeconv(PyObject* self)
         RESULT(#i, x); \
     } while (0)
 
-    /* Numeric information */
-    RESULT_STRING(decimal_point);
-    RESULT_STRING(thousands_sep);
-    x = copy_grouping(l->grouping);
-    RESULT("grouping", x);
-
     /* Monetary information */
     RESULT_STRING(int_curr_symbol);
     RESULT_STRING(currency_symbol);
@@ -195,6 +189,32 @@ PyLocale_localeconv(PyObject* self)
     RESULT_INT(n_sep_by_space);
     RESULT_INT(p_sign_posn);
     RESULT_INT(n_sign_posn);
+
+    /* Numeric information */
+    PyObject *decimal_point, *thousands_sep;
+    const char *grouping;
+    if (_Py_GetLocaleconvNumeric(&decimal_point,
+                                 &thousands_sep,
+                                 &grouping) < 0) {
+        goto failed;
+    }
+
+    if (PyDict_SetItemString(result, "decimal_point", decimal_point) < 0) {
+        Py_DECREF(decimal_point);
+        Py_DECREF(thousands_sep);
+        goto failed;
+    }
+    Py_DECREF(decimal_point);
+
+    if (PyDict_SetItemString(result, "thousands_sep", thousands_sep) < 0) {
+        Py_DECREF(thousands_sep);
+        goto failed;
+    }
+    Py_DECREF(thousands_sep);
+
+    x = copy_grouping(grouping);
+    RESULT("grouping", x);
+
     return result;
 
   failed:
diff -urpN Python-3.6.3/Modules/_lzmamodule.c Python-3.6.5/Modules/_lzmamodule.c
--- Python-3.6.3/Modules/_lzmamodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_lzmamodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -1192,7 +1192,7 @@ _lzma_LZMADecompressor___init___impl(Dec
     self->needs_input = 1;
     self->input_buffer = NULL;
     self->input_buffer_size = 0;
-    self->unused_data = PyBytes_FromStringAndSize(NULL, 0);
+    Py_XSETREF(self->unused_data, PyBytes_FromStringAndSize(NULL, 0));
     if (self->unused_data == NULL)
         goto error;
 
diff -urpN Python-3.6.3/Modules/_pickle.c Python-3.6.5/Modules/_pickle.c
--- Python-3.6.3/Modules/_pickle.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_pickle.c	2018-03-28 11:19:31.000000000 +0200
@@ -353,6 +353,69 @@ _Pickle_FastCall(PyObject *func, PyObjec
 
 /*************************************************************************/
 
+/* Retrieve and deconstruct a method for avoiding a reference cycle
+   (pickler -> bound method of pickler -> pickler) */
+static int
+init_method_ref(PyObject *self, _Py_Identifier *name,
+                PyObject **method_func, PyObject **method_self)
+{
+    PyObject *func, *func2;
+
+    /* *method_func and *method_self should be consistent.  All refcount decrements
+       should be occurred after setting *method_self and *method_func. */
+    func = _PyObject_GetAttrId(self, name);
+    if (func == NULL) {
+        *method_self = NULL;
+        Py_CLEAR(*method_func);
+        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
+            return -1;
+        }
+        PyErr_Clear();
+        return 0;
+    }
+
+    if (PyMethod_Check(func) && PyMethod_GET_SELF(func) == self) {
+        /* Deconstruct a bound Python method */
+        func2 = PyMethod_GET_FUNCTION(func);
+        Py_INCREF(func2);
+        *method_self = self; /* borrowed */
+        Py_XSETREF(*method_func, func2);
+        Py_DECREF(func);
+        return 0;
+    }
+    else {
+        *method_self = NULL;
+        Py_XSETREF(*method_func, func);
+        return 0;
+    }
+}
+
+/* Bind a method if it was deconstructed */
+static PyObject *
+reconstruct_method(PyObject *func, PyObject *self)
+{
+    if (self) {
+        return PyMethod_New(func, self);
+    }
+    else {
+        Py_INCREF(func);
+        return func;
+    }
+}
+
+static PyObject *
+call_method(PyObject *func, PyObject *self, PyObject *obj)
+{
+    if (self) {
+        return PyObject_CallFunctionObjArgs(func, self, obj, NULL);
+    }
+    else {
+        return PyObject_CallFunctionObjArgs(func, obj, NULL);
+    }
+}
+
+/*************************************************************************/
+
 /* Internal data type used as the unpickling stack. */
 typedef struct {
     PyObject_VAR_HEAD
@@ -545,6 +608,8 @@ typedef struct PicklerObject {
                                    objects to support self-referential objects
                                    pickling. */
     PyObject *pers_func;        /* persistent_id() method, can be NULL */
+    PyObject *pers_func_self;   /* borrowed reference to self if pers_func
+                                   is an unbound method, NULL otherwise */
     PyObject *dispatch_table;   /* private dispatch_table, can be NULL */
 
     PyObject *write;            /* write() method of the output stream. */
@@ -583,6 +648,8 @@ typedef struct UnpicklerObject {
     Py_ssize_t memo_len;        /* Number of objects in the memo */
 
     PyObject *pers_func;        /* persistent_load() method, can be NULL. */
+    PyObject *pers_func_self;   /* borrowed reference to self if pers_func
+                                   is an unbound method, NULL otherwise */
 
     Py_buffer buffer;
     char *input_buffer;
@@ -1731,8 +1798,10 @@ fast_save_enter(PicklerObject *self, PyO
             }
         }
         key = PyLong_FromVoidPtr(obj);
-        if (key == NULL)
+        if (key == NULL) {
+            self->fast_nesting = -1;
             return 0;
+        }
         if (PyDict_GetItemWithError(self->fast_memo, key)) {
             Py_DECREF(key);
             PyErr_Format(PyExc_ValueError,
@@ -1743,6 +1812,8 @@ fast_save_enter(PicklerObject *self, PyO
             return 0;
         }
         if (PyErr_Occurred()) {
+            Py_DECREF(key);
+            self->fast_nesting = -1;
             return 0;
         }
         if (PyDict_SetItem(self->fast_memo, key, Py_None) < 0) {
@@ -3397,7 +3468,7 @@ save_type(PicklerObject *self, PyObject
 }
 
 static int
-save_pers(PicklerObject *self, PyObject *obj, PyObject *func)
+save_pers(PicklerObject *self, PyObject *obj)
 {
     PyObject *pid = NULL;
     int status = 0;
@@ -3405,8 +3476,7 @@ save_pers(PicklerObject *self, PyObject
     const char persid_op = PERSID;
     const char binpersid_op = BINPERSID;
 
-    Py_INCREF(obj);
-    pid = _Pickle_FastCall(func, obj);
+    pid = call_method(self->pers_func, self->pers_func_self, obj);
     if (pid == NULL)
         return -1;
 
@@ -3784,7 +3854,7 @@ save(PicklerObject *self, PyObject *obj,
              0   if it did nothing successfully;
              1   if a persistent id was saved.
          */
-        if ((status = save_pers(self, obj, self->pers_func)) != 0)
+        if ((status = save_pers(self, obj)) != 0)
             goto done;
     }
 
@@ -4198,19 +4268,20 @@ _pickle_Pickler___init___impl(PicklerObj
     self->fast = 0;
     self->fast_nesting = 0;
     self->fast_memo = NULL;
-    self->pers_func = NULL;
-    if (_PyObject_HasAttrId((PyObject *)self, &PyId_persistent_id)) {
-        self->pers_func = _PyObject_GetAttrId((PyObject *)self,
-                                              &PyId_persistent_id);
-        if (self->pers_func == NULL)
-            return -1;
+
+    if (init_method_ref((PyObject *)self, &PyId_persistent_id,
+                        &self->pers_func, &self->pers_func_self) < 0)
+    {
+        return -1;
     }
-    self->dispatch_table = NULL;
-    if (_PyObject_HasAttrId((PyObject *)self, &PyId_dispatch_table)) {
-        self->dispatch_table = _PyObject_GetAttrId((PyObject *)self,
-                                                   &PyId_dispatch_table);
-        if (self->dispatch_table == NULL)
+
+    self->dispatch_table = _PyObject_GetAttrId((PyObject *)self,
+                                               &PyId_dispatch_table);
+    if (self->dispatch_table == NULL) {
+        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
             return -1;
+        }
+        PyErr_Clear();
     }
 
     return 0;
@@ -4468,11 +4539,11 @@ Pickler_set_memo(PicklerObject *self, Py
 static PyObject *
 Pickler_get_persid(PicklerObject *self)
 {
-    if (self->pers_func == NULL)
+    if (self->pers_func == NULL) {
         PyErr_SetString(PyExc_AttributeError, "persistent_id");
-    else
-        Py_INCREF(self->pers_func);
-    return self->pers_func;
+        return NULL;
+    }
+    return reconstruct_method(self->pers_func, self->pers_func_self);
 }
 
 static int
@@ -4489,6 +4560,7 @@ Pickler_set_persid(PicklerObject *self,
         return -1;
     }
 
+    self->pers_func_self = NULL;
     Py_INCREF(value);
     Py_XSETREF(self->pers_func, value);
 
@@ -5165,22 +5237,24 @@ load_frozenset(UnpicklerObject *self)
 static PyObject *
 instantiate(PyObject *cls, PyObject *args)
 {
-    PyObject *result = NULL;
-    _Py_IDENTIFIER(__getinitargs__);
     /* Caller must assure args are a tuple.  Normally, args come from
        Pdata_poptuple which packs objects from the top of the stack
        into a newly created tuple. */
     assert(PyTuple_Check(args));
-    if (Py_SIZE(args) > 0 || !PyType_Check(cls) ||
-        _PyObject_HasAttrId(cls, &PyId___getinitargs__)) {
-        result = PyObject_CallObject(cls, args);
-    }
-    else {
+    if (!PyTuple_GET_SIZE(args) && PyType_Check(cls)) {
+        _Py_IDENTIFIER(__getinitargs__);
         _Py_IDENTIFIER(__new__);
-
-        result = _PyObject_CallMethodId(cls, &PyId___new__, "O", cls);
+        PyObject *func = _PyObject_GetAttrId(cls, &PyId___getinitargs__);
+        if (func == NULL) {
+            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
+                return NULL;
+            }
+            PyErr_Clear();
+            return _PyObject_CallMethodIdObjArgs(cls, &PyId___new__, cls, NULL);
+        }
+        Py_DECREF(func);
     }
-    return result;
+    return PyObject_CallObject(cls, args);
 }
 
 static int
@@ -5436,7 +5510,7 @@ load_stack_global(UnpicklerObject *self)
 static int
 load_persid(UnpicklerObject *self)
 {
-    PyObject *pid;
+    PyObject *pid, *obj;
     Py_ssize_t len;
     char *s;
 
@@ -5456,13 +5530,12 @@ load_persid(UnpicklerObject *self)
             return -1;
         }
 
-        /* This does not leak since _Pickle_FastCall() steals the reference
-           to pid first. */
-        pid = _Pickle_FastCall(self->pers_func, pid);
-        if (pid == NULL)
+        obj = call_method(self->pers_func, self->pers_func_self, pid);
+        Py_DECREF(pid);
+        if (obj == NULL)
             return -1;
 
-        PDATA_PUSH(self->stack, pid, -1);
+        PDATA_PUSH(self->stack, obj, -1);
         return 0;
     }
     else {
@@ -5477,20 +5550,19 @@ load_persid(UnpicklerObject *self)
 static int
 load_binpersid(UnpicklerObject *self)
 {
-    PyObject *pid;
+    PyObject *pid, *obj;
 
     if (self->pers_func) {
         PDATA_POP(self->stack, pid);
         if (pid == NULL)
             return -1;
 
-        /* This does not leak since _Pickle_FastCall() steals the
-           reference to pid first. */
-        pid = _Pickle_FastCall(self->pers_func, pid);
-        if (pid == NULL)
+        obj = call_method(self->pers_func, self->pers_func_self, pid);
+        Py_DECREF(pid);
+        if (obj == NULL)
             return -1;
 
-        PDATA_PUSH(self->stack, pid, -1);
+        PDATA_PUSH(self->stack, obj, -1);
         return 0;
     }
     else {
@@ -6626,17 +6698,11 @@ _pickle_Unpickler___init___impl(Unpickle
         return -1;
 
     self->fix_imports = fix_imports;
-    if (self->fix_imports == -1)
-        return -1;
 
-    if (_PyObject_HasAttrId((PyObject *)self, &PyId_persistent_load)) {
-        self->pers_func = _PyObject_GetAttrId((PyObject *)self,
-                                              &PyId_persistent_load);
-        if (self->pers_func == NULL)
-            return 1;
-    }
-    else {
-        self->pers_func = NULL;
+    if (init_method_ref((PyObject *)self, &PyId_persistent_load,
+                        &self->pers_func, &self->pers_func_self) < 0)
+    {
+        return -1;
     }
 
     self->stack = (Pdata *)Pdata_New();
@@ -6923,11 +6989,11 @@ Unpickler_set_memo(UnpicklerObject *self
 static PyObject *
 Unpickler_get_persload(UnpicklerObject *self)
 {
-    if (self->pers_func == NULL)
+    if (self->pers_func == NULL) {
         PyErr_SetString(PyExc_AttributeError, "persistent_load");
-    else
-        Py_INCREF(self->pers_func);
-    return self->pers_func;
+        return NULL;
+    }
+    return reconstruct_method(self->pers_func, self->pers_func_self);
 }
 
 static int
@@ -6945,6 +7011,7 @@ Unpickler_set_persload(UnpicklerObject *
         return -1;
     }
 
+    self->pers_func_self = NULL;
     Py_INCREF(value);
     Py_XSETREF(self->pers_func, value);
 
diff -urpN Python-3.6.3/Modules/_posixsubprocess.c Python-3.6.5/Modules/_posixsubprocess.c
--- Python-3.6.3/Modules/_posixsubprocess.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_posixsubprocess.c	2018-03-28 11:19:31.000000000 +0200
@@ -169,7 +169,7 @@ make_inheritable(PyObject *py_fds_to_kee
                called. */
             continue;
         }
-        if (_Py_set_inheritable((int)fd, 1, NULL) < 0)
+        if (_Py_set_inheritable_async_safe((int)fd, 1, NULL) < 0)
             return -1;
     }
     return 0;
@@ -431,21 +431,21 @@ child_exec(char *const exec_array[],
        dup2() removes the CLOEXEC flag but we must do it ourselves if dup2()
        would be a no-op (issue #10806). */
     if (p2cread == 0) {
-        if (_Py_set_inheritable(p2cread, 1, NULL) < 0)
+        if (_Py_set_inheritable_async_safe(p2cread, 1, NULL) < 0)
             goto error;
     }
     else if (p2cread != -1)
         POSIX_CALL(dup2(p2cread, 0));  /* stdin */
 
     if (c2pwrite == 1) {
-        if (_Py_set_inheritable(c2pwrite, 1, NULL) < 0)
+        if (_Py_set_inheritable_async_safe(c2pwrite, 1, NULL) < 0)
             goto error;
     }
     else if (c2pwrite != -1)
         POSIX_CALL(dup2(c2pwrite, 1));  /* stdout */
 
     if (errwrite == 2) {
-        if (_Py_set_inheritable(errwrite, 1, NULL) < 0)
+        if (_Py_set_inheritable_async_safe(errwrite, 1, NULL) < 0)
             goto error;
     }
     else if (errwrite != -1)
diff -urpN Python-3.6.3/Modules/_randommodule.c Python-3.6.5/Modules/_randommodule.c
--- Python-3.6.3/Modules/_randommodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_randommodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -259,8 +259,11 @@ random_seed(RandomObject *self, PyObject
      * So: if the arg is a PyLong, use its absolute value.
      * Otherwise use its hash value, cast to unsigned.
      */
-    if (PyLong_Check(arg))
-        n = PyNumber_Absolute(arg);
+    if (PyLong_Check(arg)) {
+        /* Calling int.__abs__() prevents calling arg.__abs__(), which might
+           return an invalid value. See issue #31478. */
+        n = PyLong_Type.tp_as_number->nb_absolute(arg);
+    }
     else {
         Py_hash_t hash = PyObject_Hash(arg);
         if (hash == -1)
diff -urpN Python-3.6.3/Modules/_sqlite/cursor.c Python-3.6.5/Modules/_sqlite/cursor.c
--- Python-3.6.3/Modules/_sqlite/cursor.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_sqlite/cursor.c	2018-03-28 11:19:31.000000000 +0200
@@ -39,21 +39,20 @@ static int pysqlite_cursor_init(pysqlite
     }
 
     Py_INCREF(connection);
-    self->connection = connection;
-    self->statement = NULL;
-    self->next_row = NULL;
-    self->in_weakreflist = NULL;
+    Py_XSETREF(self->connection, connection);
+    Py_CLEAR(self->statement);
+    Py_CLEAR(self->next_row);
 
-    self->row_cast_map = PyList_New(0);
+    Py_XSETREF(self->row_cast_map, PyList_New(0));
     if (!self->row_cast_map) {
         return -1;
     }
 
     Py_INCREF(Py_None);
-    self->description = Py_None;
+    Py_XSETREF(self->description, Py_None);
 
     Py_INCREF(Py_None);
-    self->lastrowid= Py_None;
+    Py_XSETREF(self->lastrowid, Py_None);
 
     self->arraysize = 1;
     self->closed = 0;
@@ -62,7 +61,7 @@ static int pysqlite_cursor_init(pysqlite
     self->rowcount = -1L;
 
     Py_INCREF(Py_None);
-    self->row_factory = Py_None;
+    Py_XSETREF(self->row_factory, Py_None);
 
     if (!pysqlite_check_thread(self->connection)) {
         return -1;
@@ -917,6 +916,11 @@ PyObject* pysqlite_noop(pysqlite_Connect
 
 PyObject* pysqlite_cursor_close(pysqlite_Cursor* self, PyObject* args)
 {
+    if (!self->connection) {
+        PyErr_SetString(pysqlite_ProgrammingError,
+                        "Base Cursor.__init__ not called.");
+        return NULL;
+    }
     if (!pysqlite_check_thread(self->connection) || !pysqlite_check_connection(self->connection)) {
         return NULL;
     }
diff -urpN Python-3.6.3/Modules/_ssl.c Python-3.6.5/Modules/_ssl.c
--- Python-3.6.3/Modules/_ssl.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_ssl.c	2018-03-28 11:19:31.000000000 +0200
@@ -55,6 +55,11 @@ static PySocketModule_APIObject PySocket
 #include <sys/poll.h>
 #endif
 
+#ifndef MS_WINDOWS
+/* inet_pton */
+#include <arpa/inet.h>
+#endif
+
 /* Don't warn about deprecated functions */
 #ifdef __GNUC__
 #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
@@ -122,7 +127,25 @@ struct py_ssl_library_code {
 #endif
 
 #ifdef TLSEXT_TYPE_application_layer_protocol_negotiation
-# define HAVE_ALPN
+# define HAVE_ALPN 1
+#else
+# define HAVE_ALPN 0
+#endif
+
+/* We cannot rely on OPENSSL_NO_NEXTPROTONEG because LibreSSL 2.6.1 dropped
+ * NPN support but did not set OPENSSL_NO_NEXTPROTONEG for compatibility
+ * reasons. The check for TLSEXT_TYPE_next_proto_neg works with
+ * OpenSSL 1.0.1+ and LibreSSL.
+ * OpenSSL 1.1.1-pre1 dropped NPN but still has TLSEXT_TYPE_next_proto_neg.
+ */
+#ifdef OPENSSL_NO_NEXTPROTONEG
+# define HAVE_NPN 0
+#elif (OPENSSL_VERSION_NUMBER >= 0x10101000L) && !defined(LIBRESSL_VERSION_NUMBER)
+# define HAVE_NPN 0
+#elif defined(TLSEXT_TYPE_next_proto_neg)
+# define HAVE_NPN 1
+#else
+# define HAVE_NPN 0
 #endif
 
 #ifndef INVALID_SOCKET /* MS defines this */
@@ -279,11 +302,11 @@ static unsigned int _ssl_locks_count = 0
 typedef struct {
     PyObject_HEAD
     SSL_CTX *ctx;
-#if defined(OPENSSL_NPN_NEGOTIATED) && !defined(OPENSSL_NO_NEXTPROTONEG)
+#if HAVE_NPN
     unsigned char *npn_protocols;
     int npn_protocols_len;
 #endif
-#ifdef HAVE_ALPN
+#if HAVE_ALPN
     unsigned char *alpn_protocols;
     int alpn_protocols_len;
 #endif
@@ -667,8 +690,41 @@ newPySSLSocket(PySSLContext *sslctx, PyS
     SSL_set_mode(self->ssl, mode);
 
 #if HAVE_SNI
-    if (server_hostname != NULL)
-        SSL_set_tlsext_host_name(self->ssl, server_hostname);
+    if (server_hostname != NULL) {
+/* Don't send SNI for IP addresses. We cannot simply use inet_aton() and
+ * inet_pton() here. inet_aton() may be linked weakly and inet_pton() isn't
+ * available on all platforms. Use OpenSSL's IP address parser. It's
+ * available since 1.0.2 and LibreSSL since at least 2.3.0. */
+        int send_sni = 1;
+#if OPENSSL_VERSION_NUMBER >= 0x10200000L
+        ASN1_OCTET_STRING *ip = a2i_IPADDRESS(server_hostname);
+        if (ip == NULL) {
+            send_sni = 1;
+            ERR_clear_error();
+        } else {
+            send_sni = 0;
+            ASN1_OCTET_STRING_free(ip);
+        }
+#elif defined(HAVE_INET_PTON)
+#ifdef ENABLE_IPV6
+        char packed[Py_MAX(sizeof(struct in_addr), sizeof(struct in6_addr))];
+#else
+        char packed[sizeof(struct in_addr)];
+#endif /* ENABLE_IPV6 */
+        if (inet_pton(AF_INET, server_hostname, packed)) {
+            send_sni = 0;
+#ifdef ENABLE_IPV6
+        } else if(inet_pton(AF_INET6, server_hostname, packed)) {
+            send_sni = 0;
+#endif /* ENABLE_IPV6 */
+        } else {
+            send_sni = 1;
+        }
+#endif /* HAVE_INET_PTON */
+        if (send_sni) {
+            SSL_set_tlsext_host_name(self->ssl, server_hostname);
+        }
+    }
 #endif
 
     /* If the socket is in non-blocking mode or timeout mode, set the BIO
@@ -1738,7 +1794,7 @@ _ssl__SSLSocket_version_impl(PySSLSocket
     return PyUnicode_FromString(version);
 }
 
-#if defined(OPENSSL_NPN_NEGOTIATED) && !defined(OPENSSL_NO_NEXTPROTONEG)
+#if HAVE_NPN
 /*[clinic input]
 _ssl._SSLSocket.selected_npn_protocol
 [clinic start generated code]*/
@@ -1759,7 +1815,7 @@ _ssl__SSLSocket_selected_npn_protocol_im
 }
 #endif
 
-#ifdef HAVE_ALPN
+#if HAVE_ALPN
 /*[clinic input]
 _ssl._SSLSocket.selected_alpn_protocol
 [clinic start generated code]*/
@@ -2691,10 +2747,10 @@ _ssl__SSLContext_impl(PyTypeObject *type
         return NULL;
     }
     self->ctx = ctx;
-#if defined(OPENSSL_NPN_NEGOTIATED) && !defined(OPENSSL_NO_NEXTPROTONEG)
+#if HAVE_NPN
     self->npn_protocols = NULL;
 #endif
-#ifdef HAVE_ALPN
+#if HAVE_ALPN
     self->alpn_protocols = NULL;
 #endif
 #ifndef OPENSSL_NO_TLSEXT
@@ -2736,7 +2792,7 @@ _ssl__SSLContext_impl(PyTypeObject *type
 #endif
     SSL_CTX_set_options(self->ctx, options);
 
-    /* A bare minimum cipher list without completly broken cipher suites.
+    /* A bare minimum cipher list without completely broken cipher suites.
      * It's far from perfect but gives users a better head start. */
     if (proto_version != PY_SSL_VERSION_SSL2) {
         result = SSL_CTX_set_cipher_list(ctx, "HIGH:!aNULL:!eNULL:!MD5");
@@ -2826,10 +2882,10 @@ context_dealloc(PySSLContext *self)
     PyObject_GC_UnTrack(self);
     context_clear(self);
     SSL_CTX_free(self->ctx);
-#if defined(OPENSSL_NPN_NEGOTIATED) && !defined(OPENSSL_NO_NEXTPROTONEG)
+#if HAVE_NPN
     PyMem_FREE(self->npn_protocols);
 #endif
-#ifdef HAVE_ALPN
+#if HAVE_ALPN
     PyMem_FREE(self->alpn_protocols);
 #endif
     Py_TYPE(self)->tp_free(self);
@@ -2904,7 +2960,7 @@ _ssl__SSLContext_get_ciphers_impl(PySSLC
 #endif
 
 
-#if defined(OPENSSL_NPN_NEGOTIATED) && !defined(OPENSSL_NO_NEXTPROTONEG) || defined(HAVE_ALPN)
+#if HAVE_NPN || HAVE_ALPN
 static int
 do_protocol_selection(int alpn, unsigned char **out, unsigned char *outlen,
                       const unsigned char *server_protocols, unsigned int server_protocols_len,
@@ -2930,7 +2986,7 @@ do_protocol_selection(int alpn, unsigned
 }
 #endif
 
-#if defined(OPENSSL_NPN_NEGOTIATED) && !defined(OPENSSL_NO_NEXTPROTONEG)
+#if HAVE_NPN
 /* this callback gets passed to SSL_CTX_set_next_protos_advertise_cb */
 static int
 _advertiseNPN_cb(SSL *s,
@@ -2973,7 +3029,7 @@ _ssl__SSLContext__set_npn_protocols_impl
                                          Py_buffer *protos)
 /*[clinic end generated code: output=72b002c3324390c6 input=319fcb66abf95bd7]*/
 {
-#if defined(OPENSSL_NPN_NEGOTIATED) && !defined(OPENSSL_NO_NEXTPROTONEG)
+#if HAVE_NPN
     PyMem_Free(self->npn_protocols);
     self->npn_protocols = PyMem_Malloc(protos->len);
     if (self->npn_protocols == NULL)
@@ -2998,7 +3054,7 @@ _ssl__SSLContext__set_npn_protocols_impl
 #endif
 }
 
-#ifdef HAVE_ALPN
+#if HAVE_ALPN
 static int
 _selectALPN_cb(SSL *s,
               const unsigned char **out, unsigned char *outlen,
@@ -3023,7 +3079,7 @@ _ssl__SSLContext__set_alpn_protocols_imp
                                           Py_buffer *protos)
 /*[clinic end generated code: output=87599a7f76651a9b input=9bba964595d519be]*/
 {
-#ifdef HAVE_ALPN
+#if HAVE_ALPN
     if ((size_t)protos->len > UINT_MAX) {
         PyErr_Format(PyExc_OverflowError,
             "protocols longer than %d bytes", UINT_MAX);
@@ -5443,7 +5499,7 @@ PyInit__ssl(void)
     Py_INCREF(r);
     PyModule_AddObject(m, "HAS_ECDH", r);
 
-#if defined(OPENSSL_NPN_NEGOTIATED) && !defined(OPENSSL_NO_NEXTPROTONEG)
+#if HAVE_NPN
     r = Py_True;
 #else
     r = Py_False;
@@ -5451,7 +5507,7 @@ PyInit__ssl(void)
     Py_INCREF(r);
     PyModule_AddObject(m, "HAS_NPN", r);
 
-#ifdef HAVE_ALPN
+#if HAVE_ALPN
     r = Py_True;
 #else
     r = Py_False;
diff -urpN Python-3.6.3/Modules/_testcapimodule.c Python-3.6.5/Modules/_testcapimodule.c
--- Python-3.6.3/Modules/_testcapimodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_testcapimodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -3016,7 +3016,8 @@ check_time_rounding(int round)
 {
     if (round != _PyTime_ROUND_FLOOR
         && round != _PyTime_ROUND_CEILING
-        && round != _PyTime_ROUND_HALF_EVEN) {
+        && round != _PyTime_ROUND_HALF_EVEN
+        && round != _PyTime_ROUND_UP) {
         PyErr_SetString(PyExc_ValueError, "invalid rounding");
         return -1;
     }
@@ -3436,6 +3437,130 @@ test_pyobject_setallocators(PyObject *se
     return test_setallocators(PYMEM_DOMAIN_OBJ);
 }
 
+/* Most part of the following code is inherited from the pyfailmalloc project
+ * written by Victor Stinner. */
+static struct {
+    int installed;
+    PyMemAllocatorEx raw;
+    PyMemAllocatorEx mem;
+    PyMemAllocatorEx obj;
+} FmHook;
+
+static struct {
+    int start;
+    int stop;
+    Py_ssize_t count;
+} FmData;
+
+static int
+fm_nomemory(void)
+{
+    FmData.count++;
+    if (FmData.count > FmData.start &&
+            (FmData.stop <= 0 || FmData.count <= FmData.stop)) {
+        return 1;
+    }
+    return 0;
+}
+
+static void *
+hook_fmalloc(void *ctx, size_t size)
+{
+    PyMemAllocatorEx *alloc = (PyMemAllocatorEx *)ctx;
+    if (fm_nomemory()) {
+        return NULL;
+    }
+    return alloc->malloc(alloc->ctx, size);
+}
+
+static void *
+hook_fcalloc(void *ctx, size_t nelem, size_t elsize)
+{
+    PyMemAllocatorEx *alloc = (PyMemAllocatorEx *)ctx;
+    if (fm_nomemory()) {
+        return NULL;
+    }
+    return alloc->calloc(alloc->ctx, nelem, elsize);
+}
+
+static void *
+hook_frealloc(void *ctx, void *ptr, size_t new_size)
+{
+    PyMemAllocatorEx *alloc = (PyMemAllocatorEx *)ctx;
+    if (fm_nomemory()) {
+        return NULL;
+    }
+    return alloc->realloc(alloc->ctx, ptr, new_size);
+}
+
+static void
+hook_ffree(void *ctx, void *ptr)
+{
+    PyMemAllocatorEx *alloc = (PyMemAllocatorEx *)ctx;
+    alloc->free(alloc->ctx, ptr);
+}
+
+static void
+fm_setup_hooks(void)
+{
+    PyMemAllocatorEx alloc;
+
+    if (FmHook.installed) {
+        return;
+    }
+    FmHook.installed = 1;
+
+    alloc.malloc = hook_fmalloc;
+    alloc.calloc = hook_fcalloc;
+    alloc.realloc = hook_frealloc;
+    alloc.free = hook_ffree;
+    PyMem_GetAllocator(PYMEM_DOMAIN_RAW, &FmHook.raw);
+    PyMem_GetAllocator(PYMEM_DOMAIN_MEM, &FmHook.mem);
+    PyMem_GetAllocator(PYMEM_DOMAIN_OBJ, &FmHook.obj);
+
+    alloc.ctx = &FmHook.raw;
+    PyMem_SetAllocator(PYMEM_DOMAIN_RAW, &alloc);
+
+    alloc.ctx = &FmHook.mem;
+    PyMem_SetAllocator(PYMEM_DOMAIN_MEM, &alloc);
+
+    alloc.ctx = &FmHook.obj;
+    PyMem_SetAllocator(PYMEM_DOMAIN_OBJ, &alloc);
+}
+
+static void
+fm_remove_hooks(void)
+{
+    if (FmHook.installed) {
+        FmHook.installed = 0;
+        PyMem_SetAllocator(PYMEM_DOMAIN_RAW, &FmHook.raw);
+        PyMem_SetAllocator(PYMEM_DOMAIN_MEM, &FmHook.mem);
+        PyMem_SetAllocator(PYMEM_DOMAIN_OBJ, &FmHook.obj);
+    }
+}
+
+static PyObject*
+set_nomemory(PyObject *self, PyObject *args)
+{
+    /* Memory allocation fails after 'start' allocation requests, and until
+     * 'stop' allocation requests except when 'stop' is negative or equal
+     * to 0 (default) in which case allocation failures never stop. */
+    FmData.count = 0;
+    FmData.stop = 0;
+    if (!PyArg_ParseTuple(args, "i|i", &FmData.start, &FmData.stop)) {
+        return NULL;
+    }
+    fm_setup_hooks();
+    Py_RETURN_NONE;
+}
+
+static PyObject*
+remove_mem_hooks(PyObject *self)
+{
+    fm_remove_hooks();
+    Py_RETURN_NONE;
+}
+
 PyDoc_STRVAR(docstring_empty,
 ""
 );
@@ -4317,6 +4442,10 @@ static PyMethodDef TestMethods[] = {
      (PyCFunction)test_pymem_setallocators, METH_NOARGS},
     {"test_pyobject_setallocators",
      (PyCFunction)test_pyobject_setallocators, METH_NOARGS},
+    {"set_nomemory", (PyCFunction)set_nomemory, METH_VARARGS,
+     PyDoc_STR("set_nomemory(start:int, stop:int = 0)")},
+    {"remove_mem_hooks", (PyCFunction)remove_mem_hooks, METH_NOARGS,
+     PyDoc_STR("Remove memory hooks.")},
     {"no_docstring",
         (PyCFunction)test_with_docstring, METH_NOARGS},
     {"docstring_empty",
@@ -4733,6 +4862,61 @@ static PyTypeObject awaitType = {
 };
 
 
+static int recurse_infinitely_error_init(PyObject *, PyObject *, PyObject *);
+
+static PyTypeObject PyRecursingInfinitelyError_Type = {
+    PyVarObject_HEAD_INIT(NULL, 0)
+    "RecursingInfinitelyError",   /* tp_name */
+    sizeof(PyBaseExceptionObject), /* tp_basicsize */
+    0,                          /* tp_itemsize */
+    0,                          /* tp_dealloc */
+    0,                          /* tp_print */
+    0,                          /* tp_getattr */
+    0,                          /* tp_setattr */
+    0,                          /* tp_reserved */
+    0,                          /* tp_repr */
+    0,                          /* tp_as_number */
+    0,                          /* tp_as_sequence */
+    0,                          /* tp_as_mapping */
+    0,                          /* tp_hash */
+    0,                          /* tp_call */
+    0,                          /* tp_str */
+    0,                          /* tp_getattro */
+    0,                          /* tp_setattro */
+    0,                          /* tp_as_buffer */
+    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, /* tp_flags */
+    "Instantiating this exception starts infinite recursion.", /* tp_doc */
+    0,                          /* tp_traverse */
+    0,                          /* tp_clear */
+    0,                          /* tp_richcompare */
+    0,                          /* tp_weaklistoffset */
+    0,                          /* tp_iter */
+    0,                          /* tp_iternext */
+    0,                          /* tp_methods */
+    0,                          /* tp_members */
+    0,                          /* tp_getset */
+    0,                          /* tp_base */
+    0,                          /* tp_dict */
+    0,                          /* tp_descr_get */
+    0,                          /* tp_descr_set */
+    0,                          /* tp_dictoffset */
+    (initproc)recurse_infinitely_error_init, /* tp_init */
+    0,                          /* tp_alloc */
+    0,                          /* tp_new */
+};
+
+static int
+recurse_infinitely_error_init(PyObject *self, PyObject *args, PyObject *kwds)
+{
+    PyObject *type = (PyObject *)&PyRecursingInfinitelyError_Type;
+
+    /* Instantiating this exception starts infinite recursion. */
+    Py_INCREF(type);
+    PyErr_SetObject(type, NULL);
+    return -1;
+}
+
+
 static struct PyModuleDef _testcapimodule = {
     PyModuleDef_HEAD_INIT,
     "_testcapi",
@@ -4774,6 +4958,14 @@ PyInit__testcapi(void)
     Py_INCREF(&awaitType);
     PyModule_AddObject(m, "awaitType", (PyObject *)&awaitType);
 
+    PyRecursingInfinitelyError_Type.tp_base = (PyTypeObject *)PyExc_Exception;
+    if (PyType_Ready(&PyRecursingInfinitelyError_Type) < 0) {
+        return NULL;
+    }
+    Py_INCREF(&PyRecursingInfinitelyError_Type);
+    PyModule_AddObject(m, "RecursingInfinitelyError",
+                       (PyObject *)&PyRecursingInfinitelyError_Type);
+
     PyModule_AddObject(m, "CHAR_MAX", PyLong_FromLong(CHAR_MAX));
     PyModule_AddObject(m, "CHAR_MIN", PyLong_FromLong(CHAR_MIN));
     PyModule_AddObject(m, "UCHAR_MAX", PyLong_FromLong(UCHAR_MAX));
diff -urpN Python-3.6.3/Modules/_threadmodule.c Python-3.6.5/Modules/_threadmodule.c
--- Python-3.6.3/Modules/_threadmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_threadmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -111,7 +111,7 @@ lock_acquire_parse_args(PyObject *args,
 
     if (timeout_obj
         && _PyTime_FromSecondsObject(timeout,
-                                     timeout_obj, _PyTime_ROUND_CEILING) < 0)
+                                     timeout_obj, _PyTime_ROUND_TIMEOUT) < 0)
         return -1;
 
     if (!blocking && *timeout != unset_timeout ) {
@@ -129,7 +129,7 @@ lock_acquire_parse_args(PyObject *args,
     else if (*timeout != unset_timeout) {
         _PyTime_t microseconds;
 
-        microseconds = _PyTime_AsMicroseconds(*timeout, _PyTime_ROUND_CEILING);
+        microseconds = _PyTime_AsMicroseconds(*timeout, _PyTime_ROUND_TIMEOUT);
         if (microseconds >= PY_TIMEOUT_MAX) {
             PyErr_SetString(PyExc_OverflowError,
                             "timeout value is too large");
diff -urpN Python-3.6.3/Modules/_tkinter.c Python-3.6.5/Modules/_tkinter.c
--- Python-3.6.3/Modules/_tkinter.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/_tkinter.c	2018-03-28 11:19:31.000000000 +0200
@@ -1668,7 +1668,7 @@ _tkinter_tkapp_record_impl(TkappObject *
 }
 
 /*[clinic input]
-_tkinter.tkapp.adderrinfo
+_tkinter.tkapp.adderrorinfo
 
     msg: str
     /
@@ -1676,8 +1676,8 @@ _tkinter.tkapp.adderrinfo
 [clinic start generated code]*/
 
 static PyObject *
-_tkinter_tkapp_adderrinfo_impl(TkappObject *self, const char *msg)
-/*[clinic end generated code: output=0e222ee2050eb357 input=4971399317d4c136]*/
+_tkinter_tkapp_adderrorinfo_impl(TkappObject *self, const char *msg)
+/*[clinic end generated code: output=52162eaca2ee53cb input=f4b37aec7c7e8c77]*/
 {
     CHECK_STRING_LENGTH(msg);
     CHECK_TCL_APPARTMENT;
@@ -2291,7 +2291,11 @@ _tkinter_tkapp_splitlist(TkappObject *se
     if (!PyArg_Parse(arg, "et:splitlist", "utf-8", &list))
         return NULL;
 
-    CHECK_STRING_LENGTH(list);
+    if (strlen(list) >= INT_MAX) {
+        PyErr_SetString(PyExc_OverflowError, "string is too long");
+        PyMem_Free(list);
+        return NULL;
+    }
     if (Tcl_SplitList(Tkapp_Interp(self), list,
                       &argc, &argv) == TCL_ERROR)  {
         PyMem_Free(list);
@@ -2362,7 +2366,11 @@ _tkinter_tkapp_split(TkappObject *self,
 
     if (!PyArg_Parse(arg, "et:split", "utf-8", &list))
         return NULL;
-    CHECK_STRING_LENGTH(list);
+    if (strlen(list) >= INT_MAX) {
+        PyErr_SetString(PyExc_OverflowError, "string is too long");
+        PyMem_Free(list);
+        return NULL;
+    }
     v = Split(list);
     PyMem_Free(list);
     return v;
@@ -3304,7 +3312,7 @@ static PyMethodDef Tkapp_methods[] =
     _TKINTER_TKAPP_EVAL_METHODDEF
     _TKINTER_TKAPP_EVALFILE_METHODDEF
     _TKINTER_TKAPP_RECORD_METHODDEF
-    _TKINTER_TKAPP_ADDERRINFO_METHODDEF
+    _TKINTER_TKAPP_ADDERRORINFO_METHODDEF
     {"setvar",                 Tkapp_SetVar, METH_VARARGS},
     {"globalsetvar",       Tkapp_GlobalSetVar, METH_VARARGS},
     {"getvar",       Tkapp_GetVar, METH_VARARGS},
diff -urpN Python-3.6.3/Modules/arraymodule.c Python-3.6.5/Modules/arraymodule.c
--- Python-3.6.3/Modules/arraymodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/arraymodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -1885,8 +1885,10 @@ make_array(PyTypeObject *arraytype, char
         return NULL;
 
     new_args = PyTuple_New(2);
-    if (new_args == NULL)
+    if (new_args == NULL) {
+        Py_DECREF(typecode_obj);
         return NULL;
+    }
     Py_INCREF(items);
     PyTuple_SET_ITEM(new_args, 0, typecode_obj);
     PyTuple_SET_ITEM(new_args, 1, items);
diff -urpN Python-3.6.3/Modules/clinic/_dbmmodule.c.h Python-3.6.5/Modules/clinic/_dbmmodule.c.h
--- Python-3.6.3/Modules/clinic/_dbmmodule.c.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/clinic/_dbmmodule.c.h	2018-03-28 11:19:31.000000000 +0200
@@ -121,18 +121,18 @@ PyDoc_STRVAR(dbmopen__doc__,
     {"open", (PyCFunction)dbmopen, METH_VARARGS, dbmopen__doc__},
 
 static PyObject *
-dbmopen_impl(PyObject *module, const char *filename, const char *flags,
+dbmopen_impl(PyObject *module, PyObject *filename, const char *flags,
              int mode);
 
 static PyObject *
 dbmopen(PyObject *module, PyObject *args)
 {
     PyObject *return_value = NULL;
-    const char *filename;
+    PyObject *filename;
     const char *flags = "r";
     int mode = 438;
 
-    if (!PyArg_ParseTuple(args, "s|si:open",
+    if (!PyArg_ParseTuple(args, "U|si:open",
         &filename, &flags, &mode)) {
         goto exit;
     }
@@ -141,4 +141,4 @@ dbmopen(PyObject *module, PyObject *args
 exit:
     return return_value;
 }
-/*[clinic end generated code: output=99adf966ef0475ff input=a9049054013a1b77]*/
+/*[clinic end generated code: output=001fabffcecb99f1 input=a9049054013a1b77]*/
diff -urpN Python-3.6.3/Modules/clinic/_gdbmmodule.c.h Python-3.6.5/Modules/clinic/_gdbmmodule.c.h
--- Python-3.6.3/Modules/clinic/_gdbmmodule.c.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/clinic/_gdbmmodule.c.h	2018-03-28 11:19:31.000000000 +0200
@@ -234,23 +234,24 @@ PyDoc_STRVAR(dbmopen__doc__,
     {"open", (PyCFunction)dbmopen, METH_VARARGS, dbmopen__doc__},
 
 static PyObject *
-dbmopen_impl(PyObject *module, const char *name, const char *flags, int mode);
+dbmopen_impl(PyObject *module, PyObject *filename, const char *flags,
+             int mode);
 
 static PyObject *
 dbmopen(PyObject *module, PyObject *args)
 {
     PyObject *return_value = NULL;
-    const char *name;
+    PyObject *filename;
     const char *flags = "r";
     int mode = 438;
 
-    if (!PyArg_ParseTuple(args, "s|si:open",
-        &name, &flags, &mode)) {
+    if (!PyArg_ParseTuple(args, "U|si:open",
+        &filename, &flags, &mode)) {
         goto exit;
     }
-    return_value = dbmopen_impl(module, name, flags, mode);
+    return_value = dbmopen_impl(module, filename, flags, mode);
 
 exit:
     return return_value;
 }
-/*[clinic end generated code: output=ed0f5d4e3d79b80c input=a9049054013a1b77]*/
+/*[clinic end generated code: output=afb99364ac420d10 input=a9049054013a1b77]*/
diff -urpN Python-3.6.3/Modules/clinic/_ssl.c.h Python-3.6.5/Modules/clinic/_ssl.c.h
--- Python-3.6.3/Modules/clinic/_ssl.c.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/clinic/_ssl.c.h	2018-03-28 11:19:31.000000000 +0200
@@ -132,7 +132,7 @@ _ssl__SSLSocket_version(PySSLSocket *sel
     return _ssl__SSLSocket_version_impl(self);
 }
 
-#if (defined(OPENSSL_NPN_NEGOTIATED) && !defined(OPENSSL_NO_NEXTPROTONEG))
+#if (HAVE_NPN)
 
 PyDoc_STRVAR(_ssl__SSLSocket_selected_npn_protocol__doc__,
 "selected_npn_protocol($self, /)\n"
@@ -151,9 +151,9 @@ _ssl__SSLSocket_selected_npn_protocol(Py
     return _ssl__SSLSocket_selected_npn_protocol_impl(self);
 }
 
-#endif /* (defined(OPENSSL_NPN_NEGOTIATED) && !defined(OPENSSL_NO_NEXTPROTONEG)) */
+#endif /* (HAVE_NPN) */
 
-#if defined(HAVE_ALPN)
+#if (HAVE_ALPN)
 
 PyDoc_STRVAR(_ssl__SSLSocket_selected_alpn_protocol__doc__,
 "selected_alpn_protocol($self, /)\n"
@@ -172,7 +172,7 @@ _ssl__SSLSocket_selected_alpn_protocol(P
     return _ssl__SSLSocket_selected_alpn_protocol_impl(self);
 }
 
-#endif /* defined(HAVE_ALPN) */
+#endif /* (HAVE_ALPN) */
 
 PyDoc_STRVAR(_ssl__SSLSocket_compression__doc__,
 "compression($self, /)\n"
@@ -1168,4 +1168,4 @@ exit:
 #ifndef _SSL_ENUM_CRLS_METHODDEF
     #define _SSL_ENUM_CRLS_METHODDEF
 #endif /* !defined(_SSL_ENUM_CRLS_METHODDEF) */
-/*[clinic end generated code: output=a8b184655068c238 input=a9049054013a1b77]*/
+/*[clinic end generated code: output=c79fb0dfd3c90784 input=a9049054013a1b77]*/
diff -urpN Python-3.6.3/Modules/clinic/_tkinter.c.h Python-3.6.5/Modules/clinic/_tkinter.c.h
--- Python-3.6.3/Modules/clinic/_tkinter.c.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/clinic/_tkinter.c.h	2018-03-28 11:19:31.000000000 +0200
@@ -80,27 +80,27 @@ exit:
     return return_value;
 }
 
-PyDoc_STRVAR(_tkinter_tkapp_adderrinfo__doc__,
-"adderrinfo($self, msg, /)\n"
+PyDoc_STRVAR(_tkinter_tkapp_adderrorinfo__doc__,
+"adderrorinfo($self, msg, /)\n"
 "--\n"
 "\n");
 
-#define _TKINTER_TKAPP_ADDERRINFO_METHODDEF    \
-    {"adderrinfo", (PyCFunction)_tkinter_tkapp_adderrinfo, METH_O, _tkinter_tkapp_adderrinfo__doc__},
+#define _TKINTER_TKAPP_ADDERRORINFO_METHODDEF    \
+    {"adderrorinfo", (PyCFunction)_tkinter_tkapp_adderrorinfo, METH_O, _tkinter_tkapp_adderrorinfo__doc__},
 
 static PyObject *
-_tkinter_tkapp_adderrinfo_impl(TkappObject *self, const char *msg);
+_tkinter_tkapp_adderrorinfo_impl(TkappObject *self, const char *msg);
 
 static PyObject *
-_tkinter_tkapp_adderrinfo(TkappObject *self, PyObject *arg)
+_tkinter_tkapp_adderrorinfo(TkappObject *self, PyObject *arg)
 {
     PyObject *return_value = NULL;
     const char *msg;
 
-    if (!PyArg_Parse(arg, "s:adderrinfo", &msg)) {
+    if (!PyArg_Parse(arg, "s:adderrorinfo", &msg)) {
         goto exit;
     }
-    return_value = _tkinter_tkapp_adderrinfo_impl(self, msg);
+    return_value = _tkinter_tkapp_adderrorinfo_impl(self, msg);
 
 exit:
     return return_value;
@@ -638,4 +638,4 @@ exit:
 #ifndef _TKINTER_TKAPP_DELETEFILEHANDLER_METHODDEF
     #define _TKINTER_TKAPP_DELETEFILEHANDLER_METHODDEF
 #endif /* !defined(_TKINTER_TKAPP_DELETEFILEHANDLER_METHODDEF) */
-/*[clinic end generated code: output=836c578b71d69097 input=a9049054013a1b77]*/
+/*[clinic end generated code: output=b0be55aacff2be9b input=a9049054013a1b77]*/
diff -urpN Python-3.6.3/Modules/clinic/zlibmodule.c.h Python-3.6.5/Modules/clinic/zlibmodule.c.h
--- Python-3.6.3/Modules/clinic/zlibmodule.c.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/clinic/zlibmodule.c.h	2018-03-28 11:19:31.000000000 +0200
@@ -467,4 +467,8 @@ exit:
 #ifndef ZLIB_COMPRESS_COPY_METHODDEF
     #define ZLIB_COMPRESS_COPY_METHODDEF
 #endif /* !defined(ZLIB_COMPRESS_COPY_METHODDEF) */
-/*[clinic end generated code: output=3a4e2bfe750423a3 input=a9049054013a1b77]*/
+
+#ifndef ZLIB_DECOMPRESS_COPY_METHODDEF
+    #define ZLIB_DECOMPRESS_COPY_METHODDEF
+#endif /* !defined(ZLIB_DECOMPRESS_COPY_METHODDEF) */
+/*[clinic end generated code: output=497dad1132c962e2 input=a9049054013a1b77]*/
diff -urpN Python-3.6.3/Modules/faulthandler.c Python-3.6.5/Modules/faulthandler.c
--- Python-3.6.3/Modules/faulthandler.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/faulthandler.c	2018-03-28 11:19:31.000000000 +0200
@@ -366,6 +366,23 @@ faulthandler_fatal_error(int signum)
 }
 
 #ifdef MS_WINDOWS
+static int
+faulthandler_ignore_exception(DWORD code)
+{
+    /* bpo-30557: ignore exceptions which are not errors */
+    if (!(code & 0x80000000)) {
+        return 1;
+    }
+    /* bpo-31701: ignore MSC and COM exceptions
+       E0000000 + code */
+    if (code == 0xE06D7363 /* MSC exception ("Emsc") */
+        || code == 0xE0434352 /* COM Callable Runtime exception ("ECCR") */) {
+        return 1;
+    }
+    /* Interesting exception: log it with the Python traceback */
+    return 0;
+}
+
 static LONG WINAPI
 faulthandler_exc_handler(struct _EXCEPTION_POINTERS *exc_info)
 {
@@ -373,9 +390,8 @@ faulthandler_exc_handler(struct _EXCEPTI
     DWORD code = exc_info->ExceptionRecord->ExceptionCode;
     DWORD flags = exc_info->ExceptionRecord->ExceptionFlags;
 
-    /* bpo-30557: only log fatal exceptions */
-    if (!(code & 0x80000000)) {
-        /* call the next exception handler */
+    if (faulthandler_ignore_exception(code)) {
+        /* ignore the exception: call the next exception handler */
         return EXCEPTION_CONTINUE_SEARCH;
     }
 
@@ -920,7 +936,7 @@ faulthandler_suppress_crash_report(void)
     struct rlimit rl;
 
     /* Disable creation of core dump */
-    if (getrlimit(RLIMIT_CORE, &rl) != 0) {
+    if (getrlimit(RLIMIT_CORE, &rl) == 0) {
         rl.rlim_cur = 0;
         setrlimit(RLIMIT_CORE, &rl);
     }
@@ -1020,7 +1036,7 @@ faulthandler_fatal_error_c_thread(PyObje
     }
 
     /* wait until the thread completes: it will never occur, since Py_FatalError()
-       exits the process immedialty. */
+       exits the process immediately. */
     PyThread_acquire_lock(lock, WAIT_LOCK);
     PyThread_release_lock(lock);
     PyThread_free_lock(lock);
diff -urpN Python-3.6.3/Modules/getpath.c Python-3.6.5/Modules/getpath.c
--- Python-3.6.3/Modules/getpath.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/getpath.c	2018-03-28 11:19:31.000000000 +0200
@@ -735,7 +735,7 @@ calculate_path(void)
     bufsz += wcslen(zip_path) + 1;
     bufsz += wcslen(exec_prefix) + 1;
 
-    buf = PyMem_New(wchar_t, bufsz);
+    buf = PyMem_RawMalloc(bufsz * sizeof(wchar_t));
     if (buf == NULL) {
         Py_FatalError(
             "Not enough memory for dynamic PYTHONPATH");
diff -urpN Python-3.6.3/Modules/itertoolsmodule.c Python-3.6.5/Modules/itertoolsmodule.c
--- Python-3.6.3/Modules/itertoolsmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/itertoolsmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -72,10 +72,37 @@ groupby_traverse(groupbyobject *gbo, vis
     return 0;
 }
 
+Py_LOCAL_INLINE(int)
+groupby_step(groupbyobject *gbo)
+{
+    PyObject *newvalue, *newkey, *oldvalue;
+
+    newvalue = PyIter_Next(gbo->it);
+    if (newvalue == NULL)
+        return -1;
+
+    if (gbo->keyfunc == Py_None) {
+        newkey = newvalue;
+        Py_INCREF(newvalue);
+    } else {
+        newkey = PyObject_CallFunctionObjArgs(gbo->keyfunc, newvalue, NULL);
+        if (newkey == NULL) {
+            Py_DECREF(newvalue);
+            return -1;
+        }
+    }
+
+    oldvalue = gbo->currvalue;
+    gbo->currvalue = newvalue;
+    Py_XSETREF(gbo->currkey, newkey);
+    Py_XDECREF(oldvalue);
+    return 0;
+}
+
 static PyObject *
 groupby_next(groupbyobject *gbo)
 {
-    PyObject *newvalue, *newkey, *r, *grouper;
+    PyObject *r, *grouper;
 
     /* skip to next iteration group */
     for (;;) {
@@ -93,25 +120,9 @@ groupby_next(groupbyobject *gbo)
                 break;
         }
 
-        newvalue = PyIter_Next(gbo->it);
-        if (newvalue == NULL)
+        if (groupby_step(gbo) < 0)
             return NULL;
-
-        if (gbo->keyfunc == Py_None) {
-            newkey = newvalue;
-            Py_INCREF(newvalue);
-        } else {
-            newkey = PyObject_CallFunctionObjArgs(gbo->keyfunc, newvalue, NULL);
-            if (newkey == NULL) {
-                Py_DECREF(newvalue);
-                return NULL;
-            }
-        }
-
-        Py_XSETREF(gbo->currkey, newkey);
-        Py_XSETREF(gbo->currvalue, newvalue);
     }
-
     Py_INCREF(gbo->currkey);
     Py_XSETREF(gbo->tgtkey, gbo->currkey);
 
@@ -174,8 +185,9 @@ static PyMethodDef groupby_methods[] = {
 };
 
 PyDoc_STRVAR(groupby_doc,
-"groupby(iterable[, keyfunc]) -> create an iterator which returns\n\
-(key, sub-iterator) grouped by each value of key(value).\n");
+"groupby(iterable, key=None) -> make an iterator that returns consecutive\n\
+keys and groups from the iterable.  If the key function is not specified or\n\
+is None, the element itself is used for grouping.\n");
 
 static PyTypeObject groupby_type = {
     PyVarObject_HEAD_INIT(NULL, 0)
@@ -281,28 +293,12 @@ static PyObject *
 _grouper_next(_grouperobject *igo)
 {
     groupbyobject *gbo = (groupbyobject *)igo->parent;
-    PyObject *newvalue, *newkey, *r;
+    PyObject *r;
     int rcmp;
 
     if (gbo->currvalue == NULL) {
-        newvalue = PyIter_Next(gbo->it);
-        if (newvalue == NULL)
+        if (groupby_step(gbo) < 0)
             return NULL;
-
-        if (gbo->keyfunc == Py_None) {
-            newkey = newvalue;
-            Py_INCREF(newvalue);
-        } else {
-            newkey = PyObject_CallFunctionObjArgs(gbo->keyfunc, newvalue, NULL);
-            if (newkey == NULL) {
-                Py_DECREF(newvalue);
-                return NULL;
-            }
-        }
-
-        assert(gbo->currkey == NULL);
-        gbo->currkey = newkey;
-        gbo->currvalue = newvalue;
     }
 
     assert(gbo->currkey != NULL);
diff -urpN Python-3.6.3/Modules/main.c Python-3.6.5/Modules/main.c
--- Python-3.6.3/Modules/main.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/main.c	2018-03-28 11:19:31.000000000 +0200
@@ -20,9 +20,9 @@
 #endif
 
 #if defined(MS_WINDOWS)
-#define PYTHONHOMEHELP "<prefix>\\lib"
+#define PYTHONHOMEHELP "<prefix>\\python{major}{minor}"
 #else
-#define PYTHONHOMEHELP "<prefix>/pythonX.X"
+#define PYTHONHOMEHELP "<prefix>/lib/pythonX.X"
 #endif
 
 #include "pygetopt.h"
@@ -64,16 +64,18 @@ static const char usage_2[] = "\
          if stdin does not appear to be a terminal; also PYTHONINSPECT=x\n\
 -I     : isolate Python from the user's environment (implies -E and -s)\n\
 -m mod : run library module as a script (terminates option list)\n\
--O     : optimize generated bytecode slightly; also PYTHONOPTIMIZE=x\n\
--OO    : remove doc-strings in addition to the -O optimizations\n\
+-O     : remove assert and __debug__-dependent statements; add .opt-1 before\n\
+         .pyc extension; also PYTHONOPTIMIZE=x\n\
+-OO    : do -O changes and also discard docstrings; add .opt-2 before\n\
+         .pyc extension\n\
 -q     : don't print version and copyright messages on interactive startup\n\
 -s     : don't add user site directory to sys.path; also PYTHONNOUSERSITE\n\
 -S     : don't imply 'import site' on initialization\n\
 ";
 static const char usage_3[] = "\
--u     : unbuffered binary stdout and stderr, stdin always buffered;\n\
+-u     : force the binary I/O layers of stdout and stderr to be unbuffered;\n\
+         stdin is always buffered; text I/O layer will be line-buffered;\n\
          also PYTHONUNBUFFERED=x\n\
-         see man page for details on internal buffering relating to '-u'\n\
 -v     : verbose (trace import statements); also PYTHONVERBOSE=x\n\
          can be supplied multiple times to increase verbosity\n\
 -V     : print the Python version number and exit (also --version)\n\
@@ -394,7 +396,6 @@ Py_Main(int argc, wchar_t **argv)
         exit(1);
     }
 
-    Py_HashRandomizationFlag = 1;
     _PyRandom_Init();
 
     PySys_ResetWarnOptions();
diff -urpN Python-3.6.3/Modules/md5module.c Python-3.6.5/Modules/md5module.c
--- Python-3.6.3/Modules/md5module.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/md5module.c	2018-03-28 11:19:31.000000000 +0200
@@ -293,7 +293,7 @@ md5_done(struct md5_state *md5, unsigned
         md5->curlen = 0;
     }
 
-    /* pad upto 56 bytes of zeroes */
+    /* pad up to 56 bytes of zeroes */
     while (md5->curlen < 56) {
         md5->buf[md5->curlen++] = (unsigned char)0;
     }
diff -urpN Python-3.6.3/Modules/posixmodule.c Python-3.6.5/Modules/posixmodule.c
--- Python-3.6.3/Modules/posixmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/posixmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -306,12 +306,6 @@ extern int lstat(const char *, struct st
 #ifdef HAVE_PROCESS_H
 #include <process.h>
 #endif
-#ifndef VOLUME_NAME_DOS
-#define VOLUME_NAME_DOS 0x0
-#endif
-#ifndef VOLUME_NAME_NT
-#define VOLUME_NAME_NT  0x2
-#endif
 #ifndef IO_REPARSE_TAG_SYMLINK
 #define IO_REPARSE_TAG_SYMLINK (0xA000000CL)
 #endif
@@ -1444,15 +1438,15 @@ win32_wchdir(LPCWSTR path)
             return FALSE;
         }
     }
-    if (wcsncmp(new_path, L"\\\\", 2) == 0 ||
-        wcsncmp(new_path, L"//", 2) == 0)
-        /* UNC path, nothing to do. */
-        return TRUE;
-    env[1] = new_path[0];
-    result = SetEnvironmentVariableW(env, new_path);
+    int is_unc_like_path = (wcsncmp(new_path, L"\\\\", 2) == 0 ||
+                            wcsncmp(new_path, L"//", 2) == 0);
+    if (!is_unc_like_path) {
+        env[1] = new_path[0];
+        result = SetEnvironmentVariableW(env, new_path);
+    }
     if (new_path != path_buf)
         PyMem_RawFree(new_path);
-    return result;
+    return result ? TRUE : FALSE;
 }
 #endif
 
@@ -2790,6 +2784,7 @@ os_chmod_impl(PyObject *module, path_t *
                                                    dir_fd, follow_symlinks);
             else
                 follow_symlinks_specified("chmod", follow_symlinks);
+            return NULL;
         }
         else
 #endif
@@ -3671,8 +3666,8 @@ os__getfinalpathname_impl(PyObject *modu
 /*[clinic end generated code: output=9bd78d0e52782e75 input=71d5e89334891bf4]*/
 {
     HANDLE hFile;
-    int buf_size;
-    wchar_t *target_path;
+    wchar_t buf[MAXPATHLEN], *target_path = buf;
+    int buf_size = Py_ARRAY_LENGTH(buf);
     int result_length;
     PyObject *result;
     const wchar_t *path_wchar;
@@ -3681,6 +3676,7 @@ os__getfinalpathname_impl(PyObject *modu
     if (path_wchar == NULL)
         return NULL;
 
+    Py_BEGIN_ALLOW_THREADS
     hFile = CreateFileW(
         path_wchar,
         0, /* desired access */
@@ -3690,32 +3686,47 @@ os__getfinalpathname_impl(PyObject *modu
         /* FILE_FLAG_BACKUP_SEMANTICS is required to open a directory */
         FILE_FLAG_BACKUP_SEMANTICS,
         NULL);
+    Py_END_ALLOW_THREADS
 
     if(hFile == INVALID_HANDLE_VALUE)
         return win32_error_object("CreateFileW", path);
 
     /* We have a good handle to the target, use it to determine the
        target path name. */
-    buf_size = GetFinalPathNameByHandleW(hFile, 0, 0, VOLUME_NAME_NT);
+    while (1) {
+        Py_BEGIN_ALLOW_THREADS
+        result_length = GetFinalPathNameByHandleW(hFile, target_path,
+                                                  buf_size, VOLUME_NAME_DOS);
+        Py_END_ALLOW_THREADS
 
-    if(!buf_size)
-        return win32_error_object("GetFinalPathNameByHandle", path);
+        if (!result_length) {
+            result = win32_error_object("GetFinalPathNameByHandleW", path);
+            goto cleanup;
+        }
 
-    target_path = PyMem_New(wchar_t, buf_size+1);
-    if(!target_path)
-        return PyErr_NoMemory();
+        if (result_length < buf_size) {
+            break;
+        }
 
-    result_length = GetFinalPathNameByHandleW(hFile, target_path,
-                                              buf_size, VOLUME_NAME_DOS);
-    if(!result_length)
-        return win32_error_object("GetFinalPathNamyByHandle", path);
+        wchar_t *tmp;
+        tmp = PyMem_Realloc(target_path != buf ? target_path : NULL,
+                            result_length * sizeof(*tmp));
+        if (!tmp) {
+            result = PyErr_NoMemory();
+            goto cleanup;
+        }
 
-    if(!CloseHandle(hFile))
-        return win32_error_object("CloseHandle", path);
+        buf_size = result_length;
+        target_path = tmp;
+    }
 
-    target_path[result_length] = 0;
     result = PyUnicode_FromWideChar(target_path, result_length);
-    PyMem_Free(target_path);
+
+cleanup:
+    if (target_path != buf) {
+        PyMem_Free(target_path);
+    }
+    CloseHandle(hFile);
     return result;
 }
 
@@ -5779,7 +5790,7 @@ error:
 #ifdef HAVE_STROPTS_H
 #include <stropts.h>
 #endif
-#endif /* defined(HAVE_OPENPTY) || defined(HAVE_FORKPTY) || defined(HAVE_DEV_PTMX */
+#endif /* defined(HAVE_OPENPTY) || defined(HAVE_FORKPTY) || defined(HAVE_DEV_PTMX) */
 
 
 #if defined(HAVE_OPENPTY) || defined(HAVE__GETPTY) || defined(HAVE_DEV_PTMX)
@@ -7126,11 +7137,11 @@ win_readlink(PyObject *self, PyObject *a
                 "not a symbolic link");
         return NULL;
     }
-    print_name = rdb->SymbolicLinkReparseBuffer.PathBuffer +
-                 rdb->SymbolicLinkReparseBuffer.PrintNameOffset;
+    print_name = (wchar_t *)((char*)rdb->SymbolicLinkReparseBuffer.PathBuffer +
+                 rdb->SymbolicLinkReparseBuffer.PrintNameOffset);
 
     result = PyUnicode_FromWideChar(print_name,
-                    rdb->SymbolicLinkReparseBuffer.PrintNameLength/2);
+                    rdb->SymbolicLinkReparseBuffer.PrintNameLength / sizeof(wchar_t));
     return result;
 }
 
@@ -7143,7 +7154,7 @@ win_readlink(PyObject *self, PyObject *a
 #if defined(MS_WINDOWS)
 
 /* Grab CreateSymbolicLinkW dynamically from kernel32 */
-static DWORD (CALLBACK *Py_CreateSymbolicLinkW)(LPCWSTR, LPCWSTR, DWORD) = NULL;
+static BOOLEAN (CALLBACK *Py_CreateSymbolicLinkW)(LPCWSTR, LPCWSTR, DWORD) = NULL;
 
 static int
 check_CreateSymbolicLink(void)
@@ -7158,47 +7169,51 @@ check_CreateSymbolicLink(void)
     return Py_CreateSymbolicLinkW != NULL;
 }
 
-/* Remove the last portion of the path */
-static void
+/* Remove the last portion of the path - return 0 on success */
+static int
 _dirnameW(WCHAR *path)
 {
     WCHAR *ptr;
+    size_t length = wcsnlen_s(path, MAX_PATH);
+    if (length == MAX_PATH) {
+        return -1;
+    }
 
     /* walk the path from the end until a backslash is encountered */
-    for(ptr = path + wcslen(path); ptr != path; ptr--) {
-        if (*ptr == L'\\' || *ptr == L'/')
+    for(ptr = path + length; ptr != path; ptr--) {
+        if (*ptr == L'\\' || *ptr == L'/') {
             break;
+        }
     }
     *ptr = 0;
+    return 0;
 }
 
 /* Is this path absolute? */
 static int
 _is_absW(const WCHAR *path)
 {
-    return path[0] == L'\\' || path[0] == L'/' || path[1] == L':';
-
+    return path[0] == L'\\' || path[0] == L'/' ||
+        (path[0] && path[1] == L':');
 }
 
-/* join root and rest with a backslash */
-static void
+/* join root and rest with a backslash - return 0 on success */
+static int
 _joinW(WCHAR *dest_path, const WCHAR *root, const WCHAR *rest)
 {
-    size_t root_len;
-
     if (_is_absW(rest)) {
-        wcscpy(dest_path, rest);
-        return;
+        return wcscpy_s(dest_path, MAX_PATH, rest);
     }
 
-    root_len = wcslen(root);
+    if (wcscpy_s(dest_path, MAX_PATH, root)) {
+        return -1;
+    }
 
-    wcscpy(dest_path, root);
-    if(root_len) {
-        dest_path[root_len] = L'\\';
-        root_len++;
+    if (dest_path[0] && wcscat_s(dest_path, MAX_PATH, L"\\")) {
+        return -1;
     }
-    wcscpy(dest_path+root_len, rest);
+
+    return wcscat_s(dest_path, MAX_PATH, rest);
 }
 
 /* Return True if the path at src relative to dest is a directory */
@@ -7210,10 +7225,14 @@ _check_dirW(LPCWSTR src, LPCWSTR dest)
     WCHAR src_resolved[MAX_PATH] = L"";
 
     /* dest_parent = os.path.dirname(dest) */
-    wcscpy(dest_parent, dest);
-    _dirnameW(dest_parent);
+    if (wcscpy_s(dest_parent, MAX_PATH, dest) ||
+        _dirnameW(dest_parent)) {
+        return 0;
+    }
     /* src_resolved = os.path.join(dest_parent, src) */
-    _joinW(src_resolved, dest_parent, src);
+    if (_joinW(src_resolved, dest_parent, src)) {
+        return 0;
+    }
     return (
         GetFileAttributesExW(src_resolved, GetFileExInfoStandard, &src_info)
         && src_info.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY
@@ -7269,19 +7288,15 @@ os_symlink_impl(PyObject *module, path_t
         }
 #endif
 
-    if ((src->narrow && dst->wide) || (src->wide && dst->narrow)) {
-        PyErr_SetString(PyExc_ValueError,
-            "symlink: src and dst must be the same type");
-        return NULL;
-    }
-
 #ifdef MS_WINDOWS
 
     Py_BEGIN_ALLOW_THREADS
+    _Py_BEGIN_SUPPRESS_IPH
     /* if src is a directory, ensure target_is_directory==1 */
     target_is_directory |= _check_dirW(src->wide, dst->wide);
     result = Py_CreateSymbolicLinkW(dst->wide, src->wide,
                                     target_is_directory);
+    _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
 
     if (!result)
@@ -7289,6 +7304,12 @@ os_symlink_impl(PyObject *module, path_t
 
 #else
 
+    if ((src->narrow && dst->wide) || (src->wide && dst->narrow)) {
+        PyErr_SetString(PyExc_ValueError,
+            "symlink: src and dst must be the same type");
+        return NULL;
+    }
+
     Py_BEGIN_ALLOW_THREADS
 #if HAVE_SYMLINKAT
     if (dir_fd != DEFAULT_DIR_FD)
@@ -7703,7 +7724,7 @@ os_dup2_impl(PyObject *module, int fd, i
 #if defined(HAVE_DUP3) && \
     !(defined(HAVE_FCNTL_H) && defined(F_DUP2FD_CLOEXEC))
     /* dup3() is available on Linux 2.6.27+ and glibc 2.9 */
-    int dup3_works = -1;
+    static int dup3_works = -1;
 #endif
 
     if (fd < 0 || fd2 < 0)
@@ -8791,11 +8812,16 @@ os_posix_fallocate_impl(PyObject *module
         Py_BEGIN_ALLOW_THREADS
         result = posix_fallocate(fd, offset, length);
         Py_END_ALLOW_THREADS
-    } while (result != 0 && errno == EINTR &&
-             !(async_err = PyErr_CheckSignals()));
-    if (result != 0)
-        return (!async_err) ? posix_error() : NULL;
-    Py_RETURN_NONE;
+    } while (result == EINTR && !(async_err = PyErr_CheckSignals()));
+
+    if (result == 0)
+        Py_RETURN_NONE;
+
+    if (async_err)
+        return NULL;
+
+    errno = result;
+    return posix_error();
 }
 #endif /* HAVE_POSIX_FALLOCATE) && !POSIX_FADVISE_AIX_BUG */
 
@@ -8833,11 +8859,16 @@ os_posix_fadvise_impl(PyObject *module,
         Py_BEGIN_ALLOW_THREADS
         result = posix_fadvise(fd, offset, length, advice);
         Py_END_ALLOW_THREADS
-    } while (result != 0 && errno == EINTR &&
-             !(async_err = PyErr_CheckSignals()));
-    if (result != 0)
-        return (!async_err) ? posix_error() : NULL;
-    Py_RETURN_NONE;
+    } while (result == EINTR && !(async_err = PyErr_CheckSignals()));
+
+    if (result == 0)
+        Py_RETURN_NONE;
+
+    if (async_err)
+        return NULL;
+
+    errno = result;
+    return posix_error();
 }
 #endif /* HAVE_POSIX_FADVISE && !POSIX_FADVISE_AIX_BUG */
 
diff -urpN Python-3.6.3/Modules/selectmodule.c Python-3.6.5/Modules/selectmodule.c
--- Python-3.6.3/Modules/selectmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/selectmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -213,7 +213,7 @@ select_select(PyObject *self, PyObject *
         tvp = (struct timeval *)NULL;
     else {
         if (_PyTime_FromSecondsObject(&timeout, timeout_obj,
-                                      _PyTime_ROUND_CEILING) < 0) {
+                                      _PyTime_ROUND_TIMEOUT) < 0) {
             if (PyErr_ExceptionMatches(PyExc_TypeError)) {
                 PyErr_SetString(PyExc_TypeError,
                                 "timeout must be a float or None");
@@ -221,7 +221,7 @@ select_select(PyObject *self, PyObject *
             return NULL;
         }
 
-        if (_PyTime_AsTimeval(timeout, &tv, _PyTime_ROUND_CEILING) == -1)
+        if (_PyTime_AsTimeval(timeout, &tv, _PyTime_ROUND_TIMEOUT) == -1)
             return NULL;
         if (tv.tv_sec < 0) {
             PyErr_SetString(PyExc_ValueError, "timeout must be non-negative");
@@ -528,22 +528,16 @@ poll_poll(pollObject *self, PyObject *ar
     PyObject *result_list = NULL, *timeout_obj = NULL;
     int poll_result, i, j;
     PyObject *value = NULL, *num = NULL;
-    _PyTime_t timeout, ms, deadline;
+    _PyTime_t timeout = -1, ms = -1, deadline = 0;
     int async_err = 0;
 
     if (!PyArg_ParseTuple(args, "|O:poll", &timeout_obj)) {
         return NULL;
     }
 
-    /* Check values for timeout */
-    if (timeout_obj == NULL || timeout_obj == Py_None) {
-        timeout = -1;
-        ms = -1;
-        deadline = 0;   /* initialize to prevent gcc warning */
-    }
-    else {
+    if (timeout_obj != NULL && timeout_obj != Py_None) {
         if (_PyTime_FromMillisecondsObject(&timeout, timeout_obj,
-                                           _PyTime_ROUND_CEILING) < 0) {
+                                           _PyTime_ROUND_TIMEOUT) < 0) {
             if (PyErr_ExceptionMatches(PyExc_TypeError)) {
                 PyErr_SetString(PyExc_TypeError,
                                 "timeout must be an integer or None");
@@ -551,13 +545,26 @@ poll_poll(pollObject *self, PyObject *ar
             return NULL;
         }
 
-        ms = _PyTime_AsMilliseconds(timeout, _PyTime_ROUND_CEILING);
+        ms = _PyTime_AsMilliseconds(timeout, _PyTime_ROUND_TIMEOUT);
         if (ms < INT_MIN || ms > INT_MAX) {
             PyErr_SetString(PyExc_OverflowError, "timeout is too large");
             return NULL;
         }
 
-        deadline = _PyTime_GetMonotonicClock() + timeout;
+        if (timeout >= 0) {
+            deadline = _PyTime_GetMonotonicClock() + timeout;
+        }
+    }
+
+    /* On some OSes, typically BSD-based ones, the timeout parameter of the
+       poll() syscall, when negative, must be exactly INFTIM, where defined,
+       or -1. See issue 31334. */
+    if (ms < 0) {
+#ifdef INFTIM
+        ms = INFTIM;
+#else
+        ms = -1;
+#endif
     }
 
     /* Avoid concurrent poll() invocation, issue 8865 */
@@ -899,7 +906,7 @@ devpoll_poll(devpollObject *self, PyObje
     }
     else {
         if (_PyTime_FromMillisecondsObject(&timeout, timeout_obj,
-                                           _PyTime_ROUND_CEILING) < 0) {
+                                           _PyTime_ROUND_TIMEOUT) < 0) {
             if (PyErr_ExceptionMatches(PyExc_TypeError)) {
                 PyErr_SetString(PyExc_TypeError,
                                 "timeout must be an integer or None");
@@ -907,7 +914,7 @@ devpoll_poll(devpollObject *self, PyObje
             return NULL;
         }
 
-        ms = _PyTime_AsMilliseconds(timeout, _PyTime_ROUND_CEILING);
+        ms = _PyTime_AsMilliseconds(timeout, _PyTime_ROUND_TIMEOUT);
         if (ms < -1 || ms > INT_MAX) {
             PyErr_SetString(PyExc_OverflowError, "timeout is too large");
             return NULL;
@@ -1514,7 +1521,7 @@ pyepoll_poll(pyEpoll_Object *self, PyObj
         /* epoll_wait() has a resolution of 1 millisecond, round towards
            infinity to wait at least timeout seconds. */
         if (_PyTime_FromSecondsObject(&timeout, timeout_obj,
-                                      _PyTime_ROUND_CEILING) < 0) {
+                                      _PyTime_ROUND_TIMEOUT) < 0) {
             if (PyErr_ExceptionMatches(PyExc_TypeError)) {
                 PyErr_SetString(PyExc_TypeError,
                                 "timeout must be an integer or None");
@@ -1773,40 +1780,73 @@ static PyTypeObject kqueue_queue_Type;
 #elif (SIZEOF_UINTPTR_T == SIZEOF_LONG_LONG)
 #   define T_UINTPTRT         T_ULONGLONG
 #   define T_INTPTRT          T_LONGLONG
-#   define PyLong_AsUintptr_t PyLong_AsUnsignedLongLong
 #   define UINTPTRT_FMT_UNIT  "K"
 #   define INTPTRT_FMT_UNIT   "L"
 #elif (SIZEOF_UINTPTR_T == SIZEOF_LONG)
 #   define T_UINTPTRT         T_ULONG
 #   define T_INTPTRT          T_LONG
-#   define PyLong_AsUintptr_t PyLong_AsUnsignedLong
 #   define UINTPTRT_FMT_UNIT  "k"
 #   define INTPTRT_FMT_UNIT   "l"
 #elif (SIZEOF_UINTPTR_T == SIZEOF_INT)
 #   define T_UINTPTRT         T_UINT
 #   define T_INTPTRT          T_INT
-#   define PyLong_AsUintptr_t PyLong_AsUnsignedLong
 #   define UINTPTRT_FMT_UNIT  "I"
 #   define INTPTRT_FMT_UNIT   "i"
 #else
 #   error uintptr_t does not match int, long, or long long!
 #endif
 
+#if SIZEOF_LONG_LONG == 8
+#   define T_INT64          T_LONGLONG
+#   define INT64_FMT_UNIT   "L"
+#elif SIZEOF_LONG == 8
+#   define T_INT64          T_LONG
+#   define INT64_FMT_UNIT   "l"
+#elif SIZEOF_INT == 8
+#   define T_INT64          T_INT
+#   define INT64_FMT_UNIT   "i"
+#else
+#   define INT64_FMT_UNIT   "_"
+#endif
+
+#if SIZEOF_LONG_LONG == 4
+#   define T_UINT32         T_ULONGLONG
+#   define UINT32_FMT_UNIT  "K"
+#elif SIZEOF_LONG == 4
+#   define T_UINT32         T_ULONG
+#   define UINT32_FMT_UNIT  "k"
+#elif SIZEOF_INT == 4
+#   define T_UINT32         T_UINT
+#   define UINT32_FMT_UNIT  "I"
+#else
+#   define UINT32_FMT_UNIT  "_"
+#endif
+
 /*
  * kevent is not standard and its members vary across BSDs.
  */
-#if !defined(__OpenBSD__)
-#   define IDENT_TYPE  T_UINTPTRT
-#   define IDENT_CAST  intptr_t
-#   define DATA_TYPE   T_INTPTRT
-#   define DATA_FMT_UNIT INTPTRT_FMT_UNIT
-#   define IDENT_AsType PyLong_AsUintptr_t
+#ifdef __NetBSD__
+#   define FILTER_TYPE      T_UINT32
+#   define FILTER_FMT_UNIT  UINT32_FMT_UNIT
+#   define FLAGS_TYPE       T_UINT32
+#   define FLAGS_FMT_UNIT   UINT32_FMT_UNIT
+#   define FFLAGS_TYPE      T_UINT32
+#   define FFLAGS_FMT_UNIT  UINT32_FMT_UNIT
+#else
+#   define FILTER_TYPE      T_SHORT
+#   define FILTER_FMT_UNIT  "h"
+#   define FLAGS_TYPE       T_USHORT
+#   define FLAGS_FMT_UNIT   "H"
+#   define FFLAGS_TYPE      T_UINT
+#   define FFLAGS_FMT_UNIT  "I"
+#endif
+
+#if defined(__NetBSD__) || defined(__OpenBSD__)
+#   define DATA_TYPE        T_INT64
+#   define DATA_FMT_UNIT    INT64_FMT_UNIT
 #else
-#   define IDENT_TYPE  T_UINT
-#   define IDENT_CAST  int
-#   define DATA_TYPE   T_INT
-#   define DATA_FMT_UNIT "i"
-#   define IDENT_AsType PyLong_AsUnsignedLong
+#   define DATA_TYPE        T_INTPTRT
+#   define DATA_FMT_UNIT    INTPTRT_FMT_UNIT
 #endif
 
 /* Unfortunately, we can't store python objects in udata, because
@@ -1816,9 +1856,9 @@ static PyTypeObject kqueue_queue_Type;
 
 #define KQ_OFF(x) offsetof(kqueue_event_Object, x)
 static struct PyMemberDef kqueue_event_members[] = {
-    {"ident",           IDENT_TYPE,     KQ_OFF(e.ident)},
-    {"filter",          T_SHORT,        KQ_OFF(e.filter)},
-    {"flags",           T_USHORT,       KQ_OFF(e.flags)},
+    {"ident",           T_UINTPTRT,     KQ_OFF(e.ident)},
+    {"filter",          FILTER_TYPE,    KQ_OFF(e.filter)},
+    {"flags",           FLAGS_TYPE,     KQ_OFF(e.flags)},
     {"fflags",          T_UINT,         KQ_OFF(e.fflags)},
     {"data",            DATA_TYPE,      KQ_OFF(e.data)},
     {"udata",           T_UINTPTRT,     KQ_OFF(e.udata)},
@@ -1834,9 +1874,9 @@ kqueue_event_repr(kqueue_event_Object *s
     PyOS_snprintf(
         buf, sizeof(buf),
         "<select.kevent ident=%zu filter=%d flags=0x%x fflags=0x%x "
-        "data=0x%zd udata=%p>",
-        (size_t)(s->e.ident), s->e.filter, s->e.flags,
-        s->e.fflags, (Py_ssize_t)(s->e.data), s->e.udata);
+        "data=0x%llx udata=%p>",
+        (size_t)(s->e.ident), (int)s->e.filter, (unsigned int)s->e.flags,
+        (unsigned int)s->e.fflags, (long long)(s->e.data), (void *)s->e.udata);
     return PyUnicode_FromString(buf);
 }
 
@@ -1846,7 +1886,9 @@ kqueue_event_init(kqueue_event_Object *s
     PyObject *pfd;
     static char *kwlist[] = {"ident", "filter", "flags", "fflags",
                              "data", "udata", NULL};
-    static const char fmt[] = "O|hHI" DATA_FMT_UNIT UINTPTRT_FMT_UNIT ":kevent";
+    static const char fmt[] = "O|"
+                FILTER_FMT_UNIT FLAGS_FMT_UNIT FFLAGS_FMT_UNIT DATA_FMT_UNIT
+                UINTPTRT_FMT_UNIT ":kevent";
 
     EV_SET(&(self->e), 0, EVFILT_READ, EV_ADD, 0, 0, 0); /* defaults */
 
@@ -1856,12 +1898,8 @@ kqueue_event_init(kqueue_event_Object *s
         return -1;
     }
 
-    if (PyLong_Check(pfd)
-#if IDENT_TYPE == T_UINT
-        && PyLong_AsUnsignedLong(pfd) <= UINT_MAX
-#endif
-    ) {
-        self->e.ident = IDENT_AsType(pfd);
+    if (PyLong_Check(pfd)) {
+        self->e.ident = PyLong_AsSize_t(pfd);
     }
     else {
         self->e.ident = PyObject_AsFileDescriptor(pfd);
@@ -1876,29 +1914,22 @@ static PyObject *
 kqueue_event_richcompare(kqueue_event_Object *s, kqueue_event_Object *o,
                          int op)
 {
-    intptr_t result = 0;
+    int result;
 
     if (!kqueue_event_Check(o)) {
-        if (op == Py_EQ || op == Py_NE) {
-            PyObject *res = op == Py_EQ ? Py_False : Py_True;
-            Py_INCREF(res);
-            return res;
-        }
-        PyErr_Format(PyExc_TypeError,
-            "can't compare %.200s to %.200s",
-            Py_TYPE(s)->tp_name, Py_TYPE(o)->tp_name);
-        return NULL;
-    }
-    if (((result = (IDENT_CAST)(s->e.ident - o->e.ident)) == 0) &&
-        ((result = s->e.filter - o->e.filter) == 0) &&
-        ((result = s->e.flags - o->e.flags) == 0) &&
-        ((result = (int)(s->e.fflags - o->e.fflags)) == 0) &&
-        ((result = s->e.data - o->e.data) == 0) &&
-        ((result = s->e.udata - o->e.udata) == 0)
-       ) {
-        result = 0;
+        Py_RETURN_NOTIMPLEMENTED;
     }
 
+#define CMP(a, b) ((a) != (b)) ? ((a) < (b) ? -1 : 1)
+    result = CMP(s->e.ident, o->e.ident)
+           : CMP(s->e.filter, o->e.filter)
+           : CMP(s->e.flags, o->e.flags)
+           : CMP(s->e.fflags, o->e.fflags)
+           : CMP(s->e.data, o->e.data)
+           : CMP((intptr_t)s->e.udata, (intptr_t)o->e.udata)
+           : 0;
+#undef CMP
+
     switch (op) {
     case Py_EQ:
         result = (result == 0);
@@ -2103,7 +2134,7 @@ kqueue_queue_control(kqueue_queue_Object
     int i = 0;
     PyObject *otimeout = NULL;
     PyObject *ch = NULL;
-    PyObject *it = NULL, *ei = NULL;
+    PyObject *seq = NULL, *ei = NULL;
     PyObject *result = NULL;
     struct kevent *evl = NULL;
     struct kevent *chl = NULL;
@@ -2129,7 +2160,7 @@ kqueue_queue_control(kqueue_queue_Object
     }
     else {
         if (_PyTime_FromSecondsObject(&timeout,
-                                      otimeout, _PyTime_ROUND_CEILING) < 0) {
+                                      otimeout, _PyTime_ROUND_TIMEOUT) < 0) {
             PyErr_Format(PyExc_TypeError,
                 "timeout argument must be a number "
                 "or None, got %.200s",
@@ -2149,37 +2180,34 @@ kqueue_queue_control(kqueue_queue_Object
     }
 
     if (ch != NULL && ch != Py_None) {
-        it = PyObject_GetIter(ch);
-        if (it == NULL) {
-            PyErr_SetString(PyExc_TypeError,
-                            "changelist is not iterable");
+        seq = PySequence_Fast(ch, "changelist is not iterable");
+        if (seq == NULL) {
             return NULL;
         }
-        nchanges = PyObject_Size(ch);
-        if (nchanges < 0) {
+        if (PySequence_Fast_GET_SIZE(seq) > INT_MAX) {
+            PyErr_SetString(PyExc_OverflowError,
+                            "changelist is too long");
             goto error;
         }
+        nchanges = (int)PySequence_Fast_GET_SIZE(seq);
 
         chl = PyMem_New(struct kevent, nchanges);
         if (chl == NULL) {
             PyErr_NoMemory();
             goto error;
         }
-        i = 0;
-        while ((ei = PyIter_Next(it)) != NULL) {
+        for (i = 0; i < nchanges; ++i) {
+            ei = PySequence_Fast_GET_ITEM(seq, i);
             if (!kqueue_event_Check(ei)) {
-                Py_DECREF(ei);
                 PyErr_SetString(PyExc_TypeError,
                     "changelist must be an iterable of "
                     "select.kevent objects");
                 goto error;
-            } else {
-                chl[i++] = ((kqueue_event_Object *)ei)->e;
             }
-            Py_DECREF(ei);
+            chl[i] = ((kqueue_event_Object *)ei)->e;
         }
+        Py_CLEAR(seq);
     }
-    Py_CLEAR(it);
 
     /* event list */
     if (nevents) {
@@ -2247,7 +2275,7 @@ kqueue_queue_control(kqueue_queue_Object
     PyMem_Free(chl);
     PyMem_Free(evl);
     Py_XDECREF(result);
-    Py_XDECREF(it);
+    Py_XDECREF(seq);
     return NULL;
 }
 
@@ -2255,7 +2283,7 @@ PyDoc_STRVAR(kqueue_queue_control_doc,
 "control(changelist, max_events[, timeout=None]) -> eventlist\n\
 \n\
 Calls the kernel kevent function.\n\
-- changelist must be a list of kevent objects describing the changes\n\
+- changelist must be an iterable of kevent objects describing the changes\n\
   to be made to the kernel's watch list or None.\n\
 - max_events lets you specify the maximum number of events that the\n\
   kernel will return.\n\
diff -urpN Python-3.6.3/Modules/signalmodule.c Python-3.6.5/Modules/signalmodule.c
--- Python-3.6.3/Modules/signalmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/signalmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -462,12 +462,15 @@ signal_signal_impl(PyObject *module, int
     }
     else
         func = signal_handler;
+    /* Check for pending signals before changing signal handler */
+    if (PyErr_CheckSignals()) {
+        return NULL;
+    }
     if (PyOS_setsig(signalnum, func) == SIG_ERR) {
         PyErr_SetFromErrno(PyExc_OSError);
         return NULL;
     }
     old_handler = Handlers[signalnum].func;
-    _Py_atomic_store_relaxed(&Handlers[signalnum].tripped, 0);
     Py_INCREF(handler);
     Handlers[signalnum].func = handler;
     if (old_handler != NULL)
diff -urpN Python-3.6.3/Modules/socketmodule.c Python-3.6.5/Modules/socketmodule.c
--- Python-3.6.3/Modules/socketmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/socketmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -240,7 +240,7 @@ http://cvsweb.netbsd.org/bsdweb.cgi/src/
 # include <ctype.h>
 #endif
 
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(__CYGWIN__) || defined(__NetBSD__)
 # include <sys/ioctl.h>
 #endif
 
@@ -317,6 +317,67 @@ http://cvsweb.netbsd.org/bsdweb.cgi/src/
 #include <VersionHelpers.h>
 #endif
 
+/* remove some flags on older version Windows during run-time.
+   https://msdn.microsoft.com/en-us/library/windows/desktop/ms738596.aspx */
+typedef struct {
+    DWORD build_number;  /* available starting with this Win10 BuildNumber */
+    const char flag_name[20];
+} FlagRuntimeInfo;
+
+/* IMPORTANT: make sure the list ordered by descending build_number */
+static FlagRuntimeInfo win_runtime_flags[] = {
+    /* available starting with Windows 10 1703 */
+    {15063, "TCP_KEEPCNT"},
+    /* available starting with Windows 10 1607 */
+    {14393, "TCP_FASTOPEN"}
+};
+
+static void
+remove_unusable_flags(PyObject *m)
+{
+    PyObject *dict;
+    OSVERSIONINFOEX info;
+    DWORDLONG dwlConditionMask;
+
+    dict = PyModule_GetDict(m);
+    if (dict == NULL) {
+        return;
+    }
+
+    /* set to Windows 10, except BuildNumber. */
+    memset(&info, 0, sizeof(info));
+    info.dwOSVersionInfoSize = sizeof(info);
+    info.dwMajorVersion = 10;
+    info.dwMinorVersion = 0;
+
+    /* set Condition Mask */
+    dwlConditionMask = 0;
+    VER_SET_CONDITION(dwlConditionMask, VER_MAJORVERSION, VER_GREATER_EQUAL);
+    VER_SET_CONDITION(dwlConditionMask, VER_MINORVERSION, VER_GREATER_EQUAL);
+    VER_SET_CONDITION(dwlConditionMask, VER_BUILDNUMBER, VER_GREATER_EQUAL);
+
+    for (int i=0; i<sizeof(win_runtime_flags)/sizeof(FlagRuntimeInfo); i++) {
+        info.dwBuildNumber = win_runtime_flags[i].build_number;
+        /* greater than or equal to the specified version? 
+           Compatibility Mode will not cheat VerifyVersionInfo(...) */
+        if (VerifyVersionInfo(
+                &info,
+                VER_MAJORVERSION|VER_MINORVERSION|VER_BUILDNUMBER,
+                dwlConditionMask)) {
+            break;
+        }
+        else {
+            if (PyDict_GetItemString(
+                    dict,
+                    win_runtime_flags[i].flag_name) != NULL) {
+                PyDict_DelItemString(
+                    dict,
+                    win_runtime_flags[i].flag_name);
+            }
+        }
+    }
+}
+
 #endif
 
 #include <stddef.h>
@@ -1250,7 +1311,7 @@ makesockaddr(SOCKET_T sockfd, struct soc
         }
         return ret;
     }
-#endif
+#endif /* ENABLE_IPV6 */
 
 #ifdef USE_BLUETOOTH
     case AF_BLUETOOTH:
@@ -1289,11 +1350,11 @@ makesockaddr(SOCKET_T sockfd, struct soc
             struct sockaddr_hci *a = (struct sockaddr_hci *) addr;
 #if defined(__NetBSD__) || defined(__DragonFly__)
             return makebdaddr(&_BT_HCI_MEMB(a, bdaddr));
-#else
+#else /* __NetBSD__ || __DragonFly__ */
             PyObject *ret = NULL;
             ret = Py_BuildValue("i", _BT_HCI_MEMB(a, dev));
             return ret;
-#endif
+#endif /* !(__NetBSD__ || __DragonFly__) */
         }
 
 #if !defined(__FreeBSD__)
@@ -1302,20 +1363,20 @@ makesockaddr(SOCKET_T sockfd, struct soc
             struct sockaddr_sco *a = (struct sockaddr_sco *) addr;
             return makebdaddr(&_BT_SCO_MEMB(a, bdaddr));
         }
-#endif
+#endif /* !__FreeBSD__ */
 
         default:
             PyErr_SetString(PyExc_ValueError,
                             "Unknown Bluetooth protocol");
             return NULL;
         }
-#endif
+#endif /* USE_BLUETOOTH */
 
 #if defined(HAVE_NETPACKET_PACKET_H) && defined(SIOCGIFNAME)
     case AF_PACKET:
     {
         struct sockaddr_ll *a = (struct sockaddr_ll *)addr;
-        char *ifname = "";
+        const char *ifname = "";
         struct ifreq ifr;
         /* need to look up interface name give index */
         if (a->sll_ifindex) {
@@ -1331,7 +1392,7 @@ makesockaddr(SOCKET_T sockfd, struct soc
                              a->sll_addr,
                              a->sll_halen);
     }
-#endif
+#endif /* HAVE_NETPACKET_PACKET_H && SIOCGIFNAME */
 
 #ifdef HAVE_LINUX_TIPC_H
     case AF_TIPC:
@@ -1364,13 +1425,13 @@ makesockaddr(SOCKET_T sockfd, struct soc
             return NULL;
         }
     }
-#endif
+#endif /* HAVE_LINUX_TIPC_H */
 
-#ifdef AF_CAN
+#if defined(AF_CAN) && defined(SIOCGIFNAME)
     case AF_CAN:
     {
         struct sockaddr_can *a = (struct sockaddr_can *)addr;
-        char *ifname = "";
+        const char *ifname = "";
         struct ifreq ifr;
         /* need to look up interface name given index */
         if (a->can_ifindex) {
@@ -1383,7 +1444,7 @@ makesockaddr(SOCKET_T sockfd, struct soc
                                     ifname,
                                     a->can_family);
     }
-#endif
+#endif /* AF_CAN && SIOCGIFNAME */
 
 #ifdef PF_SYSTEM
     case PF_SYSTEM:
@@ -1394,13 +1455,13 @@ makesockaddr(SOCKET_T sockfd, struct soc
             struct sockaddr_ctl *a = (struct sockaddr_ctl *)addr;
             return Py_BuildValue("(II)", a->sc_id, a->sc_unit);
         }
-#endif
+#endif /* SYSPROTO_CONTROL */
         default:
             PyErr_SetString(PyExc_ValueError,
                             "Invalid address type");
             return 0;
         }
-#endif
+#endif /* PF_SYSTEM */
 
 #ifdef HAVE_SOCKADDR_ALG
     case AF_ALG:
@@ -1416,7 +1477,7 @@ makesockaddr(SOCKET_T sockfd, struct soc
             a->salg_feat,
             a->salg_mask);
     }
-#endif
+#endif /* HAVE_SOCKADDR_ALG */
 
     /* More cases here... */
 
@@ -1582,12 +1643,12 @@ getsockaddrarg(PySocketSockObject *s, Py
         *len_ret = sizeof(*addr);
         return 1;
     }
-#endif
+#endif /* AF_NETLINK */
 
 #ifdef AF_RDS
     case AF_RDS:
         /* RDS sockets use sockaddr_in: fall-through */
-#endif
+#endif /* AF_RDS */
 
     case AF_INET:
     {
@@ -1669,7 +1730,7 @@ getsockaddrarg(PySocketSockObject *s, Py
         *len_ret = sizeof *addr;
         return 1;
     }
-#endif
+#endif /* ENABLE_IPV6 */
 
 #ifdef USE_BLUETOOTH
     case AF_BLUETOOTH:
@@ -1678,7 +1739,7 @@ getsockaddrarg(PySocketSockObject *s, Py
         case BTPROTO_L2CAP:
         {
             struct sockaddr_l2 *addr;
-            char *straddr;
+            const char *straddr;
 
             addr = (struct sockaddr_l2 *)addr_ret;
             memset(addr, 0, sizeof(struct sockaddr_l2));
@@ -1698,7 +1759,7 @@ getsockaddrarg(PySocketSockObject *s, Py
         case BTPROTO_RFCOMM:
         {
             struct sockaddr_rc *addr;
-            char *straddr;
+            const char *straddr;
 
             addr = (struct sockaddr_rc *)addr_ret;
             _BT_RC_MEMB(addr, family) = AF_BLUETOOTH;
@@ -1718,24 +1779,24 @@ getsockaddrarg(PySocketSockObject *s, Py
         {
             struct sockaddr_hci *addr = (struct sockaddr_hci *)addr_ret;
 #if defined(__NetBSD__) || defined(__DragonFly__)
-                        char *straddr = PyBytes_AS_STRING(args);
-
-                        _BT_HCI_MEMB(addr, family) = AF_BLUETOOTH;
-            if (straddr == NULL) {
+            const char *straddr;
+            _BT_HCI_MEMB(addr, family) = AF_BLUETOOTH;
+            if (!PyBytes_Check(args)) {
                 PyErr_SetString(PyExc_OSError, "getsockaddrarg: "
                     "wrong format");
                 return 0;
             }
+            straddr = PyBytes_AS_STRING(args);
             if (setbdaddr(straddr, &_BT_HCI_MEMB(addr, bdaddr)) < 0)
                 return 0;
-#else
+#else  /* __NetBSD__ || __DragonFly__ */
             _BT_HCI_MEMB(addr, family) = AF_BLUETOOTH;
             if (!PyArg_ParseTuple(args, "i", &_BT_HCI_MEMB(addr, dev))) {
                 PyErr_SetString(PyExc_OSError, "getsockaddrarg: "
                                 "wrong format");
                 return 0;
             }
-#endif
+#endif /* !(__NetBSD__ || __DragonFly__) */
             *len_ret = sizeof *addr;
             return 1;
         }
@@ -1743,7 +1804,7 @@ getsockaddrarg(PySocketSockObject *s, Py
         case BTPROTO_SCO:
         {
             struct sockaddr_sco *addr;
-            char *straddr;
+            const char *straddr;
 
             addr = (struct sockaddr_sco *)addr_ret;
             _BT_SCO_MEMB(addr, family) = AF_BLUETOOTH;
@@ -1759,20 +1820,20 @@ getsockaddrarg(PySocketSockObject *s, Py
             *len_ret = sizeof *addr;
             return 1;
         }
-#endif
+#endif /* !__FreeBSD__ */
         default:
             PyErr_SetString(PyExc_OSError, "getsockaddrarg: unknown Bluetooth protocol");
             return 0;
         }
     }
-#endif
+#endif /* USE_BLUETOOTH */
 
 #if defined(HAVE_NETPACKET_PACKET_H) && defined(SIOCGIFINDEX)
     case AF_PACKET:
     {
         struct sockaddr_ll* addr;
         struct ifreq ifr;
-        char *interfaceName;
+        const char *interfaceName;
         int protoNumber;
         int hatype = 0;
         int pkttype = 0;
@@ -1826,7 +1887,7 @@ getsockaddrarg(PySocketSockObject *s, Py
         PyBuffer_Release(&haddr);
         return 1;
     }
-#endif
+#endif /* HAVE_NETPACKET_PACKET_H && SIOCGIFINDEX */
 
 #ifdef HAVE_LINUX_TIPC_H
     case AF_TIPC:
@@ -1876,9 +1937,9 @@ getsockaddrarg(PySocketSockObject *s, Py
 
         return 1;
     }
-#endif
+#endif /* HAVE_LINUX_TIPC_H */
 
-#if defined(AF_CAN) && defined(CAN_RAW) && defined(CAN_BCM)
+#if defined(AF_CAN) && defined(CAN_RAW) && defined(CAN_BCM) && defined(SIOCGIFINDEX)
     case AF_CAN:
         switch (s->sock_proto) {
         case CAN_RAW:
@@ -1927,7 +1988,7 @@ getsockaddrarg(PySocketSockObject *s, Py
                             "getsockaddrarg: unsupported CAN protocol");
             return 0;
         }
-#endif
+#endif /* AF_CAN && CAN_RAW && CAN_BCM && SIOCGIFINDEX */
 
 #ifdef PF_SYSTEM
     case PF_SYSTEM:
@@ -1979,19 +2040,19 @@ getsockaddrarg(PySocketSockObject *s, Py
             *len_ret = sizeof(*addr);
             return 1;
         }
-#endif
+#endif /* SYSPROTO_CONTROL */
         default:
             PyErr_SetString(PyExc_OSError,
                             "getsockaddrarg: unsupported PF_SYSTEM protocol");
             return 0;
         }
-#endif
+#endif /* PF_SYSTEM */
 #ifdef HAVE_SOCKADDR_ALG
     case AF_ALG:
     {
         struct sockaddr_alg *sa;
-        char *type;
-        char *name;
+        const char *type;
+        const char *name;
         sa = (struct sockaddr_alg *)addr_ret;
 
         memset(sa, 0, sizeof(*sa));
@@ -2015,7 +2076,7 @@ getsockaddrarg(PySocketSockObject *s, Py
         *len_ret = sizeof(*sa);
         return 1;
     }
-#endif
+#endif /* HAVE_SOCKADDR_ALG */
 
     /* More cases here... */
 
@@ -2050,12 +2111,12 @@ getsockaddrlen(PySocketSockObject *s, so
         *len_ret = sizeof (struct sockaddr_nl);
         return 1;
     }
-#endif
+#endif /* AF_NETLINK */
 
 #ifdef AF_RDS
     case AF_RDS:
         /* RDS sockets use sockaddr_in: fall-through */
-#endif
+#endif /* AF_RDS */
 
     case AF_INET:
     {
@@ -2069,7 +2130,7 @@ getsockaddrlen(PySocketSockObject *s, so
         *len_ret = sizeof (struct sockaddr_in6);
         return 1;
     }
-#endif
+#endif /* ENABLE_IPV6 */
 
 #ifdef USE_BLUETOOTH
     case AF_BLUETOOTH:
@@ -2090,7 +2151,7 @@ getsockaddrlen(PySocketSockObject *s, so
         case BTPROTO_SCO:
             *len_ret = sizeof (struct sockaddr_sco);
             return 1;
-#endif
+#endif /* !__FreeBSD__ */
         default:
             PyErr_SetString(PyExc_OSError, "getsockaddrlen: "
                             "unknown BT protocol");
@@ -2098,7 +2159,7 @@ getsockaddrlen(PySocketSockObject *s, so
 
         }
     }
-#endif
+#endif /* USE_BLUETOOTH */
 
 #ifdef HAVE_NETPACKET_PACKET_H
     case AF_PACKET:
@@ -2106,7 +2167,7 @@ getsockaddrlen(PySocketSockObject *s, so
         *len_ret = sizeof (struct sockaddr_ll);
         return 1;
     }
-#endif
+#endif /* HAVE_NETPACKET_PACKET_H */
 
 #ifdef HAVE_LINUX_TIPC_H
     case AF_TIPC:
@@ -2114,7 +2175,7 @@ getsockaddrlen(PySocketSockObject *s, so
         *len_ret = sizeof (struct sockaddr_tipc);
         return 1;
     }
-#endif
+#endif /* HAVE_LINUX_TIPC_H */
 
 #ifdef AF_CAN
     case AF_CAN:
@@ -2122,7 +2183,7 @@ getsockaddrlen(PySocketSockObject *s, so
         *len_ret = sizeof (struct sockaddr_can);
         return 1;
     }
-#endif
+#endif /* AF_CAN */
 
 #ifdef PF_SYSTEM
     case PF_SYSTEM:
@@ -2131,20 +2192,20 @@ getsockaddrlen(PySocketSockObject *s, so
         case SYSPROTO_CONTROL:
             *len_ret = sizeof (struct sockaddr_ctl);
             return 1;
-#endif
+#endif /* SYSPROTO_CONTROL */
         default:
             PyErr_SetString(PyExc_OSError, "getsockaddrlen: "
                             "unknown PF_SYSTEM protocol");
             return 0;
         }
-#endif
+#endif /* PF_SYSTEM */
 #ifdef HAVE_SOCKADDR_ALG
     case AF_ALG:
     {
         *len_ret = sizeof (struct sockaddr_alg);
         return 1;
     }
-#endif
+#endif /* HAVE_SOCKADDR_ALG */
 
     /* More cases here... */
 
@@ -2454,7 +2515,7 @@ socket_parse_timeout(_PyTime_t *timeout,
     }
 
     if (_PyTime_FromSecondsObject(timeout,
-                                  timeout_obj, _PyTime_ROUND_CEILING) < 0)
+                                  timeout_obj, _PyTime_ROUND_TIMEOUT) < 0)
         return -1;
 
     if (*timeout < 0) {
@@ -2463,10 +2524,10 @@ socket_parse_timeout(_PyTime_t *timeout,
     }
 
 #ifdef MS_WINDOWS
-    overflow |= (_PyTime_AsTimeval(*timeout, &tv, _PyTime_ROUND_CEILING) < 0);
+    overflow |= (_PyTime_AsTimeval(*timeout, &tv, _PyTime_ROUND_TIMEOUT) < 0);
 #endif
 #ifndef HAVE_POLL
-    ms = _PyTime_AsMilliseconds(*timeout, _PyTime_ROUND_CEILING);
+    ms = _PyTime_AsMilliseconds(*timeout, _PyTime_ROUND_TIMEOUT);
     overflow |= (ms > INT_MAX);
 #endif
     if (overflow) {
@@ -5178,7 +5239,7 @@ socket_gethostbyaddr(PyObject *self, PyO
     int result;
 #endif
 #endif /* HAVE_GETHOSTBYNAME_R */
-    char *ap;
+    const char *ap;
     int al;
     int af;
 
@@ -5250,7 +5311,7 @@ for a host.  The host argument is a stri
 static PyObject *
 socket_getservbyname(PyObject *self, PyObject *args)
 {
-    char *name, *proto=NULL;
+    const char *name, *proto=NULL;
     struct servent *sp;
     if (!PyArg_ParseTuple(args, "s|s:getservbyname", &name, &proto))
         return NULL;
@@ -5281,7 +5342,7 @@ static PyObject *
 socket_getservbyport(PyObject *self, PyObject *args)
 {
     int port;
-    char *proto=NULL;
+    const char *proto=NULL;
     struct servent *sp;
     if (!PyArg_ParseTuple(args, "i|s:getservbyport", &port, &proto))
         return NULL;
@@ -5316,7 +5377,7 @@ otherwise any protocol will match.");
 static PyObject *
 socket_getprotobyname(PyObject *self, PyObject *args)
 {
-    char *name;
+    const char *name;
     struct protoent *sp;
     if (!PyArg_ParseTuple(args, "s:getprotobyname", &name))
         return NULL;
@@ -5614,7 +5675,7 @@ socket_inet_aton(PyObject *self, PyObjec
     /* Have to use inet_addr() instead */
     unsigned int packed_addr;
 #endif
-    char *ip_addr;
+    const char *ip_addr;
 
     if (!PyArg_ParseTuple(args, "s:inet_aton", &ip_addr))
         return NULL;
@@ -5709,7 +5770,7 @@ static PyObject *
 socket_inet_pton(PyObject *self, PyObject *args)
 {
     int af;
-    char* ip;
+    const char* ip;
     int retval;
 #ifdef ENABLE_IPV6
     char packed[Py_MAX(sizeof(struct in_addr), sizeof(struct in6_addr))];
@@ -5977,7 +6038,7 @@ socket_getaddrinfo(PyObject *self, PyObj
     }
 #if defined(__APPLE__) && defined(AI_NUMERICSERV)
     if ((flags & AI_NUMERICSERV) && (pptr == NULL || (pptr[0] == '0' && pptr[1] == 0))) {
-        /* On OSX upto at least OSX 10.8 getaddrinfo crashes
+        /* On OSX up to at least OSX 10.8 getaddrinfo crashes
          * if AI_NUMERICSERV is set and the servname is NULL or "0".
          * This workaround avoids a segfault in libsystem.
          */
@@ -6046,7 +6107,7 @@ socket_getnameinfo(PyObject *self, PyObj
 {
     PyObject *sa = (PyObject *)NULL;
     int flags;
-    char *hostp;
+    const char *hostp;
     int port;
     unsigned int flowinfo, scope_id;
     char hbuf[NI_MAXHOST], pbuf[NI_MAXSERV];
@@ -7694,6 +7755,12 @@ PyInit__socket(void)
 #if defined(USE_GETHOSTBYNAME_LOCK) || defined(USE_GETADDRINFO_LOCK)
     netdb_lock = PyThread_allocate_lock();
 #endif
+
+#ifdef MS_WINDOWS
+    /* removes some flags on older version Windows during run-time */
+    remove_unusable_flags(m);
+#endif
+
     return m;
 }
 
diff -urpN Python-3.6.3/Modules/socketmodule.h Python-3.6.5/Modules/socketmodule.h
--- Python-3.6.3/Modules/socketmodule.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/socketmodule.h	2018-03-28 11:19:31.000000000 +0200
@@ -80,7 +80,10 @@ typedef int socklen_t;
 #endif
 
 #ifdef HAVE_LINUX_CAN_H
-#include <linux/can.h>
+# include <linux/can.h>
+#else
+# undef AF_CAN
+# undef PF_CAN
 #endif
 
 #ifdef HAVE_LINUX_CAN_RAW_H
diff -urpN Python-3.6.3/Modules/timemodule.c Python-3.6.5/Modules/timemodule.c
--- Python-3.6.3/Modules/timemodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/timemodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -225,7 +225,7 @@ static PyObject *
 time_sleep(PyObject *self, PyObject *obj)
 {
     _PyTime_t secs;
-    if (_PyTime_FromSecondsObject(&secs, obj, _PyTime_ROUND_CEILING))
+    if (_PyTime_FromSecondsObject(&secs, obj, _PyTime_ROUND_TIMEOUT))
         return NULL;
     if (secs < 0) {
         PyErr_SetString(PyExc_ValueError,
@@ -1316,28 +1316,7 @@ The tuple items are:\n\
   DST (Daylight Savings Time) flag (-1, 0 or 1)\n\
 If the DST flag is 0, the time is given in the regular time zone;\n\
 if it is 1, the time is given in the DST time zone;\n\
-if it is -1, mktime() should guess based on the date and time.\n\
-\n\
-Variables:\n\
-\n\
-timezone -- difference in seconds between UTC and local standard time\n\
-altzone -- difference in  seconds between UTC and local DST time\n\
-daylight -- whether local time should reflect DST\n\
-tzname -- tuple of (standard time zone name, DST time zone name)\n\
-\n\
-Functions:\n\
-\n\
-time() -- return current time in seconds since the Epoch as a float\n\
-clock() -- return CPU time since process start as a float\n\
-sleep() -- delay for a number of seconds given as a float\n\
-gmtime() -- convert seconds since Epoch to UTC tuple\n\
-localtime() -- convert seconds since Epoch to local time tuple\n\
-asctime() -- convert time tuple to string\n\
-ctime() -- convert time in seconds to string\n\
-mktime() -- convert local time tuple to seconds since Epoch\n\
-strftime() -- convert time tuple to string according to format specification\n\
-strptime() -- parse string to time tuple according to format specification\n\
-tzset() -- change the local timezone");
+if it is -1, mktime() should guess based on the date and time.\n");
 
 
 
diff -urpN Python-3.6.3/Modules/zlibmodule.c Python-3.6.5/Modules/zlibmodule.c
--- Python-3.6.3/Modules/zlibmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Modules/zlibmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -1149,9 +1149,7 @@ static PyMethodDef comp_methods[] =
 {
     ZLIB_COMPRESS_COMPRESS_METHODDEF
     ZLIB_COMPRESS_FLUSH_METHODDEF
-#ifdef HAVE_ZLIB_COPY
     ZLIB_COMPRESS_COPY_METHODDEF
-#endif
     {NULL, NULL}
 };
 
@@ -1159,9 +1157,7 @@ static PyMethodDef Decomp_methods[] =
 {
     ZLIB_DECOMPRESS_DECOMPRESS_METHODDEF
     ZLIB_DECOMPRESS_FLUSH_METHODDEF
-#ifdef HAVE_ZLIB_COPY
     ZLIB_DECOMPRESS_COPY_METHODDEF
-#endif
     {NULL, NULL}
 };
 
@@ -1376,18 +1372,33 @@ PyInit_zlib(void)
     PyModule_AddIntMacro(m, DEFLATED);
     PyModule_AddIntMacro(m, DEF_MEM_LEVEL);
     PyModule_AddIntMacro(m, DEF_BUF_SIZE);
+    // compression levels
+    PyModule_AddIntMacro(m, Z_NO_COMPRESSION);
     PyModule_AddIntMacro(m, Z_BEST_SPEED);
     PyModule_AddIntMacro(m, Z_BEST_COMPRESSION);
     PyModule_AddIntMacro(m, Z_DEFAULT_COMPRESSION);
+    // compression strategies
     PyModule_AddIntMacro(m, Z_FILTERED);
     PyModule_AddIntMacro(m, Z_HUFFMAN_ONLY);
+#ifdef Z_RLE // 1.2.0.1
+    PyModule_AddIntMacro(m, Z_RLE);
+#endif
+#ifdef Z_FIXED // 1.2.2.2
+    PyModule_AddIntMacro(m, Z_FIXED);
+#endif
     PyModule_AddIntMacro(m, Z_DEFAULT_STRATEGY);
-
-    PyModule_AddIntMacro(m, Z_FINISH);
+    // allowed flush values
     PyModule_AddIntMacro(m, Z_NO_FLUSH);
+    PyModule_AddIntMacro(m, Z_PARTIAL_FLUSH);
     PyModule_AddIntMacro(m, Z_SYNC_FLUSH);
     PyModule_AddIntMacro(m, Z_FULL_FLUSH);
-
+    PyModule_AddIntMacro(m, Z_FINISH);
+#ifdef Z_BLOCK // 1.2.0.5 for inflate, 1.2.3.4 for deflate
+    PyModule_AddIntMacro(m, Z_BLOCK);
+#endif
+#ifdef Z_TREES // 1.2.3.4, only for inflate
+    PyModule_AddIntMacro(m, Z_TREES);
+#endif
     ver = PyUnicode_FromString(ZLIB_VERSION);
     if (ver != NULL)
         PyModule_AddObject(m, "ZLIB_VERSION", ver);
diff -urpN Python-3.6.3/Objects/bytearrayobject.c Python-3.6.5/Objects/bytearrayobject.c
--- Python-3.6.3/Objects/bytearrayobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/bytearrayobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -102,6 +102,26 @@ PyByteArray_FromObject(PyObject *input)
                                         input, NULL);
 }
 
+static PyObject *
+_PyByteArray_FromBufferObject(PyObject *obj)
+{
+    PyObject *result;
+    Py_buffer view;
+
+    if (PyObject_GetBuffer(obj, &view, PyBUF_FULL_RO) < 0) {
+        return NULL;
+    }
+    result = PyByteArray_FromStringAndSize(NULL, view.len);
+    if (result != NULL &&
+        PyBuffer_ToContiguous(PyByteArray_AS_STRING(result),
+                              &view, view.len, 'C') < 0)
+    {
+        Py_CLEAR(result);
+    }
+    PyBuffer_Release(&view);
+    return result;
+}
+
 PyObject *
 PyByteArray_FromStringAndSize(const char *bytes, Py_ssize_t size)
 {
@@ -224,7 +244,7 @@ PyByteArray_Resize(PyObject *self, Py_ss
             return -1;
         }
         memcpy(sval, PyByteArray_AS_STRING(self),
-               Py_MIN(requested_size, Py_SIZE(self)));
+               Py_MIN((size_t)requested_size, (size_t)Py_SIZE(self)));
         PyObject_Free(obj->ob_bytes);
     }
     else {
@@ -534,7 +554,8 @@ bytearray_setslice(PyByteArrayObject *se
     if (values == (PyObject *)self) {
         /* Make a copy and call this function recursively */
         int err;
-        values = PyByteArray_FromObject(values);
+        values = PyByteArray_FromStringAndSize(PyByteArray_AS_STRING(values),
+                                               PyByteArray_GET_SIZE(values));
         if (values == NULL)
             return -1;
         err = bytearray_setslice(self, lo, hi, values);
@@ -1381,19 +1402,19 @@ Partition the bytearray into three parts
 
 This will search for the separator sep in the bytearray. If the separator is
 found, returns a 3-tuple containing the part before the separator, the
-separator itself, and the part after it.
+separator itself, and the part after it as new bytearray objects.
 
-If the separator is not found, returns a 3-tuple containing the original
-bytearray object and two empty bytearray objects.
+If the separator is not found, returns a 3-tuple containing the copy of the
+original bytearray object and two empty bytearray objects.
 [clinic start generated code]*/
 
 static PyObject *
 bytearray_partition(PyByteArrayObject *self, PyObject *sep)
-/*[clinic end generated code: output=45d2525ddd35f957 input=86f89223892b70b5]*/
+/*[clinic end generated code: output=45d2525ddd35f957 input=8f644749ee4fc83a]*/
 {
     PyObject *bytesep, *result;
 
-    bytesep = PyByteArray_FromObject(sep);
+    bytesep = _PyByteArray_FromBufferObject(sep);
     if (! bytesep)
         return NULL;
 
@@ -1414,23 +1435,24 @@ bytearray.rpartition
     sep: object
     /
 
-Partition the bytes into three parts using the given separator.
+Partition the bytearray into three parts using the given separator.
 
-This will search for the separator sep in the bytearray, starting and the end.
+This will search for the separator sep in the bytearray, starting at the end.
 If the separator is found, returns a 3-tuple containing the part before the
-separator, the separator itself, and the part after it.
+separator, the separator itself, and the part after it as new bytearray
+objects.
 
 If the separator is not found, returns a 3-tuple containing two empty bytearray
-objects and the original bytearray object.
+objects and the copy of the original bytearray object.
 [clinic start generated code]*/
 
 static PyObject *
 bytearray_rpartition(PyByteArrayObject *self, PyObject *sep)
-/*[clinic end generated code: output=440de3c9426115e8 input=5f4094f2de87c8f3]*/
+/*[clinic end generated code: output=440de3c9426115e8 input=7e3df3e6cb8fa0ac]*/
 {
     PyObject *bytesep, *result;
 
-    bytesep = PyByteArray_FromObject(sep);
+    bytesep = _PyByteArray_FromBufferObject(sep);
     if (! bytesep)
         return NULL;
 
diff -urpN Python-3.6.3/Objects/bytesobject.c Python-3.6.5/Objects/bytesobject.c
--- Python-3.6.3/Objects/bytesobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/bytesobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -1255,7 +1255,7 @@ PyObject *PyBytes_DecodeEscape(const cha
     if (first_invalid_escape != NULL) {
         if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                              "invalid escape sequence '\\%c'",
-                             *first_invalid_escape) < 0) {
+                             (unsigned char)*first_invalid_escape) < 0) {
             Py_DECREF(result);
             return NULL;
         }
@@ -1832,7 +1832,7 @@ bytes.rpartition
 
 Partition the bytes into three parts using the given separator.
 
-This will search for the separator sep in the bytes, starting and the end. If
+This will search for the separator sep in the bytes, starting at the end. If
 the separator is found, returns a 3-tuple containing the part before the
 separator, the separator itself, and the part after it.
 
@@ -1842,7 +1842,7 @@ objects and the original bytes object.
 
 static PyObject *
 bytes_rpartition_impl(PyBytesObject *self, Py_buffer *sep)
-/*[clinic end generated code: output=191b114cbb028e50 input=67f689e63a62d478]*/
+/*[clinic end generated code: output=191b114cbb028e50 input=d78db010c8cfdbe1]*/
 {
     return stringlib_rpartition(
         (PyObject*) self,
diff -urpN Python-3.6.3/Objects/clinic/bytearrayobject.c.h Python-3.6.5/Objects/clinic/bytearrayobject.c.h
--- Python-3.6.3/Objects/clinic/bytearrayobject.c.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/clinic/bytearrayobject.c.h	2018-03-28 11:19:31.000000000 +0200
@@ -214,10 +214,10 @@ PyDoc_STRVAR(bytearray_partition__doc__,
 "\n"
 "This will search for the separator sep in the bytearray. If the separator is\n"
 "found, returns a 3-tuple containing the part before the separator, the\n"
-"separator itself, and the part after it.\n"
+"separator itself, and the part after it as new bytearray objects.\n"
 "\n"
-"If the separator is not found, returns a 3-tuple containing the original\n"
-"bytearray object and two empty bytearray objects.");
+"If the separator is not found, returns a 3-tuple containing the copy of the\n"
+"original bytearray object and two empty bytearray objects.");
 
 #define BYTEARRAY_PARTITION_METHODDEF    \
     {"partition", (PyCFunction)bytearray_partition, METH_O, bytearray_partition__doc__},
@@ -226,14 +226,15 @@ PyDoc_STRVAR(bytearray_rpartition__doc__
 "rpartition($self, sep, /)\n"
 "--\n"
 "\n"
-"Partition the bytes into three parts using the given separator.\n"
+"Partition the bytearray into three parts using the given separator.\n"
 "\n"
-"This will search for the separator sep in the bytearray, starting and the end.\n"
+"This will search for the separator sep in the bytearray, starting at the end.\n"
 "If the separator is found, returns a 3-tuple containing the part before the\n"
-"separator, the separator itself, and the part after it.\n"
+"separator, the separator itself, and the part after it as new bytearray\n"
+"objects.\n"
 "\n"
 "If the separator is not found, returns a 3-tuple containing two empty bytearray\n"
-"objects and the original bytearray object.");
+"objects and the copy of the original bytearray object.");
 
 #define BYTEARRAY_RPARTITION_METHODDEF    \
     {"rpartition", (PyCFunction)bytearray_rpartition, METH_O, bytearray_rpartition__doc__},
@@ -711,4 +712,4 @@ bytearray_sizeof(PyByteArrayObject *self
 {
     return bytearray_sizeof_impl(self);
 }
-/*[clinic end generated code: output=225342a680391b9c input=a9049054013a1b77]*/
+/*[clinic end generated code: output=8f022100f059226c input=a9049054013a1b77]*/
diff -urpN Python-3.6.3/Objects/clinic/bytesobject.c.h Python-3.6.5/Objects/clinic/bytesobject.c.h
--- Python-3.6.3/Objects/clinic/bytesobject.c.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/clinic/bytesobject.c.h	2018-03-28 11:19:31.000000000 +0200
@@ -86,7 +86,7 @@ PyDoc_STRVAR(bytes_rpartition__doc__,
 "\n"
 "Partition the bytes into three parts using the given separator.\n"
 "\n"
-"This will search for the separator sep in the bytes, starting and the end. If\n"
+"This will search for the separator sep in the bytes, starting at the end. If\n"
 "the separator is found, returns a 3-tuple containing the part before the\n"
 "separator, the separator itself, and the part after it.\n"
 "\n"
@@ -499,4 +499,4 @@ bytes_fromhex(PyTypeObject *type, PyObje
 exit:
     return return_value;
 }
-/*[clinic end generated code: output=2dc3c93cfd2dc440 input=a9049054013a1b77]*/
+/*[clinic end generated code: output=4ac7e35150d47467 input=a9049054013a1b77]*/
diff -urpN Python-3.6.3/Objects/codeobject.c Python-3.6.5/Objects/codeobject.c
--- Python-3.6.3/Objects/codeobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/codeobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -136,12 +136,20 @@ PyCode_New(int argcount, int kwonlyargco
     if (PyUnicode_READY(filename) < 0)
         return NULL;
 
-    n_cellvars = PyTuple_GET_SIZE(cellvars);
     intern_strings(names);
     intern_strings(varnames);
     intern_strings(freevars);
     intern_strings(cellvars);
     intern_string_constants(consts);
+
+    /* Check for any inner or outer closure references */
+    n_cellvars = PyTuple_GET_SIZE(cellvars);
+    if (!n_cellvars && !PyTuple_GET_SIZE(freevars)) {
+        flags |= CO_NOFREE;
+    } else {
+        flags &= ~CO_NOFREE;
+    }
+
     /* Create mapping between cells and arguments if needed. */
     if (n_cellvars) {
         Py_ssize_t total_args = argcount + kwonlyargcount +
diff -urpN Python-3.6.3/Objects/descrobject.c Python-3.6.5/Objects/descrobject.c
--- Python-3.6.3/Objects/descrobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/descrobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -1483,10 +1483,10 @@ property_init(PyObject *self, PyObject *
     Py_XINCREF(del);
     Py_XINCREF(doc);
 
-    prop->prop_get = get;
-    prop->prop_set = set;
-    prop->prop_del = del;
-    prop->prop_doc = doc;
+    Py_XSETREF(prop->prop_get, get);
+    Py_XSETREF(prop->prop_set, set);
+    Py_XSETREF(prop->prop_del, del);
+    Py_XSETREF(prop->prop_doc, doc);
     prop->getter_doc = 0;
 
     /* if no docstring given and the getter has one, use that one */
diff -urpN Python-3.6.3/Objects/dictobject.c Python-3.6.5/Objects/dictobject.c
--- Python-3.6.3/Objects/dictobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/dictobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -3948,14 +3948,22 @@ static PyObject *
 dictview_repr(_PyDictViewObject *dv)
 {
     PyObject *seq;
-    PyObject *result;
+    PyObject *result = NULL;
+    Py_ssize_t rc;
 
+    rc = Py_ReprEnter((PyObject *)dv);
+    if (rc != 0) {
+        return rc > 0 ? PyUnicode_FromString("...") : NULL;
+    }
     seq = PySequence_List((PyObject *)dv);
-    if (seq == NULL)
-        return NULL;
-
+    if (seq == NULL) {
+        goto Done;
+    }
     result = PyUnicode_FromFormat("%s(%R)", Py_TYPE(dv)->tp_name, seq);
     Py_DECREF(seq);
+
+Done:
+    Py_ReprLeave((PyObject *)dv);
     return result;
 }
 
diff -urpN Python-3.6.3/Objects/enumobject.c Python-3.6.5/Objects/enumobject.c
--- Python-3.6.3/Objects/enumobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/enumobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -87,19 +87,25 @@ enum_next_long(enumobject *en, PyObject*
 
     if (en->en_longindex == NULL) {
         en->en_longindex = PyLong_FromSsize_t(PY_SSIZE_T_MAX);
-        if (en->en_longindex == NULL)
+        if (en->en_longindex == NULL) {
+            Py_DECREF(next_item);
             return NULL;
+        }
     }
     if (one == NULL) {
         one = PyLong_FromLong(1);
-        if (one == NULL)
+        if (one == NULL) {
+            Py_DECREF(next_item);
             return NULL;
+        }
     }
     next_index = en->en_longindex;
     assert(next_index != NULL);
     stepped_up = PyNumber_Add(next_index, one);
-    if (stepped_up == NULL)
+    if (stepped_up == NULL) {
+        Py_DECREF(next_item);
         return NULL;
+    }
     en->en_longindex = stepped_up;
 
     if (result->ob_refcnt == 1) {
diff -urpN Python-3.6.3/Objects/exceptions.c Python-3.6.5/Objects/exceptions.c
--- Python-3.6.3/Objects/exceptions.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/exceptions.c	2018-03-28 11:19:31.000000000 +0200
@@ -2430,12 +2430,6 @@ SimpleExtendsException(PyExc_Warning, Re
 
 
 
-/* Pre-computed RecursionError instance for when recursion depth is reached.
-   Meant to be used when normalizing the exception for exceeding the recursion
-   depth will cause its own infinite recursion.
-*/
-PyObject *PyExc_RecursionErrorInst = NULL;
-
 #define PRE_INIT(TYPE) \
     if (!(_PyExc_ ## TYPE.tp_flags & Py_TPFLAGS_READY)) { \
         if (PyType_Ready(&_PyExc_ ## TYPE) < 0) \
@@ -2697,37 +2691,11 @@ _PyExc_Init(PyObject *bltinmod)
     ADD_ERRNO(TimeoutError, ETIMEDOUT);
 
     preallocate_memerrors();
-
-    if (!PyExc_RecursionErrorInst) {
-        PyExc_RecursionErrorInst = BaseException_new(&_PyExc_RecursionError, NULL, NULL);
-        if (!PyExc_RecursionErrorInst)
-            Py_FatalError("Cannot pre-allocate RecursionError instance for "
-                            "recursion errors");
-        else {
-            PyBaseExceptionObject *err_inst =
-                (PyBaseExceptionObject *)PyExc_RecursionErrorInst;
-            PyObject *args_tuple;
-            PyObject *exc_message;
-            exc_message = PyUnicode_FromString("maximum recursion depth exceeded");
-            if (!exc_message)
-                Py_FatalError("cannot allocate argument for RecursionError "
-                                "pre-allocation");
-            args_tuple = PyTuple_Pack(1, exc_message);
-            if (!args_tuple)
-                Py_FatalError("cannot allocate tuple for RecursionError "
-                                "pre-allocation");
-            Py_DECREF(exc_message);
-            if (BaseException_init(err_inst, args_tuple, NULL))
-                Py_FatalError("init of pre-allocated RecursionError failed");
-            Py_DECREF(args_tuple);
-        }
-    }
 }
 
 void
 _PyExc_Fini(void)
 {
-    Py_CLEAR(PyExc_RecursionErrorInst);
     free_preallocated_memerrors();
     Py_CLEAR(errnomap);
 }
@@ -2891,23 +2859,34 @@ _PyErr_TrySetFromCause(const char *forma
 static int
 _set_legacy_print_statement_msg(PySyntaxErrorObject *self, Py_ssize_t start)
 {
-    PyObject *strip_sep_obj = PyUnicode_FromString(" \t\r\n");
-    if (strip_sep_obj == NULL)
-        return -1;
-
-    // PRINT_OFFSET is to remove `print ` word from the data.
+    // PRINT_OFFSET is to remove the `print ` prefix from the data.
     const int PRINT_OFFSET = 6;
+    const int STRIP_BOTH = 2;
+    Py_ssize_t start_pos = start + PRINT_OFFSET;
     Py_ssize_t text_len = PyUnicode_GET_LENGTH(self->text);
-    PyObject *data = PyUnicode_Substring(self->text, PRINT_OFFSET, text_len);
+    Py_UCS4 semicolon = ';';
+    Py_ssize_t end_pos = PyUnicode_FindChar(self->text, semicolon,
+                                            start_pos, text_len, 1);
+    if (end_pos < -1) {
+      return -1;
+    } else if (end_pos == -1) {
+      end_pos = text_len;
+    }
 
+    PyObject *data = PyUnicode_Substring(self->text, start_pos, end_pos);
     if (data == NULL) {
-        Py_DECREF(strip_sep_obj);
         return -1;
     }
-    PyObject *new_data = _PyUnicode_XStrip(data, 2, strip_sep_obj);
+
+    PyObject *strip_sep_obj = PyUnicode_FromString(" \t\r\n");
+    if (strip_sep_obj == NULL) {
+        Py_DECREF(data);
+        return -1;
+    }
+
+    PyObject *new_data = _PyUnicode_XStrip(data, STRIP_BOTH, strip_sep_obj);
     Py_DECREF(data);
     Py_DECREF(strip_sep_obj);
-
     if (new_data == NULL) {
         return -1;
     }
diff -urpN Python-3.6.3/Objects/frameobject.c Python-3.6.5/Objects/frameobject.c
--- Python-3.6.3/Objects/frameobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/frameobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -56,6 +56,9 @@ frame_getlineno(PyFrameObject *f, void *
  *  o 'try'/'for'/'while' blocks can't be jumped into because the blockstack
  *    needs to be set up before their code runs, and for 'for' loops the
  *    iterator needs to be on the stack.
+ *  o Jumps cannot be made from within a trace function invoked with a
+ *    'return' or 'exception' event since the eval loop has been exited at
+ *    that time.
  */
 static int
 frame_setlineno(PyFrameObject *f, PyObject* p_new_lineno)
@@ -91,13 +94,32 @@ frame_setlineno(PyFrameObject *f, PyObje
         return -1;
     }
 
+    /* Upon the 'call' trace event of a new frame, f->f_lasti is -1 and
+     * f->f_trace is NULL, check first on the first condition.
+     * Forbidding jumps from the 'call' event of a new frame is a side effect
+     * of allowing to set f_lineno only from trace functions. */
+    if (f->f_lasti == -1) {
+        PyErr_Format(PyExc_ValueError,
+                     "can't jump from the 'call' trace event of a new frame");
+        return -1;
+    }
+
     /* You can only do this from within a trace function, not via
      * _getframe or similar hackery. */
-    if (!f->f_trace)
-    {
+    if (!f->f_trace) {
         PyErr_Format(PyExc_ValueError,
-                     "f_lineno can only be set by a"
-                     " line trace function");
+                     "f_lineno can only be set by a trace function");
+        return -1;
+    }
+
+    /* Forbid jumps upon a 'return' trace event (except after executing a
+     * YIELD_VALUE or YIELD_FROM opcode, f_stacktop is not NULL in that case)
+     * and upon an 'exception' trace event.
+     * Jumps from 'call' trace events have already been forbidden above for new
+     * frames, so this check does not change anything for 'call' events. */
+    if (f->f_stacktop == NULL) {
+        PyErr_SetString(PyExc_ValueError,
+                "can only jump from a 'line' trace event");
         return -1;
     }
 
@@ -156,6 +178,16 @@ frame_setlineno(PyFrameObject *f, PyObje
 
     /* We're now ready to look at the bytecode. */
     PyBytes_AsStringAndSize(f->f_code->co_code, (char **)&code, &code_len);
+
+    /* The trace function is called with a 'return' trace event after the
+     * execution of a yield statement. */
+    assert(f->f_lasti != -1);
+    if (code[f->f_lasti] == YIELD_VALUE || code[f->f_lasti] == YIELD_FROM) {
+        PyErr_SetString(PyExc_ValueError,
+                "can't jump from a yield statement");
+        return -1;
+    }
+
     min_addr = Py_MIN(new_lasti, f->f_lasti);
     max_addr = Py_MAX(new_lasti, f->f_lasti);
 
@@ -317,6 +349,13 @@ frame_setlineno(PyFrameObject *f, PyObje
             PyObject *v = (*--f->f_stacktop);
             Py_DECREF(v);
         }
+        if (b->b_type == SETUP_FINALLY &&
+            code[b->b_handler] == WITH_CLEANUP_START)
+        {
+            /* Pop the exit function. */
+            PyObject *v = (*--f->f_stacktop);
+            Py_DECREF(v);
+        }
     }
 
     /* Finally set the new f_lineno and f_lasti and return OK. */
diff -urpN Python-3.6.3/Objects/funcobject.c Python-3.6.5/Objects/funcobject.c
--- Python-3.6.3/Objects/funcobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/funcobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -745,7 +745,7 @@ cm_init(PyObject *self, PyObject *args,
     if (!_PyArg_NoKeywords("classmethod", kwds))
         return -1;
     Py_INCREF(callable);
-    cm->cm_callable = callable;
+    Py_XSETREF(cm->cm_callable, callable);
     return 0;
 }
 
@@ -926,7 +926,7 @@ sm_init(PyObject *self, PyObject *args,
     if (!_PyArg_NoKeywords("staticmethod", kwds))
         return -1;
     Py_INCREF(callable);
-    sm->sm_callable = callable;
+    Py_XSETREF(sm->sm_callable, callable);
     return 0;
 }
 
diff -urpN Python-3.6.3/Objects/listobject.c Python-3.6.5/Objects/listobject.c
--- Python-3.6.3/Objects/listobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/listobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -366,10 +366,7 @@ list_repr(PyListObject *v)
                 goto error;
         }
 
-        if (Py_EnterRecursiveCall(" while getting the repr of a list"))
-            goto error;
         s = PyObject_Repr(v->ob_item[i]);
-        Py_LeaveRecursiveCall();
         if (s == NULL)
             goto error;
 
diff -urpN Python-3.6.3/Objects/longobject.c Python-3.6.5/Objects/longobject.c
--- Python-3.6.3/Objects/longobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/longobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -2016,7 +2016,7 @@ long_from_binary_base(const char **str,
     const char *p = *str;
     const char *start = p;
     char prev = 0;
-    int digits = 0;
+    Py_ssize_t digits = 0;
     int bits_per_char;
     Py_ssize_t n;
     PyLongObject *z;
@@ -2049,15 +2049,15 @@ long_from_binary_base(const char **str,
     }
 
     *str = p;
-    /* n <- # of Python digits needed, = ceiling(n/PyLong_SHIFT). */
-    n = digits * bits_per_char + PyLong_SHIFT - 1;
-    if (n / bits_per_char < p - start) {
+    /* n <- the number of Python digits needed,
+            = ceiling((digits * bits_per_char) / PyLong_SHIFT). */
+    if (digits > (PY_SSIZE_T_MAX - (PyLong_SHIFT - 1)) / bits_per_char) {
         PyErr_SetString(PyExc_ValueError,
                         "int string too large to convert");
         *res = NULL;
         return 0;
     }
-    n = n / PyLong_SHIFT;
+    n = (digits * bits_per_char + PyLong_SHIFT - 1) / PyLong_SHIFT;
     z = _PyLong_New(n);
     if (z == NULL) {
         *res = NULL;
@@ -2259,8 +2259,9 @@ just 1 digit at the start, so that the c
 digit beyond the first.
 ***/
         twodigits c;           /* current input character */
+        double fsize_z;
         Py_ssize_t size_z;
-        int digits = 0;
+        Py_ssize_t digits = 0;
         int i;
         int convwidth;
         twodigits convmultmax, convmult;
@@ -2322,7 +2323,14 @@ digit beyond the first.
          * need to initialize z->ob_digit -- no slot is read up before
          * being stored into.
          */
-        size_z = (Py_ssize_t)(digits * log_base_BASE[base]) + 1;
+        fsize_z = digits * log_base_BASE[base] + 1;
+        if (fsize_z > MAX_LONG_DIGITS) {
+            /* The same exception as in _PyLong_New(). */
+            PyErr_SetString(PyExc_OverflowError,
+                            "too many digits in integer");
+            return NULL;
+        }
+        size_z = (Py_ssize_t)fsize_z;
         /* Uncomment next line to test exceedingly rare copy code */
         /* size_z = 1; */
         assert(size_z > 0);
@@ -4820,7 +4828,7 @@ long_new(PyTypeObject *type, PyObject *a
         return NULL;
     if ((base != 0 && base < 2) || base > 36) {
         PyErr_SetString(PyExc_ValueError,
-                        "int() base must be >= 2 and <= 36");
+                        "int() base must be >= 2 and <= 36, or 0");
         return NULL;
     }
 
diff -urpN Python-3.6.3/Objects/moduleobject.c Python-3.6.5/Objects/moduleobject.c
--- Python-3.6.3/Objects/moduleobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/moduleobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -667,14 +667,11 @@ module_getattro(PyModuleObject *m, PyObj
     if (m->md_dict) {
         _Py_IDENTIFIER(__name__);
         mod_name = _PyDict_GetItemId(m->md_dict, &PyId___name__);
-        if (mod_name) {
+        if (mod_name && PyUnicode_Check(mod_name)) {
             PyErr_Format(PyExc_AttributeError,
                         "module '%U' has no attribute '%U'", mod_name, name);
             return NULL;
         }
-        else if (PyErr_Occurred()) {
-            PyErr_Clear();
-        }
     }
     PyErr_Format(PyExc_AttributeError,
                 "module has no attribute '%U'", name);
diff -urpN Python-3.6.3/Objects/namespaceobject.c Python-3.6.5/Objects/namespaceobject.c
--- Python-3.6.3/Objects/namespaceobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/namespaceobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -50,8 +50,12 @@ namespace_init(_PyNamespaceObject *ns, P
             return -1;
         }
     }
-    if (kwds == NULL)
+    if (kwds == NULL) {
         return 0;
+    }
+    if (!PyArg_ValidateKeywordArguments(kwds)) {
+        return -1;
+    }
     return PyDict_Update(ns->ns_dict, kwds);
 }
 
diff -urpN Python-3.6.3/Objects/object.c Python-3.6.5/Objects/object.c
--- Python-3.6.3/Objects/object.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/object.c	2018-03-28 11:19:31.000000000 +0200
@@ -482,7 +482,12 @@ PyObject_Repr(PyObject *v)
     assert(!PyErr_Occurred());
 #endif
 
+    /* It is possible for a type to have a tp_repr representation that loops
+       infinitely. */
+    if (Py_EnterRecursiveCall(" while getting the repr of an object"))
+        return NULL;
     res = (*v->ob_type->tp_repr)(v);
+    Py_LeaveRecursiveCall();
     if (res == NULL)
         return NULL;
     if (!PyUnicode_Check(res)) {
diff -urpN Python-3.6.3/Objects/obmalloc.c Python-3.6.5/Objects/obmalloc.c
--- Python-3.6.3/Objects/obmalloc.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/obmalloc.c	2018-03-28 11:19:31.000000000 +0200
@@ -1914,7 +1914,7 @@ static void *
 _PyMem_DebugRawRealloc(void *ctx, void *p, size_t nbytes)
 {
     debug_alloc_api_t *api = (debug_alloc_api_t *)ctx;
-    uint8_t *q = (uint8_t *)p, *oldq;
+    uint8_t *q = (uint8_t *)p;
     uint8_t *tail;
     size_t total;       /* nbytes + 4*SST */
     size_t original_nbytes;
@@ -1931,20 +1931,11 @@ _PyMem_DebugRawRealloc(void *ctx, void *
         /* overflow:  can't represent total as a Py_ssize_t */
         return NULL;
 
-    /* Resize and add decorations. We may get a new pointer here, in which
-     * case we didn't get the chance to mark the old memory with DEADBYTE,
-     * but we live with that.
-     */
-    oldq = q;
+    /* Resize and add decorations. */
     q = (uint8_t *)api->alloc.realloc(api->alloc.ctx, q - 2*SST, total);
     if (q == NULL)
         return NULL;
 
-    if (q == oldq && nbytes < original_nbytes) {
-        /* shrinking:  mark old extra memory dead */
-        memset(q + nbytes, DEADBYTE, original_nbytes - nbytes);
-    }
-
     write_size_t(q, nbytes);
     assert(q[SST] == (uint8_t)api->api_id);
     for (i = 1; i < SST; ++i)
diff -urpN Python-3.6.3/Objects/setobject.c Python-3.6.5/Objects/setobject.c
--- Python-3.6.3/Objects/setobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/setobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -790,6 +790,7 @@ frozenset_hash(PyObject *self)
     hash ^= ((Py_uhash_t)PySet_GET_SIZE(self) + 1) * 1927868237UL;
 
     /* Disperse patterns arising in nested frozensets */
+    hash ^= (hash >> 11) ^ (hash >> 25);
     hash = hash * 69069U + 907133923UL;
 
     /* -1 is reserved as an error code */
diff -urpN Python-3.6.3/Objects/tupleobject.c Python-3.6.5/Objects/tupleobject.c
--- Python-3.6.3/Objects/tupleobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/tupleobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -300,10 +300,7 @@ tuplerepr(PyTupleObject *v)
                 goto error;
         }
 
-        if (Py_EnterRecursiveCall(" while getting the repr of a tuple"))
-            goto error;
         s = PyObject_Repr(v->ob_item[i]);
-        Py_LeaveRecursiveCall();
         if (s == NULL)
             goto error;
 
@@ -335,7 +332,7 @@ error:
 
 /* The addend 82520, was selected from the range(0, 1000000) for
    generating the greatest number of prime multipliers for tuples
-   upto length eight:
+   up to length eight:
 
      1082527, 1165049, 1082531, 1165057, 1247581, 1330103, 1082533,
      1330111, 1412633, 1165069, 1247599, 1495177, 1577699
diff -urpN Python-3.6.3/Objects/typeobject.c Python-3.6.5/Objects/typeobject.c
--- Python-3.6.3/Objects/typeobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/typeobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -2313,7 +2313,7 @@ type_new(PyTypeObject *metatype, PyObjec
         }
 
         /* SF bug 475327 -- if that didn't trigger, we need 3
-           arguments. but PyArg_ParseTupleAndKeywords below may give
+           arguments. but PyArg_ParseTuple below may give
            a msg saying type() needs exactly 3. */
         if (nargs != 3) {
             PyErr_SetString(PyExc_TypeError,
@@ -4929,7 +4929,7 @@ PyType_Ready(PyTypeObject *type)
     /* PyType_Ready is the closest thing we have to a choke point
      * for type objects, so is the best place I can think of to try
      * to get type objects into the doubly-linked list of all objects.
-     * Still, not all type objects go thru PyType_Ready.
+     * Still, not all type objects go through PyType_Ready.
      */
     _Py_AddToAllObjects((PyObject *)type, 0);
 #endif
diff -urpN Python-3.6.3/Objects/unicodeobject.c Python-3.6.5/Objects/unicodeobject.c
--- Python-3.6.3/Objects/unicodeobject.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Objects/unicodeobject.c	2018-03-28 11:19:31.000000000 +0200
@@ -3439,8 +3439,9 @@ locale_error_handler(const char *errors,
     }
 }
 
-PyObject *
-PyUnicode_EncodeLocale(PyObject *unicode, const char *errors)
+static PyObject *
+unicode_encode_locale(PyObject *unicode, const char *errors,
+                      int current_locale)
 {
     Py_ssize_t wlen, wlen2;
     wchar_t *wstr;
@@ -3469,7 +3470,7 @@ PyUnicode_EncodeLocale(PyObject *unicode
         /* "surrogateescape" error handler */
         char *str;
 
-        str = Py_EncodeLocale(wstr, &error_pos);
+        str = _Py_EncodeLocaleEx(wstr, &error_pos, current_locale);
         if (str == NULL) {
             if (error_pos == (size_t)-1) {
                 PyErr_NoMemory();
@@ -3550,6 +3551,12 @@ encode_error:
 }
 
 PyObject *
+PyUnicode_EncodeLocale(PyObject *unicode, const char *errors)
+{
+    return unicode_encode_locale(unicode, errors, 1);
+}
+
+PyObject *
 PyUnicode_EncodeFSDefault(PyObject *unicode)
 {
 #if defined(__APPLE__)
@@ -3571,7 +3578,8 @@ PyUnicode_EncodeFSDefault(PyObject *unic
                                          Py_FileSystemDefaultEncodeErrors);
     }
     else {
-        return PyUnicode_EncodeLocale(unicode, Py_FileSystemDefaultEncodeErrors);
+        return unicode_encode_locale(unicode,
+                                     Py_FileSystemDefaultEncodeErrors, 0);
     }
 #endif
 }
@@ -3741,9 +3749,9 @@ mbstowcs_errorpos(const char *str, size_
     return 0;
 }
 
-PyObject*
-PyUnicode_DecodeLocaleAndSize(const char *str, Py_ssize_t len,
-                              const char *errors)
+static PyObject*
+unicode_decode_locale(const char *str, Py_ssize_t len,
+                      const char *errors, int current_locale)
 {
     wchar_t smallbuf[256];
     size_t smallbuf_len = Py_ARRAY_LENGTH(smallbuf);
@@ -3766,7 +3774,7 @@ PyUnicode_DecodeLocaleAndSize(const char
 
     if (surrogateescape) {
         /* "surrogateescape" error handler */
-        wstr = Py_DecodeLocale(str, &wlen);
+        wstr = _Py_DecodeLocaleEx(str, &wlen, current_locale);
         if (wstr == NULL) {
             if (wlen == (size_t)-1)
                 PyErr_NoMemory();
@@ -3845,10 +3853,17 @@ decode_error:
 }
 
 PyObject*
+PyUnicode_DecodeLocaleAndSize(const char *str, Py_ssize_t size,
+                              const char *errors)
+{
+    return unicode_decode_locale(str, size, errors, 1);
+}
+
+PyObject*
 PyUnicode_DecodeLocale(const char *str, const char *errors)
 {
     Py_ssize_t size = (Py_ssize_t)strlen(str);
-    return PyUnicode_DecodeLocaleAndSize(str, size, errors);
+    return unicode_decode_locale(str, size, errors, 1);
 }
 
 
@@ -3880,7 +3895,8 @@ PyUnicode_DecodeFSDefaultAndSize(const c
                                 Py_FileSystemDefaultEncodeErrors);
     }
     else {
-        return PyUnicode_DecodeLocaleAndSize(s, size, Py_FileSystemDefaultEncodeErrors);
+        return unicode_decode_locale(s, size,
+                                     Py_FileSystemDefaultEncodeErrors, 0);
     }
 #endif
 }
@@ -4413,7 +4429,10 @@ unicode_decode_call_errorhandler_writer(
     Py_ssize_t insize;
     Py_ssize_t newpos;
     Py_ssize_t replen;
+    Py_ssize_t remain;
     PyObject *inputobj = NULL;
+    int need_to_grow = 0;
+    const char *new_inptr;
 
     if (*errorHandler == NULL) {
         *errorHandler = PyCodec_LookupError(errors);
@@ -4447,6 +4466,7 @@ unicode_decode_call_errorhandler_writer(
     if (!PyBytes_Check(inputobj)) {
         PyErr_Format(PyExc_TypeError, "exception attribute object must be bytes");
     }
+    remain = *inend - *input - *endinpos;
     *input = PyBytes_AS_STRING(inputobj);
     insize = PyBytes_GET_SIZE(inputobj);
     *inend = *input + insize;
@@ -4466,8 +4486,21 @@ unicode_decode_call_errorhandler_writer(
     replen = PyUnicode_GET_LENGTH(repunicode);
     if (replen > 1) {
         writer->min_length += replen - 1;
+        need_to_grow = 1;
+    }
+    new_inptr = *input + newpos;
+    if (*inend - new_inptr > remain) {
+        /* We don't know the decoding algorithm here so we make the worst
+           assumption that one byte decodes to one unicode character.
+           If unfortunately one byte could decode to more unicode characters,
+           the decoder may write out-of-bound then.  Is it possible for the
+           algorithms using this function? */
+        writer->min_length += *inend - new_inptr - remain;
+        need_to_grow = 1;
+    }
+    if (need_to_grow) {
         writer->overallocate = 1;
-        if (_PyUnicodeWriter_Prepare(writer, writer->min_length,
+        if (_PyUnicodeWriter_Prepare(writer, writer->min_length - writer->pos,
                             PyUnicode_MAX_CHAR_VALUE(repunicode)) == -1)
             goto onError;
     }
@@ -4475,7 +4508,7 @@ unicode_decode_call_errorhandler_writer(
         goto onError;
 
     *endinpos = newpos;
-    *inptr = *input + newpos;
+    *inptr = new_inptr;
 
     /* we made it! */
     Py_XDECREF(restuple);
@@ -5647,7 +5680,8 @@ PyUnicode_DecodeUTF16Stateful(const char
 #endif
 
     /* Note: size will always be longer than the resulting Unicode
-       character count */
+       character count normally.  Error handler will take care of
+       resizing when needed. */
     _PyUnicodeWriter_Init(&writer);
     writer.min_length = (e - q + 1) / 2;
     if (_PyUnicodeWriter_Prepare(&writer, writer.min_length, 127) == -1)
@@ -6142,9 +6176,7 @@ _PyUnicode_DecodeUnicodeEscape(const cha
                 &writer)) {
             goto onError;
         }
-        if (_PyUnicodeWriter_Prepare(&writer, writer.min_length, 127) < 0) {
-            goto onError;
-        }
+        assert(end - s <= writer.size - writer.pos);
 
 #undef WRITE_ASCII_CHAR
 #undef WRITE_CHAR
@@ -6174,7 +6206,7 @@ PyUnicode_DecodeUnicodeEscape(const char
     if (first_invalid_escape != NULL) {
         if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                              "invalid escape sequence '\\%c'",
-                             *first_invalid_escape) < 0) {
+                             (unsigned char)*first_invalid_escape) < 0) {
             Py_DECREF(result);
             return NULL;
         }
@@ -6421,9 +6453,7 @@ PyUnicode_DecodeRawUnicodeEscape(const c
                 &writer)) {
             goto onError;
         }
-        if (_PyUnicodeWriter_Prepare(&writer, writer.min_length, 127) < 0) {
-            goto onError;
-        }
+        assert(end - s <= writer.size - writer.pos);
 
 #undef WRITE_CHAR
     }
@@ -11201,7 +11231,7 @@ _PyUnicode_EqualToASCIIId(PyObject *left
     if (PyUnicode_CHECK_INTERNED(left))
         return 0;
 
-    assert(_PyUnicode_HASH(right_uni) != 1);
+    assert(_PyUnicode_HASH(right_uni) != -1);
     hash = _PyUnicode_HASH(left);
     if (hash != -1 && hash != _PyUnicode_HASH(right_uni))
         return 0;
diff -urpN Python-3.6.3/PC/_findvs.cpp Python-3.6.5/PC/_findvs.cpp
--- Python-3.6.3/PC/_findvs.cpp	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PC/_findvs.cpp	2018-03-28 11:19:31.000000000 +0200
@@ -12,10 +12,6 @@
 #include <Windows.h>
 #include <Strsafe.h>
 #include "external\include\Setup.Configuration.h"
-#pragma comment(lib, "ole32.lib")
-#pragma comment(lib, "oleaut32.lib")
-#pragma comment(lib, "version.lib")
-#pragma comment(lib, "Microsoft.VisualStudio.Setup.Configuration.Native.lib")
 
 #include <Python.h>
 
@@ -236,7 +232,7 @@ static int exec_findvs(PyObject *module)
     return 0; // success
 }
 
-PyDoc_STRVAR(findvs_doc, "The _findvs helper module");
+PyDoc_STRVAR(findvs_doc, "The _distutils_findvs helper module");
 
 static PyModuleDef_Slot findvs_slots[] = {
     { Py_mod_exec, exec_findvs },
@@ -245,7 +241,7 @@ static PyModuleDef_Slot findvs_slots[] =
 
 static PyModuleDef findvs_def = {
     PyModuleDef_HEAD_INIT,
-    "_findvs",
+    "_distutils_findvs",
     findvs_doc,
     0,              // m_size
     NULL,           // m_methods
@@ -256,8 +252,8 @@ static PyModuleDef findvs_def = {
 };
 
 extern "C" {
-    PyMODINIT_FUNC PyInit__findvs(void)
+    PyMODINIT_FUNC PyInit__distutils_findvs(void)
     {
         return PyModuleDef_Init(&findvs_def);
     }
-}
\ No newline at end of file
+}
diff -urpN Python-3.6.3/PC/_msi.c Python-3.6.5/PC/_msi.c
--- Python-3.6.3/PC/_msi.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PC/_msi.c	2018-03-28 11:19:31.000000000 +0200
@@ -284,6 +284,7 @@ msiobj_dealloc(msiobj* msidb)
 {
     MsiCloseHandle(msidb->h);
     msidb->h = 0;
+    PyObject_Del(msidb);
 }
 
 static PyObject*
@@ -324,6 +325,12 @@ msierror(int status)
         case ERROR_INVALID_PARAMETER:
             PyErr_SetString(MSIError, "invalid parameter");
             return NULL;
+        case ERROR_OPEN_FAILED:
+            PyErr_SetString(MSIError, "open failed");
+            return NULL;
+        case ERROR_CREATE_FAILED:
+            PyErr_SetString(MSIError, "create failed");
+            return NULL;
         default:
             PyErr_Format(MSIError, "unknown error %x", status);
             return NULL;
@@ -571,6 +578,8 @@ summary_getproperty(msiobj* si, PyObject
             if (sval != sbuf)
                 free(sval);
             return result;
+        case VT_EMPTY:
+            Py_RETURN_NONE;
     }
     PyErr_Format(PyExc_NotImplementedError, "result of type %d", type);
     return NULL;
@@ -728,8 +737,12 @@ view_fetch(msiobj *view, PyObject*args)
     int status;
     MSIHANDLE result;
 
-    if ((status = MsiViewFetch(view->h, &result)) != ERROR_SUCCESS)
+    status = MsiViewFetch(view->h, &result);
+    if (status == ERROR_NO_MORE_ITEMS) {
+        Py_RETURN_NONE;
+    } else if (status != ERROR_SUCCESS) {
         return msierror(status);
+    }
 
     return record_new(result);
 }
diff -urpN Python-3.6.3/PC/_testconsole.c Python-3.6.5/PC/_testconsole.c
--- Python-3.6.3/PC/_testconsole.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PC/_testconsole.c	2018-03-28 11:19:31.000000000 +0200
@@ -46,7 +46,7 @@ _testconsole_write_input_impl(PyObject *
 /*[clinic end generated code: output=48f9563db34aedb3 input=4c774f2d05770bc6]*/
 {
     INPUT_RECORD *rec = NULL;
-    
+
     if (!PyWindowsConsoleIO_Check(file)) {
         PyErr_SetString(PyExc_TypeError, "expected raw console object");
         return NULL;
@@ -59,7 +59,7 @@ _testconsole_write_input_impl(PyObject *
     if (!rec)
         goto error;
     memset(rec, 0, sizeof(INPUT_RECORD) * size);
-    
+
     INPUT_RECORD *prec = rec;
     for (DWORD i = 0; i < size; ++i, ++p, ++prec) {
         prec->EventType = KEY_EVENT;
@@ -80,7 +80,7 @@ _testconsole_write_input_impl(PyObject *
     }
 
     PyMem_Free((void*)rec);
-    
+
     Py_RETURN_NONE;
 error:
     if (rec)
diff -urpN Python-3.6.3/PC/config.c Python-3.6.5/PC/config.c
--- Python-3.6.3/PC/config.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PC/config.c	2018-03-28 11:19:31.000000000 +0200
@@ -69,7 +69,6 @@ extern PyObject* _PyWarnings_Init(void);
 extern PyObject* PyInit__string(void);
 extern PyObject* PyInit__stat(void);
 extern PyObject* PyInit__opcode(void);
-extern PyObject* PyInit__findvs(void);
 
 /* tools/freeze/makeconfig.py marker for additional "extern" */
 /* -- ADDMODULE MARKER 1 -- */
@@ -166,8 +165,6 @@ struct _inittab _PyImport_Inittab[] = {
     {"_stat", PyInit__stat},
     {"_opcode", PyInit__opcode},
 
-    {"_findvs", PyInit__findvs},
-
     /* Sentinel */
     {0, 0}
 };
diff -urpN Python-3.6.3/PC/getpathp.c Python-3.6.5/PC/getpathp.c
--- Python-3.6.3/PC/getpathp.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PC/getpathp.c	2018-03-28 11:19:31.000000000 +0200
@@ -241,6 +241,36 @@ join(wchar_t *buffer, const wchar_t *stu
     }
 }
 
+static int _PathCchCanonicalizeEx_Initialized = 0;
+typedef HRESULT(__stdcall *PPathCchCanonicalizeEx) (PWSTR pszPathOut, size_t cchPathOut,
+    PCWSTR pszPathIn, unsigned long dwFlags);
+static PPathCchCanonicalizeEx _PathCchCanonicalizeEx;
+
+static void canonicalize(wchar_t *buffer, const wchar_t *path)
+{
+    if (_PathCchCanonicalizeEx_Initialized == 0) {
+        HMODULE pathapi = LoadLibraryW(L"api-ms-win-core-path-l1-1-0.dll");
+        if (pathapi) {
+            _PathCchCanonicalizeEx = (PPathCchCanonicalizeEx)GetProcAddress(pathapi, "PathCchCanonicalizeEx");
+        }
+        else {
+            _PathCchCanonicalizeEx = NULL;
+        }
+        _PathCchCanonicalizeEx_Initialized = 1;
+    }
+
+    if (_PathCchCanonicalizeEx) {
+        if (FAILED(_PathCchCanonicalizeEx(buffer, MAXPATHLEN + 1, path, 0))) {
+            Py_FatalError("buffer overflow in getpathp.c's canonicalize()");
+        }
+    }
+    else {
+        if (!PathCanonicalizeW(buffer, path)) {
+            Py_FatalError("buffer overflow in getpathp.c's canonicalize()");
+        }
+    }
+}
+
 /* gotlandmark only called by search_for_prefix, which ensures
    'prefix' is null terminated in bounds.  join() ensures
    'landmark' can not overflow prefix if too long.
@@ -431,6 +461,7 @@ static void
 get_progpath(void)
 {
     extern wchar_t *Py_GetProgramName(void);
+    wchar_t modulepath[MAXPATHLEN];
     wchar_t *path = _wgetenv(L"PATH");
     wchar_t *prog = Py_GetProgramName();
 
@@ -443,8 +474,10 @@ get_progpath(void)
 #else
     dllpath[0] = 0;
 #endif
-    if (GetModuleFileNameW(NULL, progpath, MAXPATHLEN))
+    if (GetModuleFileNameW(NULL, modulepath, MAXPATHLEN)) {
+        canonicalize(progpath, modulepath);
         return;
+    }
     if (prog == NULL || *prog == '\0')
         prog = L"python";
 
diff -urpN Python-3.6.3/PC/msvcrtmodule.c Python-3.6.5/PC/msvcrtmodule.c
--- Python-3.6.3/PC/msvcrtmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PC/msvcrtmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -353,7 +353,7 @@ msvcrt_ungetch_impl(PyObject *module, ch
 /*[clinic end generated code: output=c6942a0efa119000 input=22f07ee9001bbf0f]*/
 {
     int res;
-    
+
     _Py_BEGIN_SUPPRESS_IPH
     res = _ungetch(char_value);
     _Py_END_SUPPRESS_IPH
diff -urpN Python-3.6.3/PC/python3.def Python-3.6.5/PC/python3.def
--- Python-3.6.3/PC/python3.def	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PC/python3.def	2018-03-28 11:19:31.000000000 +0200
@@ -224,7 +224,6 @@ EXPORTS
   PyExc_PermissionError=python36.PyExc_PermissionError DATA
   PyExc_ProcessLookupError=python36.PyExc_ProcessLookupError DATA
   PyExc_RecursionError=python36.PyExc_RecursionError DATA
-  PyExc_RecursionErrorInst=python36.PyExc_RecursionErrorInst DATA
   PyExc_ReferenceError=python36.PyExc_ReferenceError DATA
   PyExc_ResourceWarning=python36.PyExc_ResourceWarning DATA
   PyExc_RuntimeError=python36.PyExc_RuntimeError DATA
diff -urpN Python-3.6.3/PCbuild/_distutils_findvs.vcxproj Python-3.6.5/PCbuild/_distutils_findvs.vcxproj
--- Python-3.6.3/PCbuild/_distutils_findvs.vcxproj	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/PCbuild/_distutils_findvs.vcxproj	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,83 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Debug|Win32">
+      <Configuration>Debug</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|x64">
+      <Configuration>Debug</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="PGInstrument|Win32">
+      <Configuration>PGInstrument</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="PGInstrument|x64">
+      <Configuration>PGInstrument</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="PGUpdate|Win32">
+      <Configuration>PGUpdate</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="PGUpdate|x64">
+      <Configuration>PGUpdate</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|Win32">
+      <Configuration>Release</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{41ADEDF9-11D8-474E-B4D7-BB82332C878E}</ProjectGuid>
+    <RootNamespace>_distutils_findvs</RootNamespace>
+    <Keyword>Win32Proj</Keyword>
+  </PropertyGroup>
+  <Import Project="python.props" />
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup Label="Configuration">
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <CharacterSet>NotSet</CharacterSet>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <PropertyGroup>
+    <TargetExt>.pyd</TargetExt>
+  </PropertyGroup>
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+    <Import Project="pyproject.props" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <_ProjectFileVersion>10.0.30319.1</_ProjectFileVersion>
+  </PropertyGroup>
+  <ItemDefinitionGroup>
+    <Link>
+      <AdditionalDependencies>version.lib;ole32.lib;oleaut32.lib;Microsoft.VisualStudio.Setup.Configuration.Native.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories);$(PySourcePath)PC\external\$(PlatformToolset)\$(ArchName)</AdditionalLibraryDirectories>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\PC\_findvs.cpp" />
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\PC\python_nt.rc" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="pythoncore.vcxproj">
+      <Project>{cf7ac3d1-e2df-41d2-bea6-1e2556cdea26}</Project>
+      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
+    </ProjectReference>
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
diff -urpN Python-3.6.3/PCbuild/_distutils_findvs.vcxproj.filters Python-3.6.5/PCbuild/_distutils_findvs.vcxproj.filters
--- Python-3.6.3/PCbuild/_distutils_findvs.vcxproj.filters	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/PCbuild/_distutils_findvs.vcxproj.filters	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,16 @@
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup>
+    <ResourceCompile Include="..\PC\python_nt.rc" />
+  </ItemGroup>
+  <ItemGroup>
+    <Filter Include="Source Files">
+      <UniqueIdentifier>{c56a5dd3-7838-48e9-a781-855d8be7370f}</UniqueIdentifier>
+    </Filter>
+  </ItemGroup>
+  <ItemGroup>
+    <ClCompile Include="..\PC\_findvs.cpp">
+      <Filter>Source Files</Filter>
+    </ClCompile>
+  </ItemGroup>
+</Project>
\ No newline at end of file
diff -urpN Python-3.6.3/PCbuild/clean.bat Python-3.6.5/PCbuild/clean.bat
--- Python-3.6.3/PCbuild/clean.bat	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PCbuild/clean.bat	2018-03-28 11:19:31.000000000 +0200
@@ -2,4 +2,4 @@
 rem A batch program to clean a particular configuration,
 rem just for convenience.
 
-call %~dp0build.bat -t Clean %*
+call "%~dp0build.bat" -t Clean %*
diff -urpN Python-3.6.3/PCbuild/find_python.bat Python-3.6.5/PCbuild/find_python.bat
--- Python-3.6.3/PCbuild/find_python.bat	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PCbuild/find_python.bat	2018-03-28 11:19:31.000000000 +0200
@@ -31,10 +31,10 @@
 @if exist "%_Py_EXTERNALS_DIR%\pythonx86\tools\python.exe" (set PYTHON="%_Py_EXTERNALS_DIR%\pythonx86\tools\python.exe") & (set _Py_Python_Source=found in externals directory) & goto :found
 
 @rem If HOST_PYTHON is recent enough, use that
-@if NOT "%HOST_PYTHON%"=="" @%HOST_PYTHON% -c "import sys; assert sys.version_info[:2] >= (3, 6)" >nul 2>nul && (set PYTHON="%HOST_PYTHON%") && (set _Py_Python_Source=found as HOST_PYTHON) && goto :found
+@if NOT "%HOST_PYTHON%"=="" @%HOST_PYTHON% -Ec "import sys; assert sys.version_info[:2] >= (3, 6)" >nul 2>nul && (set PYTHON="%HOST_PYTHON%") && (set _Py_Python_Source=found as HOST_PYTHON) && goto :found
 
 @rem If py.exe finds a recent enough version, use that one
-@py -3.6 -V >nul 2>&1 && (set PYTHON=py -3.6) && (set _Py_Python_Source=found with py.exe) && goto :found
+@py -3.6 -EV >nul 2>&1 && (set PYTHON=py -3.6) && (set _Py_Python_Source=found with py.exe) && goto :found
 
 @if NOT exist "%_Py_EXTERNALS_DIR%" mkdir "%_Py_EXTERNALS_DIR%"
 @set _Py_NUGET=%NUGET%
@@ -50,7 +50,7 @@
     @rem If it fails, retry with any available copy of Python
     @powershell.exe -Command Invoke-WebRequest %_Py_NUGET_URL% -OutFile '%_Py_NUGET%'
     @if errorlevel 1 (
-        @%_Py_HOST_PYTHON% "%~dp0\urlretrieve.py" "%_Py_NUGET_URL%" "%_Py_NUGET%"
+        @%_Py_HOST_PYTHON% -E "%~dp0\urlretrieve.py" "%_Py_NUGET_URL%" "%_Py_NUGET%"
     )
 )
 @echo Installing Python via nuget...
diff -urpN Python-3.6.3/PCbuild/get_externals.bat Python-3.6.5/PCbuild/get_externals.bat
--- Python-3.6.3/PCbuild/get_externals.bat	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PCbuild/get_externals.bat	2018-03-28 11:19:31.000000000 +0200
@@ -31,7 +31,7 @@ if "%DO_FETCH%"=="false" goto end
 
 if "%ORG%"=="" (set ORG=python)
 
-call "%PCBUILD%find_python.bat" "%PYTHON%"
+call "%PCBUILD%\find_python.bat" "%PYTHON%"
 
 if "%PYTHON%"=="" (
     where /Q git || echo Python 3.6 could not be found or installed, and git.exe is not on your PATH && exit /B 1
@@ -42,7 +42,7 @@ echo.Fetching external libraries...
 set libraries=
 set libraries=%libraries%                                    bzip2-1.0.6
 if NOT "%IncludeSSL%"=="false" set libraries=%libraries%     openssl-1.0.2k
-set libraries=%libraries%                                    sqlite-3.14.2.0
+set libraries=%libraries%                                    sqlite-3.21.0.0
 if NOT "%IncludeTkinter%"=="false" set libraries=%libraries% tcl-core-8.6.6.0
 if NOT "%IncludeTkinter%"=="false" set libraries=%libraries% tk-8.6.6.0
 if NOT "%IncludeTkinter%"=="false" set libraries=%libraries% tix-8.4.3.6
@@ -56,7 +56,7 @@ for %%e in (%libraries%) do (
         git clone --depth 1 https://github.com/%ORG%/cpython-source-deps --branch %%e "%EXTERNALS_DIR%\%%e"
     ) else (
         echo.Fetching %%e...
-        %PYTHON% "%PCBUILD%get_external.py" -O %ORG% %%e
+        %PYTHON% -E "%PCBUILD%\get_external.py" -O %ORG% -e "%EXTERNALS_DIR%" %%e
     )
 )
 
@@ -74,7 +74,7 @@ for %%b in (%binaries%) do (
         git clone --depth 1 https://github.com/%ORG%/cpython-bin-deps --branch %%b "%EXTERNALS_DIR%\%%b"
     ) else (
         echo.Fetching %%b...
-        %PYTHON% "%PCBUILD%get_external.py" -b -O %ORG% %%b
+        %PYTHON% -E "%PCBUILD%\get_external.py" -b -O %ORG% -e "%EXTERNALS_DIR%" %%b
     )
 )
 
diff -urpN Python-3.6.3/PCbuild/pcbuild.proj Python-3.6.5/PCbuild/pcbuild.proj
--- Python-3.6.3/PCbuild/pcbuild.proj	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PCbuild/pcbuild.proj	2018-03-28 11:19:31.000000000 +0200
@@ -49,7 +49,7 @@
     <!-- pyshellext.dll -->
     <Projects Include="pyshellext.vcxproj" />
     <!-- Extension modules -->
-    <ExtensionModules Include="_asyncio;_ctypes;_decimal;_elementtree;_msi;_multiprocessing;_overlapped;pyexpat;select;unicodedata;winsound" />
+    <ExtensionModules Include="_asyncio;_ctypes;_decimal;_distutils_findvs;_elementtree;_msi;_multiprocessing;_overlapped;pyexpat;select;unicodedata;winsound" />
     <!-- Extension modules that require external sources -->
     <ExternalModules Include="_bz2;_lzma;_sqlite3" />
     <!-- _ssl will build _socket as well, which may cause conflicts in parallel builds -->
diff -urpN Python-3.6.3/PCbuild/pcbuild.sln Python-3.6.5/PCbuild/pcbuild.sln
--- Python-3.6.3/PCbuild/pcbuild.sln	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PCbuild/pcbuild.sln	2018-03-28 11:19:31.000000000 +0200
@@ -98,6 +98,8 @@ Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C9
 EndProject
 Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "liblzma", "liblzma.vcxproj", "{12728250-16EC-4DC6-94D7-E21DD88947F8}"
 EndProject
+Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "_distutils_findvs", "_distutils_findvs.vcxproj", "{41ADEDF9-11D8-474E-B4D7-BB82332C878E}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Win32 = Debug|Win32
@@ -762,8 +764,27 @@ Global
 		{12728250-16EC-4DC6-94D7-E21DD88947F8}.Release|Win32.Build.0 = Release|Win32
 		{12728250-16EC-4DC6-94D7-E21DD88947F8}.Release|x64.ActiveCfg = Release|x64
 		{12728250-16EC-4DC6-94D7-E21DD88947F8}.Release|x64.Build.0 = Release|x64
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.Debug|Win32.ActiveCfg = Debug|Win32
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.Debug|Win32.Build.0 = Debug|Win32
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.Debug|x64.ActiveCfg = Debug|x64
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.Debug|x64.Build.0 = Debug|x64
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.PGInstrument|Win32.ActiveCfg = PGInstrument|Win32
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.PGInstrument|Win32.Build.0 = PGInstrument|Win32
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.PGInstrument|x64.ActiveCfg = PGInstrument|x64
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.PGInstrument|x64.Build.0 = PGInstrument|x64
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.PGUpdate|Win32.ActiveCfg = PGUpdate|Win32
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.PGUpdate|Win32.Build.0 = PGUpdate|Win32
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.PGUpdate|x64.ActiveCfg = PGUpdate|x64
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.PGUpdate|x64.Build.0 = PGUpdate|x64
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.Release|Win32.ActiveCfg = Release|Win32
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.Release|Win32.Build.0 = Release|Win32
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.Release|x64.ActiveCfg = Release|x64
+		{41ADEDF9-11D8-474E-B4D7-BB82332C878E}.Release|x64.Build.0 = Release|x64
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
 	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+		SolutionGuid = {E8690CFE-326A-430E-82D4-B4CE667CC1BA}
+	EndGlobalSection
 EndGlobal
diff -urpN Python-3.6.3/PCbuild/pyproject.props Python-3.6.5/PCbuild/pyproject.props
--- Python-3.6.3/PCbuild/pyproject.props	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PCbuild/pyproject.props	2018-03-28 11:19:31.000000000 +0200
@@ -6,7 +6,8 @@
     <OutDir>$(BuildPath)</OutDir>
     <OutDir Condition="!HasTrailingSlash($(OutDir))">$(OutDir)\</OutDir>
     <Py_IntDir Condition="'$(Py_IntDir)' == ''">$(MSBuildThisFileDirectory)obj\</Py_IntDir>
-    <IntDir>$(Py_IntDir)\$(ArchName)_$(Configuration)\$(ProjectName)\</IntDir>
+    <IntDir>$(Py_IntDir)\$(MajorVersionNumber)$(MinorVersionNumber)$(ArchName)_$(Configuration)\$(ProjectName)\</IntDir>
+    <IntDir>$(IntDir.Replace(`\\`, `\`))</IntDir>
     <TargetName Condition="'$(TargetName)' == ''">$(ProjectName)</TargetName>
     <TargetName>$(TargetName)$(PyDebugExt)</TargetName>
     <GenerateManifest>false</GenerateManifest>
diff -urpN Python-3.6.3/PCbuild/python.props Python-3.6.5/PCbuild/python.props
--- Python-3.6.3/PCbuild/python.props	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PCbuild/python.props	2018-03-28 11:19:31.000000000 +0200
@@ -43,8 +43,10 @@
     <BuildPath Condition="$(Configuration) == 'PGInstrument'">$(BuildPath)instrumented\</BuildPath>
     
     <!-- Directories of external projects. tcltk is handled in tcltk.props -->
-    <ExternalsDir>$([System.IO.Path]::GetFullPath(`$(PySourcePath)externals\`))</ExternalsDir>
-    <sqlite3Dir>$(ExternalsDir)sqlite-3.14.2.0\</sqlite3Dir>
+    <ExternalsDir>$(EXTERNALS_DIR)</ExternalsDir>
+    <ExternalsDir Condition="$(ExternalsDir) == ''">$([System.IO.Path]::GetFullPath(`$(PySourcePath)externals`))</ExternalsDir>
+    <ExternalsDir Condition="!HasTrailingSlash($(ExternalsDir))">$(ExternalsDir)\</ExternalsDir>
+    <sqlite3Dir>$(ExternalsDir)sqlite-3.21.0.0\</sqlite3Dir>
     <bz2Dir>$(ExternalsDir)bzip2-1.0.6\</bz2Dir>
     <lzmaDir>$(ExternalsDir)xz-5.2.2\</lzmaDir>
     <opensslDir>$(ExternalsDir)openssl-1.0.2k\</opensslDir>
@@ -72,14 +74,12 @@
     possible version). Since we limit WINVER to Windows 7 anyway, it doesn't really
     matter which WinSDK version we use.
     -->
-    <DefaultWindowsSDKVersion Condition="$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0@ProductVersion) == '10.0.15063'">10.0.15063.0</DefaultWindowsSDKVersion>
-    <DefaultWindowsSDKVersion Condition="$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows\v10.0@ProductVersion) == '10.0.15063'">10.0.15063.0</DefaultWindowsSDKVersion>
-    <DefaultWindowsSDKVersion Condition="$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0@ProductVersion) == '10.0.14393'">10.0.14393.0</DefaultWindowsSDKVersion>
-    <DefaultWindowsSDKVersion Condition="$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows\v10.0@ProductVersion) == '10.0.14393'">10.0.14393.0</DefaultWindowsSDKVersion>
-    <DefaultWindowsSDKVersion Condition="$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0@ProductVersion) == '10.0.10586'">10.0.10586.0</DefaultWindowsSDKVersion>
-    <DefaultWindowsSDKVersion Condition="$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows\v10.0@ProductVersion) == '10.0.10586'">10.0.10586.0</DefaultWindowsSDKVersion>
-    <DefaultWindowsSDKVersion Condition="$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0@ProductVersion) == '10.0.10240'">10.0.10240.0</DefaultWindowsSDKVersion>
-    <DefaultWindowsSDKVersion Condition="$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows\v10.0@ProductVersion) == '10.0.10240'">10.0.10240.0</DefaultWindowsSDKVersion>
+    <_RegistryVersion>$(Registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0@ProductVersion)</_RegistryVersion>
+    <_RegistryVersion Condition="$(_RegistryVersion) == ''">$(Registry:HKEY_LOCAL_MACHINE\WOW6432Node\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v10.0@ProductVersion)</_RegistryVersion>
+    <DefaultWindowsSDKVersion>10.0.15063.0</DefaultWindowsSDKVersion>
+    <DefaultWindowsSDKVersion Condition="$(_RegistryVersion) == '10.0.14393'">10.0.14393.0</DefaultWindowsSDKVersion>
+    <DefaultWindowsSDKVersion Condition="$(_RegistryVersion) == '10.0.10586'">10.0.10586.0</DefaultWindowsSDKVersion>
+    <DefaultWindowsSDKVersion Condition="$(_RegistryVersion) == '10.0.10240'">10.0.10240.0</DefaultWindowsSDKVersion>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(OverrideVersion)' == ''">
diff -urpN Python-3.6.3/PCbuild/pythoncore.vcxproj Python-3.6.5/PCbuild/pythoncore.vcxproj
--- Python-3.6.3/PCbuild/pythoncore.vcxproj	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PCbuild/pythoncore.vcxproj	2018-03-28 11:19:31.000000000 +0200
@@ -71,7 +71,6 @@
     </ClCompile>
     <Link>
       <AdditionalDependencies>version.lib;shlwapi.lib;ws2_32.lib;%(AdditionalDependencies)</AdditionalDependencies>
-      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories);$(PySourcePath)PC\external\$(PlatformToolset)\$(ArchName)</AdditionalLibraryDirectories>
       <BaseAddress>0x1e000000</BaseAddress>
     </Link>
   </ItemDefinitionGroup>
@@ -350,7 +349,6 @@
     <ClCompile Include="..\PC\config.c" />
     <ClCompile Include="..\PC\getpathp.c" />
     <ClCompile Include="..\PC\msvcrtmodule.c" />
-    <ClCompile Include="..\PC\_findvs.cpp" />
     <ClCompile Include="..\Python\pyhash.c" />
     <ClCompile Include="..\Python\random.c" />
     <ClCompile Include="..\Python\_warnings.c" />
diff -urpN Python-3.6.3/PCbuild/readme.txt Python-3.6.5/PCbuild/readme.txt
--- Python-3.6.3/PCbuild/readme.txt	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/PCbuild/readme.txt	2018-03-28 11:19:31.000000000 +0200
@@ -32,13 +32,20 @@ Visual Studio Premium 2015
     Required for building Release configuration builds that make use of
     Profile Guided Optimization (PGO), on either platform.
 
-All you need to do to build is open the solution "pcbuild.sln" in Visual
-Studio, select the desired combination of configuration and platform,
+To build modules that depend on external libraries, you need to download
+(and, for some of them, build) those first. It's thus recommended to build
+from the command line once as specified below under "Getting External Sources"
+as that does this automatically.
+
+Then, to continue development, you can open the solution "pcbuild.sln" in
+Visual Studio, select the desired combination of configuration and platform,
 then build with "Build Solution".  You can also build from the command
 line using the "build.bat" script in this directory; see below for
 details.  The solution is configured to build the projects in the correct
 order.
 
+To build an installer package, refer to the README in the Tools/msi folder.
+
 The solution currently supports two platforms.  The Win32 platform is
 used to build standard x86-compatible 32-bit binaries, output into the
 win32 sub-directory.  The x64 platform is used for building 64-bit AMD64
@@ -205,7 +212,7 @@ _ssl
     functionality to _ssl or _hashlib. They will not clean up their output
     with the normal Clean target; CleanAll should be used instead.
 _sqlite3
-    Wraps SQLite 3.14.2.0, which is itself built by sqlite3.vcxproj
+    Wraps SQLite 3.21.0.0, which is itself built by sqlite3.vcxproj
     Homepage:
         http://www.sqlite.org/
 _tkinter
diff -urpN Python-3.6.3/Parser/asdl_c.py Python-3.6.5/Parser/asdl_c.py
--- Python-3.6.3/Parser/asdl_c.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Parser/asdl_c.py	2018-03-28 11:19:31.000000000 +0200
@@ -1281,59 +1281,55 @@ def main(srcfile, dump_module=False):
         print(mod)
     if not asdl.check(mod):
         sys.exit(1)
-    if INC_DIR:
-        p = "%s/%s-ast.h" % (INC_DIR, mod.name)
-        f = open(p, "w")
-        f.write(auto_gen_msg)
-        f.write('#include "asdl.h"\n\n')
-        c = ChainOfVisitors(TypeDefVisitor(f),
-                            StructVisitor(f),
-                            PrototypeVisitor(f),
-                            )
-        c.visit(mod)
-        f.write("PyObject* PyAST_mod2obj(mod_ty t);\n")
-        f.write("mod_ty PyAST_obj2mod(PyObject* ast, PyArena* arena, int mode);\n")
-        f.write("int PyAST_Check(PyObject* obj);\n")
-        f.close()
+    if H_FILE:
+        with open(H_FILE, "w") as f:
+            f.write(auto_gen_msg)
+            f.write('#include "asdl.h"\n\n')
+            c = ChainOfVisitors(TypeDefVisitor(f),
+                                StructVisitor(f),
+                                PrototypeVisitor(f),
+                                )
+            c.visit(mod)
+            f.write("PyObject* PyAST_mod2obj(mod_ty t);\n")
+            f.write("mod_ty PyAST_obj2mod(PyObject* ast, PyArena* arena, int mode);\n")
+            f.write("int PyAST_Check(PyObject* obj);\n")
 
-    if SRC_DIR:
-        p = os.path.join(SRC_DIR, str(mod.name) + "-ast.c")
-        f = open(p, "w")
-        f.write(auto_gen_msg)
-        f.write('#include <stddef.h>\n')
-        f.write('\n')
-        f.write('#include "Python.h"\n')
-        f.write('#include "%s-ast.h"\n' % mod.name)
-        f.write('\n')
-        f.write("static PyTypeObject AST_type;\n")
-        v = ChainOfVisitors(
-            PyTypesDeclareVisitor(f),
-            PyTypesVisitor(f),
-            Obj2ModPrototypeVisitor(f),
-            FunctionVisitor(f),
-            ObjVisitor(f),
-            Obj2ModVisitor(f),
-            ASTModuleVisitor(f),
-            PartingShots(f),
-            )
-        v.visit(mod)
-        f.close()
+    if C_FILE:
+        with open(C_FILE, "w") as f:
+            f.write(auto_gen_msg)
+            f.write('#include <stddef.h>\n')
+            f.write('\n')
+            f.write('#include "Python.h"\n')
+            f.write('#include "%s-ast.h"\n' % mod.name)
+            f.write('\n')
+            f.write("static PyTypeObject AST_type;\n")
+            v = ChainOfVisitors(
+                PyTypesDeclareVisitor(f),
+                PyTypesVisitor(f),
+                Obj2ModPrototypeVisitor(f),
+                FunctionVisitor(f),
+                ObjVisitor(f),
+                Obj2ModVisitor(f),
+                ASTModuleVisitor(f),
+                PartingShots(f),
+                )
+            v.visit(mod)
 
 if __name__ == "__main__":
     import getopt
 
-    INC_DIR = ''
-    SRC_DIR = ''
+    H_FILE = ''
+    C_FILE = ''
     dump_module = False
     opts, args = getopt.getopt(sys.argv[1:], "dh:c:")
     for o, v in opts:
         if o == '-h':
-            INC_DIR = v
+            H_FILE = v
         if o == '-c':
-            SRC_DIR = v
+            C_FILE = v
         if o == '-d':
             dump_module = True
-    if INC_DIR and SRC_DIR:
+    if H_FILE and C_FILE:
         print('Must specify exactly one output file')
         sys.exit(1)
     elif len(args) != 1:
diff -urpN Python-3.6.3/Parser/tokenizer.c Python-3.6.5/Parser/tokenizer.c
--- Python-3.6.3/Parser/tokenizer.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Parser/tokenizer.c	2018-03-28 11:19:31.000000000 +0200
@@ -1563,6 +1563,9 @@ tok_get(struct tok_state *tok, char **p_
                 /* The current token is 'async'.
                    Look ahead one token.*/
 
+                int async_def_prev = tok->async_def;
+                tok->async_def = 2;
+
                 struct tok_state ahead_tok;
                 char *ahead_tok_start = NULL, *ahead_tok_end = NULL;
                 int ahead_tok_kind;
@@ -1581,6 +1584,9 @@ tok_get(struct tok_state *tok, char **p_
                     tok->async_def = 1;
                     return ASYNC;
                 }
+                else{
+                    tok->async_def = async_def_prev;
+                }
             }
         }
 
@@ -1844,6 +1850,10 @@ tok_get(struct tok_state *tok, char **p_
     /* Line continuation */
     if (c == '\\') {
         c = tok_nextc(tok);
+        if (tok->async_def == 2) {
+            tok->done = E_SYNTAX;
+            return ERRORTOKEN;
+        }
         if (c != '\n') {
             tok->done = E_LINECONT;
             tok->cur = tok->inp;
diff -urpN Python-3.6.3/Programs/_testembed.c Python-3.6.5/Programs/_testembed.c
--- Python-3.6.3/Programs/_testembed.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Programs/_testembed.c	2018-03-28 11:19:31.000000000 +0200
@@ -1,4 +1,5 @@
 #include <Python.h>
+#include "pythread.h"
 #include <stdio.h>
 
 /*********************************************************
@@ -33,7 +34,7 @@ static void print_subinterp(void)
     );
 }
 
-static void test_repeated_init_and_subinterpreters(void)
+static int test_repeated_init_and_subinterpreters(void)
 {
     PyThreadState *mainstate, *substate;
 #ifdef WITH_THREAD
@@ -70,6 +71,7 @@ static void test_repeated_init_and_subin
         PyEval_RestoreThread(mainstate);
         Py_Finalize();
     }
+    return 0;
 }
 
 /*****************************************************
@@ -103,7 +105,7 @@ static void check_stdio_details(const ch
     Py_Finalize();
 }
 
-static void test_forced_io_encoding(void)
+static int test_forced_io_encoding(void)
 {
     /* Check various combinations */
     printf("--- Use defaults ---\n");
@@ -122,19 +124,75 @@ static void test_forced_io_encoding(void
         printf("Unexpected success calling Py_SetStandardStreamEncoding");
     }
     Py_Finalize();
+    return 0;
 }
 
-/* Different embedding tests */
-int main(int argc, char *argv[])
+
+/*********************************************************
+ * Test parts of the C-API that work before initialization
+ *********************************************************/
+
+static int test_pre_initialization_api(void)
+{
+    /* Leading "./" ensures getpath.c can still find the standard library */
+    wchar_t *program = Py_DecodeLocale("./spam", NULL);
+    if (program == NULL) {
+        fprintf(stderr, "Fatal error: cannot decode program name\n");
+        return 1;
+    }
+    Py_SetProgramName(program);
+
+    Py_Initialize();
+    Py_Finalize();
+
+    PyMem_RawFree(program);
+    return 0;
+}
+
+
+/* *********************************************************
+ * List of test cases and the function that implements it.
+ *
+ * Names are compared case-sensitively with the first
+ * argument. If no match is found, or no first argument was
+ * provided, the names of all test cases are printed and
+ * the exit code will be -1.
+ *
+ * The int returned from test functions is used as the exit
+ * code, and test_capi treats all non-zero exit codes as a
+ * failed test.
+ *********************************************************/
+struct TestCase
 {
+    const char *name;
+    int (*func)(void);
+};
+
+static struct TestCase TestCases[] = {
+    { "forced_io_encoding", test_forced_io_encoding },
+    { "repeated_init_and_subinterpreters", test_repeated_init_and_subinterpreters },
+    { "pre_initialization_api", test_pre_initialization_api },
+    { NULL, NULL }
+};
 
-    /* TODO: Check the argument string to allow for more test cases */
+int main(int argc, char *argv[])
+{
     if (argc > 1) {
-        /* For now: assume "forced_io_encoding */
-        test_forced_io_encoding();
-    } else {
-        /* Run the original embedding test case by default */
-        test_repeated_init_and_subinterpreters();
+        for (struct TestCase *tc = TestCases; tc && tc->name; tc++) {
+            if (strcmp(argv[1], tc->name) == 0)
+                return (*tc->func)();
+        }
     }
-    return 0;
+
+    /* No match found, or no test name provided, so display usage */
+    printf("Python " PY_VERSION " _testembed executable for embedded interpreter tests\n"
+           "Normally executed via 'EmbeddingTests' in Lib/test/test_capi.py\n\n"
+           "Usage: %s TESTNAME\n\nAll available tests:\n", argv[0]);
+    for (struct TestCase *tc = TestCases; tc && tc->name; tc++) {
+        printf("  %s\n", tc->name);
+    }
+
+    /* Non-zero exit code will cause test_capi.py tests to fail.
+       This is intentional. */
+    return -1;
 }
diff -urpN Python-3.6.3/Python/_warnings.c Python-3.6.5/Python/_warnings.c
--- Python-3.6.3/Python/_warnings.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/_warnings.c	2018-03-28 11:19:31.000000000 +0200
@@ -694,13 +694,14 @@ setup_context(Py_ssize_t stack_level, Py
 
     /* Setup module. */
     *module = PyDict_GetItemString(globals, "__name__");
-    if (*module == NULL) {
+    if (*module == Py_None || (*module != NULL && PyUnicode_Check(*module))) {
+        Py_INCREF(*module);
+    }
+    else {
         *module = PyUnicode_FromString("<string>");
         if (*module == NULL)
             goto handle_error;
     }
-    else
-        Py_INCREF(*module);
 
     /* Setup filename. */
     *filename = PyDict_GetItemString(globals, "__file__");
@@ -864,7 +865,6 @@ warnings_warn_explicit(PyObject *self, P
 
     if (module_globals) {
         _Py_IDENTIFIER(get_source);
-        _Py_IDENTIFIER(splitlines);
         PyObject *tmp;
         PyObject *loader;
         PyObject *module_name;
@@ -875,8 +875,6 @@ warnings_warn_explicit(PyObject *self, P
 
         if ((tmp = _PyUnicode_FromId(&PyId_get_source)) == NULL)
             return NULL;
-        if ((tmp = _PyUnicode_FromId(&PyId_splitlines)) == NULL)
-            return NULL;
 
         /* Check/get the requisite pieces needed for the loader. */
         loader = PyDict_GetItemString(module_globals, "__loader__");
@@ -899,9 +897,7 @@ warnings_warn_explicit(PyObject *self, P
         }
 
         /* Split the source into lines. */
-        source_list = PyObject_CallMethodObjArgs(source,
-                                                 PyId_splitlines.object,
-                                                 NULL);
+        source_list = PyUnicode_Splitlines(source, 0);
         Py_DECREF(source);
         if (!source_list)
             return NULL;
diff -urpN Python-3.6.3/Python/ast.c Python-3.6.5/Python/ast.c
--- Python-3.6.3/Python/ast.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/ast.c	2018-03-28 11:19:31.000000000 +0200
@@ -589,7 +589,6 @@ struct compiling {
     PyArena *c_arena; /* Arena for allocating memory. */
     PyObject *c_filename; /* filename */
     PyObject *c_normalize; /* Normalization function from unicodedata. */
-    PyObject *c_normalize_args; /* Normalization argument tuple. */
 };
 
 static asdl_seq *seq_for_testlist(struct compiling *, const node *);
@@ -624,12 +623,6 @@ init_normalization(struct compiling *c)
     Py_DECREF(m);
     if (!c->c_normalize)
         return 0;
-    c->c_normalize_args = Py_BuildValue("(sN)", "NFKC", Py_None);
-    if (!c->c_normalize_args) {
-        Py_CLEAR(c->c_normalize);
-        return 0;
-    }
-    PyTuple_SET_ITEM(c->c_normalize_args, 1, NULL);
     return 1;
 }
 
@@ -645,15 +638,29 @@ new_identifier(const char *n, struct com
        identifier; if so, normalize to NFKC. */
     if (!PyUnicode_IS_ASCII(id)) {
         PyObject *id2;
+        _Py_IDENTIFIER(NFKC);
         if (!c->c_normalize && !init_normalization(c)) {
             Py_DECREF(id);
             return NULL;
         }
-        PyTuple_SET_ITEM(c->c_normalize_args, 1, id);
-        id2 = PyObject_Call(c->c_normalize, c->c_normalize_args, NULL);
+        PyObject *form = _PyUnicode_FromId(&PyId_NFKC);
+        if (form == NULL) {
+            Py_DECREF(id);
+            return NULL;
+        }
+        PyObject *args[2] = {form, id};
+        id2 = _PyObject_FastCall(c->c_normalize, args, 2);
         Py_DECREF(id);
         if (!id2)
             return NULL;
+        if (!PyUnicode_Check(id2)) {
+            PyErr_Format(PyExc_TypeError,
+                         "unicodedata.normalize() must return a string, not "
+                         "%.200s",
+                         Py_TYPE(id2)->tp_name);
+            Py_DECREF(id2);
+            return NULL;
+        }
         id = id2;
     }
     PyUnicode_InternInPlace(&id);
@@ -773,7 +780,6 @@ PyAST_FromNodeObject(const node *n, PyCo
     /* borrowed reference */
     c.c_filename = filename;
     c.c_normalize = NULL;
-    c.c_normalize_args = NULL;
 
     if (TYPE(n) == encoding_decl)
         n = CHILD(n, 0);
@@ -866,8 +872,6 @@ PyAST_FromNodeObject(const node *n, PyCo
  out:
     if (c.c_normalize) {
         Py_DECREF(c.c_normalize);
-        PyTuple_SET_ITEM(c.c_normalize_args, 1, NULL);
-        Py_DECREF(c.c_normalize_args);
     }
     return res;
 }
@@ -4123,7 +4127,7 @@ decode_utf8(struct compiling *c, const c
 
 static int
 warn_invalid_escape_sequence(struct compiling *c, const node *n,
-                             char first_invalid_escape_char)
+                             unsigned char first_invalid_escape_char)
 {
     PyObject *msg = PyUnicode_FromFormat("invalid escape sequence \\%c",
                                          first_invalid_escape_char);
@@ -4132,18 +4136,19 @@ warn_invalid_escape_sequence(struct comp
     }
     if (PyErr_WarnExplicitObject(PyExc_DeprecationWarning, msg,
                                    c->c_filename, LINENO(n),
-                                   NULL, NULL) < 0 &&
-        PyErr_ExceptionMatches(PyExc_DeprecationWarning))
+                                   NULL, NULL) < 0)
     {
-        const char *s;
+        if (PyErr_ExceptionMatches(PyExc_DeprecationWarning)) {
+            const char *s;
 
-        /* Replace the DeprecationWarning exception with a SyntaxError
-           to get a more accurate error report */
-        PyErr_Clear();
-
-        s = PyUnicode_AsUTF8(msg);
-        if (s != NULL) {
-            ast_error(c, n, s);
+            /* Replace the DeprecationWarning exception with a SyntaxError
+               to get a more accurate error report */
+            PyErr_Clear();
+
+            s = PyUnicode_AsUTF8(msg);
+            if (s != NULL) {
+                ast_error(c, n, s);
+            }
         }
         Py_DECREF(msg);
         return -1;
diff -urpN Python-3.6.3/Python/bltinmodule.c Python-3.6.5/Python/bltinmodule.c
--- Python-3.6.3/Python/bltinmodule.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/bltinmodule.c	2018-03-28 11:19:31.000000000 +0200
@@ -167,6 +167,13 @@ builtin___build_class__(PyObject *self,
         Py_DECREF(bases);
         return NULL;
     }
+    if (!PyMapping_Check(ns)) {
+        PyErr_Format(PyExc_TypeError,
+                     "%.200s.__prepare__() must return a mapping, not %.200s",
+                     isclass ? ((PyTypeObject *)meta)->tp_name : "<metaclass>",
+                     Py_TYPE(ns)->tp_name);
+        goto error;
+    }
     cell = PyEval_EvalCodeEx(PyFunction_GET_CODE(func), PyFunction_GET_GLOBALS(func), ns,
                              NULL, 0, NULL, 0, NULL, 0, NULL,
                              PyFunction_GET_CLOSURE(func));
@@ -236,7 +243,7 @@ PyDoc_STRVAR(import_doc,
 "__import__(name, globals=None, locals=None, fromlist=(), level=0) -> module\n\
 \n\
 Import a module. Because this function is meant for use by the Python\n\
-interpreter and not for general use it is better to use\n\
+interpreter and not for general use, it is better to use\n\
 importlib.import_module() to programmatically import a module.\n\
 \n\
 The globals argument is only used to determine the context;\n\
@@ -245,8 +252,8 @@ should be a list of names to emulate ``f
 empty list to emulate ``import name''.\n\
 When importing a module from a package, note that __import__('A.B', ...)\n\
 returns package A when fromlist is empty, but its submodule B when\n\
-fromlist is not empty.  Level is used to determine whether to perform \n\
-absolute or relative imports. 0 is absolute while a positive number\n\
+fromlist is not empty.  The level argument is used to determine whether to\n\
+perform absolute or relative imports: 0 is absolute, while a positive number\n\
 is the number of parent directories to search relative to the current module.");
 
 
diff -urpN Python-3.6.3/Python/ceval.c Python-3.6.5/Python/ceval.c
--- Python-3.6.3/Python/ceval.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/ceval.c	2018-03-28 11:19:31.000000000 +0200
@@ -5254,6 +5254,10 @@ import_from(PyObject *v, PyObject *name)
     if (pkgname == NULL) {
         goto error;
     }
+    if (!PyUnicode_Check(pkgname)) {
+        Py_CLEAR(pkgname);
+        goto error;
+    }
     fullmodname = PyUnicode_FromFormat("%U.%U", pkgname, name);
     Py_DECREF(pkgname);
     if (fullmodname == NULL) {
diff -urpN Python-3.6.3/Python/compile.c Python-3.6.5/Python/compile.c
--- Python-3.6.3/Python/compile.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/compile.c	2018-03-28 11:19:31.000000000 +0200
@@ -1343,13 +1343,15 @@ is_const(expr_ty e)
     case Ellipsis_kind:
     case NameConstant_kind:
         return 1;
+    case Name_kind:
+        return _PyUnicode_EqualToASCIIString(e->v.Name.id, "__debug__");
     default:
         return 0;
     }
 }
 
 static PyObject *
-get_const_value(expr_ty e)
+get_const_value(struct compiler *c, expr_ty e)
 {
     switch (e->kind) {
     case Constant_kind:
@@ -1364,6 +1366,9 @@ get_const_value(expr_ty e)
         return Py_Ellipsis;
     case NameConstant_kind:
         return e->v.NameConstant.value;
+    case Name_kind:
+        assert(_PyUnicode_EqualToASCIIString(e->v.Name.id, "__debug__"));
+        return c->c_optimize ? Py_False : Py_True;
     default:
         assert(!is_const(e));
         return NULL;
@@ -2184,7 +2189,7 @@ compiler_async_for(struct compiler *c, s
     _Py_IDENTIFIER(StopAsyncIteration);
 
     basicblock *try, *except, *end, *after_try, *try_cleanup,
-               *after_loop, *after_loop_else;
+               *after_loop_else;
 
     PyObject *stop_aiter_error = _PyUnicode_FromId(&PyId_StopAsyncIteration);
     if (stop_aiter_error == NULL) {
@@ -2196,14 +2201,14 @@ compiler_async_for(struct compiler *c, s
     end = compiler_new_block(c);
     after_try = compiler_new_block(c);
     try_cleanup = compiler_new_block(c);
-    after_loop = compiler_new_block(c);
     after_loop_else = compiler_new_block(c);
 
     if (try == NULL || except == NULL || end == NULL
-            || after_try == NULL || try_cleanup == NULL)
+            || after_try == NULL || try_cleanup == NULL
+            || after_loop_else == NULL)
         return 0;
 
-    ADDOP_JREL(c, SETUP_LOOP, after_loop);
+    ADDOP_JREL(c, SETUP_LOOP, end);
     if (!compiler_push_fblock(c, LOOP, try))
         return 0;
 
@@ -2252,9 +2257,6 @@ compiler_async_for(struct compiler *c, s
     ADDOP(c, POP_BLOCK); /* for SETUP_LOOP */
     compiler_pop_fblock(c, LOOP, try);
 
-    compiler_use_next_block(c, after_loop);
-    ADDOP_JABS(c, JUMP_ABSOLUTE, end);
-
     compiler_use_next_block(c, after_loop_else);
     VISIT_SEQ(c, stmt, s->v.For.orelse);
 
@@ -3027,14 +3029,19 @@ compiler_nameop(struct compiler *c, iden
     PyObject *mangled;
     /* XXX AugStore isn't used anywhere! */
 
-    mangled = _Py_Mangle(c->u->u_private, name);
-    if (!mangled)
-        return 0;
-
     assert(!_PyUnicode_EqualToASCIIString(name, "None") &&
            !_PyUnicode_EqualToASCIIString(name, "True") &&
            !_PyUnicode_EqualToASCIIString(name, "False"));
 
+    if (ctx == Load && _PyUnicode_EqualToASCIIString(name, "__debug__")) {
+        ADDOP_O(c, LOAD_CONST, c->c_optimize ? Py_False : Py_True, consts);
+        return 1;
+    }
+
+    mangled = _Py_Mangle(c->u->u_private, name);
+    if (!mangled)
+        return 0;
+
     op = 0;
     optype = OP_NAME;
     scope = PyST_GetScope(c->u->u_ste, mangled);
@@ -3298,7 +3305,7 @@ compiler_subdict(struct compiler *c, exp
             return 0;
         }
         for (i = begin; i < end; i++) {
-            key = get_const_value((expr_ty)asdl_seq_GET(e->v.Dict.keys, i));
+            key = get_const_value(c, (expr_ty)asdl_seq_GET(e->v.Dict.keys, i));
             Py_INCREF(key);
             PyTuple_SET_ITEM(keys, i - begin, key);
         }
@@ -3743,7 +3750,7 @@ compiler_async_comprehension_generator(s
     _Py_IDENTIFIER(StopAsyncIteration);
 
     comprehension_ty gen;
-    basicblock *anchor, *skip, *if_cleanup, *try,
+    basicblock *anchor, *if_cleanup, *try,
                *after_try, *except, *try_cleanup;
     Py_ssize_t i, n;
 
@@ -3756,13 +3763,12 @@ compiler_async_comprehension_generator(s
     after_try = compiler_new_block(c);
     try_cleanup = compiler_new_block(c);
     except = compiler_new_block(c);
-    skip = compiler_new_block(c);
     if_cleanup = compiler_new_block(c);
     anchor = compiler_new_block(c);
 
-    if (skip == NULL || if_cleanup == NULL || anchor == NULL ||
+    if (if_cleanup == NULL || anchor == NULL ||
             try == NULL || after_try == NULL ||
-            except == NULL || after_try == NULL) {
+            except == NULL || try_cleanup == NULL) {
         return 0;
     }
 
@@ -3856,8 +3862,6 @@ compiler_async_comprehension_generator(s
         default:
             return 0;
         }
-
-        compiler_use_next_block(c, skip);
     }
     compiler_use_next_block(c, if_cleanup);
     ADDOP_JABS(c, JUMP_ABSOLUTE, try);
@@ -4044,35 +4048,10 @@ compiler_visit_keyword(struct compiler *
 static int
 expr_constant(struct compiler *c, expr_ty e)
 {
-    char *id;
-    switch (e->kind) {
-    case Ellipsis_kind:
-        return 1;
-    case Constant_kind:
-        return PyObject_IsTrue(e->v.Constant.value);
-    case Num_kind:
-        return PyObject_IsTrue(e->v.Num.n);
-    case Str_kind:
-        return PyObject_IsTrue(e->v.Str.s);
-    case Name_kind:
-        /* optimize away names that can't be reassigned */
-        id = PyUnicode_AsUTF8(e->v.Name.id);
-        if (id && strcmp(id, "__debug__") == 0)
-            return !c->c_optimize;
-        return -1;
-    case NameConstant_kind: {
-        PyObject *o = e->v.NameConstant.value;
-        if (o == Py_None)
-            return 0;
-        else if (o == Py_True)
-            return 1;
-        else if (o == Py_False)
-            return 0;
-    }
-    /* fall through */
-    default:
-        return -1;
+    if (is_const(e)) {
+        return PyObject_IsTrue(get_const_value(c, e));
     }
+    return -1;
 }
 
 
@@ -5170,7 +5149,6 @@ compute_code_flags(struct compiler *c)
 {
     PySTEntryObject *ste = c->u->u_ste;
     int flags = 0;
-    Py_ssize_t n;
     if (ste->ste_type == FunctionBlock) {
         flags |= CO_NEWLOCALS | CO_OPTIMIZED;
         if (ste->ste_nested)
@@ -5190,18 +5168,6 @@ compute_code_flags(struct compiler *c)
     /* (Only) inherit compilerflags in PyCF_MASK */
     flags |= (c->c_flags->cf_flags & PyCF_MASK);
 
-    n = PyDict_Size(c->u->u_freevars);
-    if (n < 0)
-        return -1;
-    if (n == 0) {
-        n = PyDict_Size(c->u->u_cellvars);
-        if (n < 0)
-            return -1;
-        if (n == 0) {
-            flags |= CO_NOFREE;
-        }
-    }
-
     return flags;
 }
 
diff -urpN Python-3.6.3/Python/errors.c Python-3.6.5/Python/errors.c
--- Python-3.6.3/Python/errors.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/errors.c	2018-03-28 11:19:31.000000000 +0200
@@ -217,20 +217,24 @@ PyErr_ExceptionMatches(PyObject *exc)
 }
 
 
+#ifndef Py_NORMALIZE_RECURSION_LIMIT
+#define Py_NORMALIZE_RECURSION_LIMIT 32
+#endif
+
 /* Used in many places to normalize a raised exception, including in
    eval_code2(), do_raise(), and PyErr_Print()
 
    XXX: should PyErr_NormalizeException() also call
             PyException_SetTraceback() with the resulting value and tb?
 */
-void
-PyErr_NormalizeException(PyObject **exc, PyObject **val, PyObject **tb)
+static void
+PyErr_NormalizeExceptionEx(PyObject **exc, PyObject **val,
+                           PyObject **tb, int recursion_depth)
 {
     PyObject *type = *exc;
     PyObject *value = *val;
     PyObject *inclass = NULL;
     PyObject *initial_tb = NULL;
-    PyThreadState *tstate = NULL;
 
     if (type == NULL) {
         /* There was no exception, so nothing to do. */
@@ -292,6 +296,10 @@ PyErr_NormalizeException(PyObject **exc,
 finally:
     Py_DECREF(type);
     Py_DECREF(value);
+    if (recursion_depth + 1 == Py_NORMALIZE_RECURSION_LIMIT) {
+        PyErr_SetString(PyExc_RecursionError, "maximum recursion depth "
+                        "exceeded while normalizing an exception");
+    }
     /* If the new exception doesn't set a traceback and the old
        exception had a traceback, use the old traceback for the
        new exception.  It's better than nothing.
@@ -304,20 +312,26 @@ finally:
         else
             Py_DECREF(initial_tb);
     }
-    /* normalize recursively */
-    tstate = PyThreadState_GET();
-    if (++tstate->recursion_depth > Py_GetRecursionLimit()) {
-        --tstate->recursion_depth;
-        /* throw away the old exception and use the recursion error instead */
-        Py_INCREF(PyExc_RecursionError);
-        Py_SETREF(*exc, PyExc_RecursionError);
-        Py_INCREF(PyExc_RecursionErrorInst);
-        Py_SETREF(*val, PyExc_RecursionErrorInst);
-        /* just keeping the old traceback */
-        return;
+    /* Normalize recursively.
+     * Abort when Py_NORMALIZE_RECURSION_LIMIT has been exceeded and the
+     * corresponding RecursionError could not be normalized.*/
+    if (++recursion_depth > Py_NORMALIZE_RECURSION_LIMIT) {
+        if (PyErr_GivenExceptionMatches(*exc, PyExc_MemoryError)) {
+            Py_FatalError("Cannot recover from MemoryErrors "
+                          "while normalizing exceptions.");
+        }
+        else {
+            Py_FatalError("Cannot recover from the recursive normalization "
+                          "of an exception.");
+        }
     }
-    PyErr_NormalizeException(exc, val, tb);
-    --tstate->recursion_depth;
+    PyErr_NormalizeExceptionEx(exc, val, tb, recursion_depth);
+}
+
+void
+PyErr_NormalizeException(PyObject **exc, PyObject **val, PyObject **tb)
+{
+    PyErr_NormalizeExceptionEx(exc, val, tb, 0);
 }
 
 
diff -urpN Python-3.6.3/Python/fileutils.c Python-3.6.5/Python/fileutils.c
--- Python-3.6.3/Python/fileutils.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/fileutils.c	2018-03-28 11:19:31.000000000 +0200
@@ -70,7 +70,10 @@ _Py_device_encoding(int fd)
     Py_RETURN_NONE;
 }
 
-#if !defined(__APPLE__) && !defined(MS_WINDOWS)
+#if !defined(__APPLE__) && !defined(__ANDROID__) && !defined(MS_WINDOWS)
+
+#define USE_FORCE_ASCII
+
 extern int _Py_normalize_encoding(const char *, char *, size_t);
 
 /* Workaround FreeBSD and OpenIndiana locale encoding issue with the C locale.
@@ -221,7 +224,7 @@ encode_ascii_surrogateescape(const wchar
 }
 #endif   /* !defined(__APPLE__) && !defined(MS_WINDOWS) */
 
-#if !defined(__APPLE__) && (!defined(MS_WINDOWS) || !defined(HAVE_MBRTOWC))
+#if !defined(HAVE_MBRTOWC) || defined(USE_FORCE_ASCII)
 static wchar_t*
 decode_ascii_surrogateescape(const char *arg, size_t *size)
 {
@@ -251,39 +254,9 @@ decode_ascii_surrogateescape(const char
 #endif
 
 
-/* Decode a byte string from the locale encoding with the
-   surrogateescape error handler: undecodable bytes are decoded as characters
-   in range U+DC80..U+DCFF. If a byte sequence can be decoded as a surrogate
-   character, escape the bytes using the surrogateescape error handler instead
-   of decoding them.
-
-   Return a pointer to a newly allocated wide character string, use
-   PyMem_RawFree() to free the memory. If size is not NULL, write the number of
-   wide characters excluding the null character into *size
-
-   Return NULL on decoding error or memory allocation error. If *size* is not
-   NULL, *size is set to (size_t)-1 on memory error or set to (size_t)-2 on
-   decoding error.
-
-   Decoding errors should never happen, unless there is a bug in the C
-   library.
-
-   Use the Py_EncodeLocale() function to encode the character string back to a
-   byte string. */
-wchar_t*
-Py_DecodeLocale(const char* arg, size_t *size)
+static wchar_t*
+decode_current_locale(const char* arg, size_t *size)
 {
-#if defined(__APPLE__) || defined(__ANDROID__)
-    wchar_t *wstr;
-    wstr = _Py_DecodeUTF8_surrogateescape(arg, strlen(arg));
-    if (size != NULL) {
-        if (wstr != NULL)
-            *size = wcslen(wstr);
-        else
-            *size = (size_t)-1;
-    }
-    return wstr;
-#else
     wchar_t *res;
     size_t argsize;
     size_t count;
@@ -293,19 +266,6 @@ Py_DecodeLocale(const char* arg, size_t
     mbstate_t mbs;
 #endif
 
-#ifndef MS_WINDOWS
-    if (force_ascii == -1)
-        force_ascii = check_force_ascii();
-
-    if (force_ascii) {
-        /* force ASCII encoding to workaround mbstowcs() issue */
-        res = decode_ascii_surrogateescape(arg, size);
-        if (res == NULL)
-            goto oom;
-        return res;
-    }
-#endif
-
 #ifdef HAVE_BROKEN_MBSTOWCS
     /* Some platforms have a broken implementation of
      * mbstowcs which does not count the characters that
@@ -402,72 +362,96 @@ Py_DecodeLocale(const char* arg, size_t
         goto oom;
 #endif   /* HAVE_MBRTOWC */
     return res;
+
 oom:
     if (size != NULL)
         *size = (size_t)-1;
     return NULL;
+}
+
+
+static wchar_t*
+decode_locale(const char* arg, size_t *size, int current_locale)
+{
+    if (current_locale) {
+        return decode_current_locale(arg, size);
+    }
+
+#if defined(__APPLE__) || defined(__ANDROID__)
+    wchar_t *wstr;
+    wstr = _Py_DecodeUTF8_surrogateescape(arg, strlen(arg));
+    if (size != NULL) {
+        if (wstr != NULL)
+            *size = wcslen(wstr);
+        else
+            *size = (size_t)-1;
+    }
+    return wstr;
+#else
+
+#ifdef USE_FORCE_ASCII
+    if (force_ascii == -1) {
+        force_ascii = check_force_ascii();
+    }
+
+    if (force_ascii) {
+        /* force ASCII encoding to workaround mbstowcs() issue */
+        wchar_t *res = decode_ascii_surrogateescape(arg, size);
+        if (res == NULL) {
+            if (size != NULL)
+                *size = (size_t)-1;
+            return NULL;
+        }
+        return res;
+    }
+#endif
+
+    return decode_current_locale(arg, size);
 #endif   /* __APPLE__ or __ANDROID__ */
 }
 
-/* Encode a wide character string to the locale encoding with the
-   surrogateescape error handler: surrogate characters in the range
-   U+DC80..U+DCFF are converted to bytes 0x80..0xFF.
 
-   Return a pointer to a newly allocated byte string, use PyMem_Free() to free
-   the memory. Return NULL on encoding or memory allocation error.
+/* Decode a byte string from the locale encoding with the
+   surrogateescape error handler: undecodable bytes are decoded as characters
+   in range U+DC80..U+DCFF. If a byte sequence can be decoded as a surrogate
+   character, escape the bytes using the surrogateescape error handler instead
+   of decoding them.
 
-   If error_pos is not NULL, *error_pos is set to the index of the invalid
-   character on encoding error, or set to (size_t)-1 otherwise.
+   Return a pointer to a newly allocated wide character string, use
+   PyMem_RawFree() to free the memory. If size is not NULL, write the number of
+   wide characters excluding the null character into *size
 
-   Use the Py_DecodeLocale() function to decode the bytes string back to a wide
-   character string. */
-char*
-Py_EncodeLocale(const wchar_t *text, size_t *error_pos)
+   Return NULL on decoding error or memory allocation error. If *size* is not
+   NULL, *size is set to (size_t)-1 on memory error or set to (size_t)-2 on
+   decoding error.
+
+   Decoding errors should never happen, unless there is a bug in the C
+   library.
+
+   Use the Py_EncodeLocale() function to encode the character string back to a
+   byte string. */
+wchar_t*
+Py_DecodeLocale(const char* arg, size_t *size)
 {
-#if defined(__APPLE__) || defined(__ANDROID__)
-    Py_ssize_t len;
-    PyObject *unicode, *bytes = NULL;
-    char *cpath;
+    return decode_locale(arg, size, 0);
+}
 
-    unicode = PyUnicode_FromWideChar(text, wcslen(text));
-    if (unicode == NULL)
-        return NULL;
 
-    bytes = _PyUnicode_AsUTF8String(unicode, "surrogateescape");
-    Py_DECREF(unicode);
-    if (bytes == NULL) {
-        PyErr_Clear();
-        if (error_pos != NULL)
-            *error_pos = (size_t)-1;
-        return NULL;
-    }
+wchar_t*
+_Py_DecodeLocaleEx(const char* arg, size_t *size, int current_locale)
+{
+    return decode_locale(arg, size, current_locale);
+}
 
-    len = PyBytes_GET_SIZE(bytes);
-    cpath = PyMem_Malloc(len+1);
-    if (cpath == NULL) {
-        PyErr_Clear();
-        Py_DECREF(bytes);
-        if (error_pos != NULL)
-            *error_pos = (size_t)-1;
-        return NULL;
-    }
-    memcpy(cpath, PyBytes_AsString(bytes), len + 1);
-    Py_DECREF(bytes);
-    return cpath;
-#else   /* __APPLE__ */
+
+static char*
+encode_current_locale(const wchar_t *text, size_t *error_pos)
+{
     const size_t len = wcslen(text);
     char *result = NULL, *bytes = NULL;
     size_t i, size, converted;
     wchar_t c, buf[2];
 
-#ifndef MS_WINDOWS
-    if (force_ascii == -1)
-        force_ascii = check_force_ascii();
-
-    if (force_ascii)
-        return encode_ascii_surrogateescape(text, error_pos);
-#endif
-
     /* The function works in two steps:
        1. compute the length of the output buffer in bytes (size)
        2. outputs the bytes */
@@ -522,10 +506,89 @@ Py_EncodeLocale(const wchar_t *text, siz
         bytes = result;
     }
     return result;
+}
+
+
+static char*
+encode_locale(const wchar_t *text, size_t *error_pos, int current_locale)
+{
+    if (current_locale) {
+        return encode_current_locale(text, error_pos);
+    }
+
+#if defined(__APPLE__) || defined(__ANDROID__)
+    Py_ssize_t len;
+    PyObject *unicode, *bytes = NULL;
+    char *cpath;
+
+    unicode = PyUnicode_FromWideChar(text, wcslen(text));
+    if (unicode == NULL)
+        return NULL;
+
+    bytes = _PyUnicode_AsUTF8String(unicode, "surrogateescape");
+    Py_DECREF(unicode);
+    if (bytes == NULL) {
+        PyErr_Clear();
+        if (error_pos != NULL)
+            *error_pos = (size_t)-1;
+        return NULL;
+    }
+
+    len = PyBytes_GET_SIZE(bytes);
+    cpath = PyMem_Malloc(len+1);
+    if (cpath == NULL) {
+        PyErr_Clear();
+        Py_DECREF(bytes);
+        if (error_pos != NULL)
+            *error_pos = (size_t)-1;
+        return NULL;
+    }
+    memcpy(cpath, PyBytes_AsString(bytes), len + 1);
+    Py_DECREF(bytes);
+    return cpath;
+#else   /* __APPLE__ */
+
+#ifdef USE_FORCE_ASCII
+    if (force_ascii == -1) {
+        force_ascii = check_force_ascii();
+    }
+
+    if (force_ascii) {
+        return encode_ascii_surrogateescape(text, error_pos);
+    }
+#endif
+
+    return encode_current_locale(text, error_pos);
 #endif   /* __APPLE__ or __ANDROID__ */
 }
 
 
+/* Encode a wide character string to the locale encoding with the
+   surrogateescape error handler: surrogate characters in the range
+   U+DC80..U+DCFF are converted to bytes 0x80..0xFF.
+
+   Return a pointer to a newly allocated byte string, use PyMem_Free() to free
+   the memory. Return NULL on encoding or memory allocation error.
+
+   If error_pos is not NULL, *error_pos is set to the index of the invalid
+   character on encoding error, or set to (size_t)-1 otherwise.
+
+   Use the Py_DecodeLocale() function to decode the bytes string back to a wide
+   character string. */
+char*
+Py_EncodeLocale(const wchar_t *text, size_t *error_pos)
+{
+    return encode_locale(text, error_pos, 0);
+}
+
+
+char*
+_Py_EncodeLocaleEx(const wchar_t *text, size_t *error_pos, int current_locale)
+{
+    return encode_locale(text, error_pos, current_locale);
+}
+
+
 #ifdef MS_WINDOWS
 static __int64 secs_between_epochs = 11644473600; /* Seconds between 1.1.1601 and 1.1.1970 */
 
@@ -743,6 +806,7 @@ _Py_stat(PyObject *path, struct stat *st
 }
 
 
+/* This function MUST be kept async-signal-safe on POSIX when raise=0. */
 static int
 get_inheritable(int fd, int raise)
 {
@@ -788,6 +852,8 @@ _Py_get_inheritable(int fd)
     return get_inheritable(fd, 1);
 }
 
+
+/* This function MUST be kept async-signal-safe on POSIX when raise=0. */
 static int
 set_inheritable(int fd, int inheritable, int raise, int *atomic_flag_works)
 {
@@ -844,8 +910,10 @@ set_inheritable(int fd, int inheritable,
 #else
 
 #if defined(HAVE_SYS_IOCTL_H) && defined(FIOCLEX) && defined(FIONCLEX)
-    if (ioctl_works != 0) {
+    if (ioctl_works != 0 && raise != 0) {
         /* fast-path: ioctl() only requires one syscall */
+        /* caveat: raise=0 is an indicator that we must be async-signal-safe
+         * thus avoid using ioctl() so we skip the fast-path. */
         if (inheritable)
             request = FIONCLEX;
         else
@@ -916,8 +984,7 @@ make_non_inheritable(int fd)
 }
 
 /* Set the inheritable flag of the specified file descriptor.
-   On success: return 0, on error: raise an exception if raise is nonzero
-   and return -1.
+   On success: return 0, on error: raise an exception and return -1.
 
    If atomic_flag_works is not NULL:
 
@@ -938,6 +1005,15 @@ _Py_set_inheritable(int fd, int inherita
     return set_inheritable(fd, inheritable, 1, atomic_flag_works);
 }
 
+/* Same as _Py_set_inheritable() but on error, set errno and
+   don't raise an exception.
+   This function is async-signal-safe. */
+int
+_Py_set_inheritable_async_safe(int fd, int inheritable, int *atomic_flag_works)
+{
+    return set_inheritable(fd, inheritable, 0, atomic_flag_works);
+}
+
 static int
 _Py_open_impl(const char *pathname, int flags, int gil_held)
 {
@@ -1109,7 +1185,8 @@ _Py_fopen_obj(PyObject *path, const char
     if (wpath == NULL)
         return NULL;
 
-    usize = MultiByteToWideChar(CP_ACP, 0, mode, -1, wmode, sizeof(wmode));
+    usize = MultiByteToWideChar(CP_ACP, 0, mode, -1,
+                                wmode, Py_ARRAY_LENGTH(wmode));
     if (usize == 0) {
         PyErr_SetFromWindowsErr(0);
         return NULL;
@@ -1597,3 +1674,80 @@ error:
     return -1;
 }
 #endif
+
+
+int
+_Py_GetLocaleconvNumeric(PyObject **decimal_point, PyObject **thousands_sep,
+                         const char **grouping)
+{
+    int res = -1;
+
+    struct lconv *lc = localeconv();
+
+    int change_locale = 0;
+    if (decimal_point != NULL &&
+        (strlen(lc->decimal_point) > 1 || ((unsigned char)lc->decimal_point[0]) > 127))
+    {
+        change_locale = 1;
+    }
+    if (thousands_sep != NULL &&
+        (strlen(lc->thousands_sep) > 1 || ((unsigned char)lc->thousands_sep[0]) > 127))
+    {
+        change_locale = 1;
+    }
+
+    /* Keep a copy of the LC_CTYPE locale */
+    char *oldloc = NULL, *loc = NULL;
+    if (change_locale) {
+        oldloc = setlocale(LC_CTYPE, NULL);
+        if (!oldloc) {
+            PyErr_SetString(PyExc_RuntimeWarning, "faild to get LC_CTYPE locale");
+            return -1;
+        }
+
+        oldloc = _PyMem_Strdup(oldloc);
+        if (!oldloc) {
+            PyErr_NoMemory();
+            return -1;
+        }
+
+        loc = setlocale(LC_NUMERIC, NULL);
+        if (loc != NULL && strcmp(loc, oldloc) == 0) {
+            loc = NULL;
+        }
+
+        if (loc != NULL) {
+            /* Only set the locale temporarilty the LC_CTYPE locale
+               if LC_NUMERIC locale is different than LC_CTYPE locale and
+               decimal_point and/or thousands_sep are non-ASCII or longer than
+               1 byte */
+            setlocale(LC_CTYPE, loc);
+        }
+    }
+
+    if (decimal_point != NULL) {
+        *decimal_point = PyUnicode_DecodeLocale(lc->decimal_point, NULL);
+        if (*decimal_point == NULL) {
+            goto error;
+        }
+    }
+    if (thousands_sep != NULL) {
+        *thousands_sep = PyUnicode_DecodeLocale(lc->thousands_sep, NULL);
+        if (*thousands_sep == NULL) {
+            goto error;
+        }
+    }
+
+    if (grouping != NULL) {
+        *grouping = lc->grouping;
+    }
+
+    res = 0;
+
+error:
+    if (loc != NULL) {
+        setlocale(LC_CTYPE, oldloc);
+    }
+    PyMem_Free(oldloc);
+    return res;
+}
diff -urpN Python-3.6.3/Python/formatter_unicode.c Python-3.6.5/Python/formatter_unicode.c
--- Python-3.6.3/Python/formatter_unicode.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/formatter_unicode.c	2018-03-28 11:19:31.000000000 +0200
@@ -32,11 +32,11 @@ invalid_comma_type(Py_UCS4 presentation_
 {
     if (presentation_type > 32 && presentation_type < 128)
         PyErr_Format(PyExc_ValueError,
-                     "Cannot specify ',' or '_' with '%c'.",
+                     "Cannot specify ',' with '%c'.",
                      (char)presentation_type);
     else
         PyErr_Format(PyExc_ValueError,
-                     "Cannot specify ',' or '_' with '\\x%x'.",
+                     "Cannot specify ',' with '\\x%x'.",
                      (unsigned int)presentation_type);
 }
 
@@ -707,18 +707,11 @@ get_locale_info(enum LocaleType type, Lo
 {
     switch (type) {
     case LT_CURRENT_LOCALE: {
-        struct lconv *locale_data = localeconv();
-        locale_info->decimal_point = PyUnicode_DecodeLocale(
-                                         locale_data->decimal_point,
-                                         NULL);
-        if (locale_info->decimal_point == NULL)
+        if (_Py_GetLocaleconvNumeric(&locale_info->decimal_point,
+                                     &locale_info->thousands_sep,
+                                     &locale_info->grouping) < 0) {
             return -1;
-        locale_info->thousands_sep = PyUnicode_DecodeLocale(
-                                         locale_data->thousands_sep,
-                                         NULL);
-        if (locale_info->thousands_sep == NULL)
-            return -1;
-        locale_info->grouping = locale_data->grouping;
+        }
         break;
     }
     case LT_DEFAULT_LOCALE:
diff -urpN Python-3.6.3/Python/getargs.c Python-3.6.5/Python/getargs.c
--- Python-3.6.3/Python/getargs.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/getargs.c	2018-03-28 11:19:31.000000000 +0200
@@ -1771,7 +1771,7 @@ vgetargskeywords(PyObject *args, PyObjec
             }
         }
 
-        /* We are into optional args, skip thru to any remaining
+        /* We are into optional args, skip through to any remaining
          * keyword args */
         msg = skipitem(&format, p_va, flags);
         if (msg) {
@@ -2130,7 +2130,7 @@ vgetargskeywordsfast_impl(PyObject **arg
             return cleanreturn(1, &freelist);
         }
 
-        /* We are into optional args, skip thru to any remaining
+        /* We are into optional args, skip through to any remaining
          * keyword args */
         msg = skipitem(&format, p_va, flags);
         assert(msg == NULL);
diff -urpN Python-3.6.3/Python/getcompiler.c Python-3.6.5/Python/getcompiler.c
--- Python-3.6.3/Python/getcompiler.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/getcompiler.c	2018-03-28 11:19:31.000000000 +0200
@@ -24,5 +24,5 @@
 const char *
 Py_GetCompiler(void)
 {
-	return COMPILER;
+    return COMPILER;
 }
diff -urpN Python-3.6.3/Python/getcopyright.c Python-3.6.5/Python/getcopyright.c
--- Python-3.6.3/Python/getcopyright.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/getcopyright.c	2018-03-28 11:19:31.000000000 +0200
@@ -4,7 +4,7 @@
 
 static const char cprt[] =
 "\
-Copyright (c) 2001-2017 Python Software Foundation.\n\
+Copyright (c) 2001-2018 Python Software Foundation.\n\
 All Rights Reserved.\n\
 \n\
 Copyright (c) 2000 BeOpen.com.\n\
diff -urpN Python-3.6.3/Python/importdl.c Python-3.6.5/Python/importdl.c
--- Python-3.6.3/Python/importdl.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/importdl.c	2018-03-28 11:19:31.000000000 +0200
@@ -103,6 +103,11 @@ _PyImport_LoadDynamicModuleWithSpec(PyOb
     if (name_unicode == NULL) {
         return NULL;
     }
+    if (!PyUnicode_Check(name_unicode)) {
+        PyErr_SetString(PyExc_TypeError,
+                        "spec.name must be a string");
+        goto error;
+    }
 
     name = get_encoded_name(name_unicode, &hook_prefix);
     if (name == NULL) {
diff -urpN Python-3.6.3/Python/importlib.h Python-3.6.5/Python/importlib.h
--- Python-3.6.3/Python/importlib.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/importlib.h	2018-03-28 11:19:31.000000000 +0200
@@ -1,7 +1,7 @@
 /* Auto-generated by Programs/_freeze_importlib.c */
 const unsigned char _Py_M__importlib[] = {
     99,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,
-    0,64,0,0,0,115,202,1,0,0,100,0,90,0,100,1,
+    0,64,0,0,0,115,208,1,0,0,100,0,90,0,100,1,
     97,1,100,2,100,3,132,0,90,2,100,4,100,5,132,0,
     90,3,105,0,90,4,105,0,90,5,71,0,100,6,100,7,
     132,0,100,7,101,6,131,3,90,7,71,0,100,8,100,9,
@@ -14,7 +14,7 @@ const unsigned char _Py_M__importlib[] =
     90,17,100,30,100,31,132,0,90,18,71,0,100,32,100,33,
     132,0,100,33,131,2,90,19,71,0,100,34,100,35,132,0,
     100,35,131,2,90,20,100,1,100,1,100,36,156,2,100,37,
-    100,38,132,2,90,21,100,92,100,39,100,40,132,1,90,22,
+    100,38,132,2,90,21,100,93,100,39,100,40,132,1,90,22,
     100,41,100,42,156,1,100,43,100,44,132,2,90,23,100,45,
     100,46,132,0,90,24,100,47,100,48,132,0,90,25,100,49,
     100,50,132,0,90,26,100,51,100,52,132,0,90,27,100,53,
@@ -22,1788 +22,1801 @@ const unsigned char _Py_M__importlib[] =
     100,57,100,58,132,0,100,58,131,2,90,30,71,0,100,59,
     100,60,132,0,100,60,131,2,90,31,71,0,100,61,100,62,
     132,0,100,62,131,2,90,32,100,63,100,64,132,0,90,33,
-    100,65,100,66,132,0,90,34,100,93,100,67,100,68,132,1,
+    100,65,100,66,132,0,90,34,100,94,100,67,100,68,132,1,
     90,35,100,69,100,70,132,0,90,36,100,71,90,37,101,37,
     100,72,23,0,90,38,100,73,100,74,132,0,90,39,101,40,
-    131,0,90,41,100,75,100,76,132,0,90,42,100,94,100,78,
-    100,79,132,1,90,43,100,80,100,81,132,0,90,44,100,82,
-    100,83,132,0,90,45,100,1,100,1,102,0,100,77,102,4,
-    100,84,100,85,132,1,90,46,100,86,100,87,132,0,90,47,
-    100,88,100,89,132,0,90,48,100,90,100,91,132,0,90,49,
-    100,1,83,0,41,95,97,83,1,0,0,67,111,114,101,32,
-    105,109,112,108,101,109,101,110,116,97,116,105,111,110,32,111,
-    102,32,105,109,112,111,114,116,46,10,10,84,104,105,115,32,
-    109,111,100,117,108,101,32,105,115,32,78,79,84,32,109,101,
-    97,110,116,32,116,111,32,98,101,32,100,105,114,101,99,116,
-    108,121,32,105,109,112,111,114,116,101,100,33,32,73,116,32,
-    104,97,115,32,98,101,101,110,32,100,101,115,105,103,110,101,
-    100,32,115,117,99,104,10,116,104,97,116,32,105,116,32,99,
-    97,110,32,98,101,32,98,111,111,116,115,116,114,97,112,112,
-    101,100,32,105,110,116,111,32,80,121,116,104,111,110,32,97,
-    115,32,116,104,101,32,105,109,112,108,101,109,101,110,116,97,
-    116,105,111,110,32,111,102,32,105,109,112,111,114,116,46,32,
-    65,115,10,115,117,99,104,32,105,116,32,114,101,113,117,105,
-    114,101,115,32,116,104,101,32,105,110,106,101,99,116,105,111,
-    110,32,111,102,32,115,112,101,99,105,102,105,99,32,109,111,
-    100,117,108,101,115,32,97,110,100,32,97,116,116,114,105,98,
-    117,116,101,115,32,105,110,32,111,114,100,101,114,32,116,111,
-    10,119,111,114,107,46,32,79,110,101,32,115,104,111,117,108,
-    100,32,117,115,101,32,105,109,112,111,114,116,108,105,98,32,
-    97,115,32,116,104,101,32,112,117,98,108,105,99,45,102,97,
-    99,105,110,103,32,118,101,114,115,105,111,110,32,111,102,32,
-    116,104,105,115,32,109,111,100,117,108,101,46,10,10,78,99,
-    2,0,0,0,0,0,0,0,3,0,0,0,7,0,0,0,
-    67,0,0,0,115,60,0,0,0,120,40,100,6,68,0,93,
-    32,125,2,116,0,124,1,124,2,131,2,114,6,116,1,124,
-    0,124,2,116,2,124,1,124,2,131,2,131,3,1,0,113,
-    6,87,0,124,0,106,3,106,4,124,1,106,3,131,1,1,
-    0,100,5,83,0,41,7,122,47,83,105,109,112,108,101,32,
-    115,117,98,115,116,105,116,117,116,101,32,102,111,114,32,102,
-    117,110,99,116,111,111,108,115,46,117,112,100,97,116,101,95,
-    119,114,97,112,112,101,114,46,218,10,95,95,109,111,100,117,
-    108,101,95,95,218,8,95,95,110,97,109,101,95,95,218,12,
-    95,95,113,117,97,108,110,97,109,101,95,95,218,7,95,95,
-    100,111,99,95,95,78,41,4,114,0,0,0,0,114,1,0,
-    0,0,114,2,0,0,0,114,3,0,0,0,41,5,218,7,
-    104,97,115,97,116,116,114,218,7,115,101,116,97,116,116,114,
-    218,7,103,101,116,97,116,116,114,218,8,95,95,100,105,99,
-    116,95,95,218,6,117,112,100,97,116,101,41,3,90,3,110,
-    101,119,90,3,111,108,100,218,7,114,101,112,108,97,99,101,
-    169,0,114,10,0,0,0,250,29,60,102,114,111,122,101,110,
-    32,105,109,112,111,114,116,108,105,98,46,95,98,111,111,116,
-    115,116,114,97,112,62,218,5,95,119,114,97,112,27,0,0,
-    0,115,8,0,0,0,0,2,10,1,10,1,22,1,114,12,
-    0,0,0,99,1,0,0,0,0,0,0,0,1,0,0,0,
-    2,0,0,0,67,0,0,0,115,12,0,0,0,116,0,116,
-    1,131,1,124,0,131,1,83,0,41,1,78,41,2,218,4,
-    116,121,112,101,218,3,115,121,115,41,1,218,4,110,97,109,
-    101,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
-    218,11,95,110,101,119,95,109,111,100,117,108,101,35,0,0,
-    0,115,2,0,0,0,0,1,114,16,0,0,0,99,0,0,
-    0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,0,
-    0,0,115,12,0,0,0,101,0,90,1,100,0,90,2,100,
-    1,83,0,41,2,218,14,95,68,101,97,100,108,111,99,107,
-    69,114,114,111,114,78,41,3,114,1,0,0,0,114,0,0,
-    0,0,114,2,0,0,0,114,10,0,0,0,114,10,0,0,
-    0,114,10,0,0,0,114,11,0,0,0,114,17,0,0,0,
-    48,0,0,0,115,2,0,0,0,8,1,114,17,0,0,0,
-    99,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,
-    0,64,0,0,0,115,56,0,0,0,101,0,90,1,100,0,
-    90,2,100,1,90,3,100,2,100,3,132,0,90,4,100,4,
-    100,5,132,0,90,5,100,6,100,7,132,0,90,6,100,8,
-    100,9,132,0,90,7,100,10,100,11,132,0,90,8,100,12,
-    83,0,41,13,218,11,95,77,111,100,117,108,101,76,111,99,
-    107,122,169,65,32,114,101,99,117,114,115,105,118,101,32,108,
-    111,99,107,32,105,109,112,108,101,109,101,110,116,97,116,105,
-    111,110,32,119,104,105,99,104,32,105,115,32,97,98,108,101,
-    32,116,111,32,100,101,116,101,99,116,32,100,101,97,100,108,
-    111,99,107,115,10,32,32,32,32,40,101,46,103,46,32,116,
-    104,114,101,97,100,32,49,32,116,114,121,105,110,103,32,116,
-    111,32,116,97,107,101,32,108,111,99,107,115,32,65,32,116,
-    104,101,110,32,66,44,32,97,110,100,32,116,104,114,101,97,
-    100,32,50,32,116,114,121,105,110,103,32,116,111,10,32,32,
-    32,32,116,97,107,101,32,108,111,99,107,115,32,66,32,116,
-    104,101,110,32,65,41,46,10,32,32,32,32,99,2,0,0,
-    0,0,0,0,0,2,0,0,0,2,0,0,0,67,0,0,
-    0,115,48,0,0,0,116,0,106,1,131,0,124,0,95,2,
-    116,0,106,1,131,0,124,0,95,3,124,1,124,0,95,4,
-    100,0,124,0,95,5,100,1,124,0,95,6,100,1,124,0,
-    95,7,100,0,83,0,41,2,78,233,0,0,0,0,41,8,
-    218,7,95,116,104,114,101,97,100,90,13,97,108,108,111,99,
-    97,116,101,95,108,111,99,107,218,4,108,111,99,107,218,6,
-    119,97,107,101,117,112,114,15,0,0,0,218,5,111,119,110,
-    101,114,218,5,99,111,117,110,116,218,7,119,97,105,116,101,
-    114,115,41,2,218,4,115,101,108,102,114,15,0,0,0,114,
-    10,0,0,0,114,10,0,0,0,114,11,0,0,0,218,8,
-    95,95,105,110,105,116,95,95,58,0,0,0,115,12,0,0,
-    0,0,1,10,1,10,1,6,1,6,1,6,1,122,20,95,
-    77,111,100,117,108,101,76,111,99,107,46,95,95,105,110,105,
-    116,95,95,99,1,0,0,0,0,0,0,0,4,0,0,0,
-    2,0,0,0,67,0,0,0,115,64,0,0,0,116,0,106,
-    1,131,0,125,1,124,0,106,2,125,2,120,44,116,3,106,
-    4,124,2,131,1,125,3,124,3,100,0,107,8,114,38,100,
-    1,83,0,124,3,106,2,125,2,124,2,124,1,107,2,114,
-    16,100,2,83,0,113,16,87,0,100,0,83,0,41,3,78,
-    70,84,41,5,114,20,0,0,0,218,9,103,101,116,95,105,
-    100,101,110,116,114,23,0,0,0,218,12,95,98,108,111,99,
-    107,105,110,103,95,111,110,218,3,103,101,116,41,4,114,26,
-    0,0,0,90,2,109,101,218,3,116,105,100,114,21,0,0,
-    0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
-    218,12,104,97,115,95,100,101,97,100,108,111,99,107,66,0,
-    0,0,115,18,0,0,0,0,2,8,1,6,1,2,1,10,
-    1,8,1,4,1,6,1,8,1,122,24,95,77,111,100,117,
-    108,101,76,111,99,107,46,104,97,115,95,100,101,97,100,108,
-    111,99,107,99,1,0,0,0,0,0,0,0,2,0,0,0,
-    16,0,0,0,67,0,0,0,115,168,0,0,0,116,0,106,
-    1,131,0,125,1,124,0,116,2,124,1,60,0,122,138,120,
-    132,124,0,106,3,143,96,1,0,124,0,106,4,100,1,107,
-    2,115,48,124,0,106,5,124,1,107,2,114,72,124,1,124,
-    0,95,5,124,0,4,0,106,4,100,2,55,0,2,0,95,
-    4,100,3,83,0,124,0,106,6,131,0,114,92,116,7,100,
-    4,124,0,22,0,131,1,130,1,124,0,106,8,106,9,100,
-    5,131,1,114,118,124,0,4,0,106,10,100,2,55,0,2,
-    0,95,10,87,0,100,6,81,0,82,0,88,0,124,0,106,
-    8,106,9,131,0,1,0,124,0,106,8,106,11,131,0,1,
-    0,113,20,87,0,87,0,100,6,116,2,124,1,61,0,88,
-    0,100,6,83,0,41,7,122,185,10,32,32,32,32,32,32,
-    32,32,65,99,113,117,105,114,101,32,116,104,101,32,109,111,
-    100,117,108,101,32,108,111,99,107,46,32,32,73,102,32,97,
-    32,112,111,116,101,110,116,105,97,108,32,100,101,97,100,108,
-    111,99,107,32,105,115,32,100,101,116,101,99,116,101,100,44,
-    10,32,32,32,32,32,32,32,32,97,32,95,68,101,97,100,
-    108,111,99,107,69,114,114,111,114,32,105,115,32,114,97,105,
-    115,101,100,46,10,32,32,32,32,32,32,32,32,79,116,104,
-    101,114,119,105,115,101,44,32,116,104,101,32,108,111,99,107,
-    32,105,115,32,97,108,119,97,121,115,32,97,99,113,117,105,
-    114,101,100,32,97,110,100,32,84,114,117,101,32,105,115,32,
-    114,101,116,117,114,110,101,100,46,10,32,32,32,32,32,32,
-    32,32,114,19,0,0,0,233,1,0,0,0,84,122,23,100,
-    101,97,100,108,111,99,107,32,100,101,116,101,99,116,101,100,
-    32,98,121,32,37,114,70,78,41,12,114,20,0,0,0,114,
-    28,0,0,0,114,29,0,0,0,114,21,0,0,0,114,24,
-    0,0,0,114,23,0,0,0,114,32,0,0,0,114,17,0,
-    0,0,114,22,0,0,0,218,7,97,99,113,117,105,114,101,
-    114,25,0,0,0,218,7,114,101,108,101,97,115,101,41,2,
-    114,26,0,0,0,114,31,0,0,0,114,10,0,0,0,114,
-    10,0,0,0,114,11,0,0,0,114,34,0,0,0,78,0,
-    0,0,115,32,0,0,0,0,6,8,1,8,1,2,1,2,
-    1,8,1,20,1,6,1,14,1,4,1,8,1,12,1,12,
-    1,24,2,10,1,18,2,122,19,95,77,111,100,117,108,101,
-    76,111,99,107,46,97,99,113,117,105,114,101,99,1,0,0,
-    0,0,0,0,0,2,0,0,0,10,0,0,0,67,0,0,
-    0,115,122,0,0,0,116,0,106,1,131,0,125,1,124,0,
-    106,2,143,98,1,0,124,0,106,3,124,1,107,3,114,34,
-    116,4,100,1,131,1,130,1,124,0,106,5,100,2,107,4,
-    115,48,116,6,130,1,124,0,4,0,106,5,100,3,56,0,
-    2,0,95,5,124,0,106,5,100,2,107,2,114,108,100,0,
-    124,0,95,3,124,0,106,7,114,108,124,0,4,0,106,7,
-    100,3,56,0,2,0,95,7,124,0,106,8,106,9,131,0,
-    1,0,87,0,100,0,81,0,82,0,88,0,100,0,83,0,
-    41,4,78,122,31,99,97,110,110,111,116,32,114,101,108,101,
-    97,115,101,32,117,110,45,97,99,113,117,105,114,101,100,32,
-    108,111,99,107,114,19,0,0,0,114,33,0,0,0,41,10,
-    114,20,0,0,0,114,28,0,0,0,114,21,0,0,0,114,
-    23,0,0,0,218,12,82,117,110,116,105,109,101,69,114,114,
-    111,114,114,24,0,0,0,218,14,65,115,115,101,114,116,105,
-    111,110,69,114,114,111,114,114,25,0,0,0,114,22,0,0,
-    0,114,35,0,0,0,41,2,114,26,0,0,0,114,31,0,
+    131,0,90,41,100,75,100,76,132,0,90,42,100,95,100,78,
+    100,79,132,1,90,43,100,41,100,80,156,1,100,81,100,82,
+    132,2,90,44,100,83,100,84,132,0,90,45,100,1,100,1,
+    102,0,100,77,102,4,100,85,100,86,132,1,90,46,100,87,
+    100,88,132,0,90,47,100,89,100,90,132,0,90,48,100,91,
+    100,92,132,0,90,49,100,1,83,0,41,96,97,83,1,0,
+    0,67,111,114,101,32,105,109,112,108,101,109,101,110,116,97,
+    116,105,111,110,32,111,102,32,105,109,112,111,114,116,46,10,
+    10,84,104,105,115,32,109,111,100,117,108,101,32,105,115,32,
+    78,79,84,32,109,101,97,110,116,32,116,111,32,98,101,32,
+    100,105,114,101,99,116,108,121,32,105,109,112,111,114,116,101,
+    100,33,32,73,116,32,104,97,115,32,98,101,101,110,32,100,
+    101,115,105,103,110,101,100,32,115,117,99,104,10,116,104,97,
+    116,32,105,116,32,99,97,110,32,98,101,32,98,111,111,116,
+    115,116,114,97,112,112,101,100,32,105,110,116,111,32,80,121,
+    116,104,111,110,32,97,115,32,116,104,101,32,105,109,112,108,
+    101,109,101,110,116,97,116,105,111,110,32,111,102,32,105,109,
+    112,111,114,116,46,32,65,115,10,115,117,99,104,32,105,116,
+    32,114,101,113,117,105,114,101,115,32,116,104,101,32,105,110,
+    106,101,99,116,105,111,110,32,111,102,32,115,112,101,99,105,
+    102,105,99,32,109,111,100,117,108,101,115,32,97,110,100,32,
+    97,116,116,114,105,98,117,116,101,115,32,105,110,32,111,114,
+    100,101,114,32,116,111,10,119,111,114,107,46,32,79,110,101,
+    32,115,104,111,117,108,100,32,117,115,101,32,105,109,112,111,
+    114,116,108,105,98,32,97,115,32,116,104,101,32,112,117,98,
+    108,105,99,45,102,97,99,105,110,103,32,118,101,114,115,105,
+    111,110,32,111,102,32,116,104,105,115,32,109,111,100,117,108,
+    101,46,10,10,78,99,2,0,0,0,0,0,0,0,3,0,
+    0,0,7,0,0,0,67,0,0,0,115,60,0,0,0,120,
+    40,100,6,68,0,93,32,125,2,116,0,124,1,124,2,131,
+    2,114,6,116,1,124,0,124,2,116,2,124,1,124,2,131,
+    2,131,3,1,0,113,6,87,0,124,0,106,3,106,4,124,
+    1,106,3,131,1,1,0,100,5,83,0,41,7,122,47,83,
+    105,109,112,108,101,32,115,117,98,115,116,105,116,117,116,101,
+    32,102,111,114,32,102,117,110,99,116,111,111,108,115,46,117,
+    112,100,97,116,101,95,119,114,97,112,112,101,114,46,218,10,
+    95,95,109,111,100,117,108,101,95,95,218,8,95,95,110,97,
+    109,101,95,95,218,12,95,95,113,117,97,108,110,97,109,101,
+    95,95,218,7,95,95,100,111,99,95,95,78,41,4,114,0,
+    0,0,0,114,1,0,0,0,114,2,0,0,0,114,3,0,
+    0,0,41,5,218,7,104,97,115,97,116,116,114,218,7,115,
+    101,116,97,116,116,114,218,7,103,101,116,97,116,116,114,218,
+    8,95,95,100,105,99,116,95,95,218,6,117,112,100,97,116,
+    101,41,3,90,3,110,101,119,90,3,111,108,100,218,7,114,
+    101,112,108,97,99,101,169,0,114,10,0,0,0,250,29,60,
+    102,114,111,122,101,110,32,105,109,112,111,114,116,108,105,98,
+    46,95,98,111,111,116,115,116,114,97,112,62,218,5,95,119,
+    114,97,112,27,0,0,0,115,8,0,0,0,0,2,10,1,
+    10,1,22,1,114,12,0,0,0,99,1,0,0,0,0,0,
+    0,0,1,0,0,0,2,0,0,0,67,0,0,0,115,12,
+    0,0,0,116,0,116,1,131,1,124,0,131,1,83,0,41,
+    1,78,41,2,218,4,116,121,112,101,218,3,115,121,115,41,
+    1,218,4,110,97,109,101,114,10,0,0,0,114,10,0,0,
+    0,114,11,0,0,0,218,11,95,110,101,119,95,109,111,100,
+    117,108,101,35,0,0,0,115,2,0,0,0,0,1,114,16,
+    0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,
+    1,0,0,0,64,0,0,0,115,12,0,0,0,101,0,90,
+    1,100,0,90,2,100,1,83,0,41,2,218,14,95,68,101,
+    97,100,108,111,99,107,69,114,114,111,114,78,41,3,114,1,
+    0,0,0,114,0,0,0,0,114,2,0,0,0,114,10,0,
     0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,
-    0,114,35,0,0,0,103,0,0,0,115,22,0,0,0,0,
-    1,8,1,8,1,10,1,8,1,14,1,14,1,10,1,6,
-    1,6,1,14,1,122,19,95,77,111,100,117,108,101,76,111,
-    99,107,46,114,101,108,101,97,115,101,99,1,0,0,0,0,
-    0,0,0,1,0,0,0,4,0,0,0,67,0,0,0,115,
-    18,0,0,0,100,1,106,0,124,0,106,1,116,2,124,0,
-    131,1,131,2,83,0,41,2,78,122,23,95,77,111,100,117,
-    108,101,76,111,99,107,40,123,33,114,125,41,32,97,116,32,
-    123,125,41,3,218,6,102,111,114,109,97,116,114,15,0,0,
-    0,218,2,105,100,41,1,114,26,0,0,0,114,10,0,0,
-    0,114,10,0,0,0,114,11,0,0,0,218,8,95,95,114,
-    101,112,114,95,95,116,0,0,0,115,2,0,0,0,0,1,
-    122,20,95,77,111,100,117,108,101,76,111,99,107,46,95,95,
-    114,101,112,114,95,95,78,41,9,114,1,0,0,0,114,0,
-    0,0,0,114,2,0,0,0,114,3,0,0,0,114,27,0,
-    0,0,114,32,0,0,0,114,34,0,0,0,114,35,0,0,
-    0,114,40,0,0,0,114,10,0,0,0,114,10,0,0,0,
-    114,10,0,0,0,114,11,0,0,0,114,18,0,0,0,52,
-    0,0,0,115,12,0,0,0,8,4,4,2,8,8,8,12,
-    8,25,8,13,114,18,0,0,0,99,0,0,0,0,0,0,
-    0,0,0,0,0,0,2,0,0,0,64,0,0,0,115,48,
-    0,0,0,101,0,90,1,100,0,90,2,100,1,90,3,100,
-    2,100,3,132,0,90,4,100,4,100,5,132,0,90,5,100,
-    6,100,7,132,0,90,6,100,8,100,9,132,0,90,7,100,
-    10,83,0,41,11,218,16,95,68,117,109,109,121,77,111,100,
-    117,108,101,76,111,99,107,122,86,65,32,115,105,109,112,108,
-    101,32,95,77,111,100,117,108,101,76,111,99,107,32,101,113,
-    117,105,118,97,108,101,110,116,32,102,111,114,32,80,121,116,
-    104,111,110,32,98,117,105,108,100,115,32,119,105,116,104,111,
-    117,116,10,32,32,32,32,109,117,108,116,105,45,116,104,114,
-    101,97,100,105,110,103,32,115,117,112,112,111,114,116,46,99,
-    2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,
-    67,0,0,0,115,16,0,0,0,124,1,124,0,95,0,100,
-    1,124,0,95,1,100,0,83,0,41,2,78,114,19,0,0,
-    0,41,2,114,15,0,0,0,114,24,0,0,0,41,2,114,
-    26,0,0,0,114,15,0,0,0,114,10,0,0,0,114,10,
-    0,0,0,114,11,0,0,0,114,27,0,0,0,124,0,0,
-    0,115,4,0,0,0,0,1,6,1,122,25,95,68,117,109,
-    109,121,77,111,100,117,108,101,76,111,99,107,46,95,95,105,
-    110,105,116,95,95,99,1,0,0,0,0,0,0,0,1,0,
-    0,0,3,0,0,0,67,0,0,0,115,18,0,0,0,124,
-    0,4,0,106,0,100,1,55,0,2,0,95,0,100,2,83,
-    0,41,3,78,114,33,0,0,0,84,41,1,114,24,0,0,
-    0,41,1,114,26,0,0,0,114,10,0,0,0,114,10,0,
-    0,0,114,11,0,0,0,114,34,0,0,0,128,0,0,0,
-    115,4,0,0,0,0,1,14,1,122,24,95,68,117,109,109,
-    121,77,111,100,117,108,101,76,111,99,107,46,97,99,113,117,
-    105,114,101,99,1,0,0,0,0,0,0,0,1,0,0,0,
-    3,0,0,0,67,0,0,0,115,36,0,0,0,124,0,106,
-    0,100,1,107,2,114,18,116,1,100,2,131,1,130,1,124,
-    0,4,0,106,0,100,3,56,0,2,0,95,0,100,0,83,
-    0,41,4,78,114,19,0,0,0,122,31,99,97,110,110,111,
+    0,114,17,0,0,0,48,0,0,0,115,2,0,0,0,8,
+    1,114,17,0,0,0,99,0,0,0,0,0,0,0,0,0,
+    0,0,0,2,0,0,0,64,0,0,0,115,56,0,0,0,
+    101,0,90,1,100,0,90,2,100,1,90,3,100,2,100,3,
+    132,0,90,4,100,4,100,5,132,0,90,5,100,6,100,7,
+    132,0,90,6,100,8,100,9,132,0,90,7,100,10,100,11,
+    132,0,90,8,100,12,83,0,41,13,218,11,95,77,111,100,
+    117,108,101,76,111,99,107,122,169,65,32,114,101,99,117,114,
+    115,105,118,101,32,108,111,99,107,32,105,109,112,108,101,109,
+    101,110,116,97,116,105,111,110,32,119,104,105,99,104,32,105,
+    115,32,97,98,108,101,32,116,111,32,100,101,116,101,99,116,
+    32,100,101,97,100,108,111,99,107,115,10,32,32,32,32,40,
+    101,46,103,46,32,116,104,114,101,97,100,32,49,32,116,114,
+    121,105,110,103,32,116,111,32,116,97,107,101,32,108,111,99,
+    107,115,32,65,32,116,104,101,110,32,66,44,32,97,110,100,
+    32,116,104,114,101,97,100,32,50,32,116,114,121,105,110,103,
+    32,116,111,10,32,32,32,32,116,97,107,101,32,108,111,99,
+    107,115,32,66,32,116,104,101,110,32,65,41,46,10,32,32,
+    32,32,99,2,0,0,0,0,0,0,0,2,0,0,0,2,
+    0,0,0,67,0,0,0,115,48,0,0,0,116,0,106,1,
+    131,0,124,0,95,2,116,0,106,1,131,0,124,0,95,3,
+    124,1,124,0,95,4,100,0,124,0,95,5,100,1,124,0,
+    95,6,100,1,124,0,95,7,100,0,83,0,41,2,78,233,
+    0,0,0,0,41,8,218,7,95,116,104,114,101,97,100,90,
+    13,97,108,108,111,99,97,116,101,95,108,111,99,107,218,4,
+    108,111,99,107,218,6,119,97,107,101,117,112,114,15,0,0,
+    0,218,5,111,119,110,101,114,218,5,99,111,117,110,116,218,
+    7,119,97,105,116,101,114,115,41,2,218,4,115,101,108,102,
+    114,15,0,0,0,114,10,0,0,0,114,10,0,0,0,114,
+    11,0,0,0,218,8,95,95,105,110,105,116,95,95,58,0,
+    0,0,115,12,0,0,0,0,1,10,1,10,1,6,1,6,
+    1,6,1,122,20,95,77,111,100,117,108,101,76,111,99,107,
+    46,95,95,105,110,105,116,95,95,99,1,0,0,0,0,0,
+    0,0,4,0,0,0,2,0,0,0,67,0,0,0,115,64,
+    0,0,0,116,0,106,1,131,0,125,1,124,0,106,2,125,
+    2,120,44,116,3,106,4,124,2,131,1,125,3,124,3,100,
+    0,107,8,114,38,100,1,83,0,124,3,106,2,125,2,124,
+    2,124,1,107,2,114,16,100,2,83,0,113,16,87,0,100,
+    0,83,0,41,3,78,70,84,41,5,114,20,0,0,0,218,
+    9,103,101,116,95,105,100,101,110,116,114,23,0,0,0,218,
+    12,95,98,108,111,99,107,105,110,103,95,111,110,218,3,103,
+    101,116,41,4,114,26,0,0,0,90,2,109,101,218,3,116,
+    105,100,114,21,0,0,0,114,10,0,0,0,114,10,0,0,
+    0,114,11,0,0,0,218,12,104,97,115,95,100,101,97,100,
+    108,111,99,107,66,0,0,0,115,18,0,0,0,0,2,8,
+    1,6,1,2,1,10,1,8,1,4,1,6,1,8,1,122,
+    24,95,77,111,100,117,108,101,76,111,99,107,46,104,97,115,
+    95,100,101,97,100,108,111,99,107,99,1,0,0,0,0,0,
+    0,0,2,0,0,0,16,0,0,0,67,0,0,0,115,168,
+    0,0,0,116,0,106,1,131,0,125,1,124,0,116,2,124,
+    1,60,0,122,138,120,132,124,0,106,3,143,96,1,0,124,
+    0,106,4,100,1,107,2,115,48,124,0,106,5,124,1,107,
+    2,114,72,124,1,124,0,95,5,124,0,4,0,106,4,100,
+    2,55,0,2,0,95,4,100,3,83,0,124,0,106,6,131,
+    0,114,92,116,7,100,4,124,0,22,0,131,1,130,1,124,
+    0,106,8,106,9,100,5,131,1,114,118,124,0,4,0,106,
+    10,100,2,55,0,2,0,95,10,87,0,100,6,81,0,82,
+    0,88,0,124,0,106,8,106,9,131,0,1,0,124,0,106,
+    8,106,11,131,0,1,0,113,20,87,0,87,0,100,6,116,
+    2,124,1,61,0,88,0,100,6,83,0,41,7,122,185,10,
+    32,32,32,32,32,32,32,32,65,99,113,117,105,114,101,32,
+    116,104,101,32,109,111,100,117,108,101,32,108,111,99,107,46,
+    32,32,73,102,32,97,32,112,111,116,101,110,116,105,97,108,
+    32,100,101,97,100,108,111,99,107,32,105,115,32,100,101,116,
+    101,99,116,101,100,44,10,32,32,32,32,32,32,32,32,97,
+    32,95,68,101,97,100,108,111,99,107,69,114,114,111,114,32,
+    105,115,32,114,97,105,115,101,100,46,10,32,32,32,32,32,
+    32,32,32,79,116,104,101,114,119,105,115,101,44,32,116,104,
+    101,32,108,111,99,107,32,105,115,32,97,108,119,97,121,115,
+    32,97,99,113,117,105,114,101,100,32,97,110,100,32,84,114,
+    117,101,32,105,115,32,114,101,116,117,114,110,101,100,46,10,
+    32,32,32,32,32,32,32,32,114,19,0,0,0,233,1,0,
+    0,0,84,122,23,100,101,97,100,108,111,99,107,32,100,101,
+    116,101,99,116,101,100,32,98,121,32,37,114,70,78,41,12,
+    114,20,0,0,0,114,28,0,0,0,114,29,0,0,0,114,
+    21,0,0,0,114,24,0,0,0,114,23,0,0,0,114,32,
+    0,0,0,114,17,0,0,0,114,22,0,0,0,218,7,97,
+    99,113,117,105,114,101,114,25,0,0,0,218,7,114,101,108,
+    101,97,115,101,41,2,114,26,0,0,0,114,31,0,0,0,
+    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,
+    34,0,0,0,78,0,0,0,115,32,0,0,0,0,6,8,
+    1,8,1,2,1,2,1,8,1,20,1,6,1,14,1,4,
+    1,8,1,12,1,12,1,24,2,10,1,18,2,122,19,95,
+    77,111,100,117,108,101,76,111,99,107,46,97,99,113,117,105,
+    114,101,99,1,0,0,0,0,0,0,0,2,0,0,0,10,
+    0,0,0,67,0,0,0,115,122,0,0,0,116,0,106,1,
+    131,0,125,1,124,0,106,2,143,98,1,0,124,0,106,3,
+    124,1,107,3,114,34,116,4,100,1,131,1,130,1,124,0,
+    106,5,100,2,107,4,115,48,116,6,130,1,124,0,4,0,
+    106,5,100,3,56,0,2,0,95,5,124,0,106,5,100,2,
+    107,2,114,108,100,0,124,0,95,3,124,0,106,7,114,108,
+    124,0,4,0,106,7,100,3,56,0,2,0,95,7,124,0,
+    106,8,106,9,131,0,1,0,87,0,100,0,81,0,82,0,
+    88,0,100,0,83,0,41,4,78,122,31,99,97,110,110,111,
     116,32,114,101,108,101,97,115,101,32,117,110,45,97,99,113,
-    117,105,114,101,100,32,108,111,99,107,114,33,0,0,0,41,
-    2,114,24,0,0,0,114,36,0,0,0,41,1,114,26,0,
-    0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,
-    0,114,35,0,0,0,132,0,0,0,115,6,0,0,0,0,
-    1,10,1,8,1,122,24,95,68,117,109,109,121,77,111,100,
-    117,108,101,76,111,99,107,46,114,101,108,101,97,115,101,99,
-    1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,
-    67,0,0,0,115,18,0,0,0,100,1,106,0,124,0,106,
-    1,116,2,124,0,131,1,131,2,83,0,41,2,78,122,28,
-    95,68,117,109,109,121,77,111,100,117,108,101,76,111,99,107,
-    40,123,33,114,125,41,32,97,116,32,123,125,41,3,114,38,
-    0,0,0,114,15,0,0,0,114,39,0,0,0,41,1,114,
-    26,0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,
-    0,0,0,114,40,0,0,0,137,0,0,0,115,2,0,0,
-    0,0,1,122,25,95,68,117,109,109,121,77,111,100,117,108,
-    101,76,111,99,107,46,95,95,114,101,112,114,95,95,78,41,
-    8,114,1,0,0,0,114,0,0,0,0,114,2,0,0,0,
-    114,3,0,0,0,114,27,0,0,0,114,34,0,0,0,114,
-    35,0,0,0,114,40,0,0,0,114,10,0,0,0,114,10,
-    0,0,0,114,10,0,0,0,114,11,0,0,0,114,41,0,
-    0,0,120,0,0,0,115,10,0,0,0,8,2,4,2,8,
-    4,8,4,8,5,114,41,0,0,0,99,0,0,0,0,0,
-    0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,115,
-    36,0,0,0,101,0,90,1,100,0,90,2,100,1,100,2,
-    132,0,90,3,100,3,100,4,132,0,90,4,100,5,100,6,
-    132,0,90,5,100,7,83,0,41,8,218,18,95,77,111,100,
-    117,108,101,76,111,99,107,77,97,110,97,103,101,114,99,2,
-    0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,67,
-    0,0,0,115,16,0,0,0,124,1,124,0,95,0,100,0,
-    124,0,95,1,100,0,83,0,41,1,78,41,2,218,5,95,
-    110,97,109,101,218,5,95,108,111,99,107,41,2,114,26,0,
-    0,0,114,15,0,0,0,114,10,0,0,0,114,10,0,0,
-    0,114,11,0,0,0,114,27,0,0,0,143,0,0,0,115,
-    4,0,0,0,0,1,6,1,122,27,95,77,111,100,117,108,
-    101,76,111,99,107,77,97,110,97,103,101,114,46,95,95,105,
-    110,105,116,95,95,99,1,0,0,0,0,0,0,0,1,0,
-    0,0,2,0,0,0,67,0,0,0,115,26,0,0,0,116,
-    0,124,0,106,1,131,1,124,0,95,2,124,0,106,2,106,
-    3,131,0,1,0,100,0,83,0,41,1,78,41,4,218,16,
-    95,103,101,116,95,109,111,100,117,108,101,95,108,111,99,107,
-    114,43,0,0,0,114,44,0,0,0,114,34,0,0,0,41,
-    1,114,26,0,0,0,114,10,0,0,0,114,10,0,0,0,
-    114,11,0,0,0,218,9,95,95,101,110,116,101,114,95,95,
-    147,0,0,0,115,4,0,0,0,0,1,12,1,122,28,95,
-    77,111,100,117,108,101,76,111,99,107,77,97,110,97,103,101,
-    114,46,95,95,101,110,116,101,114,95,95,99,1,0,0,0,
-    0,0,0,0,3,0,0,0,1,0,0,0,79,0,0,0,
-    115,14,0,0,0,124,0,106,0,106,1,131,0,1,0,100,
-    0,83,0,41,1,78,41,2,114,44,0,0,0,114,35,0,
-    0,0,41,3,114,26,0,0,0,218,4,97,114,103,115,90,
-    6,107,119,97,114,103,115,114,10,0,0,0,114,10,0,0,
-    0,114,11,0,0,0,218,8,95,95,101,120,105,116,95,95,
-    151,0,0,0,115,2,0,0,0,0,1,122,27,95,77,111,
-    100,117,108,101,76,111,99,107,77,97,110,97,103,101,114,46,
-    95,95,101,120,105,116,95,95,78,41,6,114,1,0,0,0,
-    114,0,0,0,0,114,2,0,0,0,114,27,0,0,0,114,
-    46,0,0,0,114,48,0,0,0,114,10,0,0,0,114,10,
-    0,0,0,114,10,0,0,0,114,11,0,0,0,114,42,0,
-    0,0,141,0,0,0,115,6,0,0,0,8,2,8,4,8,
-    4,114,42,0,0,0,99,1,0,0,0,0,0,0,0,3,
-    0,0,0,17,0,0,0,67,0,0,0,115,130,0,0,0,
-    116,0,106,1,131,0,1,0,122,106,121,14,116,2,124,0,
-    25,0,131,0,125,1,87,0,110,24,4,0,116,3,107,10,
-    114,48,1,0,1,0,1,0,100,1,125,1,89,0,110,2,
-    88,0,124,1,100,1,107,8,114,112,116,4,100,1,107,8,
-    114,76,116,5,124,0,131,1,125,1,110,8,116,6,124,0,
-    131,1,125,1,124,0,102,1,100,2,100,3,132,1,125,2,
-    116,7,106,8,124,1,124,2,131,2,116,2,124,0,60,0,
-    87,0,100,1,116,0,106,9,131,0,1,0,88,0,124,1,
-    83,0,41,4,122,139,71,101,116,32,111,114,32,99,114,101,
-    97,116,101,32,116,104,101,32,109,111,100,117,108,101,32,108,
-    111,99,107,32,102,111,114,32,97,32,103,105,118,101,110,32,
-    109,111,100,117,108,101,32,110,97,109,101,46,10,10,32,32,
-    32,32,65,99,113,117,105,114,101,47,114,101,108,101,97,115,
-    101,32,105,110,116,101,114,110,97,108,108,121,32,116,104,101,
-    32,103,108,111,98,97,108,32,105,109,112,111,114,116,32,108,
-    111,99,107,32,116,111,32,112,114,111,116,101,99,116,10,32,
-    32,32,32,95,109,111,100,117,108,101,95,108,111,99,107,115,
-    46,78,99,2,0,0,0,0,0,0,0,2,0,0,0,10,
-    0,0,0,83,0,0,0,115,48,0,0,0,116,0,106,1,
-    131,0,1,0,122,24,116,2,106,3,124,1,131,1,124,0,
-    107,8,114,30,116,2,124,1,61,0,87,0,100,0,116,0,
-    106,4,131,0,1,0,88,0,100,0,83,0,41,1,78,41,
-    5,218,4,95,105,109,112,218,12,97,99,113,117,105,114,101,
-    95,108,111,99,107,218,13,95,109,111,100,117,108,101,95,108,
-    111,99,107,115,114,30,0,0,0,218,12,114,101,108,101,97,
-    115,101,95,108,111,99,107,41,2,218,3,114,101,102,114,15,
-    0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,
-    0,0,218,2,99,98,176,0,0,0,115,10,0,0,0,0,
-    1,8,1,2,4,14,1,10,2,122,28,95,103,101,116,95,
-    109,111,100,117,108,101,95,108,111,99,107,46,60,108,111,99,
-    97,108,115,62,46,99,98,41,10,114,49,0,0,0,114,50,
-    0,0,0,114,51,0,0,0,218,8,75,101,121,69,114,114,
-    111,114,114,20,0,0,0,114,41,0,0,0,114,18,0,0,
-    0,218,8,95,119,101,97,107,114,101,102,114,53,0,0,0,
-    114,52,0,0,0,41,3,114,15,0,0,0,114,21,0,0,
-    0,114,54,0,0,0,114,10,0,0,0,114,10,0,0,0,
-    114,11,0,0,0,114,45,0,0,0,157,0,0,0,115,28,
-    0,0,0,0,6,8,1,2,1,2,1,14,1,14,1,10,
-    2,8,1,8,1,10,2,8,2,12,11,20,2,10,2,114,
-    45,0,0,0,99,1,0,0,0,0,0,0,0,2,0,0,
-    0,11,0,0,0,67,0,0,0,115,54,0,0,0,116,0,
-    124,0,131,1,125,1,121,12,124,1,106,1,131,0,1,0,
-    87,0,110,20,4,0,116,2,107,10,114,40,1,0,1,0,
-    1,0,89,0,110,10,88,0,124,1,106,3,131,0,1,0,
-    100,1,83,0,41,2,122,189,65,99,113,117,105,114,101,115,
-    32,116,104,101,110,32,114,101,108,101,97,115,101,115,32,116,
-    104,101,32,109,111,100,117,108,101,32,108,111,99,107,32,102,
-    111,114,32,97,32,103,105,118,101,110,32,109,111,100,117,108,
-    101,32,110,97,109,101,46,10,10,32,32,32,32,84,104,105,
-    115,32,105,115,32,117,115,101,100,32,116,111,32,101,110,115,
-    117,114,101,32,97,32,109,111,100,117,108,101,32,105,115,32,
-    99,111,109,112,108,101,116,101,108,121,32,105,110,105,116,105,
-    97,108,105,122,101,100,44,32,105,110,32,116,104,101,10,32,
-    32,32,32,101,118,101,110,116,32,105,116,32,105,115,32,98,
-    101,105,110,103,32,105,109,112,111,114,116,101,100,32,98,121,
-    32,97,110,111,116,104,101,114,32,116,104,114,101,97,100,46,
-    10,32,32,32,32,78,41,4,114,45,0,0,0,114,34,0,
-    0,0,114,17,0,0,0,114,35,0,0,0,41,2,114,15,
-    0,0,0,114,21,0,0,0,114,10,0,0,0,114,10,0,
-    0,0,114,11,0,0,0,218,19,95,108,111,99,107,95,117,
-    110,108,111,99,107,95,109,111,100,117,108,101,194,0,0,0,
-    115,12,0,0,0,0,6,8,1,2,1,12,1,14,3,6,
-    2,114,57,0,0,0,99,1,0,0,0,0,0,0,0,3,
-    0,0,0,3,0,0,0,79,0,0,0,115,10,0,0,0,
-    124,0,124,1,124,2,142,1,83,0,41,1,97,46,1,0,
-    0,114,101,109,111,118,101,95,105,109,112,111,114,116,108,105,
-    98,95,102,114,97,109,101,115,32,105,110,32,105,109,112,111,
-    114,116,46,99,32,119,105,108,108,32,97,108,119,97,121,115,
-    32,114,101,109,111,118,101,32,115,101,113,117,101,110,99,101,
-    115,10,32,32,32,32,111,102,32,105,109,112,111,114,116,108,
-    105,98,32,102,114,97,109,101,115,32,116,104,97,116,32,101,
-    110,100,32,119,105,116,104,32,97,32,99,97,108,108,32,116,
-    111,32,116,104,105,115,32,102,117,110,99,116,105,111,110,10,
-    10,32,32,32,32,85,115,101,32,105,116,32,105,110,115,116,
-    101,97,100,32,111,102,32,97,32,110,111,114,109,97,108,32,
-    99,97,108,108,32,105,110,32,112,108,97,99,101,115,32,119,
-    104,101,114,101,32,105,110,99,108,117,100,105,110,103,32,116,
-    104,101,32,105,109,112,111,114,116,108,105,98,10,32,32,32,
-    32,102,114,97,109,101,115,32,105,110,116,114,111,100,117,99,
-    101,115,32,117,110,119,97,110,116,101,100,32,110,111,105,115,
-    101,32,105,110,116,111,32,116,104,101,32,116,114,97,99,101,
-    98,97,99,107,32,40,101,46,103,46,32,119,104,101,110,32,
-    101,120,101,99,117,116,105,110,103,10,32,32,32,32,109,111,
-    100,117,108,101,32,99,111,100,101,41,10,32,32,32,32,114,
-    10,0,0,0,41,3,218,1,102,114,47,0,0,0,90,4,
-    107,119,100,115,114,10,0,0,0,114,10,0,0,0,114,11,
-    0,0,0,218,25,95,99,97,108,108,95,119,105,116,104,95,
-    102,114,97,109,101,115,95,114,101,109,111,118,101,100,211,0,
-    0,0,115,2,0,0,0,0,8,114,59,0,0,0,114,33,
-    0,0,0,41,1,218,9,118,101,114,98,111,115,105,116,121,
-    99,1,0,0,0,1,0,0,0,3,0,0,0,4,0,0,
-    0,71,0,0,0,115,54,0,0,0,116,0,106,1,106,2,
-    124,1,107,5,114,50,124,0,106,3,100,6,131,1,115,30,
-    100,3,124,0,23,0,125,0,116,4,124,0,106,5,124,2,
-    142,0,116,0,106,6,100,4,141,2,1,0,100,5,83,0,
-    41,7,122,61,80,114,105,110,116,32,116,104,101,32,109,101,
-    115,115,97,103,101,32,116,111,32,115,116,100,101,114,114,32,
-    105,102,32,45,118,47,80,89,84,72,79,78,86,69,82,66,
-    79,83,69,32,105,115,32,116,117,114,110,101,100,32,111,110,
-    46,250,1,35,250,7,105,109,112,111,114,116,32,122,2,35,
-    32,41,1,90,4,102,105,108,101,78,41,2,114,61,0,0,
-    0,114,62,0,0,0,41,7,114,14,0,0,0,218,5,102,
-    108,97,103,115,218,7,118,101,114,98,111,115,101,218,10,115,
-    116,97,114,116,115,119,105,116,104,218,5,112,114,105,110,116,
-    114,38,0,0,0,218,6,115,116,100,101,114,114,41,3,218,
-    7,109,101,115,115,97,103,101,114,60,0,0,0,114,47,0,
+    117,105,114,101,100,32,108,111,99,107,114,19,0,0,0,114,
+    33,0,0,0,41,10,114,20,0,0,0,114,28,0,0,0,
+    114,21,0,0,0,114,23,0,0,0,218,12,82,117,110,116,
+    105,109,101,69,114,114,111,114,114,24,0,0,0,218,14,65,
+    115,115,101,114,116,105,111,110,69,114,114,111,114,114,25,0,
+    0,0,114,22,0,0,0,114,35,0,0,0,41,2,114,26,
+    0,0,0,114,31,0,0,0,114,10,0,0,0,114,10,0,
+    0,0,114,11,0,0,0,114,35,0,0,0,103,0,0,0,
+    115,22,0,0,0,0,1,8,1,8,1,10,1,8,1,14,
+    1,14,1,10,1,6,1,6,1,14,1,122,19,95,77,111,
+    100,117,108,101,76,111,99,107,46,114,101,108,101,97,115,101,
+    99,1,0,0,0,0,0,0,0,1,0,0,0,4,0,0,
+    0,67,0,0,0,115,18,0,0,0,100,1,106,0,124,0,
+    106,1,116,2,124,0,131,1,131,2,83,0,41,2,78,122,
+    23,95,77,111,100,117,108,101,76,111,99,107,40,123,33,114,
+    125,41,32,97,116,32,123,125,41,3,218,6,102,111,114,109,
+    97,116,114,15,0,0,0,218,2,105,100,41,1,114,26,0,
     0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,
-    0,218,16,95,118,101,114,98,111,115,101,95,109,101,115,115,
-    97,103,101,222,0,0,0,115,8,0,0,0,0,2,12,1,
-    10,1,8,1,114,69,0,0,0,99,1,0,0,0,0,0,
-    0,0,2,0,0,0,3,0,0,0,3,0,0,0,115,26,
-    0,0,0,135,0,102,1,100,1,100,2,132,8,125,1,116,
-    0,124,1,136,0,131,2,1,0,124,1,83,0,41,3,122,
-    49,68,101,99,111,114,97,116,111,114,32,116,111,32,118,101,
-    114,105,102,121,32,116,104,101,32,110,97,109,101,100,32,109,
-    111,100,117,108,101,32,105,115,32,98,117,105,108,116,45,105,
-    110,46,99,2,0,0,0,0,0,0,0,2,0,0,0,4,
-    0,0,0,19,0,0,0,115,38,0,0,0,124,1,116,0,
-    106,1,107,7,114,28,116,2,100,1,106,3,124,1,131,1,
-    124,1,100,2,141,2,130,1,136,0,124,0,124,1,131,2,
-    83,0,41,3,78,122,29,123,33,114,125,32,105,115,32,110,
-    111,116,32,97,32,98,117,105,108,116,45,105,110,32,109,111,
-    100,117,108,101,41,1,114,15,0,0,0,41,4,114,14,0,
-    0,0,218,20,98,117,105,108,116,105,110,95,109,111,100,117,
-    108,101,95,110,97,109,101,115,218,11,73,109,112,111,114,116,
-    69,114,114,111,114,114,38,0,0,0,41,2,114,26,0,0,
-    0,218,8,102,117,108,108,110,97,109,101,41,1,218,3,102,
-    120,110,114,10,0,0,0,114,11,0,0,0,218,25,95,114,
-    101,113,117,105,114,101,115,95,98,117,105,108,116,105,110,95,
-    119,114,97,112,112,101,114,232,0,0,0,115,8,0,0,0,
-    0,1,10,1,10,1,8,1,122,52,95,114,101,113,117,105,
-    114,101,115,95,98,117,105,108,116,105,110,46,60,108,111,99,
-    97,108,115,62,46,95,114,101,113,117,105,114,101,115,95,98,
-    117,105,108,116,105,110,95,119,114,97,112,112,101,114,41,1,
-    114,12,0,0,0,41,2,114,73,0,0,0,114,74,0,0,
-    0,114,10,0,0,0,41,1,114,73,0,0,0,114,11,0,
-    0,0,218,17,95,114,101,113,117,105,114,101,115,95,98,117,
-    105,108,116,105,110,230,0,0,0,115,6,0,0,0,0,2,
-    12,5,10,1,114,75,0,0,0,99,1,0,0,0,0,0,
-    0,0,2,0,0,0,3,0,0,0,3,0,0,0,115,26,
-    0,0,0,135,0,102,1,100,1,100,2,132,8,125,1,116,
-    0,124,1,136,0,131,2,1,0,124,1,83,0,41,3,122,
-    47,68,101,99,111,114,97,116,111,114,32,116,111,32,118,101,
-    114,105,102,121,32,116,104,101,32,110,97,109,101,100,32,109,
-    111,100,117,108,101,32,105,115,32,102,114,111,122,101,110,46,
-    99,2,0,0,0,0,0,0,0,2,0,0,0,4,0,0,
-    0,19,0,0,0,115,38,0,0,0,116,0,106,1,124,1,
-    131,1,115,28,116,2,100,1,106,3,124,1,131,1,124,1,
-    100,2,141,2,130,1,136,0,124,0,124,1,131,2,83,0,
-    41,3,78,122,27,123,33,114,125,32,105,115,32,110,111,116,
-    32,97,32,102,114,111,122,101,110,32,109,111,100,117,108,101,
-    41,1,114,15,0,0,0,41,4,114,49,0,0,0,218,9,
-    105,115,95,102,114,111,122,101,110,114,71,0,0,0,114,38,
-    0,0,0,41,2,114,26,0,0,0,114,72,0,0,0,41,
-    1,114,73,0,0,0,114,10,0,0,0,114,11,0,0,0,
-    218,24,95,114,101,113,117,105,114,101,115,95,102,114,111,122,
-    101,110,95,119,114,97,112,112,101,114,243,0,0,0,115,8,
-    0,0,0,0,1,10,1,10,1,8,1,122,50,95,114,101,
-    113,117,105,114,101,115,95,102,114,111,122,101,110,46,60,108,
-    111,99,97,108,115,62,46,95,114,101,113,117,105,114,101,115,
-    95,102,114,111,122,101,110,95,119,114,97,112,112,101,114,41,
-    1,114,12,0,0,0,41,2,114,73,0,0,0,114,77,0,
-    0,0,114,10,0,0,0,41,1,114,73,0,0,0,114,11,
-    0,0,0,218,16,95,114,101,113,117,105,114,101,115,95,102,
-    114,111,122,101,110,241,0,0,0,115,6,0,0,0,0,2,
-    12,5,10,1,114,78,0,0,0,99,2,0,0,0,0,0,
-    0,0,4,0,0,0,3,0,0,0,67,0,0,0,115,62,
-    0,0,0,116,0,124,1,124,0,131,2,125,2,124,1,116,
-    1,106,2,107,6,114,50,116,1,106,2,124,1,25,0,125,
-    3,116,3,124,2,124,3,131,2,1,0,116,1,106,2,124,
-    1,25,0,83,0,116,4,124,2,131,1,83,0,100,1,83,
-    0,41,2,122,128,76,111,97,100,32,116,104,101,32,115,112,
-    101,99,105,102,105,101,100,32,109,111,100,117,108,101,32,105,
-    110,116,111,32,115,121,115,46,109,111,100,117,108,101,115,32,
-    97,110,100,32,114,101,116,117,114,110,32,105,116,46,10,10,
-    32,32,32,32,84,104,105,115,32,109,101,116,104,111,100,32,
-    105,115,32,100,101,112,114,101,99,97,116,101,100,46,32,32,
-    85,115,101,32,108,111,97,100,101,114,46,101,120,101,99,95,
-    109,111,100,117,108,101,32,105,110,115,116,101,97,100,46,10,
-    10,32,32,32,32,78,41,5,218,16,115,112,101,99,95,102,
-    114,111,109,95,108,111,97,100,101,114,114,14,0,0,0,218,
-    7,109,111,100,117,108,101,115,218,5,95,101,120,101,99,218,
-    5,95,108,111,97,100,41,4,114,26,0,0,0,114,72,0,
-    0,0,218,4,115,112,101,99,218,6,109,111,100,117,108,101,
-    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,218,
-    17,95,108,111,97,100,95,109,111,100,117,108,101,95,115,104,
-    105,109,253,0,0,0,115,12,0,0,0,0,6,10,1,10,
-    1,10,1,10,1,10,2,114,85,0,0,0,99,1,0,0,
-    0,0,0,0,0,5,0,0,0,35,0,0,0,67,0,0,
-    0,115,216,0,0,0,116,0,124,0,100,1,100,0,131,3,
-    125,1,116,1,124,1,100,2,131,2,114,54,121,10,124,1,
-    106,2,124,0,131,1,83,0,4,0,116,3,107,10,114,52,
-    1,0,1,0,1,0,89,0,110,2,88,0,121,10,124,0,
-    106,4,125,2,87,0,110,20,4,0,116,5,107,10,114,84,
-    1,0,1,0,1,0,89,0,110,18,88,0,124,2,100,0,
-    107,9,114,102,116,6,124,2,131,1,83,0,121,10,124,0,
-    106,7,125,3,87,0,110,24,4,0,116,5,107,10,114,136,
-    1,0,1,0,1,0,100,3,125,3,89,0,110,2,88,0,
-    121,10,124,0,106,8,125,4,87,0,110,50,4,0,116,5,
-    107,10,114,198,1,0,1,0,1,0,124,1,100,0,107,8,
-    114,182,100,4,106,9,124,3,131,1,83,0,100,5,106,9,
-    124,3,124,1,131,2,83,0,89,0,110,14,88,0,100,6,
-    106,9,124,3,124,4,131,2,83,0,100,0,83,0,41,7,
-    78,218,10,95,95,108,111,97,100,101,114,95,95,218,11,109,
-    111,100,117,108,101,95,114,101,112,114,250,1,63,122,13,60,
-    109,111,100,117,108,101,32,123,33,114,125,62,122,20,60,109,
-    111,100,117,108,101,32,123,33,114,125,32,40,123,33,114,125,
-    41,62,122,23,60,109,111,100,117,108,101,32,123,33,114,125,
-    32,102,114,111,109,32,123,33,114,125,62,41,10,114,6,0,
-    0,0,114,4,0,0,0,114,87,0,0,0,218,9,69,120,
-    99,101,112,116,105,111,110,218,8,95,95,115,112,101,99,95,
-    95,218,14,65,116,116,114,105,98,117,116,101,69,114,114,111,
-    114,218,22,95,109,111,100,117,108,101,95,114,101,112,114,95,
-    102,114,111,109,95,115,112,101,99,114,1,0,0,0,218,8,
-    95,95,102,105,108,101,95,95,114,38,0,0,0,41,5,114,
-    84,0,0,0,218,6,108,111,97,100,101,114,114,83,0,0,
-    0,114,15,0,0,0,218,8,102,105,108,101,110,97,109,101,
-    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,218,
-    12,95,109,111,100,117,108,101,95,114,101,112,114,13,1,0,
-    0,115,46,0,0,0,0,2,12,1,10,4,2,1,10,1,
-    14,1,6,1,2,1,10,1,14,1,6,2,8,1,8,4,
-    2,1,10,1,14,1,10,1,2,1,10,1,14,1,8,1,
-    10,2,18,2,114,96,0,0,0,99,0,0,0,0,0,0,
-    0,0,0,0,0,0,2,0,0,0,64,0,0,0,115,36,
-    0,0,0,101,0,90,1,100,0,90,2,100,1,100,2,132,
-    0,90,3,100,3,100,4,132,0,90,4,100,5,100,6,132,
-    0,90,5,100,7,83,0,41,8,218,17,95,105,110,115,116,
-    97,108,108,101,100,95,115,97,102,101,108,121,99,2,0,0,
-    0,0,0,0,0,2,0,0,0,2,0,0,0,67,0,0,
-    0,115,18,0,0,0,124,1,124,0,95,0,124,1,106,1,
-    124,0,95,2,100,0,83,0,41,1,78,41,3,218,7,95,
-    109,111,100,117,108,101,114,90,0,0,0,218,5,95,115,112,
-    101,99,41,2,114,26,0,0,0,114,84,0,0,0,114,10,
-    0,0,0,114,10,0,0,0,114,11,0,0,0,114,27,0,
-    0,0,51,1,0,0,115,4,0,0,0,0,1,6,1,122,
-    26,95,105,110,115,116,97,108,108,101,100,95,115,97,102,101,
-    108,121,46,95,95,105,110,105,116,95,95,99,1,0,0,0,
+    0,218,8,95,95,114,101,112,114,95,95,116,0,0,0,115,
+    2,0,0,0,0,1,122,20,95,77,111,100,117,108,101,76,
+    111,99,107,46,95,95,114,101,112,114,95,95,78,41,9,114,
+    1,0,0,0,114,0,0,0,0,114,2,0,0,0,114,3,
+    0,0,0,114,27,0,0,0,114,32,0,0,0,114,34,0,
+    0,0,114,35,0,0,0,114,40,0,0,0,114,10,0,0,
+    0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
+    114,18,0,0,0,52,0,0,0,115,12,0,0,0,8,4,
+    4,2,8,8,8,12,8,25,8,13,114,18,0,0,0,99,
+    0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,
+    64,0,0,0,115,48,0,0,0,101,0,90,1,100,0,90,
+    2,100,1,90,3,100,2,100,3,132,0,90,4,100,4,100,
+    5,132,0,90,5,100,6,100,7,132,0,90,6,100,8,100,
+    9,132,0,90,7,100,10,83,0,41,11,218,16,95,68,117,
+    109,109,121,77,111,100,117,108,101,76,111,99,107,122,86,65,
+    32,115,105,109,112,108,101,32,95,77,111,100,117,108,101,76,
+    111,99,107,32,101,113,117,105,118,97,108,101,110,116,32,102,
+    111,114,32,80,121,116,104,111,110,32,98,117,105,108,100,115,
+    32,119,105,116,104,111,117,116,10,32,32,32,32,109,117,108,
+    116,105,45,116,104,114,101,97,100,105,110,103,32,115,117,112,
+    112,111,114,116,46,99,2,0,0,0,0,0,0,0,2,0,
+    0,0,2,0,0,0,67,0,0,0,115,16,0,0,0,124,
+    1,124,0,95,0,100,1,124,0,95,1,100,0,83,0,41,
+    2,78,114,19,0,0,0,41,2,114,15,0,0,0,114,24,
+    0,0,0,41,2,114,26,0,0,0,114,15,0,0,0,114,
+    10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,27,
+    0,0,0,124,0,0,0,115,4,0,0,0,0,1,6,1,
+    122,25,95,68,117,109,109,121,77,111,100,117,108,101,76,111,
+    99,107,46,95,95,105,110,105,116,95,95,99,1,0,0,0,
     0,0,0,0,1,0,0,0,3,0,0,0,67,0,0,0,
-    115,28,0,0,0,100,1,124,0,106,0,95,1,124,0,106,
-    2,116,3,106,4,124,0,106,0,106,5,60,0,100,0,83,
-    0,41,2,78,84,41,6,114,99,0,0,0,218,13,95,105,
-    110,105,116,105,97,108,105,122,105,110,103,114,98,0,0,0,
-    114,14,0,0,0,114,80,0,0,0,114,15,0,0,0,41,
-    1,114,26,0,0,0,114,10,0,0,0,114,10,0,0,0,
-    114,11,0,0,0,114,46,0,0,0,55,1,0,0,115,4,
-    0,0,0,0,4,8,1,122,27,95,105,110,115,116,97,108,
-    108,101,100,95,115,97,102,101,108,121,46,95,95,101,110,116,
-    101,114,95,95,99,1,0,0,0,0,0,0,0,3,0,0,
-    0,17,0,0,0,71,0,0,0,115,98,0,0,0,122,82,
-    124,0,106,0,125,2,116,1,100,1,100,2,132,0,124,1,
-    68,0,131,1,131,1,114,64,121,14,116,2,106,3,124,2,
-    106,4,61,0,87,0,113,80,4,0,116,5,107,10,114,60,
-    1,0,1,0,1,0,89,0,113,80,88,0,110,16,116,6,
-    100,3,124,2,106,4,124,2,106,7,131,3,1,0,87,0,
-    100,0,100,4,124,0,106,0,95,8,88,0,100,0,83,0,
-    41,5,78,99,1,0,0,0,0,0,0,0,2,0,0,0,
-    3,0,0,0,115,0,0,0,115,22,0,0,0,124,0,93,
-    14,125,1,124,1,100,0,107,9,86,0,1,0,113,2,100,
-    0,83,0,41,1,78,114,10,0,0,0,41,2,90,2,46,
-    48,90,3,97,114,103,114,10,0,0,0,114,10,0,0,0,
-    114,11,0,0,0,250,9,60,103,101,110,101,120,112,114,62,
-    65,1,0,0,115,2,0,0,0,4,0,122,45,95,105,110,
-    115,116,97,108,108,101,100,95,115,97,102,101,108,121,46,95,
-    95,101,120,105,116,95,95,46,60,108,111,99,97,108,115,62,
-    46,60,103,101,110,101,120,112,114,62,122,18,105,109,112,111,
-    114,116,32,123,33,114,125,32,35,32,123,33,114,125,70,41,
-    9,114,99,0,0,0,218,3,97,110,121,114,14,0,0,0,
-    114,80,0,0,0,114,15,0,0,0,114,55,0,0,0,114,
-    69,0,0,0,114,94,0,0,0,114,100,0,0,0,41,3,
-    114,26,0,0,0,114,47,0,0,0,114,83,0,0,0,114,
-    10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,48,
-    0,0,0,62,1,0,0,115,18,0,0,0,0,1,2,1,
-    6,1,18,1,2,1,14,1,14,1,8,2,20,2,122,26,
-    95,105,110,115,116,97,108,108,101,100,95,115,97,102,101,108,
-    121,46,95,95,101,120,105,116,95,95,78,41,6,114,1,0,
-    0,0,114,0,0,0,0,114,2,0,0,0,114,27,0,0,
-    0,114,46,0,0,0,114,48,0,0,0,114,10,0,0,0,
-    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,
-    97,0,0,0,49,1,0,0,115,6,0,0,0,8,2,8,
-    4,8,7,114,97,0,0,0,99,0,0,0,0,0,0,0,
-    0,0,0,0,0,4,0,0,0,64,0,0,0,115,114,0,
-    0,0,101,0,90,1,100,0,90,2,100,1,90,3,100,2,
-    100,2,100,2,100,3,156,3,100,4,100,5,132,2,90,4,
-    100,6,100,7,132,0,90,5,100,8,100,9,132,0,90,6,
-    101,7,100,10,100,11,132,0,131,1,90,8,101,8,106,9,
-    100,12,100,11,132,0,131,1,90,8,101,7,100,13,100,14,
-    132,0,131,1,90,10,101,7,100,15,100,16,132,0,131,1,
-    90,11,101,11,106,9,100,17,100,16,132,0,131,1,90,11,
-    100,2,83,0,41,18,218,10,77,111,100,117,108,101,83,112,
-    101,99,97,208,5,0,0,84,104,101,32,115,112,101,99,105,
-    102,105,99,97,116,105,111,110,32,102,111,114,32,97,32,109,
-    111,100,117,108,101,44,32,117,115,101,100,32,102,111,114,32,
-    108,111,97,100,105,110,103,46,10,10,32,32,32,32,65,32,
-    109,111,100,117,108,101,39,115,32,115,112,101,99,32,105,115,
-    32,116,104,101,32,115,111,117,114,99,101,32,102,111,114,32,
-    105,110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,
-    116,32,116,104,101,32,109,111,100,117,108,101,46,32,32,70,
-    111,114,10,32,32,32,32,100,97,116,97,32,97,115,115,111,
-    99,105,97,116,101,100,32,119,105,116,104,32,116,104,101,32,
-    109,111,100,117,108,101,44,32,105,110,99,108,117,100,105,110,
-    103,32,115,111,117,114,99,101,44,32,117,115,101,32,116,104,
-    101,32,115,112,101,99,39,115,10,32,32,32,32,108,111,97,
-    100,101,114,46,10,10,32,32,32,32,96,110,97,109,101,96,
-    32,105,115,32,116,104,101,32,97,98,115,111,108,117,116,101,
-    32,110,97,109,101,32,111,102,32,116,104,101,32,109,111,100,
-    117,108,101,46,32,32,96,108,111,97,100,101,114,96,32,105,
-    115,32,116,104,101,32,108,111,97,100,101,114,10,32,32,32,
-    32,116,111,32,117,115,101,32,119,104,101,110,32,108,111,97,
-    100,105,110,103,32,116,104,101,32,109,111,100,117,108,101,46,
-    32,32,96,112,97,114,101,110,116,96,32,105,115,32,116,104,
-    101,32,110,97,109,101,32,111,102,32,116,104,101,10,32,32,
-    32,32,112,97,99,107,97,103,101,32,116,104,101,32,109,111,
-    100,117,108,101,32,105,115,32,105,110,46,32,32,84,104,101,
-    32,112,97,114,101,110,116,32,105,115,32,100,101,114,105,118,
-    101,100,32,102,114,111,109,32,116,104,101,32,110,97,109,101,
-    46,10,10,32,32,32,32,96,105,115,95,112,97,99,107,97,
-    103,101,96,32,100,101,116,101,114,109,105,110,101,115,32,105,
-    102,32,116,104,101,32,109,111,100,117,108,101,32,105,115,32,
-    99,111,110,115,105,100,101,114,101,100,32,97,32,112,97,99,
-    107,97,103,101,32,111,114,10,32,32,32,32,110,111,116,46,
-    32,32,79,110,32,109,111,100,117,108,101,115,32,116,104,105,
-    115,32,105,115,32,114,101,102,108,101,99,116,101,100,32,98,
-    121,32,116,104,101,32,96,95,95,112,97,116,104,95,95,96,
-    32,97,116,116,114,105,98,117,116,101,46,10,10,32,32,32,
-    32,96,111,114,105,103,105,110,96,32,105,115,32,116,104,101,
-    32,115,112,101,99,105,102,105,99,32,108,111,99,97,116,105,
-    111,110,32,117,115,101,100,32,98,121,32,116,104,101,32,108,
-    111,97,100,101,114,32,102,114,111,109,32,119,104,105,99,104,
-    32,116,111,10,32,32,32,32,108,111,97,100,32,116,104,101,
-    32,109,111,100,117,108,101,44,32,105,102,32,116,104,97,116,
-    32,105,110,102,111,114,109,97,116,105,111,110,32,105,115,32,
-    97,118,97,105,108,97,98,108,101,46,32,32,87,104,101,110,
-    32,102,105,108,101,110,97,109,101,32,105,115,10,32,32,32,
-    32,115,101,116,44,32,111,114,105,103,105,110,32,119,105,108,
-    108,32,109,97,116,99,104,46,10,10,32,32,32,32,96,104,
-    97,115,95,108,111,99,97,116,105,111,110,96,32,105,110,100,
-    105,99,97,116,101,115,32,116,104,97,116,32,97,32,115,112,
-    101,99,39,115,32,34,111,114,105,103,105,110,34,32,114,101,
-    102,108,101,99,116,115,32,97,32,108,111,99,97,116,105,111,
-    110,46,10,32,32,32,32,87,104,101,110,32,116,104,105,115,
-    32,105,115,32,84,114,117,101,44,32,96,95,95,102,105,108,
-    101,95,95,96,32,97,116,116,114,105,98,117,116,101,32,111,
-    102,32,116,104,101,32,109,111,100,117,108,101,32,105,115,32,
-    115,101,116,46,10,10,32,32,32,32,96,99,97,99,104,101,
-    100,96,32,105,115,32,116,104,101,32,108,111,99,97,116,105,
-    111,110,32,111,102,32,116,104,101,32,99,97,99,104,101,100,
-    32,98,121,116,101,99,111,100,101,32,102,105,108,101,44,32,
-    105,102,32,97,110,121,46,32,32,73,116,10,32,32,32,32,
-    99,111,114,114,101,115,112,111,110,100,115,32,116,111,32,116,
-    104,101,32,96,95,95,99,97,99,104,101,100,95,95,96,32,
-    97,116,116,114,105,98,117,116,101,46,10,10,32,32,32,32,
-    96,115,117,98,109,111,100,117,108,101,95,115,101,97,114,99,
-    104,95,108,111,99,97,116,105,111,110,115,96,32,105,115,32,
-    116,104,101,32,115,101,113,117,101,110,99,101,32,111,102,32,
-    112,97,116,104,32,101,110,116,114,105,101,115,32,116,111,10,
-    32,32,32,32,115,101,97,114,99,104,32,119,104,101,110,32,
-    105,109,112,111,114,116,105,110,103,32,115,117,98,109,111,100,
-    117,108,101,115,46,32,32,73,102,32,115,101,116,44,32,105,
-    115,95,112,97,99,107,97,103,101,32,115,104,111,117,108,100,
-    32,98,101,10,32,32,32,32,84,114,117,101,45,45,97,110,
-    100,32,70,97,108,115,101,32,111,116,104,101,114,119,105,115,
-    101,46,10,10,32,32,32,32,80,97,99,107,97,103,101,115,
-    32,97,114,101,32,115,105,109,112,108,121,32,109,111,100,117,
-    108,101,115,32,116,104,97,116,32,40,109,97,121,41,32,104,
-    97,118,101,32,115,117,98,109,111,100,117,108,101,115,46,32,
-    32,73,102,32,97,32,115,112,101,99,10,32,32,32,32,104,
-    97,115,32,97,32,110,111,110,45,78,111,110,101,32,118,97,
-    108,117,101,32,105,110,32,96,115,117,98,109,111,100,117,108,
-    101,95,115,101,97,114,99,104,95,108,111,99,97,116,105,111,
-    110,115,96,44,32,116,104,101,32,105,109,112,111,114,116,10,
-    32,32,32,32,115,121,115,116,101,109,32,119,105,108,108,32,
-    99,111,110,115,105,100,101,114,32,109,111,100,117,108,101,115,
-    32,108,111,97,100,101,100,32,102,114,111,109,32,116,104,101,
-    32,115,112,101,99,32,97,115,32,112,97,99,107,97,103,101,
-    115,46,10,10,32,32,32,32,79,110,108,121,32,102,105,110,
-    100,101,114,115,32,40,115,101,101,32,105,109,112,111,114,116,
-    108,105,98,46,97,98,99,46,77,101,116,97,80,97,116,104,
-    70,105,110,100,101,114,32,97,110,100,10,32,32,32,32,105,
-    109,112,111,114,116,108,105,98,46,97,98,99,46,80,97,116,
-    104,69,110,116,114,121,70,105,110,100,101,114,41,32,115,104,
-    111,117,108,100,32,109,111,100,105,102,121,32,77,111,100,117,
-    108,101,83,112,101,99,32,105,110,115,116,97,110,99,101,115,
-    46,10,10,32,32,32,32,78,41,3,218,6,111,114,105,103,
-    105,110,218,12,108,111,97,100,101,114,95,115,116,97,116,101,
-    218,10,105,115,95,112,97,99,107,97,103,101,99,3,0,0,
-    0,3,0,0,0,6,0,0,0,2,0,0,0,67,0,0,
-    0,115,54,0,0,0,124,1,124,0,95,0,124,2,124,0,
-    95,1,124,3,124,0,95,2,124,4,124,0,95,3,124,5,
-    114,32,103,0,110,2,100,0,124,0,95,4,100,1,124,0,
-    95,5,100,0,124,0,95,6,100,0,83,0,41,2,78,70,
-    41,7,114,15,0,0,0,114,94,0,0,0,114,104,0,0,
-    0,114,105,0,0,0,218,26,115,117,98,109,111,100,117,108,
-    101,95,115,101,97,114,99,104,95,108,111,99,97,116,105,111,
-    110,115,218,13,95,115,101,116,95,102,105,108,101,97,116,116,
-    114,218,7,95,99,97,99,104,101,100,41,6,114,26,0,0,
-    0,114,15,0,0,0,114,94,0,0,0,114,104,0,0,0,
-    114,105,0,0,0,114,106,0,0,0,114,10,0,0,0,114,
-    10,0,0,0,114,11,0,0,0,114,27,0,0,0,113,1,
-    0,0,115,14,0,0,0,0,2,6,1,6,1,6,1,6,
-    1,14,3,6,1,122,19,77,111,100,117,108,101,83,112,101,
-    99,46,95,95,105,110,105,116,95,95,99,1,0,0,0,0,
-    0,0,0,2,0,0,0,4,0,0,0,67,0,0,0,115,
-    102,0,0,0,100,1,106,0,124,0,106,1,131,1,100,2,
-    106,0,124,0,106,2,131,1,103,2,125,1,124,0,106,3,
-    100,0,107,9,114,52,124,1,106,4,100,3,106,0,124,0,
-    106,3,131,1,131,1,1,0,124,0,106,5,100,0,107,9,
-    114,80,124,1,106,4,100,4,106,0,124,0,106,5,131,1,
-    131,1,1,0,100,5,106,0,124,0,106,6,106,7,100,6,
-    106,8,124,1,131,1,131,2,83,0,41,7,78,122,9,110,
-    97,109,101,61,123,33,114,125,122,11,108,111,97,100,101,114,
-    61,123,33,114,125,122,11,111,114,105,103,105,110,61,123,33,
-    114,125,122,29,115,117,98,109,111,100,117,108,101,95,115,101,
-    97,114,99,104,95,108,111,99,97,116,105,111,110,115,61,123,
-    125,122,6,123,125,40,123,125,41,122,2,44,32,41,9,114,
-    38,0,0,0,114,15,0,0,0,114,94,0,0,0,114,104,
-    0,0,0,218,6,97,112,112,101,110,100,114,107,0,0,0,
-    218,9,95,95,99,108,97,115,115,95,95,114,1,0,0,0,
-    218,4,106,111,105,110,41,2,114,26,0,0,0,114,47,0,
-    0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,
-    0,114,40,0,0,0,125,1,0,0,115,16,0,0,0,0,
-    1,10,1,14,1,10,1,18,1,10,1,8,1,10,1,122,
-    19,77,111,100,117,108,101,83,112,101,99,46,95,95,114,101,
-    112,114,95,95,99,2,0,0,0,0,0,0,0,3,0,0,
-    0,11,0,0,0,67,0,0,0,115,102,0,0,0,124,0,
-    106,0,125,2,121,70,124,0,106,1,124,1,106,1,107,2,
-    111,76,124,0,106,2,124,1,106,2,107,2,111,76,124,0,
-    106,3,124,1,106,3,107,2,111,76,124,2,124,1,106,0,
-    107,2,111,76,124,0,106,4,124,1,106,4,107,2,111,76,
-    124,0,106,5,124,1,106,5,107,2,83,0,4,0,116,6,
-    107,10,114,96,1,0,1,0,1,0,100,1,83,0,88,0,
-    100,0,83,0,41,2,78,70,41,7,114,107,0,0,0,114,
-    15,0,0,0,114,94,0,0,0,114,104,0,0,0,218,6,
-    99,97,99,104,101,100,218,12,104,97,115,95,108,111,99,97,
-    116,105,111,110,114,91,0,0,0,41,3,114,26,0,0,0,
-    90,5,111,116,104,101,114,90,4,115,109,115,108,114,10,0,
-    0,0,114,10,0,0,0,114,11,0,0,0,218,6,95,95,
-    101,113,95,95,135,1,0,0,115,20,0,0,0,0,1,6,
-    1,2,1,12,1,12,1,12,1,10,1,12,1,12,1,14,
-    1,122,17,77,111,100,117,108,101,83,112,101,99,46,95,95,
-    101,113,95,95,99,1,0,0,0,0,0,0,0,1,0,0,
-    0,2,0,0,0,67,0,0,0,115,58,0,0,0,124,0,
-    106,0,100,0,107,8,114,52,124,0,106,1,100,0,107,9,
-    114,52,124,0,106,2,114,52,116,3,100,0,107,8,114,38,
-    116,4,130,1,116,3,106,5,124,0,106,1,131,1,124,0,
-    95,0,124,0,106,0,83,0,41,1,78,41,6,114,109,0,
-    0,0,114,104,0,0,0,114,108,0,0,0,218,19,95,98,
-    111,111,116,115,116,114,97,112,95,101,120,116,101,114,110,97,
-    108,218,19,78,111,116,73,109,112,108,101,109,101,110,116,101,
-    100,69,114,114,111,114,90,11,95,103,101,116,95,99,97,99,
-    104,101,100,41,1,114,26,0,0,0,114,10,0,0,0,114,
-    10,0,0,0,114,11,0,0,0,114,113,0,0,0,147,1,
-    0,0,115,12,0,0,0,0,2,10,1,16,1,8,1,4,
-    1,14,1,122,17,77,111,100,117,108,101,83,112,101,99,46,
-    99,97,99,104,101,100,99,2,0,0,0,0,0,0,0,2,
-    0,0,0,2,0,0,0,67,0,0,0,115,10,0,0,0,
-    124,1,124,0,95,0,100,0,83,0,41,1,78,41,1,114,
-    109,0,0,0,41,2,114,26,0,0,0,114,113,0,0,0,
-    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,
-    113,0,0,0,156,1,0,0,115,2,0,0,0,0,2,99,
-    1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,
-    67,0,0,0,115,36,0,0,0,124,0,106,0,100,1,107,
-    8,114,26,124,0,106,1,106,2,100,2,131,1,100,3,25,
-    0,83,0,124,0,106,1,83,0,100,1,83,0,41,4,122,
-    32,84,104,101,32,110,97,109,101,32,111,102,32,116,104,101,
-    32,109,111,100,117,108,101,39,115,32,112,97,114,101,110,116,
-    46,78,218,1,46,114,19,0,0,0,41,3,114,107,0,0,
-    0,114,15,0,0,0,218,10,114,112,97,114,116,105,116,105,
-    111,110,41,1,114,26,0,0,0,114,10,0,0,0,114,10,
-    0,0,0,114,11,0,0,0,218,6,112,97,114,101,110,116,
-    160,1,0,0,115,6,0,0,0,0,3,10,1,16,2,122,
-    17,77,111,100,117,108,101,83,112,101,99,46,112,97,114,101,
-    110,116,99,1,0,0,0,0,0,0,0,1,0,0,0,1,
-    0,0,0,67,0,0,0,115,6,0,0,0,124,0,106,0,
-    83,0,41,1,78,41,1,114,108,0,0,0,41,1,114,26,
-    0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,
-    0,0,114,114,0,0,0,168,1,0,0,115,2,0,0,0,
-    0,2,122,23,77,111,100,117,108,101,83,112,101,99,46,104,
-    97,115,95,108,111,99,97,116,105,111,110,99,2,0,0,0,
-    0,0,0,0,2,0,0,0,2,0,0,0,67,0,0,0,
-    115,14,0,0,0,116,0,124,1,131,1,124,0,95,1,100,
-    0,83,0,41,1,78,41,2,218,4,98,111,111,108,114,108,
-    0,0,0,41,2,114,26,0,0,0,218,5,118,97,108,117,
-    101,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
-    114,114,0,0,0,172,1,0,0,115,2,0,0,0,0,2,
-    41,12,114,1,0,0,0,114,0,0,0,0,114,2,0,0,
-    0,114,3,0,0,0,114,27,0,0,0,114,40,0,0,0,
-    114,115,0,0,0,218,8,112,114,111,112,101,114,116,121,114,
-    113,0,0,0,218,6,115,101,116,116,101,114,114,120,0,0,
-    0,114,114,0,0,0,114,10,0,0,0,114,10,0,0,0,
-    114,10,0,0,0,114,11,0,0,0,114,103,0,0,0,76,
-    1,0,0,115,20,0,0,0,8,35,4,2,4,1,14,11,
-    8,10,8,12,12,9,14,4,12,8,12,4,114,103,0,0,
-    0,41,2,114,104,0,0,0,114,106,0,0,0,99,2,0,
-    0,0,2,0,0,0,6,0,0,0,14,0,0,0,67,0,
-    0,0,115,154,0,0,0,116,0,124,1,100,1,131,2,114,
-    74,116,1,100,2,107,8,114,22,116,2,130,1,116,1,106,
-    3,125,4,124,3,100,2,107,8,114,48,124,4,124,0,124,
-    1,100,3,141,2,83,0,124,3,114,56,103,0,110,2,100,
-    2,125,5,124,4,124,0,124,1,124,5,100,4,141,3,83,
-    0,124,3,100,2,107,8,114,138,116,0,124,1,100,5,131,
-    2,114,134,121,14,124,1,106,4,124,0,131,1,125,3,87,
-    0,113,138,4,0,116,5,107,10,114,130,1,0,1,0,1,
-    0,100,2,125,3,89,0,113,138,88,0,110,4,100,6,125,
-    3,116,6,124,0,124,1,124,2,124,3,100,7,141,4,83,
-    0,41,8,122,53,82,101,116,117,114,110,32,97,32,109,111,
-    100,117,108,101,32,115,112,101,99,32,98,97,115,101,100,32,
-    111,110,32,118,97,114,105,111,117,115,32,108,111,97,100,101,
-    114,32,109,101,116,104,111,100,115,46,90,12,103,101,116,95,
-    102,105,108,101,110,97,109,101,78,41,1,114,94,0,0,0,
-    41,2,114,94,0,0,0,114,107,0,0,0,114,106,0,0,
-    0,70,41,2,114,104,0,0,0,114,106,0,0,0,41,7,
-    114,4,0,0,0,114,116,0,0,0,114,117,0,0,0,218,
-    23,115,112,101,99,95,102,114,111,109,95,102,105,108,101,95,
-    108,111,99,97,116,105,111,110,114,106,0,0,0,114,71,0,
-    0,0,114,103,0,0,0,41,6,114,15,0,0,0,114,94,
-    0,0,0,114,104,0,0,0,114,106,0,0,0,114,125,0,
-    0,0,90,6,115,101,97,114,99,104,114,10,0,0,0,114,
-    10,0,0,0,114,11,0,0,0,114,79,0,0,0,177,1,
-    0,0,115,34,0,0,0,0,2,10,1,8,1,4,1,6,
-    2,8,1,12,1,12,1,6,1,8,2,8,1,10,1,2,
-    1,14,1,14,1,12,3,4,2,114,79,0,0,0,99,3,
-    0,0,0,0,0,0,0,8,0,0,0,53,0,0,0,67,
-    0,0,0,115,56,1,0,0,121,10,124,0,106,0,125,3,
-    87,0,110,20,4,0,116,1,107,10,114,30,1,0,1,0,
-    1,0,89,0,110,14,88,0,124,3,100,0,107,9,114,44,
-    124,3,83,0,124,0,106,2,125,4,124,1,100,0,107,8,
-    114,90,121,10,124,0,106,3,125,1,87,0,110,20,4,0,
-    116,1,107,10,114,88,1,0,1,0,1,0,89,0,110,2,
-    88,0,121,10,124,0,106,4,125,5,87,0,110,24,4,0,
-    116,1,107,10,114,124,1,0,1,0,1,0,100,0,125,5,
-    89,0,110,2,88,0,124,2,100,0,107,8,114,184,124,5,
-    100,0,107,8,114,180,121,10,124,1,106,5,125,2,87,0,
-    113,184,4,0,116,1,107,10,114,176,1,0,1,0,1,0,
-    100,0,125,2,89,0,113,184,88,0,110,4,124,5,125,2,
-    121,10,124,0,106,6,125,6,87,0,110,24,4,0,116,1,
-    107,10,114,218,1,0,1,0,1,0,100,0,125,6,89,0,
-    110,2,88,0,121,14,116,7,124,0,106,8,131,1,125,7,
-    87,0,110,26,4,0,116,1,107,10,144,1,114,4,1,0,
-    1,0,1,0,100,0,125,7,89,0,110,2,88,0,116,9,
-    124,4,124,1,124,2,100,1,141,3,125,3,124,5,100,0,
-    107,8,144,1,114,34,100,2,110,2,100,3,124,3,95,10,
-    124,6,124,3,95,11,124,7,124,3,95,12,124,3,83,0,
-    41,4,78,41,1,114,104,0,0,0,70,84,41,13,114,90,
-    0,0,0,114,91,0,0,0,114,1,0,0,0,114,86,0,
-    0,0,114,93,0,0,0,90,7,95,79,82,73,71,73,78,
-    218,10,95,95,99,97,99,104,101,100,95,95,218,4,108,105,
-    115,116,218,8,95,95,112,97,116,104,95,95,114,103,0,0,
-    0,114,108,0,0,0,114,113,0,0,0,114,107,0,0,0,
-    41,8,114,84,0,0,0,114,94,0,0,0,114,104,0,0,
-    0,114,83,0,0,0,114,15,0,0,0,90,8,108,111,99,
-    97,116,105,111,110,114,113,0,0,0,114,107,0,0,0,114,
-    10,0,0,0,114,10,0,0,0,114,11,0,0,0,218,17,
-    95,115,112,101,99,95,102,114,111,109,95,109,111,100,117,108,
-    101,203,1,0,0,115,72,0,0,0,0,2,2,1,10,1,
-    14,1,6,2,8,1,4,2,6,1,8,1,2,1,10,1,
-    14,2,6,1,2,1,10,1,14,1,10,1,8,1,8,1,
-    2,1,10,1,14,1,12,2,4,1,2,1,10,1,14,1,
-    10,1,2,1,14,1,16,1,10,2,14,1,20,1,6,1,
-    6,1,114,129,0,0,0,70,41,1,218,8,111,118,101,114,
-    114,105,100,101,99,2,0,0,0,1,0,0,0,5,0,0,
-    0,59,0,0,0,67,0,0,0,115,212,1,0,0,124,2,
-    115,20,116,0,124,1,100,1,100,0,131,3,100,0,107,8,
-    114,54,121,12,124,0,106,1,124,1,95,2,87,0,110,20,
-    4,0,116,3,107,10,114,52,1,0,1,0,1,0,89,0,
-    110,2,88,0,124,2,115,74,116,0,124,1,100,2,100,0,
-    131,3,100,0,107,8,114,166,124,0,106,4,125,3,124,3,
-    100,0,107,8,114,134,124,0,106,5,100,0,107,9,114,134,
-    116,6,100,0,107,8,114,110,116,7,130,1,116,6,106,8,
-    125,4,124,4,106,9,124,4,131,1,125,3,124,0,106,5,
-    124,3,95,10,121,10,124,3,124,1,95,11,87,0,110,20,
-    4,0,116,3,107,10,114,164,1,0,1,0,1,0,89,0,
-    110,2,88,0,124,2,115,186,116,0,124,1,100,3,100,0,
-    131,3,100,0,107,8,114,220,121,12,124,0,106,12,124,1,
-    95,13,87,0,110,20,4,0,116,3,107,10,114,218,1,0,
-    1,0,1,0,89,0,110,2,88,0,121,10,124,0,124,1,
-    95,14,87,0,110,20,4,0,116,3,107,10,114,250,1,0,
-    1,0,1,0,89,0,110,2,88,0,124,2,144,1,115,20,
-    116,0,124,1,100,4,100,0,131,3,100,0,107,8,144,1,
-    114,68,124,0,106,5,100,0,107,9,144,1,114,68,121,12,
-    124,0,106,5,124,1,95,15,87,0,110,22,4,0,116,3,
-    107,10,144,1,114,66,1,0,1,0,1,0,89,0,110,2,
-    88,0,124,0,106,16,144,1,114,208,124,2,144,1,115,100,
-    116,0,124,1,100,5,100,0,131,3,100,0,107,8,144,1,
-    114,136,121,12,124,0,106,17,124,1,95,18,87,0,110,22,
-    4,0,116,3,107,10,144,1,114,134,1,0,1,0,1,0,
-    89,0,110,2,88,0,124,2,144,1,115,160,116,0,124,1,
-    100,6,100,0,131,3,100,0,107,8,144,1,114,208,124,0,
-    106,19,100,0,107,9,144,1,114,208,121,12,124,0,106,19,
-    124,1,95,20,87,0,110,22,4,0,116,3,107,10,144,1,
-    114,206,1,0,1,0,1,0,89,0,110,2,88,0,124,1,
-    83,0,41,7,78,114,1,0,0,0,114,86,0,0,0,218,
-    11,95,95,112,97,99,107,97,103,101,95,95,114,128,0,0,
-    0,114,93,0,0,0,114,126,0,0,0,41,21,114,6,0,
-    0,0,114,15,0,0,0,114,1,0,0,0,114,91,0,0,
-    0,114,94,0,0,0,114,107,0,0,0,114,116,0,0,0,
-    114,117,0,0,0,218,16,95,78,97,109,101,115,112,97,99,
-    101,76,111,97,100,101,114,218,7,95,95,110,101,119,95,95,
-    90,5,95,112,97,116,104,114,86,0,0,0,114,120,0,0,
-    0,114,131,0,0,0,114,90,0,0,0,114,128,0,0,0,
-    114,114,0,0,0,114,104,0,0,0,114,93,0,0,0,114,
-    113,0,0,0,114,126,0,0,0,41,5,114,83,0,0,0,
-    114,84,0,0,0,114,130,0,0,0,114,94,0,0,0,114,
-    132,0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,
-    0,0,0,218,18,95,105,110,105,116,95,109,111,100,117,108,
-    101,95,97,116,116,114,115,248,1,0,0,115,92,0,0,0,
-    0,4,20,1,2,1,12,1,14,1,6,2,20,1,6,1,
-    8,2,10,1,8,1,4,1,6,2,10,1,8,1,2,1,
-    10,1,14,1,6,2,20,1,2,1,12,1,14,1,6,2,
-    2,1,10,1,14,1,6,2,24,1,12,1,2,1,12,1,
-    16,1,6,2,8,1,24,1,2,1,12,1,16,1,6,2,
-    24,1,12,1,2,1,12,1,16,1,6,1,114,134,0,0,
-    0,99,1,0,0,0,0,0,0,0,2,0,0,0,3,0,
-    0,0,67,0,0,0,115,82,0,0,0,100,1,125,1,116,
-    0,124,0,106,1,100,2,131,2,114,30,124,0,106,1,106,
-    2,124,0,131,1,125,1,110,20,116,0,124,0,106,1,100,
-    3,131,2,114,50,116,3,100,4,131,1,130,1,124,1,100,
-    1,107,8,114,68,116,4,124,0,106,5,131,1,125,1,116,
-    6,124,0,124,1,131,2,1,0,124,1,83,0,41,5,122,
-    43,67,114,101,97,116,101,32,97,32,109,111,100,117,108,101,
-    32,98,97,115,101,100,32,111,110,32,116,104,101,32,112,114,
-    111,118,105,100,101,100,32,115,112,101,99,46,78,218,13,99,
-    114,101,97,116,101,95,109,111,100,117,108,101,218,11,101,120,
-    101,99,95,109,111,100,117,108,101,122,66,108,111,97,100,101,
-    114,115,32,116,104,97,116,32,100,101,102,105,110,101,32,101,
-    120,101,99,95,109,111,100,117,108,101,40,41,32,109,117,115,
-    116,32,97,108,115,111,32,100,101,102,105,110,101,32,99,114,
-    101,97,116,101,95,109,111,100,117,108,101,40,41,41,7,114,
-    4,0,0,0,114,94,0,0,0,114,135,0,0,0,114,71,
-    0,0,0,114,16,0,0,0,114,15,0,0,0,114,134,0,
-    0,0,41,2,114,83,0,0,0,114,84,0,0,0,114,10,
-    0,0,0,114,10,0,0,0,114,11,0,0,0,218,16,109,
-    111,100,117,108,101,95,102,114,111,109,95,115,112,101,99,52,
-    2,0,0,115,18,0,0,0,0,3,4,1,12,3,14,1,
-    12,1,8,2,8,1,10,1,10,1,114,137,0,0,0,99,
+    115,18,0,0,0,124,0,4,0,106,0,100,1,55,0,2,
+    0,95,0,100,2,83,0,41,3,78,114,33,0,0,0,84,
+    41,1,114,24,0,0,0,41,1,114,26,0,0,0,114,10,
+    0,0,0,114,10,0,0,0,114,11,0,0,0,114,34,0,
+    0,0,128,0,0,0,115,4,0,0,0,0,1,14,1,122,
+    24,95,68,117,109,109,121,77,111,100,117,108,101,76,111,99,
+    107,46,97,99,113,117,105,114,101,99,1,0,0,0,0,0,
+    0,0,1,0,0,0,3,0,0,0,67,0,0,0,115,36,
+    0,0,0,124,0,106,0,100,1,107,2,114,18,116,1,100,
+    2,131,1,130,1,124,0,4,0,106,0,100,3,56,0,2,
+    0,95,0,100,0,83,0,41,4,78,114,19,0,0,0,122,
+    31,99,97,110,110,111,116,32,114,101,108,101,97,115,101,32,
+    117,110,45,97,99,113,117,105,114,101,100,32,108,111,99,107,
+    114,33,0,0,0,41,2,114,24,0,0,0,114,36,0,0,
+    0,41,1,114,26,0,0,0,114,10,0,0,0,114,10,0,
+    0,0,114,11,0,0,0,114,35,0,0,0,132,0,0,0,
+    115,6,0,0,0,0,1,10,1,8,1,122,24,95,68,117,
+    109,109,121,77,111,100,117,108,101,76,111,99,107,46,114,101,
+    108,101,97,115,101,99,1,0,0,0,0,0,0,0,1,0,
+    0,0,4,0,0,0,67,0,0,0,115,18,0,0,0,100,
+    1,106,0,124,0,106,1,116,2,124,0,131,1,131,2,83,
+    0,41,2,78,122,28,95,68,117,109,109,121,77,111,100,117,
+    108,101,76,111,99,107,40,123,33,114,125,41,32,97,116,32,
+    123,125,41,3,114,38,0,0,0,114,15,0,0,0,114,39,
+    0,0,0,41,1,114,26,0,0,0,114,10,0,0,0,114,
+    10,0,0,0,114,11,0,0,0,114,40,0,0,0,137,0,
+    0,0,115,2,0,0,0,0,1,122,25,95,68,117,109,109,
+    121,77,111,100,117,108,101,76,111,99,107,46,95,95,114,101,
+    112,114,95,95,78,41,8,114,1,0,0,0,114,0,0,0,
+    0,114,2,0,0,0,114,3,0,0,0,114,27,0,0,0,
+    114,34,0,0,0,114,35,0,0,0,114,40,0,0,0,114,
+    10,0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,
+    0,0,0,114,41,0,0,0,120,0,0,0,115,10,0,0,
+    0,8,2,4,2,8,4,8,4,8,5,114,41,0,0,0,
+    99,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,
+    0,64,0,0,0,115,36,0,0,0,101,0,90,1,100,0,
+    90,2,100,1,100,2,132,0,90,3,100,3,100,4,132,0,
+    90,4,100,5,100,6,132,0,90,5,100,7,83,0,41,8,
+    218,18,95,77,111,100,117,108,101,76,111,99,107,77,97,110,
+    97,103,101,114,99,2,0,0,0,0,0,0,0,2,0,0,
+    0,2,0,0,0,67,0,0,0,115,16,0,0,0,124,1,
+    124,0,95,0,100,0,124,0,95,1,100,0,83,0,41,1,
+    78,41,2,218,5,95,110,97,109,101,218,5,95,108,111,99,
+    107,41,2,114,26,0,0,0,114,15,0,0,0,114,10,0,
+    0,0,114,10,0,0,0,114,11,0,0,0,114,27,0,0,
+    0,143,0,0,0,115,4,0,0,0,0,1,6,1,122,27,
+    95,77,111,100,117,108,101,76,111,99,107,77,97,110,97,103,
+    101,114,46,95,95,105,110,105,116,95,95,99,1,0,0,0,
+    0,0,0,0,1,0,0,0,2,0,0,0,67,0,0,0,
+    115,26,0,0,0,116,0,124,0,106,1,131,1,124,0,95,
+    2,124,0,106,2,106,3,131,0,1,0,100,0,83,0,41,
+    1,78,41,4,218,16,95,103,101,116,95,109,111,100,117,108,
+    101,95,108,111,99,107,114,43,0,0,0,114,44,0,0,0,
+    114,34,0,0,0,41,1,114,26,0,0,0,114,10,0,0,
+    0,114,10,0,0,0,114,11,0,0,0,218,9,95,95,101,
+    110,116,101,114,95,95,147,0,0,0,115,4,0,0,0,0,
+    1,12,1,122,28,95,77,111,100,117,108,101,76,111,99,107,
+    77,97,110,97,103,101,114,46,95,95,101,110,116,101,114,95,
+    95,99,1,0,0,0,0,0,0,0,3,0,0,0,1,0,
+    0,0,79,0,0,0,115,14,0,0,0,124,0,106,0,106,
+    1,131,0,1,0,100,0,83,0,41,1,78,41,2,114,44,
+    0,0,0,114,35,0,0,0,41,3,114,26,0,0,0,218,
+    4,97,114,103,115,90,6,107,119,97,114,103,115,114,10,0,
+    0,0,114,10,0,0,0,114,11,0,0,0,218,8,95,95,
+    101,120,105,116,95,95,151,0,0,0,115,2,0,0,0,0,
+    1,122,27,95,77,111,100,117,108,101,76,111,99,107,77,97,
+    110,97,103,101,114,46,95,95,101,120,105,116,95,95,78,41,
+    6,114,1,0,0,0,114,0,0,0,0,114,2,0,0,0,
+    114,27,0,0,0,114,46,0,0,0,114,48,0,0,0,114,
+    10,0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,
+    0,0,0,114,42,0,0,0,141,0,0,0,115,6,0,0,
+    0,8,2,8,4,8,4,114,42,0,0,0,99,1,0,0,
+    0,0,0,0,0,3,0,0,0,17,0,0,0,67,0,0,
+    0,115,130,0,0,0,116,0,106,1,131,0,1,0,122,106,
+    121,14,116,2,124,0,25,0,131,0,125,1,87,0,110,24,
+    4,0,116,3,107,10,114,48,1,0,1,0,1,0,100,1,
+    125,1,89,0,110,2,88,0,124,1,100,1,107,8,114,112,
+    116,4,100,1,107,8,114,76,116,5,124,0,131,1,125,1,
+    110,8,116,6,124,0,131,1,125,1,124,0,102,1,100,2,
+    100,3,132,1,125,2,116,7,106,8,124,1,124,2,131,2,
+    116,2,124,0,60,0,87,0,100,1,116,0,106,9,131,0,
+    1,0,88,0,124,1,83,0,41,4,122,139,71,101,116,32,
+    111,114,32,99,114,101,97,116,101,32,116,104,101,32,109,111,
+    100,117,108,101,32,108,111,99,107,32,102,111,114,32,97,32,
+    103,105,118,101,110,32,109,111,100,117,108,101,32,110,97,109,
+    101,46,10,10,32,32,32,32,65,99,113,117,105,114,101,47,
+    114,101,108,101,97,115,101,32,105,110,116,101,114,110,97,108,
+    108,121,32,116,104,101,32,103,108,111,98,97,108,32,105,109,
+    112,111,114,116,32,108,111,99,107,32,116,111,32,112,114,111,
+    116,101,99,116,10,32,32,32,32,95,109,111,100,117,108,101,
+    95,108,111,99,107,115,46,78,99,2,0,0,0,0,0,0,
+    0,2,0,0,0,10,0,0,0,83,0,0,0,115,48,0,
+    0,0,116,0,106,1,131,0,1,0,122,24,116,2,106,3,
+    124,1,131,1,124,0,107,8,114,30,116,2,124,1,61,0,
+    87,0,100,0,116,0,106,4,131,0,1,0,88,0,100,0,
+    83,0,41,1,78,41,5,218,4,95,105,109,112,218,12,97,
+    99,113,117,105,114,101,95,108,111,99,107,218,13,95,109,111,
+    100,117,108,101,95,108,111,99,107,115,114,30,0,0,0,218,
+    12,114,101,108,101,97,115,101,95,108,111,99,107,41,2,218,
+    3,114,101,102,114,15,0,0,0,114,10,0,0,0,114,10,
+    0,0,0,114,11,0,0,0,218,2,99,98,176,0,0,0,
+    115,10,0,0,0,0,1,8,1,2,4,14,1,10,2,122,
+    28,95,103,101,116,95,109,111,100,117,108,101,95,108,111,99,
+    107,46,60,108,111,99,97,108,115,62,46,99,98,41,10,114,
+    49,0,0,0,114,50,0,0,0,114,51,0,0,0,218,8,
+    75,101,121,69,114,114,111,114,114,20,0,0,0,114,41,0,
+    0,0,114,18,0,0,0,218,8,95,119,101,97,107,114,101,
+    102,114,53,0,0,0,114,52,0,0,0,41,3,114,15,0,
+    0,0,114,21,0,0,0,114,54,0,0,0,114,10,0,0,
+    0,114,10,0,0,0,114,11,0,0,0,114,45,0,0,0,
+    157,0,0,0,115,28,0,0,0,0,6,8,1,2,1,2,
+    1,14,1,14,1,10,2,8,1,8,1,10,2,8,2,12,
+    11,20,2,10,2,114,45,0,0,0,99,1,0,0,0,0,
+    0,0,0,2,0,0,0,11,0,0,0,67,0,0,0,115,
+    54,0,0,0,116,0,124,0,131,1,125,1,121,12,124,1,
+    106,1,131,0,1,0,87,0,110,20,4,0,116,2,107,10,
+    114,40,1,0,1,0,1,0,89,0,110,10,88,0,124,1,
+    106,3,131,0,1,0,100,1,83,0,41,2,122,189,65,99,
+    113,117,105,114,101,115,32,116,104,101,110,32,114,101,108,101,
+    97,115,101,115,32,116,104,101,32,109,111,100,117,108,101,32,
+    108,111,99,107,32,102,111,114,32,97,32,103,105,118,101,110,
+    32,109,111,100,117,108,101,32,110,97,109,101,46,10,10,32,
+    32,32,32,84,104,105,115,32,105,115,32,117,115,101,100,32,
+    116,111,32,101,110,115,117,114,101,32,97,32,109,111,100,117,
+    108,101,32,105,115,32,99,111,109,112,108,101,116,101,108,121,
+    32,105,110,105,116,105,97,108,105,122,101,100,44,32,105,110,
+    32,116,104,101,10,32,32,32,32,101,118,101,110,116,32,105,
+    116,32,105,115,32,98,101,105,110,103,32,105,109,112,111,114,
+    116,101,100,32,98,121,32,97,110,111,116,104,101,114,32,116,
+    104,114,101,97,100,46,10,32,32,32,32,78,41,4,114,45,
+    0,0,0,114,34,0,0,0,114,17,0,0,0,114,35,0,
+    0,0,41,2,114,15,0,0,0,114,21,0,0,0,114,10,
+    0,0,0,114,10,0,0,0,114,11,0,0,0,218,19,95,
+    108,111,99,107,95,117,110,108,111,99,107,95,109,111,100,117,
+    108,101,194,0,0,0,115,12,0,0,0,0,6,8,1,2,
+    1,12,1,14,3,6,2,114,57,0,0,0,99,1,0,0,
+    0,0,0,0,0,3,0,0,0,3,0,0,0,79,0,0,
+    0,115,10,0,0,0,124,0,124,1,124,2,142,1,83,0,
+    41,1,97,46,1,0,0,114,101,109,111,118,101,95,105,109,
+    112,111,114,116,108,105,98,95,102,114,97,109,101,115,32,105,
+    110,32,105,109,112,111,114,116,46,99,32,119,105,108,108,32,
+    97,108,119,97,121,115,32,114,101,109,111,118,101,32,115,101,
+    113,117,101,110,99,101,115,10,32,32,32,32,111,102,32,105,
+    109,112,111,114,116,108,105,98,32,102,114,97,109,101,115,32,
+    116,104,97,116,32,101,110,100,32,119,105,116,104,32,97,32,
+    99,97,108,108,32,116,111,32,116,104,105,115,32,102,117,110,
+    99,116,105,111,110,10,10,32,32,32,32,85,115,101,32,105,
+    116,32,105,110,115,116,101,97,100,32,111,102,32,97,32,110,
+    111,114,109,97,108,32,99,97,108,108,32,105,110,32,112,108,
+    97,99,101,115,32,119,104,101,114,101,32,105,110,99,108,117,
+    100,105,110,103,32,116,104,101,32,105,109,112,111,114,116,108,
+    105,98,10,32,32,32,32,102,114,97,109,101,115,32,105,110,
+    116,114,111,100,117,99,101,115,32,117,110,119,97,110,116,101,
+    100,32,110,111,105,115,101,32,105,110,116,111,32,116,104,101,
+    32,116,114,97,99,101,98,97,99,107,32,40,101,46,103,46,
+    32,119,104,101,110,32,101,120,101,99,117,116,105,110,103,10,
+    32,32,32,32,109,111,100,117,108,101,32,99,111,100,101,41,
+    10,32,32,32,32,114,10,0,0,0,41,3,218,1,102,114,
+    47,0,0,0,90,4,107,119,100,115,114,10,0,0,0,114,
+    10,0,0,0,114,11,0,0,0,218,25,95,99,97,108,108,
+    95,119,105,116,104,95,102,114,97,109,101,115,95,114,101,109,
+    111,118,101,100,211,0,0,0,115,2,0,0,0,0,8,114,
+    59,0,0,0,114,33,0,0,0,41,1,218,9,118,101,114,
+    98,111,115,105,116,121,99,1,0,0,0,1,0,0,0,3,
+    0,0,0,4,0,0,0,71,0,0,0,115,54,0,0,0,
+    116,0,106,1,106,2,124,1,107,5,114,50,124,0,106,3,
+    100,6,131,1,115,30,100,3,124,0,23,0,125,0,116,4,
+    124,0,106,5,124,2,142,0,116,0,106,6,100,4,141,2,
+    1,0,100,5,83,0,41,7,122,61,80,114,105,110,116,32,
+    116,104,101,32,109,101,115,115,97,103,101,32,116,111,32,115,
+    116,100,101,114,114,32,105,102,32,45,118,47,80,89,84,72,
+    79,78,86,69,82,66,79,83,69,32,105,115,32,116,117,114,
+    110,101,100,32,111,110,46,250,1,35,250,7,105,109,112,111,
+    114,116,32,122,2,35,32,41,1,90,4,102,105,108,101,78,
+    41,2,114,61,0,0,0,114,62,0,0,0,41,7,114,14,
+    0,0,0,218,5,102,108,97,103,115,218,7,118,101,114,98,
+    111,115,101,218,10,115,116,97,114,116,115,119,105,116,104,218,
+    5,112,114,105,110,116,114,38,0,0,0,218,6,115,116,100,
+    101,114,114,41,3,218,7,109,101,115,115,97,103,101,114,60,
+    0,0,0,114,47,0,0,0,114,10,0,0,0,114,10,0,
+    0,0,114,11,0,0,0,218,16,95,118,101,114,98,111,115,
+    101,95,109,101,115,115,97,103,101,222,0,0,0,115,8,0,
+    0,0,0,2,12,1,10,1,8,1,114,69,0,0,0,99,
     1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,
-    67,0,0,0,115,106,0,0,0,124,0,106,0,100,1,107,
-    8,114,14,100,2,110,4,124,0,106,0,125,1,124,0,106,
-    1,100,1,107,8,114,66,124,0,106,2,100,1,107,8,114,
-    50,100,3,106,3,124,1,131,1,83,0,100,4,106,3,124,
-    1,124,0,106,2,131,2,83,0,110,36,124,0,106,4,114,
-    86,100,5,106,3,124,1,124,0,106,1,131,2,83,0,100,
-    6,106,3,124,0,106,0,124,0,106,1,131,2,83,0,100,
-    1,83,0,41,7,122,38,82,101,116,117,114,110,32,116,104,
-    101,32,114,101,112,114,32,116,111,32,117,115,101,32,102,111,
-    114,32,116,104,101,32,109,111,100,117,108,101,46,78,114,88,
-    0,0,0,122,13,60,109,111,100,117,108,101,32,123,33,114,
+    3,0,0,0,115,26,0,0,0,135,0,102,1,100,1,100,
+    2,132,8,125,1,116,0,124,1,136,0,131,2,1,0,124,
+    1,83,0,41,3,122,49,68,101,99,111,114,97,116,111,114,
+    32,116,111,32,118,101,114,105,102,121,32,116,104,101,32,110,
+    97,109,101,100,32,109,111,100,117,108,101,32,105,115,32,98,
+    117,105,108,116,45,105,110,46,99,2,0,0,0,0,0,0,
+    0,2,0,0,0,4,0,0,0,19,0,0,0,115,38,0,
+    0,0,124,1,116,0,106,1,107,7,114,28,116,2,100,1,
+    106,3,124,1,131,1,124,1,100,2,141,2,130,1,136,0,
+    124,0,124,1,131,2,83,0,41,3,78,122,29,123,33,114,
+    125,32,105,115,32,110,111,116,32,97,32,98,117,105,108,116,
+    45,105,110,32,109,111,100,117,108,101,41,1,114,15,0,0,
+    0,41,4,114,14,0,0,0,218,20,98,117,105,108,116,105,
+    110,95,109,111,100,117,108,101,95,110,97,109,101,115,218,11,
+    73,109,112,111,114,116,69,114,114,111,114,114,38,0,0,0,
+    41,2,114,26,0,0,0,218,8,102,117,108,108,110,97,109,
+    101,41,1,218,3,102,120,110,114,10,0,0,0,114,11,0,
+    0,0,218,25,95,114,101,113,117,105,114,101,115,95,98,117,
+    105,108,116,105,110,95,119,114,97,112,112,101,114,232,0,0,
+    0,115,8,0,0,0,0,1,10,1,10,1,8,1,122,52,
+    95,114,101,113,117,105,114,101,115,95,98,117,105,108,116,105,
+    110,46,60,108,111,99,97,108,115,62,46,95,114,101,113,117,
+    105,114,101,115,95,98,117,105,108,116,105,110,95,119,114,97,
+    112,112,101,114,41,1,114,12,0,0,0,41,2,114,73,0,
+    0,0,114,74,0,0,0,114,10,0,0,0,41,1,114,73,
+    0,0,0,114,11,0,0,0,218,17,95,114,101,113,117,105,
+    114,101,115,95,98,117,105,108,116,105,110,230,0,0,0,115,
+    6,0,0,0,0,2,12,5,10,1,114,75,0,0,0,99,
+    1,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,
+    3,0,0,0,115,26,0,0,0,135,0,102,1,100,1,100,
+    2,132,8,125,1,116,0,124,1,136,0,131,2,1,0,124,
+    1,83,0,41,3,122,47,68,101,99,111,114,97,116,111,114,
+    32,116,111,32,118,101,114,105,102,121,32,116,104,101,32,110,
+    97,109,101,100,32,109,111,100,117,108,101,32,105,115,32,102,
+    114,111,122,101,110,46,99,2,0,0,0,0,0,0,0,2,
+    0,0,0,4,0,0,0,19,0,0,0,115,38,0,0,0,
+    116,0,106,1,124,1,131,1,115,28,116,2,100,1,106,3,
+    124,1,131,1,124,1,100,2,141,2,130,1,136,0,124,0,
+    124,1,131,2,83,0,41,3,78,122,27,123,33,114,125,32,
+    105,115,32,110,111,116,32,97,32,102,114,111,122,101,110,32,
+    109,111,100,117,108,101,41,1,114,15,0,0,0,41,4,114,
+    49,0,0,0,218,9,105,115,95,102,114,111,122,101,110,114,
+    71,0,0,0,114,38,0,0,0,41,2,114,26,0,0,0,
+    114,72,0,0,0,41,1,114,73,0,0,0,114,10,0,0,
+    0,114,11,0,0,0,218,24,95,114,101,113,117,105,114,101,
+    115,95,102,114,111,122,101,110,95,119,114,97,112,112,101,114,
+    243,0,0,0,115,8,0,0,0,0,1,10,1,10,1,8,
+    1,122,50,95,114,101,113,117,105,114,101,115,95,102,114,111,
+    122,101,110,46,60,108,111,99,97,108,115,62,46,95,114,101,
+    113,117,105,114,101,115,95,102,114,111,122,101,110,95,119,114,
+    97,112,112,101,114,41,1,114,12,0,0,0,41,2,114,73,
+    0,0,0,114,77,0,0,0,114,10,0,0,0,41,1,114,
+    73,0,0,0,114,11,0,0,0,218,16,95,114,101,113,117,
+    105,114,101,115,95,102,114,111,122,101,110,241,0,0,0,115,
+    6,0,0,0,0,2,12,5,10,1,114,78,0,0,0,99,
+    2,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,
+    67,0,0,0,115,62,0,0,0,116,0,124,1,124,0,131,
+    2,125,2,124,1,116,1,106,2,107,6,114,50,116,1,106,
+    2,124,1,25,0,125,3,116,3,124,2,124,3,131,2,1,
+    0,116,1,106,2,124,1,25,0,83,0,116,4,124,2,131,
+    1,83,0,100,1,83,0,41,2,122,128,76,111,97,100,32,
+    116,104,101,32,115,112,101,99,105,102,105,101,100,32,109,111,
+    100,117,108,101,32,105,110,116,111,32,115,121,115,46,109,111,
+    100,117,108,101,115,32,97,110,100,32,114,101,116,117,114,110,
+    32,105,116,46,10,10,32,32,32,32,84,104,105,115,32,109,
+    101,116,104,111,100,32,105,115,32,100,101,112,114,101,99,97,
+    116,101,100,46,32,32,85,115,101,32,108,111,97,100,101,114,
+    46,101,120,101,99,95,109,111,100,117,108,101,32,105,110,115,
+    116,101,97,100,46,10,10,32,32,32,32,78,41,5,218,16,
+    115,112,101,99,95,102,114,111,109,95,108,111,97,100,101,114,
+    114,14,0,0,0,218,7,109,111,100,117,108,101,115,218,5,
+    95,101,120,101,99,218,5,95,108,111,97,100,41,4,114,26,
+    0,0,0,114,72,0,0,0,218,4,115,112,101,99,218,6,
+    109,111,100,117,108,101,114,10,0,0,0,114,10,0,0,0,
+    114,11,0,0,0,218,17,95,108,111,97,100,95,109,111,100,
+    117,108,101,95,115,104,105,109,253,0,0,0,115,12,0,0,
+    0,0,6,10,1,10,1,10,1,10,1,10,2,114,85,0,
+    0,0,99,1,0,0,0,0,0,0,0,5,0,0,0,35,
+    0,0,0,67,0,0,0,115,216,0,0,0,116,0,124,0,
+    100,1,100,0,131,3,125,1,116,1,124,1,100,2,131,2,
+    114,54,121,10,124,1,106,2,124,0,131,1,83,0,4,0,
+    116,3,107,10,114,52,1,0,1,0,1,0,89,0,110,2,
+    88,0,121,10,124,0,106,4,125,2,87,0,110,20,4,0,
+    116,5,107,10,114,84,1,0,1,0,1,0,89,0,110,18,
+    88,0,124,2,100,0,107,9,114,102,116,6,124,2,131,1,
+    83,0,121,10,124,0,106,7,125,3,87,0,110,24,4,0,
+    116,5,107,10,114,136,1,0,1,0,1,0,100,3,125,3,
+    89,0,110,2,88,0,121,10,124,0,106,8,125,4,87,0,
+    110,50,4,0,116,5,107,10,114,198,1,0,1,0,1,0,
+    124,1,100,0,107,8,114,182,100,4,106,9,124,3,131,1,
+    83,0,100,5,106,9,124,3,124,1,131,2,83,0,89,0,
+    110,14,88,0,100,6,106,9,124,3,124,4,131,2,83,0,
+    100,0,83,0,41,7,78,218,10,95,95,108,111,97,100,101,
+    114,95,95,218,11,109,111,100,117,108,101,95,114,101,112,114,
+    250,1,63,122,13,60,109,111,100,117,108,101,32,123,33,114,
     125,62,122,20,60,109,111,100,117,108,101,32,123,33,114,125,
     32,40,123,33,114,125,41,62,122,23,60,109,111,100,117,108,
     101,32,123,33,114,125,32,102,114,111,109,32,123,33,114,125,
-    62,122,18,60,109,111,100,117,108,101,32,123,33,114,125,32,
-    40,123,125,41,62,41,5,114,15,0,0,0,114,104,0,0,
-    0,114,94,0,0,0,114,38,0,0,0,114,114,0,0,0,
-    41,2,114,83,0,0,0,114,15,0,0,0,114,10,0,0,
-    0,114,10,0,0,0,114,11,0,0,0,114,92,0,0,0,
-    69,2,0,0,115,16,0,0,0,0,3,20,1,10,1,10,
-    1,10,2,16,2,6,1,14,2,114,92,0,0,0,99,2,
-    0,0,0,0,0,0,0,4,0,0,0,12,0,0,0,67,
-    0,0,0,115,178,0,0,0,124,0,106,0,125,2,116,1,
-    124,2,131,1,143,148,1,0,116,2,106,3,106,4,124,2,
-    131,1,124,1,107,9,114,54,100,1,106,5,124,2,131,1,
-    125,3,116,6,124,3,124,2,100,2,141,2,130,1,124,0,
-    106,7,100,3,107,8,114,106,124,0,106,8,100,3,107,8,
-    114,88,116,6,100,4,124,0,106,0,100,2,141,2,130,1,
-    116,9,124,0,124,1,100,5,100,6,141,3,1,0,124,1,
-    83,0,116,9,124,0,124,1,100,5,100,6,141,3,1,0,
-    116,10,124,0,106,7,100,7,131,2,115,146,124,0,106,7,
-    106,11,124,2,131,1,1,0,110,12,124,0,106,7,106,12,
-    124,1,131,1,1,0,87,0,100,3,81,0,82,0,88,0,
-    116,2,106,3,124,2,25,0,83,0,41,8,122,70,69,120,
-    101,99,117,116,101,32,116,104,101,32,115,112,101,99,39,115,
-    32,115,112,101,99,105,102,105,101,100,32,109,111,100,117,108,
-    101,32,105,110,32,97,110,32,101,120,105,115,116,105,110,103,
-    32,109,111,100,117,108,101,39,115,32,110,97,109,101,115,112,
-    97,99,101,46,122,30,109,111,100,117,108,101,32,123,33,114,
-    125,32,110,111,116,32,105,110,32,115,121,115,46,109,111,100,
-    117,108,101,115,41,1,114,15,0,0,0,78,122,14,109,105,
-    115,115,105,110,103,32,108,111,97,100,101,114,84,41,1,114,
-    130,0,0,0,114,136,0,0,0,41,13,114,15,0,0,0,
-    114,42,0,0,0,114,14,0,0,0,114,80,0,0,0,114,
-    30,0,0,0,114,38,0,0,0,114,71,0,0,0,114,94,
-    0,0,0,114,107,0,0,0,114,134,0,0,0,114,4,0,
-    0,0,218,11,108,111,97,100,95,109,111,100,117,108,101,114,
-    136,0,0,0,41,4,114,83,0,0,0,114,84,0,0,0,
-    114,15,0,0,0,218,3,109,115,103,114,10,0,0,0,114,
-    10,0,0,0,114,11,0,0,0,114,81,0,0,0,86,2,
-    0,0,115,30,0,0,0,0,2,6,1,10,1,16,1,10,
-    1,12,1,10,1,10,1,14,2,14,1,4,1,14,1,12,
-    4,14,2,22,1,114,81,0,0,0,99,1,0,0,0,0,
-    0,0,0,2,0,0,0,27,0,0,0,67,0,0,0,115,
-    206,0,0,0,124,0,106,0,106,1,124,0,106,2,131,1,
-    1,0,116,3,106,4,124,0,106,2,25,0,125,1,116,5,
-    124,1,100,1,100,0,131,3,100,0,107,8,114,76,121,12,
-    124,0,106,0,124,1,95,6,87,0,110,20,4,0,116,7,
-    107,10,114,74,1,0,1,0,1,0,89,0,110,2,88,0,
-    116,5,124,1,100,2,100,0,131,3,100,0,107,8,114,154,
-    121,40,124,1,106,8,124,1,95,9,116,10,124,1,100,3,
-    131,2,115,130,124,0,106,2,106,11,100,4,131,1,100,5,
-    25,0,124,1,95,9,87,0,110,20,4,0,116,7,107,10,
-    114,152,1,0,1,0,1,0,89,0,110,2,88,0,116,5,
-    124,1,100,6,100,0,131,3,100,0,107,8,114,202,121,10,
-    124,0,124,1,95,12,87,0,110,20,4,0,116,7,107,10,
-    114,200,1,0,1,0,1,0,89,0,110,2,88,0,124,1,
-    83,0,41,7,78,114,86,0,0,0,114,131,0,0,0,114,
-    128,0,0,0,114,118,0,0,0,114,19,0,0,0,114,90,
-    0,0,0,41,13,114,94,0,0,0,114,138,0,0,0,114,
-    15,0,0,0,114,14,0,0,0,114,80,0,0,0,114,6,
-    0,0,0,114,86,0,0,0,114,91,0,0,0,114,1,0,
-    0,0,114,131,0,0,0,114,4,0,0,0,114,119,0,0,
-    0,114,90,0,0,0,41,2,114,83,0,0,0,114,84,0,
-    0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,
-    0,218,25,95,108,111,97,100,95,98,97,99,107,119,97,114,
-    100,95,99,111,109,112,97,116,105,98,108,101,110,2,0,0,
-    115,40,0,0,0,0,4,14,2,12,1,16,1,2,1,12,
-    1,14,1,6,1,16,1,2,4,8,1,10,1,22,1,14,
-    1,6,1,16,1,2,1,10,1,14,1,6,1,114,140,0,
-    0,0,99,1,0,0,0,0,0,0,0,2,0,0,0,11,
-    0,0,0,67,0,0,0,115,118,0,0,0,124,0,106,0,
-    100,0,107,9,114,30,116,1,124,0,106,0,100,1,131,2,
-    115,30,116,2,124,0,131,1,83,0,116,3,124,0,131,1,
-    125,1,116,4,124,1,131,1,143,54,1,0,124,0,106,0,
-    100,0,107,8,114,84,124,0,106,5,100,0,107,8,114,96,
-    116,6,100,2,124,0,106,7,100,3,141,2,130,1,110,12,
-    124,0,106,0,106,8,124,1,131,1,1,0,87,0,100,0,
-    81,0,82,0,88,0,116,9,106,10,124,0,106,7,25,0,
-    83,0,41,4,78,114,136,0,0,0,122,14,109,105,115,115,
-    105,110,103,32,108,111,97,100,101,114,41,1,114,15,0,0,
-    0,41,11,114,94,0,0,0,114,4,0,0,0,114,140,0,
-    0,0,114,137,0,0,0,114,97,0,0,0,114,107,0,0,
-    0,114,71,0,0,0,114,15,0,0,0,114,136,0,0,0,
-    114,14,0,0,0,114,80,0,0,0,41,2,114,83,0,0,
-    0,114,84,0,0,0,114,10,0,0,0,114,10,0,0,0,
-    114,11,0,0,0,218,14,95,108,111,97,100,95,117,110,108,
-    111,99,107,101,100,139,2,0,0,115,20,0,0,0,0,2,
-    10,2,12,1,8,2,8,1,10,1,10,1,10,1,16,3,
-    22,5,114,141,0,0,0,99,1,0,0,0,0,0,0,0,
-    1,0,0,0,9,0,0,0,67,0,0,0,115,30,0,0,
-    0,116,0,124,0,106,1,131,1,143,10,1,0,116,2,124,
-    0,131,1,83,0,81,0,82,0,88,0,100,1,83,0,41,
-    2,122,191,82,101,116,117,114,110,32,97,32,110,101,119,32,
-    109,111,100,117,108,101,32,111,98,106,101,99,116,44,32,108,
-    111,97,100,101,100,32,98,121,32,116,104,101,32,115,112,101,
-    99,39,115,32,108,111,97,100,101,114,46,10,10,32,32,32,
-    32,84,104,101,32,109,111,100,117,108,101,32,105,115,32,110,
-    111,116,32,97,100,100,101,100,32,116,111,32,105,116,115,32,
-    112,97,114,101,110,116,46,10,10,32,32,32,32,73,102,32,
-    97,32,109,111,100,117,108,101,32,105,115,32,97,108,114,101,
-    97,100,121,32,105,110,32,115,121,115,46,109,111,100,117,108,
-    101,115,44,32,116,104,97,116,32,101,120,105,115,116,105,110,
-    103,32,109,111,100,117,108,101,32,103,101,116,115,10,32,32,
-    32,32,99,108,111,98,98,101,114,101,100,46,10,10,32,32,
-    32,32,78,41,3,114,42,0,0,0,114,15,0,0,0,114,
-    141,0,0,0,41,1,114,83,0,0,0,114,10,0,0,0,
-    114,10,0,0,0,114,11,0,0,0,114,82,0,0,0,162,
-    2,0,0,115,4,0,0,0,0,9,12,1,114,82,0,0,
-    0,99,0,0,0,0,0,0,0,0,0,0,0,0,4,0,
-    0,0,64,0,0,0,115,136,0,0,0,101,0,90,1,100,
-    0,90,2,100,1,90,3,101,4,100,2,100,3,132,0,131,
-    1,90,5,101,6,100,19,100,5,100,6,132,1,131,1,90,
-    7,101,6,100,20,100,7,100,8,132,1,131,1,90,8,101,
-    6,100,9,100,10,132,0,131,1,90,9,101,6,100,11,100,
-    12,132,0,131,1,90,10,101,6,101,11,100,13,100,14,132,
-    0,131,1,131,1,90,12,101,6,101,11,100,15,100,16,132,
-    0,131,1,131,1,90,13,101,6,101,11,100,17,100,18,132,
-    0,131,1,131,1,90,14,101,6,101,15,131,1,90,16,100,
-    4,83,0,41,21,218,15,66,117,105,108,116,105,110,73,109,
-    112,111,114,116,101,114,122,144,77,101,116,97,32,112,97,116,
-    104,32,105,109,112,111,114,116,32,102,111,114,32,98,117,105,
-    108,116,45,105,110,32,109,111,100,117,108,101,115,46,10,10,
-    32,32,32,32,65,108,108,32,109,101,116,104,111,100,115,32,
-    97,114,101,32,101,105,116,104,101,114,32,99,108,97,115,115,
-    32,111,114,32,115,116,97,116,105,99,32,109,101,116,104,111,
-    100,115,32,116,111,32,97,118,111,105,100,32,116,104,101,32,
-    110,101,101,100,32,116,111,10,32,32,32,32,105,110,115,116,
-    97,110,116,105,97,116,101,32,116,104,101,32,99,108,97,115,
-    115,46,10,10,32,32,32,32,99,1,0,0,0,0,0,0,
-    0,1,0,0,0,2,0,0,0,67,0,0,0,115,12,0,
-    0,0,100,1,106,0,124,0,106,1,131,1,83,0,41,2,
-    122,115,82,101,116,117,114,110,32,114,101,112,114,32,102,111,
-    114,32,116,104,101,32,109,111,100,117,108,101,46,10,10,32,
-    32,32,32,32,32,32,32,84,104,101,32,109,101,116,104,111,
-    100,32,105,115,32,100,101,112,114,101,99,97,116,101,100,46,
-    32,32,84,104,101,32,105,109,112,111,114,116,32,109,97,99,
-    104,105,110,101,114,121,32,100,111,101,115,32,116,104,101,32,
-    106,111,98,32,105,116,115,101,108,102,46,10,10,32,32,32,
-    32,32,32,32,32,122,24,60,109,111,100,117,108,101,32,123,
-    33,114,125,32,40,98,117,105,108,116,45,105,110,41,62,41,
-    2,114,38,0,0,0,114,1,0,0,0,41,1,114,84,0,
-    0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,
-    0,114,87,0,0,0,186,2,0,0,115,2,0,0,0,0,
-    7,122,27,66,117,105,108,116,105,110,73,109,112,111,114,116,
-    101,114,46,109,111,100,117,108,101,95,114,101,112,114,78,99,
-    4,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,
-    67,0,0,0,115,44,0,0,0,124,2,100,0,107,9,114,
-    12,100,0,83,0,116,0,106,1,124,1,131,1,114,36,116,
-    2,124,1,124,0,100,1,100,2,141,3,83,0,100,0,83,
-    0,100,0,83,0,41,3,78,122,8,98,117,105,108,116,45,
-    105,110,41,1,114,104,0,0,0,41,3,114,49,0,0,0,
-    90,10,105,115,95,98,117,105,108,116,105,110,114,79,0,0,
-    0,41,4,218,3,99,108,115,114,72,0,0,0,218,4,112,
-    97,116,104,218,6,116,97,114,103,101,116,114,10,0,0,0,
-    114,10,0,0,0,114,11,0,0,0,218,9,102,105,110,100,
-    95,115,112,101,99,195,2,0,0,115,10,0,0,0,0,2,
-    8,1,4,1,10,1,14,2,122,25,66,117,105,108,116,105,
-    110,73,109,112,111,114,116,101,114,46,102,105,110,100,95,115,
-    112,101,99,99,3,0,0,0,0,0,0,0,4,0,0,0,
-    3,0,0,0,67,0,0,0,115,30,0,0,0,124,0,106,
-    0,124,1,124,2,131,2,125,3,124,3,100,1,107,9,114,
-    26,124,3,106,1,83,0,100,1,83,0,41,2,122,175,70,
-    105,110,100,32,116,104,101,32,98,117,105,108,116,45,105,110,
-    32,109,111,100,117,108,101,46,10,10,32,32,32,32,32,32,
-    32,32,73,102,32,39,112,97,116,104,39,32,105,115,32,101,
-    118,101,114,32,115,112,101,99,105,102,105,101,100,32,116,104,
-    101,110,32,116,104,101,32,115,101,97,114,99,104,32,105,115,
-    32,99,111,110,115,105,100,101,114,101,100,32,97,32,102,97,
-    105,108,117,114,101,46,10,10,32,32,32,32,32,32,32,32,
-    84,104,105,115,32,109,101,116,104,111,100,32,105,115,32,100,
-    101,112,114,101,99,97,116,101,100,46,32,32,85,115,101,32,
-    102,105,110,100,95,115,112,101,99,40,41,32,105,110,115,116,
-    101,97,100,46,10,10,32,32,32,32,32,32,32,32,78,41,
-    2,114,146,0,0,0,114,94,0,0,0,41,4,114,143,0,
-    0,0,114,72,0,0,0,114,144,0,0,0,114,83,0,0,
+    62,41,10,114,6,0,0,0,114,4,0,0,0,114,87,0,
+    0,0,218,9,69,120,99,101,112,116,105,111,110,218,8,95,
+    95,115,112,101,99,95,95,218,14,65,116,116,114,105,98,117,
+    116,101,69,114,114,111,114,218,22,95,109,111,100,117,108,101,
+    95,114,101,112,114,95,102,114,111,109,95,115,112,101,99,114,
+    1,0,0,0,218,8,95,95,102,105,108,101,95,95,114,38,
+    0,0,0,41,5,114,84,0,0,0,218,6,108,111,97,100,
+    101,114,114,83,0,0,0,114,15,0,0,0,218,8,102,105,
+    108,101,110,97,109,101,114,10,0,0,0,114,10,0,0,0,
+    114,11,0,0,0,218,12,95,109,111,100,117,108,101,95,114,
+    101,112,114,13,1,0,0,115,46,0,0,0,0,2,12,1,
+    10,4,2,1,10,1,14,1,6,1,2,1,10,1,14,1,
+    6,2,8,1,8,4,2,1,10,1,14,1,10,1,2,1,
+    10,1,14,1,8,1,10,2,18,2,114,96,0,0,0,99,
+    0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,
+    64,0,0,0,115,36,0,0,0,101,0,90,1,100,0,90,
+    2,100,1,100,2,132,0,90,3,100,3,100,4,132,0,90,
+    4,100,5,100,6,132,0,90,5,100,7,83,0,41,8,218,
+    17,95,105,110,115,116,97,108,108,101,100,95,115,97,102,101,
+    108,121,99,2,0,0,0,0,0,0,0,2,0,0,0,2,
+    0,0,0,67,0,0,0,115,18,0,0,0,124,1,124,0,
+    95,0,124,1,106,1,124,0,95,2,100,0,83,0,41,1,
+    78,41,3,218,7,95,109,111,100,117,108,101,114,90,0,0,
+    0,218,5,95,115,112,101,99,41,2,114,26,0,0,0,114,
+    84,0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,
+    0,0,0,114,27,0,0,0,51,1,0,0,115,4,0,0,
+    0,0,1,6,1,122,26,95,105,110,115,116,97,108,108,101,
+    100,95,115,97,102,101,108,121,46,95,95,105,110,105,116,95,
+    95,99,1,0,0,0,0,0,0,0,1,0,0,0,3,0,
+    0,0,67,0,0,0,115,28,0,0,0,100,1,124,0,106,
+    0,95,1,124,0,106,2,116,3,106,4,124,0,106,0,106,
+    5,60,0,100,0,83,0,41,2,78,84,41,6,114,99,0,
+    0,0,218,13,95,105,110,105,116,105,97,108,105,122,105,110,
+    103,114,98,0,0,0,114,14,0,0,0,114,80,0,0,0,
+    114,15,0,0,0,41,1,114,26,0,0,0,114,10,0,0,
+    0,114,10,0,0,0,114,11,0,0,0,114,46,0,0,0,
+    55,1,0,0,115,4,0,0,0,0,4,8,1,122,27,95,
+    105,110,115,116,97,108,108,101,100,95,115,97,102,101,108,121,
+    46,95,95,101,110,116,101,114,95,95,99,1,0,0,0,0,
+    0,0,0,3,0,0,0,17,0,0,0,71,0,0,0,115,
+    98,0,0,0,122,82,124,0,106,0,125,2,116,1,100,1,
+    100,2,132,0,124,1,68,0,131,1,131,1,114,64,121,14,
+    116,2,106,3,124,2,106,4,61,0,87,0,113,80,4,0,
+    116,5,107,10,114,60,1,0,1,0,1,0,89,0,113,80,
+    88,0,110,16,116,6,100,3,124,2,106,4,124,2,106,7,
+    131,3,1,0,87,0,100,0,100,4,124,0,106,0,95,8,
+    88,0,100,0,83,0,41,5,78,99,1,0,0,0,0,0,
+    0,0,2,0,0,0,3,0,0,0,115,0,0,0,115,22,
+    0,0,0,124,0,93,14,125,1,124,1,100,0,107,9,86,
+    0,1,0,113,2,100,0,83,0,41,1,78,114,10,0,0,
+    0,41,2,90,2,46,48,90,3,97,114,103,114,10,0,0,
+    0,114,10,0,0,0,114,11,0,0,0,250,9,60,103,101,
+    110,101,120,112,114,62,65,1,0,0,115,2,0,0,0,4,
+    0,122,45,95,105,110,115,116,97,108,108,101,100,95,115,97,
+    102,101,108,121,46,95,95,101,120,105,116,95,95,46,60,108,
+    111,99,97,108,115,62,46,60,103,101,110,101,120,112,114,62,
+    122,18,105,109,112,111,114,116,32,123,33,114,125,32,35,32,
+    123,33,114,125,70,41,9,114,99,0,0,0,218,3,97,110,
+    121,114,14,0,0,0,114,80,0,0,0,114,15,0,0,0,
+    114,55,0,0,0,114,69,0,0,0,114,94,0,0,0,114,
+    100,0,0,0,41,3,114,26,0,0,0,114,47,0,0,0,
+    114,83,0,0,0,114,10,0,0,0,114,10,0,0,0,114,
+    11,0,0,0,114,48,0,0,0,62,1,0,0,115,18,0,
+    0,0,0,1,2,1,6,1,18,1,2,1,14,1,14,1,
+    8,2,20,2,122,26,95,105,110,115,116,97,108,108,101,100,
+    95,115,97,102,101,108,121,46,95,95,101,120,105,116,95,95,
+    78,41,6,114,1,0,0,0,114,0,0,0,0,114,2,0,
+    0,0,114,27,0,0,0,114,46,0,0,0,114,48,0,0,
+    0,114,10,0,0,0,114,10,0,0,0,114,10,0,0,0,
+    114,11,0,0,0,114,97,0,0,0,49,1,0,0,115,6,
+    0,0,0,8,2,8,4,8,7,114,97,0,0,0,99,0,
+    0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,64,
+    0,0,0,115,114,0,0,0,101,0,90,1,100,0,90,2,
+    100,1,90,3,100,2,100,2,100,2,100,3,156,3,100,4,
+    100,5,132,2,90,4,100,6,100,7,132,0,90,5,100,8,
+    100,9,132,0,90,6,101,7,100,10,100,11,132,0,131,1,
+    90,8,101,8,106,9,100,12,100,11,132,0,131,1,90,8,
+    101,7,100,13,100,14,132,0,131,1,90,10,101,7,100,15,
+    100,16,132,0,131,1,90,11,101,11,106,9,100,17,100,16,
+    132,0,131,1,90,11,100,2,83,0,41,18,218,10,77,111,
+    100,117,108,101,83,112,101,99,97,208,5,0,0,84,104,101,
+    32,115,112,101,99,105,102,105,99,97,116,105,111,110,32,102,
+    111,114,32,97,32,109,111,100,117,108,101,44,32,117,115,101,
+    100,32,102,111,114,32,108,111,97,100,105,110,103,46,10,10,
+    32,32,32,32,65,32,109,111,100,117,108,101,39,115,32,115,
+    112,101,99,32,105,115,32,116,104,101,32,115,111,117,114,99,
+    101,32,102,111,114,32,105,110,102,111,114,109,97,116,105,111,
+    110,32,97,98,111,117,116,32,116,104,101,32,109,111,100,117,
+    108,101,46,32,32,70,111,114,10,32,32,32,32,100,97,116,
+    97,32,97,115,115,111,99,105,97,116,101,100,32,119,105,116,
+    104,32,116,104,101,32,109,111,100,117,108,101,44,32,105,110,
+    99,108,117,100,105,110,103,32,115,111,117,114,99,101,44,32,
+    117,115,101,32,116,104,101,32,115,112,101,99,39,115,10,32,
+    32,32,32,108,111,97,100,101,114,46,10,10,32,32,32,32,
+    96,110,97,109,101,96,32,105,115,32,116,104,101,32,97,98,
+    115,111,108,117,116,101,32,110,97,109,101,32,111,102,32,116,
+    104,101,32,109,111,100,117,108,101,46,32,32,96,108,111,97,
+    100,101,114,96,32,105,115,32,116,104,101,32,108,111,97,100,
+    101,114,10,32,32,32,32,116,111,32,117,115,101,32,119,104,
+    101,110,32,108,111,97,100,105,110,103,32,116,104,101,32,109,
+    111,100,117,108,101,46,32,32,96,112,97,114,101,110,116,96,
+    32,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,
+    116,104,101,10,32,32,32,32,112,97,99,107,97,103,101,32,
+    116,104,101,32,109,111,100,117,108,101,32,105,115,32,105,110,
+    46,32,32,84,104,101,32,112,97,114,101,110,116,32,105,115,
+    32,100,101,114,105,118,101,100,32,102,114,111,109,32,116,104,
+    101,32,110,97,109,101,46,10,10,32,32,32,32,96,105,115,
+    95,112,97,99,107,97,103,101,96,32,100,101,116,101,114,109,
+    105,110,101,115,32,105,102,32,116,104,101,32,109,111,100,117,
+    108,101,32,105,115,32,99,111,110,115,105,100,101,114,101,100,
+    32,97,32,112,97,99,107,97,103,101,32,111,114,10,32,32,
+    32,32,110,111,116,46,32,32,79,110,32,109,111,100,117,108,
+    101,115,32,116,104,105,115,32,105,115,32,114,101,102,108,101,
+    99,116,101,100,32,98,121,32,116,104,101,32,96,95,95,112,
+    97,116,104,95,95,96,32,97,116,116,114,105,98,117,116,101,
+    46,10,10,32,32,32,32,96,111,114,105,103,105,110,96,32,
+    105,115,32,116,104,101,32,115,112,101,99,105,102,105,99,32,
+    108,111,99,97,116,105,111,110,32,117,115,101,100,32,98,121,
+    32,116,104,101,32,108,111,97,100,101,114,32,102,114,111,109,
+    32,119,104,105,99,104,32,116,111,10,32,32,32,32,108,111,
+    97,100,32,116,104,101,32,109,111,100,117,108,101,44,32,105,
+    102,32,116,104,97,116,32,105,110,102,111,114,109,97,116,105,
+    111,110,32,105,115,32,97,118,97,105,108,97,98,108,101,46,
+    32,32,87,104,101,110,32,102,105,108,101,110,97,109,101,32,
+    105,115,10,32,32,32,32,115,101,116,44,32,111,114,105,103,
+    105,110,32,119,105,108,108,32,109,97,116,99,104,46,10,10,
+    32,32,32,32,96,104,97,115,95,108,111,99,97,116,105,111,
+    110,96,32,105,110,100,105,99,97,116,101,115,32,116,104,97,
+    116,32,97,32,115,112,101,99,39,115,32,34,111,114,105,103,
+    105,110,34,32,114,101,102,108,101,99,116,115,32,97,32,108,
+    111,99,97,116,105,111,110,46,10,32,32,32,32,87,104,101,
+    110,32,116,104,105,115,32,105,115,32,84,114,117,101,44,32,
+    96,95,95,102,105,108,101,95,95,96,32,97,116,116,114,105,
+    98,117,116,101,32,111,102,32,116,104,101,32,109,111,100,117,
+    108,101,32,105,115,32,115,101,116,46,10,10,32,32,32,32,
+    96,99,97,99,104,101,100,96,32,105,115,32,116,104,101,32,
+    108,111,99,97,116,105,111,110,32,111,102,32,116,104,101,32,
+    99,97,99,104,101,100,32,98,121,116,101,99,111,100,101,32,
+    102,105,108,101,44,32,105,102,32,97,110,121,46,32,32,73,
+    116,10,32,32,32,32,99,111,114,114,101,115,112,111,110,100,
+    115,32,116,111,32,116,104,101,32,96,95,95,99,97,99,104,
+    101,100,95,95,96,32,97,116,116,114,105,98,117,116,101,46,
+    10,10,32,32,32,32,96,115,117,98,109,111,100,117,108,101,
+    95,115,101,97,114,99,104,95,108,111,99,97,116,105,111,110,
+    115,96,32,105,115,32,116,104,101,32,115,101,113,117,101,110,
+    99,101,32,111,102,32,112,97,116,104,32,101,110,116,114,105,
+    101,115,32,116,111,10,32,32,32,32,115,101,97,114,99,104,
+    32,119,104,101,110,32,105,109,112,111,114,116,105,110,103,32,
+    115,117,98,109,111,100,117,108,101,115,46,32,32,73,102,32,
+    115,101,116,44,32,105,115,95,112,97,99,107,97,103,101,32,
+    115,104,111,117,108,100,32,98,101,10,32,32,32,32,84,114,
+    117,101,45,45,97,110,100,32,70,97,108,115,101,32,111,116,
+    104,101,114,119,105,115,101,46,10,10,32,32,32,32,80,97,
+    99,107,97,103,101,115,32,97,114,101,32,115,105,109,112,108,
+    121,32,109,111,100,117,108,101,115,32,116,104,97,116,32,40,
+    109,97,121,41,32,104,97,118,101,32,115,117,98,109,111,100,
+    117,108,101,115,46,32,32,73,102,32,97,32,115,112,101,99,
+    10,32,32,32,32,104,97,115,32,97,32,110,111,110,45,78,
+    111,110,101,32,118,97,108,117,101,32,105,110,32,96,115,117,
+    98,109,111,100,117,108,101,95,115,101,97,114,99,104,95,108,
+    111,99,97,116,105,111,110,115,96,44,32,116,104,101,32,105,
+    109,112,111,114,116,10,32,32,32,32,115,121,115,116,101,109,
+    32,119,105,108,108,32,99,111,110,115,105,100,101,114,32,109,
+    111,100,117,108,101,115,32,108,111,97,100,101,100,32,102,114,
+    111,109,32,116,104,101,32,115,112,101,99,32,97,115,32,112,
+    97,99,107,97,103,101,115,46,10,10,32,32,32,32,79,110,
+    108,121,32,102,105,110,100,101,114,115,32,40,115,101,101,32,
+    105,109,112,111,114,116,108,105,98,46,97,98,99,46,77,101,
+    116,97,80,97,116,104,70,105,110,100,101,114,32,97,110,100,
+    10,32,32,32,32,105,109,112,111,114,116,108,105,98,46,97,
+    98,99,46,80,97,116,104,69,110,116,114,121,70,105,110,100,
+    101,114,41,32,115,104,111,117,108,100,32,109,111,100,105,102,
+    121,32,77,111,100,117,108,101,83,112,101,99,32,105,110,115,
+    116,97,110,99,101,115,46,10,10,32,32,32,32,78,41,3,
+    218,6,111,114,105,103,105,110,218,12,108,111,97,100,101,114,
+    95,115,116,97,116,101,218,10,105,115,95,112,97,99,107,97,
+    103,101,99,3,0,0,0,3,0,0,0,6,0,0,0,2,
+    0,0,0,67,0,0,0,115,54,0,0,0,124,1,124,0,
+    95,0,124,2,124,0,95,1,124,3,124,0,95,2,124,4,
+    124,0,95,3,124,5,114,32,103,0,110,2,100,0,124,0,
+    95,4,100,1,124,0,95,5,100,0,124,0,95,6,100,0,
+    83,0,41,2,78,70,41,7,114,15,0,0,0,114,94,0,
+    0,0,114,104,0,0,0,114,105,0,0,0,218,26,115,117,
+    98,109,111,100,117,108,101,95,115,101,97,114,99,104,95,108,
+    111,99,97,116,105,111,110,115,218,13,95,115,101,116,95,102,
+    105,108,101,97,116,116,114,218,7,95,99,97,99,104,101,100,
+    41,6,114,26,0,0,0,114,15,0,0,0,114,94,0,0,
+    0,114,104,0,0,0,114,105,0,0,0,114,106,0,0,0,
+    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,
+    27,0,0,0,113,1,0,0,115,14,0,0,0,0,2,6,
+    1,6,1,6,1,6,1,14,3,6,1,122,19,77,111,100,
+    117,108,101,83,112,101,99,46,95,95,105,110,105,116,95,95,
+    99,1,0,0,0,0,0,0,0,2,0,0,0,4,0,0,
+    0,67,0,0,0,115,102,0,0,0,100,1,106,0,124,0,
+    106,1,131,1,100,2,106,0,124,0,106,2,131,1,103,2,
+    125,1,124,0,106,3,100,0,107,9,114,52,124,1,106,4,
+    100,3,106,0,124,0,106,3,131,1,131,1,1,0,124,0,
+    106,5,100,0,107,9,114,80,124,1,106,4,100,4,106,0,
+    124,0,106,5,131,1,131,1,1,0,100,5,106,0,124,0,
+    106,6,106,7,100,6,106,8,124,1,131,1,131,2,83,0,
+    41,7,78,122,9,110,97,109,101,61,123,33,114,125,122,11,
+    108,111,97,100,101,114,61,123,33,114,125,122,11,111,114,105,
+    103,105,110,61,123,33,114,125,122,29,115,117,98,109,111,100,
+    117,108,101,95,115,101,97,114,99,104,95,108,111,99,97,116,
+    105,111,110,115,61,123,125,122,6,123,125,40,123,125,41,122,
+    2,44,32,41,9,114,38,0,0,0,114,15,0,0,0,114,
+    94,0,0,0,114,104,0,0,0,218,6,97,112,112,101,110,
+    100,114,107,0,0,0,218,9,95,95,99,108,97,115,115,95,
+    95,114,1,0,0,0,218,4,106,111,105,110,41,2,114,26,
+    0,0,0,114,47,0,0,0,114,10,0,0,0,114,10,0,
+    0,0,114,11,0,0,0,114,40,0,0,0,125,1,0,0,
+    115,16,0,0,0,0,1,10,1,14,1,10,1,18,1,10,
+    1,8,1,10,1,122,19,77,111,100,117,108,101,83,112,101,
+    99,46,95,95,114,101,112,114,95,95,99,2,0,0,0,0,
+    0,0,0,3,0,0,0,11,0,0,0,67,0,0,0,115,
+    102,0,0,0,124,0,106,0,125,2,121,70,124,0,106,1,
+    124,1,106,1,107,2,111,76,124,0,106,2,124,1,106,2,
+    107,2,111,76,124,0,106,3,124,1,106,3,107,2,111,76,
+    124,2,124,1,106,0,107,2,111,76,124,0,106,4,124,1,
+    106,4,107,2,111,76,124,0,106,5,124,1,106,5,107,2,
+    83,0,4,0,116,6,107,10,114,96,1,0,1,0,1,0,
+    100,1,83,0,88,0,100,0,83,0,41,2,78,70,41,7,
+    114,107,0,0,0,114,15,0,0,0,114,94,0,0,0,114,
+    104,0,0,0,218,6,99,97,99,104,101,100,218,12,104,97,
+    115,95,108,111,99,97,116,105,111,110,114,91,0,0,0,41,
+    3,114,26,0,0,0,90,5,111,116,104,101,114,90,4,115,
+    109,115,108,114,10,0,0,0,114,10,0,0,0,114,11,0,
+    0,0,218,6,95,95,101,113,95,95,135,1,0,0,115,20,
+    0,0,0,0,1,6,1,2,1,12,1,12,1,12,1,10,
+    1,12,1,12,1,14,1,122,17,77,111,100,117,108,101,83,
+    112,101,99,46,95,95,101,113,95,95,99,1,0,0,0,0,
+    0,0,0,1,0,0,0,2,0,0,0,67,0,0,0,115,
+    58,0,0,0,124,0,106,0,100,0,107,8,114,52,124,0,
+    106,1,100,0,107,9,114,52,124,0,106,2,114,52,116,3,
+    100,0,107,8,114,38,116,4,130,1,116,3,106,5,124,0,
+    106,1,131,1,124,0,95,0,124,0,106,0,83,0,41,1,
+    78,41,6,114,109,0,0,0,114,104,0,0,0,114,108,0,
+    0,0,218,19,95,98,111,111,116,115,116,114,97,112,95,101,
+    120,116,101,114,110,97,108,218,19,78,111,116,73,109,112,108,
+    101,109,101,110,116,101,100,69,114,114,111,114,90,11,95,103,
+    101,116,95,99,97,99,104,101,100,41,1,114,26,0,0,0,
+    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,
+    113,0,0,0,147,1,0,0,115,12,0,0,0,0,2,10,
+    1,16,1,8,1,4,1,14,1,122,17,77,111,100,117,108,
+    101,83,112,101,99,46,99,97,99,104,101,100,99,2,0,0,
+    0,0,0,0,0,2,0,0,0,2,0,0,0,67,0,0,
+    0,115,10,0,0,0,124,1,124,0,95,0,100,0,83,0,
+    41,1,78,41,1,114,109,0,0,0,41,2,114,26,0,0,
+    0,114,113,0,0,0,114,10,0,0,0,114,10,0,0,0,
+    114,11,0,0,0,114,113,0,0,0,156,1,0,0,115,2,
+    0,0,0,0,2,99,1,0,0,0,0,0,0,0,1,0,
+    0,0,2,0,0,0,67,0,0,0,115,36,0,0,0,124,
+    0,106,0,100,1,107,8,114,26,124,0,106,1,106,2,100,
+    2,131,1,100,3,25,0,83,0,124,0,106,1,83,0,100,
+    1,83,0,41,4,122,32,84,104,101,32,110,97,109,101,32,
+    111,102,32,116,104,101,32,109,111,100,117,108,101,39,115,32,
+    112,97,114,101,110,116,46,78,218,1,46,114,19,0,0,0,
+    41,3,114,107,0,0,0,114,15,0,0,0,218,10,114,112,
+    97,114,116,105,116,105,111,110,41,1,114,26,0,0,0,114,
+    10,0,0,0,114,10,0,0,0,114,11,0,0,0,218,6,
+    112,97,114,101,110,116,160,1,0,0,115,6,0,0,0,0,
+    3,10,1,16,2,122,17,77,111,100,117,108,101,83,112,101,
+    99,46,112,97,114,101,110,116,99,1,0,0,0,0,0,0,
+    0,1,0,0,0,1,0,0,0,67,0,0,0,115,6,0,
+    0,0,124,0,106,0,83,0,41,1,78,41,1,114,108,0,
+    0,0,41,1,114,26,0,0,0,114,10,0,0,0,114,10,
+    0,0,0,114,11,0,0,0,114,114,0,0,0,168,1,0,
+    0,115,2,0,0,0,0,2,122,23,77,111,100,117,108,101,
+    83,112,101,99,46,104,97,115,95,108,111,99,97,116,105,111,
+    110,99,2,0,0,0,0,0,0,0,2,0,0,0,2,0,
+    0,0,67,0,0,0,115,14,0,0,0,116,0,124,1,131,
+    1,124,0,95,1,100,0,83,0,41,1,78,41,2,218,4,
+    98,111,111,108,114,108,0,0,0,41,2,114,26,0,0,0,
+    218,5,118,97,108,117,101,114,10,0,0,0,114,10,0,0,
+    0,114,11,0,0,0,114,114,0,0,0,172,1,0,0,115,
+    2,0,0,0,0,2,41,12,114,1,0,0,0,114,0,0,
+    0,0,114,2,0,0,0,114,3,0,0,0,114,27,0,0,
+    0,114,40,0,0,0,114,115,0,0,0,218,8,112,114,111,
+    112,101,114,116,121,114,113,0,0,0,218,6,115,101,116,116,
+    101,114,114,120,0,0,0,114,114,0,0,0,114,10,0,0,
     0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
-    218,11,102,105,110,100,95,109,111,100,117,108,101,204,2,0,
-    0,115,4,0,0,0,0,9,12,1,122,27,66,117,105,108,
-    116,105,110,73,109,112,111,114,116,101,114,46,102,105,110,100,
-    95,109,111,100,117,108,101,99,2,0,0,0,0,0,0,0,
-    2,0,0,0,4,0,0,0,67,0,0,0,115,46,0,0,
-    0,124,1,106,0,116,1,106,2,107,7,114,34,116,3,100,
-    1,106,4,124,1,106,0,131,1,124,1,106,0,100,2,141,
-    2,130,1,116,5,116,6,106,7,124,1,131,2,83,0,41,
-    3,122,24,67,114,101,97,116,101,32,97,32,98,117,105,108,
-    116,45,105,110,32,109,111,100,117,108,101,122,29,123,33,114,
-    125,32,105,115,32,110,111,116,32,97,32,98,117,105,108,116,
-    45,105,110,32,109,111,100,117,108,101,41,1,114,15,0,0,
-    0,41,8,114,15,0,0,0,114,14,0,0,0,114,70,0,
-    0,0,114,71,0,0,0,114,38,0,0,0,114,59,0,0,
-    0,114,49,0,0,0,90,14,99,114,101,97,116,101,95,98,
-    117,105,108,116,105,110,41,2,114,26,0,0,0,114,83,0,
+    114,103,0,0,0,76,1,0,0,115,20,0,0,0,8,35,
+    4,2,4,1,14,11,8,10,8,12,12,9,14,4,12,8,
+    12,4,114,103,0,0,0,41,2,114,104,0,0,0,114,106,
+    0,0,0,99,2,0,0,0,2,0,0,0,6,0,0,0,
+    14,0,0,0,67,0,0,0,115,154,0,0,0,116,0,124,
+    1,100,1,131,2,114,74,116,1,100,2,107,8,114,22,116,
+    2,130,1,116,1,106,3,125,4,124,3,100,2,107,8,114,
+    48,124,4,124,0,124,1,100,3,141,2,83,0,124,3,114,
+    56,103,0,110,2,100,2,125,5,124,4,124,0,124,1,124,
+    5,100,4,141,3,83,0,124,3,100,2,107,8,114,138,116,
+    0,124,1,100,5,131,2,114,134,121,14,124,1,106,4,124,
+    0,131,1,125,3,87,0,113,138,4,0,116,5,107,10,114,
+    130,1,0,1,0,1,0,100,2,125,3,89,0,113,138,88,
+    0,110,4,100,6,125,3,116,6,124,0,124,1,124,2,124,
+    3,100,7,141,4,83,0,41,8,122,53,82,101,116,117,114,
+    110,32,97,32,109,111,100,117,108,101,32,115,112,101,99,32,
+    98,97,115,101,100,32,111,110,32,118,97,114,105,111,117,115,
+    32,108,111,97,100,101,114,32,109,101,116,104,111,100,115,46,
+    90,12,103,101,116,95,102,105,108,101,110,97,109,101,78,41,
+    1,114,94,0,0,0,41,2,114,94,0,0,0,114,107,0,
+    0,0,114,106,0,0,0,70,41,2,114,104,0,0,0,114,
+    106,0,0,0,41,7,114,4,0,0,0,114,116,0,0,0,
+    114,117,0,0,0,218,23,115,112,101,99,95,102,114,111,109,
+    95,102,105,108,101,95,108,111,99,97,116,105,111,110,114,106,
+    0,0,0,114,71,0,0,0,114,103,0,0,0,41,6,114,
+    15,0,0,0,114,94,0,0,0,114,104,0,0,0,114,106,
+    0,0,0,114,125,0,0,0,90,6,115,101,97,114,99,104,
+    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,
+    79,0,0,0,177,1,0,0,115,34,0,0,0,0,2,10,
+    1,8,1,4,1,6,2,8,1,12,1,12,1,6,1,8,
+    2,8,1,10,1,2,1,14,1,14,1,12,3,4,2,114,
+    79,0,0,0,99,3,0,0,0,0,0,0,0,8,0,0,
+    0,53,0,0,0,67,0,0,0,115,56,1,0,0,121,10,
+    124,0,106,0,125,3,87,0,110,20,4,0,116,1,107,10,
+    114,30,1,0,1,0,1,0,89,0,110,14,88,0,124,3,
+    100,0,107,9,114,44,124,3,83,0,124,0,106,2,125,4,
+    124,1,100,0,107,8,114,90,121,10,124,0,106,3,125,1,
+    87,0,110,20,4,0,116,1,107,10,114,88,1,0,1,0,
+    1,0,89,0,110,2,88,0,121,10,124,0,106,4,125,5,
+    87,0,110,24,4,0,116,1,107,10,114,124,1,0,1,0,
+    1,0,100,0,125,5,89,0,110,2,88,0,124,2,100,0,
+    107,8,114,184,124,5,100,0,107,8,114,180,121,10,124,1,
+    106,5,125,2,87,0,113,184,4,0,116,1,107,10,114,176,
+    1,0,1,0,1,0,100,0,125,2,89,0,113,184,88,0,
+    110,4,124,5,125,2,121,10,124,0,106,6,125,6,87,0,
+    110,24,4,0,116,1,107,10,114,218,1,0,1,0,1,0,
+    100,0,125,6,89,0,110,2,88,0,121,14,116,7,124,0,
+    106,8,131,1,125,7,87,0,110,26,4,0,116,1,107,10,
+    144,1,114,4,1,0,1,0,1,0,100,0,125,7,89,0,
+    110,2,88,0,116,9,124,4,124,1,124,2,100,1,141,3,
+    125,3,124,5,100,0,107,8,144,1,114,34,100,2,110,2,
+    100,3,124,3,95,10,124,6,124,3,95,11,124,7,124,3,
+    95,12,124,3,83,0,41,4,78,41,1,114,104,0,0,0,
+    70,84,41,13,114,90,0,0,0,114,91,0,0,0,114,1,
+    0,0,0,114,86,0,0,0,114,93,0,0,0,90,7,95,
+    79,82,73,71,73,78,218,10,95,95,99,97,99,104,101,100,
+    95,95,218,4,108,105,115,116,218,8,95,95,112,97,116,104,
+    95,95,114,103,0,0,0,114,108,0,0,0,114,113,0,0,
+    0,114,107,0,0,0,41,8,114,84,0,0,0,114,94,0,
+    0,0,114,104,0,0,0,114,83,0,0,0,114,15,0,0,
+    0,90,8,108,111,99,97,116,105,111,110,114,113,0,0,0,
+    114,107,0,0,0,114,10,0,0,0,114,10,0,0,0,114,
+    11,0,0,0,218,17,95,115,112,101,99,95,102,114,111,109,
+    95,109,111,100,117,108,101,203,1,0,0,115,72,0,0,0,
+    0,2,2,1,10,1,14,1,6,2,8,1,4,2,6,1,
+    8,1,2,1,10,1,14,2,6,1,2,1,10,1,14,1,
+    10,1,8,1,8,1,2,1,10,1,14,1,12,2,4,1,
+    2,1,10,1,14,1,10,1,2,1,14,1,16,1,10,2,
+    14,1,20,1,6,1,6,1,114,129,0,0,0,70,41,1,
+    218,8,111,118,101,114,114,105,100,101,99,2,0,0,0,1,
+    0,0,0,5,0,0,0,59,0,0,0,67,0,0,0,115,
+    212,1,0,0,124,2,115,20,116,0,124,1,100,1,100,0,
+    131,3,100,0,107,8,114,54,121,12,124,0,106,1,124,1,
+    95,2,87,0,110,20,4,0,116,3,107,10,114,52,1,0,
+    1,0,1,0,89,0,110,2,88,0,124,2,115,74,116,0,
+    124,1,100,2,100,0,131,3,100,0,107,8,114,166,124,0,
+    106,4,125,3,124,3,100,0,107,8,114,134,124,0,106,5,
+    100,0,107,9,114,134,116,6,100,0,107,8,114,110,116,7,
+    130,1,116,6,106,8,125,4,124,4,106,9,124,4,131,1,
+    125,3,124,0,106,5,124,3,95,10,121,10,124,3,124,1,
+    95,11,87,0,110,20,4,0,116,3,107,10,114,164,1,0,
+    1,0,1,0,89,0,110,2,88,0,124,2,115,186,116,0,
+    124,1,100,3,100,0,131,3,100,0,107,8,114,220,121,12,
+    124,0,106,12,124,1,95,13,87,0,110,20,4,0,116,3,
+    107,10,114,218,1,0,1,0,1,0,89,0,110,2,88,0,
+    121,10,124,0,124,1,95,14,87,0,110,20,4,0,116,3,
+    107,10,114,250,1,0,1,0,1,0,89,0,110,2,88,0,
+    124,2,144,1,115,20,116,0,124,1,100,4,100,0,131,3,
+    100,0,107,8,144,1,114,68,124,0,106,5,100,0,107,9,
+    144,1,114,68,121,12,124,0,106,5,124,1,95,15,87,0,
+    110,22,4,0,116,3,107,10,144,1,114,66,1,0,1,0,
+    1,0,89,0,110,2,88,0,124,0,106,16,144,1,114,208,
+    124,2,144,1,115,100,116,0,124,1,100,5,100,0,131,3,
+    100,0,107,8,144,1,114,136,121,12,124,0,106,17,124,1,
+    95,18,87,0,110,22,4,0,116,3,107,10,144,1,114,134,
+    1,0,1,0,1,0,89,0,110,2,88,0,124,2,144,1,
+    115,160,116,0,124,1,100,6,100,0,131,3,100,0,107,8,
+    144,1,114,208,124,0,106,19,100,0,107,9,144,1,114,208,
+    121,12,124,0,106,19,124,1,95,20,87,0,110,22,4,0,
+    116,3,107,10,144,1,114,206,1,0,1,0,1,0,89,0,
+    110,2,88,0,124,1,83,0,41,7,78,114,1,0,0,0,
+    114,86,0,0,0,218,11,95,95,112,97,99,107,97,103,101,
+    95,95,114,128,0,0,0,114,93,0,0,0,114,126,0,0,
+    0,41,21,114,6,0,0,0,114,15,0,0,0,114,1,0,
+    0,0,114,91,0,0,0,114,94,0,0,0,114,107,0,0,
+    0,114,116,0,0,0,114,117,0,0,0,218,16,95,78,97,
+    109,101,115,112,97,99,101,76,111,97,100,101,114,218,7,95,
+    95,110,101,119,95,95,90,5,95,112,97,116,104,114,86,0,
+    0,0,114,120,0,0,0,114,131,0,0,0,114,90,0,0,
+    0,114,128,0,0,0,114,114,0,0,0,114,104,0,0,0,
+    114,93,0,0,0,114,113,0,0,0,114,126,0,0,0,41,
+    5,114,83,0,0,0,114,84,0,0,0,114,130,0,0,0,
+    114,94,0,0,0,114,132,0,0,0,114,10,0,0,0,114,
+    10,0,0,0,114,11,0,0,0,218,18,95,105,110,105,116,
+    95,109,111,100,117,108,101,95,97,116,116,114,115,248,1,0,
+    0,115,92,0,0,0,0,4,20,1,2,1,12,1,14,1,
+    6,2,20,1,6,1,8,2,10,1,8,1,4,1,6,2,
+    10,1,8,1,2,1,10,1,14,1,6,2,20,1,2,1,
+    12,1,14,1,6,2,2,1,10,1,14,1,6,2,24,1,
+    12,1,2,1,12,1,16,1,6,2,8,1,24,1,2,1,
+    12,1,16,1,6,2,24,1,12,1,2,1,12,1,16,1,
+    6,1,114,134,0,0,0,99,1,0,0,0,0,0,0,0,
+    2,0,0,0,3,0,0,0,67,0,0,0,115,82,0,0,
+    0,100,1,125,1,116,0,124,0,106,1,100,2,131,2,114,
+    30,124,0,106,1,106,2,124,0,131,1,125,1,110,20,116,
+    0,124,0,106,1,100,3,131,2,114,50,116,3,100,4,131,
+    1,130,1,124,1,100,1,107,8,114,68,116,4,124,0,106,
+    5,131,1,125,1,116,6,124,0,124,1,131,2,1,0,124,
+    1,83,0,41,5,122,43,67,114,101,97,116,101,32,97,32,
+    109,111,100,117,108,101,32,98,97,115,101,100,32,111,110,32,
+    116,104,101,32,112,114,111,118,105,100,101,100,32,115,112,101,
+    99,46,78,218,13,99,114,101,97,116,101,95,109,111,100,117,
+    108,101,218,11,101,120,101,99,95,109,111,100,117,108,101,122,
+    66,108,111,97,100,101,114,115,32,116,104,97,116,32,100,101,
+    102,105,110,101,32,101,120,101,99,95,109,111,100,117,108,101,
+    40,41,32,109,117,115,116,32,97,108,115,111,32,100,101,102,
+    105,110,101,32,99,114,101,97,116,101,95,109,111,100,117,108,
+    101,40,41,41,7,114,4,0,0,0,114,94,0,0,0,114,
+    135,0,0,0,114,71,0,0,0,114,16,0,0,0,114,15,
+    0,0,0,114,134,0,0,0,41,2,114,83,0,0,0,114,
+    84,0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,
+    0,0,0,218,16,109,111,100,117,108,101,95,102,114,111,109,
+    95,115,112,101,99,52,2,0,0,115,18,0,0,0,0,3,
+    4,1,12,3,14,1,12,1,8,2,8,1,10,1,10,1,
+    114,137,0,0,0,99,1,0,0,0,0,0,0,0,2,0,
+    0,0,3,0,0,0,67,0,0,0,115,106,0,0,0,124,
+    0,106,0,100,1,107,8,114,14,100,2,110,4,124,0,106,
+    0,125,1,124,0,106,1,100,1,107,8,114,66,124,0,106,
+    2,100,1,107,8,114,50,100,3,106,3,124,1,131,1,83,
+    0,100,4,106,3,124,1,124,0,106,2,131,2,83,0,110,
+    36,124,0,106,4,114,86,100,5,106,3,124,1,124,0,106,
+    1,131,2,83,0,100,6,106,3,124,0,106,0,124,0,106,
+    1,131,2,83,0,100,1,83,0,41,7,122,38,82,101,116,
+    117,114,110,32,116,104,101,32,114,101,112,114,32,116,111,32,
+    117,115,101,32,102,111,114,32,116,104,101,32,109,111,100,117,
+    108,101,46,78,114,88,0,0,0,122,13,60,109,111,100,117,
+    108,101,32,123,33,114,125,62,122,20,60,109,111,100,117,108,
+    101,32,123,33,114,125,32,40,123,33,114,125,41,62,122,23,
+    60,109,111,100,117,108,101,32,123,33,114,125,32,102,114,111,
+    109,32,123,33,114,125,62,122,18,60,109,111,100,117,108,101,
+    32,123,33,114,125,32,40,123,125,41,62,41,5,114,15,0,
+    0,0,114,104,0,0,0,114,94,0,0,0,114,38,0,0,
+    0,114,114,0,0,0,41,2,114,83,0,0,0,114,15,0,
     0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,
-    0,114,135,0,0,0,216,2,0,0,115,8,0,0,0,0,
-    3,12,1,12,1,10,1,122,29,66,117,105,108,116,105,110,
-    73,109,112,111,114,116,101,114,46,99,114,101,97,116,101,95,
-    109,111,100,117,108,101,99,2,0,0,0,0,0,0,0,2,
-    0,0,0,3,0,0,0,67,0,0,0,115,16,0,0,0,
-    116,0,116,1,106,2,124,1,131,2,1,0,100,1,83,0,
-    41,2,122,22,69,120,101,99,32,97,32,98,117,105,108,116,
-    45,105,110,32,109,111,100,117,108,101,78,41,3,114,59,0,
-    0,0,114,49,0,0,0,90,12,101,120,101,99,95,98,117,
-    105,108,116,105,110,41,2,114,26,0,0,0,114,84,0,0,
+    0,114,92,0,0,0,69,2,0,0,115,16,0,0,0,0,
+    3,20,1,10,1,10,1,10,2,16,2,6,1,14,2,114,
+    92,0,0,0,99,2,0,0,0,0,0,0,0,4,0,0,
+    0,12,0,0,0,67,0,0,0,115,178,0,0,0,124,0,
+    106,0,125,2,116,1,124,2,131,1,143,148,1,0,116,2,
+    106,3,106,4,124,2,131,1,124,1,107,9,114,54,100,1,
+    106,5,124,2,131,1,125,3,116,6,124,3,124,2,100,2,
+    141,2,130,1,124,0,106,7,100,3,107,8,114,106,124,0,
+    106,8,100,3,107,8,114,88,116,6,100,4,124,0,106,0,
+    100,2,141,2,130,1,116,9,124,0,124,1,100,5,100,6,
+    141,3,1,0,124,1,83,0,116,9,124,0,124,1,100,5,
+    100,6,141,3,1,0,116,10,124,0,106,7,100,7,131,2,
+    115,146,124,0,106,7,106,11,124,2,131,1,1,0,110,12,
+    124,0,106,7,106,12,124,1,131,1,1,0,87,0,100,3,
+    81,0,82,0,88,0,116,2,106,3,124,2,25,0,83,0,
+    41,8,122,70,69,120,101,99,117,116,101,32,116,104,101,32,
+    115,112,101,99,39,115,32,115,112,101,99,105,102,105,101,100,
+    32,109,111,100,117,108,101,32,105,110,32,97,110,32,101,120,
+    105,115,116,105,110,103,32,109,111,100,117,108,101,39,115,32,
+    110,97,109,101,115,112,97,99,101,46,122,30,109,111,100,117,
+    108,101,32,123,33,114,125,32,110,111,116,32,105,110,32,115,
+    121,115,46,109,111,100,117,108,101,115,41,1,114,15,0,0,
+    0,78,122,14,109,105,115,115,105,110,103,32,108,111,97,100,
+    101,114,84,41,1,114,130,0,0,0,114,136,0,0,0,41,
+    13,114,15,0,0,0,114,42,0,0,0,114,14,0,0,0,
+    114,80,0,0,0,114,30,0,0,0,114,38,0,0,0,114,
+    71,0,0,0,114,94,0,0,0,114,107,0,0,0,114,134,
+    0,0,0,114,4,0,0,0,218,11,108,111,97,100,95,109,
+    111,100,117,108,101,114,136,0,0,0,41,4,114,83,0,0,
+    0,114,84,0,0,0,114,15,0,0,0,218,3,109,115,103,
+    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,
+    81,0,0,0,86,2,0,0,115,30,0,0,0,0,2,6,
+    1,10,1,16,1,10,1,12,1,10,1,10,1,14,2,14,
+    1,4,1,14,1,12,4,14,2,22,1,114,81,0,0,0,
+    99,1,0,0,0,0,0,0,0,2,0,0,0,27,0,0,
+    0,67,0,0,0,115,206,0,0,0,124,0,106,0,106,1,
+    124,0,106,2,131,1,1,0,116,3,106,4,124,0,106,2,
+    25,0,125,1,116,5,124,1,100,1,100,0,131,3,100,0,
+    107,8,114,76,121,12,124,0,106,0,124,1,95,6,87,0,
+    110,20,4,0,116,7,107,10,114,74,1,0,1,0,1,0,
+    89,0,110,2,88,0,116,5,124,1,100,2,100,0,131,3,
+    100,0,107,8,114,154,121,40,124,1,106,8,124,1,95,9,
+    116,10,124,1,100,3,131,2,115,130,124,0,106,2,106,11,
+    100,4,131,1,100,5,25,0,124,1,95,9,87,0,110,20,
+    4,0,116,7,107,10,114,152,1,0,1,0,1,0,89,0,
+    110,2,88,0,116,5,124,1,100,6,100,0,131,3,100,0,
+    107,8,114,202,121,10,124,0,124,1,95,12,87,0,110,20,
+    4,0,116,7,107,10,114,200,1,0,1,0,1,0,89,0,
+    110,2,88,0,124,1,83,0,41,7,78,114,86,0,0,0,
+    114,131,0,0,0,114,128,0,0,0,114,118,0,0,0,114,
+    19,0,0,0,114,90,0,0,0,41,13,114,94,0,0,0,
+    114,138,0,0,0,114,15,0,0,0,114,14,0,0,0,114,
+    80,0,0,0,114,6,0,0,0,114,86,0,0,0,114,91,
+    0,0,0,114,1,0,0,0,114,131,0,0,0,114,4,0,
+    0,0,114,119,0,0,0,114,90,0,0,0,41,2,114,83,
+    0,0,0,114,84,0,0,0,114,10,0,0,0,114,10,0,
+    0,0,114,11,0,0,0,218,25,95,108,111,97,100,95,98,
+    97,99,107,119,97,114,100,95,99,111,109,112,97,116,105,98,
+    108,101,110,2,0,0,115,40,0,0,0,0,4,14,2,12,
+    1,16,1,2,1,12,1,14,1,6,1,16,1,2,4,8,
+    1,10,1,22,1,14,1,6,1,16,1,2,1,10,1,14,
+    1,6,1,114,140,0,0,0,99,1,0,0,0,0,0,0,
+    0,2,0,0,0,11,0,0,0,67,0,0,0,115,118,0,
+    0,0,124,0,106,0,100,0,107,9,114,30,116,1,124,0,
+    106,0,100,1,131,2,115,30,116,2,124,0,131,1,83,0,
+    116,3,124,0,131,1,125,1,116,4,124,1,131,1,143,54,
+    1,0,124,0,106,0,100,0,107,8,114,84,124,0,106,5,
+    100,0,107,8,114,96,116,6,100,2,124,0,106,7,100,3,
+    141,2,130,1,110,12,124,0,106,0,106,8,124,1,131,1,
+    1,0,87,0,100,0,81,0,82,0,88,0,116,9,106,10,
+    124,0,106,7,25,0,83,0,41,4,78,114,136,0,0,0,
+    122,14,109,105,115,115,105,110,103,32,108,111,97,100,101,114,
+    41,1,114,15,0,0,0,41,11,114,94,0,0,0,114,4,
+    0,0,0,114,140,0,0,0,114,137,0,0,0,114,97,0,
+    0,0,114,107,0,0,0,114,71,0,0,0,114,15,0,0,
+    0,114,136,0,0,0,114,14,0,0,0,114,80,0,0,0,
+    41,2,114,83,0,0,0,114,84,0,0,0,114,10,0,0,
+    0,114,10,0,0,0,114,11,0,0,0,218,14,95,108,111,
+    97,100,95,117,110,108,111,99,107,101,100,139,2,0,0,115,
+    20,0,0,0,0,2,10,2,12,1,8,2,8,1,10,1,
+    10,1,10,1,16,3,22,5,114,141,0,0,0,99,1,0,
+    0,0,0,0,0,0,1,0,0,0,9,0,0,0,67,0,
+    0,0,115,30,0,0,0,116,0,124,0,106,1,131,1,143,
+    10,1,0,116,2,124,0,131,1,83,0,81,0,82,0,88,
+    0,100,1,83,0,41,2,122,191,82,101,116,117,114,110,32,
+    97,32,110,101,119,32,109,111,100,117,108,101,32,111,98,106,
+    101,99,116,44,32,108,111,97,100,101,100,32,98,121,32,116,
+    104,101,32,115,112,101,99,39,115,32,108,111,97,100,101,114,
+    46,10,10,32,32,32,32,84,104,101,32,109,111,100,117,108,
+    101,32,105,115,32,110,111,116,32,97,100,100,101,100,32,116,
+    111,32,105,116,115,32,112,97,114,101,110,116,46,10,10,32,
+    32,32,32,73,102,32,97,32,109,111,100,117,108,101,32,105,
+    115,32,97,108,114,101,97,100,121,32,105,110,32,115,121,115,
+    46,109,111,100,117,108,101,115,44,32,116,104,97,116,32,101,
+    120,105,115,116,105,110,103,32,109,111,100,117,108,101,32,103,
+    101,116,115,10,32,32,32,32,99,108,111,98,98,101,114,101,
+    100,46,10,10,32,32,32,32,78,41,3,114,42,0,0,0,
+    114,15,0,0,0,114,141,0,0,0,41,1,114,83,0,0,
     0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
-    114,136,0,0,0,224,2,0,0,115,2,0,0,0,0,3,
-    122,27,66,117,105,108,116,105,110,73,109,112,111,114,116,101,
-    114,46,101,120,101,99,95,109,111,100,117,108,101,99,2,0,
-    0,0,0,0,0,0,2,0,0,0,1,0,0,0,67,0,
-    0,0,115,4,0,0,0,100,1,83,0,41,2,122,57,82,
-    101,116,117,114,110,32,78,111,110,101,32,97,115,32,98,117,
-    105,108,116,45,105,110,32,109,111,100,117,108,101,115,32,100,
-    111,32,110,111,116,32,104,97,118,101,32,99,111,100,101,32,
-    111,98,106,101,99,116,115,46,78,114,10,0,0,0,41,2,
-    114,143,0,0,0,114,72,0,0,0,114,10,0,0,0,114,
-    10,0,0,0,114,11,0,0,0,218,8,103,101,116,95,99,
-    111,100,101,229,2,0,0,115,2,0,0,0,0,4,122,24,
+    114,82,0,0,0,162,2,0,0,115,4,0,0,0,0,9,
+    12,1,114,82,0,0,0,99,0,0,0,0,0,0,0,0,
+    0,0,0,0,4,0,0,0,64,0,0,0,115,136,0,0,
+    0,101,0,90,1,100,0,90,2,100,1,90,3,101,4,100,
+    2,100,3,132,0,131,1,90,5,101,6,100,19,100,5,100,
+    6,132,1,131,1,90,7,101,6,100,20,100,7,100,8,132,
+    1,131,1,90,8,101,6,100,9,100,10,132,0,131,1,90,
+    9,101,6,100,11,100,12,132,0,131,1,90,10,101,6,101,
+    11,100,13,100,14,132,0,131,1,131,1,90,12,101,6,101,
+    11,100,15,100,16,132,0,131,1,131,1,90,13,101,6,101,
+    11,100,17,100,18,132,0,131,1,131,1,90,14,101,6,101,
+    15,131,1,90,16,100,4,83,0,41,21,218,15,66,117,105,
+    108,116,105,110,73,109,112,111,114,116,101,114,122,144,77,101,
+    116,97,32,112,97,116,104,32,105,109,112,111,114,116,32,102,
+    111,114,32,98,117,105,108,116,45,105,110,32,109,111,100,117,
+    108,101,115,46,10,10,32,32,32,32,65,108,108,32,109,101,
+    116,104,111,100,115,32,97,114,101,32,101,105,116,104,101,114,
+    32,99,108,97,115,115,32,111,114,32,115,116,97,116,105,99,
+    32,109,101,116,104,111,100,115,32,116,111,32,97,118,111,105,
+    100,32,116,104,101,32,110,101,101,100,32,116,111,10,32,32,
+    32,32,105,110,115,116,97,110,116,105,97,116,101,32,116,104,
+    101,32,99,108,97,115,115,46,10,10,32,32,32,32,99,1,
+    0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,67,
+    0,0,0,115,12,0,0,0,100,1,106,0,124,0,106,1,
+    131,1,83,0,41,2,122,115,82,101,116,117,114,110,32,114,
+    101,112,114,32,102,111,114,32,116,104,101,32,109,111,100,117,
+    108,101,46,10,10,32,32,32,32,32,32,32,32,84,104,101,
+    32,109,101,116,104,111,100,32,105,115,32,100,101,112,114,101,
+    99,97,116,101,100,46,32,32,84,104,101,32,105,109,112,111,
+    114,116,32,109,97,99,104,105,110,101,114,121,32,100,111,101,
+    115,32,116,104,101,32,106,111,98,32,105,116,115,101,108,102,
+    46,10,10,32,32,32,32,32,32,32,32,122,24,60,109,111,
+    100,117,108,101,32,123,33,114,125,32,40,98,117,105,108,116,
+    45,105,110,41,62,41,2,114,38,0,0,0,114,1,0,0,
+    0,41,1,114,84,0,0,0,114,10,0,0,0,114,10,0,
+    0,0,114,11,0,0,0,114,87,0,0,0,186,2,0,0,
+    115,2,0,0,0,0,7,122,27,66,117,105,108,116,105,110,
+    73,109,112,111,114,116,101,114,46,109,111,100,117,108,101,95,
+    114,101,112,114,78,99,4,0,0,0,0,0,0,0,4,0,
+    0,0,5,0,0,0,67,0,0,0,115,44,0,0,0,124,
+    2,100,0,107,9,114,12,100,0,83,0,116,0,106,1,124,
+    1,131,1,114,36,116,2,124,1,124,0,100,1,100,2,141,
+    3,83,0,100,0,83,0,100,0,83,0,41,3,78,122,8,
+    98,117,105,108,116,45,105,110,41,1,114,104,0,0,0,41,
+    3,114,49,0,0,0,90,10,105,115,95,98,117,105,108,116,
+    105,110,114,79,0,0,0,41,4,218,3,99,108,115,114,72,
+    0,0,0,218,4,112,97,116,104,218,6,116,97,114,103,101,
+    116,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
+    218,9,102,105,110,100,95,115,112,101,99,195,2,0,0,115,
+    10,0,0,0,0,2,8,1,4,1,10,1,14,2,122,25,
     66,117,105,108,116,105,110,73,109,112,111,114,116,101,114,46,
-    103,101,116,95,99,111,100,101,99,2,0,0,0,0,0,0,
-    0,2,0,0,0,1,0,0,0,67,0,0,0,115,4,0,
-    0,0,100,1,83,0,41,2,122,56,82,101,116,117,114,110,
-    32,78,111,110,101,32,97,115,32,98,117,105,108,116,45,105,
-    110,32,109,111,100,117,108,101,115,32,100,111,32,110,111,116,
-    32,104,97,118,101,32,115,111,117,114,99,101,32,99,111,100,
-    101,46,78,114,10,0,0,0,41,2,114,143,0,0,0,114,
-    72,0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,
-    0,0,0,218,10,103,101,116,95,115,111,117,114,99,101,235,
-    2,0,0,115,2,0,0,0,0,4,122,26,66,117,105,108,
-    116,105,110,73,109,112,111,114,116,101,114,46,103,101,116,95,
-    115,111,117,114,99,101,99,2,0,0,0,0,0,0,0,2,
-    0,0,0,1,0,0,0,67,0,0,0,115,4,0,0,0,
-    100,1,83,0,41,2,122,52,82,101,116,117,114,110,32,70,
-    97,108,115,101,32,97,115,32,98,117,105,108,116,45,105,110,
-    32,109,111,100,117,108,101,115,32,97,114,101,32,110,101,118,
-    101,114,32,112,97,99,107,97,103,101,115,46,70,114,10,0,
-    0,0,41,2,114,143,0,0,0,114,72,0,0,0,114,10,
-    0,0,0,114,10,0,0,0,114,11,0,0,0,114,106,0,
-    0,0,241,2,0,0,115,2,0,0,0,0,4,122,26,66,
-    117,105,108,116,105,110,73,109,112,111,114,116,101,114,46,105,
-    115,95,112,97,99,107,97,103,101,41,2,78,78,41,1,78,
-    41,17,114,1,0,0,0,114,0,0,0,0,114,2,0,0,
-    0,114,3,0,0,0,218,12,115,116,97,116,105,99,109,101,
-    116,104,111,100,114,87,0,0,0,218,11,99,108,97,115,115,
-    109,101,116,104,111,100,114,146,0,0,0,114,147,0,0,0,
-    114,135,0,0,0,114,136,0,0,0,114,75,0,0,0,114,
-    148,0,0,0,114,149,0,0,0,114,106,0,0,0,114,85,
-    0,0,0,114,138,0,0,0,114,10,0,0,0,114,10,0,
-    0,0,114,10,0,0,0,114,11,0,0,0,114,142,0,0,
-    0,177,2,0,0,115,30,0,0,0,8,7,4,2,12,9,
-    2,1,12,8,2,1,12,11,12,8,12,5,2,1,14,5,
-    2,1,14,5,2,1,14,5,114,142,0,0,0,99,0,0,
-    0,0,0,0,0,0,0,0,0,0,4,0,0,0,64,0,
-    0,0,115,140,0,0,0,101,0,90,1,100,0,90,2,100,
-    1,90,3,101,4,100,2,100,3,132,0,131,1,90,5,101,
-    6,100,21,100,5,100,6,132,1,131,1,90,7,101,6,100,
-    22,100,7,100,8,132,1,131,1,90,8,101,6,100,9,100,
-    10,132,0,131,1,90,9,101,4,100,11,100,12,132,0,131,
-    1,90,10,101,6,100,13,100,14,132,0,131,1,90,11,101,
-    6,101,12,100,15,100,16,132,0,131,1,131,1,90,13,101,
-    6,101,12,100,17,100,18,132,0,131,1,131,1,90,14,101,
-    6,101,12,100,19,100,20,132,0,131,1,131,1,90,15,100,
-    4,83,0,41,23,218,14,70,114,111,122,101,110,73,109,112,
-    111,114,116,101,114,122,142,77,101,116,97,32,112,97,116,104,
-    32,105,109,112,111,114,116,32,102,111,114,32,102,114,111,122,
-    101,110,32,109,111,100,117,108,101,115,46,10,10,32,32,32,
-    32,65,108,108,32,109,101,116,104,111,100,115,32,97,114,101,
-    32,101,105,116,104,101,114,32,99,108,97,115,115,32,111,114,
-    32,115,116,97,116,105,99,32,109,101,116,104,111,100,115,32,
-    116,111,32,97,118,111,105,100,32,116,104,101,32,110,101,101,
-    100,32,116,111,10,32,32,32,32,105,110,115,116,97,110,116,
-    105,97,116,101,32,116,104,101,32,99,108,97,115,115,46,10,
-    10,32,32,32,32,99,1,0,0,0,0,0,0,0,1,0,
-    0,0,2,0,0,0,67,0,0,0,115,12,0,0,0,100,
-    1,106,0,124,0,106,1,131,1,83,0,41,2,122,115,82,
-    101,116,117,114,110,32,114,101,112,114,32,102,111,114,32,116,
-    104,101,32,109,111,100,117,108,101,46,10,10,32,32,32,32,
-    32,32,32,32,84,104,101,32,109,101,116,104,111,100,32,105,
-    115,32,100,101,112,114,101,99,97,116,101,100,46,32,32,84,
-    104,101,32,105,109,112,111,114,116,32,109,97,99,104,105,110,
-    101,114,121,32,100,111,101,115,32,116,104,101,32,106,111,98,
-    32,105,116,115,101,108,102,46,10,10,32,32,32,32,32,32,
-    32,32,122,22,60,109,111,100,117,108,101,32,123,33,114,125,
-    32,40,102,114,111,122,101,110,41,62,41,2,114,38,0,0,
-    0,114,1,0,0,0,41,1,218,1,109,114,10,0,0,0,
-    114,10,0,0,0,114,11,0,0,0,114,87,0,0,0,3,
-    3,0,0,115,2,0,0,0,0,7,122,26,70,114,111,122,
-    101,110,73,109,112,111,114,116,101,114,46,109,111,100,117,108,
-    101,95,114,101,112,114,78,99,4,0,0,0,0,0,0,0,
-    4,0,0,0,5,0,0,0,67,0,0,0,115,32,0,0,
-    0,116,0,106,1,124,1,131,1,114,24,116,2,124,1,124,
-    0,100,1,100,2,141,3,83,0,100,0,83,0,100,0,83,
-    0,41,3,78,90,6,102,114,111,122,101,110,41,1,114,104,
-    0,0,0,41,3,114,49,0,0,0,114,76,0,0,0,114,
-    79,0,0,0,41,4,114,143,0,0,0,114,72,0,0,0,
-    114,144,0,0,0,114,145,0,0,0,114,10,0,0,0,114,
-    10,0,0,0,114,11,0,0,0,114,146,0,0,0,12,3,
-    0,0,115,6,0,0,0,0,2,10,1,14,2,122,24,70,
-    114,111,122,101,110,73,109,112,111,114,116,101,114,46,102,105,
-    110,100,95,115,112,101,99,99,3,0,0,0,0,0,0,0,
-    3,0,0,0,2,0,0,0,67,0,0,0,115,18,0,0,
-    0,116,0,106,1,124,1,131,1,114,14,124,0,83,0,100,
-    1,83,0,41,2,122,93,70,105,110,100,32,97,32,102,114,
-    111,122,101,110,32,109,111,100,117,108,101,46,10,10,32,32,
+    102,105,110,100,95,115,112,101,99,99,3,0,0,0,0,0,
+    0,0,4,0,0,0,3,0,0,0,67,0,0,0,115,30,
+    0,0,0,124,0,106,0,124,1,124,2,131,2,125,3,124,
+    3,100,1,107,9,114,26,124,3,106,1,83,0,100,1,83,
+    0,41,2,122,175,70,105,110,100,32,116,104,101,32,98,117,
+    105,108,116,45,105,110,32,109,111,100,117,108,101,46,10,10,
+    32,32,32,32,32,32,32,32,73,102,32,39,112,97,116,104,
+    39,32,105,115,32,101,118,101,114,32,115,112,101,99,105,102,
+    105,101,100,32,116,104,101,110,32,116,104,101,32,115,101,97,
+    114,99,104,32,105,115,32,99,111,110,115,105,100,101,114,101,
+    100,32,97,32,102,97,105,108,117,114,101,46,10,10,32,32,
     32,32,32,32,32,32,84,104,105,115,32,109,101,116,104,111,
     100,32,105,115,32,100,101,112,114,101,99,97,116,101,100,46,
     32,32,85,115,101,32,102,105,110,100,95,115,112,101,99,40,
     41,32,105,110,115,116,101,97,100,46,10,10,32,32,32,32,
-    32,32,32,32,78,41,2,114,49,0,0,0,114,76,0,0,
-    0,41,3,114,143,0,0,0,114,72,0,0,0,114,144,0,
-    0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,
-    0,114,147,0,0,0,19,3,0,0,115,2,0,0,0,0,
-    7,122,26,70,114,111,122,101,110,73,109,112,111,114,116,101,
+    32,32,32,32,78,41,2,114,146,0,0,0,114,94,0,0,
+    0,41,4,114,143,0,0,0,114,72,0,0,0,114,144,0,
+    0,0,114,83,0,0,0,114,10,0,0,0,114,10,0,0,
+    0,114,11,0,0,0,218,11,102,105,110,100,95,109,111,100,
+    117,108,101,204,2,0,0,115,4,0,0,0,0,9,12,1,
+    122,27,66,117,105,108,116,105,110,73,109,112,111,114,116,101,
     114,46,102,105,110,100,95,109,111,100,117,108,101,99,2,0,
-    0,0,0,0,0,0,2,0,0,0,1,0,0,0,67,0,
-    0,0,115,4,0,0,0,100,1,83,0,41,2,122,42,85,
-    115,101,32,100,101,102,97,117,108,116,32,115,101,109,97,110,
-    116,105,99,115,32,102,111,114,32,109,111,100,117,108,101,32,
-    99,114,101,97,116,105,111,110,46,78,114,10,0,0,0,41,
-    2,114,143,0,0,0,114,83,0,0,0,114,10,0,0,0,
-    114,10,0,0,0,114,11,0,0,0,114,135,0,0,0,28,
-    3,0,0,115,0,0,0,0,122,28,70,114,111,122,101,110,
-    73,109,112,111,114,116,101,114,46,99,114,101,97,116,101,95,
-    109,111,100,117,108,101,99,1,0,0,0,0,0,0,0,3,
-    0,0,0,4,0,0,0,67,0,0,0,115,64,0,0,0,
-    124,0,106,0,106,1,125,1,116,2,106,3,124,1,131,1,
-    115,36,116,4,100,1,106,5,124,1,131,1,124,1,100,2,
-    141,2,130,1,116,6,116,2,106,7,124,1,131,2,125,2,
-    116,8,124,2,124,0,106,9,131,2,1,0,100,0,83,0,
-    41,3,78,122,27,123,33,114,125,32,105,115,32,110,111,116,
-    32,97,32,102,114,111,122,101,110,32,109,111,100,117,108,101,
-    41,1,114,15,0,0,0,41,10,114,90,0,0,0,114,15,
-    0,0,0,114,49,0,0,0,114,76,0,0,0,114,71,0,
-    0,0,114,38,0,0,0,114,59,0,0,0,218,17,103,101,
-    116,95,102,114,111,122,101,110,95,111,98,106,101,99,116,218,
-    4,101,120,101,99,114,7,0,0,0,41,3,114,84,0,0,
-    0,114,15,0,0,0,218,4,99,111,100,101,114,10,0,0,
-    0,114,10,0,0,0,114,11,0,0,0,114,136,0,0,0,
-    32,3,0,0,115,12,0,0,0,0,2,8,1,10,1,10,
-    1,8,1,12,1,122,26,70,114,111,122,101,110,73,109,112,
-    111,114,116,101,114,46,101,120,101,99,95,109,111,100,117,108,
-    101,99,2,0,0,0,0,0,0,0,2,0,0,0,3,0,
-    0,0,67,0,0,0,115,10,0,0,0,116,0,124,0,124,
-    1,131,2,83,0,41,1,122,95,76,111,97,100,32,97,32,
-    102,114,111,122,101,110,32,109,111,100,117,108,101,46,10,10,
-    32,32,32,32,32,32,32,32,84,104,105,115,32,109,101,116,
-    104,111,100,32,105,115,32,100,101,112,114,101,99,97,116,101,
-    100,46,32,32,85,115,101,32,101,120,101,99,95,109,111,100,
-    117,108,101,40,41,32,105,110,115,116,101,97,100,46,10,10,
-    32,32,32,32,32,32,32,32,41,1,114,85,0,0,0,41,
-    2,114,143,0,0,0,114,72,0,0,0,114,10,0,0,0,
-    114,10,0,0,0,114,11,0,0,0,114,138,0,0,0,41,
-    3,0,0,115,2,0,0,0,0,7,122,26,70,114,111,122,
-    101,110,73,109,112,111,114,116,101,114,46,108,111,97,100,95,
-    109,111,100,117,108,101,99,2,0,0,0,0,0,0,0,2,
-    0,0,0,2,0,0,0,67,0,0,0,115,10,0,0,0,
-    116,0,106,1,124,1,131,1,83,0,41,1,122,45,82,101,
-    116,117,114,110,32,116,104,101,32,99,111,100,101,32,111,98,
-    106,101,99,116,32,102,111,114,32,116,104,101,32,102,114,111,
-    122,101,110,32,109,111,100,117,108,101,46,41,2,114,49,0,
-    0,0,114,154,0,0,0,41,2,114,143,0,0,0,114,72,
+    0,0,0,0,0,0,2,0,0,0,4,0,0,0,67,0,
+    0,0,115,46,0,0,0,124,1,106,0,116,1,106,2,107,
+    7,114,34,116,3,100,1,106,4,124,1,106,0,131,1,124,
+    1,106,0,100,2,141,2,130,1,116,5,116,6,106,7,124,
+    1,131,2,83,0,41,3,122,24,67,114,101,97,116,101,32,
+    97,32,98,117,105,108,116,45,105,110,32,109,111,100,117,108,
+    101,122,29,123,33,114,125,32,105,115,32,110,111,116,32,97,
+    32,98,117,105,108,116,45,105,110,32,109,111,100,117,108,101,
+    41,1,114,15,0,0,0,41,8,114,15,0,0,0,114,14,
+    0,0,0,114,70,0,0,0,114,71,0,0,0,114,38,0,
+    0,0,114,59,0,0,0,114,49,0,0,0,90,14,99,114,
+    101,97,116,101,95,98,117,105,108,116,105,110,41,2,114,26,
+    0,0,0,114,83,0,0,0,114,10,0,0,0,114,10,0,
+    0,0,114,11,0,0,0,114,135,0,0,0,216,2,0,0,
+    115,8,0,0,0,0,3,12,1,12,1,10,1,122,29,66,
+    117,105,108,116,105,110,73,109,112,111,114,116,101,114,46,99,
+    114,101,97,116,101,95,109,111,100,117,108,101,99,2,0,0,
+    0,0,0,0,0,2,0,0,0,3,0,0,0,67,0,0,
+    0,115,16,0,0,0,116,0,116,1,106,2,124,1,131,2,
+    1,0,100,1,83,0,41,2,122,22,69,120,101,99,32,97,
+    32,98,117,105,108,116,45,105,110,32,109,111,100,117,108,101,
+    78,41,3,114,59,0,0,0,114,49,0,0,0,90,12,101,
+    120,101,99,95,98,117,105,108,116,105,110,41,2,114,26,0,
+    0,0,114,84,0,0,0,114,10,0,0,0,114,10,0,0,
+    0,114,11,0,0,0,114,136,0,0,0,224,2,0,0,115,
+    2,0,0,0,0,3,122,27,66,117,105,108,116,105,110,73,
+    109,112,111,114,116,101,114,46,101,120,101,99,95,109,111,100,
+    117,108,101,99,2,0,0,0,0,0,0,0,2,0,0,0,
+    1,0,0,0,67,0,0,0,115,4,0,0,0,100,1,83,
+    0,41,2,122,57,82,101,116,117,114,110,32,78,111,110,101,
+    32,97,115,32,98,117,105,108,116,45,105,110,32,109,111,100,
+    117,108,101,115,32,100,111,32,110,111,116,32,104,97,118,101,
+    32,99,111,100,101,32,111,98,106,101,99,116,115,46,78,114,
+    10,0,0,0,41,2,114,143,0,0,0,114,72,0,0,0,
+    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,218,
+    8,103,101,116,95,99,111,100,101,229,2,0,0,115,2,0,
+    0,0,0,4,122,24,66,117,105,108,116,105,110,73,109,112,
+    111,114,116,101,114,46,103,101,116,95,99,111,100,101,99,2,
+    0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,67,
+    0,0,0,115,4,0,0,0,100,1,83,0,41,2,122,56,
+    82,101,116,117,114,110,32,78,111,110,101,32,97,115,32,98,
+    117,105,108,116,45,105,110,32,109,111,100,117,108,101,115,32,
+    100,111,32,110,111,116,32,104,97,118,101,32,115,111,117,114,
+    99,101,32,99,111,100,101,46,78,114,10,0,0,0,41,2,
+    114,143,0,0,0,114,72,0,0,0,114,10,0,0,0,114,
+    10,0,0,0,114,11,0,0,0,218,10,103,101,116,95,115,
+    111,117,114,99,101,235,2,0,0,115,2,0,0,0,0,4,
+    122,26,66,117,105,108,116,105,110,73,109,112,111,114,116,101,
+    114,46,103,101,116,95,115,111,117,114,99,101,99,2,0,0,
+    0,0,0,0,0,2,0,0,0,1,0,0,0,67,0,0,
+    0,115,4,0,0,0,100,1,83,0,41,2,122,52,82,101,
+    116,117,114,110,32,70,97,108,115,101,32,97,115,32,98,117,
+    105,108,116,45,105,110,32,109,111,100,117,108,101,115,32,97,
+    114,101,32,110,101,118,101,114,32,112,97,99,107,97,103,101,
+    115,46,70,114,10,0,0,0,41,2,114,143,0,0,0,114,
+    72,0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,
+    0,0,0,114,106,0,0,0,241,2,0,0,115,2,0,0,
+    0,0,4,122,26,66,117,105,108,116,105,110,73,109,112,111,
+    114,116,101,114,46,105,115,95,112,97,99,107,97,103,101,41,
+    2,78,78,41,1,78,41,17,114,1,0,0,0,114,0,0,
+    0,0,114,2,0,0,0,114,3,0,0,0,218,12,115,116,
+    97,116,105,99,109,101,116,104,111,100,114,87,0,0,0,218,
+    11,99,108,97,115,115,109,101,116,104,111,100,114,146,0,0,
+    0,114,147,0,0,0,114,135,0,0,0,114,136,0,0,0,
+    114,75,0,0,0,114,148,0,0,0,114,149,0,0,0,114,
+    106,0,0,0,114,85,0,0,0,114,138,0,0,0,114,10,
     0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,
-    0,0,114,148,0,0,0,50,3,0,0,115,2,0,0,0,
-    0,4,122,23,70,114,111,122,101,110,73,109,112,111,114,116,
-    101,114,46,103,101,116,95,99,111,100,101,99,2,0,0,0,
-    0,0,0,0,2,0,0,0,1,0,0,0,67,0,0,0,
-    115,4,0,0,0,100,1,83,0,41,2,122,54,82,101,116,
-    117,114,110,32,78,111,110,101,32,97,115,32,102,114,111,122,
-    101,110,32,109,111,100,117,108,101,115,32,100,111,32,110,111,
-    116,32,104,97,118,101,32,115,111,117,114,99,101,32,99,111,
-    100,101,46,78,114,10,0,0,0,41,2,114,143,0,0,0,
-    114,72,0,0,0,114,10,0,0,0,114,10,0,0,0,114,
-    11,0,0,0,114,149,0,0,0,56,3,0,0,115,2,0,
-    0,0,0,4,122,25,70,114,111,122,101,110,73,109,112,111,
-    114,116,101,114,46,103,101,116,95,115,111,117,114,99,101,99,
-    2,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,
-    67,0,0,0,115,10,0,0,0,116,0,106,1,124,1,131,
-    1,83,0,41,1,122,46,82,101,116,117,114,110,32,84,114,
-    117,101,32,105,102,32,116,104,101,32,102,114,111,122,101,110,
-    32,109,111,100,117,108,101,32,105,115,32,97,32,112,97,99,
-    107,97,103,101,46,41,2,114,49,0,0,0,90,17,105,115,
-    95,102,114,111,122,101,110,95,112,97,99,107,97,103,101,41,
+    0,0,114,142,0,0,0,177,2,0,0,115,30,0,0,0,
+    8,7,4,2,12,9,2,1,12,8,2,1,12,11,12,8,
+    12,5,2,1,14,5,2,1,14,5,2,1,14,5,114,142,
+    0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,
+    4,0,0,0,64,0,0,0,115,140,0,0,0,101,0,90,
+    1,100,0,90,2,100,1,90,3,101,4,100,2,100,3,132,
+    0,131,1,90,5,101,6,100,21,100,5,100,6,132,1,131,
+    1,90,7,101,6,100,22,100,7,100,8,132,1,131,1,90,
+    8,101,6,100,9,100,10,132,0,131,1,90,9,101,4,100,
+    11,100,12,132,0,131,1,90,10,101,6,100,13,100,14,132,
+    0,131,1,90,11,101,6,101,12,100,15,100,16,132,0,131,
+    1,131,1,90,13,101,6,101,12,100,17,100,18,132,0,131,
+    1,131,1,90,14,101,6,101,12,100,19,100,20,132,0,131,
+    1,131,1,90,15,100,4,83,0,41,23,218,14,70,114,111,
+    122,101,110,73,109,112,111,114,116,101,114,122,142,77,101,116,
+    97,32,112,97,116,104,32,105,109,112,111,114,116,32,102,111,
+    114,32,102,114,111,122,101,110,32,109,111,100,117,108,101,115,
+    46,10,10,32,32,32,32,65,108,108,32,109,101,116,104,111,
+    100,115,32,97,114,101,32,101,105,116,104,101,114,32,99,108,
+    97,115,115,32,111,114,32,115,116,97,116,105,99,32,109,101,
+    116,104,111,100,115,32,116,111,32,97,118,111,105,100,32,116,
+    104,101,32,110,101,101,100,32,116,111,10,32,32,32,32,105,
+    110,115,116,97,110,116,105,97,116,101,32,116,104,101,32,99,
+    108,97,115,115,46,10,10,32,32,32,32,99,1,0,0,0,
+    0,0,0,0,1,0,0,0,2,0,0,0,67,0,0,0,
+    115,12,0,0,0,100,1,106,0,124,0,106,1,131,1,83,
+    0,41,2,122,115,82,101,116,117,114,110,32,114,101,112,114,
+    32,102,111,114,32,116,104,101,32,109,111,100,117,108,101,46,
+    10,10,32,32,32,32,32,32,32,32,84,104,101,32,109,101,
+    116,104,111,100,32,105,115,32,100,101,112,114,101,99,97,116,
+    101,100,46,32,32,84,104,101,32,105,109,112,111,114,116,32,
+    109,97,99,104,105,110,101,114,121,32,100,111,101,115,32,116,
+    104,101,32,106,111,98,32,105,116,115,101,108,102,46,10,10,
+    32,32,32,32,32,32,32,32,122,22,60,109,111,100,117,108,
+    101,32,123,33,114,125,32,40,102,114,111,122,101,110,41,62,
+    41,2,114,38,0,0,0,114,1,0,0,0,41,1,218,1,
+    109,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
+    114,87,0,0,0,3,3,0,0,115,2,0,0,0,0,7,
+    122,26,70,114,111,122,101,110,73,109,112,111,114,116,101,114,
+    46,109,111,100,117,108,101,95,114,101,112,114,78,99,4,0,
+    0,0,0,0,0,0,4,0,0,0,5,0,0,0,67,0,
+    0,0,115,32,0,0,0,116,0,106,1,124,1,131,1,114,
+    24,116,2,124,1,124,0,100,1,100,2,141,3,83,0,100,
+    0,83,0,100,0,83,0,41,3,78,90,6,102,114,111,122,
+    101,110,41,1,114,104,0,0,0,41,3,114,49,0,0,0,
+    114,76,0,0,0,114,79,0,0,0,41,4,114,143,0,0,
+    0,114,72,0,0,0,114,144,0,0,0,114,145,0,0,0,
+    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,
+    146,0,0,0,12,3,0,0,115,6,0,0,0,0,2,10,
+    1,14,2,122,24,70,114,111,122,101,110,73,109,112,111,114,
+    116,101,114,46,102,105,110,100,95,115,112,101,99,99,3,0,
+    0,0,0,0,0,0,3,0,0,0,2,0,0,0,67,0,
+    0,0,115,18,0,0,0,116,0,106,1,124,1,131,1,114,
+    14,124,0,83,0,100,1,83,0,41,2,122,93,70,105,110,
+    100,32,97,32,102,114,111,122,101,110,32,109,111,100,117,108,
+    101,46,10,10,32,32,32,32,32,32,32,32,84,104,105,115,
+    32,109,101,116,104,111,100,32,105,115,32,100,101,112,114,101,
+    99,97,116,101,100,46,32,32,85,115,101,32,102,105,110,100,
+    95,115,112,101,99,40,41,32,105,110,115,116,101,97,100,46,
+    10,10,32,32,32,32,32,32,32,32,78,41,2,114,49,0,
+    0,0,114,76,0,0,0,41,3,114,143,0,0,0,114,72,
+    0,0,0,114,144,0,0,0,114,10,0,0,0,114,10,0,
+    0,0,114,11,0,0,0,114,147,0,0,0,19,3,0,0,
+    115,2,0,0,0,0,7,122,26,70,114,111,122,101,110,73,
+    109,112,111,114,116,101,114,46,102,105,110,100,95,109,111,100,
+    117,108,101,99,2,0,0,0,0,0,0,0,2,0,0,0,
+    1,0,0,0,67,0,0,0,115,4,0,0,0,100,1,83,
+    0,41,2,122,42,85,115,101,32,100,101,102,97,117,108,116,
+    32,115,101,109,97,110,116,105,99,115,32,102,111,114,32,109,
+    111,100,117,108,101,32,99,114,101,97,116,105,111,110,46,78,
+    114,10,0,0,0,41,2,114,143,0,0,0,114,83,0,0,
+    0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
+    114,135,0,0,0,28,3,0,0,115,0,0,0,0,122,28,
+    70,114,111,122,101,110,73,109,112,111,114,116,101,114,46,99,
+    114,101,97,116,101,95,109,111,100,117,108,101,99,1,0,0,
+    0,0,0,0,0,3,0,0,0,4,0,0,0,67,0,0,
+    0,115,64,0,0,0,124,0,106,0,106,1,125,1,116,2,
+    106,3,124,1,131,1,115,36,116,4,100,1,106,5,124,1,
+    131,1,124,1,100,2,141,2,130,1,116,6,116,2,106,7,
+    124,1,131,2,125,2,116,8,124,2,124,0,106,9,131,2,
+    1,0,100,0,83,0,41,3,78,122,27,123,33,114,125,32,
+    105,115,32,110,111,116,32,97,32,102,114,111,122,101,110,32,
+    109,111,100,117,108,101,41,1,114,15,0,0,0,41,10,114,
+    90,0,0,0,114,15,0,0,0,114,49,0,0,0,114,76,
+    0,0,0,114,71,0,0,0,114,38,0,0,0,114,59,0,
+    0,0,218,17,103,101,116,95,102,114,111,122,101,110,95,111,
+    98,106,101,99,116,218,4,101,120,101,99,114,7,0,0,0,
+    41,3,114,84,0,0,0,114,15,0,0,0,218,4,99,111,
+    100,101,114,10,0,0,0,114,10,0,0,0,114,11,0,0,
+    0,114,136,0,0,0,32,3,0,0,115,12,0,0,0,0,
+    2,8,1,10,1,10,1,8,1,12,1,122,26,70,114,111,
+    122,101,110,73,109,112,111,114,116,101,114,46,101,120,101,99,
+    95,109,111,100,117,108,101,99,2,0,0,0,0,0,0,0,
+    2,0,0,0,3,0,0,0,67,0,0,0,115,10,0,0,
+    0,116,0,124,0,124,1,131,2,83,0,41,1,122,95,76,
+    111,97,100,32,97,32,102,114,111,122,101,110,32,109,111,100,
+    117,108,101,46,10,10,32,32,32,32,32,32,32,32,84,104,
+    105,115,32,109,101,116,104,111,100,32,105,115,32,100,101,112,
+    114,101,99,97,116,101,100,46,32,32,85,115,101,32,101,120,
+    101,99,95,109,111,100,117,108,101,40,41,32,105,110,115,116,
+    101,97,100,46,10,10,32,32,32,32,32,32,32,32,41,1,
+    114,85,0,0,0,41,2,114,143,0,0,0,114,72,0,0,
+    0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
+    114,138,0,0,0,41,3,0,0,115,2,0,0,0,0,7,
+    122,26,70,114,111,122,101,110,73,109,112,111,114,116,101,114,
+    46,108,111,97,100,95,109,111,100,117,108,101,99,2,0,0,
+    0,0,0,0,0,2,0,0,0,2,0,0,0,67,0,0,
+    0,115,10,0,0,0,116,0,106,1,124,1,131,1,83,0,
+    41,1,122,45,82,101,116,117,114,110,32,116,104,101,32,99,
+    111,100,101,32,111,98,106,101,99,116,32,102,111,114,32,116,
+    104,101,32,102,114,111,122,101,110,32,109,111,100,117,108,101,
+    46,41,2,114,49,0,0,0,114,154,0,0,0,41,2,114,
+    143,0,0,0,114,72,0,0,0,114,10,0,0,0,114,10,
+    0,0,0,114,11,0,0,0,114,148,0,0,0,50,3,0,
+    0,115,2,0,0,0,0,4,122,23,70,114,111,122,101,110,
+    73,109,112,111,114,116,101,114,46,103,101,116,95,99,111,100,
+    101,99,2,0,0,0,0,0,0,0,2,0,0,0,1,0,
+    0,0,67,0,0,0,115,4,0,0,0,100,1,83,0,41,
+    2,122,54,82,101,116,117,114,110,32,78,111,110,101,32,97,
+    115,32,102,114,111,122,101,110,32,109,111,100,117,108,101,115,
+    32,100,111,32,110,111,116,32,104,97,118,101,32,115,111,117,
+    114,99,101,32,99,111,100,101,46,78,114,10,0,0,0,41,
     2,114,143,0,0,0,114,72,0,0,0,114,10,0,0,0,
-    114,10,0,0,0,114,11,0,0,0,114,106,0,0,0,62,
+    114,10,0,0,0,114,11,0,0,0,114,149,0,0,0,56,
     3,0,0,115,2,0,0,0,0,4,122,25,70,114,111,122,
-    101,110,73,109,112,111,114,116,101,114,46,105,115,95,112,97,
-    99,107,97,103,101,41,2,78,78,41,1,78,41,16,114,1,
-    0,0,0,114,0,0,0,0,114,2,0,0,0,114,3,0,
-    0,0,114,150,0,0,0,114,87,0,0,0,114,151,0,0,
-    0,114,146,0,0,0,114,147,0,0,0,114,135,0,0,0,
-    114,136,0,0,0,114,138,0,0,0,114,78,0,0,0,114,
-    148,0,0,0,114,149,0,0,0,114,106,0,0,0,114,10,
-    0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,
-    0,0,114,152,0,0,0,250,2,0,0,115,30,0,0,0,
-    8,7,4,2,12,9,2,1,12,6,2,1,12,8,12,4,
-    12,9,12,9,2,1,14,5,2,1,14,5,2,1,114,152,
-    0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,
-    2,0,0,0,64,0,0,0,115,32,0,0,0,101,0,90,
-    1,100,0,90,2,100,1,90,3,100,2,100,3,132,0,90,
-    4,100,4,100,5,132,0,90,5,100,6,83,0,41,7,218,
-    18,95,73,109,112,111,114,116,76,111,99,107,67,111,110,116,
-    101,120,116,122,36,67,111,110,116,101,120,116,32,109,97,110,
-    97,103,101,114,32,102,111,114,32,116,104,101,32,105,109,112,
-    111,114,116,32,108,111,99,107,46,99,1,0,0,0,0,0,
-    0,0,1,0,0,0,1,0,0,0,67,0,0,0,115,12,
-    0,0,0,116,0,106,1,131,0,1,0,100,1,83,0,41,
-    2,122,24,65,99,113,117,105,114,101,32,116,104,101,32,105,
-    109,112,111,114,116,32,108,111,99,107,46,78,41,2,114,49,
-    0,0,0,114,50,0,0,0,41,1,114,26,0,0,0,114,
-    10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,46,
-    0,0,0,75,3,0,0,115,2,0,0,0,0,2,122,28,
-    95,73,109,112,111,114,116,76,111,99,107,67,111,110,116,101,
-    120,116,46,95,95,101,110,116,101,114,95,95,99,4,0,0,
-    0,0,0,0,0,4,0,0,0,1,0,0,0,67,0,0,
-    0,115,12,0,0,0,116,0,106,1,131,0,1,0,100,1,
-    83,0,41,2,122,60,82,101,108,101,97,115,101,32,116,104,
-    101,32,105,109,112,111,114,116,32,108,111,99,107,32,114,101,
-    103,97,114,100,108,101,115,115,32,111,102,32,97,110,121,32,
-    114,97,105,115,101,100,32,101,120,99,101,112,116,105,111,110,
-    115,46,78,41,2,114,49,0,0,0,114,52,0,0,0,41,
-    4,114,26,0,0,0,90,8,101,120,99,95,116,121,112,101,
-    90,9,101,120,99,95,118,97,108,117,101,90,13,101,120,99,
-    95,116,114,97,99,101,98,97,99,107,114,10,0,0,0,114,
-    10,0,0,0,114,11,0,0,0,114,48,0,0,0,79,3,
-    0,0,115,2,0,0,0,0,2,122,27,95,73,109,112,111,
-    114,116,76,111,99,107,67,111,110,116,101,120,116,46,95,95,
-    101,120,105,116,95,95,78,41,6,114,1,0,0,0,114,0,
-    0,0,0,114,2,0,0,0,114,3,0,0,0,114,46,0,
-    0,0,114,48,0,0,0,114,10,0,0,0,114,10,0,0,
-    0,114,10,0,0,0,114,11,0,0,0,114,157,0,0,0,
-    71,3,0,0,115,6,0,0,0,8,2,4,2,8,4,114,
-    157,0,0,0,99,3,0,0,0,0,0,0,0,5,0,0,
-    0,4,0,0,0,67,0,0,0,115,64,0,0,0,124,1,
-    106,0,100,1,124,2,100,2,24,0,131,2,125,3,116,1,
-    124,3,131,1,124,2,107,0,114,36,116,2,100,3,131,1,
-    130,1,124,3,100,4,25,0,125,4,124,0,114,60,100,5,
-    106,3,124,4,124,0,131,2,83,0,124,4,83,0,41,6,
-    122,50,82,101,115,111,108,118,101,32,97,32,114,101,108,97,
-    116,105,118,101,32,109,111,100,117,108,101,32,110,97,109,101,
-    32,116,111,32,97,110,32,97,98,115,111,108,117,116,101,32,
-    111,110,101,46,114,118,0,0,0,114,33,0,0,0,122,50,
-    97,116,116,101,109,112,116,101,100,32,114,101,108,97,116,105,
-    118,101,32,105,109,112,111,114,116,32,98,101,121,111,110,100,
-    32,116,111,112,45,108,101,118,101,108,32,112,97,99,107,97,
-    103,101,114,19,0,0,0,122,5,123,125,46,123,125,41,4,
-    218,6,114,115,112,108,105,116,218,3,108,101,110,218,10,86,
-    97,108,117,101,69,114,114,111,114,114,38,0,0,0,41,5,
-    114,15,0,0,0,218,7,112,97,99,107,97,103,101,218,5,
-    108,101,118,101,108,90,4,98,105,116,115,90,4,98,97,115,
-    101,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
-    218,13,95,114,101,115,111,108,118,101,95,110,97,109,101,84,
-    3,0,0,115,10,0,0,0,0,2,16,1,12,1,8,1,
-    8,1,114,163,0,0,0,99,3,0,0,0,0,0,0,0,
-    4,0,0,0,3,0,0,0,67,0,0,0,115,34,0,0,
-    0,124,0,106,0,124,1,124,2,131,2,125,3,124,3,100,
-    0,107,8,114,24,100,0,83,0,116,1,124,1,124,3,131,
-    2,83,0,41,1,78,41,2,114,147,0,0,0,114,79,0,
-    0,0,41,4,218,6,102,105,110,100,101,114,114,15,0,0,
-    0,114,144,0,0,0,114,94,0,0,0,114,10,0,0,0,
-    114,10,0,0,0,114,11,0,0,0,218,17,95,102,105,110,
-    100,95,115,112,101,99,95,108,101,103,97,99,121,93,3,0,
-    0,115,8,0,0,0,0,3,12,1,8,1,4,1,114,165,
-    0,0,0,99,3,0,0,0,0,0,0,0,10,0,0,0,
-    27,0,0,0,67,0,0,0,115,242,0,0,0,116,0,106,
-    1,125,3,124,3,100,1,107,8,114,22,116,2,100,2,131,
-    1,130,1,124,3,115,38,116,3,106,4,100,3,116,5,131,
-    2,1,0,124,0,116,0,106,6,107,6,125,4,120,188,124,
-    3,68,0,93,176,125,5,116,7,131,0,143,72,1,0,121,
-    10,124,5,106,8,125,6,87,0,110,42,4,0,116,9,107,
-    10,114,118,1,0,1,0,1,0,116,10,124,5,124,0,124,
-    1,131,3,125,7,124,7,100,1,107,8,114,114,119,54,89,
-    0,110,14,88,0,124,6,124,0,124,1,124,2,131,3,125,
-    7,87,0,100,1,81,0,82,0,88,0,124,7,100,1,107,
-    9,114,54,124,4,12,0,114,226,124,0,116,0,106,6,107,
-    6,114,226,116,0,106,6,124,0,25,0,125,8,121,10,124,
-    8,106,11,125,9,87,0,110,20,4,0,116,9,107,10,114,
-    206,1,0,1,0,1,0,124,7,83,0,88,0,124,9,100,
-    1,107,8,114,220,124,7,83,0,124,9,83,0,113,54,124,
-    7,83,0,113,54,87,0,100,1,83,0,100,1,83,0,41,
-    4,122,21,70,105,110,100,32,97,32,109,111,100,117,108,101,
-    39,115,32,115,112,101,99,46,78,122,53,115,121,115,46,109,
-    101,116,97,95,112,97,116,104,32,105,115,32,78,111,110,101,
-    44,32,80,121,116,104,111,110,32,105,115,32,108,105,107,101,
-    108,121,32,115,104,117,116,116,105,110,103,32,100,111,119,110,
-    122,22,115,121,115,46,109,101,116,97,95,112,97,116,104,32,
-    105,115,32,101,109,112,116,121,41,12,114,14,0,0,0,218,
-    9,109,101,116,97,95,112,97,116,104,114,71,0,0,0,218,
-    9,95,119,97,114,110,105,110,103,115,218,4,119,97,114,110,
-    218,13,73,109,112,111,114,116,87,97,114,110,105,110,103,114,
-    80,0,0,0,114,157,0,0,0,114,146,0,0,0,114,91,
-    0,0,0,114,165,0,0,0,114,90,0,0,0,41,10,114,
-    15,0,0,0,114,144,0,0,0,114,145,0,0,0,114,166,
-    0,0,0,90,9,105,115,95,114,101,108,111,97,100,114,164,
-    0,0,0,114,146,0,0,0,114,83,0,0,0,114,84,0,
-    0,0,114,90,0,0,0,114,10,0,0,0,114,10,0,0,
-    0,114,11,0,0,0,218,10,95,102,105,110,100,95,115,112,
-    101,99,102,3,0,0,115,54,0,0,0,0,2,6,1,8,
-    2,8,3,4,1,12,5,10,1,10,1,8,1,2,1,10,
-    1,14,1,12,1,8,1,8,2,22,1,8,2,16,1,10,
-    1,2,1,10,1,14,4,6,2,8,1,4,2,6,2,8,
-    2,114,170,0,0,0,99,3,0,0,0,0,0,0,0,3,
-    0,0,0,4,0,0,0,67,0,0,0,115,110,0,0,0,
-    116,0,124,0,116,1,131,2,115,28,116,2,100,1,106,3,
-    116,4,124,0,131,1,131,1,131,1,130,1,124,2,100,2,
-    107,0,114,44,116,5,100,3,131,1,130,1,124,2,100,2,
-    107,4,114,84,116,0,124,1,116,1,131,2,115,72,116,2,
-    100,4,131,1,130,1,110,12,124,1,115,84,116,6,100,5,
-    131,1,130,1,124,0,12,0,114,106,124,2,100,2,107,2,
-    114,106,116,5,100,6,131,1,130,1,100,7,83,0,41,8,
-    122,28,86,101,114,105,102,121,32,97,114,103,117,109,101,110,
-    116,115,32,97,114,101,32,34,115,97,110,101,34,46,122,31,
-    109,111,100,117,108,101,32,110,97,109,101,32,109,117,115,116,
-    32,98,101,32,115,116,114,44,32,110,111,116,32,123,125,114,
-    19,0,0,0,122,18,108,101,118,101,108,32,109,117,115,116,
-    32,98,101,32,62,61,32,48,122,31,95,95,112,97,99,107,
-    97,103,101,95,95,32,110,111,116,32,115,101,116,32,116,111,
-    32,97,32,115,116,114,105,110,103,122,54,97,116,116,101,109,
-    112,116,101,100,32,114,101,108,97,116,105,118,101,32,105,109,
-    112,111,114,116,32,119,105,116,104,32,110,111,32,107,110,111,
-    119,110,32,112,97,114,101,110,116,32,112,97,99,107,97,103,
-    101,122,17,69,109,112,116,121,32,109,111,100,117,108,101,32,
-    110,97,109,101,78,41,7,218,10,105,115,105,110,115,116,97,
-    110,99,101,218,3,115,116,114,218,9,84,121,112,101,69,114,
-    114,111,114,114,38,0,0,0,114,13,0,0,0,114,160,0,
-    0,0,114,71,0,0,0,41,3,114,15,0,0,0,114,161,
-    0,0,0,114,162,0,0,0,114,10,0,0,0,114,10,0,
-    0,0,114,11,0,0,0,218,13,95,115,97,110,105,116,121,
-    95,99,104,101,99,107,149,3,0,0,115,22,0,0,0,0,
-    2,10,1,18,1,8,1,8,1,8,1,10,1,10,1,4,
-    1,8,2,14,1,114,174,0,0,0,122,16,78,111,32,109,
-    111,100,117,108,101,32,110,97,109,101,100,32,122,4,123,33,
-    114,125,99,2,0,0,0,0,0,0,0,8,0,0,0,12,
-    0,0,0,67,0,0,0,115,220,0,0,0,100,0,125,2,
-    124,0,106,0,100,1,131,1,100,2,25,0,125,3,124,3,
-    114,134,124,3,116,1,106,2,107,7,114,42,116,3,124,1,
-    124,3,131,2,1,0,124,0,116,1,106,2,107,6,114,62,
-    116,1,106,2,124,0,25,0,83,0,116,1,106,2,124,3,
-    25,0,125,4,121,10,124,4,106,4,125,2,87,0,110,50,
-    4,0,116,5,107,10,114,132,1,0,1,0,1,0,116,6,
-    100,3,23,0,106,7,124,0,124,3,131,2,125,5,116,8,
-    124,5,124,0,100,4,141,2,100,0,130,2,89,0,110,2,
-    88,0,116,9,124,0,124,2,131,2,125,6,124,6,100,0,
-    107,8,114,172,116,8,116,6,106,7,124,0,131,1,124,0,
-    100,4,141,2,130,1,110,8,116,10,124,6,131,1,125,7,
-    124,3,114,216,116,1,106,2,124,3,25,0,125,4,116,11,
-    124,4,124,0,106,0,100,1,131,1,100,5,25,0,124,7,
-    131,3,1,0,124,7,83,0,41,6,78,114,118,0,0,0,
-    114,19,0,0,0,122,23,59,32,123,33,114,125,32,105,115,
-    32,110,111,116,32,97,32,112,97,99,107,97,103,101,41,1,
-    114,15,0,0,0,233,2,0,0,0,41,12,114,119,0,0,
-    0,114,14,0,0,0,114,80,0,0,0,114,59,0,0,0,
-    114,128,0,0,0,114,91,0,0,0,218,8,95,69,82,82,
-    95,77,83,71,114,38,0,0,0,218,19,77,111,100,117,108,
-    101,78,111,116,70,111,117,110,100,69,114,114,111,114,114,170,
-    0,0,0,114,141,0,0,0,114,5,0,0,0,41,8,114,
-    15,0,0,0,218,7,105,109,112,111,114,116,95,114,144,0,
-    0,0,114,120,0,0,0,90,13,112,97,114,101,110,116,95,
-    109,111,100,117,108,101,114,139,0,0,0,114,83,0,0,0,
-    114,84,0,0,0,114,10,0,0,0,114,10,0,0,0,114,
-    11,0,0,0,218,23,95,102,105,110,100,95,97,110,100,95,
-    108,111,97,100,95,117,110,108,111,99,107,101,100,168,3,0,
-    0,115,42,0,0,0,0,1,4,1,14,1,4,1,10,1,
-    10,2,10,1,10,1,10,1,2,1,10,1,14,1,16,1,
-    20,1,10,1,8,1,20,2,8,1,4,2,10,1,22,1,
-    114,179,0,0,0,99,2,0,0,0,0,0,0,0,4,0,
-    0,0,11,0,0,0,67,0,0,0,115,94,0,0,0,116,
-    0,124,0,131,1,143,38,1,0,116,1,106,2,106,3,124,
-    0,116,4,131,2,125,2,124,2,116,4,107,8,114,42,116,
-    5,124,0,124,1,131,2,83,0,87,0,100,1,81,0,82,
-    0,88,0,124,2,100,1,107,8,114,82,100,2,106,6,124,
-    0,131,1,125,3,116,7,124,3,124,0,100,3,141,2,130,
-    1,116,8,124,0,131,1,1,0,124,2,83,0,41,4,122,
-    25,70,105,110,100,32,97,110,100,32,108,111,97,100,32,116,
-    104,101,32,109,111,100,117,108,101,46,78,122,40,105,109,112,
-    111,114,116,32,111,102,32,123,125,32,104,97,108,116,101,100,
-    59,32,78,111,110,101,32,105,110,32,115,121,115,46,109,111,
-    100,117,108,101,115,41,1,114,15,0,0,0,41,9,114,42,
-    0,0,0,114,14,0,0,0,114,80,0,0,0,114,30,0,
-    0,0,218,14,95,78,69,69,68,83,95,76,79,65,68,73,
-    78,71,114,179,0,0,0,114,38,0,0,0,114,177,0,0,
-    0,114,57,0,0,0,41,4,114,15,0,0,0,114,178,0,
-    0,0,114,84,0,0,0,114,68,0,0,0,114,10,0,0,
-    0,114,10,0,0,0,114,11,0,0,0,218,14,95,102,105,
-    110,100,95,97,110,100,95,108,111,97,100,198,3,0,0,115,
-    20,0,0,0,0,2,10,1,14,1,8,1,20,2,8,1,
-    4,1,6,1,12,2,8,1,114,181,0,0,0,114,19,0,
-    0,0,99,3,0,0,0,0,0,0,0,3,0,0,0,4,
-    0,0,0,67,0,0,0,115,42,0,0,0,116,0,124,0,
-    124,1,124,2,131,3,1,0,124,2,100,1,107,4,114,32,
-    116,1,124,0,124,1,124,2,131,3,125,0,116,2,124,0,
-    116,3,131,2,83,0,41,2,97,50,1,0,0,73,109,112,
-    111,114,116,32,97,110,100,32,114,101,116,117,114,110,32,116,
-    104,101,32,109,111,100,117,108,101,32,98,97,115,101,100,32,
-    111,110,32,105,116,115,32,110,97,109,101,44,32,116,104,101,
-    32,112,97,99,107,97,103,101,32,116,104,101,32,99,97,108,
-    108,32,105,115,10,32,32,32,32,98,101,105,110,103,32,109,
-    97,100,101,32,102,114,111,109,44,32,97,110,100,32,116,104,
-    101,32,108,101,118,101,108,32,97,100,106,117,115,116,109,101,
-    110,116,46,10,10,32,32,32,32,84,104,105,115,32,102,117,
-    110,99,116,105,111,110,32,114,101,112,114,101,115,101,110,116,
-    115,32,116,104,101,32,103,114,101,97,116,101,115,116,32,99,
-    111,109,109,111,110,32,100,101,110,111,109,105,110,97,116,111,
-    114,32,111,102,32,102,117,110,99,116,105,111,110,97,108,105,
-    116,121,10,32,32,32,32,98,101,116,119,101,101,110,32,105,
-    109,112,111,114,116,95,109,111,100,117,108,101,32,97,110,100,
-    32,95,95,105,109,112,111,114,116,95,95,46,32,84,104,105,
-    115,32,105,110,99,108,117,100,101,115,32,115,101,116,116,105,
-    110,103,32,95,95,112,97,99,107,97,103,101,95,95,32,105,
-    102,10,32,32,32,32,116,104,101,32,108,111,97,100,101,114,
-    32,100,105,100,32,110,111,116,46,10,10,32,32,32,32,114,
-    19,0,0,0,41,4,114,174,0,0,0,114,163,0,0,0,
-    114,181,0,0,0,218,11,95,103,99,100,95,105,109,112,111,
-    114,116,41,3,114,15,0,0,0,114,161,0,0,0,114,162,
-    0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,
-    0,0,114,182,0,0,0,214,3,0,0,115,8,0,0,0,
-    0,9,12,1,8,1,12,1,114,182,0,0,0,99,3,0,
-    0,0,0,0,0,0,6,0,0,0,17,0,0,0,67,0,
-    0,0,115,164,0,0,0,116,0,124,0,100,1,131,2,114,
-    160,100,2,124,1,107,6,114,58,116,1,124,1,131,1,125,
-    1,124,1,106,2,100,2,131,1,1,0,116,0,124,0,100,
-    3,131,2,114,58,124,1,106,3,124,0,106,4,131,1,1,
-    0,120,100,124,1,68,0,93,92,125,3,116,0,124,0,124,
-    3,131,2,115,64,100,4,106,5,124,0,106,6,124,3,131,
-    2,125,4,121,14,116,7,124,2,124,4,131,2,1,0,87,
-    0,113,64,4,0,116,8,107,10,114,154,1,0,125,5,1,
-    0,122,20,124,5,106,9,124,4,107,2,114,136,119,64,130,
-    0,87,0,89,0,100,5,100,5,125,5,126,5,88,0,113,
-    64,88,0,113,64,87,0,124,0,83,0,41,6,122,238,70,
-    105,103,117,114,101,32,111,117,116,32,119,104,97,116,32,95,
-    95,105,109,112,111,114,116,95,95,32,115,104,111,117,108,100,
-    32,114,101,116,117,114,110,46,10,10,32,32,32,32,84,104,
-    101,32,105,109,112,111,114,116,95,32,112,97,114,97,109,101,
-    116,101,114,32,105,115,32,97,32,99,97,108,108,97,98,108,
-    101,32,119,104,105,99,104,32,116,97,107,101,115,32,116,104,
-    101,32,110,97,109,101,32,111,102,32,109,111,100,117,108,101,
-    32,116,111,10,32,32,32,32,105,109,112,111,114,116,46,32,
-    73,116,32,105,115,32,114,101,113,117,105,114,101,100,32,116,
-    111,32,100,101,99,111,117,112,108,101,32,116,104,101,32,102,
-    117,110,99,116,105,111,110,32,102,114,111,109,32,97,115,115,
-    117,109,105,110,103,32,105,109,112,111,114,116,108,105,98,39,
-    115,10,32,32,32,32,105,109,112,111,114,116,32,105,109,112,
-    108,101,109,101,110,116,97,116,105,111,110,32,105,115,32,100,
-    101,115,105,114,101,100,46,10,10,32,32,32,32,114,128,0,
-    0,0,250,1,42,218,7,95,95,97,108,108,95,95,122,5,
-    123,125,46,123,125,78,41,10,114,4,0,0,0,114,127,0,
-    0,0,218,6,114,101,109,111,118,101,218,6,101,120,116,101,
-    110,100,114,184,0,0,0,114,38,0,0,0,114,1,0,0,
-    0,114,59,0,0,0,114,177,0,0,0,114,15,0,0,0,
-    41,6,114,84,0,0,0,218,8,102,114,111,109,108,105,115,
-    116,114,178,0,0,0,218,1,120,90,9,102,114,111,109,95,
-    110,97,109,101,90,3,101,120,99,114,10,0,0,0,114,10,
-    0,0,0,114,11,0,0,0,218,16,95,104,97,110,100,108,
-    101,95,102,114,111,109,108,105,115,116,229,3,0,0,115,32,
-    0,0,0,0,10,10,1,8,1,8,1,10,1,10,1,12,
-    1,10,1,10,1,14,1,2,1,14,1,16,4,10,1,2,
-    1,24,1,114,189,0,0,0,99,1,0,0,0,0,0,0,
-    0,3,0,0,0,6,0,0,0,67,0,0,0,115,146,0,
-    0,0,124,0,106,0,100,1,131,1,125,1,124,0,106,0,
-    100,2,131,1,125,2,124,1,100,3,107,9,114,82,124,2,
-    100,3,107,9,114,78,124,1,124,2,106,1,107,3,114,78,
-    116,2,106,3,100,4,124,1,155,2,100,5,124,2,106,1,
-    155,2,100,6,157,5,116,4,100,7,100,8,141,3,1,0,
-    124,1,83,0,124,2,100,3,107,9,114,96,124,2,106,1,
-    83,0,116,2,106,3,100,9,116,4,100,7,100,8,141,3,
-    1,0,124,0,100,10,25,0,125,1,100,11,124,0,107,7,
-    114,142,124,1,106,5,100,12,131,1,100,13,25,0,125,1,
-    124,1,83,0,41,14,122,167,67,97,108,99,117,108,97,116,
-    101,32,119,104,97,116,32,95,95,112,97,99,107,97,103,101,
-    95,95,32,115,104,111,117,108,100,32,98,101,46,10,10,32,
-    32,32,32,95,95,112,97,99,107,97,103,101,95,95,32,105,
-    115,32,110,111,116,32,103,117,97,114,97,110,116,101,101,100,
-    32,116,111,32,98,101,32,100,101,102,105,110,101,100,32,111,
-    114,32,99,111,117,108,100,32,98,101,32,115,101,116,32,116,
-    111,32,78,111,110,101,10,32,32,32,32,116,111,32,114,101,
-    112,114,101,115,101,110,116,32,116,104,97,116,32,105,116,115,
-    32,112,114,111,112,101,114,32,118,97,108,117,101,32,105,115,
-    32,117,110,107,110,111,119,110,46,10,10,32,32,32,32,114,
-    131,0,0,0,114,90,0,0,0,78,122,32,95,95,112,97,
-    99,107,97,103,101,95,95,32,33,61,32,95,95,115,112,101,
-    99,95,95,46,112,97,114,101,110,116,32,40,122,4,32,33,
-    61,32,250,1,41,233,3,0,0,0,41,1,90,10,115,116,
-    97,99,107,108,101,118,101,108,122,89,99,97,110,39,116,32,
-    114,101,115,111,108,118,101,32,112,97,99,107,97,103,101,32,
-    102,114,111,109,32,95,95,115,112,101,99,95,95,32,111,114,
-    32,95,95,112,97,99,107,97,103,101,95,95,44,32,102,97,
-    108,108,105,110,103,32,98,97,99,107,32,111,110,32,95,95,
-    110,97,109,101,95,95,32,97,110,100,32,95,95,112,97,116,
-    104,95,95,114,1,0,0,0,114,128,0,0,0,114,118,0,
-    0,0,114,19,0,0,0,41,6,114,30,0,0,0,114,120,
-    0,0,0,114,167,0,0,0,114,168,0,0,0,114,169,0,
-    0,0,114,119,0,0,0,41,3,218,7,103,108,111,98,97,
-    108,115,114,161,0,0,0,114,83,0,0,0,114,10,0,0,
-    0,114,10,0,0,0,114,11,0,0,0,218,17,95,99,97,
-    108,99,95,95,95,112,97,99,107,97,103,101,95,95,4,4,
-    0,0,115,30,0,0,0,0,7,10,1,10,1,8,1,18,
-    1,22,2,10,1,4,1,8,1,6,2,6,2,10,1,8,
-    1,8,1,14,1,114,193,0,0,0,99,5,0,0,0,0,
-    0,0,0,9,0,0,0,5,0,0,0,67,0,0,0,115,
-    166,0,0,0,124,4,100,1,107,2,114,18,116,0,124,0,
-    131,1,125,5,110,36,124,1,100,2,107,9,114,30,124,1,
-    110,2,105,0,125,6,116,1,124,6,131,1,125,7,116,0,
-    124,0,124,7,124,4,131,3,125,5,124,3,115,150,124,4,
-    100,1,107,2,114,84,116,0,124,0,106,2,100,3,131,1,
-    100,1,25,0,131,1,83,0,124,0,115,92,124,5,83,0,
-    116,3,124,0,131,1,116,3,124,0,106,2,100,3,131,1,
-    100,1,25,0,131,1,24,0,125,8,116,4,106,5,124,5,
-    106,6,100,2,116,3,124,5,106,6,131,1,124,8,24,0,
-    133,2,25,0,25,0,83,0,110,12,116,7,124,5,124,3,
-    116,0,131,3,83,0,100,2,83,0,41,4,97,215,1,0,
-    0,73,109,112,111,114,116,32,97,32,109,111,100,117,108,101,
-    46,10,10,32,32,32,32,84,104,101,32,39,103,108,111,98,
-    97,108,115,39,32,97,114,103,117,109,101,110,116,32,105,115,
-    32,117,115,101,100,32,116,111,32,105,110,102,101,114,32,119,
-    104,101,114,101,32,116,104,101,32,105,109,112,111,114,116,32,
-    105,115,32,111,99,99,117,114,114,105,110,103,32,102,114,111,
-    109,10,32,32,32,32,116,111,32,104,97,110,100,108,101,32,
-    114,101,108,97,116,105,118,101,32,105,109,112,111,114,116,115,
-    46,32,84,104,101,32,39,108,111,99,97,108,115,39,32,97,
-    114,103,117,109,101,110,116,32,105,115,32,105,103,110,111,114,
-    101,100,46,32,84,104,101,10,32,32,32,32,39,102,114,111,
-    109,108,105,115,116,39,32,97,114,103,117,109,101,110,116,32,
-    115,112,101,99,105,102,105,101,115,32,119,104,97,116,32,115,
-    104,111,117,108,100,32,101,120,105,115,116,32,97,115,32,97,
-    116,116,114,105,98,117,116,101,115,32,111,110,32,116,104,101,
-    32,109,111,100,117,108,101,10,32,32,32,32,98,101,105,110,
-    103,32,105,109,112,111,114,116,101,100,32,40,101,46,103,46,
-    32,96,96,102,114,111,109,32,109,111,100,117,108,101,32,105,
-    109,112,111,114,116,32,60,102,114,111,109,108,105,115,116,62,
-    96,96,41,46,32,32,84,104,101,32,39,108,101,118,101,108,
-    39,10,32,32,32,32,97,114,103,117,109,101,110,116,32,114,
-    101,112,114,101,115,101,110,116,115,32,116,104,101,32,112,97,
-    99,107,97,103,101,32,108,111,99,97,116,105,111,110,32,116,
-    111,32,105,109,112,111,114,116,32,102,114,111,109,32,105,110,
-    32,97,32,114,101,108,97,116,105,118,101,10,32,32,32,32,
-    105,109,112,111,114,116,32,40,101,46,103,46,32,96,96,102,
-    114,111,109,32,46,46,112,107,103,32,105,109,112,111,114,116,
-    32,109,111,100,96,96,32,119,111,117,108,100,32,104,97,118,
-    101,32,97,32,39,108,101,118,101,108,39,32,111,102,32,50,
-    41,46,10,10,32,32,32,32,114,19,0,0,0,78,114,118,
-    0,0,0,41,8,114,182,0,0,0,114,193,0,0,0,218,
-    9,112,97,114,116,105,116,105,111,110,114,159,0,0,0,114,
-    14,0,0,0,114,80,0,0,0,114,1,0,0,0,114,189,
-    0,0,0,41,9,114,15,0,0,0,114,192,0,0,0,218,
-    6,108,111,99,97,108,115,114,187,0,0,0,114,162,0,0,
-    0,114,84,0,0,0,90,8,103,108,111,98,97,108,115,95,
-    114,161,0,0,0,90,7,99,117,116,95,111,102,102,114,10,
-    0,0,0,114,10,0,0,0,114,11,0,0,0,218,10,95,
-    95,105,109,112,111,114,116,95,95,31,4,0,0,115,26,0,
-    0,0,0,11,8,1,10,2,16,1,8,1,12,1,4,3,
-    8,1,18,1,4,1,4,4,26,3,32,2,114,196,0,0,
-    0,99,1,0,0,0,0,0,0,0,2,0,0,0,3,0,
-    0,0,67,0,0,0,115,38,0,0,0,116,0,106,1,124,
-    0,131,1,125,1,124,1,100,0,107,8,114,30,116,2,100,
-    1,124,0,23,0,131,1,130,1,116,3,124,1,131,1,83,
-    0,41,2,78,122,25,110,111,32,98,117,105,108,116,45,105,
-    110,32,109,111,100,117,108,101,32,110,97,109,101,100,32,41,
-    4,114,142,0,0,0,114,146,0,0,0,114,71,0,0,0,
-    114,141,0,0,0,41,2,114,15,0,0,0,114,83,0,0,
+    101,110,73,109,112,111,114,116,101,114,46,103,101,116,95,115,
+    111,117,114,99,101,99,2,0,0,0,0,0,0,0,2,0,
+    0,0,2,0,0,0,67,0,0,0,115,10,0,0,0,116,
+    0,106,1,124,1,131,1,83,0,41,1,122,46,82,101,116,
+    117,114,110,32,84,114,117,101,32,105,102,32,116,104,101,32,
+    102,114,111,122,101,110,32,109,111,100,117,108,101,32,105,115,
+    32,97,32,112,97,99,107,97,103,101,46,41,2,114,49,0,
+    0,0,90,17,105,115,95,102,114,111,122,101,110,95,112,97,
+    99,107,97,103,101,41,2,114,143,0,0,0,114,72,0,0,
     0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
-    218,18,95,98,117,105,108,116,105,110,95,102,114,111,109,95,
-    110,97,109,101,66,4,0,0,115,8,0,0,0,0,1,10,
-    1,8,1,12,1,114,197,0,0,0,99,2,0,0,0,0,
-    0,0,0,12,0,0,0,12,0,0,0,67,0,0,0,115,
-    244,0,0,0,124,1,97,0,124,0,97,1,116,2,116,1,
-    131,1,125,2,120,86,116,1,106,3,106,4,131,0,68,0,
-    93,72,92,2,125,3,125,4,116,5,124,4,124,2,131,2,
-    114,28,124,3,116,1,106,6,107,6,114,62,116,7,125,5,
-    110,18,116,0,106,8,124,3,131,1,114,28,116,9,125,5,
-    110,2,113,28,116,10,124,4,124,5,131,2,125,6,116,11,
-    124,6,124,4,131,2,1,0,113,28,87,0,116,1,106,3,
-    116,12,25,0,125,7,120,54,100,5,68,0,93,46,125,8,
-    124,8,116,1,106,3,107,7,114,144,116,13,124,8,131,1,
-    125,9,110,10,116,1,106,3,124,8,25,0,125,9,116,14,
-    124,7,124,8,124,9,131,3,1,0,113,120,87,0,121,12,
-    116,13,100,2,131,1,125,10,87,0,110,24,4,0,116,15,
-    107,10,114,206,1,0,1,0,1,0,100,3,125,10,89,0,
-    110,2,88,0,116,14,124,7,100,2,124,10,131,3,1,0,
-    116,13,100,4,131,1,125,11,116,14,124,7,100,4,124,11,
-    131,3,1,0,100,3,83,0,41,6,122,250,83,101,116,117,
-    112,32,105,109,112,111,114,116,108,105,98,32,98,121,32,105,
-    109,112,111,114,116,105,110,103,32,110,101,101,100,101,100,32,
-    98,117,105,108,116,45,105,110,32,109,111,100,117,108,101,115,
-    32,97,110,100,32,105,110,106,101,99,116,105,110,103,32,116,
-    104,101,109,10,32,32,32,32,105,110,116,111,32,116,104,101,
-    32,103,108,111,98,97,108,32,110,97,109,101,115,112,97,99,
-    101,46,10,10,32,32,32,32,65,115,32,115,121,115,32,105,
-    115,32,110,101,101,100,101,100,32,102,111,114,32,115,121,115,
-    46,109,111,100,117,108,101,115,32,97,99,99,101,115,115,32,
-    97,110,100,32,95,105,109,112,32,105,115,32,110,101,101,100,
-    101,100,32,116,111,32,108,111,97,100,32,98,117,105,108,116,
-    45,105,110,10,32,32,32,32,109,111,100,117,108,101,115,44,
-    32,116,104,111,115,101,32,116,119,111,32,109,111,100,117,108,
-    101,115,32,109,117,115,116,32,98,101,32,101,120,112,108,105,
-    99,105,116,108,121,32,112,97,115,115,101,100,32,105,110,46,
-    10,10,32,32,32,32,114,167,0,0,0,114,20,0,0,0,
-    78,114,56,0,0,0,41,1,114,167,0,0,0,41,16,114,
-    49,0,0,0,114,14,0,0,0,114,13,0,0,0,114,80,
-    0,0,0,218,5,105,116,101,109,115,114,171,0,0,0,114,
-    70,0,0,0,114,142,0,0,0,114,76,0,0,0,114,152,
-    0,0,0,114,129,0,0,0,114,134,0,0,0,114,1,0,
-    0,0,114,197,0,0,0,114,5,0,0,0,114,71,0,0,
-    0,41,12,218,10,115,121,115,95,109,111,100,117,108,101,218,
-    11,95,105,109,112,95,109,111,100,117,108,101,90,11,109,111,
-    100,117,108,101,95,116,121,112,101,114,15,0,0,0,114,84,
-    0,0,0,114,94,0,0,0,114,83,0,0,0,90,11,115,
-    101,108,102,95,109,111,100,117,108,101,90,12,98,117,105,108,
-    116,105,110,95,110,97,109,101,90,14,98,117,105,108,116,105,
-    110,95,109,111,100,117,108,101,90,13,116,104,114,101,97,100,
-    95,109,111,100,117,108,101,90,14,119,101,97,107,114,101,102,
-    95,109,111,100,117,108,101,114,10,0,0,0,114,10,0,0,
-    0,114,11,0,0,0,218,6,95,115,101,116,117,112,73,4,
-    0,0,115,50,0,0,0,0,9,4,1,4,3,8,1,20,
-    1,10,1,10,1,6,1,10,1,6,2,2,1,10,1,14,
-    3,10,1,10,1,10,1,10,2,10,1,16,3,2,1,12,
-    1,14,2,10,1,12,3,8,1,114,201,0,0,0,99,2,
-    0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,67,
-    0,0,0,115,66,0,0,0,116,0,124,0,124,1,131,2,
-    1,0,116,1,106,2,106,3,116,4,131,1,1,0,116,1,
-    106,2,106,3,116,5,131,1,1,0,100,1,100,2,108,6,
-    125,2,124,2,97,7,124,2,106,8,116,1,106,9,116,10,
-    25,0,131,1,1,0,100,2,83,0,41,3,122,50,73,110,
-    115,116,97,108,108,32,105,109,112,111,114,116,108,105,98,32,
-    97,115,32,116,104,101,32,105,109,112,108,101,109,101,110,116,
-    97,116,105,111,110,32,111,102,32,105,109,112,111,114,116,46,
-    114,19,0,0,0,78,41,11,114,201,0,0,0,114,14,0,
-    0,0,114,166,0,0,0,114,110,0,0,0,114,142,0,0,
-    0,114,152,0,0,0,218,26,95,102,114,111,122,101,110,95,
-    105,109,112,111,114,116,108,105,98,95,101,120,116,101,114,110,
-    97,108,114,116,0,0,0,218,8,95,105,110,115,116,97,108,
-    108,114,80,0,0,0,114,1,0,0,0,41,3,114,199,0,
+    114,106,0,0,0,62,3,0,0,115,2,0,0,0,0,4,
+    122,25,70,114,111,122,101,110,73,109,112,111,114,116,101,114,
+    46,105,115,95,112,97,99,107,97,103,101,41,2,78,78,41,
+    1,78,41,16,114,1,0,0,0,114,0,0,0,0,114,2,
+    0,0,0,114,3,0,0,0,114,150,0,0,0,114,87,0,
+    0,0,114,151,0,0,0,114,146,0,0,0,114,147,0,0,
+    0,114,135,0,0,0,114,136,0,0,0,114,138,0,0,0,
+    114,78,0,0,0,114,148,0,0,0,114,149,0,0,0,114,
+    106,0,0,0,114,10,0,0,0,114,10,0,0,0,114,10,
+    0,0,0,114,11,0,0,0,114,152,0,0,0,250,2,0,
+    0,115,30,0,0,0,8,7,4,2,12,9,2,1,12,6,
+    2,1,12,8,12,4,12,9,12,9,2,1,14,5,2,1,
+    14,5,2,1,114,152,0,0,0,99,0,0,0,0,0,0,
+    0,0,0,0,0,0,2,0,0,0,64,0,0,0,115,32,
+    0,0,0,101,0,90,1,100,0,90,2,100,1,90,3,100,
+    2,100,3,132,0,90,4,100,4,100,5,132,0,90,5,100,
+    6,83,0,41,7,218,18,95,73,109,112,111,114,116,76,111,
+    99,107,67,111,110,116,101,120,116,122,36,67,111,110,116,101,
+    120,116,32,109,97,110,97,103,101,114,32,102,111,114,32,116,
+    104,101,32,105,109,112,111,114,116,32,108,111,99,107,46,99,
+    1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,
+    67,0,0,0,115,12,0,0,0,116,0,106,1,131,0,1,
+    0,100,1,83,0,41,2,122,24,65,99,113,117,105,114,101,
+    32,116,104,101,32,105,109,112,111,114,116,32,108,111,99,107,
+    46,78,41,2,114,49,0,0,0,114,50,0,0,0,41,1,
+    114,26,0,0,0,114,10,0,0,0,114,10,0,0,0,114,
+    11,0,0,0,114,46,0,0,0,75,3,0,0,115,2,0,
+    0,0,0,2,122,28,95,73,109,112,111,114,116,76,111,99,
+    107,67,111,110,116,101,120,116,46,95,95,101,110,116,101,114,
+    95,95,99,4,0,0,0,0,0,0,0,4,0,0,0,1,
+    0,0,0,67,0,0,0,115,12,0,0,0,116,0,106,1,
+    131,0,1,0,100,1,83,0,41,2,122,60,82,101,108,101,
+    97,115,101,32,116,104,101,32,105,109,112,111,114,116,32,108,
+    111,99,107,32,114,101,103,97,114,100,108,101,115,115,32,111,
+    102,32,97,110,121,32,114,97,105,115,101,100,32,101,120,99,
+    101,112,116,105,111,110,115,46,78,41,2,114,49,0,0,0,
+    114,52,0,0,0,41,4,114,26,0,0,0,90,8,101,120,
+    99,95,116,121,112,101,90,9,101,120,99,95,118,97,108,117,
+    101,90,13,101,120,99,95,116,114,97,99,101,98,97,99,107,
+    114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,114,
+    48,0,0,0,79,3,0,0,115,2,0,0,0,0,2,122,
+    27,95,73,109,112,111,114,116,76,111,99,107,67,111,110,116,
+    101,120,116,46,95,95,101,120,105,116,95,95,78,41,6,114,
+    1,0,0,0,114,0,0,0,0,114,2,0,0,0,114,3,
+    0,0,0,114,46,0,0,0,114,48,0,0,0,114,10,0,
+    0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,
+    0,114,157,0,0,0,71,3,0,0,115,6,0,0,0,8,
+    2,4,2,8,4,114,157,0,0,0,99,3,0,0,0,0,
+    0,0,0,5,0,0,0,4,0,0,0,67,0,0,0,115,
+    64,0,0,0,124,1,106,0,100,1,124,2,100,2,24,0,
+    131,2,125,3,116,1,124,3,131,1,124,2,107,0,114,36,
+    116,2,100,3,131,1,130,1,124,3,100,4,25,0,125,4,
+    124,0,114,60,100,5,106,3,124,4,124,0,131,2,83,0,
+    124,4,83,0,41,6,122,50,82,101,115,111,108,118,101,32,
+    97,32,114,101,108,97,116,105,118,101,32,109,111,100,117,108,
+    101,32,110,97,109,101,32,116,111,32,97,110,32,97,98,115,
+    111,108,117,116,101,32,111,110,101,46,114,118,0,0,0,114,
+    33,0,0,0,122,50,97,116,116,101,109,112,116,101,100,32,
+    114,101,108,97,116,105,118,101,32,105,109,112,111,114,116,32,
+    98,101,121,111,110,100,32,116,111,112,45,108,101,118,101,108,
+    32,112,97,99,107,97,103,101,114,19,0,0,0,122,5,123,
+    125,46,123,125,41,4,218,6,114,115,112,108,105,116,218,3,
+    108,101,110,218,10,86,97,108,117,101,69,114,114,111,114,114,
+    38,0,0,0,41,5,114,15,0,0,0,218,7,112,97,99,
+    107,97,103,101,218,5,108,101,118,101,108,90,4,98,105,116,
+    115,90,4,98,97,115,101,114,10,0,0,0,114,10,0,0,
+    0,114,11,0,0,0,218,13,95,114,101,115,111,108,118,101,
+    95,110,97,109,101,84,3,0,0,115,10,0,0,0,0,2,
+    16,1,12,1,8,1,8,1,114,163,0,0,0,99,3,0,
+    0,0,0,0,0,0,4,0,0,0,3,0,0,0,67,0,
+    0,0,115,34,0,0,0,124,0,106,0,124,1,124,2,131,
+    2,125,3,124,3,100,0,107,8,114,24,100,0,83,0,116,
+    1,124,1,124,3,131,2,83,0,41,1,78,41,2,114,147,
+    0,0,0,114,79,0,0,0,41,4,218,6,102,105,110,100,
+    101,114,114,15,0,0,0,114,144,0,0,0,114,94,0,0,
+    0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
+    218,17,95,102,105,110,100,95,115,112,101,99,95,108,101,103,
+    97,99,121,93,3,0,0,115,8,0,0,0,0,3,12,1,
+    8,1,4,1,114,165,0,0,0,99,3,0,0,0,0,0,
+    0,0,10,0,0,0,27,0,0,0,67,0,0,0,115,242,
+    0,0,0,116,0,106,1,125,3,124,3,100,1,107,8,114,
+    22,116,2,100,2,131,1,130,1,124,3,115,38,116,3,106,
+    4,100,3,116,5,131,2,1,0,124,0,116,0,106,6,107,
+    6,125,4,120,188,124,3,68,0,93,176,125,5,116,7,131,
+    0,143,72,1,0,121,10,124,5,106,8,125,6,87,0,110,
+    42,4,0,116,9,107,10,114,118,1,0,1,0,1,0,116,
+    10,124,5,124,0,124,1,131,3,125,7,124,7,100,1,107,
+    8,114,114,119,54,89,0,110,14,88,0,124,6,124,0,124,
+    1,124,2,131,3,125,7,87,0,100,1,81,0,82,0,88,
+    0,124,7,100,1,107,9,114,54,124,4,12,0,114,226,124,
+    0,116,0,106,6,107,6,114,226,116,0,106,6,124,0,25,
+    0,125,8,121,10,124,8,106,11,125,9,87,0,110,20,4,
+    0,116,9,107,10,114,206,1,0,1,0,1,0,124,7,83,
+    0,88,0,124,9,100,1,107,8,114,220,124,7,83,0,124,
+    9,83,0,113,54,124,7,83,0,113,54,87,0,100,1,83,
+    0,100,1,83,0,41,4,122,21,70,105,110,100,32,97,32,
+    109,111,100,117,108,101,39,115,32,115,112,101,99,46,78,122,
+    53,115,121,115,46,109,101,116,97,95,112,97,116,104,32,105,
+    115,32,78,111,110,101,44,32,80,121,116,104,111,110,32,105,
+    115,32,108,105,107,101,108,121,32,115,104,117,116,116,105,110,
+    103,32,100,111,119,110,122,22,115,121,115,46,109,101,116,97,
+    95,112,97,116,104,32,105,115,32,101,109,112,116,121,41,12,
+    114,14,0,0,0,218,9,109,101,116,97,95,112,97,116,104,
+    114,71,0,0,0,218,9,95,119,97,114,110,105,110,103,115,
+    218,4,119,97,114,110,218,13,73,109,112,111,114,116,87,97,
+    114,110,105,110,103,114,80,0,0,0,114,157,0,0,0,114,
+    146,0,0,0,114,91,0,0,0,114,165,0,0,0,114,90,
+    0,0,0,41,10,114,15,0,0,0,114,144,0,0,0,114,
+    145,0,0,0,114,166,0,0,0,90,9,105,115,95,114,101,
+    108,111,97,100,114,164,0,0,0,114,146,0,0,0,114,83,
+    0,0,0,114,84,0,0,0,114,90,0,0,0,114,10,0,
+    0,0,114,10,0,0,0,114,11,0,0,0,218,10,95,102,
+    105,110,100,95,115,112,101,99,102,3,0,0,115,54,0,0,
+    0,0,2,6,1,8,2,8,3,4,1,12,5,10,1,10,
+    1,8,1,2,1,10,1,14,1,12,1,8,1,8,2,22,
+    1,8,2,16,1,10,1,2,1,10,1,14,4,6,2,8,
+    1,4,2,6,2,8,2,114,170,0,0,0,99,3,0,0,
+    0,0,0,0,0,3,0,0,0,4,0,0,0,67,0,0,
+    0,115,110,0,0,0,116,0,124,0,116,1,131,2,115,28,
+    116,2,100,1,106,3,116,4,124,0,131,1,131,1,131,1,
+    130,1,124,2,100,2,107,0,114,44,116,5,100,3,131,1,
+    130,1,124,2,100,2,107,4,114,84,116,0,124,1,116,1,
+    131,2,115,72,116,2,100,4,131,1,130,1,110,12,124,1,
+    115,84,116,6,100,5,131,1,130,1,124,0,12,0,114,106,
+    124,2,100,2,107,2,114,106,116,5,100,6,131,1,130,1,
+    100,7,83,0,41,8,122,28,86,101,114,105,102,121,32,97,
+    114,103,117,109,101,110,116,115,32,97,114,101,32,34,115,97,
+    110,101,34,46,122,31,109,111,100,117,108,101,32,110,97,109,
+    101,32,109,117,115,116,32,98,101,32,115,116,114,44,32,110,
+    111,116,32,123,125,114,19,0,0,0,122,18,108,101,118,101,
+    108,32,109,117,115,116,32,98,101,32,62,61,32,48,122,31,
+    95,95,112,97,99,107,97,103,101,95,95,32,110,111,116,32,
+    115,101,116,32,116,111,32,97,32,115,116,114,105,110,103,122,
+    54,97,116,116,101,109,112,116,101,100,32,114,101,108,97,116,
+    105,118,101,32,105,109,112,111,114,116,32,119,105,116,104,32,
+    110,111,32,107,110,111,119,110,32,112,97,114,101,110,116,32,
+    112,97,99,107,97,103,101,122,17,69,109,112,116,121,32,109,
+    111,100,117,108,101,32,110,97,109,101,78,41,7,218,10,105,
+    115,105,110,115,116,97,110,99,101,218,3,115,116,114,218,9,
+    84,121,112,101,69,114,114,111,114,114,38,0,0,0,114,13,
+    0,0,0,114,160,0,0,0,114,71,0,0,0,41,3,114,
+    15,0,0,0,114,161,0,0,0,114,162,0,0,0,114,10,
+    0,0,0,114,10,0,0,0,114,11,0,0,0,218,13,95,
+    115,97,110,105,116,121,95,99,104,101,99,107,149,3,0,0,
+    115,22,0,0,0,0,2,10,1,18,1,8,1,8,1,8,
+    1,10,1,10,1,4,1,8,2,14,1,114,174,0,0,0,
+    122,16,78,111,32,109,111,100,117,108,101,32,110,97,109,101,
+    100,32,122,4,123,33,114,125,99,2,0,0,0,0,0,0,
+    0,8,0,0,0,12,0,0,0,67,0,0,0,115,220,0,
+    0,0,100,0,125,2,124,0,106,0,100,1,131,1,100,2,
+    25,0,125,3,124,3,114,134,124,3,116,1,106,2,107,7,
+    114,42,116,3,124,1,124,3,131,2,1,0,124,0,116,1,
+    106,2,107,6,114,62,116,1,106,2,124,0,25,0,83,0,
+    116,1,106,2,124,3,25,0,125,4,121,10,124,4,106,4,
+    125,2,87,0,110,50,4,0,116,5,107,10,114,132,1,0,
+    1,0,1,0,116,6,100,3,23,0,106,7,124,0,124,3,
+    131,2,125,5,116,8,124,5,124,0,100,4,141,2,100,0,
+    130,2,89,0,110,2,88,0,116,9,124,0,124,2,131,2,
+    125,6,124,6,100,0,107,8,114,172,116,8,116,6,106,7,
+    124,0,131,1,124,0,100,4,141,2,130,1,110,8,116,10,
+    124,6,131,1,125,7,124,3,114,216,116,1,106,2,124,3,
+    25,0,125,4,116,11,124,4,124,0,106,0,100,1,131,1,
+    100,5,25,0,124,7,131,3,1,0,124,7,83,0,41,6,
+    78,114,118,0,0,0,114,19,0,0,0,122,23,59,32,123,
+    33,114,125,32,105,115,32,110,111,116,32,97,32,112,97,99,
+    107,97,103,101,41,1,114,15,0,0,0,233,2,0,0,0,
+    41,12,114,119,0,0,0,114,14,0,0,0,114,80,0,0,
+    0,114,59,0,0,0,114,128,0,0,0,114,91,0,0,0,
+    218,8,95,69,82,82,95,77,83,71,114,38,0,0,0,218,
+    19,77,111,100,117,108,101,78,111,116,70,111,117,110,100,69,
+    114,114,111,114,114,170,0,0,0,114,141,0,0,0,114,5,
+    0,0,0,41,8,114,15,0,0,0,218,7,105,109,112,111,
+    114,116,95,114,144,0,0,0,114,120,0,0,0,90,13,112,
+    97,114,101,110,116,95,109,111,100,117,108,101,114,139,0,0,
+    0,114,83,0,0,0,114,84,0,0,0,114,10,0,0,0,
+    114,10,0,0,0,114,11,0,0,0,218,23,95,102,105,110,
+    100,95,97,110,100,95,108,111,97,100,95,117,110,108,111,99,
+    107,101,100,168,3,0,0,115,42,0,0,0,0,1,4,1,
+    14,1,4,1,10,1,10,2,10,1,10,1,10,1,2,1,
+    10,1,14,1,16,1,20,1,10,1,8,1,20,2,8,1,
+    4,2,10,1,22,1,114,179,0,0,0,99,2,0,0,0,
+    0,0,0,0,4,0,0,0,11,0,0,0,67,0,0,0,
+    115,94,0,0,0,116,0,124,0,131,1,143,38,1,0,116,
+    1,106,2,106,3,124,0,116,4,131,2,125,2,124,2,116,
+    4,107,8,114,42,116,5,124,0,124,1,131,2,83,0,87,
+    0,100,1,81,0,82,0,88,0,124,2,100,1,107,8,114,
+    82,100,2,106,6,124,0,131,1,125,3,116,7,124,3,124,
+    0,100,3,141,2,130,1,116,8,124,0,131,1,1,0,124,
+    2,83,0,41,4,122,25,70,105,110,100,32,97,110,100,32,
+    108,111,97,100,32,116,104,101,32,109,111,100,117,108,101,46,
+    78,122,40,105,109,112,111,114,116,32,111,102,32,123,125,32,
+    104,97,108,116,101,100,59,32,78,111,110,101,32,105,110,32,
+    115,121,115,46,109,111,100,117,108,101,115,41,1,114,15,0,
+    0,0,41,9,114,42,0,0,0,114,14,0,0,0,114,80,
+    0,0,0,114,30,0,0,0,218,14,95,78,69,69,68,83,
+    95,76,79,65,68,73,78,71,114,179,0,0,0,114,38,0,
+    0,0,114,177,0,0,0,114,57,0,0,0,41,4,114,15,
+    0,0,0,114,178,0,0,0,114,84,0,0,0,114,68,0,
+    0,0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,
+    0,218,14,95,102,105,110,100,95,97,110,100,95,108,111,97,
+    100,198,3,0,0,115,20,0,0,0,0,2,10,1,14,1,
+    8,1,20,2,8,1,4,1,6,1,12,2,8,1,114,181,
+    0,0,0,114,19,0,0,0,99,3,0,0,0,0,0,0,
+    0,3,0,0,0,4,0,0,0,67,0,0,0,115,42,0,
+    0,0,116,0,124,0,124,1,124,2,131,3,1,0,124,2,
+    100,1,107,4,114,32,116,1,124,0,124,1,124,2,131,3,
+    125,0,116,2,124,0,116,3,131,2,83,0,41,2,97,50,
+    1,0,0,73,109,112,111,114,116,32,97,110,100,32,114,101,
+    116,117,114,110,32,116,104,101,32,109,111,100,117,108,101,32,
+    98,97,115,101,100,32,111,110,32,105,116,115,32,110,97,109,
+    101,44,32,116,104,101,32,112,97,99,107,97,103,101,32,116,
+    104,101,32,99,97,108,108,32,105,115,10,32,32,32,32,98,
+    101,105,110,103,32,109,97,100,101,32,102,114,111,109,44,32,
+    97,110,100,32,116,104,101,32,108,101,118,101,108,32,97,100,
+    106,117,115,116,109,101,110,116,46,10,10,32,32,32,32,84,
+    104,105,115,32,102,117,110,99,116,105,111,110,32,114,101,112,
+    114,101,115,101,110,116,115,32,116,104,101,32,103,114,101,97,
+    116,101,115,116,32,99,111,109,109,111,110,32,100,101,110,111,
+    109,105,110,97,116,111,114,32,111,102,32,102,117,110,99,116,
+    105,111,110,97,108,105,116,121,10,32,32,32,32,98,101,116,
+    119,101,101,110,32,105,109,112,111,114,116,95,109,111,100,117,
+    108,101,32,97,110,100,32,95,95,105,109,112,111,114,116,95,
+    95,46,32,84,104,105,115,32,105,110,99,108,117,100,101,115,
+    32,115,101,116,116,105,110,103,32,95,95,112,97,99,107,97,
+    103,101,95,95,32,105,102,10,32,32,32,32,116,104,101,32,
+    108,111,97,100,101,114,32,100,105,100,32,110,111,116,46,10,
+    10,32,32,32,32,114,19,0,0,0,41,4,114,174,0,0,
+    0,114,163,0,0,0,114,181,0,0,0,218,11,95,103,99,
+    100,95,105,109,112,111,114,116,41,3,114,15,0,0,0,114,
+    161,0,0,0,114,162,0,0,0,114,10,0,0,0,114,10,
+    0,0,0,114,11,0,0,0,114,182,0,0,0,214,3,0,
+    0,115,8,0,0,0,0,9,12,1,8,1,12,1,114,182,
+    0,0,0,41,1,218,9,114,101,99,117,114,115,105,118,101,
+    99,3,0,0,0,1,0,0,0,8,0,0,0,17,0,0,
+    0,67,0,0,0,115,236,0,0,0,116,0,124,0,100,1,
+    131,2,114,232,120,220,124,1,68,0,93,212,125,4,116,1,
+    124,4,116,2,131,2,115,78,124,3,114,46,124,0,106,3,
+    100,2,23,0,125,5,110,4,100,3,125,5,116,4,100,4,
+    124,5,155,0,100,5,116,5,124,4,131,1,106,3,155,0,
+    157,4,131,1,130,1,113,16,124,4,100,6,107,2,114,122,
+    124,3,12,0,114,228,116,0,124,0,100,7,131,2,114,228,
+    116,6,124,0,124,0,106,7,124,2,100,8,100,9,141,4,
+    1,0,113,16,116,0,124,0,124,4,131,2,115,16,100,10,
+    106,8,124,0,106,3,124,4,131,2,125,6,121,14,116,9,
+    124,2,124,6,131,2,1,0,87,0,113,16,4,0,116,10,
+    107,10,114,226,1,0,125,7,1,0,122,38,124,7,106,11,
+    124,6,107,2,114,208,116,12,106,13,106,14,124,6,116,15,
+    131,2,100,11,107,9,114,208,119,16,130,0,87,0,89,0,
+    100,11,100,11,125,7,126,7,88,0,113,16,88,0,113,16,
+    87,0,124,0,83,0,41,12,122,238,70,105,103,117,114,101,
+    32,111,117,116,32,119,104,97,116,32,95,95,105,109,112,111,
+    114,116,95,95,32,115,104,111,117,108,100,32,114,101,116,117,
+    114,110,46,10,10,32,32,32,32,84,104,101,32,105,109,112,
+    111,114,116,95,32,112,97,114,97,109,101,116,101,114,32,105,
+    115,32,97,32,99,97,108,108,97,98,108,101,32,119,104,105,
+    99,104,32,116,97,107,101,115,32,116,104,101,32,110,97,109,
+    101,32,111,102,32,109,111,100,117,108,101,32,116,111,10,32,
+    32,32,32,105,109,112,111,114,116,46,32,73,116,32,105,115,
+    32,114,101,113,117,105,114,101,100,32,116,111,32,100,101,99,
+    111,117,112,108,101,32,116,104,101,32,102,117,110,99,116,105,
+    111,110,32,102,114,111,109,32,97,115,115,117,109,105,110,103,
+    32,105,109,112,111,114,116,108,105,98,39,115,10,32,32,32,
+    32,105,109,112,111,114,116,32,105,109,112,108,101,109,101,110,
+    116,97,116,105,111,110,32,105,115,32,100,101,115,105,114,101,
+    100,46,10,10,32,32,32,32,114,128,0,0,0,122,8,46,
+    95,95,97,108,108,95,95,122,13,96,96,102,114,111,109,32,
+    108,105,115,116,39,39,122,8,73,116,101,109,32,105,110,32,
+    122,18,32,109,117,115,116,32,98,101,32,115,116,114,44,32,
+    110,111,116,32,250,1,42,218,7,95,95,97,108,108,95,95,
+    84,41,1,114,183,0,0,0,122,5,123,125,46,123,125,78,
+    41,16,114,4,0,0,0,114,171,0,0,0,114,172,0,0,
+    0,114,1,0,0,0,114,173,0,0,0,114,13,0,0,0,
+    218,16,95,104,97,110,100,108,101,95,102,114,111,109,108,105,
+    115,116,114,185,0,0,0,114,38,0,0,0,114,59,0,0,
+    0,114,177,0,0,0,114,15,0,0,0,114,14,0,0,0,
+    114,80,0,0,0,114,30,0,0,0,114,180,0,0,0,41,
+    8,114,84,0,0,0,218,8,102,114,111,109,108,105,115,116,
+    114,178,0,0,0,114,183,0,0,0,218,1,120,90,5,119,
+    104,101,114,101,90,9,102,114,111,109,95,110,97,109,101,90,
+    3,101,120,99,114,10,0,0,0,114,10,0,0,0,114,11,
+    0,0,0,114,186,0,0,0,229,3,0,0,115,42,0,0,
+    0,0,10,10,1,10,1,10,1,4,1,12,2,4,1,28,
+    2,8,1,16,1,10,1,10,1,10,1,14,1,2,1,14,
+    1,16,4,10,1,18,1,2,1,24,1,114,186,0,0,0,
+    99,1,0,0,0,0,0,0,0,3,0,0,0,6,0,0,
+    0,67,0,0,0,115,146,0,0,0,124,0,106,0,100,1,
+    131,1,125,1,124,0,106,0,100,2,131,1,125,2,124,1,
+    100,3,107,9,114,82,124,2,100,3,107,9,114,78,124,1,
+    124,2,106,1,107,3,114,78,116,2,106,3,100,4,124,1,
+    155,2,100,5,124,2,106,1,155,2,100,6,157,5,116,4,
+    100,7,100,8,141,3,1,0,124,1,83,0,124,2,100,3,
+    107,9,114,96,124,2,106,1,83,0,116,2,106,3,100,9,
+    116,4,100,7,100,8,141,3,1,0,124,0,100,10,25,0,
+    125,1,100,11,124,0,107,7,114,142,124,1,106,5,100,12,
+    131,1,100,13,25,0,125,1,124,1,83,0,41,14,122,167,
+    67,97,108,99,117,108,97,116,101,32,119,104,97,116,32,95,
+    95,112,97,99,107,97,103,101,95,95,32,115,104,111,117,108,
+    100,32,98,101,46,10,10,32,32,32,32,95,95,112,97,99,
+    107,97,103,101,95,95,32,105,115,32,110,111,116,32,103,117,
+    97,114,97,110,116,101,101,100,32,116,111,32,98,101,32,100,
+    101,102,105,110,101,100,32,111,114,32,99,111,117,108,100,32,
+    98,101,32,115,101,116,32,116,111,32,78,111,110,101,10,32,
+    32,32,32,116,111,32,114,101,112,114,101,115,101,110,116,32,
+    116,104,97,116,32,105,116,115,32,112,114,111,112,101,114,32,
+    118,97,108,117,101,32,105,115,32,117,110,107,110,111,119,110,
+    46,10,10,32,32,32,32,114,131,0,0,0,114,90,0,0,
+    0,78,122,32,95,95,112,97,99,107,97,103,101,95,95,32,
+    33,61,32,95,95,115,112,101,99,95,95,46,112,97,114,101,
+    110,116,32,40,122,4,32,33,61,32,250,1,41,233,3,0,
+    0,0,41,1,90,10,115,116,97,99,107,108,101,118,101,108,
+    122,89,99,97,110,39,116,32,114,101,115,111,108,118,101,32,
+    112,97,99,107,97,103,101,32,102,114,111,109,32,95,95,115,
+    112,101,99,95,95,32,111,114,32,95,95,112,97,99,107,97,
+    103,101,95,95,44,32,102,97,108,108,105,110,103,32,98,97,
+    99,107,32,111,110,32,95,95,110,97,109,101,95,95,32,97,
+    110,100,32,95,95,112,97,116,104,95,95,114,1,0,0,0,
+    114,128,0,0,0,114,118,0,0,0,114,19,0,0,0,41,
+    6,114,30,0,0,0,114,120,0,0,0,114,167,0,0,0,
+    114,168,0,0,0,114,169,0,0,0,114,119,0,0,0,41,
+    3,218,7,103,108,111,98,97,108,115,114,161,0,0,0,114,
+    83,0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,
+    0,0,0,218,17,95,99,97,108,99,95,95,95,112,97,99,
+    107,97,103,101,95,95,11,4,0,0,115,30,0,0,0,0,
+    7,10,1,10,1,8,1,18,1,22,2,10,1,4,1,8,
+    1,6,2,6,2,10,1,8,1,8,1,14,1,114,192,0,
+    0,0,99,5,0,0,0,0,0,0,0,9,0,0,0,5,
+    0,0,0,67,0,0,0,115,166,0,0,0,124,4,100,1,
+    107,2,114,18,116,0,124,0,131,1,125,5,110,36,124,1,
+    100,2,107,9,114,30,124,1,110,2,105,0,125,6,116,1,
+    124,6,131,1,125,7,116,0,124,0,124,7,124,4,131,3,
+    125,5,124,3,115,150,124,4,100,1,107,2,114,84,116,0,
+    124,0,106,2,100,3,131,1,100,1,25,0,131,1,83,0,
+    124,0,115,92,124,5,83,0,116,3,124,0,131,1,116,3,
+    124,0,106,2,100,3,131,1,100,1,25,0,131,1,24,0,
+    125,8,116,4,106,5,124,5,106,6,100,2,116,3,124,5,
+    106,6,131,1,124,8,24,0,133,2,25,0,25,0,83,0,
+    110,12,116,7,124,5,124,3,116,0,131,3,83,0,100,2,
+    83,0,41,4,97,215,1,0,0,73,109,112,111,114,116,32,
+    97,32,109,111,100,117,108,101,46,10,10,32,32,32,32,84,
+    104,101,32,39,103,108,111,98,97,108,115,39,32,97,114,103,
+    117,109,101,110,116,32,105,115,32,117,115,101,100,32,116,111,
+    32,105,110,102,101,114,32,119,104,101,114,101,32,116,104,101,
+    32,105,109,112,111,114,116,32,105,115,32,111,99,99,117,114,
+    114,105,110,103,32,102,114,111,109,10,32,32,32,32,116,111,
+    32,104,97,110,100,108,101,32,114,101,108,97,116,105,118,101,
+    32,105,109,112,111,114,116,115,46,32,84,104,101,32,39,108,
+    111,99,97,108,115,39,32,97,114,103,117,109,101,110,116,32,
+    105,115,32,105,103,110,111,114,101,100,46,32,84,104,101,10,
+    32,32,32,32,39,102,114,111,109,108,105,115,116,39,32,97,
+    114,103,117,109,101,110,116,32,115,112,101,99,105,102,105,101,
+    115,32,119,104,97,116,32,115,104,111,117,108,100,32,101,120,
+    105,115,116,32,97,115,32,97,116,116,114,105,98,117,116,101,
+    115,32,111,110,32,116,104,101,32,109,111,100,117,108,101,10,
+    32,32,32,32,98,101,105,110,103,32,105,109,112,111,114,116,
+    101,100,32,40,101,46,103,46,32,96,96,102,114,111,109,32,
+    109,111,100,117,108,101,32,105,109,112,111,114,116,32,60,102,
+    114,111,109,108,105,115,116,62,96,96,41,46,32,32,84,104,
+    101,32,39,108,101,118,101,108,39,10,32,32,32,32,97,114,
+    103,117,109,101,110,116,32,114,101,112,114,101,115,101,110,116,
+    115,32,116,104,101,32,112,97,99,107,97,103,101,32,108,111,
+    99,97,116,105,111,110,32,116,111,32,105,109,112,111,114,116,
+    32,102,114,111,109,32,105,110,32,97,32,114,101,108,97,116,
+    105,118,101,10,32,32,32,32,105,109,112,111,114,116,32,40,
+    101,46,103,46,32,96,96,102,114,111,109,32,46,46,112,107,
+    103,32,105,109,112,111,114,116,32,109,111,100,96,96,32,119,
+    111,117,108,100,32,104,97,118,101,32,97,32,39,108,101,118,
+    101,108,39,32,111,102,32,50,41,46,10,10,32,32,32,32,
+    114,19,0,0,0,78,114,118,0,0,0,41,8,114,182,0,
+    0,0,114,192,0,0,0,218,9,112,97,114,116,105,116,105,
+    111,110,114,159,0,0,0,114,14,0,0,0,114,80,0,0,
+    0,114,1,0,0,0,114,186,0,0,0,41,9,114,15,0,
+    0,0,114,191,0,0,0,218,6,108,111,99,97,108,115,114,
+    187,0,0,0,114,162,0,0,0,114,84,0,0,0,90,8,
+    103,108,111,98,97,108,115,95,114,161,0,0,0,90,7,99,
+    117,116,95,111,102,102,114,10,0,0,0,114,10,0,0,0,
+    114,11,0,0,0,218,10,95,95,105,109,112,111,114,116,95,
+    95,38,4,0,0,115,26,0,0,0,0,11,8,1,10,2,
+    16,1,8,1,12,1,4,3,8,1,18,1,4,1,4,4,
+    26,3,32,2,114,195,0,0,0,99,1,0,0,0,0,0,
+    0,0,2,0,0,0,3,0,0,0,67,0,0,0,115,38,
+    0,0,0,116,0,106,1,124,0,131,1,125,1,124,1,100,
+    0,107,8,114,30,116,2,100,1,124,0,23,0,131,1,130,
+    1,116,3,124,1,131,1,83,0,41,2,78,122,25,110,111,
+    32,98,117,105,108,116,45,105,110,32,109,111,100,117,108,101,
+    32,110,97,109,101,100,32,41,4,114,142,0,0,0,114,146,
+    0,0,0,114,71,0,0,0,114,141,0,0,0,41,2,114,
+    15,0,0,0,114,83,0,0,0,114,10,0,0,0,114,10,
+    0,0,0,114,11,0,0,0,218,18,95,98,117,105,108,116,
+    105,110,95,102,114,111,109,95,110,97,109,101,73,4,0,0,
+    115,8,0,0,0,0,1,10,1,8,1,12,1,114,196,0,
+    0,0,99,2,0,0,0,0,0,0,0,12,0,0,0,12,
+    0,0,0,67,0,0,0,115,244,0,0,0,124,1,97,0,
+    124,0,97,1,116,2,116,1,131,1,125,2,120,86,116,1,
+    106,3,106,4,131,0,68,0,93,72,92,2,125,3,125,4,
+    116,5,124,4,124,2,131,2,114,28,124,3,116,1,106,6,
+    107,6,114,62,116,7,125,5,110,18,116,0,106,8,124,3,
+    131,1,114,28,116,9,125,5,110,2,113,28,116,10,124,4,
+    124,5,131,2,125,6,116,11,124,6,124,4,131,2,1,0,
+    113,28,87,0,116,1,106,3,116,12,25,0,125,7,120,54,
+    100,5,68,0,93,46,125,8,124,8,116,1,106,3,107,7,
+    114,144,116,13,124,8,131,1,125,9,110,10,116,1,106,3,
+    124,8,25,0,125,9,116,14,124,7,124,8,124,9,131,3,
+    1,0,113,120,87,0,121,12,116,13,100,2,131,1,125,10,
+    87,0,110,24,4,0,116,15,107,10,114,206,1,0,1,0,
+    1,0,100,3,125,10,89,0,110,2,88,0,116,14,124,7,
+    100,2,124,10,131,3,1,0,116,13,100,4,131,1,125,11,
+    116,14,124,7,100,4,124,11,131,3,1,0,100,3,83,0,
+    41,6,122,250,83,101,116,117,112,32,105,109,112,111,114,116,
+    108,105,98,32,98,121,32,105,109,112,111,114,116,105,110,103,
+    32,110,101,101,100,101,100,32,98,117,105,108,116,45,105,110,
+    32,109,111,100,117,108,101,115,32,97,110,100,32,105,110,106,
+    101,99,116,105,110,103,32,116,104,101,109,10,32,32,32,32,
+    105,110,116,111,32,116,104,101,32,103,108,111,98,97,108,32,
+    110,97,109,101,115,112,97,99,101,46,10,10,32,32,32,32,
+    65,115,32,115,121,115,32,105,115,32,110,101,101,100,101,100,
+    32,102,111,114,32,115,121,115,46,109,111,100,117,108,101,115,
+    32,97,99,99,101,115,115,32,97,110,100,32,95,105,109,112,
+    32,105,115,32,110,101,101,100,101,100,32,116,111,32,108,111,
+    97,100,32,98,117,105,108,116,45,105,110,10,32,32,32,32,
+    109,111,100,117,108,101,115,44,32,116,104,111,115,101,32,116,
+    119,111,32,109,111,100,117,108,101,115,32,109,117,115,116,32,
+    98,101,32,101,120,112,108,105,99,105,116,108,121,32,112,97,
+    115,115,101,100,32,105,110,46,10,10,32,32,32,32,114,167,
+    0,0,0,114,20,0,0,0,78,114,56,0,0,0,41,1,
+    114,167,0,0,0,41,16,114,49,0,0,0,114,14,0,0,
+    0,114,13,0,0,0,114,80,0,0,0,218,5,105,116,101,
+    109,115,114,171,0,0,0,114,70,0,0,0,114,142,0,0,
+    0,114,76,0,0,0,114,152,0,0,0,114,129,0,0,0,
+    114,134,0,0,0,114,1,0,0,0,114,196,0,0,0,114,
+    5,0,0,0,114,71,0,0,0,41,12,218,10,115,121,115,
+    95,109,111,100,117,108,101,218,11,95,105,109,112,95,109,111,
+    100,117,108,101,90,11,109,111,100,117,108,101,95,116,121,112,
+    101,114,15,0,0,0,114,84,0,0,0,114,94,0,0,0,
+    114,83,0,0,0,90,11,115,101,108,102,95,109,111,100,117,
+    108,101,90,12,98,117,105,108,116,105,110,95,110,97,109,101,
+    90,14,98,117,105,108,116,105,110,95,109,111,100,117,108,101,
+    90,13,116,104,114,101,97,100,95,109,111,100,117,108,101,90,
+    14,119,101,97,107,114,101,102,95,109,111,100,117,108,101,114,
+    10,0,0,0,114,10,0,0,0,114,11,0,0,0,218,6,
+    95,115,101,116,117,112,80,4,0,0,115,50,0,0,0,0,
+    9,4,1,4,3,8,1,20,1,10,1,10,1,6,1,10,
+    1,6,2,2,1,10,1,14,3,10,1,10,1,10,1,10,
+    2,10,1,16,3,2,1,12,1,14,2,10,1,12,3,8,
+    1,114,200,0,0,0,99,2,0,0,0,0,0,0,0,3,
+    0,0,0,3,0,0,0,67,0,0,0,115,66,0,0,0,
+    116,0,124,0,124,1,131,2,1,0,116,1,106,2,106,3,
+    116,4,131,1,1,0,116,1,106,2,106,3,116,5,131,1,
+    1,0,100,1,100,2,108,6,125,2,124,2,97,7,124,2,
+    106,8,116,1,106,9,116,10,25,0,131,1,1,0,100,2,
+    83,0,41,3,122,50,73,110,115,116,97,108,108,32,105,109,
+    112,111,114,116,108,105,98,32,97,115,32,116,104,101,32,105,
+    109,112,108,101,109,101,110,116,97,116,105,111,110,32,111,102,
+    32,105,109,112,111,114,116,46,114,19,0,0,0,78,41,11,
+    114,200,0,0,0,114,14,0,0,0,114,166,0,0,0,114,
+    110,0,0,0,114,142,0,0,0,114,152,0,0,0,218,26,
+    95,102,114,111,122,101,110,95,105,109,112,111,114,116,108,105,
+    98,95,101,120,116,101,114,110,97,108,114,116,0,0,0,218,
+    8,95,105,110,115,116,97,108,108,114,80,0,0,0,114,1,
+    0,0,0,41,3,114,198,0,0,0,114,199,0,0,0,114,
+    201,0,0,0,114,10,0,0,0,114,10,0,0,0,114,11,
+    0,0,0,114,202,0,0,0,127,4,0,0,115,12,0,0,
+    0,0,2,10,2,12,1,12,3,8,1,4,1,114,202,0,
+    0,0,41,2,78,78,41,1,78,41,2,78,114,19,0,0,
+    0,41,50,114,3,0,0,0,114,116,0,0,0,114,12,0,
+    0,0,114,16,0,0,0,114,51,0,0,0,114,29,0,0,
+    0,114,36,0,0,0,114,17,0,0,0,114,18,0,0,0,
+    114,41,0,0,0,114,42,0,0,0,114,45,0,0,0,114,
+    57,0,0,0,114,59,0,0,0,114,69,0,0,0,114,75,
+    0,0,0,114,78,0,0,0,114,85,0,0,0,114,96,0,
+    0,0,114,97,0,0,0,114,103,0,0,0,114,79,0,0,
+    0,114,129,0,0,0,114,134,0,0,0,114,137,0,0,0,
+    114,92,0,0,0,114,81,0,0,0,114,140,0,0,0,114,
+    141,0,0,0,114,82,0,0,0,114,142,0,0,0,114,152,
+    0,0,0,114,157,0,0,0,114,163,0,0,0,114,165,0,
+    0,0,114,170,0,0,0,114,174,0,0,0,90,15,95,69,
+    82,82,95,77,83,71,95,80,82,69,70,73,88,114,176,0,
+    0,0,114,179,0,0,0,218,6,111,98,106,101,99,116,114,
+    180,0,0,0,114,181,0,0,0,114,182,0,0,0,114,186,
+    0,0,0,114,192,0,0,0,114,195,0,0,0,114,196,0,
     0,0,114,200,0,0,0,114,202,0,0,0,114,10,0,0,
-    0,114,10,0,0,0,114,11,0,0,0,114,203,0,0,0,
-    120,4,0,0,115,12,0,0,0,0,2,10,2,12,1,12,
-    3,8,1,4,1,114,203,0,0,0,41,2,78,78,41,1,
-    78,41,2,78,114,19,0,0,0,41,50,114,3,0,0,0,
-    114,116,0,0,0,114,12,0,0,0,114,16,0,0,0,114,
-    51,0,0,0,114,29,0,0,0,114,36,0,0,0,114,17,
-    0,0,0,114,18,0,0,0,114,41,0,0,0,114,42,0,
-    0,0,114,45,0,0,0,114,57,0,0,0,114,59,0,0,
-    0,114,69,0,0,0,114,75,0,0,0,114,78,0,0,0,
-    114,85,0,0,0,114,96,0,0,0,114,97,0,0,0,114,
-    103,0,0,0,114,79,0,0,0,114,129,0,0,0,114,134,
-    0,0,0,114,137,0,0,0,114,92,0,0,0,114,81,0,
-    0,0,114,140,0,0,0,114,141,0,0,0,114,82,0,0,
-    0,114,142,0,0,0,114,152,0,0,0,114,157,0,0,0,
-    114,163,0,0,0,114,165,0,0,0,114,170,0,0,0,114,
-    174,0,0,0,90,15,95,69,82,82,95,77,83,71,95,80,
-    82,69,70,73,88,114,176,0,0,0,114,179,0,0,0,218,
-    6,111,98,106,101,99,116,114,180,0,0,0,114,181,0,0,
-    0,114,182,0,0,0,114,189,0,0,0,114,193,0,0,0,
-    114,196,0,0,0,114,197,0,0,0,114,201,0,0,0,114,
-    203,0,0,0,114,10,0,0,0,114,10,0,0,0,114,10,
-    0,0,0,114,11,0,0,0,218,8,60,109,111,100,117,108,
-    101,62,8,0,0,0,115,94,0,0,0,4,17,4,2,8,
-    8,8,8,4,2,4,3,16,4,14,68,14,21,14,16,8,
-    37,8,17,8,11,14,8,8,11,8,12,8,16,8,36,14,
-    27,14,101,16,26,10,45,14,60,8,17,8,17,8,24,8,
-    29,8,23,8,15,14,73,14,77,14,13,8,9,8,9,10,
-    47,8,16,4,1,8,2,8,27,6,3,8,16,10,15,8,
-    31,8,27,18,35,8,7,8,47,
+    0,114,10,0,0,0,114,10,0,0,0,114,11,0,0,0,
+    218,8,60,109,111,100,117,108,101,62,8,0,0,0,115,94,
+    0,0,0,4,17,4,2,8,8,8,8,4,2,4,3,16,
+    4,14,68,14,21,14,16,8,37,8,17,8,11,14,8,8,
+    11,8,12,8,16,8,36,14,27,14,101,16,26,10,45,14,
+    60,8,17,8,17,8,24,8,29,8,23,8,15,14,73,14,
+    77,14,13,8,9,8,9,10,47,8,16,4,1,8,2,8,
+    27,6,3,8,16,10,15,14,38,8,27,18,35,8,7,8,
+    47,
 };
diff -urpN Python-3.6.3/Python/marshal.c Python-3.6.5/Python/marshal.c
--- Python-3.6.3/Python/marshal.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/marshal.c	2018-03-28 11:19:31.000000000 +0200
@@ -32,6 +32,9 @@
 #define TYPE_STOPITER           'S'
 #define TYPE_ELLIPSIS           '.'
 #define TYPE_INT                'i'
+/* TYPE_INT64 is not generated anymore.
+   Supported for backward compatibility only. */
+#define TYPE_INT64              'I'
 #define TYPE_FLOAT              'f'
 #define TYPE_BINARY_FLOAT       'g'
 #define TYPE_COMPLEX            'x'
@@ -777,6 +780,19 @@ r_long(RFILE *p)
     return x;
 }
 
+/* r_long64 deals with the TYPE_INT64 code. */
+static PyObject *
+r_long64(RFILE *p)
+{
+    const unsigned char *buffer = (const unsigned char *) r_string(8, p);
+    if (buffer == NULL) {
+        return NULL;
+    }
+    return _PyLong_FromByteArray(buffer, 8,
+                                 1 /* little endian */,
+                                 1 /* signed */);
+}
+
 static PyObject *
 r_PyLong(RFILE *p)
 {
@@ -976,6 +992,11 @@ r_object(RFILE *p)
         R_REF(retval);
         break;
 
+    case TYPE_INT64:
+        retval = r_long64(p);
+        R_REF(retval);
+        break;
+
     case TYPE_LONG:
         retval = r_PyLong(p);
         R_REF(retval);
diff -urpN Python-3.6.3/Python/peephole.c Python-3.6.5/Python/peephole.c
--- Python-3.6.3/Python/peephole.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/peephole.c	2018-03-28 11:19:31.000000000 +0200
@@ -167,6 +167,37 @@ copy_op_arg(_Py_CODEUNIT *codestr, Py_ss
     return maxi - 1;
 }
 
+/* Check whether a collection doesn't containing too much items (including
+   subcollections).  This protects from creating a constant that needs
+   too much time for calculating a hash.
+   "limit" is the maximal number of items.
+   Returns the negative number if the total number of items exceeds the
+   limit.  Otherwise returns the limit minus the total number of items.
+*/
+
+static Py_ssize_t
+check_complexity(PyObject *obj, Py_ssize_t limit)
+{
+    if (PyTuple_Check(obj)) {
+        Py_ssize_t i;
+        limit -= PyTuple_GET_SIZE(obj);
+        for (i = 0; limit >= 0 && i < PyTuple_GET_SIZE(obj); i++) {
+            limit = check_complexity(PyTuple_GET_ITEM(obj, i), limit);
+        }
+        return limit;
+    }
+    else if (PyFrozenSet_Check(obj)) {
+        Py_ssize_t i = 0;
+        PyObject *item;
+        Py_hash_t hash;
+        limit -= PySet_GET_SIZE(obj);
+        while (limit >= 0 && _PySet_NextEntry(obj, &i, &item, &hash)) {
+            limit = check_complexity(item, limit);
+        }
+    }
+    return limit;
+}
+
 /* Replace LOAD_CONST c1, LOAD_CONST c2 ... LOAD_CONST cn, BUILD_TUPLE n
    with    LOAD_CONST (c1, c2, ... cn).
    The consts table must still be in list form so that the
@@ -218,6 +249,101 @@ fold_tuple_on_constants(_Py_CODEUNIT *co
     return copy_op_arg(codestr, c_start, LOAD_CONST, len_consts, opcode_end);
 }
 
+#define MAX_INT_SIZE           128  /* bits */
+#define MAX_COLLECTION_SIZE     20  /* items */
+#define MAX_STR_SIZE            20  /* characters */
+#define MAX_TOTAL_ITEMS       1024  /* including nested collections */
+
+static PyObject *
+safe_multiply(PyObject *v, PyObject *w)
+{
+    if (PyLong_Check(v) && PyLong_Check(w) && Py_SIZE(v) && Py_SIZE(w)) {
+        size_t vbits = _PyLong_NumBits(v);
+        size_t wbits = _PyLong_NumBits(w);
+        if (vbits == (size_t)-1 || wbits == (size_t)-1) {
+            return NULL;
+        }
+        if (vbits + wbits > MAX_INT_SIZE) {
+            return NULL;
+        }
+    }
+    else if (PyLong_Check(v) && (PyTuple_Check(w) || PyFrozenSet_Check(w))) {
+        Py_ssize_t size = PyTuple_Check(w) ? PyTuple_GET_SIZE(w) :
+                                             PySet_GET_SIZE(w);
+        if (size) {
+            long n = PyLong_AsLong(v);
+            if (n < 0 || n > MAX_COLLECTION_SIZE / size) {
+                return NULL;
+            }
+            if (n && check_complexity(w, MAX_TOTAL_ITEMS / n) < 0) {
+                return NULL;
+            }
+        }
+    }
+    else if (PyLong_Check(v) && (PyUnicode_Check(w) || PyBytes_Check(w))) {
+        Py_ssize_t size = PyUnicode_Check(w) ? PyUnicode_GET_LENGTH(w) :
+                                               PyBytes_GET_SIZE(w);
+        if (size) {
+            long n = PyLong_AsLong(v);
+            if (n < 0 || n > MAX_STR_SIZE / size) {
+                return NULL;
+            }
+        }
+    }
+    else if (PyLong_Check(w) &&
+             (PyTuple_Check(v) || PyFrozenSet_Check(v) ||
+              PyUnicode_Check(v) || PyBytes_Check(v)))
+    {
+        return safe_multiply(w, v);
+    }
+
+    return PyNumber_Multiply(v, w);
+}
+
+static PyObject *
+safe_power(PyObject *v, PyObject *w)
+{
+    if (PyLong_Check(v) && PyLong_Check(w) && Py_SIZE(v) && Py_SIZE(w) > 0) {
+        size_t vbits = _PyLong_NumBits(v);
+        size_t wbits = PyLong_AsSize_t(w);
+        if (vbits == (size_t)-1 || wbits == (size_t)-1) {
+            return NULL;
+        }
+        if (vbits > MAX_INT_SIZE / wbits) {
+            return NULL;
+        }
+    }
+
+    return PyNumber_Power(v, w, Py_None);
+}
+
+static PyObject *
+safe_lshift(PyObject *v, PyObject *w)
+{
+    if (PyLong_Check(v) && PyLong_Check(w) && Py_SIZE(v) && Py_SIZE(w)) {
+        size_t vbits = _PyLong_NumBits(v);
+        size_t wbits = PyLong_AsSize_t(w);
+        if (vbits == (size_t)-1 || wbits == (size_t)-1) {
+            return NULL;
+        }
+        if (wbits > MAX_INT_SIZE || vbits > MAX_INT_SIZE - wbits) {
+            return NULL;
+        }
+    }
+
+    return PyNumber_Lshift(v, w);
+}
+
+static PyObject *
+safe_mod(PyObject *v, PyObject *w)
+{
+    if (PyUnicode_Check(v) || PyBytes_Check(v)) {
+        return NULL;
+    }
+
+    return PyNumber_Remainder(v, w);
+}
+
 /* Replace LOAD_CONST c1, LOAD_CONST c2, BINOP
    with    LOAD_CONST binop(c1,c2)
    The consts table must still be in list form so that the
@@ -234,7 +360,7 @@ fold_binops_on_constants(_Py_CODEUNIT *c
                          PyObject *consts, PyObject **objs)
 {
     PyObject *newconst, *v, *w;
-    Py_ssize_t len_consts, size;
+    Py_ssize_t len_consts;
 
     /* Pre-conditions */
     assert(PyList_CheckExact(consts));
@@ -245,10 +371,10 @@ fold_binops_on_constants(_Py_CODEUNIT *c
     w = objs[1];
     switch (opcode) {
         case BINARY_POWER:
-            newconst = PyNumber_Power(v, w, Py_None);
+            newconst = safe_power(v, w);
             break;
         case BINARY_MULTIPLY:
-            newconst = PyNumber_Multiply(v, w);
+            newconst = safe_multiply(v, w);
             break;
         case BINARY_TRUE_DIVIDE:
             newconst = PyNumber_TrueDivide(v, w);
@@ -257,7 +383,7 @@ fold_binops_on_constants(_Py_CODEUNIT *c
             newconst = PyNumber_FloorDivide(v, w);
             break;
         case BINARY_MODULO:
-            newconst = PyNumber_Remainder(v, w);
+            newconst = safe_mod(v, w);
             break;
         case BINARY_ADD:
             newconst = PyNumber_Add(v, w);
@@ -269,7 +395,7 @@ fold_binops_on_constants(_Py_CODEUNIT *c
             newconst = PyObject_GetItem(v, w);
             break;
         case BINARY_LSHIFT:
-            newconst = PyNumber_Lshift(v, w);
+            newconst = safe_lshift(v, w);
             break;
         case BINARY_RSHIFT:
             newconst = PyNumber_Rshift(v, w);
@@ -296,16 +422,6 @@ fold_binops_on_constants(_Py_CODEUNIT *c
         }
         return -1;
     }
-    size = PyObject_Size(newconst);
-    if (size == -1) {
-        if (PyErr_ExceptionMatches(PyExc_KeyboardInterrupt)) {
-            return -1;
-        }
-        PyErr_Clear();
-    } else if (size > 20) {
-        Py_DECREF(newconst);
-        return -1;
-    }
 
     /* Append folded constant into consts table */
     if (PyList_Append(consts, newconst)) {
diff -urpN Python-3.6.3/Python/pylifecycle.c Python-3.6.5/Python/pylifecycle.c
--- Python-3.6.3/Python/pylifecycle.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/pylifecycle.c	2018-03-28 11:19:31.000000000 +0200
@@ -330,10 +330,6 @@ _Py_InitializeEx_Private(int install_sig
         Py_OptimizeFlag = add_flag(Py_OptimizeFlag, p);
     if ((p = Py_GETENV("PYTHONDONTWRITEBYTECODE")) && *p != '\0')
         Py_DontWriteBytecodeFlag = add_flag(Py_DontWriteBytecodeFlag, p);
-    /* The variable is only tested for existence here; _PyRandom_Init will
-       check its value further. */
-    if ((p = Py_GETENV("PYTHONHASHSEED")) && *p != '\0')
-        Py_HashRandomizationFlag = add_flag(Py_HashRandomizationFlag, p);
 #ifdef MS_WINDOWS
     if ((p = Py_GETENV("PYTHONLEGACYWINDOWSFSENCODING")) && *p != '\0')
         Py_LegacyWindowsFSEncodingFlag = add_flag(Py_LegacyWindowsFSEncodingFlag, p);
diff -urpN Python-3.6.3/Python/pystate.c Python-3.6.5/Python/pystate.c
--- Python-3.6.3/Python/pystate.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/pystate.c	2018-03-28 11:19:31.000000000 +0200
@@ -865,6 +865,8 @@ PyGILState_Ensure(void)
 {
     int current;
     PyThreadState *tcur;
+    int need_init_threads = 0;
+
     /* Note that we do not auto-init Python here - apart from
        potential races with 2 threads auto-initializing, pep-311
        spells out other issues.  Embedders are expected to have
@@ -873,10 +875,7 @@ PyGILState_Ensure(void)
     assert(autoInterpreterState); /* Py_Initialize() hasn't been called! */
     tcur = (PyThreadState *)PyThread_get_key_value(autoTLSkey);
     if (tcur == NULL) {
-        /* At startup, Python has no concrete GIL. If PyGILState_Ensure() is
-           called from a new thread for the first time, we need the create the
-           GIL. */
-        PyEval_InitThreads();
+        need_init_threads = 1;
 
         /* Create a new thread state for this thread */
         tcur = PyThreadState_New(autoInterpreterState);
@@ -887,16 +886,28 @@ PyGILState_Ensure(void)
         tcur->gilstate_counter = 0;
         current = 0; /* new thread state is never current */
     }
-    else
+    else {
         current = PyThreadState_IsCurrent(tcur);
-    if (current == 0)
+    }
+
+    if (current == 0) {
         PyEval_RestoreThread(tcur);
+    }
+
     /* Update our counter in the thread-state - no need for locks:
        - tcur will remain valid as we hold the GIL.
        - the counter is safe as we are the only thread "allowed"
          to modify this value
     */
     ++tcur->gilstate_counter;
+
+    if (need_init_threads) {
+        /* At startup, Python has no concrete GIL. If PyGILState_Ensure() is
+           called from a new thread for the first time, we need the create the
+           GIL. */
+        PyEval_InitThreads();
+    }
+
     return current ? PyGILState_LOCKED : PyGILState_UNLOCKED;
 }
 
diff -urpN Python-3.6.3/Python/pythonrun.c Python-3.6.5/Python/pythonrun.c
--- Python-3.6.3/Python/pythonrun.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/pythonrun.c	2018-03-28 11:19:31.000000000 +0200
@@ -61,6 +61,7 @@ static PyObject *run_pyc_file(FILE *, co
                               PyCompilerFlags *);
 static void err_input(perrdetail *);
 static void err_free(perrdetail *);
+static int PyRun_InteractiveOneObjectEx(FILE *, PyObject *, PyCompilerFlags *);
 
 /* Parse input from a file and execute it */
 
@@ -86,6 +87,7 @@ PyRun_InteractiveLoopFlags(FILE *fp, con
     PyObject *filename, *v;
     int ret, err;
     PyCompilerFlags local_flags;
+    int nomem_count = 0;
 
     filename = PyUnicode_DecodeFSDefault(filename_str);
     if (filename == NULL) {
@@ -107,19 +109,29 @@ PyRun_InteractiveLoopFlags(FILE *fp, con
         _PySys_SetObjectId(&PyId_ps2, v = PyUnicode_FromString("... "));
         Py_XDECREF(v);
     }
-    err = -1;
-    for (;;) {
-        ret = PyRun_InteractiveOneObject(fp, filename, flags);
+    err = 0;
+    do {
+        ret = PyRun_InteractiveOneObjectEx(fp, filename, flags);
+        if (ret == -1 && PyErr_Occurred()) {
+            /* Prevent an endless loop after multiple consecutive MemoryErrors
+             * while still allowing an interactive command to fail with a
+             * MemoryError. */
+            if (PyErr_ExceptionMatches(PyExc_MemoryError)) {
+                if (++nomem_count > 16) {
+                    PyErr_Clear();
+                    err = -1;
+                    break;
+                }
+            } else {
+                nomem_count = 0;
+            }
+            PyErr_Print();
+            flush_io();
+        } else {
+            nomem_count = 0;
+        }
         _PY_DEBUG_PRINT_TOTAL_REFS();
-        if (ret == E_EOF) {
-            err = 0;
-            break;
-        }
-        /*
-        if (ret == E_NOMEM)
-            break;
-        */
-    }
+    } while (ret != E_EOF);
     Py_DECREF(filename);
     return err;
 }
@@ -148,8 +160,11 @@ static int PARSER_FLAGS(PyCompilerFlags
                    PyPARSE_WITH_IS_KEYWORD : 0)) : 0)
 #endif
 
-int
-PyRun_InteractiveOneObject(FILE *fp, PyObject *filename, PyCompilerFlags *flags)
+/* A PyRun_InteractiveOneObject() auxiliary function that does not print the
+ * error on failure. */
+static int
+PyRun_InteractiveOneObjectEx(FILE *fp, PyObject *filename,
+                             PyCompilerFlags *flags)
 {
     PyObject *m, *d, *v, *w, *oenc = NULL, *mod_name;
     mod_ty mod;
@@ -161,7 +176,6 @@ PyRun_InteractiveOneObject(FILE *fp, PyO
 
     mod_name = _PyUnicode_FromId(&PyId___main__); /* borrowed */
     if (mod_name == NULL) {
-        PyErr_Print();
         return -1;
     }
 
@@ -221,7 +235,6 @@ PyRun_InteractiveOneObject(FILE *fp, PyO
             PyErr_Clear();
             return E_EOF;
         }
-        PyErr_Print();
         return -1;
     }
     m = PyImport_AddModuleObject(mod_name);
@@ -233,8 +246,6 @@ PyRun_InteractiveOneObject(FILE *fp, PyO
     v = run_mod(mod, filename, d, d, flags, arena);
     PyArena_Free(arena);
     if (v == NULL) {
-        PyErr_Print();
-        flush_io();
         return -1;
     }
     Py_DECREF(v);
@@ -243,6 +254,19 @@ PyRun_InteractiveOneObject(FILE *fp, PyO
 }
 
 int
+PyRun_InteractiveOneObject(FILE *fp, PyObject *filename, PyCompilerFlags *flags)
+{
+    int res;
+
+    res = PyRun_InteractiveOneObjectEx(fp, filename, flags);
+    if (res == -1) {
+        PyErr_Print();
+        flush_io();
+    }
+    return res;
+}
+
+int
 PyRun_InteractiveOneFlags(FILE *fp, const char *filename_str, PyCompilerFlags *flags)
 {
     PyObject *filename;
@@ -624,9 +648,15 @@ PyErr_PrintEx(int set_sys_last_vars)
         return;
     /* Now we know v != NULL too */
     if (set_sys_last_vars) {
-        _PySys_SetObjectId(&PyId_last_type, exception);
-        _PySys_SetObjectId(&PyId_last_value, v);
-        _PySys_SetObjectId(&PyId_last_traceback, tb);
+        if (_PySys_SetObjectId(&PyId_last_type, exception) < 0) {
+            PyErr_Clear();
+        }
+        if (_PySys_SetObjectId(&PyId_last_value, v) < 0) {
+            PyErr_Clear();
+        }
+        if (_PySys_SetObjectId(&PyId_last_traceback, tb) < 0) {
+            PyErr_Clear();
+        }
     }
     hook = _PySys_GetObjectId(&PyId_excepthook);
     if (hook) {
@@ -811,13 +841,21 @@ print_exception_recursive(PyObject *f, P
 
     if (seen != NULL) {
         /* Exception chaining */
-        if (PySet_Add(seen, value) == -1)
+        PyObject *value_id = PyLong_FromVoidPtr(value);
+        if (value_id == NULL || PySet_Add(seen, value_id) == -1)
             PyErr_Clear();
         else if (PyExceptionInstance_Check(value)) {
+            PyObject *check_id = NULL;
             cause = PyException_GetCause(value);
             context = PyException_GetContext(value);
             if (cause) {
-                res = PySet_Contains(seen, cause);
+                check_id = PyLong_FromVoidPtr(cause);
+                if (check_id == NULL) {
+                    res = -1;
+                } else {
+                    res = PySet_Contains(seen, check_id);
+                    Py_DECREF(check_id);
+                }
                 if (res == -1)
                     PyErr_Clear();
                 if (res == 0) {
@@ -829,7 +867,13 @@ print_exception_recursive(PyObject *f, P
             }
             else if (context &&
                 !((PyBaseExceptionObject *)value)->suppress_context) {
-                res = PySet_Contains(seen, context);
+                check_id = PyLong_FromVoidPtr(context);
+                if (check_id == NULL) {
+                    res = -1;
+                } else {
+                    res = PySet_Contains(seen, check_id);
+                    Py_DECREF(check_id);
+                }
                 if (res == -1)
                     PyErr_Clear();
                 if (res == 0) {
@@ -842,6 +886,7 @@ print_exception_recursive(PyObject *f, P
             Py_XDECREF(context);
             Py_XDECREF(cause);
         }
+        Py_XDECREF(value_id);
     }
     print_exception(f, value);
     if (err != 0)
diff -urpN Python-3.6.3/Python/pytime.c Python-3.6.5/Python/pytime.c
--- Python-3.6.3/Python/pytime.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/pytime.c	2018-03-28 11:19:31.000000000 +0200
@@ -84,12 +84,19 @@ _PyTime_Round(double x, _PyTime_round_t
     volatile double d;
 
     d = x;
-    if (round == _PyTime_ROUND_HALF_EVEN)
+    if (round == _PyTime_ROUND_HALF_EVEN){
         d = _PyTime_RoundHalfEven(d);
-    else if (round == _PyTime_ROUND_CEILING)
+    }
+    else if (round == _PyTime_ROUND_CEILING){
         d = ceil(d);
-    else
+    }
+    else if (round == _PyTime_ROUND_FLOOR) {
         d = floor(d);
+    }
+    else {
+        assert(round == _PyTime_ROUND_UP);
+        d = (d >= 0.0) ? ceil(d) : floor(d);
+    }
     return d;
 }
 
@@ -395,16 +402,29 @@ _PyTime_Divide(const _PyTime_t t, const
         return x;
     }
     else if (round == _PyTime_ROUND_CEILING) {
-        if (t >= 0)
+        if (t >= 0){
             return (t + k - 1) / k;
-        else
+        }
+        else{
             return t / k;
+        }
     }
-    else {
-        if (t >= 0)
+    else if (round == _PyTime_ROUND_FLOOR){
+        if (t >= 0) {
             return t / k;
-        else
+        }
+        else{
+            return (t - (k - 1)) / k;
+        }
+    }
+    else {
+        assert(round == _PyTime_ROUND_UP);
+        if (t >= 0) {
+            return (t + k - 1) / k;
+        }
+        else {
             return (t - (k - 1)) / k;
+        }
     }
 }
 
diff -urpN Python-3.6.3/Python/random.c Python-3.6.5/Python/random.c
--- Python-3.6.3/Python/random.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/random.c	2018-03-28 11:19:31.000000000 +0200
@@ -565,9 +565,11 @@ _PyRandom_Init(void)
         if (seed == 0) {
             /* disable the randomized hash */
             memset(secret, 0, secret_size);
+            Py_HashRandomizationFlag = 0;
         }
         else {
             lcg_urandom(seed, secret, secret_size);
+            Py_HashRandomizationFlag = 1;
         }
     }
     else {
@@ -582,6 +584,7 @@ _PyRandom_Init(void)
         if (res < 0) {
             Py_FatalError("failed to get random numbers to initialize Python");
         }
+        Py_HashRandomizationFlag = 1;
     }
 }
 
diff -urpN Python-3.6.3/Python/thread_nt.h Python-3.6.5/Python/thread_nt.h
--- Python-3.6.3/Python/thread_nt.h	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/thread_nt.h	2018-03-28 11:19:31.000000000 +0200
@@ -235,7 +235,7 @@ PyThread_exit_thread(void)
 }
 
 /*
- * Lock support. It has too be implemented as semaphores.
+ * Lock support. It has to be implemented as semaphores.
  * I [Dag] tried to implement it with mutex but I could find a way to
  * tell whether a thread already own the lock or not.
  */
diff -urpN Python-3.6.3/Python/traceback.c Python-3.6.5/Python/traceback.c
--- Python-3.6.3/Python/traceback.c	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Python/traceback.c	2018-03-28 11:19:31.000000000 +0200
@@ -414,56 +414,67 @@ tb_displayline(PyObject *f, PyObject *fi
 }
 
 static int
+tb_print_line_repeated(PyObject *f, long cnt)
+{
+    int err;
+    PyObject *line = PyUnicode_FromFormat(
+            "  [Previous line repeated %ld more times]\n", cnt-3);
+    if (line == NULL) {
+        return -1;
+    }
+    err = PyFile_WriteObject(line, f, Py_PRINT_RAW);
+    Py_DECREF(line);
+    return err;
+}
+
+static int
 tb_printinternal(PyTracebackObject *tb, PyObject *f, long limit)
 {
     int err = 0;
-    long depth = 0;
+    Py_ssize_t depth = 0;
     PyObject *last_file = NULL;
     int last_line = -1;
     PyObject *last_name = NULL;
     long cnt = 0;
-    PyObject *line;
     PyTracebackObject *tb1 = tb;
     while (tb1 != NULL) {
         depth++;
         tb1 = tb1->tb_next;
     }
+    while (tb != NULL && depth > limit) {
+        depth--;
+        tb = tb->tb_next;
+    }
     while (tb != NULL && err == 0) {
-        if (depth <= limit) {
-            if (last_file != NULL &&
-                tb->tb_frame->f_code->co_filename == last_file &&
-                last_line != -1 && tb->tb_lineno == last_line &&
-                last_name != NULL &&
-                tb->tb_frame->f_code->co_name == last_name) {
-                    cnt++;
-                } else {
-                    if (cnt > 3) {
-                        line = PyUnicode_FromFormat(
-                        "  [Previous line repeated %d more times]\n", cnt-3);
-                        err = PyFile_WriteObject(line, f, Py_PRINT_RAW);
-                        Py_DECREF(line);
-                    }
-                    last_file = tb->tb_frame->f_code->co_filename;
-                    last_line = tb->tb_lineno;
-                    last_name = tb->tb_frame->f_code->co_name;
-                    cnt = 0;
-                }
-            if (cnt < 3)
-                err = tb_displayline(f,
-                                     tb->tb_frame->f_code->co_filename,
-                                     tb->tb_lineno,
-                                     tb->tb_frame->f_code->co_name);
+        if (last_file != NULL &&
+            tb->tb_frame->f_code->co_filename == last_file &&
+            last_line != -1 && tb->tb_lineno == last_line &&
+            last_name != NULL && tb->tb_frame->f_code->co_name == last_name)
+        {
+            cnt++;
+        }
+        else {
+            if (cnt > 3) {
+                err = tb_print_line_repeated(f, cnt);
+            }
+            last_file = tb->tb_frame->f_code->co_filename;
+            last_line = tb->tb_lineno;
+            last_name = tb->tb_frame->f_code->co_name;
+            cnt = 0;
+        }
+        if (err == 0 && cnt < 3) {
+            err = tb_displayline(f,
+                                 tb->tb_frame->f_code->co_filename,
+                                 tb->tb_lineno,
+                                 tb->tb_frame->f_code->co_name);
+            if (err == 0) {
+                err = PyErr_CheckSignals();
+            }
         }
-        depth--;
         tb = tb->tb_next;
-        if (err == 0)
-            err = PyErr_CheckSignals();
     }
-    if (cnt > 3) {
-        line = PyUnicode_FromFormat(
-        "  [Previous line repeated %d more times]\n", cnt-3);
-        err = PyFile_WriteObject(line, f, Py_PRINT_RAW);
-        Py_DECREF(line);
+    if (err == 0 && cnt > 3) {
+        err = tb_print_line_repeated(f, cnt);
     }
     return err;
 }
@@ -484,26 +495,15 @@ PyTraceBack_Print(PyObject *v, PyObject
         return -1;
     }
     limitv = PySys_GetObject("tracebacklimit");
-    if (limitv) {
-        PyObject *exc_type, *exc_value, *exc_tb;
-
-        PyErr_Fetch(&exc_type, &exc_value, &exc_tb);
-        limit = PyLong_AsLong(limitv);
-        if (limit == -1 && PyErr_Occurred()) {
-            if (PyErr_ExceptionMatches(PyExc_OverflowError)) {
-                limit = PyTraceBack_LIMIT;
-            }
-            else {
-                Py_XDECREF(exc_type);
-                Py_XDECREF(exc_value);
-                Py_XDECREF(exc_tb);
-                return 0;
-            }
+    if (limitv && PyLong_Check(limitv)) {
+        int overflow;
+        limit = PyLong_AsLongAndOverflow(limitv, &overflow);
+        if (overflow > 0) {
+            limit = LONG_MAX;
         }
         else if (limit <= 0) {
-            limit = PyTraceBack_LIMIT;
+            return 0;
         }
-        PyErr_Restore(exc_type, exc_value, exc_tb);
     }
     err = PyFile_WriteString("Traceback (most recent call last):\n", f);
     if (!err)
diff -urpN Python-3.6.3/README.rst Python-3.6.5/README.rst
--- Python-3.6.3/README.rst	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/README.rst	2018-03-28 11:19:31.000000000 +0200
@@ -1,4 +1,4 @@
-This is Python version 3.6.3
+This is Python version 3.6.5
 ============================
 
 .. image:: https://travis-ci.org/python/cpython.svg?branch=3.6
@@ -14,7 +14,7 @@ This is Python version 3.6.3
    :target: https://codecov.io/gh/python/cpython
 
 Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
-2012, 2013, 2014, 2015, 2016, 2017 Python Software Foundation.  All rights
+2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation.  All rights
 reserved.
 
 See the end of this file for further copyright and license information.
@@ -232,7 +232,7 @@ Copyright and License Information
 ---------------------------------
 
 Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
-2012, 2013, 2014, 2015, 2016, 2017 Python Software Foundation.  All rights
+2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation.  All rights
 reserved.
 
 Copyright (c) 2000 BeOpen.com.  All rights reserved.
diff -urpN Python-3.6.3/Tools/clinic/clinic.py Python-3.6.5/Tools/clinic/clinic.py
--- Python-3.6.3/Tools/clinic/clinic.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/clinic/clinic.py	2018-03-28 11:19:31.000000000 +0200
@@ -928,8 +928,8 @@ class CLanguage(Language):
             cpp_if = "#if " + conditional
             cpp_endif = "#endif /* " + conditional + " */"
 
-            if methoddef_define and f.name not in clinic.ifndef_symbols:
-                clinic.ifndef_symbols.add(f.name)
+            if methoddef_define and f.full_name not in clinic.ifndef_symbols:
+                clinic.ifndef_symbols.add(f.full_name)
                 methoddef_ifndef = normalize_snippet("""
                     #ifndef {methoddef_name}
                         #define {methoddef_name}
diff -urpN Python-3.6.3/Tools/demo/redemo.py Python-3.6.5/Tools/demo/redemo.py
--- Python-3.6.3/Tools/demo/redemo.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/demo/redemo.py	2018-03-28 11:19:31.000000000 +0200
@@ -75,7 +75,6 @@ class ReDemo:
         self.boxes = []
         self.vars = []
         for name in ('IGNORECASE',
-                     'LOCALE',
                      'MULTILINE',
                      'DOTALL',
                      'VERBOSE'):
@@ -83,7 +82,7 @@ class ReDemo:
                 frame = Frame(self.master)
                 frame.pack(fill=X)
                 self.frames.append(frame)
-            val = getattr(re, name)
+            val = getattr(re, name).value
             var = IntVar()
             box = Checkbutton(frame,
                     variable=var, text=name,
diff -urpN Python-3.6.3/Tools/i18n/pygettext.py Python-3.6.5/Tools/i18n/pygettext.py
--- Python-3.6.3/Tools/i18n/pygettext.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/i18n/pygettext.py	2018-03-28 11:19:31.000000000 +0200
@@ -320,6 +320,7 @@ class TokenEater:
         self.__lineno = -1
         self.__freshmodule = 1
         self.__curfile = None
+        self.__enclosurecount = 0
 
     def __call__(self, ttype, tstring, stup, etup, line):
         # dispatch
@@ -340,7 +341,7 @@ class TokenEater:
                 elif ttype not in (tokenize.COMMENT, tokenize.NL):
                     self.__freshmodule = 0
                 return
-            # class docstring?
+            # class or func/method docstring?
             if ttype == tokenize.NAME and tstring in ('class', 'def'):
                 self.__state = self.__suiteseen
                 return
@@ -348,9 +349,15 @@ class TokenEater:
             self.__state = self.__keywordseen
 
     def __suiteseen(self, ttype, tstring, lineno):
-        # ignore anything until we see the colon
-        if ttype == tokenize.OP and tstring == ':':
-            self.__state = self.__suitedocstring
+        # skip over any enclosure pairs until we see the colon
+        if ttype == tokenize.OP:
+            if tstring == ':' and self.__enclosurecount == 0:
+                # we see a colon and we're not in an enclosure: end of def
+                self.__state = self.__suitedocstring
+            elif tstring in '([{':
+                self.__enclosurecount += 1
+            elif tstring in ')]}':
+                self.__enclosurecount -= 1
 
     def __suitedocstring(self, ttype, tstring, lineno):
         # ignore any intervening noise
diff -urpN Python-3.6.3/Tools/msi/bundle/bootstrap/pythonba.vcxproj Python-3.6.5/Tools/msi/bundle/bootstrap/pythonba.vcxproj
--- Python-3.6.3/Tools/msi/bundle/bootstrap/pythonba.vcxproj	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/msi/bundle/bootstrap/pythonba.vcxproj	2018-03-28 11:19:31.000000000 +0200
@@ -26,12 +26,14 @@
     <ProjectGuid>{7A09B132-B3EE-499B-A700-A4B2157FEA3D}</ProjectGuid>
     <TargetName>PythonBA</TargetName>
   </PropertyGroup>
-  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
   <Import Project="..\..\wix.props" />
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
   <PropertyGroup Label="Configuration">
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>Unicode</CharacterSet>
-    <IntDir>$(Py_IntDir)\$(Configuration)_$(Platform)_Setup\Bootstrap\</IntDir>
+    <Py_IntDir Condition="'$(Py_IntDir)' == ''">$(PySourcePath)PCbuild\obj\</Py_IntDir>
+    <IntDir>$(Py_IntDir)\$(MajorVersionNumber)$(MinorVersionNumber)$(ArchName)_$(Configuration)\msi_$(ProjectName)\</IntDir>
+    <IntDir>$(IntDir.Replace(`\\`, `\`))</IntDir>
     <OutDir>$(IntDir)</OutDir>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
diff -urpN Python-3.6.3/Tools/msi/bundle/bundle.wxs Python-3.6.5/Tools/msi/bundle/bundle.wxs
--- Python-3.6.3/Tools/msi/bundle/bundle.wxs	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/msi/bundle/bundle.wxs	2018-03-28 11:19:31.000000000 +0200
@@ -8,7 +8,6 @@
           IconSourceFile="..\..\..\PC\icons\setup.ico"
           Manufacturer="!(loc.Manufacturer)"
           AboutUrl="http://www.python.org/"
-          DisableModify="button"
           Compressed="no"
           dep:ProviderKey="CPython-$(var.MajorVersionNumber).$(var.MinorVersionNumber)$(var.PyArchExt)$(var.PyTestExt)">
     <BootstrapperApplication Id="PythonBA" SourceFile="$(var.BootstrapApp)">
diff -urpN Python-3.6.3/Tools/msi/lib/lib_files.wxs Python-3.6.5/Tools/msi/lib/lib_files.wxs
--- Python-3.6.3/Tools/msi/lib/lib_files.wxs	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/msi/lib/lib_files.wxs	2018-03-28 11:19:31.000000000 +0200
@@ -1,6 +1,6 @@
 ﻿<?xml version="1.0" encoding="UTF-8"?>
 <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
-    <?define exts=pyexpat;select;unicodedata;winsound;_bz2;_elementtree;_socket;_ssl;_msi;_ctypes;_hashlib;_multiprocessing;_lzma;_decimal;_overlapped;_sqlite3;_asyncio ?>
+    <?define exts=pyexpat;select;unicodedata;winsound;_bz2;_elementtree;_socket;_ssl;_msi;_ctypes;_hashlib;_multiprocessing;_lzma;_decimal;_overlapped;_sqlite3;_asyncio;_distutils_findvs ?>
     <Fragment>
         <ComponentGroup Id="lib_extensions">
             <?foreach ext in $(var.exts)?>
diff -urpN Python-3.6.3/Tools/msi/msi.props Python-3.6.5/Tools/msi/msi.props
--- Python-3.6.3/Tools/msi/msi.props	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/msi/msi.props	2018-03-28 11:19:31.000000000 +0200
@@ -48,7 +48,7 @@
     </ItemGroup>
 
     <PropertyGroup>
-        <IntermediateOutputPath>$(Py_IntDir)\$(Configuration)_$(Platform)_Setup\$(OutputName)</IntermediateOutputPath>
+        <IntermediateOutputPath>$(Py_IntDir)\$(MajorVersionNumber)$(MinorVersionNumber)$(ArchName)_$(Configuration)\msi_$(OutputName)</IntermediateOutputPath>
         <IntermediateOutputPath Condition="'$(OutputSuffix)' != ''">$(IntermediateOutputPath)_$(OutputSuffix)</IntermediateOutputPath>
         <OutputPath Condition="'$(OutputPath)' == ''">$(BuildPath)</OutputPath>
         <OutputPath Condition="!HasTrailingSlash($(OutputPath))">$(OutputPath)\</OutputPath>
diff -urpN Python-3.6.3/Tools/msi/purge.py Python-3.6.5/Tools/msi/purge.py
--- Python-3.6.3/Tools/msi/purge.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/msi/purge.py	2018-03-28 11:19:31.000000000 +0200
@@ -25,7 +25,7 @@ except LookupError:
     sys.exit(1)
 
 URL = "https://www.python.org/ftp/python/{}/".format(m.group(1))
-
+REL = m.group(2) or ''
 
 FILES = [
     "core.msi",
@@ -64,7 +64,7 @@ PATHS = [
     "python-{}-webinstall.exe".format(m.group(0)),
     "python-{}-amd64.exe".format(m.group(0)),
     "python-{}-amd64-webinstall.exe".format(m.group(0)),
-] + ["win32{}/{}".format(m.group(2), f) for f in FILES] + ["amd64{}/{}".format(m.group(2), f) for f in FILES]
+] + ["win32{}/{}".format(REL, f) for f in FILES] + ["amd64{}/{}".format(REL, f) for f in FILES]
 
 print('Purged:')
 for n in PATHS:
diff -urpN Python-3.6.3/Tools/msi/uploadrelease.bat Python-3.6.5/Tools/msi/uploadrelease.bat
--- Python-3.6.3/Tools/msi/uploadrelease.bat	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/msi/uploadrelease.bat	2018-03-28 11:19:31.000000000 +0200
@@ -8,8 +8,9 @@ set HOST=
 set USER=
 set TARGET=
 set DRYRUN=false
+set NOUPLOAD=
 set NOGPG=
-set PURGE_OPTION=/p:Purge=true
+set NOPURGE=
 set NOTEST=
 
 :CheckOpts
@@ -21,8 +22,9 @@ if "%1" EQU "--user" (set USER=%~2) && s
 if "%1" EQU "-t" (set TARGET=%~2) && shift && shift && goto CheckOpts
 if "%1" EQU "--target" (set TARGET=%~2) && shift && shift && goto CheckOpts
 if "%1" EQU "--dry-run" (set DRYRUN=true) && shift && goto CheckOpts
+if "%1" EQU "--skip-upload" (set NOUPLOAD=true) && shift && goto CheckOpts
 if "%1" EQU "--skip-gpg" (set NOGPG=true) && shift && goto CheckOpts
-if "%1" EQU "--skip-purge" (set PURGE_OPTION=) && shift && goto CheckOpts
+if "%1" EQU "--skip-purge" (set NOPURGE=true) && shift && goto CheckOpts
 if "%1" EQU "--skip-test" (set NOTEST=true) && shift && goto CheckOpts
 if "%1" EQU "-T" (set NOTEST=true) && shift && goto CheckOpts
 if "%1" NEQ "" echo Unexpected argument "%1" & exit /B 1
@@ -52,17 +54,43 @@ if defined NOGPG (
 call "%PCBUILD%find_msbuild.bat" %MSBUILD%
 if ERRORLEVEL 1 (echo Cannot locate MSBuild.exe on PATH or as MSBUILD variable & exit /b 2)
 pushd "%D%"
-%MSBUILD% /v:m /nologo uploadrelease.proj /t:Upload /p:Platform=x86 %PURGE_OPTION%
-%MSBUILD% /v:m /nologo uploadrelease.proj /t:Upload /p:Platform=x64 /p:IncludeDoc=false %PURGE_OPTION%
+if not defined NOUPLOAD (
+    %MSBUILD% /v:m /nologo uploadrelease.proj /t:Upload /p:Platform=x86
+    if errorlevel 1 goto :failed
+    %MSBUILD% /v:m /nologo uploadrelease.proj /t:Upload /p:Platform=x64 /p:IncludeDoc=false
+    if errorlevel 1 goto :failed
+)
+if not defined NOPURGE (
+    %MSBUILD% /v:m /nologo uploadrelease.proj /t:Purge
+)
 if not defined NOTEST (
-    %MSBUILD% /v:m /nologo uploadrelease.proj /t:Test /p:Platform=x86
-    %MSBUILD% /v:m /nologo uploadrelease.proj /t:Test /p:Platform=x64
+    call :test x86
+    if errorlevel 1 goto :failed
+    call :test x64
+    if errorlevel 1 goto :failed
 )
 %MSBUILD% /v:m /nologo uploadrelease.proj /t:ShowHashes /p:Platform=x86
+if errorlevel 1 goto :failed
 %MSBUILD% /v:m /nologo uploadrelease.proj /t:ShowHashes /p:Platform=x64 /p:IncludeDoc=false
+if errorlevel 1 goto :failed
+
 popd
 exit /B 0
 
+:test
+%MSBUILD% /v:m /nologo uploadrelease.proj /t:Test /p:Platform=%1
+if errorlevel 1 (
+    echo Test failed - purging and retrying
+    %MSBUILD% /v:m /nologo uploadrelease.proj /t:Purge
+    if errorlevel 1 exit /B
+    %MSBUILD% /v:m /nologo uploadrelease.proj /t:Test /p:Platform=%1
+)
+exit /B
+
+:failed
+popd
+exit /B
+
 :Help
 echo uploadrelease.bat --host HOST --user USERNAME [--target TARGET] [--dry-run] [-h]
 echo.
diff -urpN Python-3.6.3/Tools/msi/uploadrelease.proj Python-3.6.5/Tools/msi/uploadrelease.proj
--- Python-3.6.3/Tools/msi/uploadrelease.proj	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/msi/uploadrelease.proj	2018-03-28 11:19:31.000000000 +0200
@@ -10,7 +10,6 @@
         <IncludeDoc Condition="'$(IncludeDoc)' == ''">true</IncludeDoc>
         <BuildForRelease Condition="'$(BuildForRelease)' == ''">true</BuildForRelease>
         <DryRun Condition="'$(DryRun)' == ''">false</DryRun>
-        <Purge Condition="'$(Purge)' == ''">false</Purge>
     </PropertyGroup>
 
     <Import Project="msi.props" />
@@ -43,7 +42,8 @@
     <Target Name="_RunGpg" Condition="'$(GPG)' != ''" Inputs="@(File)" Outputs="$(IntermediateOutputPath)\gpg\%(FileName)%(Extension).asc">
         <MakeDir Directories="$(IntermediateOutputPath)gpg" />
         <Delete Files="$(IntermediateOutputPath)\gpg\%(File.FileName)%(File.Extension).asc" Condition="Exists('$(IntermediateOutputPath)\gpg\%(File.FileName)%(File.Extension).asc')" />
-        <Exec Command="&quot;$(GPG)&quot; -ba -o &quot;$(IntermediateOutputPath)\gpg\%(File.FileName)%(File.Extension).asc&quot; &quot;%(File.FullPath)&quot;" />
+        <Exec Command="&quot;$(GPG)&quot; -ba -o &quot;$(IntermediateOutputPath)\gpg\%(File.FileName)%(File.Extension).asc&quot; &quot;%(File.FullPath)&quot;"
+              IgnoreExitCode="false" />
         <ItemGroup>
             <File Include="$(IntermediateOutputPath)\gpg\%(File.FileName)%(File.Extension).asc">
                 <CopyTo>%(File.CopyTo)</CopyTo>
@@ -52,23 +52,15 @@
     </Target>
     
     <Target Name="_Upload" Condition="!$(DryRun)">
-        <Exec Command="&quot;$(PLINK)&quot; $(User)@$(Host) mkdir %(File.CopyTo) ^&amp;^&amp; chgrp downloads %(File.CopyTo) ^&amp;^&amp; chmod g-w,o+rx %(File.CopyTo)
-&quot;$(PSCP)&quot; @(File,' ') $(User)@$(Host):%(File.CopyTo)
-&quot;$(PLINK)&quot; $(User)@$(Host) chgrp downloads %(File.CopyTo)/*; chmod g-w,o+r %(File.CopyTo)/*
-" />
+        <Exec Command="&quot;$(PLINK)&quot; $(User)@$(Host) mkdir %(File.CopyTo) ^&amp;^&amp; chgrp downloads %(File.CopyTo) ^&amp;^&amp; chmod g-w,o+rx %(File.CopyTo)" ContinueOnError="true" />
+        <Exec Command="&quot;$(PSCP)&quot; @(File,' ') $(User)@$(Host):%(File.CopyTo)" />
+        <Exec Command="&quot;$(PLINK)&quot; $(User)@$(Host) chgrp downloads %(File.CopyTo)/*; chmod g-w,o+r %(File.CopyTo)/*" ContinueOnError="true" />
     </Target>
-    
+
     <Target Name="_PrintNames" Condition="$(DryRun)">
-        <Exec Command="echo &quot;$(PLINK)&quot; $(User)@$(Host) mkdir %(File.CopyTo) ^&amp;^&amp; chgrp downloads %(File.CopyTo) ^&amp;^&amp; chmod g-w,o+rx %(File.CopyTo)
-echo &quot;$(PSCP)&quot; @(File,' ') $(User)@$(Host):%(File.CopyTo)
-echo &quot;$(PLINK)&quot; $(User)@$(Host) chgrp downloads %(File.CopyTo)/*; chmod g-w,o+r %(File.CopyTo)/*
-echo.
-echo." />
-    </Target>
-    
-    <Target Name="_Purge" Condition="$(Purge) and !$(DryRun)">
-        <Error Condition="!Exists('$(PythonExe)')" Text="No Python executable available at $(PythonExe)" />
-        <Exec Command="&quot;$(PythonExe)&quot; purge.py $(PythonVersion)" />
+        <Exec Command="echo &quot;$(PLINK)&quot; $(User)@$(Host) mkdir %(File.CopyTo) ^&amp;^&amp; chgrp downloads %(File.CopyTo) ^&amp;^&amp; chmod g-w,o+rx %(File.CopyTo)" />
+        <Exec Command="echo &quot;$(PSCP)&quot; @(File,' ') $(User)@$(Host):%(File.CopyTo)" />
+        <Exec Command="echo &quot;$(PLINK)&quot; $(User)@$(Host) chgrp downloads %(File.CopyTo)/*; chmod g-w,o+r %(File.CopyTo)/*" />
     </Target>
     
     <Target Name="_TestLayout">
@@ -82,6 +74,7 @@ echo." />
                 <LogFile>$(OutputPath)\%(Filename)_layoutlog\%(Filename).log</LogFile>
             </WebInstaller>
         </ItemGroup>
+        <Error Text="Could not find installer" Condition="@(WebInstaller) == ''" />
         <RemoveDir Directories="%(WebInstaller.SourceDir)" Condition="Exists('%(WebInstaller.SourceDir)')" />
         <RemoveDir Directories="%(WebInstaller.LayoutDir)" Condition="Exists('%(WebInstaller.LayoutDir)')" />
         <RemoveDir Directories="%(WebInstaller.LogDir)" Condition="Exists('%(WebInstaller.LogDir)')" />
@@ -95,14 +88,22 @@ echo." />
         <Message Text="Successfully downloaded %(WebInstaller.Filename)%(WebInstaller.Extension) layout" Importance="high" />
     </Target>
     
-    <Target Name="Upload" DependsOnTargets="_ValidateProperties;_RunGpg;_PrintNames;_Upload;_Purge" />
+    <Target Name="Upload" DependsOnTargets="_ValidateProperties;_RunGpg;_PrintNames;_Upload" />
     <Target Name="Test" DependsOnTargets="_TestLayout" />
     
+    <Target Name="Purge">
+        <Error Condition="!Exists('$(PythonExe)')" Text="No Python executable available at $(PythonExe)" />
+        <Exec Command="echo &quot;$(PythonExe)&quot; purge.py $(PythonVersion)" Condition="$(DryRun)" />
+        <Exec Command="&quot;$(PythonExe)&quot; purge.py $(PythonVersion)" Condition="!$(DryRun)" />
+        <Message Text="Purged uploaded files" Importance="high" />
+    </Target>
+    
     <Target Name="ShowHashes">
         <ItemGroup>
             <UserFiles Include="@(File)" Condition="'%(File.CopyTo)' == '$(EXETarget)'" />
         </ItemGroup>
         
+        <Error Text="No files generated" Condition="@(UserFiles) == ''" />
         <Exec Command="&quot;$(PythonExe)&quot; generate_md5.py @(UserFiles->'&quot;%(FullPath)&quot;',' ')" />
     </Target>
     
diff -urpN Python-3.6.3/Tools/scripts/treesync.py Python-3.6.5/Tools/scripts/treesync.py
--- Python-3.6.3/Tools/scripts/treesync.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/scripts/treesync.py	2018-03-28 11:19:31.000000000 +0200
@@ -33,7 +33,7 @@ write_slave = "ask"
 write_master = "ask"
 
 def main():
-    global always_no, always_yes
+    global default_answer, always_no, always_yes, create_files
     global create_directories, write_master, write_slave
     opts, args = getopt.getopt(sys.argv[1:], "nym:s:d:f:a:")
     for o, a in opts:
diff -urpN Python-3.6.3/Tools/scripts/update_file.py Python-3.6.5/Tools/scripts/update_file.py
--- Python-3.6.3/Tools/scripts/update_file.py	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.5/Tools/scripts/update_file.py	2018-03-28 11:19:31.000000000 +0200
@@ -0,0 +1,28 @@
+"""
+A script that replaces an old file with a new one, only if the contents
+actually changed.  If not, the new file is simply deleted.
+
+This avoids wholesale rebuilds when a code (re)generation phase does not
+actually change the in-tree generated code.
+"""
+
+import os
+import sys
+
+
+def main(old_path, new_path):
+    with open(old_path, 'rb') as f:
+        old_contents = f.read()
+    with open(new_path, 'rb') as f:
+        new_contents = f.read()
+    if old_contents != new_contents:
+        os.replace(new_path, old_path)
+    else:
+        os.unlink(new_path)
+
+
+if __name__ == '__main__':
+    if len(sys.argv) != 3:
+        print("Usage: %s <path to be updated> <path with new contents>" % (sys.argv[0],))
+        sys.exit(1)
+    main(sys.argv[1], sys.argv[2])
diff -urpN Python-3.6.3/Tools/ssl/multissltests.py Python-3.6.5/Tools/ssl/multissltests.py
--- Python-3.6.3/Tools/ssl/multissltests.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/Tools/ssl/multissltests.py	2018-03-28 11:19:31.000000000 +0200
@@ -41,15 +41,14 @@ import tarfile
 log = logging.getLogger("multissl")
 
 OPENSSL_OLD_VERSIONS = [
-     "0.9.8zc",
      "0.9.8zh",
      "1.0.1u",
 ]
 
 OPENSSL_RECENT_VERSIONS = [
      "1.0.2",
-     "1.0.2l",
-     "1.1.0f",
+     "1.0.2m",
+     "1.1.0g",
 ]
 
 LIBRESSL_OLD_VERSIONS = [
diff -urpN Python-3.6.3/configure Python-3.6.5/configure
--- Python-3.6.3/configure	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/configure	2018-03-28 11:19:31.000000000 +0200
@@ -1491,7 +1491,8 @@ Optional Packages:
   --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
   --with-universal-archs=ARCH
                           select architectures for universal build ("32-bit",
-                          "64-bit", "3-way", "intel", "intel-32", or "all")
+                          "64-bit", "3-way", "intel", "intel-32", "intel-64",
+                          or "all")
   --with-framework-name=FRAMEWORK
                           specify an alternate name of the framework built
                           with --enable-framework
@@ -3536,14 +3537,14 @@ then
 		for as_dir in $PATH
 		do
 			IFS=$as_save_IFS
-			if test -x $as_dir/gcc; then
+			if test -x "${as_dir}/gcc"; then
 				if test -z "${found_gcc}"; then
-					found_gcc=$as_dir/gcc
+					found_gcc="${as_dir}/gcc"
 				fi
 			fi
-			if test -x $as_dir/clang; then
+			if test -x "${as_dir}/clang"; then
 				if test -z "${found_clang}"; then
-					found_clang=$as_dir/clang
+					found_clang="${as_dir}/clang"
 				fi
 			fi
 		done
@@ -7345,6 +7346,11 @@ $as_echo "$CC" >&6; }
                LIPO_32BIT_FLAGS=""
                ARCH_RUN_32BIT=""
                ;;
+            intel-64)
+               UNIVERSAL_ARCH_FLAGS="-arch x86_64"
+               LIPO_32BIT_FLAGS=""
+               ARCH_RUN_32BIT="true"
+               ;;
             3-way)
                UNIVERSAL_ARCH_FLAGS="-arch i386 -arch ppc -arch x86_64"
                LIPO_32BIT_FLAGS="-extract ppc7400 -extract i386"
@@ -7355,11 +7361,14 @@ $as_echo "$CC" >&6; }
                ;;
             esac
 
-            CFLAGS="${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${CFLAGS}"
-            LDFLAGS="${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${LDFLAGS}"
             if test "${UNIVERSALSDK}" != "/"
             then
+                CFLAGS="${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${CFLAGS}"
+                LDFLAGS="${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${LDFLAGS}"
                 CPPFLAGS="-isysroot ${UNIVERSALSDK} ${CPPFLAGS}"
+            else
+                CFLAGS="${UNIVERSAL_ARCH_FLAGS} ${CFLAGS}"
+                LDFLAGS="${UNIVERSAL_ARCH_FLAGS} ${LDFLAGS}"
             fi
         fi
 
@@ -7809,7 +7818,7 @@ $as_echo "#define STDC_HEADERS 1" >>conf
 
 fi
 
-for ac_header in asm/types.h conio.h direct.h dlfcn.h errno.h \
+for ac_header in asm/types.h crypt.h conio.h direct.h dlfcn.h errno.h \
 fcntl.h grp.h \
 ieeefp.h io.h langinfo.h libintl.h process.h pthread.h \
 sched.h shadow.h signal.h stropts.h termios.h \
@@ -15897,6 +15906,10 @@ $as_echo "#define MVWDELCH_IS_EXPRESSION
 
 fi
 
+# Issue #25720: ncurses has introduced the NCURSES_OPAQUE symbol making opaque
+# structs since version 5.7.  If the macro is defined as zero before including
+# [n]curses.h, ncurses will expose fields of the structs regardless of the
+# configuration.
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking whether WINDOW has _flags" >&5
 $as_echo_n "checking whether WINDOW has _flags... " >&6; }
 if ${ac_cv_window_has_flags+:} false; then :
@@ -15904,7 +15917,10 @@ if ${ac_cv_window_has_flags+:} false; th
 else
   cat confdefs.h - <<_ACEOF >conftest.$ac_ext
 /* end confdefs.h.  */
-#include <curses.h>
+
+  #define NCURSES_OPAQUE 0
+  #include <curses.h>
+
 int
 main ()
 {
@@ -15935,6 +15951,36 @@ $as_echo "#define WINDOW_HAS_FLAGS 1" >>
 
 fi
 
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for is_pad" >&5
+$as_echo_n "checking for is_pad... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <curses.h>
+int
+main ()
+{
+
+#ifndef is_pad
+void *x=is_pad
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+$as_echo "#define HAVE_CURSES_IS_PAD 1" >>confdefs.h
+
+   { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for is_term_resized" >&5
 $as_echo_n "checking for is_term_resized... " >&6; }
 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
@@ -16012,6 +16058,216 @@ $as_echo "no" >&6; }
 
 fi
 rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for immedok" >&5
+$as_echo_n "checking for immedok... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <curses.h>
+int
+main ()
+{
+
+#ifndef immedok
+void *x=immedok
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+$as_echo "#define HAVE_CURSES_IMMEDOK 1" >>confdefs.h
+
+   { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for syncok" >&5
+$as_echo_n "checking for syncok... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <curses.h>
+int
+main ()
+{
+
+#ifndef syncok
+void *x=syncok
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+$as_echo "#define HAVE_CURSES_SYNCOK 1" >>confdefs.h
+
+   { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for wchgat" >&5
+$as_echo_n "checking for wchgat... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <curses.h>
+int
+main ()
+{
+
+#ifndef wchgat
+void *x=wchgat
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+$as_echo "#define HAVE_CURSES_WCHGAT 1" >>confdefs.h
+
+   { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for filter" >&5
+$as_echo_n "checking for filter... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <curses.h>
+int
+main ()
+{
+
+#ifndef filter
+void *x=filter
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+$as_echo "#define HAVE_CURSES_FILTER 1" >>confdefs.h
+
+   { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for has_key" >&5
+$as_echo_n "checking for has_key... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <curses.h>
+int
+main ()
+{
+
+#ifndef has_key
+void *x=has_key
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+$as_echo "#define HAVE_CURSES_HAS_KEY 1" >>confdefs.h
+
+   { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for typeahead" >&5
+$as_echo_n "checking for typeahead... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <curses.h>
+int
+main ()
+{
+
+#ifndef typeahead
+void *x=typeahead
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+$as_echo "#define HAVE_CURSES_TYPEAHEAD 1" >>confdefs.h
+
+   { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for use_env" >&5
+$as_echo_n "checking for use_env... " >&6; }
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <curses.h>
+int
+main ()
+{
+
+#ifndef use_env
+void *x=use_env
+#endif
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+
+$as_echo "#define HAVE_CURSES_USE_ENV 1" >>confdefs.h
+
+   { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
+
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
 # last curses configure check
 CPPFLAGS=$ac_save_cppflags
 
@@ -16306,7 +16562,7 @@ do
 done
 
 
-SRCDIRS="Parser Grammar Objects Python Modules Mac Programs"
+SRCDIRS="Parser Objects Python Modules Programs"
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for build directories" >&5
 $as_echo_n "checking for build directories... " >&6; }
 for dir in $SRCDIRS; do
diff -urpN Python-3.6.3/configure.ac Python-3.6.5/configure.ac
--- Python-3.6.3/configure.ac	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/configure.ac	2018-03-28 11:19:31.000000000 +0200
@@ -214,7 +214,7 @@ fi
 AC_SUBST(LIPO_32BIT_FLAGS)
 AC_MSG_CHECKING(for --with-universal-archs)
 AC_ARG_WITH(universal-archs,
-    AS_HELP_STRING([--with-universal-archs=ARCH], [select architectures for universal build ("32-bit", "64-bit", "3-way", "intel", "intel-32", or "all")]),
+    AS_HELP_STRING([--with-universal-archs=ARCH], [select architectures for universal build ("32-bit", "64-bit", "3-way", "intel", "intel-32", "intel-64", or "all")]),
 [
 	UNIVERSAL_ARCHS="$withval"
 ],
@@ -642,14 +642,14 @@ then
 		for as_dir in $PATH
 		do
 			IFS=$as_save_IFS
-			if test -x $as_dir/gcc; then
+			if test -x "${as_dir}/gcc"; then
 				if test -z "${found_gcc}"; then
-					found_gcc=$as_dir/gcc
+					found_gcc="${as_dir}/gcc"
 				fi
 			fi
-			if test -x $as_dir/clang; then
+			if test -x "${as_dir}/clang"; then
 				if test -z "${found_clang}"; then
-					found_clang=$as_dir/clang
+					found_clang="${as_dir}/clang"
 				fi
 			fi
 		done
@@ -1782,6 +1782,11 @@ yes)
                LIPO_32BIT_FLAGS=""
                ARCH_RUN_32BIT=""
                ;;
+            intel-64)
+               UNIVERSAL_ARCH_FLAGS="-arch x86_64"
+               LIPO_32BIT_FLAGS=""
+               ARCH_RUN_32BIT="true"
+               ;;
             3-way)
                UNIVERSAL_ARCH_FLAGS="-arch i386 -arch ppc -arch x86_64"
                LIPO_32BIT_FLAGS="-extract ppc7400 -extract i386"
@@ -1792,11 +1797,14 @@ yes)
                ;;
             esac
 
-            CFLAGS="${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${CFLAGS}"
-            LDFLAGS="${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${LDFLAGS}"
             if test "${UNIVERSALSDK}" != "/"
             then
+                CFLAGS="${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${CFLAGS}"
+                LDFLAGS="${UNIVERSAL_ARCH_FLAGS} -isysroot ${UNIVERSALSDK} ${LDFLAGS}"
                 CPPFLAGS="-isysroot ${UNIVERSALSDK} ${CPPFLAGS}"
+            else
+                CFLAGS="${UNIVERSAL_ARCH_FLAGS} ${CFLAGS}"
+                LDFLAGS="${UNIVERSAL_ARCH_FLAGS} ${LDFLAGS}"
             fi
         fi
 
@@ -2055,7 +2063,7 @@ dnl AC_MSG_RESULT($cpp_type)
 
 # checks for header files
 AC_HEADER_STDC
-AC_CHECK_HEADERS(asm/types.h conio.h direct.h dlfcn.h errno.h \
+AC_CHECK_HEADERS(asm/types.h crypt.h conio.h direct.h dlfcn.h errno.h \
 fcntl.h grp.h \
 ieeefp.h io.h langinfo.h libintl.h process.h pthread.h \
 sched.h shadow.h signal.h stropts.h termios.h \
@@ -4993,9 +5001,16 @@ then
   [Define if mvwdelch in curses.h is an expression.])
 fi
 
+# Issue #25720: ncurses has introduced the NCURSES_OPAQUE symbol making opaque
+# structs since version 5.7.  If the macro is defined as zero before including
+# [n]curses.h, ncurses will expose fields of the structs regardless of the
+# configuration.
 AC_MSG_CHECKING(whether WINDOW has _flags)
 AC_CACHE_VAL(ac_cv_window_has_flags,
-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+  #define NCURSES_OPAQUE 0
+  #include <curses.h>
+]], [[
   WINDOW *w;
   w->_flags = 0;
 ]])],
@@ -5010,6 +5025,17 @@ then
   [Define if WINDOW in curses.h offers a field _flags.])
 fi
 
+AC_MSG_CHECKING(for is_pad)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[
+#ifndef is_pad
+void *x=is_pad
+#endif
+]])],
+  [AC_DEFINE(HAVE_CURSES_IS_PAD, 1, Define if you have the 'is_pad' function or macro.)
+   AC_MSG_RESULT(yes)],
+  [AC_MSG_RESULT(no)]
+)
+
 AC_MSG_CHECKING(for is_term_resized)
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[void *x=is_term_resized]])],
   [AC_DEFINE(HAVE_CURSES_IS_TERM_RESIZED, 1, Define if you have the 'is_term_resized' function.)
@@ -5030,6 +5056,83 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#in
    AC_MSG_RESULT(yes)],
   [AC_MSG_RESULT(no)]
 )
+
+AC_MSG_CHECKING(for immedok)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[
+#ifndef immedok
+void *x=immedok
+#endif
+]])],
+  [AC_DEFINE(HAVE_CURSES_IMMEDOK, 1, Define if you have the 'immedok' function.)
+   AC_MSG_RESULT(yes)],
+  [AC_MSG_RESULT(no)]
+)
+
+AC_MSG_CHECKING(for syncok)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[
+#ifndef syncok
+void *x=syncok
+#endif
+]])],
+  [AC_DEFINE(HAVE_CURSES_SYNCOK, 1, Define if you have the 'syncok' function.)
+   AC_MSG_RESULT(yes)],
+  [AC_MSG_RESULT(no)]
+)
+
+AC_MSG_CHECKING(for wchgat)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[
+#ifndef wchgat
+void *x=wchgat
+#endif
+]])],
+  [AC_DEFINE(HAVE_CURSES_WCHGAT, 1, Define if you have the 'wchgat' function.)
+   AC_MSG_RESULT(yes)],
+  [AC_MSG_RESULT(no)]
+)
+
+AC_MSG_CHECKING(for filter)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[
+#ifndef filter
+void *x=filter
+#endif
+]])],
+  [AC_DEFINE(HAVE_CURSES_FILTER, 1, Define if you have the 'filter' function.)
+   AC_MSG_RESULT(yes)],
+  [AC_MSG_RESULT(no)]
+)
+
+AC_MSG_CHECKING(for has_key)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[
+#ifndef has_key
+void *x=has_key
+#endif
+]])],
+  [AC_DEFINE(HAVE_CURSES_HAS_KEY, 1, Define if you have the 'has_key' function.)
+   AC_MSG_RESULT(yes)],
+  [AC_MSG_RESULT(no)]
+)
+
+AC_MSG_CHECKING(for typeahead)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[
+#ifndef typeahead
+void *x=typeahead
+#endif
+]])],
+  [AC_DEFINE(HAVE_CURSES_TYPEAHEAD, 1, Define if you have the 'typeahead' function.)
+   AC_MSG_RESULT(yes)],
+  [AC_MSG_RESULT(no)]
+)
+
+AC_MSG_CHECKING(for use_env)
+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <curses.h>]], [[
+#ifndef use_env
+void *x=use_env
+#endif
+]])],
+  [AC_DEFINE(HAVE_CURSES_USE_ENV, 1, Define if you have the 'use_env' function.)
+   AC_MSG_RESULT(yes)],
+  [AC_MSG_RESULT(no)]
+)
 # last curses configure check
 CPPFLAGS=$ac_save_cppflags
 
@@ -5207,7 +5310,7 @@ do
 done
 
 AC_SUBST(SRCDIRS)
-SRCDIRS="Parser Grammar Objects Python Modules Mac Programs"
+SRCDIRS="Parser Objects Python Modules Programs"
 AC_MSG_CHECKING(for build directories)
 for dir in $SRCDIRS; do
     if test ! -d $dir; then
diff -urpN Python-3.6.3/pyconfig.h.in Python-3.6.5/pyconfig.h.in
--- Python-3.6.3/pyconfig.h.in	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/pyconfig.h.in	2018-03-28 11:19:31.000000000 +0200
@@ -140,15 +140,30 @@
 /* Define to 1 if you have the `copysign' function. */
 #undef HAVE_COPYSIGN
 
+/* Define to 1 if you have the <crypt.h> header file. */
+#undef HAVE_CRYPT_H
+
 /* Define to 1 if you have the `ctermid' function. */
 #undef HAVE_CTERMID
 
 /* Define if you have the 'ctermid_r' function. */
 #undef HAVE_CTERMID_R
 
+/* Define if you have the 'filter' function. */
+#undef HAVE_CURSES_FILTER
+
 /* Define to 1 if you have the <curses.h> header file. */
 #undef HAVE_CURSES_H
 
+/* Define if you have the 'has_key' function. */
+#undef HAVE_CURSES_HAS_KEY
+
+/* Define if you have the 'immedok' function. */
+#undef HAVE_CURSES_IMMEDOK
+
+/* Define if you have the 'is_pad' function or macro. */
+#undef HAVE_CURSES_IS_PAD
+
 /* Define if you have the 'is_term_resized' function. */
 #undef HAVE_CURSES_IS_TERM_RESIZED
 
@@ -158,6 +173,18 @@
 /* Define if you have the 'resize_term' function. */
 #undef HAVE_CURSES_RESIZE_TERM
 
+/* Define if you have the 'syncok' function. */
+#undef HAVE_CURSES_SYNCOK
+
+/* Define if you have the 'typeahead' function. */
+#undef HAVE_CURSES_TYPEAHEAD
+
+/* Define if you have the 'use_env' function. */
+#undef HAVE_CURSES_USE_ENV
+
+/* Define if you have the 'wchgat' function. */
+#undef HAVE_CURSES_WCHGAT
+
 /* Define to 1 if you have the declaration of `isfinite', and to 0 if you
    don't. */
 #undef HAVE_DECL_ISFINITE
diff -urpN Python-3.6.3/setup.py Python-3.6.5/setup.py
--- Python-3.6.3/setup.py	2017-10-03 07:52:02.000000000 +0200
+++ Python-3.6.5/setup.py	2018-03-28 11:19:31.000000000 +0200
@@ -60,6 +60,31 @@ def add_dir_to_list(dirlist, dir):
             return
     dirlist.insert(0, dir)
 
+def sysroot_paths(make_vars, subdirs):
+    """Get the paths of sysroot sub-directories.
+
+    * make_vars: a sequence of names of variables of the Makefile where
+      sysroot may be set.
+    * subdirs: a sequence of names of subdirectories used as the location for
+      headers or libraries.
+    """
+
+    dirs = []
+    for var_name in make_vars:
+        var = sysconfig.get_config_var(var_name)
+        if var is not None:
+            m = re.search(r'--sysroot=([^"]\S*|"[^"]+")', var)
+            if m is not None:
+                sysroot = m.group(1).strip('"')
+                for subdir in subdirs:
+                    if os.path.isabs(subdir):
+                        subdir = subdir[1:]
+                    path = os.path.join(sysroot, subdir)
+                    if os.path.isdir(path):
+                        dirs.append(path)
+                break
+    return dirs
+
 def macosx_sdk_root():
     """
     Return the directory of the current OSX SDK,
@@ -544,18 +569,23 @@ class PyBuildExt(build_ext):
             add_dir_to_list(self.compiler.include_dirs,
                             sysconfig.get_config_var("INCLUDEDIR"))
 
+        system_lib_dirs = ['/lib64', '/usr/lib64', '/lib', '/usr/lib']
+        system_include_dirs = ['/usr/include']
         # lib_dirs and inc_dirs are used to search for files;
         # if a file is found in one of those directories, it can
         # be assumed that no additional -I,-L directives are needed.
         if not cross_compiling:
-            lib_dirs = self.compiler.library_dirs + [
-                '/lib64', '/usr/lib64',
-                '/lib', '/usr/lib',
-                ]
-            inc_dirs = self.compiler.include_dirs + ['/usr/include']
+            lib_dirs = self.compiler.library_dirs + system_lib_dirs
+            inc_dirs = self.compiler.include_dirs + system_include_dirs
         else:
-            lib_dirs = self.compiler.library_dirs[:]
-            inc_dirs = self.compiler.include_dirs[:]
+            # Add the sysroot paths. 'sysroot' is a compiler option used to
+            # set the logical path of the standard system headers and
+            # libraries.
+            lib_dirs = (self.compiler.library_dirs +
+                        sysroot_paths(('LDFLAGS', 'CC'), system_lib_dirs))
+            inc_dirs = (self.compiler.include_dirs +
+                        sysroot_paths(('CPPFLAGS', 'CFLAGS', 'CC'),
+                                      system_include_dirs))
         exts = []
         missing = []
 
@@ -1331,20 +1361,14 @@ class PyBuildExt(build_ext):
             exts.append( Extension('termios', ['termios.c']) )
             # Jeremy Hylton's rlimit interface
             exts.append( Extension('resource', ['resource.c']) )
+        else:
+            missing.extend(['resource', 'termios'])
 
-            # Sun yellow pages. Some systems have the functions in libc.
-            if (host_platform not in ['cygwin', 'qnx6'] and
-                find_file('rpcsvc/yp_prot.h', inc_dirs, []) is not None):
-                if (self.compiler.find_library_file(lib_dirs, 'nsl')):
-                    libs = ['nsl']
-                else:
-                    libs = []
-                exts.append( Extension('nis', ['nismodule.c'],
-                                       libraries = libs) )
-            else:
-                missing.append('nis')
+        nis = self._detect_nis(inc_dirs, lib_dirs)
+        if nis is not None:
+            exts.append(nis)
         else:
-            missing.extend(['nis', 'resource', 'termios'])
+            missing.append('nis')
 
         # Curses support, requiring the System V version of curses, often
         # provided by the ncurses library.
@@ -1361,7 +1385,7 @@ class PyBuildExt(build_ext):
             if host_platform == 'darwin':
                 # On OS X, there is no separate /usr/lib/libncursesw nor
                 # libpanelw.  If we are here, we found a locally-supplied
-                # version of libncursesw.  There should be also be a
+                # version of libncursesw.  There should also be a
                 # libpanelw.  _XOPEN_SOURCE defines are usually excluded
                 # for OS X but we need _XOPEN_SOURCE_EXTENDED here for
                 # ncurses wide char support
@@ -1496,6 +1520,7 @@ class PyBuildExt(build_ext):
         if '--with-system-expat' in sysconfig.get_config_var("CONFIG_ARGS"):
             expat_inc = []
             define_macros = []
+            extra_compile_args = []
             expat_lib = ['expat']
             expat_sources = []
             expat_depends = []
@@ -1507,6 +1532,7 @@ class PyBuildExt(build_ext):
                 # call XML_SetHashSalt(), expat entropy sources are not needed
                 ('XML_POOR_ENTROPY', '1'),
             ]
+            extra_compile_args = []
             expat_lib = []
             expat_sources = ['expat/xmlparse.c',
                              'expat/xmlrole.c',
@@ -1524,8 +1550,15 @@ class PyBuildExt(build_ext):
                              'expat/xmltok_impl.h'
                              ]
 
+            cc = sysconfig.get_config_var('CC').split()[0]
+            ret = os.system(
+                      '"%s" -Werror -Wimplicit-fallthrough -E -xc /dev/null >/dev/null 2>&1' % cc)
+            if ret >> 8 == 0:
+                extra_compile_args.append('-Wno-implicit-fallthrough')
+
         exts.append(Extension('pyexpat',
                               define_macros = define_macros,
+                              extra_compile_args = extra_compile_args,
                               include_dirs = expat_inc,
                               libraries = expat_lib,
                               sources = ['pyexpat.c'] + expat_sources,
@@ -2056,6 +2089,10 @@ class PyBuildExt(build_ext):
             ext.libraries.append(ffi_lib)
             self.use_system_libffi = True
 
+        if sysconfig.get_config_var('HAVE_LIBDL'):
+            # for dlopen, see bpo-32647
+            ext.libraries.append('dl')
+
     def _decimal_ext(self):
         extra_compile_args = []
         undef_macros = []
@@ -2179,6 +2216,52 @@ class PyBuildExt(build_ext):
         )
         return ext
 
+    def _detect_nis(self, inc_dirs, lib_dirs):
+        if host_platform in {'win32', 'cygwin', 'qnx6'}:
+            return None
+
+        libs = []
+        library_dirs = []
+        includes_dirs = []
+
+        # bpo-32521: glibc has deprecated Sun RPC for some time. Fedora 28
+        # moved headers and libraries to libtirpc and libnsl. The headers
+        # are in tircp and nsl sub directories.
+        rpcsvc_inc = find_file(
+            'rpcsvc/yp_prot.h', inc_dirs,
+            [os.path.join(inc_dir, 'nsl') for inc_dir in inc_dirs]
+        )
+        rpc_inc = find_file(
+            'rpc/rpc.h', inc_dirs,
+            [os.path.join(inc_dir, 'tirpc') for inc_dir in inc_dirs]
+        )
+        if rpcsvc_inc is None or rpc_inc is None:
+            # not found
+            return None
+        includes_dirs.extend(rpcsvc_inc)
+        includes_dirs.extend(rpc_inc)
+
+        if self.compiler.find_library_file(lib_dirs, 'nsl'):
+            libs.append('nsl')
+        else:
+            # libnsl-devel: check for libnsl in nsl/ subdirectory
+            nsl_dirs = [os.path.join(lib_dir, 'nsl') for lib_dir in lib_dirs]
+            libnsl = self.compiler.find_library_file(nsl_dirs, 'nsl')
+            if libnsl is not None:
+                library_dirs.append(os.path.dirname(libnsl))
+                libs.append('nsl')
+
+        if self.compiler.find_library_file(lib_dirs, 'tirpc'):
+            libs.append('tirpc')
+
+        return Extension(
+            'nis', ['nismodule.c'],
+            libraries=libs,
+            library_dirs=library_dirs,
+            include_dirs=includes_dirs
+        )
+
+
 class PyBuildInstall(install):
     # Suppress the warning about installation into the lib_dynload
     # directory, which is not in sys.path when running Python during
