diff -urpN zfs-0.7.6/META zfs-0.7.11/META
diff -urpN zfs-0.7.6/Makefile.am zfs-0.7.11/Makefile.am
diff -urpN zfs-0.7.6/Makefile.in zfs-0.7.11/Makefile.in
diff -urpN zfs-0.7.6/README.markdown zfs-0.7.11/README.markdown
diff -urpN zfs-0.7.6/aclocal.m4 zfs-0.7.11/aclocal.m4
diff -urpN zfs-0.7.6/cmd/Makefile.in zfs-0.7.11/cmd/Makefile.in
--- zfs-0.7.6/cmd/Makefile.in	2018-02-01 19:28:54.000000000 +0100
+++ zfs-0.7.11/cmd/Makefile.in	2018-09-13 19:23:30.000000000 +0200
@@ -40,10 +40,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -55,13 +56,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -83,14 +85,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -102,7 +108,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -118,9 +123,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -131,7 +136,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -216,6 +221,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -227,6 +238,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -242,6 +254,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -255,9 +269,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -276,6 +291,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
diff -urpN zfs-0.7.6/cmd/arc_summary/Makefile.in zfs-0.7.11/cmd/arc_summary/Makefile.in
--- zfs-0.7.6/cmd/arc_summary/Makefile.in	2018-02-01 19:28:54.000000000 +0100
+++ zfs-0.7.11/cmd/arc_summary/Makefile.in	2018-09-13 19:23:30.000000000 +0200
@@ -42,10 +42,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -57,13 +58,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -85,14 +87,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -104,7 +110,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -120,9 +125,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -133,7 +138,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -201,6 +206,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -212,6 +223,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -227,6 +239,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -240,9 +254,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -261,6 +276,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
diff -urpN zfs-0.7.6/cmd/arcstat/Makefile.in zfs-0.7.11/cmd/arcstat/Makefile.in
--- zfs-0.7.6/cmd/arcstat/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/arcstat/Makefile.in	2018-09-13 19:23:30.000000000 +0200
@@ -42,10 +42,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -57,13 +58,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -85,14 +87,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -104,7 +110,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -120,9 +125,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -133,7 +138,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -201,6 +206,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -212,6 +223,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -227,6 +239,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -240,9 +254,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -261,6 +276,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
diff -urpN zfs-0.7.6/cmd/arcstat/arcstat.py zfs-0.7.11/cmd/arcstat/arcstat.py
--- zfs-0.7.6/cmd/arcstat/arcstat.py	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/arcstat/arcstat.py	2018-09-13 19:21:53.000000000 +0200
@@ -280,12 +280,12 @@ def init():
                 "outfile",
                 "help",
                 "verbose",
-                "seperator",
+                "separator",
                 "columns"
             ]
         )
     except getopt.error as msg:
-        sys.stderr.write(msg)
+        sys.stderr.write("Error: %s\n" % str(msg))
         usage()
         opts = None
 
@@ -299,7 +299,7 @@ def init():
             hflag = True
         if opt in ('-v', '--verbose'):
             vflag = True
-        if opt in ('-s', '--seperator'):
+        if opt in ('-s', '--separator'):
             sep = arg
             i += 1
         if opt in ('-f', '--columns'):
diff -urpN zfs-0.7.6/cmd/dbufstat/Makefile.in zfs-0.7.11/cmd/dbufstat/Makefile.in
--- zfs-0.7.6/cmd/dbufstat/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/dbufstat/Makefile.in	2018-09-13 19:23:30.000000000 +0200
@@ -42,10 +42,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -57,13 +58,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -85,14 +87,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -104,7 +110,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -120,9 +125,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -133,7 +138,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -201,6 +206,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -212,6 +223,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -227,6 +239,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -240,9 +254,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -261,6 +276,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
diff -urpN zfs-0.7.6/cmd/dbufstat/dbufstat.py zfs-0.7.11/cmd/dbufstat/dbufstat.py
--- zfs-0.7.6/cmd/dbufstat/dbufstat.py	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/dbufstat/dbufstat.py	2018-09-13 19:21:53.000000000 +0200
@@ -474,7 +474,7 @@ def main():
                 "help",
                 "infile",
                 "outfile",
-                "seperator",
+                "separator",
                 "types",
                 "verbose",
                 "extended"
@@ -499,7 +499,7 @@ def main():
             ofile = arg
         if opt in ('-r', '--raw'):
             raw += 1
-        if opt in ('-s', '--seperator'):
+        if opt in ('-s', '--separator'):
             sep = arg
         if opt in ('-t', '--types'):
             tflag = True
diff -urpN zfs-0.7.6/cmd/fsck_zfs/Makefile.in zfs-0.7.11/cmd/fsck_zfs/Makefile.in
--- zfs-0.7.6/cmd/fsck_zfs/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/fsck_zfs/Makefile.in	2018-09-13 19:23:30.000000000 +0200
@@ -42,10 +42,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -57,13 +58,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -85,14 +87,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -104,7 +110,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -120,9 +125,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -133,7 +138,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -201,6 +206,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -212,6 +223,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -227,6 +239,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -240,9 +254,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -261,6 +276,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
diff -urpN zfs-0.7.6/cmd/mount_zfs/Makefile.in zfs-0.7.11/cmd/mount_zfs/Makefile.in
--- zfs-0.7.6/cmd/mount_zfs/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/mount_zfs/Makefile.in	2018-09-13 19:23:30.000000000 +0200
@@ -43,10 +43,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -58,13 +59,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -86,14 +88,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -105,7 +111,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -121,9 +126,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -134,7 +139,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -212,6 +217,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -223,6 +234,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -238,6 +250,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -251,9 +265,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -272,6 +287,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -408,14 +424,14 @@ DEFAULT_INCLUDES = -include ${top_buildd
 AM_LIBTOOLFLAGS = --silent
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS)
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\"
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS)
 mount_zfs_SOURCES = \
 	mount_zfs.c
 
diff -urpN zfs-0.7.6/cmd/raidz_test/Makefile.in zfs-0.7.11/cmd/raidz_test/Makefile.in
--- zfs-0.7.6/cmd/raidz_test/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/raidz_test/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -43,10 +43,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -58,13 +59,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -86,14 +88,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -105,7 +111,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -121,9 +126,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -134,7 +139,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -210,6 +215,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -221,6 +232,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -236,6 +248,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -249,9 +263,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -270,6 +285,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -401,15 +417,16 @@ DEFAULT_INCLUDES = -include ${top_buildd
 AM_LIBTOOLFLAGS = --silent
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99 $(DEBUG_STACKFLAGS) \
-	$(FRAME_LARGER_THAN)
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS) \
+	$(DEBUG_STACKFLAGS) $(FRAME_LARGER_THAN)
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\" -DDEBUG
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS) \
+	-DDEBUG
 raidz_test_SOURCES = \
 	raidz_test.h \
 	raidz_test.c \
diff -urpN zfs-0.7.6/cmd/vdev_id/Makefile.in zfs-0.7.11/cmd/vdev_id/Makefile.in
--- zfs-0.7.6/cmd/vdev_id/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/vdev_id/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -42,10 +42,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -57,13 +58,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -85,14 +87,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -104,7 +110,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -120,9 +125,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -133,7 +138,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -201,6 +206,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -212,6 +223,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -227,6 +239,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -240,9 +254,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -261,6 +276,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
diff -urpN zfs-0.7.6/cmd/zdb/Makefile.in zfs-0.7.11/cmd/zdb/Makefile.in
--- zfs-0.7.6/cmd/zdb/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/zdb/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -43,10 +43,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -58,13 +59,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -86,14 +88,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -105,7 +111,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -121,9 +126,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -134,7 +139,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -212,6 +217,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -223,6 +234,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -238,6 +250,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -251,9 +265,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -272,6 +287,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -403,14 +419,15 @@ DEFAULT_INCLUDES = -include ${top_buildd
 AM_LIBTOOLFLAGS = --silent
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS)
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\" -DDEBUG
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS) \
+	-DDEBUG
 zdb_SOURCES = \
 	zdb.c \
 	zdb_il.c
diff -urpN zfs-0.7.6/cmd/zdb/zdb.c zfs-0.7.11/cmd/zdb/zdb.c
--- zfs-0.7.6/cmd/zdb/zdb.c	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zdb/zdb.c	2018-09-13 19:21:53.000000000 +0200
@@ -2716,10 +2716,6 @@ dump_label(const char *dev)
 		exit(1);
 	}
 
-	if (ioctl(fd, BLKFLSBUF) != 0)
-		(void) printf("failed to invalidate cache '%s' : %s\n", path,
-		    strerror(errno));
-
 	if (fstat64_blk(fd, &statbuf) != 0) {
 		(void) printf("failed to stat '%s': %s\n", path,
 		    strerror(errno));
@@ -2727,6 +2723,10 @@ dump_label(const char *dev)
 		exit(1);
 	}
 
+	if (S_ISBLK(statbuf.st_mode) && ioctl(fd, BLKFLSBUF) != 0)
+		(void) printf("failed to invalidate cache '%s' : %s\n", path,
+		    strerror(errno));
+
 	avl_create(&config_tree, cksum_record_compare,
 	    sizeof (cksum_record_t), offsetof(cksum_record_t, link));
 	avl_create(&uberblock_tree, cksum_record_compare,
@@ -3313,7 +3313,7 @@ dump_block_stats(spa_t *spa)
 	uint64_t norm_alloc, norm_space, total_alloc, total_found;
 	int flags = TRAVERSE_PRE | TRAVERSE_PREFETCH_METADATA | TRAVERSE_HARD;
 	boolean_t leaks = B_FALSE;
-	int e, c;
+	int e, c, err;
 	bp_embedded_type_t i;
 
 	(void) printf("\nTraversing all blocks %s%s%s%s%s...\n\n",
@@ -3354,7 +3354,7 @@ dump_block_stats(spa_t *spa)
 
 	zcb.zcb_totalasize = metaslab_class_get_alloc(spa_normal_class(spa));
 	zcb.zcb_start = zcb.zcb_lastprint = gethrtime();
-	zcb.zcb_haderrors |= traverse_pool(spa, 0, flags, zdb_blkptr_cb, &zcb);
+	err = traverse_pool(spa, 0, flags, zdb_blkptr_cb, &zcb);
 
 	/*
 	 * If we've traversed the data blocks then we need to wait for those
@@ -3370,6 +3370,12 @@ dump_block_stats(spa_t *spa)
 		}
 	}
 
+	/*
+	 * Done after zio_wait() since zcb_haderrors is modified in
+	 * zdb_blkptr_done()
+	 */
+	zcb.zcb_haderrors |= err;
+
 	if (zcb.zcb_haderrors) {
 		(void) printf("\nError counts:\n\n");
 		(void) printf("\t%5s  %s\n", "errno", "count");
@@ -3889,13 +3895,6 @@ name:
 	return (NULL);
 }
 
-/* ARGSUSED */
-static int
-random_get_pseudo_bytes_cb(void *buf, size_t len, void *unused)
-{
-	return (random_get_pseudo_bytes(buf, len));
-}
-
 /*
  * Read a block from a pool and print it out.  The syntax of the
  * block descriptor is:
@@ -4058,17 +4057,8 @@ zdb_read_block(char *thing, spa_t *spa)
 		 * every decompress function at every inflated blocksize.
 		 */
 		enum zio_compress c;
-		void *pbuf2 = umem_alloc(SPA_MAXBLOCKSIZE, UMEM_NOFAIL);
 		void *lbuf2 = umem_alloc(SPA_MAXBLOCKSIZE, UMEM_NOFAIL);
 
-		abd_copy_to_buf(pbuf2, pabd, psize);
-
-		VERIFY0(abd_iterate_func(pabd, psize, SPA_MAXBLOCKSIZE - psize,
-		    random_get_pseudo_bytes_cb, NULL));
-
-		VERIFY0(random_get_pseudo_bytes((uint8_t *)pbuf2 + psize,
-		    SPA_MAXBLOCKSIZE - psize));
-
 		/*
 		 * XXX - On the one hand, with SPA_MAXBLOCKSIZE at 16MB,
 		 * this could take a while and we should let the user know
@@ -4078,13 +4068,29 @@ zdb_read_block(char *thing, spa_t *spa)
 		for (lsize = psize + SPA_MINBLOCKSIZE;
 		    lsize <= SPA_MAXBLOCKSIZE; lsize += SPA_MINBLOCKSIZE) {
 			for (c = 0; c < ZIO_COMPRESS_FUNCTIONS; c++) {
+				/*
+				 * ZLE can easily decompress non zle stream.
+				 * So have an option to disable it.
+				 */
+				if (c == ZIO_COMPRESS_ZLE &&
+				    getenv("ZDB_NO_ZLE"))
+					continue;
+
 				(void) fprintf(stderr,
 				    "Trying %05llx -> %05llx (%s)\n",
 				    (u_longlong_t)psize, (u_longlong_t)lsize,
 				    zio_compress_table[c].ci_name);
+
+				/*
+				 * We randomize lbuf2, and decompress to both
+				 * lbuf and lbuf2. This way, we will know if
+				 * decompression fill exactly to lsize.
+				 */
+				VERIFY0(random_get_pseudo_bytes(lbuf2, lsize));
+
 				if (zio_decompress_data(c, pabd,
 				    lbuf, psize, lsize) == 0 &&
-				    zio_decompress_data_buf(c, pbuf2,
+				    zio_decompress_data(c, pabd,
 				    lbuf2, psize, lsize) == 0 &&
 				    bcmp(lbuf, lbuf2, lsize) == 0)
 					break;
@@ -4092,11 +4098,9 @@ zdb_read_block(char *thing, spa_t *spa)
 			if (c != ZIO_COMPRESS_FUNCTIONS)
 				break;
 		}
-
-		umem_free(pbuf2, SPA_MAXBLOCKSIZE);
 		umem_free(lbuf2, SPA_MAXBLOCKSIZE);
 
-		if (lsize <= psize) {
+		if (lsize > SPA_MAXBLOCKSIZE) {
 			(void) printf("Decompress of %s failed\n", thing);
 			goto out;
 		}
@@ -4135,11 +4139,12 @@ zdb_embedded_block(char *thing)
 {
 	blkptr_t bp;
 	unsigned long long *words = (void *)&bp;
-	char buf[SPA_MAXBLOCKSIZE];
+	char *buf;
 	int err;
 
-	memset(&bp, 0, sizeof (blkptr_t));
+	buf = umem_alloc(SPA_MAXBLOCKSIZE, UMEM_NOFAIL);
 
+	bzero(&bp, sizeof (bp));
 	err = sscanf(thing, "%llx:%llx:%llx:%llx:%llx:%llx:%llx:%llx:"
 	    "%llx:%llx:%llx:%llx:%llx:%llx:%llx:%llx",
 	    words + 0, words + 1, words + 2, words + 3,
@@ -4157,6 +4162,7 @@ zdb_embedded_block(char *thing)
 		exit(1);
 	}
 	zdb_dump_block_raw(buf, BPE_GET_LSIZE(&bp), 0);
+	umem_free(buf, SPA_MAXBLOCKSIZE);
 }
 
 int
@@ -4171,7 +4177,7 @@ main(int argc, char **argv)
 	int error = 0;
 	char **searchdirs = NULL;
 	int nsearch = 0;
-	char *target;
+	char *target, *target_pool;
 	nvlist_t *policy = NULL;
 	uint64_t max_txg = UINT64_MAX;
 	int flags = ZFS_IMPORT_MISSING_LOG;
@@ -4374,6 +4380,20 @@ main(int argc, char **argv)
 	error = 0;
 	target = argv[0];
 
+	if (strpbrk(target, "/@") != NULL) {
+		size_t targetlen;
+
+		target_pool = strdup(target);
+		*strpbrk(target_pool, "/@") = '\0';
+
+		target_is_spa = B_FALSE;
+		targetlen = strlen(target);
+		if (targetlen && target[targetlen - 1] == '/')
+			target[targetlen - 1] = '\0';
+	} else {
+		target_pool = target;
+	}
+
 	if (dump_opt['e']) {
 		importargs_t args = { 0 };
 		nvlist_t *cfg = NULL;
@@ -4382,8 +4402,10 @@ main(int argc, char **argv)
 		args.path = searchdirs;
 		args.can_be_active = B_TRUE;
 
-		error = zpool_tryimport(g_zfs, target, &cfg, &args);
+		error = zpool_tryimport(g_zfs, target_pool, &cfg, &args);
+
 		if (error == 0) {
+
 			if (nvlist_add_nvlist(cfg,
 			    ZPOOL_REWIND_POLICY, policy) != 0) {
 				fatal("can't open '%s': %s",
@@ -4398,19 +4420,13 @@ main(int argc, char **argv)
 				(void) printf("\nConfiguration for import:\n");
 				dump_nvlist(cfg, 8);
 			}
-			error = spa_import(target, cfg, NULL,
+			error = spa_import(target_pool, cfg, NULL,
 			    flags | ZFS_IMPORT_SKIP_MMP);
 		}
 	}
 
-	if (strpbrk(target, "/@") != NULL) {
-		size_t targetlen;
-
-		target_is_spa = B_FALSE;
-		targetlen = strlen(target);
-		if (targetlen && target[targetlen - 1] == '/')
-			target[targetlen - 1] = '\0';
-	}
+	if (target_pool != target)
+		free(target_pool);
 
 	if (error == 0) {
 		if (target_is_spa || dump_opt['R']) {
diff -urpN zfs-0.7.6/cmd/zed/Makefile.am zfs-0.7.11/cmd/zed/Makefile.am
--- zfs-0.7.6/cmd/zed/Makefile.am	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zed/Makefile.am	2018-09-13 19:21:53.000000000 +0200
@@ -69,7 +69,8 @@ dist_zedexec_SCRIPTS = \
 	zed.d/statechange-notify.sh \
 	zed.d/vdev_clear-led.sh \
 	zed.d/vdev_attach-led.sh \
-	zed.d/pool_import-led.sh
+	zed.d/pool_import-led.sh \
+	zed.d/resilver_finish-start-scrub.sh
 
 zedconfdefaults = \
 	all-syslog.sh \
@@ -80,7 +81,8 @@ zedconfdefaults = \
 	statechange-notify.sh \
 	vdev_clear-led.sh \
 	vdev_attach-led.sh \
-	pool_import-led.sh
+	pool_import-led.sh \
+	resilver_finish-start-scrub.sh
 
 install-data-hook:
 	$(MKDIR_P) "$(DESTDIR)$(zedconfdir)"
diff -urpN zfs-0.7.6/cmd/zed/Makefile.in zfs-0.7.11/cmd/zed/Makefile.in
--- zfs-0.7.6/cmd/zed/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/zed/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -46,10 +46,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -61,13 +62,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -89,14 +91,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -108,7 +114,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -124,9 +129,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -137,7 +142,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -253,6 +258,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -264,6 +275,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -279,6 +291,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -292,9 +306,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -313,6 +328,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -444,14 +460,14 @@ DEFAULT_INCLUDES = -include ${top_buildd
 AM_LIBTOOLFLAGS = --silent
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS)
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\"
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS)
 EXTRA_DIST = zed.d/README
 ZED_SRC = \
 	zed.c \
@@ -510,7 +526,8 @@ dist_zedexec_SCRIPTS = \
 	zed.d/statechange-notify.sh \
 	zed.d/vdev_clear-led.sh \
 	zed.d/vdev_attach-led.sh \
-	zed.d/pool_import-led.sh
+	zed.d/pool_import-led.sh \
+	zed.d/resilver_finish-start-scrub.sh
 
 zedconfdefaults = \
 	all-syslog.sh \
@@ -521,7 +538,8 @@ zedconfdefaults = \
 	statechange-notify.sh \
 	vdev_clear-led.sh \
 	vdev_attach-led.sh \
-	pool_import-led.sh
+	pool_import-led.sh \
+	resilver_finish-start-scrub.sh
 
 all: all-am
 
diff -urpN zfs-0.7.6/cmd/zed/zed.d/all-debug.sh zfs-0.7.11/cmd/zed/zed.d/all-debug.sh
--- zfs-0.7.6/cmd/zed/zed.d/all-debug.sh	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zed/zed.d/all-debug.sh	2018-09-13 19:21:53.000000000 +0200
@@ -10,6 +10,8 @@
 
 : "${ZED_DEBUG_LOG:="${TMPDIR:="/tmp"}/zed.debug.log"}"
 
+zed_exit_if_ignoring_this_event
+
 lockfile="$(basename -- "${ZED_DEBUG_LOG}").lock"
 
 umask 077
diff -urpN zfs-0.7.6/cmd/zed/zed.d/all-syslog.sh zfs-0.7.11/cmd/zed/zed.d/all-syslog.sh
--- zfs-0.7.6/cmd/zed/zed.d/all-syslog.sh	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zed/zed.d/all-syslog.sh	2018-09-13 19:21:53.000000000 +0200
@@ -5,6 +5,8 @@
 [ -f "${ZED_ZEDLET_DIR}/zed.rc" ] && . "${ZED_ZEDLET_DIR}/zed.rc"
 . "${ZED_ZEDLET_DIR}/zed-functions.sh"
 
+zed_exit_if_ignoring_this_event
+
 zed_log_msg "eid=${ZEVENT_EID}" "class=${ZEVENT_SUBCLASS}" \
     "${ZEVENT_POOL_GUID:+"pool_guid=${ZEVENT_POOL_GUID}"}" \
     "${ZEVENT_VDEV_PATH:+"vdev_path=${ZEVENT_VDEV_PATH}"}" \
diff -urpN zfs-0.7.6/cmd/zed/zed.d/resilver_finish-start-scrub.sh zfs-0.7.11/cmd/zed/zed.d/resilver_finish-start-scrub.sh
--- zfs-0.7.6/cmd/zed/zed.d/resilver_finish-start-scrub.sh	1970-01-01 01:00:00.000000000 +0100
+++ zfs-0.7.11/cmd/zed/zed.d/resilver_finish-start-scrub.sh	2018-09-13 19:21:53.000000000 +0200
@@ -0,0 +1,17 @@
+#!/bin/sh
+# resilver_finish-start-scrub.sh
+# Run a scrub after a resilver
+#
+# Exit codes:
+# 1: Internal error
+# 2: Script wasn't enabled in zed.rc
+[ -f "${ZED_ZEDLET_DIR}/zed.rc" ] && . "${ZED_ZEDLET_DIR}/zed.rc"
+. "${ZED_ZEDLET_DIR}/zed-functions.sh"
+
+[ "${ZED_SCRUB_AFTER_RESILVER}" = "1" ] || exit 2
+[ -n "${ZEVENT_POOL}" ] || exit 1
+[ -n "${ZEVENT_SUBCLASS}" ] || exit 1
+zed_check_cmd "${ZPOOL}" || exit 1
+
+zed_log_msg "Starting scrub after resilver on ${ZEVENT_POOL}"
+"${ZPOOL}" scrub "${ZEVENT_POOL}"
diff -urpN zfs-0.7.6/cmd/zed/zed.d/zed-functions.sh zfs-0.7.11/cmd/zed/zed.d/zed-functions.sh
--- zfs-0.7.6/cmd/zed/zed.d/zed-functions.sh	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zed/zed.d/zed-functions.sh	2018-09-13 19:21:53.000000000 +0200
@@ -438,3 +438,23 @@ zed_guid_to_pool()
 		$ZPOOL get -H -ovalue,name guid | awk '$1=='"$guid"' {print $2}'
 	fi
 }
+
+# zed_exit_if_ignoring_this_event
+#
+# Exit the script if we should ignore this event, as determined by
+# $ZED_SYSLOG_SUBCLASS_INCLUDE and $ZED_SYSLOG_SUBCLASS_EXCLUDE in zed.rc.
+# This function assumes you've imported the normal zed variables.
+zed_exit_if_ignoring_this_event()
+{
+	if [ -n "${ZED_SYSLOG_SUBCLASS_INCLUDE}" ]; then
+	    eval "case ${ZEVENT_SUBCLASS} in
+	    ${ZED_SYSLOG_SUBCLASS_INCLUDE});;
+	    *) exit 0;;
+	    esac"
+	elif [ -n "${ZED_SYSLOG_SUBCLASS_EXCLUDE}" ]; then
+	    eval "case ${ZEVENT_SUBCLASS} in
+	    ${ZED_SYSLOG_SUBCLASS_EXCLUDE}) exit 0;;
+	    *);;
+	    esac"
+	fi
+}
diff -urpN zfs-0.7.6/cmd/zed/zed.d/zed.rc zfs-0.7.11/cmd/zed/zed.d/zed.rc
--- zfs-0.7.6/cmd/zed/zed.d/zed.rc	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zed/zed.d/zed.rc	2018-09-13 19:21:53.000000000 +0200
@@ -86,6 +86,9 @@
 #
 ZED_USE_ENCLOSURE_LEDS=1
 
+##
+# Run a scrub after every resilver
+#ZED_SCRUB_AFTER_RESILVER=1
 
 ##
 # The syslog priority (e.g., specified as a "facility.level" pair).
@@ -97,3 +100,14 @@ ZED_USE_ENCLOSURE_LEDS=1
 #
 #ZED_SYSLOG_TAG="zed"
 
+##
+# Which set of event subclasses to log
+# By default, events from all subclasses are logged.
+# If ZED_SYSLOG_SUBCLASS_INCLUDE is set, only subclasses
+# matching the pattern are logged. Use the pipe symbol (|)
+# or shell wildcards (*, ?) to match multiple subclasses.
+# Otherwise, if ZED_SYSLOG_SUBCLASS_EXCLUDE is set, the
+# matching subclasses are excluded from logging.
+#ZED_SYSLOG_SUBCLASS_INCLUDE="checksum|scrub_*|vdev.*"
+#ZED_SYSLOG_SUBCLASS_EXCLUDE="statechange|config_*|history_event"
+
diff -urpN zfs-0.7.6/cmd/zed/zed_conf.c zfs-0.7.11/cmd/zed/zed_conf.c
--- zfs-0.7.6/cmd/zed/zed_conf.c	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zed/zed_conf.c	2018-09-13 19:21:53.000000000 +0200
@@ -155,6 +155,8 @@ _zed_conf_display_help(const char *prog,
 	    "Run daemon in the foreground.");
 	fprintf(fp, "%*c%*s %s\n", w1, 0x20, -w2, "-M",
 	    "Lock all pages in memory.");
+	fprintf(fp, "%*c%*s %s\n", w1, 0x20, -w2, "-P",
+	    "$PATH for ZED to use (only used by ZTS).");
 	fprintf(fp, "%*c%*s %s\n", w1, 0x20, -w2, "-Z",
 	    "Zero state file.");
 	fprintf(fp, "\n");
@@ -247,7 +249,7 @@ _zed_conf_parse_path(char **resultp, con
 void
 zed_conf_parse_opts(struct zed_conf *zcp, int argc, char **argv)
 {
-	const char * const opts = ":hLVc:d:p:s:vfFMZ";
+	const char * const opts = ":hLVc:d:p:P:s:vfFMZ";
 	int opt;
 
 	if (!zcp || !argv || !argv[0])
@@ -275,6 +277,9 @@ zed_conf_parse_opts(struct zed_conf *zcp
 		case 'p':
 			_zed_conf_parse_path(&zcp->pid_file, optarg);
 			break;
+		case 'P':
+			_zed_conf_parse_path(&zcp->path, optarg);
+			break;
 		case 's':
 			_zed_conf_parse_path(&zcp->state_file, optarg);
 			break;
diff -urpN zfs-0.7.6/cmd/zed/zed_conf.h zfs-0.7.11/cmd/zed/zed_conf.h
--- zfs-0.7.6/cmd/zed/zed_conf.h	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zed/zed_conf.h	2018-09-13 19:21:53.000000000 +0200
@@ -37,6 +37,7 @@ struct zed_conf {
 	int		state_fd;		/* fd to state file */
 	libzfs_handle_t	*zfs_hdl;		/* handle to libzfs */
 	int		zevent_fd;		/* fd for access to zevents */
+	char		*path;		/* custom $PATH for zedlets to use */
 };
 
 struct zed_conf *zed_conf_create(void);
diff -urpN zfs-0.7.6/cmd/zed/zed_event.c zfs-0.7.11/cmd/zed/zed_event.c
--- zfs-0.7.6/cmd/zed/zed_event.c	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zed/zed_event.c	2018-09-13 19:21:53.000000000 +0200
@@ -733,12 +733,14 @@ _zed_event_add_nvpair(uint64_t eid, zed_
 
 /*
  * Restrict various environment variables to safe and sane values
- * when constructing the environment for the child process.
+ * when constructing the environment for the child process, unless
+ * we're running with a custom $PATH (like under the ZFS test suite).
  *
  * Reference: Secure Programming Cookbook by Viega & Messier, Section 1.1.
  */
 static void
-_zed_event_add_env_restrict(uint64_t eid, zed_strings_t *zsp)
+_zed_event_add_env_restrict(uint64_t eid, zed_strings_t *zsp,
+    const char *path)
 {
 	const char *env_restrict[][2] = {
 		{ "IFS",		" \t\n" },
@@ -753,11 +755,35 @@ _zed_event_add_env_restrict(uint64_t eid
 		{ "ZFS_RELEASE",	ZFS_META_RELEASE },
 		{ NULL,			NULL }
 	};
+
+	/*
+	 * If we have a custom $PATH, use the default ZFS binary locations
+	 * instead of the hard-coded ones.
+	 */
+	const char *env_path[][2] = {
+		{ "IFS",		" \t\n" },
+		{ "PATH",		NULL }, /* $PATH copied in later on */
+		{ "ZDB",		"zdb" },
+		{ "ZED",		"zed" },
+		{ "ZFS",		"zfs" },
+		{ "ZINJECT",		"zinject" },
+		{ "ZPOOL",		"zpool" },
+		{ "ZFS_ALIAS",		ZFS_META_ALIAS },
+		{ "ZFS_VERSION",	ZFS_META_VERSION },
+		{ "ZFS_RELEASE",	ZFS_META_RELEASE },
+		{ NULL,			NULL }
+	};
 	const char *(*pa)[2];
 
 	assert(zsp != NULL);
 
-	for (pa = env_restrict; *(*pa); pa++) {
+	pa = path != NULL ? env_path : env_restrict;
+
+	for (; *(*pa); pa++) {
+		/* Use our custom $PATH if we have one */
+		if (path != NULL && strcmp((*pa)[0], "PATH") == 0)
+			(*pa)[1] = path;
+
 		_zed_event_add_var(eid, zsp, NULL, (*pa)[0], "%s", (*pa)[1]);
 	}
 }
@@ -902,7 +928,7 @@ zed_event_service(struct zed_conf *zcp)
 		while ((nvp = nvlist_next_nvpair(nvl, nvp)))
 			_zed_event_add_nvpair(eid, zsp, nvp);
 
-		_zed_event_add_env_restrict(eid, zsp);
+		_zed_event_add_env_restrict(eid, zsp, zcp->path);
 		_zed_event_add_env_preserve(eid, zsp);
 
 		_zed_event_add_var(eid, zsp, ZED_VAR_PREFIX, "PID",
diff -urpN zfs-0.7.6/cmd/zfs/Makefile.in zfs-0.7.11/cmd/zfs/Makefile.in
--- zfs-0.7.6/cmd/zfs/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/zfs/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -43,10 +43,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -58,13 +59,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -86,14 +88,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -105,7 +111,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -121,9 +126,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -134,7 +139,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -215,6 +220,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -226,6 +237,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -241,6 +253,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -254,9 +268,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -275,6 +290,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -406,14 +422,14 @@ DEFAULT_INCLUDES = -include ${top_buildd
 AM_LIBTOOLFLAGS = --silent
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS)
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\"
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS)
 zfs_SOURCES = \
 	zfs_iter.c \
 	zfs_iter.h \
diff -urpN zfs-0.7.6/cmd/zfs/zfs_main.c zfs-0.7.11/cmd/zfs/zfs_main.c
--- zfs-0.7.6/cmd/zfs/zfs_main.c	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zfs/zfs_main.c	2018-09-13 19:21:53.000000000 +0200
@@ -6072,7 +6072,7 @@ share_mount_one(zfs_handle_t *zhp, int o
 
 		(void) fprintf(stderr, gettext("cannot %s '%s': "
 		    "Contains partially-completed state from "
-		    "\"zfs receive -r\", which can be resumed with "
+		    "\"zfs receive -s\", which can be resumed with "
 		    "\"zfs send -t\"\n"),
 		    cmdname, zfs_get_name(zhp));
 		return (1);
@@ -7041,6 +7041,7 @@ main(int argc, char **argv)
 	int ret = 0;
 	int i = 0;
 	char *cmdname;
+	char **newargv;
 
 	(void) setlocale(LC_ALL, "");
 	(void) textdomain(TEXT_DOMAIN);
@@ -7096,16 +7097,25 @@ main(int argc, char **argv)
 	libzfs_print_on_error(g_zfs, B_TRUE);
 
 	/*
+	 * Many commands modify input strings for string parsing reasons.
+	 * We create a copy to protect the original argv.
+	 */
+	newargv = malloc((argc + 1) * sizeof (newargv[0]));
+	for (i = 0; i < argc; i++)
+		newargv[i] = strdup(argv[i]);
+	newargv[argc] = NULL;
+
+	/*
 	 * Run the appropriate command.
 	 */
 	libzfs_mnttab_cache(g_zfs, B_TRUE);
 	if (find_command_idx(cmdname, &i) == 0) {
 		current_command = &command_table[i];
-		ret = command_table[i].func(argc - 1, argv + 1);
+		ret = command_table[i].func(argc - 1, newargv + 1);
 	} else if (strchr(cmdname, '=') != NULL) {
 		verify(find_command_idx("set", &i) == 0);
 		current_command = &command_table[i];
-		ret = command_table[i].func(argc, argv);
+		ret = command_table[i].func(argc, newargv);
 	} else {
 		(void) fprintf(stderr, gettext("unrecognized "
 		    "command '%s'\n"), cmdname);
@@ -7113,6 +7123,10 @@ main(int argc, char **argv)
 		ret = 1;
 	}
 
+	for (i = 0; i < argc; i++)
+		free(newargv[i]);
+	free(newargv);
+
 	if (ret == 0 && log_history)
 		(void) zpool_log_history(g_zfs, history_str);
 
diff -urpN zfs-0.7.6/cmd/zgenhostid/Makefile.in zfs-0.7.11/cmd/zgenhostid/Makefile.in
--- zfs-0.7.6/cmd/zgenhostid/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/zgenhostid/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -42,10 +42,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -57,13 +58,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -85,14 +87,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -104,7 +110,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -120,9 +125,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -133,7 +138,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -201,6 +206,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -212,6 +223,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -227,6 +239,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -240,9 +254,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -261,6 +276,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
diff -urpN zfs-0.7.6/cmd/zhack/Makefile.in zfs-0.7.11/cmd/zhack/Makefile.in
--- zfs-0.7.6/cmd/zhack/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/zhack/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -43,10 +43,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -58,13 +59,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -86,14 +88,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -105,7 +111,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -121,9 +126,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -134,7 +139,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -212,6 +217,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -223,6 +234,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -238,6 +250,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -251,9 +265,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -272,6 +287,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -403,14 +419,14 @@ DEFAULT_INCLUDES = -include ${top_buildd
 AM_LIBTOOLFLAGS = --silent
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS)
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\"
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS)
 zhack_SOURCES = \
 	zhack.c
 
diff -urpN zfs-0.7.6/cmd/zinject/Makefile.in zfs-0.7.11/cmd/zinject/Makefile.in
--- zfs-0.7.6/cmd/zinject/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/zinject/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -43,10 +43,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -58,13 +59,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -86,14 +88,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -105,7 +111,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -121,9 +126,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -134,7 +139,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -212,6 +217,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -223,6 +234,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -238,6 +250,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -251,9 +265,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -272,6 +287,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -403,14 +419,14 @@ DEFAULT_INCLUDES = -include ${top_buildd
 AM_LIBTOOLFLAGS = --silent
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS)
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\"
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS)
 zinject_SOURCES = \
 	translate.c \
 	zinject.c \
diff -urpN zfs-0.7.6/cmd/zpios/Makefile.in zfs-0.7.11/cmd/zpios/Makefile.in
--- zfs-0.7.6/cmd/zpios/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/zpios/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -43,10 +43,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -58,13 +59,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -86,14 +88,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -105,7 +111,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -121,9 +126,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -134,7 +139,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -208,6 +213,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -219,6 +230,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -234,6 +246,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -247,9 +261,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -268,6 +283,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -399,14 +415,14 @@ DEFAULT_INCLUDES = -include ${top_buildd
 AM_LIBTOOLFLAGS = --silent
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS)
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\"
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS)
 zpios_SOURCES = \
 	zpios_main.c \
 	zpios_util.c \
diff -urpN zfs-0.7.6/cmd/zpios/zpios_main.c zfs-0.7.11/cmd/zpios/zpios_main.c
--- zfs-0.7.6/cmd/zpios/zpios_main.c	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpios/zpios_main.c	2018-09-13 19:21:53.000000000 +0200
@@ -525,10 +525,11 @@ run_one(cmd_args_t *args, uint32_t id, u
 
 	memset(cmd, 0, cmd_size);
 	cmd->cmd_magic = ZPIOS_CMD_MAGIC;
-	strncpy(cmd->cmd_pool, args->pool, ZPIOS_NAME_SIZE - 1);
-	strncpy(cmd->cmd_pre, args->pre, ZPIOS_PATH_SIZE - 1);
-	strncpy(cmd->cmd_post, args->post, ZPIOS_PATH_SIZE - 1);
-	strncpy(cmd->cmd_log, args->log, ZPIOS_PATH_SIZE - 1);
+	snprintf(cmd->cmd_pool, sizeof (cmd->cmd_pool), "%s", args->pool);
+	snprintf(cmd->cmd_pre, sizeof (cmd->cmd_pre), "%s", args->pre);
+	snprintf(cmd->cmd_post, sizeof (cmd->cmd_post), "%s", args->post);
+	snprintf(cmd->cmd_log, sizeof (cmd->cmd_log), "%s", args->log);
+
 	cmd->cmd_id = id;
 	cmd->cmd_chunk_size = C;
 	cmd->cmd_thread_count = T;
diff -urpN zfs-0.7.6/cmd/zpool/Makefile.am zfs-0.7.11/cmd/zpool/Makefile.am
--- zfs-0.7.6/cmd/zpool/Makefile.am	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/Makefile.am	2018-09-13 19:21:53.000000000 +0200
@@ -60,9 +60,15 @@ dist_zpoolexec_SCRIPTS = \
 	zpool.d/pend_sec \
 	zpool.d/off_ucor \
 	zpool.d/ata_err \
+	zpool.d/nvme_err \
 	zpool.d/pwr_cyc \
 	zpool.d/upath \
-	zpool.d/vendor
+	zpool.d/vendor \
+	zpool.d/smart_test \
+	zpool.d/test_type \
+	zpool.d/test_status \
+	zpool.d/test_progress \
+	zpool.d/test_ended
 
 zpoolconfdefaults = \
 	enc \
@@ -98,9 +104,15 @@ zpoolconfdefaults = \
 	pend_sec \
 	off_ucor \
 	ata_err \
+	nvme_err \
 	pwr_cyc \
 	upath \
-	vendor
+	vendor \
+	smart_test \
+	test_type \
+	test_status \
+	test_progress \
+	test_ended
 
 install-data-hook:
 	$(MKDIR_P) "$(DESTDIR)$(zpoolconfdir)"
diff -urpN zfs-0.7.6/cmd/zpool/Makefile.in zfs-0.7.11/cmd/zpool/Makefile.in
--- zfs-0.7.6/cmd/zpool/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -44,10 +44,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -59,13 +60,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -87,14 +89,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -106,7 +112,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -122,9 +127,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -135,7 +140,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -238,6 +243,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -249,6 +260,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -264,6 +276,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -277,9 +291,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -298,6 +313,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -429,14 +445,14 @@ DEFAULT_INCLUDES = -include ${top_buildd
 AM_LIBTOOLFLAGS = --silent
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS)
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\"
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS)
 zpool_SOURCES = \
 	zpool_iter.c \
 	zpool_main.c \
@@ -489,9 +505,15 @@ dist_zpoolexec_SCRIPTS = \
 	zpool.d/pend_sec \
 	zpool.d/off_ucor \
 	zpool.d/ata_err \
+	zpool.d/nvme_err \
 	zpool.d/pwr_cyc \
 	zpool.d/upath \
-	zpool.d/vendor
+	zpool.d/vendor \
+	zpool.d/smart_test \
+	zpool.d/test_type \
+	zpool.d/test_status \
+	zpool.d/test_progress \
+	zpool.d/test_ended
 
 zpoolconfdefaults = \
 	enc \
@@ -527,9 +549,15 @@ zpoolconfdefaults = \
 	pend_sec \
 	off_ucor \
 	ata_err \
+	nvme_err \
 	pwr_cyc \
 	upath \
-	vendor
+	vendor \
+	smart_test \
+	test_type \
+	test_status \
+	test_progress \
+	test_ended
 
 all: all-am
 
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/ata_err zfs-0.7.11/cmd/zpool/zpool.d/ata_err
--- zfs-0.7.6/cmd/zpool/zpool.d/ata_err	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/ata_err	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/cmd_to zfs-0.7.11/cmd/zpool/zpool.d/cmd_to
--- zfs-0.7.6/cmd/zpool/zpool.d/cmd_to	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/cmd_to	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/defect zfs-0.7.11/cmd/zpool/zpool.d/defect
--- zfs-0.7.6/cmd/zpool/zpool.d/defect	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/defect	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/health zfs-0.7.11/cmd/zpool/zpool.d/health
--- zfs-0.7.6/cmd/zpool/zpool.d/health	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/health	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/hours_on zfs-0.7.11/cmd/zpool/zpool.d/hours_on
--- zfs-0.7.6/cmd/zpool/zpool.d/hours_on	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/hours_on	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/nonmed zfs-0.7.11/cmd/zpool/zpool.d/nonmed
--- zfs-0.7.6/cmd/zpool/zpool.d/nonmed	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/nonmed	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/nvme_err zfs-0.7.11/cmd/zpool/zpool.d/nvme_err
--- zfs-0.7.6/cmd/zpool/zpool.d/nvme_err	1970-01-01 01:00:00.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/nvme_err	2018-09-13 19:21:53.000000000 +0200
@@ -0,0 +1,242 @@
+#!/bin/sh
+#
+# Show SMART stats
+#
+
+helpstr="
+smart:		Show SMART temperature and error stats (specific to drive type)
+smartx:		Show SMART extended drive stats (specific to drive type).
+temp:		Show SMART drive temperature in celsius (all drives).
+health:		Show reported SMART status (all drives).
+r_proc:		Show SMART read GBytes processed over drive lifetime (SAS).
+w_proc:		Show SMART write GBytes processed over drive lifetime (SAS).
+r_ucor:		Show SMART read uncorrectable errors (SAS).
+w_ucor:		Show SMART write uncorrectable errors (SAS).
+nonmed:		Show SMART non-medium errors (SAS).
+defect:		Show SMART grown defect list (SAS).
+hours_on:	Show number of hours drive powered on (all drives).
+realloc:	Show SMART reallocated sectors count (ATA).
+rep_ucor:	Show SMART reported uncorrectable count (ATA).
+cmd_to:		Show SMART command timeout count (ATA).
+pend_sec:	Show SMART current pending sector count (ATA).
+off_ucor:	Show SMART offline uncorrectable errors (ATA).
+ata_err:	Show SMART ATA errors (ATA).
+pwr_cyc:	Show SMART power cycle count (ATA).
+serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
+"
+
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
+script=$(basename "$0")
+
+if [ "$1" = "-h" ] ; then
+        echo "$helpstr" | grep "$script:" | tr -s '\t' | cut -f 2-
+        exit
+fi
+
+smartctl_path=$(which smartctl)
+
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
+
+	# What kind of drive are we?  Look for the right line in smartctl:
+	#
+	# SAS:
+	#	Transport protocol:   SAS
+	#
+	# SATA:
+	#	ATA Version is:   8
+	#
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
+	out=$(echo "$raw_out" | awk '
+# SAS specific
+/read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
+/write:/{print "rwr="$4"\nw_cor="$5"\nw_proc="$7"\nw_ucor="$8}
+/Non-medium error count/{print "nonmed="$4}
+/Elements in grown defect list/{print "defect="$6}
+
+# SAS common
+/SAS/{type="sas"}
+/Drive Temperature:/{print "temp="$4}
+# Status can be a long string, substitute spaces for '_'
+/SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
+/Serial number:/{print "serial="$3}
+
+# SATA specific
+/Reallocated_Sector_Ct/{print "realloc="$10}
+/Reported_Uncorrect/{print "rep_ucor="$10}
+/Command_Timeout/{print "cmd_to="$10}
+/Current_Pending_Sector/{print "pend_sec="$10}
+/Offline_Uncorrectable/{print "off_ucor="$10}
+/ATA Error Count:/{print "ata_err="$4}
+/Power_Cycle_Count/{print "pwr_cyc="$10}
+
+# SATA common
+/SATA/{type="sata"}
+/Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
+/Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
+
+END {print "type="type; ORS="\n"; print ""}
+');
+fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
+
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
+if [ -z "$type" ]; then
+	type="sata"
+	out=
+fi
+
+case $script in
+smart)
+	# Print temperature plus common predictors of drive failure
+	if [ "$type" = "sas" ] ; then
+		scripts="temp|health|r_ucor|w_ucor"
+	elif [ "$type" = "sata" ] ; then
+		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
+	fi
+	;;
+smartx)
+	# Print some other interesting stats
+	if [ "$type" = "sas" ] ; then
+		scripts="hours_on|defect|nonmed|r_proc|w_proc"
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="hours_on|pwr_cyc"
+	fi
+	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
+*)
+	scripts="$script"
+esac
+
+with_vals=$(echo "$out" | grep -E "$scripts")
+if [ ! -z "$with_vals" ]; then
+	echo "$with_vals"
+	without_vals=$(echo "$scripts" | tr "|" "\n" |
+		grep -v -E "$(echo "$with_vals" |
+		awk -F "=" '{print $1}')" | awk '{print $0"="}')
+else
+	without_vals=$(echo "$scripts" | tr "|" "\n" | awk '{print $0"="}')
+fi
+
+if [ ! -z "$without_vals" ]; then
+	echo "$without_vals"
+fi
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/off_ucor zfs-0.7.11/cmd/zpool/zpool.d/off_ucor
--- zfs-0.7.6/cmd/zpool/zpool.d/off_ucor	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/off_ucor	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/pend_sec zfs-0.7.11/cmd/zpool/zpool.d/pend_sec
--- zfs-0.7.6/cmd/zpool/zpool.d/pend_sec	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/pend_sec	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/pwr_cyc zfs-0.7.11/cmd/zpool/zpool.d/pwr_cyc
--- zfs-0.7.6/cmd/zpool/zpool.d/pwr_cyc	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/pwr_cyc	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/r_proc zfs-0.7.11/cmd/zpool/zpool.d/r_proc
--- zfs-0.7.6/cmd/zpool/zpool.d/r_proc	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/r_proc	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/r_ucor zfs-0.7.11/cmd/zpool/zpool.d/r_ucor
--- zfs-0.7.6/cmd/zpool/zpool.d/r_ucor	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/r_ucor	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/realloc zfs-0.7.11/cmd/zpool/zpool.d/realloc
--- zfs-0.7.6/cmd/zpool/zpool.d/realloc	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/realloc	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/rep_ucor zfs-0.7.11/cmd/zpool/zpool.d/rep_ucor
--- zfs-0.7.6/cmd/zpool/zpool.d/rep_ucor	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/rep_ucor	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/serial zfs-0.7.11/cmd/zpool/zpool.d/serial
--- zfs-0.7.6/cmd/zpool/zpool.d/serial	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/serial	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/smart zfs-0.7.11/cmd/zpool/zpool.d/smart
--- zfs-0.7.6/cmd/zpool/zpool.d/smart	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/smart	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/smart_test zfs-0.7.11/cmd/zpool/zpool.d/smart_test
--- zfs-0.7.6/cmd/zpool/zpool.d/smart_test	1970-01-01 01:00:00.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/smart_test	2018-09-13 19:21:53.000000000 +0200
@@ -0,0 +1,242 @@
+#!/bin/sh
+#
+# Show SMART stats
+#
+
+helpstr="
+smart:		Show SMART temperature and error stats (specific to drive type)
+smartx:		Show SMART extended drive stats (specific to drive type).
+temp:		Show SMART drive temperature in celsius (all drives).
+health:		Show reported SMART status (all drives).
+r_proc:		Show SMART read GBytes processed over drive lifetime (SAS).
+w_proc:		Show SMART write GBytes processed over drive lifetime (SAS).
+r_ucor:		Show SMART read uncorrectable errors (SAS).
+w_ucor:		Show SMART write uncorrectable errors (SAS).
+nonmed:		Show SMART non-medium errors (SAS).
+defect:		Show SMART grown defect list (SAS).
+hours_on:	Show number of hours drive powered on (all drives).
+realloc:	Show SMART reallocated sectors count (ATA).
+rep_ucor:	Show SMART reported uncorrectable count (ATA).
+cmd_to:		Show SMART command timeout count (ATA).
+pend_sec:	Show SMART current pending sector count (ATA).
+off_ucor:	Show SMART offline uncorrectable errors (ATA).
+ata_err:	Show SMART ATA errors (ATA).
+pwr_cyc:	Show SMART power cycle count (ATA).
+serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
+"
+
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
+script=$(basename "$0")
+
+if [ "$1" = "-h" ] ; then
+        echo "$helpstr" | grep "$script:" | tr -s '\t' | cut -f 2-
+        exit
+fi
+
+smartctl_path=$(which smartctl)
+
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
+
+	# What kind of drive are we?  Look for the right line in smartctl:
+	#
+	# SAS:
+	#	Transport protocol:   SAS
+	#
+	# SATA:
+	#	ATA Version is:   8
+	#
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
+	out=$(echo "$raw_out" | awk '
+# SAS specific
+/read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
+/write:/{print "rwr="$4"\nw_cor="$5"\nw_proc="$7"\nw_ucor="$8}
+/Non-medium error count/{print "nonmed="$4}
+/Elements in grown defect list/{print "defect="$6}
+
+# SAS common
+/SAS/{type="sas"}
+/Drive Temperature:/{print "temp="$4}
+# Status can be a long string, substitute spaces for '_'
+/SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
+/Serial number:/{print "serial="$3}
+
+# SATA specific
+/Reallocated_Sector_Ct/{print "realloc="$10}
+/Reported_Uncorrect/{print "rep_ucor="$10}
+/Command_Timeout/{print "cmd_to="$10}
+/Current_Pending_Sector/{print "pend_sec="$10}
+/Offline_Uncorrectable/{print "off_ucor="$10}
+/ATA Error Count:/{print "ata_err="$4}
+/Power_Cycle_Count/{print "pwr_cyc="$10}
+
+# SATA common
+/SATA/{type="sata"}
+/Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
+/Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
+
+END {print "type="type; ORS="\n"; print ""}
+');
+fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
+
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
+if [ -z "$type" ]; then
+	type="sata"
+	out=
+fi
+
+case $script in
+smart)
+	# Print temperature plus common predictors of drive failure
+	if [ "$type" = "sas" ] ; then
+		scripts="temp|health|r_ucor|w_ucor"
+	elif [ "$type" = "sata" ] ; then
+		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
+	fi
+	;;
+smartx)
+	# Print some other interesting stats
+	if [ "$type" = "sas" ] ; then
+		scripts="hours_on|defect|nonmed|r_proc|w_proc"
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="hours_on|pwr_cyc"
+	fi
+	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
+*)
+	scripts="$script"
+esac
+
+with_vals=$(echo "$out" | grep -E "$scripts")
+if [ ! -z "$with_vals" ]; then
+	echo "$with_vals"
+	without_vals=$(echo "$scripts" | tr "|" "\n" |
+		grep -v -E "$(echo "$with_vals" |
+		awk -F "=" '{print $1}')" | awk '{print $0"="}')
+else
+	without_vals=$(echo "$scripts" | tr "|" "\n" | awk '{print $0"="}')
+fi
+
+if [ ! -z "$without_vals" ]; then
+	echo "$without_vals"
+fi
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/smartx zfs-0.7.11/cmd/zpool/zpool.d/smartx
--- zfs-0.7.6/cmd/zpool/zpool.d/smartx	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/smartx	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/temp zfs-0.7.11/cmd/zpool/zpool.d/temp
--- zfs-0.7.6/cmd/zpool/zpool.d/temp	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/temp	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/test_ended zfs-0.7.11/cmd/zpool/zpool.d/test_ended
--- zfs-0.7.6/cmd/zpool/zpool.d/test_ended	1970-01-01 01:00:00.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/test_ended	2018-09-13 19:21:53.000000000 +0200
@@ -0,0 +1,242 @@
+#!/bin/sh
+#
+# Show SMART stats
+#
+
+helpstr="
+smart:		Show SMART temperature and error stats (specific to drive type)
+smartx:		Show SMART extended drive stats (specific to drive type).
+temp:		Show SMART drive temperature in celsius (all drives).
+health:		Show reported SMART status (all drives).
+r_proc:		Show SMART read GBytes processed over drive lifetime (SAS).
+w_proc:		Show SMART write GBytes processed over drive lifetime (SAS).
+r_ucor:		Show SMART read uncorrectable errors (SAS).
+w_ucor:		Show SMART write uncorrectable errors (SAS).
+nonmed:		Show SMART non-medium errors (SAS).
+defect:		Show SMART grown defect list (SAS).
+hours_on:	Show number of hours drive powered on (all drives).
+realloc:	Show SMART reallocated sectors count (ATA).
+rep_ucor:	Show SMART reported uncorrectable count (ATA).
+cmd_to:		Show SMART command timeout count (ATA).
+pend_sec:	Show SMART current pending sector count (ATA).
+off_ucor:	Show SMART offline uncorrectable errors (ATA).
+ata_err:	Show SMART ATA errors (ATA).
+pwr_cyc:	Show SMART power cycle count (ATA).
+serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
+"
+
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
+script=$(basename "$0")
+
+if [ "$1" = "-h" ] ; then
+        echo "$helpstr" | grep "$script:" | tr -s '\t' | cut -f 2-
+        exit
+fi
+
+smartctl_path=$(which smartctl)
+
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
+
+	# What kind of drive are we?  Look for the right line in smartctl:
+	#
+	# SAS:
+	#	Transport protocol:   SAS
+	#
+	# SATA:
+	#	ATA Version is:   8
+	#
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
+	out=$(echo "$raw_out" | awk '
+# SAS specific
+/read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
+/write:/{print "rwr="$4"\nw_cor="$5"\nw_proc="$7"\nw_ucor="$8}
+/Non-medium error count/{print "nonmed="$4}
+/Elements in grown defect list/{print "defect="$6}
+
+# SAS common
+/SAS/{type="sas"}
+/Drive Temperature:/{print "temp="$4}
+# Status can be a long string, substitute spaces for '_'
+/SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
+/Serial number:/{print "serial="$3}
+
+# SATA specific
+/Reallocated_Sector_Ct/{print "realloc="$10}
+/Reported_Uncorrect/{print "rep_ucor="$10}
+/Command_Timeout/{print "cmd_to="$10}
+/Current_Pending_Sector/{print "pend_sec="$10}
+/Offline_Uncorrectable/{print "off_ucor="$10}
+/ATA Error Count:/{print "ata_err="$4}
+/Power_Cycle_Count/{print "pwr_cyc="$10}
+
+# SATA common
+/SATA/{type="sata"}
+/Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
+/Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
+
+END {print "type="type; ORS="\n"; print ""}
+');
+fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
+
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
+if [ -z "$type" ]; then
+	type="sata"
+	out=
+fi
+
+case $script in
+smart)
+	# Print temperature plus common predictors of drive failure
+	if [ "$type" = "sas" ] ; then
+		scripts="temp|health|r_ucor|w_ucor"
+	elif [ "$type" = "sata" ] ; then
+		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
+	fi
+	;;
+smartx)
+	# Print some other interesting stats
+	if [ "$type" = "sas" ] ; then
+		scripts="hours_on|defect|nonmed|r_proc|w_proc"
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="hours_on|pwr_cyc"
+	fi
+	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
+*)
+	scripts="$script"
+esac
+
+with_vals=$(echo "$out" | grep -E "$scripts")
+if [ ! -z "$with_vals" ]; then
+	echo "$with_vals"
+	without_vals=$(echo "$scripts" | tr "|" "\n" |
+		grep -v -E "$(echo "$with_vals" |
+		awk -F "=" '{print $1}')" | awk '{print $0"="}')
+else
+	without_vals=$(echo "$scripts" | tr "|" "\n" | awk '{print $0"="}')
+fi
+
+if [ ! -z "$without_vals" ]; then
+	echo "$without_vals"
+fi
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/test_progress zfs-0.7.11/cmd/zpool/zpool.d/test_progress
--- zfs-0.7.6/cmd/zpool/zpool.d/test_progress	1970-01-01 01:00:00.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/test_progress	2018-09-13 19:21:53.000000000 +0200
@@ -0,0 +1,242 @@
+#!/bin/sh
+#
+# Show SMART stats
+#
+
+helpstr="
+smart:		Show SMART temperature and error stats (specific to drive type)
+smartx:		Show SMART extended drive stats (specific to drive type).
+temp:		Show SMART drive temperature in celsius (all drives).
+health:		Show reported SMART status (all drives).
+r_proc:		Show SMART read GBytes processed over drive lifetime (SAS).
+w_proc:		Show SMART write GBytes processed over drive lifetime (SAS).
+r_ucor:		Show SMART read uncorrectable errors (SAS).
+w_ucor:		Show SMART write uncorrectable errors (SAS).
+nonmed:		Show SMART non-medium errors (SAS).
+defect:		Show SMART grown defect list (SAS).
+hours_on:	Show number of hours drive powered on (all drives).
+realloc:	Show SMART reallocated sectors count (ATA).
+rep_ucor:	Show SMART reported uncorrectable count (ATA).
+cmd_to:		Show SMART command timeout count (ATA).
+pend_sec:	Show SMART current pending sector count (ATA).
+off_ucor:	Show SMART offline uncorrectable errors (ATA).
+ata_err:	Show SMART ATA errors (ATA).
+pwr_cyc:	Show SMART power cycle count (ATA).
+serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
+"
+
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
+script=$(basename "$0")
+
+if [ "$1" = "-h" ] ; then
+        echo "$helpstr" | grep "$script:" | tr -s '\t' | cut -f 2-
+        exit
+fi
+
+smartctl_path=$(which smartctl)
+
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
+
+	# What kind of drive are we?  Look for the right line in smartctl:
+	#
+	# SAS:
+	#	Transport protocol:   SAS
+	#
+	# SATA:
+	#	ATA Version is:   8
+	#
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
+	out=$(echo "$raw_out" | awk '
+# SAS specific
+/read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
+/write:/{print "rwr="$4"\nw_cor="$5"\nw_proc="$7"\nw_ucor="$8}
+/Non-medium error count/{print "nonmed="$4}
+/Elements in grown defect list/{print "defect="$6}
+
+# SAS common
+/SAS/{type="sas"}
+/Drive Temperature:/{print "temp="$4}
+# Status can be a long string, substitute spaces for '_'
+/SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
+/Serial number:/{print "serial="$3}
+
+# SATA specific
+/Reallocated_Sector_Ct/{print "realloc="$10}
+/Reported_Uncorrect/{print "rep_ucor="$10}
+/Command_Timeout/{print "cmd_to="$10}
+/Current_Pending_Sector/{print "pend_sec="$10}
+/Offline_Uncorrectable/{print "off_ucor="$10}
+/ATA Error Count:/{print "ata_err="$4}
+/Power_Cycle_Count/{print "pwr_cyc="$10}
+
+# SATA common
+/SATA/{type="sata"}
+/Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
+/Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
+
+END {print "type="type; ORS="\n"; print ""}
+');
+fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
+
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
+if [ -z "$type" ]; then
+	type="sata"
+	out=
+fi
+
+case $script in
+smart)
+	# Print temperature plus common predictors of drive failure
+	if [ "$type" = "sas" ] ; then
+		scripts="temp|health|r_ucor|w_ucor"
+	elif [ "$type" = "sata" ] ; then
+		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
+	fi
+	;;
+smartx)
+	# Print some other interesting stats
+	if [ "$type" = "sas" ] ; then
+		scripts="hours_on|defect|nonmed|r_proc|w_proc"
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="hours_on|pwr_cyc"
+	fi
+	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
+*)
+	scripts="$script"
+esac
+
+with_vals=$(echo "$out" | grep -E "$scripts")
+if [ ! -z "$with_vals" ]; then
+	echo "$with_vals"
+	without_vals=$(echo "$scripts" | tr "|" "\n" |
+		grep -v -E "$(echo "$with_vals" |
+		awk -F "=" '{print $1}')" | awk '{print $0"="}')
+else
+	without_vals=$(echo "$scripts" | tr "|" "\n" | awk '{print $0"="}')
+fi
+
+if [ ! -z "$without_vals" ]; then
+	echo "$without_vals"
+fi
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/test_status zfs-0.7.11/cmd/zpool/zpool.d/test_status
--- zfs-0.7.6/cmd/zpool/zpool.d/test_status	1970-01-01 01:00:00.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/test_status	2018-09-13 19:21:53.000000000 +0200
@@ -0,0 +1,242 @@
+#!/bin/sh
+#
+# Show SMART stats
+#
+
+helpstr="
+smart:		Show SMART temperature and error stats (specific to drive type)
+smartx:		Show SMART extended drive stats (specific to drive type).
+temp:		Show SMART drive temperature in celsius (all drives).
+health:		Show reported SMART status (all drives).
+r_proc:		Show SMART read GBytes processed over drive lifetime (SAS).
+w_proc:		Show SMART write GBytes processed over drive lifetime (SAS).
+r_ucor:		Show SMART read uncorrectable errors (SAS).
+w_ucor:		Show SMART write uncorrectable errors (SAS).
+nonmed:		Show SMART non-medium errors (SAS).
+defect:		Show SMART grown defect list (SAS).
+hours_on:	Show number of hours drive powered on (all drives).
+realloc:	Show SMART reallocated sectors count (ATA).
+rep_ucor:	Show SMART reported uncorrectable count (ATA).
+cmd_to:		Show SMART command timeout count (ATA).
+pend_sec:	Show SMART current pending sector count (ATA).
+off_ucor:	Show SMART offline uncorrectable errors (ATA).
+ata_err:	Show SMART ATA errors (ATA).
+pwr_cyc:	Show SMART power cycle count (ATA).
+serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
+"
+
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
+script=$(basename "$0")
+
+if [ "$1" = "-h" ] ; then
+        echo "$helpstr" | grep "$script:" | tr -s '\t' | cut -f 2-
+        exit
+fi
+
+smartctl_path=$(which smartctl)
+
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
+
+	# What kind of drive are we?  Look for the right line in smartctl:
+	#
+	# SAS:
+	#	Transport protocol:   SAS
+	#
+	# SATA:
+	#	ATA Version is:   8
+	#
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
+	out=$(echo "$raw_out" | awk '
+# SAS specific
+/read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
+/write:/{print "rwr="$4"\nw_cor="$5"\nw_proc="$7"\nw_ucor="$8}
+/Non-medium error count/{print "nonmed="$4}
+/Elements in grown defect list/{print "defect="$6}
+
+# SAS common
+/SAS/{type="sas"}
+/Drive Temperature:/{print "temp="$4}
+# Status can be a long string, substitute spaces for '_'
+/SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
+/Serial number:/{print "serial="$3}
+
+# SATA specific
+/Reallocated_Sector_Ct/{print "realloc="$10}
+/Reported_Uncorrect/{print "rep_ucor="$10}
+/Command_Timeout/{print "cmd_to="$10}
+/Current_Pending_Sector/{print "pend_sec="$10}
+/Offline_Uncorrectable/{print "off_ucor="$10}
+/ATA Error Count:/{print "ata_err="$4}
+/Power_Cycle_Count/{print "pwr_cyc="$10}
+
+# SATA common
+/SATA/{type="sata"}
+/Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
+/Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
+
+END {print "type="type; ORS="\n"; print ""}
+');
+fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
+
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
+if [ -z "$type" ]; then
+	type="sata"
+	out=
+fi
+
+case $script in
+smart)
+	# Print temperature plus common predictors of drive failure
+	if [ "$type" = "sas" ] ; then
+		scripts="temp|health|r_ucor|w_ucor"
+	elif [ "$type" = "sata" ] ; then
+		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
+	fi
+	;;
+smartx)
+	# Print some other interesting stats
+	if [ "$type" = "sas" ] ; then
+		scripts="hours_on|defect|nonmed|r_proc|w_proc"
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="hours_on|pwr_cyc"
+	fi
+	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
+*)
+	scripts="$script"
+esac
+
+with_vals=$(echo "$out" | grep -E "$scripts")
+if [ ! -z "$with_vals" ]; then
+	echo "$with_vals"
+	without_vals=$(echo "$scripts" | tr "|" "\n" |
+		grep -v -E "$(echo "$with_vals" |
+		awk -F "=" '{print $1}')" | awk '{print $0"="}')
+else
+	without_vals=$(echo "$scripts" | tr "|" "\n" | awk '{print $0"="}')
+fi
+
+if [ ! -z "$without_vals" ]; then
+	echo "$without_vals"
+fi
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/test_type zfs-0.7.11/cmd/zpool/zpool.d/test_type
--- zfs-0.7.6/cmd/zpool/zpool.d/test_type	1970-01-01 01:00:00.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/test_type	2018-09-13 19:21:53.000000000 +0200
@@ -0,0 +1,242 @@
+#!/bin/sh
+#
+# Show SMART stats
+#
+
+helpstr="
+smart:		Show SMART temperature and error stats (specific to drive type)
+smartx:		Show SMART extended drive stats (specific to drive type).
+temp:		Show SMART drive temperature in celsius (all drives).
+health:		Show reported SMART status (all drives).
+r_proc:		Show SMART read GBytes processed over drive lifetime (SAS).
+w_proc:		Show SMART write GBytes processed over drive lifetime (SAS).
+r_ucor:		Show SMART read uncorrectable errors (SAS).
+w_ucor:		Show SMART write uncorrectable errors (SAS).
+nonmed:		Show SMART non-medium errors (SAS).
+defect:		Show SMART grown defect list (SAS).
+hours_on:	Show number of hours drive powered on (all drives).
+realloc:	Show SMART reallocated sectors count (ATA).
+rep_ucor:	Show SMART reported uncorrectable count (ATA).
+cmd_to:		Show SMART command timeout count (ATA).
+pend_sec:	Show SMART current pending sector count (ATA).
+off_ucor:	Show SMART offline uncorrectable errors (ATA).
+ata_err:	Show SMART ATA errors (ATA).
+pwr_cyc:	Show SMART power cycle count (ATA).
+serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
+"
+
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
+script=$(basename "$0")
+
+if [ "$1" = "-h" ] ; then
+        echo "$helpstr" | grep "$script:" | tr -s '\t' | cut -f 2-
+        exit
+fi
+
+smartctl_path=$(which smartctl)
+
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
+
+	# What kind of drive are we?  Look for the right line in smartctl:
+	#
+	# SAS:
+	#	Transport protocol:   SAS
+	#
+	# SATA:
+	#	ATA Version is:   8
+	#
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
+	out=$(echo "$raw_out" | awk '
+# SAS specific
+/read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
+/write:/{print "rwr="$4"\nw_cor="$5"\nw_proc="$7"\nw_ucor="$8}
+/Non-medium error count/{print "nonmed="$4}
+/Elements in grown defect list/{print "defect="$6}
+
+# SAS common
+/SAS/{type="sas"}
+/Drive Temperature:/{print "temp="$4}
+# Status can be a long string, substitute spaces for '_'
+/SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
+/Serial number:/{print "serial="$3}
+
+# SATA specific
+/Reallocated_Sector_Ct/{print "realloc="$10}
+/Reported_Uncorrect/{print "rep_ucor="$10}
+/Command_Timeout/{print "cmd_to="$10}
+/Current_Pending_Sector/{print "pend_sec="$10}
+/Offline_Uncorrectable/{print "off_ucor="$10}
+/ATA Error Count:/{print "ata_err="$4}
+/Power_Cycle_Count/{print "pwr_cyc="$10}
+
+# SATA common
+/SATA/{type="sata"}
+/Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
+/Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
+
+END {print "type="type; ORS="\n"; print ""}
+');
+fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
+
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
+if [ -z "$type" ]; then
+	type="sata"
+	out=
+fi
+
+case $script in
+smart)
+	# Print temperature plus common predictors of drive failure
+	if [ "$type" = "sas" ] ; then
+		scripts="temp|health|r_ucor|w_ucor"
+	elif [ "$type" = "sata" ] ; then
+		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
+	fi
+	;;
+smartx)
+	# Print some other interesting stats
+	if [ "$type" = "sas" ] ; then
+		scripts="hours_on|defect|nonmed|r_proc|w_proc"
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="hours_on|pwr_cyc"
+	fi
+	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
+*)
+	scripts="$script"
+esac
+
+with_vals=$(echo "$out" | grep -E "$scripts")
+if [ ! -z "$with_vals" ]; then
+	echo "$with_vals"
+	without_vals=$(echo "$scripts" | tr "|" "\n" |
+		grep -v -E "$(echo "$with_vals" |
+		awk -F "=" '{print $1}')" | awk '{print $0"="}')
+else
+	without_vals=$(echo "$scripts" | tr "|" "\n" | awk '{print $0"="}')
+fi
+
+if [ ! -z "$without_vals" ]; then
+	echo "$without_vals"
+fi
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/w_proc zfs-0.7.11/cmd/zpool/zpool.d/w_proc
--- zfs-0.7.6/cmd/zpool/zpool.d/w_proc	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/w_proc	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool.d/w_ucor zfs-0.7.11/cmd/zpool/zpool.d/w_ucor
--- zfs-0.7.6/cmd/zpool/zpool.d/w_ucor	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool.d/w_ucor	2018-09-13 19:21:53.000000000 +0200
@@ -23,8 +23,45 @@ off_ucor:	Show SMART offline uncorrectab
 ata_err:	Show SMART ATA errors (ATA).
 pwr_cyc:	Show SMART power cycle count (ATA).
 serial:		Show disk serial number.
+nvme_err:	Show SMART NVMe errors (NVMe).
+smart_test:	Show SMART self-test results summary.
+test_type:	Show SMART self-test type (short, long... ).
+test_status:	Show SMART self-test status.
+test_progress:	Show SMART self-test percentage done.
+test_ended:	Show when the last SMART self-test ended (if supported).
 "
 
+# Hack for developer testing
+#
+# If you set $samples to a directory containing smartctl output text files,
+# we will use them instead of running smartctl on the vdevs.  This can be
+# useful if you want to test a bunch of different smartctl outputs.  Also, if
+# $samples is set, and additional 'file' column is added to the zpool output
+# showing the filename.
+samples=
+
+# get_filename_from_dir DIR
+#
+# Look in directory DIR and return a filename from it.  The filename returned
+# is chosen quasi-sequentially (based off our PID).  This allows us to return
+# a different filename every time this script is invoked (which we do for each
+# vdev), without having to maintain state.
+get_filename_from_dir()
+{
+	dir=$1
+	pid="$$"
+	num_files=$(find "$dir" -maxdepth 1 -type f | wc -l)
+	mod=$((pid % num_files))
+	i=0
+	find "$dir" -type f -printf "%f\n" | while read -r file ; do
+		if [ "$mod" = "$i" ] ; then
+			echo "$file"
+			break
+		fi
+		i=$((i+1))
+	done
+}
+
 script=$(basename "$0")
 
 if [ "$1" = "-h" ] ; then
@@ -34,10 +71,18 @@ fi
 
 smartctl_path=$(which smartctl)
 
-if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ]; then
-	raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+if [ -b "$VDEV_UPATH" ] && [ -x "$smartctl_path" ] || [ -n "$samples" ] ; then
+	if [ -n "$samples" ] ; then
+		# cat a smartctl output text file instead of running smartctl
+		# on a vdev (only used for developer testing).
+		file=$(get_filename_from_dir $samples)
+		echo "file=$file"
+		raw_out=$(cat "$samples/$file")
+	else
+		raw_out=$(eval "sudo $smartctl_path -a $VDEV_UPATH")
+	fi
 
-	# Are we a SAS or ATA drive?  Look for the right line in smartctl:
+	# What kind of drive are we?  Look for the right line in smartctl:
 	#
 	# SAS:
 	#	Transport protocol:   SAS
@@ -45,7 +90,9 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 	# SATA:
 	#	ATA Version is:   8
 	#
-	type=$(echo "$raw_out" | grep -m 1 -Eo '^ATA|SAS$')
+	# NVMe:
+	#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)
+	#
 	out=$(echo "$raw_out" | awk '
 # SAS specific
 /read:/{print "rrd="$4"\nr_cor="$5"\nr_proc="$7"\nr_ucor="$8}
@@ -54,10 +101,11 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Elements in grown defect list/{print "defect="$6}
 
 # SAS common
+/SAS/{type="sas"}
 /Drive Temperature:/{print "temp="$4}
 # Status can be a long string, substitute spaces for '_'
 /SMART Health Status:/{printf "health="; for(i=4;i<=NF-1;i++){printf "%s_", $i}; printf "%s\n", $i}
-/number of hours powered up/{print "hours_on="$7}
+/number of hours powered up/{print "hours_on="$7; hours_on=int($7)}
 /Serial number:/{print "serial="$3}
 
 # SATA specific
@@ -70,40 +118,111 @@ if [ -b "$VDEV_UPATH" ] && [ -x "$smartc
 /Power_Cycle_Count/{print "pwr_cyc="$10}
 
 # SATA common
+/SATA/{type="sata"}
 /Temperature_Celsius/{print "temp="$10}
+/Airflow_Temperature_Cel/{print "temp="$10}
+/Current Temperature:/{print "temp="$3}
+/SMART overall-health self-assessment test result:/{print "health="$6}
+/Power_On_Hours/{print "hours_on="$10; hours_on=int($10)}
+/Serial Number:/{print "serial="$3}
+
+# NVMe common
+/NVMe/{type="nvme"}
+/Temperature:/{print "temp="$2}
 /SMART overall-health self-assessment test result:/{print "health="$6}
-/Power_On_Hours/{print "hours_on="$10}
+/Power On Hours:/{gsub("[^0-9]","",$4); print "hours_on="$4}
 /Serial Number:/{print "serial="$3}
+/Power Cycles:/{print "pwr_cyc="$3}
+
+# NVMe specific
+/Media and Data Integrity Errors:/{print "nvme_err="$6}
+
+# SMART self-test info
+/Self-test execution status:/{progress=tolower($4)} # SAS
+/SMART Self-test log/{test_seen=1} # SAS
+/SMART Extended Self-test Log/{test_seen=1} # SATA
+/# 1/{
+	test_type=tolower($3"_"$4);
+	# Status could be one word ("Completed") or multiple ("Completed: read
+	# failure").  Look for the ":" to see if we need to grab more words.
+
+	if ($5 ~ ":")
+		status=tolower($5""$6"_"$7)
+	else
+		status=tolower($5)
+	if (status=="self")
+		status="running";
+
+	if (type == "sas") {
+		hours=int($(NF-4))
+	} else {
+		hours=int($(NF-1))
+		# SATA reports percent remaining, rather than percent done
+		# Convert it to percent done.
+		progress=(100-int($(NF-2)))"%"
+	}
+	# When we int()-ify "hours", it converts stuff like "NOW" and "-" into
+	# 0.  In those cases, set it to hours_on, so they will cancel out in
+	# the "hours_ago" calculation later on.
+	if (hours == 0)
+		hours=hours_on
+
+	if (test_seen) {
+		print "test="hours_on
+		print "test_type="test_type
+		print "test_status="status
+		print "test_progress="progress
+	}
+	# Not all drives report hours_on
+	if (hours_on && hours) {
+		total_hours_ago=(hours_on-hours)
+		days_ago=int(total_hours_ago/24)
+		hours_ago=(total_hours_ago % 24)
+		if (days_ago != 0)
+			ago_str=days_ago"d"
+		if (hours_ago !=0)
+			ago_str=ago_str""hours_ago"h"
+		print "test_ended="ago_str
+	}
+}
 
-END {ORS="\n"; print ""}
+END {print "type="type; ORS="\n"; print ""}
 ');
 fi
+type=$(echo "$out" | grep '^type=' | cut -d '=' -f 2)
 
-# if type is not set by now, either we don't have a block device
-# or smartctl failed. Either way, default to ATA and set out to
-# nothing
+# If type is not set by now, either we don't have a block device
+# or smartctl failed. Either way, default to ATA and set $out to
+# nothing.
 if [ -z "$type" ]; then
-	type="ATA"
+	type="sata"
 	out=
 fi
 
 case $script in
 smart)
 	# Print temperature plus common predictors of drive failure
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="temp|health|r_ucor|w_ucor"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
 		scripts="temp|health|ata_err|realloc|rep_ucor|cmd_to|pend_sec|off_ucor"
+	elif [ "$type" = "nvme" ] ; then
+		scripts="temp|health|nvme_err"
 	fi
 	;;
 smartx)
 	# Print some other interesting stats
-	if [ "$type" = "SAS" ] ; then
+	if [ "$type" = "sas" ] ; then
 		scripts="hours_on|defect|nonmed|r_proc|w_proc"
-	elif [ "$type" = "ATA" ] ; then
+	elif [ "$type" = "sata" ] ; then
+		scripts="hours_on|pwr_cyc"
+	elif [ "$type" = "nvme" ] ; then
 		scripts="hours_on|pwr_cyc"
 	fi
 	;;
+smart_test)
+	scripts="test_type|test_status|test_progress|test_ended"
+	;;
 *)
 	scripts="$script"
 esac
diff -urpN zfs-0.7.6/cmd/zpool/zpool_main.c zfs-0.7.11/cmd/zpool/zpool_main.c
--- zfs-0.7.6/cmd/zpool/zpool_main.c	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool_main.c	2018-09-13 19:21:53.000000000 +0200
@@ -6226,7 +6226,8 @@ status_callback(zpool_handle_t *zhp, voi
 	    &nvroot) == 0);
 	verify(nvlist_lookup_uint64_array(nvroot, ZPOOL_CONFIG_VDEV_STATS,
 	    (uint64_t **)&vs, &c) == 0);
-	health = zpool_state_to_name(vs->vs_state, vs->vs_aux);
+
+	health = zpool_get_state_str(zhp);
 
 	(void) printf(gettext("  pool: %s\n"), zpool_get_name(zhp));
 	(void) printf(gettext(" state: %s\n"), health);
@@ -6395,6 +6396,15 @@ status_callback(zpool_handle_t *zhp, voi
 		    "to be recovered.\n"));
 		break;
 
+	case ZPOOL_STATUS_IO_FAILURE_MMP:
+		(void) printf(gettext("status: The pool is suspended because "
+		    "multihost writes failed or were delayed;\n\tanother "
+		    "system could import the pool undetected.\n"));
+		(void) printf(gettext("action: Make sure the pool's devices "
+		    "are connected, then reboot your system and\n\timport the "
+		    "pool.\n"));
+		break;
+
 	case ZPOOL_STATUS_IO_FAILURE_WAIT:
 	case ZPOOL_STATUS_IO_FAILURE_CONTINUE:
 		(void) printf(gettext("status: One or more devices are "
@@ -7961,6 +7971,7 @@ main(int argc, char **argv)
 	int ret = 0;
 	int i = 0;
 	char *cmdname;
+	char **newargv;
 
 	(void) setlocale(LC_ALL, "");
 	(void) textdomain(TEXT_DOMAIN);
@@ -7996,15 +8007,24 @@ main(int argc, char **argv)
 	zfs_save_arguments(argc, argv, history_str, sizeof (history_str));
 
 	/*
+	 * Many commands modify input strings for string parsing reasons.
+	 * We create a copy to protect the original argv.
+	 */
+	newargv = malloc((argc + 1) * sizeof (newargv[0]));
+	for (i = 0; i < argc; i++)
+		newargv[i] = strdup(argv[i]);
+	newargv[argc] = NULL;
+
+	/*
 	 * Run the appropriate command.
 	 */
 	if (find_command_idx(cmdname, &i) == 0) {
 		current_command = &command_table[i];
-		ret = command_table[i].func(argc - 1, argv + 1);
+		ret = command_table[i].func(argc - 1, newargv + 1);
 	} else if (strchr(cmdname, '=')) {
 		verify(find_command_idx("set", &i) == 0);
 		current_command = &command_table[i];
-		ret = command_table[i].func(argc, argv);
+		ret = command_table[i].func(argc, newargv);
 	} else if (strcmp(cmdname, "freeze") == 0 && argc == 3) {
 		/*
 		 * 'freeze' is a vile debugging abomination, so we treat
@@ -8021,6 +8041,10 @@ main(int argc, char **argv)
 		ret = 1;
 	}
 
+	for (i = 0; i < argc; i++)
+		free(newargv[i]);
+	free(newargv);
+
 	if (ret == 0 && log_history)
 		(void) zpool_log_history(g_zfs, history_str);
 
diff -urpN zfs-0.7.6/cmd/zpool/zpool_vdev.c zfs-0.7.11/cmd/zpool/zpool_vdev.c
--- zfs-0.7.6/cmd/zpool/zpool_vdev.c	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zpool/zpool_vdev.c	2018-09-13 19:21:53.000000000 +0200
@@ -191,6 +191,7 @@ static vdev_disk_db_entry_t vdev_disk_da
 	{"ATA     INTEL SSDSC2BP24", 4096},
 	{"ATA     INTEL SSDSC2BP48", 4096},
 	{"NA      SmrtStorSDLKAE9W", 4096},
+	{"NVMe    Amazon EC2 NVMe ", 4096},
 	/* Imported from Open Solaris */
 	{"ATA     MARVELL SD88SA02", 4096},
 	/* Advanced format Hard drives */
diff -urpN zfs-0.7.6/cmd/zstreamdump/Makefile.in zfs-0.7.11/cmd/zstreamdump/Makefile.in
--- zfs-0.7.6/cmd/zstreamdump/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/zstreamdump/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -43,10 +43,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -58,13 +59,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -86,14 +88,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -105,7 +111,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -121,9 +126,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -134,7 +139,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -212,6 +217,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -223,6 +234,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -238,6 +250,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -251,9 +265,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -272,6 +287,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -403,14 +419,14 @@ DEFAULT_INCLUDES = -include ${top_buildd
 AM_LIBTOOLFLAGS = --silent
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS)
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\"
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS)
 zstreamdump_SOURCES = \
 	zstreamdump.c
 
diff -urpN zfs-0.7.6/cmd/ztest/Makefile.in zfs-0.7.11/cmd/ztest/Makefile.in
--- zfs-0.7.6/cmd/ztest/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/ztest/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -43,10 +43,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -58,13 +59,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -86,14 +88,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -105,7 +111,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -121,9 +126,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -134,7 +139,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -212,6 +217,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -223,6 +234,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -238,6 +250,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -251,9 +265,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -272,6 +287,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -406,15 +422,17 @@ AM_LIBTOOLFLAGS = --silent
 #  truncating snprintfs on gcc 7.1.1.
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99 $(DEBUG_STACKFLAGS) \
-	$(FRAME_LARGER_THAN) $(NO_FORMAT_TRUNCATION)
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS) \
+	$(DEBUG_STACKFLAGS) $(FRAME_LARGER_THAN) \
+	$(NO_FORMAT_TRUNCATION)
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\" -DDEBUG
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS) \
+	-DDEBUG
 ztest_SOURCES = \
 	ztest.c
 
diff -urpN zfs-0.7.6/cmd/ztest/ztest.c zfs-0.7.11/cmd/ztest/ztest.c
--- zfs-0.7.6/cmd/ztest/ztest.c	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/ztest/ztest.c	2018-09-13 19:21:53.000000000 +0200
@@ -197,7 +197,8 @@ extern uint64_t metaslab_gang_bang;
 extern uint64_t metaslab_df_alloc_threshold;
 extern int metaslab_preload_limit;
 extern boolean_t zfs_compressed_arc_enabled;
-extern int  zfs_abd_scatter_enabled;
+extern int zfs_abd_scatter_enabled;
+extern int dmu_object_alloc_chunk_shift;
 
 static ztest_shared_opts_t *ztest_shared_opts;
 static ztest_shared_opts_t ztest_opts;
@@ -310,6 +311,7 @@ static ztest_shared_callstate_t *ztest_s
 ztest_func_t ztest_dmu_read_write;
 ztest_func_t ztest_dmu_write_parallel;
 ztest_func_t ztest_dmu_object_alloc_free;
+ztest_func_t ztest_dmu_object_next_chunk;
 ztest_func_t ztest_dmu_commit_callbacks;
 ztest_func_t ztest_zap;
 ztest_func_t ztest_zap_parallel;
@@ -357,6 +359,7 @@ ztest_info_t ztest_info[] = {
 	ZTI_INIT(ztest_dmu_read_write, 1, &zopt_always),
 	ZTI_INIT(ztest_dmu_write_parallel, 10, &zopt_always),
 	ZTI_INIT(ztest_dmu_object_alloc_free, 1, &zopt_always),
+	ZTI_INIT(ztest_dmu_object_next_chunk, 1, &zopt_sometimes),
 	ZTI_INIT(ztest_dmu_commit_callbacks, 1, &zopt_always),
 	ZTI_INIT(ztest_zap, 30, &zopt_always),
 	ZTI_INIT(ztest_zap_parallel, 100, &zopt_always),
@@ -3927,6 +3930,26 @@ ztest_dmu_object_alloc_free(ztest_ds_t *
 	umem_free(od, size);
 }
 
+/*
+ * Rewind the global allocator to verify object allocation backfilling.
+ */
+void
+ztest_dmu_object_next_chunk(ztest_ds_t *zd, uint64_t id)
+{
+	objset_t *os = zd->zd_os;
+	int dnodes_per_chunk = 1 << dmu_object_alloc_chunk_shift;
+	uint64_t object;
+
+	/*
+	 * Rewind the global allocator randomly back to a lower object number
+	 * to force backfilling and reclamation of recently freed dnodes.
+	 */
+	mutex_enter(&os->os_obj_lock);
+	object = ztest_random(os->os_obj_next_chunk);
+	os->os_obj_next_chunk = P2ALIGN(object, dnodes_per_chunk);
+	mutex_exit(&os->os_obj_lock);
+}
+
 #undef OD_ARRAY_SIZE
 #define	OD_ARRAY_SIZE	2
 
diff -urpN zfs-0.7.6/cmd/zvol_id/Makefile.in zfs-0.7.11/cmd/zvol_id/Makefile.in
--- zfs-0.7.6/cmd/zvol_id/Makefile.in	2018-02-01 19:28:55.000000000 +0100
+++ zfs-0.7.11/cmd/zvol_id/Makefile.in	2018-09-13 19:23:31.000000000 +0200
@@ -43,10 +43,11 @@ ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
 am__aclocal_m4_deps = $(top_srcdir)/config/always-arch.m4 \
 	$(top_srcdir)/config/always-no-bool-compare.m4 \
 	$(top_srcdir)/config/always-no-unused-but-set-variable.m4 \
+	$(top_srcdir)/config/ax_code_coverage.m4 \
+	$(top_srcdir)/config/kernel-acl-refcount.m4 \
 	$(top_srcdir)/config/kernel-acl.m4 \
 	$(top_srcdir)/config/kernel-aio-fsync.m4 \
 	$(top_srcdir)/config/kernel-automount.m4 \
-	$(top_srcdir)/config/kernel-bdev-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-bdev-logical-size.m4 \
 	$(top_srcdir)/config/kernel-bdev-physical-size.m4 \
 	$(top_srcdir)/config/kernel-bdi.m4 \
@@ -58,13 +59,14 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-bio-rw-discard.m4 \
 	$(top_srcdir)/config/kernel-bio_set_dev.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-bdi.m4 \
+	$(top_srcdir)/config/kernel-blk-queue-flags.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-flush.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-hw-sectors.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-max-segments.m4 \
 	$(top_srcdir)/config/kernel-blk-queue-unplug.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get-by-path.m4 \
 	$(top_srcdir)/config/kernel-blkdev-get.m4 \
-	$(top_srcdir)/config/kernel-block-device-operations-release-void.m4 \
+	$(top_srcdir)/config/kernel-block-device-operations.m4 \
 	$(top_srcdir)/config/kernel-clear-inode.m4 \
 	$(top_srcdir)/config/kernel-commit-metadata.m4 \
 	$(top_srcdir)/config/kernel-create-nameidata.m4 \
@@ -86,14 +88,18 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-fmode-t.m4 \
 	$(top_srcdir)/config/kernel-follow-down-one.m4 \
 	$(top_srcdir)/config/kernel-fpu.m4 \
+	$(top_srcdir)/config/kernel-fst-mount.m4 \
 	$(top_srcdir)/config/kernel-fsync.m4 \
 	$(top_srcdir)/config/kernel-generic_io_acct.m4 \
 	$(top_srcdir)/config/kernel-generic_readlink.m4 \
+	$(top_srcdir)/config/kernel-get-disk-and-module.m4 \
 	$(top_srcdir)/config/kernel-get-disk-ro.m4 \
 	$(top_srcdir)/config/kernel-get-gendisk.m4 \
 	$(top_srcdir)/config/kernel-get-link.m4 \
+	$(top_srcdir)/config/kernel-global_page_state.m4 \
 	$(top_srcdir)/config/kernel-inode-getattr.m4 \
 	$(top_srcdir)/config/kernel-inode-set-flags.m4 \
+	$(top_srcdir)/config/kernel-inode-set-iversion.m4 \
 	$(top_srcdir)/config/kernel-insert-inode-locked.m4 \
 	$(top_srcdir)/config/kernel-invalidate-bdev-args.m4 \
 	$(top_srcdir)/config/kernel-is_owner_or_cap.m4 \
@@ -105,7 +111,6 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-mk-request-fn.m4 \
 	$(top_srcdir)/config/kernel-mkdir-umode-t.m4 \
 	$(top_srcdir)/config/kernel-mod-param.m4 \
-	$(top_srcdir)/config/kernel-mount-nodev.m4 \
 	$(top_srcdir)/config/kernel-objtool.m4 \
 	$(top_srcdir)/config/kernel-open-bdev-exclusive.m4 \
 	$(top_srcdir)/config/kernel-put-link.m4 \
@@ -121,9 +126,9 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/kernel-tmpfile.m4 \
 	$(top_srcdir)/config/kernel-truncate-range.m4 \
 	$(top_srcdir)/config/kernel-truncate-setsize.m4 \
+	$(top_srcdir)/config/kernel-userns-capabilities.m4 \
 	$(top_srcdir)/config/kernel-vfs-iterate.m4 \
 	$(top_srcdir)/config/kernel-vfs-rw-iterate.m4 \
-	$(top_srcdir)/config/kernel-vm_node_stat.m4 \
 	$(top_srcdir)/config/kernel-xattr-handler.m4 \
 	$(top_srcdir)/config/kernel.m4 $(top_srcdir)/config/libtool.m4 \
 	$(top_srcdir)/config/ltoptions.m4 \
@@ -134,7 +139,7 @@ am__aclocal_m4_deps = $(top_srcdir)/conf
 	$(top_srcdir)/config/toolchain-simd.m4 \
 	$(top_srcdir)/config/user-dracut.m4 \
 	$(top_srcdir)/config/user-frame-larger-than.m4 \
-	$(top_srcdir)/config/user-libattr.m4 \
+	$(top_srcdir)/config/user-libaio.m4 \
 	$(top_srcdir)/config/user-libblkid.m4 \
 	$(top_srcdir)/config/user-libtirpc.m4 \
 	$(top_srcdir)/config/user-libudev.m4 \
@@ -208,6 +213,12 @@ CCASDEPMODE = @CCASDEPMODE@
 CCASFLAGS = @CCASFLAGS@
 CCDEPMODE = @CCDEPMODE@
 CFLAGS = @CFLAGS@
+CODE_COVERAGE_CFLAGS = @CODE_COVERAGE_CFLAGS@
+CODE_COVERAGE_CPPFLAGS = @CODE_COVERAGE_CPPFLAGS@
+CODE_COVERAGE_CXXFLAGS = @CODE_COVERAGE_CXXFLAGS@
+CODE_COVERAGE_ENABLED = @CODE_COVERAGE_ENABLED@
+CODE_COVERAGE_LDFLAGS = @CODE_COVERAGE_LDFLAGS@
+CODE_COVERAGE_LIBS = @CODE_COVERAGE_LIBS@
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CYGPATH_W = @CYGPATH_W@
@@ -219,6 +230,7 @@ DEFAULT_INIT_DIR = @DEFAULT_INIT_DIR@
 DEFAULT_INIT_SCRIPT = @DEFAULT_INIT_SCRIPT@
 DEFAULT_PACKAGE = @DEFAULT_PACKAGE@
 DEFINE_INITRAMFS = @DEFINE_INITRAMFS@
+DEFINE_SYSTEMD = @DEFINE_SYSTEMD@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
 DPKG = @DPKG@
@@ -234,6 +246,8 @@ EGREP = @EGREP@
 EXEEXT = @EXEEXT@
 FGREP = @FGREP@
 FRAME_LARGER_THAN = @FRAME_LARGER_THAN@
+GCOV = @GCOV@
+GENHTML = @GENHTML@
 GREP = @GREP@
 HAVE_ALIEN = @HAVE_ALIEN@
 HAVE_DPKG = @HAVE_DPKG@
@@ -247,9 +261,10 @@ INSTALL_SCRIPT = @INSTALL_SCRIPT@
 INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
 KERNELCPPFLAGS = @KERNELCPPFLAGS@
 KERNELMAKE_PARAMS = @KERNELMAKE_PARAMS@
+LCOV = @LCOV@
 LD = @LD@
 LDFLAGS = @LDFLAGS@
-LIBATTR = @LIBATTR@
+LIBAIO = @LIBAIO@
 LIBBLKID = @LIBBLKID@
 LIBOBJS = @LIBOBJS@
 LIBS = @LIBS@
@@ -268,6 +283,7 @@ LTLIBOBJS = @LTLIBOBJS@
 MAINT = @MAINT@
 MAKEINFO = @MAKEINFO@
 MKDIR_P = @MKDIR_P@
+MULTIARCH_LIBDIR = @MULTIARCH_LIBDIR@
 NM = @NM@
 NMEDIT = @NMEDIT@
 NO_BOOL_COMPARE = @NO_BOOL_COMPARE@
@@ -402,14 +418,15 @@ AM_LIBTOOLFLAGS = --silent
 # removed once https://github.com/zfsonlinux/zfs/issues/569 is resolved.
 AM_CFLAGS = ${DEBUG_CFLAGS} -Wall -Wstrict-prototypes \
 	${NO_UNUSED_BUT_SET_VARIABLE} ${NO_BOOL_COMPARE} \
-	-fno-strict-aliasing -std=gnu99 -fno-stack-protector
+	-fno-strict-aliasing -std=gnu99 $(CODE_COVERAGE_CFLAGS) \
+	-fno-stack-protector
 AM_CPPFLAGS = -D_GNU_SOURCE -D__EXTENSIONS__ -D_REENTRANT \
 	-D_POSIX_PTHREAD_SEMANTICS -D_FILE_OFFSET_BITS=64 \
 	-D_LARGEFILE64_SOURCE -DHAVE_LARGE_STACKS=1 \
 	-DTEXT_DOMAIN=\"zfs-linux-user\" \
 	-DLIBEXECDIR=\"$(libexecdir)\" \
 	-DRUNSTATEDIR=\"$(runstatedir)\" -DSBINDIR=\"$(sbindir)\" \
-	-DSYSCONFDIR=\"$(sysconfdir)\"
+	-DSYSCONFDIR=\"$(sysconfdir)\" $(CODE_COVERAGE_CPPFLAGS)
 zvol_id_SOURCES = \
 	zvol_id_main.c
 
diff -urpN zfs-0.7.6/cmd/zvol_id/zvol_id_main.c zfs-0.7.11/cmd/zvol_id/zvol_id_main.c
--- zfs-0.7.6/cmd/zvol_id/zvol_id_main.c	2018-02-01 19:22:15.000000000 +0100
+++ zfs-0.7.11/cmd/zvol_id/zvol_id_main.c	2018-09-13 19:21:53.000000000 +0200
@@ -55,11 +55,12 @@ main(int argc, char **argv)
 {
 	int fd, error = 0;
 	char zvol_name[ZFS_MAX_DATASET_NAME_LEN];
-	char zvol_name_part[ZFS_MAX_DATASET_NAME_LEN];
+	char *zvol_name_part = NULL;
 	char *dev_name;
 	struct stat64 statbuf;
 	int dev_minor, dev_part;
 	int i;
+	int rc;
 
 	if (argc < 2) {
 		printf("Usage: %s /dev/zvol_device_node\n", argv[0]);
@@ -88,11 +89,13 @@ main(int argc, char **argv)
 		return (errno);
 	}
 	if (dev_part > 0)
-		snprintf(zvol_name_part, ZFS_MAX_DATASET_NAME_LEN,
-		    "%s-part%d", zvol_name, dev_part);
+		rc = asprintf(&zvol_name_part, "%s-part%d", zvol_name,
+		    dev_part);
 	else
-		snprintf(zvol_name_part, ZFS_MAX_DATASET_NAME_LEN,
-		    "%s", zvol_name);
+		rc = asprintf(&zvol_name_part, "%s", zvol_name);
+
+	if (rc == -1 || zvol_name_part == NULL)
+		goto error;
 
 	for (i = 0; i < strlen(zvol_name_part); i++) {
 		if (isblank(zvol_name_part[i]))
@@ -100,6 +103,8 @@ main(int argc, char **argv)
 	}
 
 	printf("%s\n", zvol_name_part);
+	free(zvol_name_part);
+error:
 	close(fd);
 	return (error);
 }
diff -urpN zfs-0.7.6/config/Rules.am zfs-0.7.11/config/Rules.am
diff -urpN zfs-0.7.6/config/ax_code_coverage.m4 zfs-0.7.11/config/ax_code_coverage.m4
diff -urpN zfs-0.7.6/config/deb.am zfs-0.7.11/config/deb.am
diff -urpN zfs-0.7.6/config/kernel-acl-refcount.m4 zfs-0.7.11/config/kernel-acl-refcount.m4
diff -urpN zfs-0.7.6/config/kernel-acl.m4 zfs-0.7.11/config/kernel-acl.m4
diff -urpN zfs-0.7.6/config/kernel-bdev-block-device-operations.m4 zfs-0.7.11/config/kernel-bdev-block-device-operations.m4
diff -urpN zfs-0.7.6/config/kernel-blk-queue-flags.m4 zfs-0.7.11/config/kernel-blk-queue-flags.m4
diff -urpN zfs-0.7.6/config/kernel-block-device-operations-release-void.m4 zfs-0.7.11/config/kernel-block-device-operations-release-void.m4
diff -urpN zfs-0.7.6/config/kernel-block-device-operations.m4 zfs-0.7.11/config/kernel-block-device-operations.m4
diff -urpN zfs-0.7.6/config/kernel-create-nameidata.m4 zfs-0.7.11/config/kernel-create-nameidata.m4
diff -urpN zfs-0.7.6/config/kernel-current-time.m4 zfs-0.7.11/config/kernel-current-time.m4
diff -urpN zfs-0.7.6/config/kernel-dentry-operations.m4 zfs-0.7.11/config/kernel-dentry-operations.m4
diff -urpN zfs-0.7.6/config/kernel-elevator-change.m4 zfs-0.7.11/config/kernel-elevator-change.m4
diff -urpN zfs-0.7.6/config/kernel-fst-mount.m4 zfs-0.7.11/config/kernel-fst-mount.m4
diff -urpN zfs-0.7.6/config/kernel-get-disk-and-module.m4 zfs-0.7.11/config/kernel-get-disk-and-module.m4
diff -urpN zfs-0.7.6/config/kernel-get-link.m4 zfs-0.7.11/config/kernel-get-link.m4
diff -urpN zfs-0.7.6/config/kernel-global_page_state.m4 zfs-0.7.11/config/kernel-global_page_state.m4
diff -urpN zfs-0.7.6/config/kernel-inode-set-iversion.m4 zfs-0.7.11/config/kernel-inode-set-iversion.m4
diff -urpN zfs-0.7.6/config/kernel-lookup-nameidata.m4 zfs-0.7.11/config/kernel-lookup-nameidata.m4
diff -urpN zfs-0.7.6/config/kernel-mount-nodev.m4 zfs-0.7.11/config/kernel-mount-nodev.m4
diff -urpN zfs-0.7.6/config/kernel-userns-capabilities.m4 zfs-0.7.11/config/kernel-userns-capabilities.m4
diff -urpN zfs-0.7.6/config/kernel-vfs-iterate.m4 zfs-0.7.11/config/kernel-vfs-iterate.m4
diff -urpN zfs-0.7.6/config/kernel-vm_node_stat.m4 zfs-0.7.11/config/kernel-vm_node_stat.m4
diff -urpN zfs-0.7.6/config/kernel.m4 zfs-0.7.11/config/kernel.m4
diff -urpN zfs-0.7.6/config/tgz.am zfs-0.7.11/config/tgz.am
diff -urpN zfs-0.7.6/config/user-libaio.m4 zfs-0.7.11/config/user-libaio.m4
diff -urpN zfs-0.7.6/config/user-libattr.m4 zfs-0.7.11/config/user-libattr.m4
diff -urpN zfs-0.7.6/config/user-libblkid.m4 zfs-0.7.11/config/user-libblkid.m4
diff -urpN zfs-0.7.6/config/user-systemd.m4 zfs-0.7.11/config/user-systemd.m4
diff -urpN zfs-0.7.6/config/user.m4 zfs-0.7.11/config/user.m4
diff -urpN zfs-0.7.6/config/zfs-build.m4 zfs-0.7.11/config/zfs-build.m4
diff -urpN zfs-0.7.6/configure zfs-0.7.11/configure
diff -urpN zfs-0.7.6/configure.ac zfs-0.7.11/configure.ac
diff -urpN zfs-0.7.6/contrib/Makefile.in zfs-0.7.11/contrib/Makefile.in
diff -urpN zfs-0.7.6/contrib/bash_completion.d/Makefile.in zfs-0.7.11/contrib/bash_completion.d/Makefile.in
diff -urpN zfs-0.7.6/contrib/dracut/02zfsexpandknowledge/Makefile.in zfs-0.7.11/contrib/dracut/02zfsexpandknowledge/Makefile.in
diff -urpN zfs-0.7.6/contrib/dracut/90zfs/Makefile.in zfs-0.7.11/contrib/dracut/90zfs/Makefile.in
diff -urpN zfs-0.7.6/contrib/dracut/90zfs/mount-zfs.sh.in zfs-0.7.11/contrib/dracut/90zfs/mount-zfs.sh.in
diff -urpN zfs-0.7.6/contrib/dracut/Makefile.in zfs-0.7.11/contrib/dracut/Makefile.in
diff -urpN zfs-0.7.6/contrib/initramfs/Makefile.am zfs-0.7.11/contrib/initramfs/Makefile.am
diff -urpN zfs-0.7.6/contrib/initramfs/Makefile.in zfs-0.7.11/contrib/initramfs/Makefile.in
diff -urpN zfs-0.7.6/contrib/initramfs/conf.d/zfs zfs-0.7.11/contrib/initramfs/conf.d/zfs
diff -urpN zfs-0.7.6/contrib/initramfs/scripts/zfs zfs-0.7.11/contrib/initramfs/scripts/zfs
diff -urpN zfs-0.7.6/etc/Makefile.in zfs-0.7.11/etc/Makefile.in
diff -urpN zfs-0.7.6/etc/init.d/Makefile.in zfs-0.7.11/etc/init.d/Makefile.in
diff -urpN zfs-0.7.6/etc/modules-load.d/Makefile.in zfs-0.7.11/etc/modules-load.d/Makefile.in
diff -urpN zfs-0.7.6/etc/sudoers.d/Makefile.in zfs-0.7.11/etc/sudoers.d/Makefile.in
diff -urpN zfs-0.7.6/etc/systemd/Makefile.in zfs-0.7.11/etc/systemd/Makefile.in
diff -urpN zfs-0.7.6/etc/systemd/system/Makefile.in zfs-0.7.11/etc/systemd/system/Makefile.in
diff -urpN zfs-0.7.6/etc/systemd/system/zfs-import-cache.service.in zfs-0.7.11/etc/systemd/system/zfs-import-cache.service.in
diff -urpN zfs-0.7.6/etc/systemd/system/zfs-import-scan.service.in zfs-0.7.11/etc/systemd/system/zfs-import-scan.service.in
diff -urpN zfs-0.7.6/etc/zfs/Makefile.in zfs-0.7.11/etc/zfs/Makefile.in
diff -urpN zfs-0.7.6/include/Makefile.in zfs-0.7.11/include/Makefile.in
diff -urpN zfs-0.7.6/include/libzfs.h zfs-0.7.11/include/libzfs.h
diff -urpN zfs-0.7.6/include/linux/Makefile.am zfs-0.7.11/include/linux/Makefile.am
diff -urpN zfs-0.7.6/include/linux/Makefile.in zfs-0.7.11/include/linux/Makefile.in
diff -urpN zfs-0.7.6/include/linux/blkdev_compat.h zfs-0.7.11/include/linux/blkdev_compat.h
diff -urpN zfs-0.7.6/include/linux/page_compat.h zfs-0.7.11/include/linux/page_compat.h
diff -urpN zfs-0.7.6/include/linux/vfs_compat.h zfs-0.7.11/include/linux/vfs_compat.h
diff -urpN zfs-0.7.6/include/sys/Makefile.in zfs-0.7.11/include/sys/Makefile.in
diff -urpN zfs-0.7.6/include/sys/crypto/Makefile.in zfs-0.7.11/include/sys/crypto/Makefile.in
diff -urpN zfs-0.7.6/include/sys/dmu.h zfs-0.7.11/include/sys/dmu.h
diff -urpN zfs-0.7.6/include/sys/dmu_objset.h zfs-0.7.11/include/sys/dmu_objset.h
diff -urpN zfs-0.7.6/include/sys/dmu_tx.h zfs-0.7.11/include/sys/dmu_tx.h
diff -urpN zfs-0.7.6/include/sys/dnode.h zfs-0.7.11/include/sys/dnode.h
diff -urpN zfs-0.7.6/include/sys/dsl_dir.h zfs-0.7.11/include/sys/dsl_dir.h
diff -urpN zfs-0.7.6/include/sys/fm/Makefile.in zfs-0.7.11/include/sys/fm/Makefile.in
diff -urpN zfs-0.7.6/include/sys/fm/fs/Makefile.in zfs-0.7.11/include/sys/fm/fs/Makefile.in
diff -urpN zfs-0.7.6/include/sys/fs/Makefile.in zfs-0.7.11/include/sys/fs/Makefile.in
diff -urpN zfs-0.7.6/include/sys/fs/zfs.h zfs-0.7.11/include/sys/fs/zfs.h
diff -urpN zfs-0.7.6/include/sys/mmp.h zfs-0.7.11/include/sys/mmp.h
diff -urpN zfs-0.7.6/include/sys/spa.h zfs-0.7.11/include/sys/spa.h
diff -urpN zfs-0.7.6/include/sys/spa_impl.h zfs-0.7.11/include/sys/spa_impl.h
diff -urpN zfs-0.7.6/include/sys/sysevent/Makefile.in zfs-0.7.11/include/sys/sysevent/Makefile.in
diff -urpN zfs-0.7.6/include/sys/trace_acl.h zfs-0.7.11/include/sys/trace_acl.h
diff -urpN zfs-0.7.6/include/sys/trace_dmu.h zfs-0.7.11/include/sys/trace_dmu.h
diff -urpN zfs-0.7.6/include/sys/vdev_impl.h zfs-0.7.11/include/sys/vdev_impl.h
diff -urpN zfs-0.7.6/include/sys/xvattr.h zfs-0.7.11/include/sys/xvattr.h
diff -urpN zfs-0.7.6/include/sys/zap_leaf.h zfs-0.7.11/include/sys/zap_leaf.h
diff -urpN zfs-0.7.6/include/sys/zfs_context.h zfs-0.7.11/include/sys/zfs_context.h
diff -urpN zfs-0.7.6/include/sys/zfs_ratelimit.h zfs-0.7.11/include/sys/zfs_ratelimit.h
diff -urpN zfs-0.7.6/include/sys/zfs_vfsops.h zfs-0.7.11/include/sys/zfs_vfsops.h
diff -urpN zfs-0.7.6/include/sys/zfs_vnops.h zfs-0.7.11/include/sys/zfs_vnops.h
diff -urpN zfs-0.7.6/include/sys/zfs_znode.h zfs-0.7.11/include/sys/zfs_znode.h
diff -urpN zfs-0.7.6/include/sys/zio.h zfs-0.7.11/include/sys/zio.h
diff -urpN zfs-0.7.6/include/sys/zpl.h zfs-0.7.11/include/sys/zpl.h
diff -urpN zfs-0.7.6/lib/Makefile.in zfs-0.7.11/lib/Makefile.in
diff -urpN zfs-0.7.6/lib/libavl/Makefile.in zfs-0.7.11/lib/libavl/Makefile.in
diff -urpN zfs-0.7.6/lib/libefi/Makefile.in zfs-0.7.11/lib/libefi/Makefile.in
diff -urpN zfs-0.7.6/lib/libefi/rdwr_efi.c zfs-0.7.11/lib/libefi/rdwr_efi.c
diff -urpN zfs-0.7.6/lib/libicp/Makefile.in zfs-0.7.11/lib/libicp/Makefile.in
diff -urpN zfs-0.7.6/lib/libnvpair/Makefile.in zfs-0.7.11/lib/libnvpair/Makefile.in
diff -urpN zfs-0.7.6/lib/libshare/Makefile.in zfs-0.7.11/lib/libshare/Makefile.in
diff -urpN zfs-0.7.6/lib/libshare/smb.c zfs-0.7.11/lib/libshare/smb.c
diff -urpN zfs-0.7.6/lib/libspl/Makefile.am zfs-0.7.11/lib/libspl/Makefile.am
diff -urpN zfs-0.7.6/lib/libspl/Makefile.in zfs-0.7.11/lib/libspl/Makefile.in
diff -urpN zfs-0.7.6/lib/libspl/asm-generic/Makefile.in zfs-0.7.11/lib/libspl/asm-generic/Makefile.in
diff -urpN zfs-0.7.6/lib/libspl/asm-i386/Makefile.in zfs-0.7.11/lib/libspl/asm-i386/Makefile.in
diff -urpN zfs-0.7.6/lib/libspl/asm-x86_64/Makefile.in zfs-0.7.11/lib/libspl/asm-x86_64/Makefile.in
diff -urpN zfs-0.7.6/lib/libspl/gethrestime.c zfs-0.7.11/lib/libspl/gethrestime.c
diff -urpN zfs-0.7.6/lib/libspl/gethrtime.c zfs-0.7.11/lib/libspl/gethrtime.c
diff -urpN zfs-0.7.6/lib/libspl/include/Makefile.in zfs-0.7.11/lib/libspl/include/Makefile.in
diff -urpN zfs-0.7.6/lib/libspl/include/ia32/Makefile.in zfs-0.7.11/lib/libspl/include/ia32/Makefile.in
diff -urpN zfs-0.7.6/lib/libspl/include/ia32/sys/Makefile.in zfs-0.7.11/lib/libspl/include/ia32/sys/Makefile.in
diff -urpN zfs-0.7.6/lib/libspl/include/rpc/Makefile.in zfs-0.7.11/lib/libspl/include/rpc/Makefile.in
diff -urpN zfs-0.7.6/lib/libspl/include/sys/Makefile.in zfs-0.7.11/lib/libspl/include/sys/Makefile.in
diff -urpN zfs-0.7.6/lib/libspl/include/sys/dktp/Makefile.in zfs-0.7.11/lib/libspl/include/sys/dktp/Makefile.in
diff -urpN zfs-0.7.6/lib/libspl/include/sys/isa_defs.h zfs-0.7.11/lib/libspl/include/sys/isa_defs.h
diff -urpN zfs-0.7.6/lib/libspl/include/sys/kstat.h zfs-0.7.11/lib/libspl/include/sys/kstat.h
diff -urpN zfs-0.7.6/lib/libspl/include/sys/time.h zfs-0.7.11/lib/libspl/include/sys/time.h
diff -urpN zfs-0.7.6/lib/libspl/include/umem.h zfs-0.7.11/lib/libspl/include/umem.h
diff -urpN zfs-0.7.6/lib/libspl/include/util/Makefile.in zfs-0.7.11/lib/libspl/include/util/Makefile.in
diff -urpN zfs-0.7.6/lib/libunicode/Makefile.in zfs-0.7.11/lib/libunicode/Makefile.in
diff -urpN zfs-0.7.6/lib/libuutil/Makefile.in zfs-0.7.11/lib/libuutil/Makefile.in
diff -urpN zfs-0.7.6/lib/libzfs/Makefile.in zfs-0.7.11/lib/libzfs/Makefile.in
diff -urpN zfs-0.7.6/lib/libzfs/libzfs.pc zfs-0.7.11/lib/libzfs/libzfs.pc
diff -urpN zfs-0.7.6/lib/libzfs/libzfs_core.pc zfs-0.7.11/lib/libzfs/libzfs_core.pc
diff -urpN zfs-0.7.6/lib/libzfs/libzfs_dataset.c zfs-0.7.11/lib/libzfs/libzfs_dataset.c
diff -urpN zfs-0.7.6/lib/libzfs/libzfs_import.c zfs-0.7.11/lib/libzfs/libzfs_import.c
diff -urpN zfs-0.7.6/lib/libzfs/libzfs_pool.c zfs-0.7.11/lib/libzfs/libzfs_pool.c
diff -urpN zfs-0.7.6/lib/libzfs/libzfs_sendrecv.c zfs-0.7.11/lib/libzfs/libzfs_sendrecv.c
diff -urpN zfs-0.7.6/lib/libzfs/libzfs_status.c zfs-0.7.11/lib/libzfs/libzfs_status.c
diff -urpN zfs-0.7.6/lib/libzfs_core/Makefile.in zfs-0.7.11/lib/libzfs_core/Makefile.in
diff -urpN zfs-0.7.6/lib/libzpool/Makefile.in zfs-0.7.11/lib/libzpool/Makefile.in
diff -urpN zfs-0.7.6/lib/libzpool/kernel.c zfs-0.7.11/lib/libzpool/kernel.c
diff -urpN zfs-0.7.6/man/Makefile.in zfs-0.7.11/man/Makefile.in
diff -urpN zfs-0.7.6/man/man1/Makefile.in zfs-0.7.11/man/man1/Makefile.in
diff -urpN zfs-0.7.6/man/man5/Makefile.in zfs-0.7.11/man/man5/Makefile.in
diff -urpN zfs-0.7.6/man/man5/zfs-module-parameters.5 zfs-0.7.11/man/man5/zfs-module-parameters.5
diff -urpN zfs-0.7.6/man/man5/zpool-features.5 zfs-0.7.11/man/man5/zpool-features.5
diff -urpN zfs-0.7.6/man/man8/Makefile.in zfs-0.7.11/man/man8/Makefile.in
diff -urpN zfs-0.7.6/man/man8/zdb.8 zfs-0.7.11/man/man8/zdb.8
diff -urpN zfs-0.7.6/man/man8/zed.8.in zfs-0.7.11/man/man8/zed.8.in
diff -urpN zfs-0.7.6/man/man8/zfs.8 zfs-0.7.11/man/man8/zfs.8
diff -urpN zfs-0.7.6/man/man8/zinject.8 zfs-0.7.11/man/man8/zinject.8
diff -urpN zfs-0.7.6/man/man8/zpool.8 zfs-0.7.11/man/man8/zpool.8
diff -urpN zfs-0.7.6/module/icp/algs/modes/ccm.c zfs-0.7.11/module/icp/algs/modes/ccm.c
diff -urpN zfs-0.7.6/module/icp/core/kcf_mech_tabs.c zfs-0.7.11/module/icp/core/kcf_mech_tabs.c
diff -urpN zfs-0.7.6/module/zcommon/zfs_comutil.c zfs-0.7.11/module/zcommon/zfs_comutil.c
diff -urpN zfs-0.7.6/module/zfs/arc.c zfs-0.7.11/module/zfs/arc.c
diff -urpN zfs-0.7.6/module/zfs/dmu_object.c zfs-0.7.11/module/zfs/dmu_object.c
diff -urpN zfs-0.7.6/module/zfs/dmu_objset.c zfs-0.7.11/module/zfs/dmu_objset.c
diff -urpN zfs-0.7.6/module/zfs/dmu_send.c zfs-0.7.11/module/zfs/dmu_send.c
diff -urpN zfs-0.7.6/module/zfs/dmu_traverse.c zfs-0.7.11/module/zfs/dmu_traverse.c
diff -urpN zfs-0.7.6/module/zfs/dmu_tx.c zfs-0.7.11/module/zfs/dmu_tx.c
diff -urpN zfs-0.7.6/module/zfs/dnode.c zfs-0.7.11/module/zfs/dnode.c
diff -urpN zfs-0.7.6/module/zfs/dnode_sync.c zfs-0.7.11/module/zfs/dnode_sync.c
diff -urpN zfs-0.7.6/module/zfs/dsl_dir.c zfs-0.7.11/module/zfs/dsl_dir.c
diff -urpN zfs-0.7.6/module/zfs/fm.c zfs-0.7.11/module/zfs/fm.c
diff -urpN zfs-0.7.6/module/zfs/metaslab.c zfs-0.7.11/module/zfs/metaslab.c
diff -urpN zfs-0.7.6/module/zfs/mmp.c zfs-0.7.11/module/zfs/mmp.c
diff -urpN zfs-0.7.6/module/zfs/policy.c zfs-0.7.11/module/zfs/policy.c
diff -urpN zfs-0.7.6/module/zfs/qat_compress.c zfs-0.7.11/module/zfs/qat_compress.c
diff -urpN zfs-0.7.6/module/zfs/sa.c zfs-0.7.11/module/zfs/sa.c
diff -urpN zfs-0.7.6/module/zfs/spa.c zfs-0.7.11/module/zfs/spa.c
diff -urpN zfs-0.7.6/module/zfs/spa_config.c zfs-0.7.11/module/zfs/spa_config.c
diff -urpN zfs-0.7.6/module/zfs/spa_misc.c zfs-0.7.11/module/zfs/spa_misc.c
diff -urpN zfs-0.7.6/module/zfs/spa_stats.c zfs-0.7.11/module/zfs/spa_stats.c
diff -urpN zfs-0.7.6/module/zfs/vdev.c zfs-0.7.11/module/zfs/vdev.c
diff -urpN zfs-0.7.6/module/zfs/vdev_disk.c zfs-0.7.11/module/zfs/vdev_disk.c
diff -urpN zfs-0.7.6/module/zfs/vdev_label.c zfs-0.7.11/module/zfs/vdev_label.c
diff -urpN zfs-0.7.6/module/zfs/zap.c zfs-0.7.11/module/zfs/zap.c
diff -urpN zfs-0.7.6/module/zfs/zap_leaf.c zfs-0.7.11/module/zfs/zap_leaf.c
diff -urpN zfs-0.7.6/module/zfs/zap_micro.c zfs-0.7.11/module/zfs/zap_micro.c
diff -urpN zfs-0.7.6/module/zfs/zfs_acl.c zfs-0.7.11/module/zfs/zfs_acl.c
diff -urpN zfs-0.7.6/module/zfs/zfs_ctldir.c zfs-0.7.11/module/zfs/zfs_ctldir.c
diff -urpN zfs-0.7.6/module/zfs/zfs_dir.c zfs-0.7.11/module/zfs/zfs_dir.c
diff -urpN zfs-0.7.6/module/zfs/zfs_ioctl.c zfs-0.7.11/module/zfs/zfs_ioctl.c
diff -urpN zfs-0.7.6/module/zfs/zfs_vnops.c zfs-0.7.11/module/zfs/zfs_vnops.c
diff -urpN zfs-0.7.6/module/zfs/zfs_znode.c zfs-0.7.11/module/zfs/zfs_znode.c
diff -urpN zfs-0.7.6/module/zfs/zil.c zfs-0.7.11/module/zfs/zil.c
diff -urpN zfs-0.7.6/module/zfs/zio.c zfs-0.7.11/module/zfs/zio.c
diff -urpN zfs-0.7.6/module/zfs/zle.c zfs-0.7.11/module/zfs/zle.c
diff -urpN zfs-0.7.6/module/zfs/zpl_ctldir.c zfs-0.7.11/module/zfs/zpl_ctldir.c
diff -urpN zfs-0.7.6/module/zfs/zpl_file.c zfs-0.7.11/module/zfs/zpl_file.c
diff -urpN zfs-0.7.6/module/zfs/zpl_inode.c zfs-0.7.11/module/zfs/zpl_inode.c
diff -urpN zfs-0.7.6/module/zfs/zpl_super.c zfs-0.7.11/module/zfs/zpl_super.c
diff -urpN zfs-0.7.6/module/zfs/zvol.c zfs-0.7.11/module/zfs/zvol.c
diff -urpN zfs-0.7.6/module/zpios/pios.c zfs-0.7.11/module/zpios/pios.c
diff -urpN zfs-0.7.6/rpm/Makefile.in zfs-0.7.11/rpm/Makefile.in
diff -urpN zfs-0.7.6/rpm/generic/Makefile.in zfs-0.7.11/rpm/generic/Makefile.in
diff -urpN zfs-0.7.6/rpm/generic/zfs-kmod.spec.in zfs-0.7.11/rpm/generic/zfs-kmod.spec.in
diff -urpN zfs-0.7.6/rpm/generic/zfs.spec.in zfs-0.7.11/rpm/generic/zfs.spec.in
diff -urpN zfs-0.7.6/rpm/redhat/Makefile.in zfs-0.7.11/rpm/redhat/Makefile.in
diff -urpN zfs-0.7.6/rpm/redhat/zfs.spec.in zfs-0.7.11/rpm/redhat/zfs.spec.in
diff -urpN zfs-0.7.6/scripts/Makefile.am zfs-0.7.11/scripts/Makefile.am
diff -urpN zfs-0.7.6/scripts/Makefile.in zfs-0.7.11/scripts/Makefile.in
diff -urpN zfs-0.7.6/scripts/dkms.mkconf zfs-0.7.11/scripts/dkms.mkconf
diff -urpN zfs-0.7.6/scripts/enum-extract.pl zfs-0.7.11/scripts/enum-extract.pl
diff -urpN zfs-0.7.6/scripts/zpios-profile/Makefile.in zfs-0.7.11/scripts/zpios-profile/Makefile.in
diff -urpN zfs-0.7.6/scripts/zpios-test/Makefile.in zfs-0.7.11/scripts/zpios-test/Makefile.in
diff -urpN zfs-0.7.6/scripts/zpool-config/Makefile.in zfs-0.7.11/scripts/zpool-config/Makefile.in
diff -urpN zfs-0.7.6/tests/Makefile.in zfs-0.7.11/tests/Makefile.in
diff -urpN zfs-0.7.6/tests/runfiles/Makefile.am zfs-0.7.11/tests/runfiles/Makefile.am
diff -urpN zfs-0.7.6/tests/runfiles/Makefile.in zfs-0.7.11/tests/runfiles/Makefile.in
diff -urpN zfs-0.7.6/tests/runfiles/linux.run zfs-0.7.11/tests/runfiles/linux.run
diff -urpN zfs-0.7.6/tests/test-runner/Makefile.in zfs-0.7.11/tests/test-runner/Makefile.in
diff -urpN zfs-0.7.6/tests/test-runner/cmd/Makefile.in zfs-0.7.11/tests/test-runner/cmd/Makefile.in
diff -urpN zfs-0.7.6/tests/test-runner/include/Makefile.am zfs-0.7.11/tests/test-runner/include/Makefile.am
diff -urpN zfs-0.7.6/tests/test-runner/include/Makefile.in zfs-0.7.11/tests/test-runner/include/Makefile.in
diff -urpN zfs-0.7.6/tests/test-runner/include/logapi.shlib zfs-0.7.11/tests/test-runner/include/logapi.shlib
diff -urpN zfs-0.7.6/tests/test-runner/man/Makefile.in zfs-0.7.11/tests/test-runner/man/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/Makefile.in zfs-0.7.11/tests/zfs-tests/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/callbacks/Makefile.in zfs-0.7.11/tests/zfs-tests/callbacks/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/Makefile.am zfs-0.7.11/tests/zfs-tests/cmd/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/chg_usr_exec/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/chg_usr_exec/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/devname2devid/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/devname2devid/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/devname2devid/devname2devid.c zfs-0.7.11/tests/zfs-tests/cmd/devname2devid/devname2devid.c
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/dir_rd_update/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/dir_rd_update/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/file_check/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/file_check/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/file_trunc/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/file_trunc/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/file_write/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/file_write/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/largest_file/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/largest_file/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/mkbusy/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/mkbusy/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/mkbusy/mkbusy.c zfs-0.7.11/tests/zfs-tests/cmd/mkbusy/mkbusy.c
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/mkfile/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/mkfile/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/mkfiles/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/mkfiles/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/mktree/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/mktree/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/mktree/mktree.c zfs-0.7.11/tests/zfs-tests/cmd/mktree/mktree.c
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/mmap_exec/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/mmap_exec/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/mmap_libaio/Makefile.am zfs-0.7.11/tests/zfs-tests/cmd/mmap_libaio/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/mmap_libaio/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/mmap_libaio/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/mmap_libaio/mmap_libaio.c zfs-0.7.11/tests/zfs-tests/cmd/mmap_libaio/mmap_libaio.c
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/mmapwrite/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/mmapwrite/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/randfree_file/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/randfree_file/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/readmmap/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/readmmap/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/rename_dir/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/rename_dir/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/rm_lnkcnt_zero_file/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/rm_lnkcnt_zero_file/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/threadsappend/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/threadsappend/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/user_ns_exec/Makefile.am zfs-0.7.11/tests/zfs-tests/cmd/user_ns_exec/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/user_ns_exec/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/user_ns_exec/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/user_ns_exec/user_ns_exec.c zfs-0.7.11/tests/zfs-tests/cmd/user_ns_exec/user_ns_exec.c
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/xattrtest/Makefile.in zfs-0.7.11/tests/zfs-tests/cmd/xattrtest/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/cmd/xattrtest/xattrtest.c zfs-0.7.11/tests/zfs-tests/cmd/xattrtest/xattrtest.c
diff -urpN zfs-0.7.6/tests/zfs-tests/include/Makefile.am zfs-0.7.11/tests/zfs-tests/include/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/include/Makefile.in zfs-0.7.11/tests/zfs-tests/include/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/include/commands.cfg zfs-0.7.11/tests/zfs-tests/include/commands.cfg
diff -urpN zfs-0.7.6/tests/zfs-tests/include/libtest.shlib zfs-0.7.11/tests/zfs-tests/include/libtest.shlib
diff -urpN zfs-0.7.6/tests/zfs-tests/include/zpool_script.shlib zfs-0.7.11/tests/zfs-tests/include/zpool_script.shlib
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/acl/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/acl/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/acl/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/acl/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/acl/posix/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/acl/posix/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/atime/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/atime/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/atime/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/atime/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/bootfs/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/bootfs/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cache/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cache/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cache/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cache/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cachefile/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cachefile/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cachefile/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cachefile/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cachefile/cachefile.kshlib zfs-0.7.11/tests/zfs-tests/tests/functional/cachefile/cachefile.kshlib
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cachefile/cachefile_004_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cachefile/cachefile_004_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/casenorm/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/casenorm/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/casenorm/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/casenorm/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/casenorm/mixed_create_failure.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/casenorm/mixed_create_failure.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/chattr/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/chattr/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/checksum/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/checksum/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/checksum/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/checksum/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/clean_mirror/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/clean_mirror/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/clean_mirror/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/clean_mirror/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/clean_mirror/cleanup.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/clean_mirror/cleanup.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zdb/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zdb/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zdb/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zdb/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zdb/zdb_003_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zdb/zdb_003_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zdb/zdb_004_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zdb/zdb_004_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zdb/zdb_005_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zdb/zdb_005_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zdb/zdb_006_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zdb/zdb_006_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_clone/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_clone/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_copies/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_copies/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_copies/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_copies/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_create/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_create/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_create/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_create/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_destroy/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_destroy/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_destroy/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_destroy/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_destroy/zfs_destroy_002_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_destroy/zfs_destroy_002_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_get/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_get/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_get/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_get/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_inherit/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_inherit/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_mount/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_mount/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_mount/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_mount/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_mount/zfs_multi_mount.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_mount/zfs_multi_mount.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_promote/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_promote/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_promote/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_promote/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_promote/zfs_promote_008_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_promote/zfs_promote_008_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_property/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_property/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_receive/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_receive/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_receive/receive-o-x_props_override.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_receive/receive-o-x_props_override.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_rename/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_rename/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_rename/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_rename/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_reservation/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_reservation/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_rollback/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_rollback/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_rollback/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_rollback/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_send/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_send/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_send/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_send/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_set/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_set/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_set/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_set/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_share/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_share/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_share/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_share/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_snapshot/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_snapshot/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_snapshot/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_snapshot/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_unmount/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_unmount/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_unmount/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_unmount/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_unshare/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_unshare/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_upgrade/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_upgrade/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zfs_upgrade/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zfs_upgrade/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_add/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_add/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_add/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_add/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_attach/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_attach/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_clear/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_clear/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_clear/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_clear/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_create/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_create/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_create/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_create/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_create/create-o_ashift.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_create/create-o_ashift.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_destroy/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_destroy/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_destroy/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_destroy/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_detach/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_detach/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_expand/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_expand/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_expand/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_expand/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_export/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_export/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_export/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_export/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_get/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_get/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_get/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_get/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_history/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_history/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_import/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_import/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_import/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_import/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_labelclear/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_labelclear/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_labelclear/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_labelclear/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_labelclear/labelclear.cfg zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_labelclear/labelclear.cfg
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_offline/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_offline/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_online/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_online/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_remove/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_remove/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_remove/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_remove/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_replace/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_replace/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_scrub/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_scrub/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_scrub/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_scrub/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_set/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_set/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_status/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_status/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_sync/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_sync/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_upgrade/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_upgrade/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_root/zpool_upgrade/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_root/zpool_upgrade/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_user/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_user/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_user/misc/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_user/misc/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_user/misc/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_user/misc/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_user/zfs_list/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cli_user/zfs_list/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_user/zfs_list/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_user/zfs_list/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_user/zpool_iostat/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_user/zpool_iostat/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cli_user/zpool_list/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cli_user/zpool_list/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/compression/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/compression/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/compression/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/compression/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cp_files/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/cp_files/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cp_files/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/cp_files/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cp_files/cleanup.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cp_files/cleanup.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cp_files/cp_files.c zfs-0.7.11/tests/zfs-tests/tests/functional/cp_files/cp_files.c
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cp_files/cp_files_001_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cp_files/cp_files_001_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/cp_files/setup.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/cp_files/setup.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/ctime/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/ctime/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/ctime/ctime.c zfs-0.7.11/tests/zfs-tests/tests/functional/ctime/ctime.c
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/delegate/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/delegate/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/delegate/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/delegate/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/delegate/delegate_common.kshlib zfs-0.7.11/tests/zfs-tests/tests/functional/delegate/delegate_common.kshlib
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/devices/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/devices/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/devices/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/devices/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/events/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/events/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/events/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/events/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/events/cleanup.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/events/cleanup.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/events/setup.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/events/setup.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/events/zed_rc_filter.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/events/zed_rc_filter.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/exec/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/exec/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/fault/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/fault/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/fault/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/fault/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/fault/cleanup.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/fault/cleanup.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/fault/fault.cfg zfs-0.7.11/tests/zfs-tests/tests/functional/fault/fault.cfg
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/fault/scrub_after_resilver.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/fault/scrub_after_resilver.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/fault/setup.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/fault/setup.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/features/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/features/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/features/async_destroy/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/features/async_destroy/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/features/large_dnode/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/features/large_dnode/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/grow_pool/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/grow_pool/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/grow_pool/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/grow_pool/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/grow_replicas/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/grow_replicas/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/grow_replicas/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/grow_replicas/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/history/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/history/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/history/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/history/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/inheritance/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/inheritance/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/inheritance/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/inheritance/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/inuse/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/inuse/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/inuse/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/inuse/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/inuse/inuse_005_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/inuse/inuse_005_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/inuse/inuse_008_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/inuse/inuse_008_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/inuse/inuse_009_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/inuse/inuse_009_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/kstat/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/kstat/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/kstat/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/kstat/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/kstat/cleanup.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/kstat/cleanup.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/kstat/setup.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/kstat/setup.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/kstat/state.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/kstat/state.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/large_files/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/large_files/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/largest_pool/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/largest_pool/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/largest_pool/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/largest_pool/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/libzfs/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/libzfs/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/link_count/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/link_count/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/migration/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/migration/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_001_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_001_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_002_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_002_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_003_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_003_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_004_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_004_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_005_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_005_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_006_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_006_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_007_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_007_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_008_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_008_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_009_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_009_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_010_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_010_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_011_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_011_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/migration/migration_012_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/migration/migration_012_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmap/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/mmap/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmap/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/mmap/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmap/mmap_libaio_001_pos.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/mmap/mmap_libaio_001_pos.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmp/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/mmp/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmp/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/mmp/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmp/mmp.cfg zfs-0.7.11/tests/zfs-tests/tests/functional/mmp/mmp.cfg
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmp/mmp.kshlib zfs-0.7.11/tests/zfs-tests/tests/functional/mmp/mmp.kshlib
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmp/mmp_active_import.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/mmp/mmp_active_import.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmp/mmp_on_uberblocks.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/mmp/mmp_on_uberblocks.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmp/mmp_reset_interval.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/mmp/mmp_reset_interval.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmp/mmp_write_uberblocks.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/mmp/mmp_write_uberblocks.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mmp/multihost_history.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/mmp/multihost_history.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mount/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/mount/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mv_files/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/mv_files/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mv_files/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/mv_files/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mv_files/mv_files.cfg zfs-0.7.11/tests/zfs-tests/tests/functional/mv_files/mv_files.cfg
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/mv_files/random_creation.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/mv_files/random_creation.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/nestedfs/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/nestedfs/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/no_space/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/no_space/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/no_space/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/no_space/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/nopwrite/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/nopwrite/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/nopwrite/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/nopwrite/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/online_offline/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/online_offline/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/online_offline/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/online_offline/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/pool_names/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/pool_names/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/poolversion/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/poolversion/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/privilege/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/privilege/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/quota/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/quota/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/quota/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/quota/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/raidz/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/raidz/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/redundancy/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/redundancy/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/redundancy/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/redundancy/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/refquota/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/refquota/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/refreserv/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/refreserv/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/refreserv/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/refreserv/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/rename_dirs/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/rename_dirs/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/replacement/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/replacement/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/replacement/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/replacement/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/reservation/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/reservation/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/reservation/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/reservation/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/rootpool/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/rootpool/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/rsend/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/rsend/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/rsend/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/rsend/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/rsend/send_realloc_dnode_size.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/rsend/send_realloc_dnode_size.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/scrub_mirror/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/scrub_mirror/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/scrub_mirror/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/scrub_mirror/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/slog/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/slog/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/slog/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/slog/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/snapshot/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/snapshot/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/snapshot/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/snapshot/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/snapused/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/snapused/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/snapused/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/snapused/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/sparse/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/sparse/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/sparse/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/sparse/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/threadsappend/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/threadsappend/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/tmpfile/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/tmpfile/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/truncate/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/truncate/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/truncate/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/truncate/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/upgrade/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/upgrade/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/user_namespace/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/user_namespace/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/user_namespace/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/user_namespace/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/user_namespace/cleanup.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/user_namespace/cleanup.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/user_namespace/setup.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/user_namespace/setup.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/user_namespace/user_namespace.cfg zfs-0.7.11/tests/zfs-tests/tests/functional/user_namespace/user_namespace.cfg
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/user_namespace/user_namespace_001.ksh zfs-0.7.11/tests/zfs-tests/tests/functional/user_namespace/user_namespace_001.ksh
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/user_namespace/user_namespace_common.kshlib zfs-0.7.11/tests/zfs-tests/tests/functional/user_namespace/user_namespace_common.kshlib
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/userquota/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/userquota/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/userquota/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/userquota/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/vdev_zaps/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/vdev_zaps/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/vdev_zaps/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/vdev_zaps/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/write_dirs/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/write_dirs/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/write_dirs/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/write_dirs/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/write_dirs/write_dirs.cfg zfs-0.7.11/tests/zfs-tests/tests/functional/write_dirs/write_dirs.cfg
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/xattr/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/xattr/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/xattr/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/xattr/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/zvol_ENOSPC/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/zvol_ENOSPC/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/zvol_ENOSPC/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/zvol_ENOSPC/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/zvol_ENOSPC/zvol_ENOSPC.cfg zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/zvol_ENOSPC/zvol_ENOSPC.cfg
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/zvol_cli/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/zvol_cli/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/zvol_cli/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/zvol_cli/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/zvol_cli/zvol_cli.cfg zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/zvol_cli/zvol_cli.cfg
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/zvol_misc/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/zvol_misc/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/zvol_misc/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/zvol_misc/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/zvol_misc/zvol_misc_common.kshlib zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/zvol_misc/zvol_misc_common.kshlib
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/zvol_swap/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/zvol_swap/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/functional/zvol/zvol_swap/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/functional/zvol/zvol_swap/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/perf/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/perf/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/perf/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/perf/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/perf/fio/Makefile.am zfs-0.7.11/tests/zfs-tests/tests/perf/fio/Makefile.am
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/perf/fio/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/perf/fio/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/perf/regression/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/perf/regression/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/perf/scripts/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/perf/scripts/Makefile.in
diff -urpN zfs-0.7.6/tests/zfs-tests/tests/stress/Makefile.in zfs-0.7.11/tests/zfs-tests/tests/stress/Makefile.in
diff -urpN zfs-0.7.6/udev/Makefile.in zfs-0.7.11/udev/Makefile.in
diff -urpN zfs-0.7.6/udev/rules.d/Makefile.in zfs-0.7.11/udev/rules.d/Makefile.in
diff -urpN zfs-0.7.6/zfs_config.h.in zfs-0.7.11/zfs_config.h.in
