Index: cpufreq-dt.c
===================================================================
--- cpufreq-dt.c	(revision 53839)
+++ cpufreq-dt.c	(revision 53838)
@@ -21,12 +21,9 @@
 #include <linux/regulator/consumer.h>
 #include <linux/slab.h>
 #include <linux/thermal.h>
-#include <linux/fab_scaling.h>
 
 #include "cpufreq-dt.h"
 
-static DEFINE_PER_CPU(struct clk *, cpu_cores_clks);
-
 struct private_data {
 	struct list_head node;
 
@@ -35,10 +32,6 @@
 	struct cpufreq_frequency_table *freq_table;
 	bool have_static_opps;
 	int opp_token;
-	struct mutex lock;
-
-	struct notifier_block opp_nb;
-	unsigned long opp_freq;
 };
 
 static LIST_HEAD(priv_list);
@@ -61,75 +54,12 @@
 	return NULL;
 }
 
-
 static int set_target(struct cpufreq_policy *policy, unsigned int index)
 {
 	struct private_data *priv = policy->driver_data;
 	unsigned long freq = policy->freq_table[index].frequency;
-	struct clk *l2_clk = policy->l2_clk;
-	struct regulator *l2_regulator = policy->l2_regulator;
-	unsigned long l2_freq, target_l2_freq;
-	unsigned long l2_vol, target_l2_vol;
-	unsigned long target_freq;
-	int ret;
-	
-	mutex_lock(&priv->lock);
-	ret = dev_pm_opp_set_rate(priv->cpu_dev, freq * 1000);
 
-	if (!ret) {
-		if (policy->l2_rate_set) {
-			static unsigned long krait_l2[CONFIG_NR_CPUS] = { };
-			int cpu, l2_index, tol = 0;
-
-			target_freq = freq * 1000;
-
-			krait_l2[policy->cpu] = target_freq;
-			for_each_present_cpu(cpu)
-				target_freq = max(target_freq, krait_l2[cpu]);
-
-			for (l2_index = 2; l2_index >= 0; l2_index--)
-				if (target_freq >= policy->l2_cpufreq[l2_index])
-					break;
-
-			l2_freq = clk_get_rate(l2_clk);
-			target_l2_freq = policy->l2_rate[l2_index];
-
-			if (l2_freq != target_l2_freq) {
-
-				/*
-				 * Set to idle bin if switching from normal to high bin 
-				 * or vice versa
-				 */
-				if ( (l2_index == 2 && l2_freq == policy->l2_rate[1]) ||
-					 (l2_index == 1 && l2_freq == policy->l2_rate[2]) ) {
-					ret = clk_set_rate(l2_clk, policy->l2_rate[0]);
-					if (ret)
-						goto exit;
-				}
-				/* scale l2 with the core */
-				ret = clk_set_rate(l2_clk, target_l2_freq);
-				if (ret)
-					goto exit;
-
-				if (policy->l2_volt_set) {
-
-					l2_vol = regulator_get_voltage(l2_regulator);
-					target_l2_vol = policy->l2_volt[l2_index];
-
-					if (l2_vol != target_l2_vol) {
-						tol = target_l2_vol * policy->l2_volt_tol / 100;
-						ret = regulator_set_voltage_tol(l2_regulator,target_l2_vol,tol);
-						if (ret)
-							goto exit;
-					}
-				}
-			}
-		}
-	}
-	exit:;
-	mutex_unlock(&priv->lock);
-
-	return ret;
+	return dev_pm_opp_set_rate(priv->cpu_dev, freq * 1000);
 }
 
 /*
@@ -170,51 +100,13 @@
 	return name;
 }
 
-static int opp_notifier(struct notifier_block *nb, unsigned long event,
-			void *data)
-{
-	struct dev_pm_opp *opp = data;
-	struct private_data *priv = container_of(nb, struct private_data,
-						 opp_nb);
-	struct device *cpu_dev = priv->cpu_dev;
-	struct regulator *cpu_reg;
-	unsigned long volt, freq;
-	int ret = 0;
-
-	if (event == OPP_EVENT_ADJUST_VOLTAGE) {
-		cpu_reg = dev_pm_opp_get_regulator(cpu_dev);
-		if (IS_ERR(cpu_reg)) {
-			ret = PTR_ERR(cpu_reg);
-			goto out;
-		}
-		volt = dev_pm_opp_get_voltage(opp);
-		freq = dev_pm_opp_get_freq(opp);
-
-		mutex_lock(&priv->lock);
-		if (freq == priv->opp_freq) {
-			ret = regulator_set_voltage_triplet(cpu_reg, volt, volt, volt);
-		}
-		mutex_unlock(&priv->lock);
-		if (ret)
-			dev_err(cpu_dev, "failed to scale voltage: %d\n", ret);
-	}
-
-out:
-	return notifier_from_errno(ret);
-}
-
 static int cpufreq_init(struct cpufreq_policy *policy)
 {
 	struct private_data *priv;
 	struct device *cpu_dev;
 	struct clk *cpu_clk;
-	struct device_node *np;
 	unsigned int transition_latency;
-	int ret, cpu;
-	struct device_node *l2_np;
-	struct clk *l2_clk = NULL;
-	struct regulator *l2_regulator = NULL;
-	
+	int ret;
 
 	priv = cpufreq_dt_find_data(policy->cpu);
 	if (!priv) {
@@ -223,10 +115,7 @@
 	}
 	cpu_dev = priv->cpu_dev;
 
-	for_each_possible_cpu(cpu)
-		per_cpu(cpu_cores_clks, cpu) = clk_get(get_cpu_device(cpu), NULL);
-
-	cpu_clk = per_cpu(cpu_cores_clks, policy->cpu);
+	cpu_clk = clk_get(cpu_dev, NULL);
 	if (IS_ERR(cpu_clk)) {
 		ret = PTR_ERR(cpu_clk);
 		dev_err(cpu_dev, "%s: failed to get clk: %d\n", __func__, ret);
@@ -245,59 +134,6 @@
 	policy->cpuinfo.transition_latency = transition_latency;
 	policy->dvfs_possible_from_any_cpu = true;
 
-	policy->l2_rate_set = false;
-	policy->l2_volt_set = false;
-
-	l2_clk = clk_get(cpu_dev, "l2");
-	if (!IS_ERR(l2_clk))
-		policy->l2_clk = l2_clk;
-
-	l2_np = of_find_node_by_name(NULL, "l2-cache");
-	if (l2_np) {
-		struct device_node *vdd;
-		np = of_node_get(priv->cpu_dev->of_node);
-
-		if (np)
-			of_property_read_u32(np, "voltage-tolerance", &policy->l2_volt_tol);
-
-		of_property_read_u32_array(l2_np, "qcom,l2-rates", policy->l2_rate, 3);
-		if (policy->l2_rate[0] && policy->l2_rate[1] && policy->l2_rate[2]) {
-			policy->l2_rate_set = true;
-			of_property_read_u32_array(l2_np, "qcom,l2-cpufreq", policy->l2_cpufreq, 3);
-			of_property_read_u32_array(l2_np, "qcom,l2-volt", policy->l2_volt, 3);
-		} else
-			pr_warn("L2: failed to parse L2 rates\n");
-
-		if (!policy->l2_cpufreq[0] && !policy->l2_cpufreq[1] && 
-			!policy->l2_cpufreq[2] && policy->l2_rate_set) {
-			int i;
-
-			pr_warn("L2: failed to parse target cpu freq, using defaults\n");
-			for (i = 0; i < 3; i++)
-				policy->l2_cpufreq[i] = policy->l2_rate[i];
-		}
-
-		if (policy->l2_volt[0] && policy->l2_volt[1] && policy->l2_volt[2] &&
-			policy->l2_volt_tol && policy->l2_rate_set) {
-			vdd = of_parse_phandle(l2_np, "qcom,l2-supply", 0);
-
-			if (vdd) {
-				l2_regulator = devm_regulator_get(cpu_dev, vdd->name);
-				if (!IS_ERR(l2_regulator)) {
-					policy->l2_regulator = l2_regulator;
-					policy->l2_volt_set = true;
-				} else {
-					pr_warn("failed to get l2 supply\n");
-					l2_regulator = NULL;
-				}
-
-				of_node_put(vdd);
-			}
-		}
-	} else {
-		pr_warn("L2: disable fab scaling\n");
-	}
-
 	/* Support turbo/boost mode */
 	if (policy_has_boost_freq(policy)) {
 		/* This gets disabled by core on driver unregister */
@@ -377,6 +213,7 @@
 
 	cpumask_set_cpu(cpu, priv->cpus);
 	priv->cpu_dev = cpu_dev;
+
 	/*
 	 * OPP layer will be taking care of regulators now, but it needs to know
 	 * the name of the regulator first.
@@ -443,14 +280,10 @@
 				__func__, ret);
 	}
 
-	mutex_init(&priv->lock);
-	priv->opp_nb.notifier_call = opp_notifier;
-	dev_pm_opp_register_notifier(cpu_dev, &priv->opp_nb);
-
 	ret = dev_pm_opp_init_cpufreq_table(cpu_dev, &priv->freq_table);
 	if (ret) {
 		dev_err(cpu_dev, "failed to init cpufreq table: %d\n", ret);
-		goto out_unregister_nb;
+		goto out;
 	}
 
 	list_add(&priv->node, &priv_list);
@@ -460,8 +293,6 @@
 	if (priv->have_static_opps)
 		dev_pm_opp_of_cpumask_remove_table(priv->cpus);
 	dev_pm_opp_put_regulators(priv->opp_token);
-out_unregister_nb:
-	dev_pm_opp_unregister_notifier(cpu_dev, &priv->opp_nb);
 free_cpumask:
 	free_cpumask_var(priv->cpus);
 	return ret;
@@ -511,6 +342,7 @@
 		dev_err(&pdev->dev, "failed register driver: %d\n", ret);
 		goto err;
 	}
+
 	return 0;
 err:
 	dt_cpufreq_release();
